<Productions>
AdditiveExpression[Yield, Await] :
  MultiplicativeExpression[?Yield, ?Await]
  AdditiveExpression[?Yield, ?Await] `+` MultiplicativeExpression[?Yield, ?Await]
  AdditiveExpression[?Yield, ?Await] `-` MultiplicativeExpression[?Yield, ?Await]

ArgumentList[Yield, Await] :
  AssignmentExpression[+In, ?Yield, ?Await]
  `...` AssignmentExpression[+In, ?Yield, ?Await]
  ArgumentList[?Yield, ?Await] `,` AssignmentExpression[+In, ?Yield, ?Await]
  ArgumentList[?Yield, ?Await] `,` `...` AssignmentExpression[+In, ?Yield, ?Await]

Arguments[Yield, Await] :
  `(` `)`
  `(` ArgumentList[?Yield, ?Await] `)`
  `(` ArgumentList[?Yield, ?Await] `,` `)`

ArrayAssignmentPattern[Yield, Await] :
  `[` Elision? AssignmentRestElement[?Yield, ?Await]? `]`
  `[` AssignmentElementList[?Yield, ?Await] `]`
  `[` AssignmentElementList[?Yield, ?Await] `,` Elision? AssignmentRestElement[?Yield, ?Await]? `]`

ArrayBindingPattern[Yield, Await] :
  `[` Elision? BindingRestElement[?Yield, ?Await]? `]`
  `[` BindingElementList[?Yield, ?Await] `]`
  `[` BindingElementList[?Yield, ?Await] `,` Elision? BindingRestElement[?Yield, ?Await]? `]`

ArrayLiteral[Yield, Await] :
  `[` Elision? `]`
  `[` ElementList[?Yield, ?Await] `]`
  `[` ElementList[?Yield, ?Await] `,` Elision? `]`

ArrowFormalParameters[Yield, Await] :
  `(` UniqueFormalParameters[?Yield, ?Await] `)`

ArrowFunction[In, Yield, Await] :
  ArrowParameters[?Yield, ?Await] [no LineTerminator here] `=>` ConciseBody[?In]

ArrowParameters[Yield, Await] :
  BindingIdentifier[?Yield, ?Await]
  CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await] #parencover

AssignmentElement[Yield, Await] :
  DestructuringAssignmentTarget[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

AssignmentElementList[Yield, Await] :
  AssignmentElisionElement[?Yield, ?Await]
  AssignmentElementList[?Yield, ?Await] `,` AssignmentElisionElement[?Yield, ?Await]

AssignmentElisionElement[Yield, Await] :
  Elision? AssignmentElement[?Yield, ?Await]

AssignmentExpression[In, Yield, Await] :
  ConditionalExpression[?In, ?Yield, ?Await]
  [+Yield] YieldExpression[?In, ?Await]
  ArrowFunction[?In, ?Yield, ?Await]
  AsyncArrowFunction[?In, ?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] `=` AssignmentExpression[?In, ?Yield, ?Await] #assignment
  LeftHandSideExpression[?Yield, ?Await] AssignmentOperator AssignmentExpression[?In, ?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] `&&=` AssignmentExpression[?In, ?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] `||=` AssignmentExpression[?In, ?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] `??=` AssignmentExpression[?In, ?Yield, ?Await]

AssignmentOperator : one of
  `*=` `/=` `%=` `+=` `-=` `<<=` `>>=` `>>>=` `&=` `^=` `|=` `**=`

AssignmentPattern[Yield, Await] :
  ObjectAssignmentPattern[?Yield, ?Await]
  ArrayAssignmentPattern[?Yield, ?Await]

AssignmentProperty[Yield, Await] :
  IdentifierReference[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?
  PropertyName[?Yield, ?Await] `:` AssignmentElement[?Yield, ?Await]

AssignmentPropertyList[Yield, Await] :
  AssignmentProperty[?Yield, ?Await]
  AssignmentPropertyList[?Yield, ?Await] `,` AssignmentProperty[?Yield, ?Await]

AssignmentRestElement[Yield, Await] :
  `...` DestructuringAssignmentTarget[?Yield, ?Await]

AssignmentRestProperty[Yield, Await] :
  `...` DestructuringAssignmentTarget[?Yield, ?Await]

AsyncArrowBindingIdentifier[Yield] :
  BindingIdentifier[?Yield, +Await]

AsyncArrowFunction[In, Yield, Await] :
  `async` [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] `=>` AsyncConciseBody[?In]
  CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await] [no LineTerminator here] `=>` AsyncConciseBody[?In] #callcover

AsyncArrowHead :
  `async` [no LineTerminator here] ArrowFormalParameters[~Yield, +Await]

AsyncConciseBody[In] :
  [lookahead <! {`{`}] ExpressionBody[?In, +Await]
  `{` AsyncFunctionBody `}`

AsyncFunctionBody :
  FunctionBody[~Yield, +Await]

AsyncFunctionDeclaration[Yield, Await, Default] :
  `async` [no LineTerminator here] `function` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`
  [+Default] `async` [no LineTerminator here] `function` `(` FormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`

AsyncFunctionExpression :
  `async` [no LineTerminator here] `function` BindingIdentifier[~Yield, +Await]? `(` FormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`

AsyncGeneratorBody :
  FunctionBody[+Yield, +Await]

AsyncGeneratorDeclaration[Yield, Await, Default] :
  `async` [no LineTerminator here] `function` `*` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`
  [+Default] `async` [no LineTerminator here] `function` `*` `(` FormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`

AsyncGeneratorExpression :
  `async` [no LineTerminator here] `function` `*` BindingIdentifier[+Yield, +Await]? `(` FormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`

AsyncGeneratorMethod[Yield, Await] :
  `async` [no LineTerminator here] `*` ClassElementName[?Yield, ?Await] `(` UniqueFormalParameters[+Yield, +Await] `)` `{` AsyncGeneratorBody `}`

AsyncMethod[Yield, Await] :
  `async` [no LineTerminator here] ClassElementName[?Yield, ?Await] `(` UniqueFormalParameters[~Yield, +Await] `)` `{` AsyncFunctionBody `}`

AwaitExpression[Yield] :
  `await` UnaryExpression[?Yield, +Await]

BindingElement[Yield, Await] :
  SingleNameBinding[?Yield, ?Await]
  BindingPattern[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

BindingElementList[Yield, Await] :
  BindingElisionElement[?Yield, ?Await]
  BindingElementList[?Yield, ?Await] `,` BindingElisionElement[?Yield, ?Await]

BindingElisionElement[Yield, Await] :
  Elision? BindingElement[?Yield, ?Await]

BindingIdentifier[Yield, Await] :
  Identifier
  `yield`
  `await`

BindingList[In, Yield, Await] :
  LexicalBinding[?In, ?Yield, ?Await]
  BindingList[?In, ?Yield, ?Await] `,` LexicalBinding[?In, ?Yield, ?Await]

BindingPattern[Yield, Await] :
  ObjectBindingPattern[?Yield, ?Await]
  ArrayBindingPattern[?Yield, ?Await]

BindingProperty[Yield, Await] :
  SingleNameBinding[?Yield, ?Await]
  PropertyName[?Yield, ?Await] `:` BindingElement[?Yield, ?Await]

BindingPropertyList[Yield, Await] :
  BindingProperty[?Yield, ?Await]
  BindingPropertyList[?Yield, ?Await] `,` BindingProperty[?Yield, ?Await]

BindingRestElement[Yield, Await] :
  `...` BindingIdentifier[?Yield, ?Await]
  `...` BindingPattern[?Yield, ?Await]

BindingRestProperty[Yield, Await] :
  `...` BindingIdentifier[?Yield, ?Await]

BitwiseANDExpression[In, Yield, Await] :
  EqualityExpression[?In, ?Yield, ?Await]
  BitwiseANDExpression[?In, ?Yield, ?Await] `&` EqualityExpression[?In, ?Yield, ?Await]

BitwiseORExpression[In, Yield, Await] :
  BitwiseXORExpression[?In, ?Yield, ?Await]
  BitwiseORExpression[?In, ?Yield, ?Await] `|` BitwiseXORExpression[?In, ?Yield, ?Await]

BitwiseXORExpression[In, Yield, Await] :
  BitwiseANDExpression[?In, ?Yield, ?Await]
  BitwiseXORExpression[?In, ?Yield, ?Await] `^` BitwiseANDExpression[?In, ?Yield, ?Await]

Block[Yield, Await, Return] :
  `{` StatementList[?Yield, ?Await, ?Return]? `}`

BlockStatement[Yield, Await, Return] :
  Block[?Yield, ?Await, ?Return]

BreakStatement[Yield, Await] :
  `break` `;`
  `break` [no LineTerminator here] LabelIdentifier[?Yield, ?Await] `;`

BreakableStatement[Yield, Await, Return] :
  IterationStatement[?Yield, ?Await, ?Return]
  SwitchStatement[?Yield, ?Await, ?Return]

CallExpression[Yield, Await] :
  CoverCallExpressionAndAsyncArrowHead[?Yield, ?Await] #callcover
  SuperCall[?Yield, ?Await]
  ImportCall[?Yield, ?Await]
  CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]
  CallExpression[?Yield, ?Await] `[` Expression[+In, ?Yield, ?Await] `]`
  CallExpression[?Yield, ?Await] `.` IdentifierName
  CallExpression[?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]
  CallExpression[?Yield, ?Await] `.` PrivateIdentifier

CallMemberExpression[Yield, Await] :
  MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]

CaseBlock[Yield, Await, Return] :
  `{` CaseClauses[?Yield, ?Await, ?Return]? `}`
  `{` CaseClauses[?Yield, ?Await, ?Return]? DefaultClause[?Yield, ?Await, ?Return] CaseClauses[?Yield, ?Await, ?Return]? `}`

CaseClause[Yield, Await, Return] :
  `case` Expression[+In, ?Yield, ?Await] `:` StatementList[?Yield, ?Await, ?Return]?

CaseClauses[Yield, Await, Return] :
  CaseClause[?Yield, ?Await, ?Return]
  CaseClauses[?Yield, ?Await, ?Return] CaseClause[?Yield, ?Await, ?Return]

Catch[Yield, Await, Return] :
  `catch` `(` CatchParameter[?Yield, ?Await] `)` Block[?Yield, ?Await, ?Return]
  `catch` Block[?Yield, ?Await, ?Return]

CatchParameter[Yield, Await] :
  BindingIdentifier[?Yield, ?Await]
  BindingPattern[?Yield, ?Await]

ClassBody[Yield, Await] :
  ClassElementList[?Yield, ?Await]

ClassDeclaration[Yield, Await, Default] :
  `class` BindingIdentifier[?Yield, ?Await] ClassTail[?Yield, ?Await]
  [+Default] `class` ClassTail[?Yield, ?Await]

ClassElement[Yield, Await] :
  MethodDefinition[?Yield, ?Await]
  `static` MethodDefinition[?Yield, ?Await]
  FieldDefinition[?Yield, ?Await] `;`
  `static` FieldDefinition[?Yield, ?Await] `;`
  ClassStaticBlock
  `;`

ClassElementList[Yield, Await] :
  ClassElement[?Yield, ?Await]
  ClassElementList[?Yield, ?Await] ClassElement[?Yield, ?Await]

ClassElementName[Yield, Await] :
  PropertyName[?Yield, ?Await]
  PrivateIdentifier

ClassExpression[Yield, Await] :
  `class` BindingIdentifier[?Yield, ?Await]? ClassTail[?Yield, ?Await]

ClassHeritage[Yield, Await] :
  `extends` LeftHandSideExpression[?Yield, ?Await]

ClassStaticBlock :
  `static` `{` ClassStaticBlockBody `}`

ClassStaticBlockBody :
  ClassStaticBlockStatementList

ClassStaticBlockStatementList :
  StatementList[~Yield, +Await, ~Return]?

ClassTail[Yield, Await] :
  ClassHeritage[?Yield, ?Await]? `{` ClassBody[?Yield, ?Await]? `}`

CoalesceExpression[In, Yield, Await] :
  CoalesceExpressionHead[?In, ?Yield, ?Await] `??` BitwiseORExpression[?In, ?Yield, ?Await]

CoalesceExpressionHead[In, Yield, Await] :
  CoalesceExpression[?In, ?Yield, ?Await]
  BitwiseORExpression[?In, ?Yield, ?Await]

ComputedPropertyName[Yield, Await] :
  `[` AssignmentExpression[+In, ?Yield, ?Await] `]`

ConciseBody[In] :
  [lookahead <! {`{`}] ExpressionBody[?In, ~Await]
  `{` FunctionBody[~Yield, ~Await] `}`

ConditionalExpression[In, Yield, Await] :
  ShortCircuitExpression[?In, ?Yield, ?Await]
  ShortCircuitExpression[?In, ?Yield, ?Await] `?` AssignmentExpression[+In, ?Yield, ?Await] `:` AssignmentExpression[?In, ?Yield, ?Await]

ContinueStatement[Yield, Await] :
  `continue` `;`
  `continue` [no LineTerminator here] LabelIdentifier[?Yield, ?Await] `;`

CoverCallExpressionAndAsyncArrowHead[Yield, Await] :
  MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]

CoverInitializedName[Yield, Await] :
  IdentifierReference[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]

CoverParenthesizedExpressionAndArrowParameterList[Yield, Await] :
  `(` Expression[+In, ?Yield, ?Await] `)`
  `(` Expression[+In, ?Yield, ?Await] `,` `)`
  `(` `)`
  `(` `...` BindingIdentifier[?Yield, ?Await] `)`
  `(` `...` BindingPattern[?Yield, ?Await] `)`
  `(` Expression[+In, ?Yield, ?Await] `,` `...` BindingIdentifier[?Yield, ?Await] `)`
  `(` Expression[+In, ?Yield, ?Await] `,` `...` BindingPattern[?Yield, ?Await] `)`

DebuggerStatement :
  `debugger` `;`

Declaration[Yield, Await] :
  HoistableDeclaration[?Yield, ?Await, ~Default]
  ClassDeclaration[?Yield, ?Await, ~Default]
  LexicalDeclaration[+In, ?Yield, ?Await]

DefaultClause[Yield, Await, Return] :
  `default` `:` StatementList[?Yield, ?Await, ?Return]?

DestructuringAssignmentTarget[Yield, Await] :
  LeftHandSideExpression[?Yield, ?Await]

DoWhileStatement[Yield, Await, Return] :
  `do` Statement[?Yield, ?Await, ?Return] `while` `(` Expression[+In, ?Yield, ?Await] `)` `;`

ElementList[Yield, Await] :
  Elision? AssignmentExpression[+In, ?Yield, ?Await]
  Elision? SpreadElement[?Yield, ?Await]
  ElementList[?Yield, ?Await] `,` Elision? AssignmentExpression[+In, ?Yield, ?Await]
  ElementList[?Yield, ?Await] `,` Elision? SpreadElement[?Yield, ?Await]

Elision :
  `,`
  Elision `,`

EmptyStatement :
  `;`

EqualityExpression[In, Yield, Await] :
  RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `==` RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `!=` RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `===` RelationalExpression[?In, ?Yield, ?Await]
  EqualityExpression[?In, ?Yield, ?Await] `!==` RelationalExpression[?In, ?Yield, ?Await]

ExponentiationExpression[Yield, Await] :
  UnaryExpression[?Yield, ?Await]
  UpdateExpression[?Yield, ?Await] `**` ExponentiationExpression[?Yield, ?Await]

ExportDeclaration :
  `export` ExportFromClause FromClause `;`
  `export` NamedExports `;`
  `export` VariableStatement[~Yield, +Await]
  `export` Declaration[~Yield, +Await]
  `export` `default` HoistableDeclaration[~Yield, +Await, +Default]
  `export` `default` ClassDeclaration[~Yield, +Await, +Default]
  `export` `default` [lookahead <! {`function`, `async` [no LineTerminator here] `function`, `class`}] AssignmentExpression[+In, ~Yield, +Await] `;`

ExportFromClause :
  `*`
  `*` `as` ModuleExportName
  NamedExports

ExportSpecifier :
  ModuleExportName
  ModuleExportName `as` ModuleExportName

ExportsList :
  ExportSpecifier
  ExportsList `,` ExportSpecifier

Expression[In, Yield, Await] :
  AssignmentExpression[?In, ?Yield, ?Await]
  Expression[?In, ?Yield, ?Await] `,` AssignmentExpression[?In, ?Yield, ?Await]

ExpressionBody[In, Await] :
  AssignmentExpression[?In, ~Yield, ?Await]

ExpressionStatement[Yield, Await] :
  [lookahead <! {`{`, `function`, `async` [no LineTerminator here] `function`, `class`, `let` `[`}] Expression[+In, ?Yield, ?Await] `;`

FieldDefinition[Yield, Await] :
  ClassElementName[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

Finally[Yield, Await, Return] :
  `finally` Block[?Yield, ?Await, ?Return]

ForBinding[Yield, Await] :
  BindingIdentifier[?Yield, ?Await]
  BindingPattern[?Yield, ?Await]

ForDeclaration[Yield, Await] :
  LetOrConst ForBinding[?Yield, ?Await]

ForInOfStatement[Yield, Await, Return] :
  `for` `(` [lookahead <! {`let` `[`}] LeftHandSideExpression[?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` `var` ForBinding[?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` ForDeclaration[?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` [lookahead <! {`let`, `async` `of`}] LeftHandSideExpression[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` `var` ForBinding[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` ForDeclaration[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  [+Await] `for` `await` `(` [lookahead <! {`let`}] LeftHandSideExpression[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  [+Await] `for` `await` `(` `var` ForBinding[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]
  [+Await] `for` `await` `(` ForDeclaration[?Yield, ?Await] `of` AssignmentExpression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]

ForStatement[Yield, Await, Return] :
  `for` `(` [lookahead <! {`let` `[`}] Expression[~In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` `var` VariableDeclarationList[~In, ?Yield, ?Await] `;` Expression[+In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `)` Statement[?Yield, ?Await, ?Return]
  `for` `(` LexicalDeclaration[~In, ?Yield, ?Await] Expression[+In, ?Yield, ?Await]? `;` Expression[+In, ?Yield, ?Await]? `)` Statement[?Yield, ?Await, ?Return]

FormalParameter[Yield, Await] :
  BindingElement[?Yield, ?Await]

FormalParameterList[Yield, Await] :
  FormalParameter[?Yield, ?Await]
  FormalParameterList[?Yield, ?Await] `,` FormalParameter[?Yield, ?Await]

FormalParameters[Yield, Await] :
  [empty]
  FunctionRestParameter[?Yield, ?Await]
  FormalParameterList[?Yield, ?Await]
  FormalParameterList[?Yield, ?Await] `,`
  FormalParameterList[?Yield, ?Await] `,` FunctionRestParameter[?Yield, ?Await]

FromClause :
  `from` ModuleSpecifier

FunctionBody[Yield, Await] :
  FunctionStatementList[?Yield, ?Await]

FunctionDeclaration[Yield, Await, Default] :
  `function` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`
  [+Default] `function` `(` FormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`

FunctionExpression :
  `function` BindingIdentifier[~Yield, ~Await]? `(` FormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`

FunctionRestParameter[Yield, Await] :
  BindingRestElement[?Yield, ?Await]

FunctionStatementList[Yield, Await] :
  StatementList[?Yield, ?Await, +Return]?

GeneratorBody :
  FunctionBody[+Yield, ~Await]

GeneratorDeclaration[Yield, Await, Default] :
  `function` `*` BindingIdentifier[?Yield, ?Await] `(` FormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`
  [+Default] `function` `*` `(` FormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`

GeneratorExpression :
  `function` `*` BindingIdentifier[+Yield, ~Await]? `(` FormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`

GeneratorMethod[Yield, Await] :
  `*` ClassElementName[?Yield, ?Await] `(` UniqueFormalParameters[+Yield, ~Await] `)` `{` GeneratorBody `}`

HoistableDeclaration[Yield, Await, Default] :
  FunctionDeclaration[?Yield, ?Await, ?Default]
  GeneratorDeclaration[?Yield, ?Await, ?Default]
  AsyncFunctionDeclaration[?Yield, ?Await, ?Default]
  AsyncGeneratorDeclaration[?Yield, ?Await, ?Default]

Identifier :
  IdentifierName but not ReservedWord

IdentifierReference[Yield, Await] :
  Identifier
  [~Yield] `yield`
  [~Await] `await`

IfStatement[Yield, Await, Return] :
  `if` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return] `else` Statement[?Yield, ?Await, ?Return]
  `if` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return] [lookahead <! {`else`}]

ImportCall[Yield, Await] :
  `import` `(` AssignmentExpression[+In, ?Yield, ?Await] `)`

ImportClause :
  ImportedDefaultBinding
  NameSpaceImport
  NamedImports
  ImportedDefaultBinding `,` NameSpaceImport
  ImportedDefaultBinding `,` NamedImports

ImportDeclaration :
  `import` ImportClause FromClause `;`
  `import` ModuleSpecifier `;`

ImportMeta :
  `import` `.` `meta`

ImportSpecifier :
  ImportedBinding
  ModuleExportName `as` ImportedBinding

ImportedBinding :
  BindingIdentifier[~Yield, +Await]

ImportedDefaultBinding :
  ImportedBinding

ImportsList :
  ImportSpecifier
  ImportsList `,` ImportSpecifier

Initializer[In, Yield, Await] :
  `=` AssignmentExpression[?In, ?Yield, ?Await]

IterationStatement[Yield, Await, Return] :
  DoWhileStatement[?Yield, ?Await, ?Return]
  WhileStatement[?Yield, ?Await, ?Return]
  ForStatement[?Yield, ?Await, ?Return]
  ForInOfStatement[?Yield, ?Await, ?Return]

LabelIdentifier[Yield, Await] :
  Identifier
  [~Yield] `yield`
  [~Await] `await`

LabelledItem[Yield, Await, Return] :
  Statement[?Yield, ?Await, ?Return]
  FunctionDeclaration[?Yield, ?Await, ~Default]

LabelledStatement[Yield, Await, Return] :
  LabelIdentifier[?Yield, ?Await] `:` LabelledItem[?Yield, ?Await, ?Return]

LeftHandSideExpression[Yield, Await] :
  NewExpression[?Yield, ?Await]
  CallExpression[?Yield, ?Await]
  OptionalExpression[?Yield, ?Await]

LetOrConst :
  `let`
  `const`

LexicalBinding[In, Yield, Await] :
  BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]?
  BindingPattern[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]

LexicalDeclaration[In, Yield, Await] :
  LetOrConst BindingList[?In, ?Yield, ?Await] `;`

Literal :
  NullLiteral
  BooleanLiteral
  NumericLiteral
  StringLiteral

LiteralPropertyName :
  IdentifierName
  StringLiteral
  NumericLiteral

LogicalANDExpression[In, Yield, Await] :
  BitwiseORExpression[?In, ?Yield, ?Await]
  LogicalANDExpression[?In, ?Yield, ?Await] `&&` BitwiseORExpression[?In, ?Yield, ?Await]

LogicalORExpression[In, Yield, Await] :
  LogicalANDExpression[?In, ?Yield, ?Await]
  LogicalORExpression[?In, ?Yield, ?Await] `||` LogicalANDExpression[?In, ?Yield, ?Await]

MemberExpression[Yield, Await] :
  PrimaryExpression[?Yield, ?Await]
  MemberExpression[?Yield, ?Await] `[` Expression[+In, ?Yield, ?Await] `]`
  MemberExpression[?Yield, ?Await] `.` IdentifierName
  MemberExpression[?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]
  SuperProperty[?Yield, ?Await]
  MetaProperty
  `new` MemberExpression[?Yield, ?Await] Arguments[?Yield, ?Await]
  MemberExpression[?Yield, ?Await] `.` PrivateIdentifier

MetaProperty :
  NewTarget
  ImportMeta

MethodDefinition[Yield, Await] :
  ClassElementName[?Yield, ?Await] `(` UniqueFormalParameters[~Yield, ~Await] `)` `{` FunctionBody[~Yield, ~Await] `}`
  GeneratorMethod[?Yield, ?Await]
  AsyncMethod[?Yield, ?Await]
  AsyncGeneratorMethod[?Yield, ?Await]
  `get` ClassElementName[?Yield, ?Await] `(` `)` `{` FunctionBody[~Yield, ~Await] `}`
  `set` ClassElementName[?Yield, ?Await] `(` PropertySetParameterList `)` `{` FunctionBody[~Yield, ~Await] `}`

Module :
  ModuleBody?

ModuleBody :
  ModuleItemList

ModuleExportName :
  IdentifierName
  StringLiteral

ModuleItem :
  ImportDeclaration
  ExportDeclaration
  StatementListItem[~Yield, +Await, ~Return]

ModuleItemList :
  ModuleItem
  ModuleItemList ModuleItem

ModuleSpecifier :
  StringLiteral

MultiplicativeExpression[Yield, Await] :
  ExponentiationExpression[?Yield, ?Await]
  MultiplicativeExpression[?Yield, ?Await] MultiplicativeOperator ExponentiationExpression[?Yield, ?Await]

MultiplicativeOperator : one of
  `*` `/` `%`

NameSpaceImport :
  `*` `as` ImportedBinding

NamedExports :
  `{` `}`
  `{` ExportsList `}`
  `{` ExportsList `,` `}`

NamedImports :
  `{` `}`
  `{` ImportsList `}`
  `{` ImportsList `,` `}`

NativeFunction :
  `function` NativeFunctionAccessor? PropertyName[~Yield, ~Await]? `(` FormalParameters[~Yield, ~Await] `)` `{` `[` `native` `code` `]` `}`

NativeFunctionAccessor :
  `get`
  `set`

NewExpression[Yield, Await] :
  MemberExpression[?Yield, ?Await]
  `new` NewExpression[?Yield, ?Await]

NewTarget :
  `new` `.` `target`

ObjectAssignmentPattern[Yield, Await] :
  `{` `}`
  `{` AssignmentRestProperty[?Yield, ?Await] `}`
  `{` AssignmentPropertyList[?Yield, ?Await] `}`
  `{` AssignmentPropertyList[?Yield, ?Await] `,` AssignmentRestProperty[?Yield, ?Await]? `}`

ObjectBindingPattern[Yield, Await] :
  `{` `}`
  `{` BindingRestProperty[?Yield, ?Await] `}`
  `{` BindingPropertyList[?Yield, ?Await] `}`
  `{` BindingPropertyList[?Yield, ?Await] `,` BindingRestProperty[?Yield, ?Await]? `}`

ObjectLiteral[Yield, Await] :
  `{` `}`
  `{` PropertyDefinitionList[?Yield, ?Await] `}`
  `{` PropertyDefinitionList[?Yield, ?Await] `,` `}`

OptionalChain[Yield, Await] :
  `?.` Arguments[?Yield, ?Await]
  `?.` `[` Expression[+In, ?Yield, ?Await] `]`
  `?.` IdentifierName
  `?.` TemplateLiteral[?Yield, ?Await, +Tagged]
  `?.` PrivateIdentifier
  OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]
  OptionalChain[?Yield, ?Await] `[` Expression[+In, ?Yield, ?Await] `]`
  OptionalChain[?Yield, ?Await] `.` IdentifierName
  OptionalChain[?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]
  OptionalChain[?Yield, ?Await] `.` PrivateIdentifier

OptionalExpression[Yield, Await] :
  MemberExpression[?Yield, ?Await] OptionalChain[?Yield, ?Await]
  CallExpression[?Yield, ?Await] OptionalChain[?Yield, ?Await]
  OptionalExpression[?Yield, ?Await] OptionalChain[?Yield, ?Await]

ParenthesizedExpression[Yield, Await] :
  `(` Expression[+In, ?Yield, ?Await] `)`

PrimaryExpression[Yield, Await] :
  `this`
  IdentifierReference[?Yield, ?Await]
  Literal
  ArrayLiteral[?Yield, ?Await]
  ObjectLiteral[?Yield, ?Await]
  FunctionExpression
  ClassExpression[?Yield, ?Await]
  GeneratorExpression
  AsyncFunctionExpression
  AsyncGeneratorExpression
  RegularExpressionLiteral
  TemplateLiteral[?Yield, ?Await, ~Tagged]
  CoverParenthesizedExpressionAndArrowParameterList[?Yield, ?Await] #parencover

PropertyDefinition[Yield, Await] :
  IdentifierReference[?Yield, ?Await]
  CoverInitializedName[?Yield, ?Await]
  PropertyName[?Yield, ?Await] `:` AssignmentExpression[+In, ?Yield, ?Await]
  MethodDefinition[?Yield, ?Await]
  `...` AssignmentExpression[+In, ?Yield, ?Await]

PropertyDefinitionList[Yield, Await] :
  PropertyDefinition[?Yield, ?Await]
  PropertyDefinitionList[?Yield, ?Await] `,` PropertyDefinition[?Yield, ?Await]

PropertyName[Yield, Await] :
  LiteralPropertyName
  ComputedPropertyName[?Yield, ?Await]

PropertySetParameterList :
  FormalParameter[~Yield, ~Await]

RelationalExpression[In, Yield, Await] :
  ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `<` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `>` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `<=` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `>=` ShiftExpression[?Yield, ?Await]
  RelationalExpression[?In, ?Yield, ?Await] `instanceof` ShiftExpression[?Yield, ?Await]
  [+In] RelationalExpression[+In, ?Yield, ?Await] `in` ShiftExpression[?Yield, ?Await]
  [+In] PrivateIdentifier `in` ShiftExpression[?Yield, ?Await]

ReturnStatement[Yield, Await] :
  `return` `;`
  `return` [no LineTerminator here] Expression[+In, ?Yield, ?Await] `;`

Script :
  ScriptBody?

ScriptBody :
  StatementList[~Yield, ~Await, ~Return]

ShiftExpression[Yield, Await] :
  AdditiveExpression[?Yield, ?Await]
  ShiftExpression[?Yield, ?Await] `<<` AdditiveExpression[?Yield, ?Await]
  ShiftExpression[?Yield, ?Await] `>>` AdditiveExpression[?Yield, ?Await]
  ShiftExpression[?Yield, ?Await] `>>>` AdditiveExpression[?Yield, ?Await]

ShortCircuitExpression[In, Yield, Await] :
  LogicalORExpression[?In, ?Yield, ?Await]
  CoalesceExpression[?In, ?Yield, ?Await]

SingleNameBinding[Yield, Await] :
  BindingIdentifier[?Yield, ?Await] Initializer[+In, ?Yield, ?Await]?

SpreadElement[Yield, Await] :
  `...` AssignmentExpression[+In, ?Yield, ?Await]

Statement[Yield, Await, Return] :
  BlockStatement[?Yield, ?Await, ?Return]
  VariableStatement[?Yield, ?Await]
  EmptyStatement
  ExpressionStatement[?Yield, ?Await]
  IfStatement[?Yield, ?Await, ?Return]
  BreakableStatement[?Yield, ?Await, ?Return]
  ContinueStatement[?Yield, ?Await]
  BreakStatement[?Yield, ?Await]
  [+Return] ReturnStatement[?Yield, ?Await]
  WithStatement[?Yield, ?Await, ?Return]
  LabelledStatement[?Yield, ?Await, ?Return]
  ThrowStatement[?Yield, ?Await]
  TryStatement[?Yield, ?Await, ?Return]
  DebuggerStatement

StatementList[Yield, Await, Return] :
  StatementListItem[?Yield, ?Await, ?Return]
  StatementList[?Yield, ?Await, ?Return] StatementListItem[?Yield, ?Await, ?Return]

StatementListItem[Yield, Await, Return] :
  Statement[?Yield, ?Await, ?Return]
  Declaration[?Yield, ?Await]

SubstitutionTemplate[Yield, Await, Tagged] :
  TemplateHead Expression[+In, ?Yield, ?Await] TemplateSpans[?Yield, ?Await, ?Tagged]

SuperCall[Yield, Await] :
  `super` Arguments[?Yield, ?Await]

SuperProperty[Yield, Await] :
  `super` `[` Expression[+In, ?Yield, ?Await] `]`
  `super` `.` IdentifierName

SwitchStatement[Yield, Await, Return] :
  `switch` `(` Expression[+In, ?Yield, ?Await] `)` CaseBlock[?Yield, ?Await, ?Return]

TemplateLiteral[Yield, Await, Tagged] :
  NoSubstitutionTemplate
  SubstitutionTemplate[?Yield, ?Await, ?Tagged]

TemplateMiddleList[Yield, Await, Tagged] :
  TemplateMiddle Expression[+In, ?Yield, ?Await]
  TemplateMiddleList[?Yield, ?Await, ?Tagged] TemplateMiddle Expression[+In, ?Yield, ?Await]

TemplateSpans[Yield, Await, Tagged] :
  TemplateTail
  TemplateMiddleList[?Yield, ?Await, ?Tagged] TemplateTail

ThrowStatement[Yield, Await] :
  `throw` [no LineTerminator here] Expression[+In, ?Yield, ?Await] `;`

TryStatement[Yield, Await, Return] :
  `try` Block[?Yield, ?Await, ?Return] Catch[?Yield, ?Await, ?Return]
  `try` Block[?Yield, ?Await, ?Return] Finally[?Yield, ?Await, ?Return]
  `try` Block[?Yield, ?Await, ?Return] Catch[?Yield, ?Await, ?Return] Finally[?Yield, ?Await, ?Return]

UnaryExpression[Yield, Await] :
  UpdateExpression[?Yield, ?Await]
  `delete` UnaryExpression[?Yield, ?Await]
  `void` UnaryExpression[?Yield, ?Await]
  `typeof` UnaryExpression[?Yield, ?Await]
  `+` UnaryExpression[?Yield, ?Await]
  `-` UnaryExpression[?Yield, ?Await]
  `~` UnaryExpression[?Yield, ?Await]
  `!` UnaryExpression[?Yield, ?Await]
  [+Await] AwaitExpression[?Yield]

UniqueFormalParameters[Yield, Await] :
  FormalParameters[?Yield, ?Await]

UpdateExpression[Yield, Await] :
  LeftHandSideExpression[?Yield, ?Await]
  LeftHandSideExpression[?Yield, ?Await] [no LineTerminator here] `++`
  LeftHandSideExpression[?Yield, ?Await] [no LineTerminator here] `--`
  `++` UnaryExpression[?Yield, ?Await]
  `--` UnaryExpression[?Yield, ?Await]

VariableDeclaration[In, Yield, Await] :
  BindingIdentifier[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]?
  BindingPattern[?Yield, ?Await] Initializer[?In, ?Yield, ?Await]

VariableDeclarationList[In, Yield, Await] :
  VariableDeclaration[?In, ?Yield, ?Await]
  VariableDeclarationList[?In, ?Yield, ?Await] `,` VariableDeclaration[?In, ?Yield, ?Await]

VariableStatement[Yield, Await] :
  `var` VariableDeclarationList[+In, ?Yield, ?Await] `;`

WhileStatement[Yield, Await, Return] :
  `while` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]

WithStatement[Yield, Await, Return] :
  `with` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]

YieldExpression[In, Await] :
  `yield`
  `yield` [no LineTerminator here] AssignmentExpression[?In, +Yield, ?Await]
  `yield` [no LineTerminator here] `*` AssignmentExpression[?In, +Yield, ?Await]

Alternative[UnicodeMode, N] ::
  [empty]
  Alternative[?UnicodeMode, ?N] Term[?UnicodeMode, ?N]

Assertion[UnicodeMode, N] ::
  `^`
  `$`
  `\` `b`
  `\` `B`
  `(` `?` `=` Disjunction[?UnicodeMode, ?N] `)`
  `(` `?` `!` Disjunction[?UnicodeMode, ?N] `)`
  `(` `?` `<=` Disjunction[?UnicodeMode, ?N] `)`
  `(` `?` `<!` Disjunction[?UnicodeMode, ?N] `)`

Atom[UnicodeMode, N] ::
  PatternCharacter
  `.`
  `\` AtomEscape[?UnicodeMode, ?N]
  CharacterClass[?UnicodeMode]
  `(` GroupSpecifier[?UnicodeMode] Disjunction[?UnicodeMode, ?N] `)`
  `(` `?` `:` Disjunction[?UnicodeMode, ?N] `)`

AtomEscape[UnicodeMode, N] ::
  DecimalEscape
  CharacterClassEscape[?UnicodeMode]
  CharacterEscape[?UnicodeMode]
  [+N] `k` GroupName[?UnicodeMode]

BigIntLiteralSuffix ::
  `n`

BinaryDigit :: one of
  `0` `1`

BinaryDigits[Sep] ::
  BinaryDigit
  BinaryDigits[?Sep] BinaryDigit
  [+Sep] BinaryDigits[+Sep] NumericLiteralSeparator BinaryDigit

BinaryIntegerLiteral[Sep] ::
  `0b` BinaryDigits[?Sep]
  `0B` BinaryDigits[?Sep]

BooleanLiteral ::
  `true`
  `false`

CharacterClass[UnicodeMode] ::
  `[` [lookahead <! {`^`}] ClassRanges[?UnicodeMode] `]`
  `[` `^` ClassRanges[?UnicodeMode] `]`

CharacterClassEscape[UnicodeMode] ::
  `d`
  `D`
  `s`
  `S`
  `w`
  `W`
  [+UnicodeMode] `p{` UnicodePropertyValueExpression `}`
  [+UnicodeMode] `P{` UnicodePropertyValueExpression `}`

CharacterEscape[UnicodeMode] ::
  ControlEscape
  `c` ControlLetter
  `0` [lookahead <! {DecimalDigit}]
  HexEscapeSequence
  RegExpUnicodeEscapeSequence[?UnicodeMode]
  IdentityEscape[?UnicodeMode]

CharacterEscapeSequence ::
  SingleEscapeCharacter
  NonEscapeCharacter

ClassAtom[UnicodeMode] ::
  `-`
  ClassAtomNoDash[?UnicodeMode]

ClassAtomNoDash[UnicodeMode] ::
  SourceCharacter but not `\` `]` `-`
  `\` ClassEscape[?UnicodeMode]

ClassEscape[UnicodeMode] ::
  `b`
  [+UnicodeMode] `-`
  CharacterClassEscape[?UnicodeMode]
  CharacterEscape[?UnicodeMode]

ClassRanges[UnicodeMode] ::
  [empty]
  NonemptyClassRanges[?UnicodeMode]

CodePoint ::
  HexDigits[~Sep] [> but only if MV of |HexDigits|≤ 0x10FFFF]

Comment ::
  MultiLineComment
  SingleLineComment

CommonToken ::
  IdentifierName
  PrivateIdentifier
  Punctuator
  NumericLiteral
  StringLiteral
  Template

ControlEscape :: one of
  `f` `n` `r` `t` `v`

ControlLetter :: one of
  `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z` `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`

DecimalBigIntegerLiteral ::
  `0` BigIntLiteralSuffix
  NonZeroDigit DecimalDigits[+Sep]? BigIntLiteralSuffix
  NonZeroDigit NumericLiteralSeparator DecimalDigits[+Sep] BigIntLiteralSuffix

DecimalDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`

DecimalDigits[Sep] ::
  DecimalDigit
  DecimalDigits[?Sep] DecimalDigit
  [+Sep] DecimalDigits[+Sep] NumericLiteralSeparator DecimalDigit

DecimalEscape ::
  NonZeroDigit DecimalDigits[~Sep]? [lookahead <! {DecimalDigit}]

DecimalIntegerLiteral ::
  `0`
  NonZeroDigit
  NonZeroDigit NumericLiteralSeparator? DecimalDigits[+Sep]
  NonOctalDecimalIntegerLiteral

DecimalLiteral ::
  DecimalIntegerLiteral `.` DecimalDigits[+Sep]? ExponentPart[+Sep]?
  `.` DecimalDigits[+Sep] ExponentPart[+Sep]?
  DecimalIntegerLiteral ExponentPart[+Sep]?

Disjunction[UnicodeMode, N] ::
  Alternative[?UnicodeMode, ?N]
  Alternative[?UnicodeMode, ?N] `|` Disjunction[?UnicodeMode, ?N]

DivPunctuator ::
  `/`
  `/=`

DoubleStringCharacter ::
  SourceCharacter but not `"` `\` LineTerminator
  <LS>
  <PS>
  `\` EscapeSequence
  LineContinuation

DoubleStringCharacters ::
  DoubleStringCharacter DoubleStringCharacters?

EscapeCharacter ::
  SingleEscapeCharacter
  DecimalDigit
  `x`
  `u`

EscapeSequence ::
  CharacterEscapeSequence
  `0` [lookahead <! {DecimalDigit}]
  LegacyOctalEscapeSequence
  NonOctalDecimalEscapeSequence
  HexEscapeSequence
  UnicodeEscapeSequence

ExponentIndicator :: one of
  `e` `E`

ExponentPart[Sep] ::
  ExponentIndicator SignedInteger[?Sep]

FourToSeven :: one of
  `4` `5` `6` `7`

GroupName[UnicodeMode] ::
  `<` RegExpIdentifierName[?UnicodeMode] `>`

GroupSpecifier[UnicodeMode] ::
  [empty]
  `?` GroupName[?UnicodeMode]

Hex4Digits ::
  HexDigit HexDigit HexDigit HexDigit

HexDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7` `8` `9` `a` `b` `c` `d` `e` `f` `A` `B` `C` `D` `E` `F`

HexDigits[Sep] ::
  HexDigit
  HexDigits[?Sep] HexDigit
  [+Sep] HexDigits[+Sep] NumericLiteralSeparator HexDigit

HexEscapeSequence ::
  `x` HexDigit HexDigit

HexIntegerLiteral[Sep] ::
  `0x` HexDigits[?Sep]
  `0X` HexDigits[?Sep]

HexLeadSurrogate ::
  Hex4Digits [> but only if MV of |Hex4Digits|is in the inclusive range 0xD800 to 0xDBFF]

HexNonSurrogate ::
  Hex4Digits [> but only if MV of |Hex4Digits|is not in the inclusive range 0xD800 to 0xDFFF]

HexTrailSurrogate ::
  Hex4Digits [> but only if MV of |Hex4Digits|is in the inclusive range 0xDC00 to 0xDFFF]

IdentifierName ::
  IdentifierStart
  IdentifierName IdentifierPart

IdentifierPart ::
  IdentifierPartChar
  `\` UnicodeEscapeSequence

IdentifierPartChar ::
  UnicodeIDContinue
  `$`
  <ZWNJ>
  <ZWJ>

IdentifierStart ::
  IdentifierStartChar
  `\` UnicodeEscapeSequence

IdentifierStartChar ::
  UnicodeIDStart
  `$`
  `_`

IdentityEscape[UnicodeMode] ::
  [+UnicodeMode] SyntaxCharacter
  [+UnicodeMode] `/`
  [~UnicodeMode] SourceCharacter but not UnicodeIDContinue

InputElementDiv ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  RightBracePunctuator

InputElementRegExp ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RightBracePunctuator
  RegularExpressionLiteral

InputElementRegExpOrTemplateTail ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  RegularExpressionLiteral
  TemplateSubstitutionTail

InputElementTemplateTail ::
  WhiteSpace
  LineTerminator
  Comment
  CommonToken
  DivPunctuator
  TemplateSubstitutionTail

LegacyOctalEscapeSequence ::
  `0` [lookahead < {`8`, `9`}]
  NonZeroOctalDigit [lookahead <! {OctalDigit}]
  ZeroToThree OctalDigit [lookahead <! {OctalDigit}]
  FourToSeven OctalDigit
  ZeroToThree OctalDigit OctalDigit

LegacyOctalIntegerLiteral ::
  `0` OctalDigit
  LegacyOctalIntegerLiteral OctalDigit

LegacyOctalLikeDecimalIntegerLiteral ::
  `0` OctalDigit
  LegacyOctalLikeDecimalIntegerLiteral OctalDigit

LineContinuation ::
  `\` LineTerminatorSequence

LineTerminator ::
  <LF>
  <CR>
  <LS>
  <PS>

LineTerminatorSequence ::
  <LF>
  <CR> [lookahead <! {<LF>}]
  <LS>
  <PS>
  <CR> <LF>

LoneUnicodePropertyNameOrValue ::
  UnicodePropertyValueCharacters

MultiLineComment ::
  `/*` MultiLineCommentChars? `*/`

MultiLineCommentChars ::
  MultiLineNotAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

MultiLineNotAsteriskChar ::
  SourceCharacter but not `*`

MultiLineNotForwardSlashOrAsteriskChar ::
  SourceCharacter but not `/` `*`

NoSubstitutionTemplate ::
  ``` TemplateCharacters? ```

NonDecimalIntegerLiteral[Sep] ::
  BinaryIntegerLiteral[?Sep]
  OctalIntegerLiteral[?Sep]
  HexIntegerLiteral[?Sep]

NonEscapeCharacter ::
  SourceCharacter but not EscapeCharacter LineTerminator

NonOctalDecimalEscapeSequence :: one of
  `8` `9`

NonOctalDecimalIntegerLiteral ::
  `0` NonOctalDigit
  LegacyOctalLikeDecimalIntegerLiteral NonOctalDigit
  NonOctalDecimalIntegerLiteral DecimalDigit

NonOctalDigit :: one of
  `8` `9`

NonZeroDigit :: one of
  `1` `2` `3` `4` `5` `6` `7` `8` `9`

NonZeroOctalDigit ::
  OctalDigit but not `0`

NonemptyClassRanges[UnicodeMode] ::
  ClassAtom[?UnicodeMode]
  ClassAtom[?UnicodeMode] NonemptyClassRangesNoDash[?UnicodeMode]
  ClassAtom[?UnicodeMode] `-` ClassAtom[?UnicodeMode] ClassRanges[?UnicodeMode]

NonemptyClassRangesNoDash[UnicodeMode] ::
  ClassAtom[?UnicodeMode]
  ClassAtomNoDash[?UnicodeMode] NonemptyClassRangesNoDash[?UnicodeMode]
  ClassAtomNoDash[?UnicodeMode] `-` ClassAtom[?UnicodeMode] ClassRanges[?UnicodeMode]

NotCodePoint ::
  HexDigits[~Sep] [> but only if MV of |HexDigits|> 0x10FFFF]

NotEscapeSequence ::
  `0` DecimalDigit
  DecimalDigit but not `0`
  `x` [lookahead <! {HexDigit}]
  `x` HexDigit [lookahead <! {HexDigit}]
  `u` [lookahead <! {HexDigit}] [lookahead <! {`{`}]
  `u` HexDigit [lookahead <! {HexDigit}]
  `u` HexDigit HexDigit [lookahead <! {HexDigit}]
  `u` HexDigit HexDigit HexDigit [lookahead <! {HexDigit}]
  `u` `{` [lookahead <! {HexDigit}]
  `u` `{` NotCodePoint [lookahead <! {HexDigit}]
  `u` `{` CodePoint [lookahead <! {HexDigit}] [lookahead <! {`}`}]

NullLiteral ::
  `null`

NumericLiteral ::
  DecimalLiteral
  DecimalBigIntegerLiteral
  NonDecimalIntegerLiteral[+Sep]
  NonDecimalIntegerLiteral[+Sep] BigIntLiteralSuffix
  LegacyOctalIntegerLiteral

NumericLiteralSeparator ::
  `_`

OctalDigit :: one of
  `0` `1` `2` `3` `4` `5` `6` `7`

OctalDigits[Sep] ::
  OctalDigit
  OctalDigits[?Sep] OctalDigit
  [+Sep] OctalDigits[+Sep] NumericLiteralSeparator OctalDigit

OctalIntegerLiteral[Sep] ::
  `0o` OctalDigits[?Sep]
  `0O` OctalDigits[?Sep]

OptionalChainingPunctuator ::
  `?.` [lookahead <! {DecimalDigit}]

OtherPunctuator :: one of
  `{` `(` `)` `[` `]` `.` `...` `;` `,` `<` `>` `<=` `>=` `==` `!=` `===` `!==` `+` `-` `*` `%` `**` `++` `--` `<<` `>>` `>>>` `&` `|` `^` `!` `~` `&&` `||` `??` `?` `:` `=` `+=` `-=` `*=` `%=` `**=` `<<=` `>>=` `>>>=` `&=` `|=` `^=` `&&=` `||=` `??=` `=>`

Pattern[UnicodeMode, N] ::
  Disjunction[?UnicodeMode, ?N]

PatternCharacter ::
  SourceCharacter but not SyntaxCharacter

PostAsteriskCommentChars ::
  MultiLineNotForwardSlashOrAsteriskChar MultiLineCommentChars?
  `*` PostAsteriskCommentChars?

PrivateIdentifier ::
  `#` IdentifierName

Punctuator ::
  OptionalChainingPunctuator
  OtherPunctuator

Quantifier ::
  QuantifierPrefix
  QuantifierPrefix `?`

QuantifierPrefix ::
  `*`
  `+`
  `?`
  `{` DecimalDigits[~Sep] `}`
  `{` DecimalDigits[~Sep] `,` `}`
  `{` DecimalDigits[~Sep] `,` DecimalDigits[~Sep] `}`

RegExpIdentifierName[UnicodeMode] ::
  RegExpIdentifierStart[?UnicodeMode]
  RegExpIdentifierName[?UnicodeMode] RegExpIdentifierPart[?UnicodeMode]

RegExpIdentifierPart[UnicodeMode] ::
  IdentifierPartChar
  `\` RegExpUnicodeEscapeSequence[+UnicodeMode]
  [~UnicodeMode] UnicodeLeadSurrogate UnicodeTrailSurrogate

RegExpIdentifierStart[UnicodeMode] ::
  IdentifierStartChar
  `\` RegExpUnicodeEscapeSequence[+UnicodeMode]
  [~UnicodeMode] UnicodeLeadSurrogate UnicodeTrailSurrogate

RegExpUnicodeEscapeSequence[UnicodeMode] ::
  [+UnicodeMode] `u` HexLeadSurrogate `\u` HexTrailSurrogate
  [+UnicodeMode] `u` HexLeadSurrogate
  [+UnicodeMode] `u` HexTrailSurrogate
  [+UnicodeMode] `u` HexNonSurrogate
  [~UnicodeMode] `u` Hex4Digits
  [+UnicodeMode] `u{` CodePoint `}`

RegularExpressionBackslashSequence ::
  `\` RegularExpressionNonTerminator

RegularExpressionBody ::
  RegularExpressionFirstChar RegularExpressionChars

RegularExpressionChar ::
  RegularExpressionNonTerminator but not `\` `/` `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionChars ::
  [empty]
  RegularExpressionChars RegularExpressionChar

RegularExpressionClass ::
  `[` RegularExpressionClassChars `]`

RegularExpressionClassChar ::
  RegularExpressionNonTerminator but not `]` `\`
  RegularExpressionBackslashSequence

RegularExpressionClassChars ::
  [empty]
  RegularExpressionClassChars RegularExpressionClassChar

RegularExpressionFirstChar ::
  RegularExpressionNonTerminator but not `*` `\` `/` `[`
  RegularExpressionBackslashSequence
  RegularExpressionClass

RegularExpressionFlags ::
  [empty]
  RegularExpressionFlags IdentifierPartChar

RegularExpressionLiteral ::
  `/` RegularExpressionBody `/` RegularExpressionFlags

RegularExpressionNonTerminator ::
  SourceCharacter but not LineTerminator

ReservedWord :: one of
  `await` `break` `case` `catch` `class` `const` `continue` `debugger` `default` `delete` `do` `else` `enum` `export` `extends` `false` `finally` `for` `function` `if` `import` `in` `instanceof` `new` `null` `return` `super` `switch` `this` `throw` `true` `try` `typeof` `var` `void` `while` `with` `yield`

RightBracePunctuator ::
  `}`

SignedInteger[Sep] ::
  DecimalDigits[?Sep]
  `+` DecimalDigits[?Sep]
  `-` DecimalDigits[?Sep]

SingleEscapeCharacter :: one of
  `'` `"` `\` `b` `f` `n` `r` `t` `v`

SingleLineComment ::
  `//` SingleLineCommentChars?

SingleLineCommentChar ::
  SourceCharacter but not LineTerminator

SingleLineCommentChars ::
  SingleLineCommentChar SingleLineCommentChars?

SingleStringCharacter ::
  SourceCharacter but not `'` `\` LineTerminator
  <LS>
  <PS>
  `\` EscapeSequence
  LineContinuation

SingleStringCharacters ::
  SingleStringCharacter SingleStringCharacters?

SourceCharacter ::
  > any Unicode code point

StringLiteral ::
  `"` DoubleStringCharacters? `"`
  `'` SingleStringCharacters? `'`

SyntaxCharacter :: one of
  `^` `$` `\` `.` `*` `+` `?` `(` `)` `[` `]` `{` `}` `|`

Template ::
  NoSubstitutionTemplate
  TemplateHead

TemplateCharacter ::
  `$` [lookahead <! {`{`}]
  `\` TemplateEscapeSequence
  `\` NotEscapeSequence
  LineContinuation
  LineTerminatorSequence
  SourceCharacter but not ``` `\` `$` LineTerminator

TemplateCharacters ::
  TemplateCharacter TemplateCharacters?

TemplateEscapeSequence ::
  CharacterEscapeSequence
  `0` [lookahead <! {DecimalDigit}]
  HexEscapeSequence
  UnicodeEscapeSequence

TemplateHead ::
  ``` TemplateCharacters? `${`

TemplateMiddle ::
  `}` TemplateCharacters? `${`

TemplateSubstitutionTail ::
  TemplateMiddle
  TemplateTail

TemplateTail ::
  `}` TemplateCharacters? ```

Term[UnicodeMode, N] ::
  Assertion[?UnicodeMode, ?N]
  Atom[?UnicodeMode, ?N]
  Atom[?UnicodeMode, ?N] Quantifier

UnicodeEscapeSequence ::
  `u` Hex4Digits
  `u{` CodePoint `}`

UnicodeIDContinue ::
  > any Unicode code point with the Unicode property “ID_Continue”

UnicodeIDStart ::
  > any Unicode code point with the Unicode property “ID_Start”

UnicodeLeadSurrogate ::
  > any Unicode code point in the inclusive range 0xD800 to 0xDBFF

UnicodePropertyName ::
  UnicodePropertyNameCharacters

UnicodePropertyNameCharacter ::
  ControlLetter
  `_`

UnicodePropertyNameCharacters ::
  UnicodePropertyNameCharacter UnicodePropertyNameCharacters?

UnicodePropertyValue ::
  UnicodePropertyValueCharacters

UnicodePropertyValueCharacter ::
  UnicodePropertyNameCharacter
  DecimalDigit

UnicodePropertyValueCharacters ::
  UnicodePropertyValueCharacter UnicodePropertyValueCharacters?

UnicodePropertyValueExpression ::
  UnicodePropertyName `=` UnicodePropertyValue
  LoneUnicodePropertyNameOrValue

UnicodeTrailSurrogate ::
  > any Unicode code point in the inclusive range 0xDC00 to 0xDFFF

WhiteSpace ::
  <TAB>
  <VT>
  <FF>
  <ZWNBSP>
  <USP>

ZeroToThree :: one of
  `0` `1` `2` `3`

StrDecimalLiteral :::
  StrUnsignedDecimalLiteral
  `+` StrUnsignedDecimalLiteral
  `-` StrUnsignedDecimalLiteral

StrIntegerLiteral :::
  SignedInteger[~Sep]
  NonDecimalIntegerLiteral[~Sep]

StrNumericLiteral :::
  StrDecimalLiteral
  NonDecimalIntegerLiteral[~Sep]

StrUnsignedDecimalLiteral :::
  `Infinity`
  DecimalDigits[~Sep] `.` DecimalDigits[~Sep]? ExponentPart[~Sep]?
  `.` DecimalDigits[~Sep] ExponentPart[~Sep]?
  DecimalDigits[~Sep] ExponentPart[~Sep]?

StrWhiteSpace :::
  StrWhiteSpaceChar StrWhiteSpace?

StrWhiteSpaceChar :::
  WhiteSpace
  LineTerminator

StringIntegerLiteral :::
  StrWhiteSpace?
  StrWhiteSpace? StrIntegerLiteral StrWhiteSpace?

StringNumericLiteral :::
  StrWhiteSpace?
  StrWhiteSpace? StrNumericLiteral StrWhiteSpace?

uri :::
  uriCharacters?

uriAlpha ::: one of
  `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m` `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z` `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M` `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`

uriCharacter :::
  uriReserved
  uriUnescaped
  uriEscaped

uriCharacters :::
  uriCharacter uriCharacters?

uriEscaped :::
  `%` HexDigit HexDigit

uriMark ::: one of
  `-` `_` `.` `!` `~` `*` `'` `(` `)`

uriReserved ::: one of
  `;` `/` `?` `:` `@` `&` `=` `+` `$` `,`

uriUnescaped :::
  uriAlpha
  DecimalDigit
  uriMark

<Productions for Web>
ForInOfStatement[Yield, Await, Return] :
  `for` `(` `var` BindingIdentifier[?Yield, ?Await] Initializer[~In, ?Yield, ?Await] `in` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return]

IfStatement[Yield, Await, Return] :
  `if` `(` Expression[+In, ?Yield, ?Await] `)` FunctionDeclaration[?Yield, ?Await, ~Default] `else` Statement[?Yield, ?Await, ?Return]
  `if` `(` Expression[+In, ?Yield, ?Await] `)` Statement[?Yield, ?Await, ?Return] `else` FunctionDeclaration[?Yield, ?Await, ~Default]
  `if` `(` Expression[+In, ?Yield, ?Await] `)` FunctionDeclaration[?Yield, ?Await, ~Default] `else` FunctionDeclaration[?Yield, ?Await, ~Default]
  `if` `(` Expression[+In, ?Yield, ?Await] `)` FunctionDeclaration[?Yield, ?Await, ~Default] [lookahead <! {`else`}]

Assertion[UnicodeMode, N] ::
  `^`
  `$`
  `\` `b`
  `\` `B`
  [+UnicodeMode] `(` `?` `=` Disjunction[+UnicodeMode, ?N] `)`
  [+UnicodeMode] `(` `?` `!` Disjunction[+UnicodeMode, ?N] `)`
  [~UnicodeMode] QuantifiableAssertion[?N]
  `(` `?` `<=` Disjunction[?UnicodeMode, ?N] `)`
  `(` `?` `<!` Disjunction[?UnicodeMode, ?N] `)`

AtomEscape[UnicodeMode, N] ::
  [+UnicodeMode] DecimalEscape
  [~UnicodeMode] DecimalEscape [> but only if CapturingGroupNumber of |DecimalEscape|is ≤ _NcapturingParens_]
  CharacterClassEscape[?UnicodeMode]
  CharacterEscape[?UnicodeMode, ?N]
  [+N] `k` GroupName[?UnicodeMode]

CharacterEscape[UnicodeMode, N] ::
  ControlEscape
  `c` ControlLetter
  `0` [lookahead <! {DecimalDigit}]
  HexEscapeSequence
  RegExpUnicodeEscapeSequence[?UnicodeMode]
  [~UnicodeMode] LegacyOctalEscapeSequence
  IdentityEscape[?UnicodeMode, ?N]

ClassAtomNoDash[UnicodeMode, N] ::
  SourceCharacter but not `\` `]` `-`
  `\` ClassEscape[?UnicodeMode, ?N]
  `\` [lookahead < {`c`}]

ClassControlLetter ::
  DecimalDigit
  `_`

ClassEscape[UnicodeMode, N] ::
  `b`
  [+UnicodeMode] `-`
  [~UnicodeMode] `c` ClassControlLetter
  CharacterClassEscape[?UnicodeMode]
  CharacterEscape[?UnicodeMode, ?N]

Comment ::
  MultiLineComment
  SingleLineComment
  SingleLineHTMLOpenComment
  SingleLineHTMLCloseComment
  SingleLineDelimitedComment

ExtendedAtom[N] ::
  `.`
  `\` AtomEscape[~UnicodeMode, ?N]
  `\` [lookahead < {`c`}]
  CharacterClass[~UnicodeMode]
  `(` Disjunction[~UnicodeMode, ?N] `)`
  `(` `?` `:` Disjunction[~UnicodeMode, ?N] `)`
  InvalidBracedQuantifier
  ExtendedPatternCharacter

ExtendedPatternCharacter ::
  SourceCharacter but not `^` `$` `\` `.` `*` `+` `?` `(` `)` `[` `|`

FirstCommentLine ::
  SingleLineDelimitedCommentChars

HTMLCloseComment ::
  WhiteSpaceSequence? SingleLineDelimitedCommentSequence? `-->` SingleLineCommentChars?

IdentityEscape[UnicodeMode, N] ::
  [+UnicodeMode] SyntaxCharacter
  [+UnicodeMode] `/`
  [~UnicodeMode] SourceCharacterIdentityEscape[?N]

InvalidBracedQuantifier ::
  `{` DecimalDigits[~Sep] `}`
  `{` DecimalDigits[~Sep] `,` `}`
  `{` DecimalDigits[~Sep] `,` DecimalDigits[~Sep] `}`

MultiLineComment ::
  `/*` FirstCommentLine? LineTerminator MultiLineCommentChars? `*/` HTMLCloseComment?

QuantifiableAssertion[N] ::
  `(` `?` `=` Disjunction[~UnicodeMode, ?N] `)`
  `(` `?` `!` Disjunction[~UnicodeMode, ?N] `)`

SingleLineDelimitedComment ::
  `/*` SingleLineDelimitedCommentChars? `*/`

SingleLineDelimitedCommentChars ::
  SingleLineNotAsteriskChar SingleLineDelimitedCommentChars?
  `*` SingleLinePostAsteriskCommentChars?

SingleLineDelimitedCommentSequence ::
  SingleLineDelimitedComment WhiteSpaceSequence? SingleLineDelimitedCommentSequence?

SingleLineHTMLCloseComment ::
  LineTerminatorSequence HTMLCloseComment

SingleLineHTMLOpenComment ::
  `<!--` SingleLineCommentChars?

SingleLineNotAsteriskChar ::
  SourceCharacter but not `*` LineTerminator

SingleLineNotForwardSlashOrAsteriskChar ::
  SourceCharacter but not `/` `*` LineTerminator

SingleLinePostAsteriskCommentChars ::
  SingleLineNotForwardSlashOrAsteriskChar SingleLineDelimitedCommentChars?
  `*` SingleLinePostAsteriskCommentChars?

SourceCharacterIdentityEscape[N] ::
  [~N] SourceCharacter but not `c`
  [+N] SourceCharacter but not `c` `k`

Term[UnicodeMode, N] ::
  [+UnicodeMode] Assertion[+UnicodeMode, ?N]
  [+UnicodeMode] Atom[+UnicodeMode, ?N] Quantifier
  [+UnicodeMode] Atom[+UnicodeMode, ?N]
  [~UnicodeMode] QuantifiableAssertion[?N] Quantifier
  [~UnicodeMode] Assertion[~UnicodeMode, ?N]
  [~UnicodeMode] ExtendedAtom[?N] Quantifier
  [~UnicodeMode] ExtendedAtom[?N]

WhiteSpaceSequence ::
  WhiteSpace WhiteSpaceSequence?