P/F/T = 18277/693/18970 (96.35%)
  - sec-scope:
  - sec-conformance:
    - sec-conformance-normative-optional:
    - sec-conformance-legacy:
    - sec-conformance-legacy-normative-optional:
  - sec-normative-references:
  - sec-overview:
    - sec-web-scripting:
    - sec-hosts-and-implementations:
    - sec-ecmascript-overview:
      - sec-objects:
      - sec-strict-variant-of-ecmascript:
    - sec-terms-and-definitions:
      - sec-terms-and-definitions-implementation-approximated:
      - sec-terms-and-definitions-implementation-defined:
      - sec-terms-and-definitions-host-defined:
      - sec-type:
      - sec-primitive-value:
      - sec-terms-and-definitions-object:
      - sec-constructor:
      - sec-terms-and-definitions-prototype:
      - sec-ordinary-object:
      - sec-exotic-object:
      - sec-standard-object:
      - sec-built-in-object:
      - sec-undefined-value:
      - sec-terms-and-definitions-undefined-type:
      - sec-null-value:
      - sec-terms-and-definitions-null-type:
      - sec-terms-and-definitions-boolean-value:
      - sec-terms-and-definitions-boolean-type:
      - sec-boolean-object:
      - sec-terms-and-definitions-string-value:
      - sec-terms-and-definitions-string-type:
      - sec-string-object:
      - sec-terms-and-definitions-number-value:
      - sec-terms-and-definitions-number-type:
      - sec-number-object:
      - sec-terms-and-definitions-infinity:
      - sec-terms-and-definitions-nan:
      - sec-terms-and-definitions-bigint-value:
      - sec-terms-and-definitions-bigint-type:
      - sec-bigint-object:
      - sec-symbol-value:
      - sec-terms-and-definitions-symbol-type:
      - sec-symbol-object:
      - sec-terms-and-definitions-function:
      - sec-built-in-function:
      - sec-property:
      - sec-method:
      - sec-built-in-method:
      - sec-attribute:
      - sec-own-property:
      - sec-inherited-property:
    - sec-organization-of-this-specification:
  - sec-notational-conventions:P/F/T = 3/0/3 (100.00%)
    - sec-syntactic-and-lexical-grammars:
      - sec-context-free-grammars:
      - sec-lexical-and-regexp-grammars:
      - sec-numeric-string-grammar:
      - sec-syntactic-grammar:
      - sec-grammar-notation:
    - sec-algorithm-conventions:P/F/T = 3/0/3 (100.00%)
      - sec-algorithm-conventions-abstract-operations:
      - sec-algorithm-conventions-syntax-directed-operations:
      - sec-runtime-semantics:P/F/T = 3/0/3 (100.00%)
        - sec-completion-ao:P/F/T = 3/0/3 (100.00%)
        - sec-throw-an-exception:
        - sec-returnifabrupt:
        - sec-returnifabrupt-shorthands:
        - sec-implicit-normal-completion:
      - sec-static-semantic-rules:
      - sec-mathematical-operations:
      - sec-value-notation:
  - sec-ecmascript-data-types-and-values:P/F/T = 577/36/613 (94.13%)
    - sec-ecmascript-language-types:P/F/T = 350/25/375 (93.33%)
      - sec-ecmascript-language-types-undefined-type:
      - sec-ecmascript-language-types-null-type:
      - sec-ecmascript-language-types-boolean-type:
      - sec-ecmascript-language-types-string-type:P/F/T = 11/0/11 (100.00%)
        - sec-stringindexof:P/F/T = 11/0/11 (100.00%)
      - sec-ecmascript-language-types-symbol-type:
        - sec-well-known-symbols:
      - sec-numeric-types:P/F/T = 339/25/364 (93.13%)
        - sec-ecmascript-language-types-number-type:P/F/T = 240/19/259 (92.66%)
          - sec-numeric-types-number-unaryMinus:P/F/T = 4/0/4 (100.00%)
          - sec-numeric-types-number-bitwiseNOT:P/F/T = 2/1/3 (66.67%)
              Return the result of applying bitwise complement to _oldValue_. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.
          - sec-numeric-types-number-exponentiate:P/F/T = 48/4/52 (92.31%)
              If _exponent_ is an odd integral Number, return *-‚àû*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.
              If _exponent_ is an odd integral Number, return *-0*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.
              If _exponent_ is an odd integral Number, return *-0*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.
              If _exponent_ is an odd integral Number, return *-‚àû*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.
          - sec-numeric-types-number-multiply:P/F/T = 25/2/27 (92.59%)
              If _y_ is *-0*<sub>ùîΩ</sub> or _y_ < *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.
              Else, return *-0*<sub>ùîΩ</sub>.
          - sec-numeric-types-number-divide:P/F/T = 38/0/38 (100.00%)
          - sec-numeric-types-number-remainder:P/F/T = 15/1/16 (93.75%)
              Let _r_ be ‚Ñù(_n_) - (‚Ñù(_d_) √ó _q_) where _q_ is an integer that is negative if and only if _n_ and _d_ have opposite sign, and whose magnitude is as large as possible without exceeding the magnitude of ‚Ñù(_n_) / ‚Ñù(_d_).
          - sec-numeric-types-number-add:P/F/T = 15/0/15 (100.00%)
          - sec-numeric-types-number-subtract:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-number-leftShift:P/F/T = 4/1/5 (80.00%)
              Return the result of left shifting _lnum_ by _shiftCount_ bits. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.
          - sec-numeric-types-number-signedRightShift:P/F/T = 4/1/5 (80.00%)
              Return the result of performing a sign-extending right shift of _lnum_ by _shiftCount_ bits. The most significant bit is propagated. The mathematical value of the result is exactly representable as a 32-bit two's complement bit string.
          - sec-numeric-types-number-unsignedRightShift:P/F/T = 4/1/5 (80.00%)
              Return the result of performing a zero-filling right shift of _lnum_ by _shiftCount_ bits. Vacated bits are filled with zero. The mathematical value of the result is exactly representable as a 32-bit unsigned bit string.
          - sec-numeric-types-number-lessThan:P/F/T = 23/0/23 (100.00%)
          - sec-numeric-types-number-equal:P/F/T = 12/0/12 (100.00%)
          - sec-numeric-types-number-sameValue:P/F/T = 10/0/10 (100.00%)
          - sec-numeric-types-number-sameValueZero:P/F/T = 10/0/10 (100.00%)
          - sec-numberbitwiseop:P/F/T = 9/2/11 (81.82%)
              _op_ is `|`. Let _result_ be the result of applying the bitwise inclusive OR operation to _lbits_ and _rbits_.
              Return the Number value for the integer represented by the 32-bit two's complement bit string _result_.
          - sec-numeric-types-number-bitwiseAND:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-number-bitwiseXOR:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-number-bitwiseOR:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-number-tostring:P/F/T = 9/6/15 (60.00%)
              let _n_, _k_, and _s_ be integers such that _k_ ‚â• 1, 10<sup>_k_ - 1</sup> ‚â§ _s_ < 10<sup>_k_</sup>, ùîΩ(_s_ √ó 10<sup>_n_ - _k_</sup>) is _x_, and _k_ is as small as possible. Note that _k_ is the number of digits in the decimal representation of _s_, that _s_ is not divisible by 10, and that the least significant digit of _s_ is not necessarily uniquely determined by these criteria.
              If _k_ ‚â§ _n_ ‚â§ 21, return the string-concatenation of: [...]
              If 0 < _n_ ‚â§ 21, return the string-concatenation of: [...]
              If -6 < _n_ ‚â§ 0, return the string-concatenation of: [...]
              Otherwise, if _k_ = 1, return the string-concatenation of: [...]
              Return the string-concatenation of: [...]
        - sec-ecmascript-language-types-bigint-type:P/F/T = 99/6/105 (94.29%)
          - sec-numeric-types-bigint-unaryMinus:P/F/T = 4/0/4 (100.00%)
          - sec-numeric-types-bigint-bitwiseNOT:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-exponentiate:P/F/T = 6/0/6 (100.00%)
          - sec-numeric-types-bigint-multiply:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-divide:P/F/T = 5/0/5 (100.00%)
          - sec-numeric-types-bigint-remainder:P/F/T = 6/1/7 (85.71%)
              Let _r_ be the BigInt defined by the mathematical relation _r_ = _n_ - (_d_ √ó _q_) where _q_ is a BigInt that is negative only if _n_/_d_ is negative and positive only if _n_/_d_ is positive, and whose magnitude is as large as possible without exceeding the magnitude of the true mathematical quotient of _n_ and _d_.
          - sec-numeric-types-bigint-add:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-subtract:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-leftShift:P/F/T = 5/0/5 (100.00%)
          - sec-numeric-types-bigint-signedRightShift:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-unsignedRightShift:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-lessThan:P/F/T = 4/0/4 (100.00%)
          - sec-numeric-types-bigint-equal:P/F/T = 4/0/4 (100.00%)
          - sec-numeric-types-bigint-sameValue:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-sameValueZero:P/F/T = 2/0/2 (100.00%)
          - sec-binaryand:P/F/T = 4/0/4 (100.00%)
          - sec-binaryor:P/F/T = 4/0/4 (100.00%)
          - sec-binaryxor:P/F/T = 6/0/6 (100.00%)
          - sec-bigintbitwiseop:P/F/T = 26/4/30 (86.67%)
              Repeat, until (_x_ = 0 or _x_ = -1) and (_y_ = 0 or _y_ = -1), [...]
              set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryAnd(_xDigit_, _yDigit_).
              set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryOr(_xDigit_, _yDigit_).
              Set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryXor(_xDigit_, _yDigit_).
          - sec-numeric-types-bigint-bitwiseAND:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-bitwiseXOR:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-bitwiseOR:P/F/T = 2/0/2 (100.00%)
          - sec-numeric-types-bigint-tostring:P/F/T = 3/1/4 (75.00%)
              Return the String value consisting of the code units of the digits of the decimal representation of _x_.
      - sec-object-type:
        - sec-property-attributes:
        - sec-object-internal-methods-and-internal-slots:
        - sec-invariants-of-the-essential-internal-methods:
        - sec-well-known-intrinsic-objects:
    - sec-ecmascript-specification-types:P/F/T = 227/11/238 (95.38%)
      - sec-list-and-record-specification-type:
      - sec-set-and-relation-specification-type:
      - sec-completion-record-specification-type:P/F/T = 9/0/9 (100.00%)
        - await:
        - sec-normalcompletion:P/F/T = 2/0/2 (100.00%)
        - sec-throwcompletion:P/F/T = 2/0/2 (100.00%)
        - sec-updateempty:P/F/T = 5/0/5 (100.00%)
      - sec-reference-record-specification-type:P/F/T = 79/0/79 (100.00%)
        - sec-ispropertyreference:P/F/T = 6/0/6 (100.00%)
        - sec-isunresolvablereference:P/F/T = 4/0/4 (100.00%)
        - sec-issuperreference:P/F/T = 4/0/4 (100.00%)
        - sec-isprivatereference:P/F/T = 4/0/4 (100.00%)
        - sec-getvalue:P/F/T = 17/0/17 (100.00%)
        - sec-putvalue:P/F/T = 26/0/26 (100.00%)
        - sec-getthisvalue:P/F/T = 5/0/5 (100.00%)
        - sec-initializereferencedbinding:P/F/T = 8/0/8 (100.00%)
        - sec-makeprivatereference:P/F/T = 5/0/5 (100.00%)
      - sec-property-descriptor-specification-type:P/F/T = 109/0/109 (100.00%)
        - sec-isaccessordescriptor:P/F/T = 8/0/8 (100.00%)
        - sec-isdatadescriptor:P/F/T = 8/0/8 (100.00%)
        - sec-isgenericdescriptor:P/F/T = 8/0/8 (100.00%)
        - sec-frompropertydescriptor:P/F/T = 24/0/24 (100.00%)
        - sec-topropertydescriptor:P/F/T = 43/0/43 (100.00%)
        - sec-completepropertydescriptor:P/F/T = 18/0/18 (100.00%)
      - sec-lexical-environment-and-environment-record-specification-types:
      - sec-abstract-closure:
      - sec-data-blocks:P/F/T = 30/11/41 (73.17%)
        - sec-createbytedatablock:P/F/T = 2/2/4 (50.00%)
            Let _db_ be a new Data Block value consisting of _size_ bytes. If it is impossible to create such a Data Block, throw a *RangeError* exception.
            Set all of the bytes of _db_ to 0.
        - sec-createsharedbytedatablock:P/F/T = 4/4/8 (50.00%)
            Let _db_ be a new Shared Data Block value consisting of _size_ bytes. If it is impossible to create such a Shared Data Block, throw a *RangeError* exception.
            Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.
            Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
            For each index _i_ of _db_, do [...]
        - sec-copydatablockbytes:P/F/T = 24/5/29 (82.76%)
            Let _fromSize_ be the number of bytes in _fromBlock_.
            Let _toSize_ be the number of bytes in _toBlock_.
            Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.
            Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
            Let _bytes_ be a List whose sole element is a nondeterministically chosen byte value.
      - sec-privateelement-specification-type:
      - sec-classfielddefinition-record-specification-type:
      - sec-private-names:
      - sec-classstaticblockdefinition-record-specification-type:
  - sec-abstract-operations:P/F/T = 871/26/897 (97.10%)
    - sec-type-conversion:P/F/T = 259/18/277 (93.50%)
      - sec-toprimitive:P/F/T = 36/0/36 (100.00%)
        - sec-ordinarytoprimitive:P/F/T = 15/0/15 (100.00%)
      - sec-toboolean:
      - sec-tonumeric:P/F/T = 5/0/5 (100.00%)
      - sec-tonumber:P/F/T = 101/10/111 (90.99%)
        - sec-tonumber-applied-to-the-string-type:P/F/T = 101/10/111 (90.99%)
          - sec-stringtonumber:P/F/T = 6/0/6 (100.00%)
          - sec-runtime-semantics-stringnumericvalue:P/F/T = 93/6/99 (93.94%)
              Let _n_ be the number of code points in the second |DecimalDigits|.
              Let _n_ be the number of code points in the second |DecimalDigits|.
              Let _n_ be the number of code points in the second |DecimalDigits|.
              Let _n_ be the number of code points in the second |DecimalDigits|.
              Let _n_ be the number of code points in |DecimalDigits|.
              Let _n_ be the number of code points in |DecimalDigits|.
          - sec-roundmvresult:P/F/T = 2/4/6 (33.33%)
              If the decimal representation of _n_ has 20 or fewer significant digits, return ùîΩ(_n_).
              Let _option1_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit.
              Let _option2_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit and then incrementing it at the 20th position (with carrying as necessary).
              Let _chosen_ be an implementation-defined choice of either _option1_ or _option2_.
      - sec-tointegerorinfinity:P/F/T = 12/0/12 (100.00%)
      - sec-toint32:P/F/T = 8/1/9 (88.89%)
          Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(‚Ñù(_number_))).
      - sec-touint32:P/F/T = 6/1/7 (85.71%)
          Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(‚Ñù(_number_))).
      - sec-toint16:P/F/T = 8/1/9 (88.89%)
          Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(‚Ñù(_number_))).
      - sec-touint16:P/F/T = 6/1/7 (85.71%)
          Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(‚Ñù(_number_))).
      - sec-toint8:P/F/T = 8/1/9 (88.89%)
          Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(‚Ñù(_number_))).
      - sec-touint8:P/F/T = 6/1/7 (85.71%)
          Let _int_ be the mathematical value whose sign is the sign of _number_ and whose magnitude is floor(abs(‚Ñù(_number_))).
      - sec-touint8clamp:P/F/T = 14/1/15 (93.33%)
          If _f_ is odd, return ùîΩ(_f_ + 1).
      - sec-tobigint:P/F/T = 2/1/3 (66.67%)
          Return the value that _prim_ corresponds to in <emu-xref href="#table-tobigint"></emu-xref>.
      - sec-stringtobigint:P/F/T = 8/0/8 (100.00%)
        - sec-stringintegerliteral-grammar:
        - sec-runtime-semantics-mv-for-stringintegerliteral:
      - sec-tobigint64:P/F/T = 6/0/6 (100.00%)
      - sec-tobiguint64:P/F/T = 4/0/4 (100.00%)
      - sec-tostring:
      - sec-toobject:
      - sec-topropertykey:P/F/T = 6/0/6 (100.00%)
      - sec-tolength:P/F/T = 5/0/5 (100.00%)
      - sec-canonicalnumericindexstring:P/F/T = 7/0/7 (100.00%)
      - sec-toindex:P/F/T = 11/0/11 (100.00%)
    - sec-testing-and-comparison-operations:P/F/T = 200/4/204 (98.04%)
      - sec-requireobjectcoercible:
      - sec-isarray:P/F/T = 12/0/12 (100.00%)
      - sec-iscallable:P/F/T = 6/0/6 (100.00%)
      - sec-isconstructor:P/F/T = 6/0/6 (100.00%)
      - sec-isextensible-o:P/F/T = 2/0/2 (100.00%)
      - sec-isintegralnumber:P/F/T = 8/0/8 (100.00%)
      - sec-ispropertykey:P/F/T = 6/0/6 (100.00%)
      - sec-isregexp:P/F/T = 9/0/9 (100.00%)
      - sec-isstringprefix:P/F/T = 4/0/4 (100.00%)
      - sec-isstringwellformedunicode:P/F/T = 10/0/10 (100.00%)
      - sec-samevalue:P/F/T = 10/0/10 (100.00%)
      - sec-samevaluezero:P/F/T = 10/0/10 (100.00%)
      - sec-samevaluenonnumeric:P/F/T = 18/2/20 (90.00%)
          If _x_ and _y_ are exactly the same sequence of code units (same length and same code units at corresponding indices), return *true*; otherwise, return *false*.
          If _x_ and _y_ are both *true* or both *false*, return *true*; otherwise, return *false*.
      - sec-islessthan:P/F/T = 54/1/55 (98.18%)
          Let _k_ be the smallest non-negative integer such that the code unit at index _k_ within _px_ is different from the code unit at index _k_ within _py_. (There must be such a _k_, for neither String is a prefix of the other.)
      - sec-islooselyequal:P/F/T = 35/1/36 (97.22%)
          If _x_ or _y_ are any of *NaN*, *+‚àû*<sub>ùîΩ</sub>, or *-‚àû*<sub>ùîΩ</sub>, return *false*.
      - sec-isstrictlyequal:P/F/T = 10/0/10 (100.00%)
    - sec-operations-on-objects:P/F/T = 303/3/306 (99.02%)
      - sec-makebasicobject:P/F/T = 6/2/8 (75.00%)
          Let _obj_ be a newly created object with an internal slot for each name in _internalSlotsList_.
          Set _obj_'s essential internal methods to the default ordinary object definitions specified in <emu-xref href="#sec-ordinary-object-internal-methods-and-internal-slots"></emu-xref>.
      - sec-get-o-p:P/F/T = 2/0/2 (100.00%)
      - sec-getv:P/F/T = 3/0/3 (100.00%)
      - sec-set-o-p-v-throw:P/F/T = 5/0/5 (100.00%)
      - sec-createdataproperty:P/F/T = 3/0/3 (100.00%)
      - sec-createmethodproperty:P/F/T = 5/0/5 (100.00%)
      - sec-createdatapropertyorthrow:P/F/T = 5/0/5 (100.00%)
      - sec-createnonenumerabledatapropertyorthrow:P/F/T = 5/0/5 (100.00%)
      - sec-definepropertyorthrow:P/F/T = 5/0/5 (100.00%)
      - sec-deletepropertyorthrow:P/F/T = 5/0/5 (100.00%)
      - sec-getmethod:P/F/T = 7/0/7 (100.00%)
      - sec-hasproperty:P/F/T = 2/0/2 (100.00%)
      - sec-hasownproperty:P/F/T = 5/0/5 (100.00%)
      - sec-call:P/F/T = 6/0/6 (100.00%)
      - sec-construct:P/F/T = 6/0/6 (100.00%)
      - sec-setintegritylevel:P/F/T = 24/0/24 (100.00%)
      - sec-testintegritylevel:P/F/T = 18/0/18 (100.00%)
      - sec-createarrayfromlist:P/F/T = 8/0/8 (100.00%)
      - sec-lengthofarraylike:P/F/T = 2/0/2 (100.00%)
      - sec-createlistfromarraylike:P/F/T = 17/0/17 (100.00%)
      - sec-invoke:P/F/T = 5/0/5 (100.00%)
      - sec-ordinaryhasinstance:P/F/T = 19/0/19 (100.00%)
      - sec-speciesconstructor:P/F/T = 12/0/12 (100.00%)
      - sec-enumerableownpropertynames:P/F/T = 21/0/21 (100.00%)
      - sec-getfunctionrealm:P/F/T = 15/0/15 (100.00%)
      - sec-copydataproperties:P/F/T = 21/0/21 (100.00%)
      - sec-privateelementfind:P/F/T = 5/1/6 (83.33%)
          Let _entry_ be that PrivateElement.
      - sec-privatefieldadd:P/F/T = 6/0/6 (100.00%)
      - sec-privatemethodoraccessoradd:P/F/T = 7/0/7 (100.00%)
      - sec-privateget:P/F/T = 12/0/12 (100.00%)
      - sec-privateset:P/F/T = 17/0/17 (100.00%)
      - sec-definefield:P/F/T = 14/0/14 (100.00%)
      - sec-initializeinstanceelements:P/F/T = 10/0/10 (100.00%)
    - sec-operations-on-iterator-objects:P/F/T = 109/1/110 (99.09%)
      - sec-iterator-records:
      - sec-getiterator:P/F/T = 20/0/20 (100.00%)
      - sec-iteratornext:P/F/T = 9/0/9 (100.00%)
      - sec-iteratorcomplete:P/F/T = 2/0/2 (100.00%)
      - sec-iteratorvalue:P/F/T = 2/0/2 (100.00%)
      - sec-iteratorstep:P/F/T = 6/0/6 (100.00%)
      - sec-iteratorclose:P/F/T = 17/0/17 (100.00%)
      - sec-ifabruptcloseiterator:P/F/T = 5/0/5 (100.00%)
      - sec-asynciteratorclose:P/F/T = 19/0/19 (100.00%)
      - sec-createiterresultobject:P/F/T = 5/0/5 (100.00%)
      - sec-createlistiteratorRecord:P/F/T = 9/0/9 (100.00%)
      - sec-iterabletolist:P/F/T = 15/1/16 (93.75%)
          Append _nextValue_ to the end of the List _values_.
  - sec-syntax-directed-operations:P/F/T = 2335/10/2345 (99.57%)
    - sec-syntax-directed-operations-scope-analysis:P/F/T = 884/5/889 (99.44%)
      - sec-static-semantics-boundnames:P/F/T = 150/2/152 (98.68%)
          If _declarationNames_ does not include the element *"\*default\*"*, append *"\*default\*"* to _declarationNames_.
          If _declarationNames_ does not include the element *"\*default\*"*, append *"\*default\*"* to _declarationNames_.
      - sec-static-semantics-declarationpart:P/F/T = 12/0/12 (100.00%)
      - sec-static-semantics-isconstantdeclaration:P/F/T = 32/0/32 (100.00%)
      - sec-static-semantics-lexicallydeclarednames:P/F/T = 102/1/103 (99.03%)
          If |ExportDeclaration| is `export` |VariableStatement|, return a new empty List.
      - sec-static-semantics-lexicallyscopeddeclarations:P/F/T = 112/0/112 (100.00%)
      - sec-static-semantics-vardeclarednames:P/F/T = 203/1/204 (99.51%)
          If |ExportDeclaration| is `export` |VariableStatement|, return BoundNames of |ExportDeclaration|.
      - sec-static-semantics-varscopeddeclarations:P/F/T = 208/1/209 (99.52%)
          If |ExportDeclaration| is `export` |VariableStatement|, return VarScopedDeclarations of |VariableStatement|.
      - sec-static-semantics-toplevellexicallydeclarednames:P/F/T = 11/0/11 (100.00%)
      - sec-static-semantics-toplevellexicallyscopeddeclarations:P/F/T = 11/0/11 (100.00%)
      - sec-static-semantics-toplevelvardeclarednames:P/F/T = 21/0/21 (100.00%)
      - sec-static-semantics-toplevelvarscopeddeclarations:P/F/T = 22/0/22 (100.00%)
    - sec-syntax-directed-operations-labels:P/F/T = 585/0/585 (100.00%)
      - sec-static-semantics-containsduplicatelabels:P/F/T = 192/0/192 (100.00%)
      - sec-static-semantics-containsundefinedbreaktarget:P/F/T = 194/0/194 (100.00%)
      - sec-static-semantics-containsundefinedcontinuetarget:P/F/T = 199/0/199 (100.00%)
    - sec-syntax-directed-operations-function-name-inference:P/F/T = 257/0/257 (100.00%)
      - sec-static-semantics-hasname:P/F/T = 31/0/31 (100.00%)
      - sec-static-semantics-isfunctiondefinition:P/F/T = 149/0/149 (100.00%)
      - sec-isanonymousfunctiondefinition:P/F/T = 7/0/7 (100.00%)
      - sec-static-semantics-isidentifierref:P/F/T = 46/0/46 (100.00%)
      - sec-runtime-semantics-namedevaluation:P/F/T = 24/0/24 (100.00%)
    - sec-syntax-directed-operations-contains:P/F/T = 140/4/144 (97.22%)
      - sec-static-semantics-contains:P/F/T = 110/3/113 (97.35%)
          If _child_ is an instance of _symbol_, return *true*.
          Let _contained_ be the result of _child_ Contains _symbol_.
          If _symbol_ is the |ReservedWord| `super`, return *true*.
      - sec-static-semantics-computedpropertycontains:P/F/T = 30/1/31 (96.77%)
          Return the result of |ComputedPropertyName| Contains _symbol_.
    - sec-syntax-directed-operations-miscellaneous:P/F/T = 469/1/470 (99.79%)
      - sec-runtime-semantics-instantiatefunctionobject:P/F/T = 16/0/16 (100.00%)
      - sec-runtime-semantics-bindinginitialization:P/F/T = 38/0/38 (100.00%)
        - sec-initializeboundname:P/F/T = 8/0/8 (100.00%)
      - sec-runtime-semantics-iteratorbindinginitialization:P/F/T = 219/0/219 (100.00%)
      - sec-static-semantics-assignmenttargettype:P/F/T = 159/1/160 (99.38%)
          If this |IdentifierReference| is contained in strict mode code and StringValue of |Identifier| is *"eval"* or *"arguments"*, return ~invalid~.
      - sec-static-semantics-propname:P/F/T = 37/0/37 (100.00%)
  - sec-executable-code-and-execution-contexts:P/F/T = 396/40/436 (90.83%)
    - sec-environment-records:P/F/T = 293/21/314 (93.31%)
      - sec-the-environment-record-type-hierarchy:P/F/T = 249/21/270 (92.22%)
        - sec-declarative-environment-records:P/F/T = 32/14/46 (69.57%)
          - sec-declarative-environment-records-hasbinding-n:P/F/T = 2/1/3 (66.67%)
              If _envRec_ has a binding for the name that is the value of _N_, return *true*.
          - sec-declarative-environment-records-createmutablebinding-n-d:P/F/T = 3/1/4 (75.00%)
              Create a mutable binding in _envRec_ for _N_ and record that it is uninitialized. If _D_ is *true*, record that the newly created binding may be deleted by a subsequent DeleteBinding call.
          - sec-declarative-environment-records-createimmutablebinding-n-s:P/F/T = 3/1/4 (75.00%)
              Create an immutable binding in _envRec_ for _N_ and record that it is uninitialized. If _S_ is *true*, record that the newly created binding is a strict binding.
          - sec-declarative-environment-records-initializebinding-n-v:P/F/T = 3/2/5 (60.00%)
              Set the bound value for _N_ in _envRec_ to _V_.
              <emu-not-ref>Record</emu-not-ref> that the binding for _N_ in _envRec_ has been initialized.
          - sec-declarative-environment-records-setmutablebinding-n-v-s:P/F/T = 10/5/15 (66.67%)
              If _envRec_ does not have a binding for _N_, then [...]
              If the binding for _N_ in _envRec_ is a strict binding, set _S_ to *true*.
              If the binding for _N_ in _envRec_ has not yet been initialized, throw a *ReferenceError* exception.
              Else if the binding for _N_ in _envRec_ is a mutable binding, change its bound value to _V_.
              Else, [...]
          - sec-declarative-environment-records-getbindingvalue-n-s:P/F/T = 2/2/4 (50.00%)
              If the binding for _N_ in _envRec_ is an uninitialized binding, throw a *ReferenceError* exception.
              Return the value currently bound to _N_ in _envRec_.
          - sec-declarative-environment-records-deletebinding-n:P/F/T = 3/2/5 (60.00%)
              If the binding for _N_ in _envRec_ cannot be deleted, return *false*.
              Remove the binding for _N_ from _envRec_.
          - sec-declarative-environment-records-hasthisbinding:P/F/T = 2/0/2 (100.00%)
          - sec-declarative-environment-records-hassuperbinding:P/F/T = 2/0/2 (100.00%)
          - sec-declarative-environment-records-withbaseobject:P/F/T = 2/0/2 (100.00%)
        - sec-object-environment-records:P/F/T = 48/0/48 (100.00%)
          - sec-object-environment-records-hasbinding-n:P/F/T = 14/0/14 (100.00%)
          - sec-object-environment-records-createmutablebinding-n-d:P/F/T = 4/0/4 (100.00%)
          - sec-object-environment-records-createimmutablebinding-n-s:
          - sec-object-environment-records-initializebinding-n-v:P/F/T = 3/0/3 (100.00%)
          - sec-object-environment-records-setmutablebinding-n-v-s:P/F/T = 7/0/7 (100.00%)
          - sec-object-environment-records-getbindingvalue-n-s:P/F/T = 9/0/9 (100.00%)
          - sec-object-environment-records-deletebinding-n:P/F/T = 3/0/3 (100.00%)
          - sec-object-environment-records-hasthisbinding:P/F/T = 2/0/2 (100.00%)
          - sec-object-environment-records-hassuperbinding:P/F/T = 2/0/2 (100.00%)
          - sec-object-environment-records-withbaseobject:P/F/T = 4/0/4 (100.00%)
        - sec-function-environment-records:P/F/T = 28/0/28 (100.00%)
          - sec-bindthisvalue:P/F/T = 7/0/7 (100.00%)
          - sec-function-environment-records-hasthisbinding:P/F/T = 4/0/4 (100.00%)
          - sec-function-environment-records-hassuperbinding:P/F/T = 6/0/6 (100.00%)
          - sec-function-environment-records-getthisbinding:P/F/T = 5/0/5 (100.00%)
          - sec-getsuperbase:P/F/T = 6/0/6 (100.00%)
        - sec-global-environment-records:P/F/T = 126/2/128 (98.44%)
          - sec-global-environment-records-hasbinding-n:P/F/T = 6/0/6 (100.00%)
          - sec-global-environment-records-createmutablebinding-n-d:P/F/T = 5/0/5 (100.00%)
          - sec-global-environment-records-createimmutablebinding-n-s:P/F/T = 5/0/5 (100.00%)
          - sec-global-environment-records-initializebinding-n-v:P/F/T = 8/0/8 (100.00%)
          - sec-global-environment-records-setmutablebinding-n-v-s:P/F/T = 7/0/7 (100.00%)
          - sec-global-environment-records-getbindingvalue-n-s:P/F/T = 7/0/7 (100.00%)
          - sec-global-environment-records-deletebinding-n:P/F/T = 17/1/18 (94.44%)
              remove that element from the _varNames_.
          - sec-global-environment-records-hasthisbinding:P/F/T = 2/0/2 (100.00%)
          - sec-global-environment-records-hassuperbinding:P/F/T = 2/0/2 (100.00%)
          - sec-global-environment-records-withbaseobject:P/F/T = 2/0/2 (100.00%)
          - sec-global-environment-records-getthisbinding:P/F/T = 2/0/2 (100.00%)
          - sec-hasvardeclaration:P/F/T = 5/0/5 (100.00%)
          - sec-haslexicaldeclaration:P/F/T = 3/0/3 (100.00%)
          - sec-hasrestrictedglobalproperty:P/F/T = 9/0/9 (100.00%)
          - sec-candeclareglobalvar:P/F/T = 7/0/7 (100.00%)
          - sec-candeclareglobalfunction:P/F/T = 9/1/10 (90.00%)
              If IsDataDescriptor(_existingProp_) is *true* and _existingProp_ has attribute values { [[Writable]]: *true*, [[Enumerable]]: *true* }, return *true*.
          - sec-createglobalvarbinding:P/F/T = 14/0/14 (100.00%)
          - sec-createglobalfunctionbinding:P/F/T = 16/0/16 (100.00%)
        - sec-module-environment-records:P/F/T = 15/5/20 (75.00%)
          - sec-module-environment-records-getbindingvalue-n-s:P/F/T = 7/4/11 (63.64%)
              If the binding for _N_ is an indirect binding, then [...]
              Let _M_ and _N2_ be the indirection values provided when this binding for _N_ was created.
              If the binding for _N_ in _envRec_ is an uninitialized binding, throw a *ReferenceError* exception.
              Return the value currently bound to _N_ in _envRec_.
          - sec-module-environment-records-deletebinding-n:
          - sec-module-environment-records-hasthisbinding:P/F/T = 2/0/2 (100.00%)
          - sec-module-environment-records-getthisbinding:P/F/T = 2/0/2 (100.00%)
          - sec-createimportbinding:P/F/T = 4/1/5 (80.00%)
              Create an immutable indirect binding in _envRec_ for _N_ that references _M_ and _N2_ as its target binding and record that the binding is initialized.
      - sec-environment-record-operations:P/F/T = 44/0/44 (100.00%)
        - sec-getidentifierreference:P/F/T = 11/0/11 (100.00%)
        - sec-newdeclarativeenvironment:P/F/T = 4/0/4 (100.00%)
        - sec-newobjectenvironment:P/F/T = 6/0/6 (100.00%)
        - sec-newfunctionenvironment:P/F/T = 9/0/9 (100.00%)
        - sec-newglobalenvironment:P/F/T = 10/0/10 (100.00%)
        - sec-newmoduleenvironment:P/F/T = 4/0/4 (100.00%)
    - sec-privateenvironment-records:P/F/T = 12/1/13 (92.31%)
      - sec-privateenvironment-record-operations:P/F/T = 12/1/13 (92.31%)
        - sec-newprivateenvironment:P/F/T = 3/0/3 (100.00%)
        - sec-resolve-private-identifier:P/F/T = 9/1/10 (90.00%)
            Let _name_ be that Private Name.
    - sec-code-realms:P/F/T = 27/4/31 (87.10%)
      - sec-createrealm:P/F/T = 6/1/7 (85.71%)
          Let _realmRec_ be a new Realm Record.
      - sec-createintrinsics:P/F/T = 5/0/5 (100.00%)
      - sec-setrealmglobalobject:P/F/T = 12/0/12 (100.00%)
      - sec-setdefaultglobalbindings:P/F/T = 4/3/7 (57.14%)
          For each property of the Global Object specified in clause <emu-xref href="#sec-global-object"></emu-xref>, do [...]
          Let _name_ be the String value of the property name.
          Let _desc_ be the fully populated data Property Descriptor for the property, containing the specified attributes for the property. For properties listed in <emu-xref href="#sec-function-properties-of-the-global-object"></emu-xref>, <emu-xref href="#sec-constructor-properties-of-the-global-object"></emu-xref>, or <emu-xref href="#sec-other-properties-of-the-global-object"></emu-xref> the value of the [[Value]] attribute is the corresponding intrinsic object from _realmRec_.
    - sec-execution-contexts:P/F/T = 30/3/33 (90.91%)
      - sec-getactivescriptormodule:P/F/T = 1/3/4 (25.00%)
          If the execution context stack is empty, return *null*.
          Let _ec_ be the topmost execution context on the execution context stack whose ScriptOrModule component is not *null*.
          If no such execution context exists, return *null*. Otherwise, return _ec_'s ScriptOrModule.
      - sec-resolvebinding:P/F/T = 9/0/9 (100.00%)
      - sec-getthisenvironment:P/F/T = 10/0/10 (100.00%)
      - sec-resolvethisbinding:P/F/T = 3/0/3 (100.00%)
      - sec-getnewtarget:P/F/T = 4/0/4 (100.00%)
      - sec-getglobalobject:P/F/T = 3/0/3 (100.00%)
    - sec-jobs:P/F/T = 5/0/5 (100.00%)
      - sec-jobcallback-records:
      - sec-hostmakejobcallback:P/F/T = 2/0/2 (100.00%)
      - sec-hostcalljobcallback:P/F/T = 3/0/3 (100.00%)
      - sec-hostenqueuepromisejob:
    - sec-initializehostdefinedrealm:P/F/T = 10/3/13 (76.92%)
        If the host requires use of an exotic object to serve as _realm_'s global object, let _global_ be such an object created in a host-defined manner. Otherwise, let _global_ be *undefined*, indicating that an ordinary object should be created as the global object.
        If the host requires that the `this` binding in _realm_'s global scope return an object other than the global object, let _thisValue_ be such an object created in a host-defined manner. Otherwise, let _thisValue_ be *undefined*, indicating that _realm_'s global `this` binding should be the global object.
        Create any host-defined global object properties on _globalObj_.
    - sec-agents:P/F/T = 4/2/6 (66.67%)
      - sec-agentsignifier:P/F/T = 2/1/3 (66.67%)
          Let _AR_ be the Agent Record of the surrounding agent.
      - sec-agentcansuspend:P/F/T = 2/1/3 (66.67%)
          Let _AR_ be the Agent Record of the surrounding agent.
    - sec-agent-clusters:
    - sec-forward-progress:
    - sec-weakref-processing-model:P/F/T = 4/1/5 (80.00%)
      - sec-weakref-invariants:
      - sec-liveness:
      - sec-weakref-execution:
      - sec-weakref-host-hooks:P/F/T = 4/1/5 (80.00%)
        - sec-host-cleanup-finalization-registry:P/F/T = 4/1/5 (80.00%)
            perform any host-defined steps for reporting the error.
    - sec-clear-kept-objects:P/F/T = 3/1/4 (75.00%)
        Let _agentRecord_ be the surrounding agent's Agent Record.
    - sec-addtokeptobjects:P/F/T = 3/1/4 (75.00%)
        Let _agentRecord_ be the surrounding agent's Agent Record.
    - sec-cleanup-finalization-registry:P/F/T = 5/3/8 (62.50%)
        While _finalizationRegistry_.[[Cells]] contains a Record _cell_ such that _cell_.[[WeakRefTarget]] is ~empty~, an implementation may perform the following steps: [...]
        Choose any such _cell_.
        Remove _cell_ from _finalizationRegistry_.[[Cells]].
  - sec-ordinary-and-exotic-objects-behaviours:P/F/T = 1417/48/1465 (96.72%)
    - sec-ordinary-object-internal-methods-and-internal-slots:P/F/T = 220/13/233 (94.42%)
      - sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof:P/F/T = 4/0/4 (100.00%)
        - sec-ordinarygetprototypeof:P/F/T = 2/0/2 (100.00%)
      - sec-ordinary-object-internal-methods-and-internal-slots-setprototypeof-v:P/F/T = 23/0/23 (100.00%)
        - sec-ordinarysetprototypeof:P/F/T = 21/0/21 (100.00%)
      - sec-ordinary-object-internal-methods-and-internal-slots-isextensible:P/F/T = 4/0/4 (100.00%)
        - sec-ordinaryisextensible:P/F/T = 2/0/2 (100.00%)
      - sec-ordinary-object-internal-methods-and-internal-slots-preventextensions:P/F/T = 5/0/5 (100.00%)
        - sec-ordinarypreventextensions:P/F/T = 3/0/3 (100.00%)
      - sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p:P/F/T = 15/2/17 (88.24%)
        - sec-ordinarygetownproperty:P/F/T = 13/2/15 (86.67%)
            If _O_ does not have an own property with key _P_, return *undefined*.
            Let _X_ be _O_'s own property whose key is _P_.
      - sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc:P/F/T = 61/6/67 (91.04%)
        - sec-ordinarydefineownproperty:P/F/T = 4/0/4 (100.00%)
        - sec-iscompatiblepropertydescriptor:P/F/T = 2/0/2 (100.00%)
        - sec-validateandapplypropertydescriptor:P/F/T = 53/6/59 (89.83%)
            Create an own accessor property named _P_ of object _O_ whose [[Get]], [[Set]], [[Enumerable]], and [[Configurable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href="#table-object-property-attributes">default value</emu-xref> otherwise.
            Create an own data property named _P_ of object _O_ whose [[Value]], [[Writable]], [[Enumerable]], and [[Configurable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href="#table-object-property-attributes">default value</emu-xref> otherwise.
            If _Desc_ does not have any fields, return *true*.
            Replace the property named _P_ of object _O_ with an accessor property whose [[Configurable]] and [[Enumerable]] attributes are set to _configurable_ and _enumerable_, respectively, and whose [[Get]] and [[Set]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href="#table-object-property-attributes">default value</emu-xref> otherwise.
            Replace the property named _P_ of object _O_ with a data property whose [[Configurable]] and [[Enumerable]] attributes are set to _configurable_ and _enumerable_, respectively, and whose [[Value]] and [[Writable]] attributes are set to the value of the corresponding field in _Desc_ if _Desc_ has that field, or to the attribute's <emu-xref href="#table-object-property-attributes">default value</emu-xref> otherwise.
            For each field of _Desc_, set the corresponding attribute of the property named _P_ of object _O_ to the value of the field.
      - sec-ordinary-object-internal-methods-and-internal-slots-hasproperty-p:P/F/T = 11/0/11 (100.00%)
        - sec-ordinaryhasproperty:P/F/T = 9/0/9 (100.00%)
      - sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver:P/F/T = 17/0/17 (100.00%)
        - sec-ordinaryget:P/F/T = 15/0/15 (100.00%)
      - sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver:P/F/T = 38/0/38 (100.00%)
        - sec-ordinaryset:P/F/T = 3/0/3 (100.00%)
        - sec-ordinarysetwithowndescriptor:P/F/T = 33/0/33 (100.00%)
      - sec-ordinary-object-internal-methods-and-internal-slots-delete-p:P/F/T = 10/1/11 (90.91%)
        - sec-ordinarydelete:P/F/T = 8/1/9 (88.89%)
            Remove the own property with name _P_ from _O_.
      - sec-ordinary-object-internal-methods-and-internal-slots-ownpropertykeys:P/F/T = 8/3/11 (72.73%)
        - sec-ordinaryownpropertykeys:P/F/T = 6/3/9 (66.67%)
            For each own property key _P_ of _O_ such that _P_ is an array index, in ascending numeric index order, do [...]
            For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an array index, in ascending chronological order of property creation, do [...]
            For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do [...]
      - sec-ordinaryobjectcreate:P/F/T = 6/1/7 (85.71%)
          append each of its elements to _internalSlotsList_.
      - sec-ordinarycreatefromconstructor:P/F/T = 4/0/4 (100.00%)
      - sec-getprototypefromconstructor:P/F/T = 8/0/8 (100.00%)
      - sec-requireinternalslot:P/F/T = 6/0/6 (100.00%)
    - sec-ecmascript-function-objects:P/F/T = 334/9/343 (97.38%)
      - sec-ecmascript-function-objects-call-thisargument-argumentslist:P/F/T = 77/3/80 (96.25%)
          Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
          Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
        - sec-prepareforordinarycall:P/F/T = 14/1/15 (93.33%)
            If _callerContext_ is not already suspended, suspend _callerContext_.
        - sec-ordinarycallbindthis:P/F/T = 21/0/21 (100.00%)
        - sec-runtime-semantics-evaluatebody:P/F/T = 25/0/25 (100.00%)
        - sec-ordinarycallevaluatebody:P/F/T = 2/0/2 (100.00%)
      - sec-ecmascript-function-objects-construct-argumentslist-newtarget:P/F/T = 29/2/31 (93.55%)
          Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
          Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
      - sec-ordinaryfunctioncreate:P/F/T = 28/0/28 (100.00%)
      - sec-addrestrictedfunctionproperties:P/F/T = 8/0/8 (100.00%)
        - sec-%throwtypeerror%:P/F/T = 2/0/2 (100.00%)
      - sec-makeconstructor:P/F/T = 17/0/17 (100.00%)
      - sec-makeclassconstructor:P/F/T = 4/0/4 (100.00%)
      - sec-makemethod:P/F/T = 3/0/3 (100.00%)
      - sec-definemethodproperty:P/F/T = 9/0/9 (100.00%)
      - sec-setfunctionname:P/F/T = 21/1/22 (95.45%)
          Optionally, set _F_.[[InitialName]] to _name_.
      - sec-setfunctionlength:P/F/T = 4/0/4 (100.00%)
      - sec-functiondeclarationinstantiation:P/F/T = 134/3/137 (97.81%)
          Insert _fn_ as the first element of _functionNames_.
          Insert _d_ as the first element of _functionsToInitialize_.
          Let _instantiatedVarNames_ be a copy of the List _parameterBindings_.
    - sec-built-in-function-objects:P/F/T = 26/8/34 (76.47%)
      - sec-built-in-function-objects-call-thisargument-argumentslist:P/F/T = 9/4/13 (69.23%)
          If _callerContext_ is not already suspended, suspend _callerContext_.
          Perform any necessary implementation-defined initialization of _calleeContext_.
          Let _result_ be the Completion Record that is the result of evaluating _F_ in a manner that conforms to the specification of _F_. _thisArgument_ is the *this* value, _argumentsList_ provides the named parameters, and the NewTarget value is *undefined*.
          Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
      - sec-built-in-function-objects-construct-argumentslist-newtarget:P/F/T = 1/1/2 (50.00%)
          Let _result_ be the Completion Record that is the result of evaluating _F_ in a manner that conforms to the specification of _F_. The *this* value is uninitialized, _argumentsList_ provides the named parameters, and _newTarget_ provides the NewTarget value.
      - sec-createbuiltinfunction:P/F/T = 16/3/19 (84.21%)
          Let _internalSlotsList_ be a List containing the names of all the internal slots that <emu-xref href="#sec-built-in-function-objects"></emu-xref> requires for the built-in function object that is about to be created.
          Append to _internalSlotsList_ the elements of _additionalInternalSlotsList_.
          Let _func_ be a new built-in function object that, when called, performs the action described by _behaviour_ using the provided arguments as the values of the corresponding parameters specified by _behaviour_. The new function object has internal slots whose names are the elements of _internalSlotsList_, and an [[InitialName]] internal slot.
    - sec-built-in-exotic-object-internal-methods-and-slots:P/F/T = 511/12/523 (97.71%)
      - sec-bound-function-exotic-objects:P/F/T = 27/0/27 (100.00%)
        - sec-bound-function-exotic-objects-call-thisargument-argumentslist:P/F/T = 6/0/6 (100.00%)
        - sec-bound-function-exotic-objects-construct-argumentslist-newtarget:P/F/T = 8/0/8 (100.00%)
        - sec-boundfunctioncreate:P/F/T = 13/0/13 (100.00%)
      - sec-array-exotic-objects:P/F/T = 99/1/100 (99.00%)
        - sec-array-exotic-objects-defineownproperty-p-desc:P/F/T = 24/0/24 (100.00%)
        - sec-arraycreate:P/F/T = 10/0/10 (100.00%)
        - sec-arrayspeciescreate:P/F/T = 23/0/23 (100.00%)
        - sec-arraysetlength:P/F/T = 42/1/43 (97.67%)
            Let _newLenDesc_ be a copy of _Desc_.
      - sec-string-exotic-objects:P/F/T = 51/3/54 (94.44%)
        - sec-string-exotic-objects-getownproperty-p:P/F/T = 5/0/5 (100.00%)
        - sec-string-exotic-objects-defineownproperty-p-desc:P/F/T = 7/0/7 (100.00%)
        - sec-string-exotic-objects-ownpropertykeys:P/F/T = 12/3/15 (80.00%)
            For each own property key _P_ of _O_ such that _P_ is an array index and ! ToIntegerOrInfinity(_P_) ‚â• _len_, in ascending numeric index order, do [...]
            For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an array index, in ascending chronological order of property creation, do [...]
            For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do [...]
        - sec-stringcreate:P/F/T = 10/0/10 (100.00%)
        - sec-stringgetownproperty:P/F/T = 17/0/17 (100.00%)
      - sec-arguments-exotic-objects:P/F/T = 129/3/132 (97.73%)
        - sec-arguments-exotic-objects-getownproperty-p:P/F/T = 10/0/10 (100.00%)
        - sec-arguments-exotic-objects-defineownproperty-p-desc:P/F/T = 25/2/27 (92.59%)
            and _Desc_.[[Writable]] is *false*, then [...]
            Set _newArgDesc_ to a copy of _Desc_.
        - sec-arguments-exotic-objects-get-p-receiver:P/F/T = 9/0/9 (100.00%)
        - sec-arguments-exotic-objects-set-p-v-receiver:P/F/T = 12/0/12 (100.00%)
        - sec-arguments-exotic-objects-delete-p:P/F/T = 8/0/8 (100.00%)
        - sec-createunmappedargumentsobject:P/F/T = 14/0/14 (100.00%)
        - sec-createmappedargumentsobject:P/F/T = 51/1/52 (98.08%)
            Add _name_ as an element of the list _mappedNames_.
          - sec-makearggetter:P/F/T = 7/0/7 (100.00%)
          - sec-makeargsetter:P/F/T = 7/0/7 (100.00%)
      - sec-integer-indexed-exotic-objects:P/F/T = 117/2/119 (98.32%)
        - sec-integer-indexed-exotic-objects-getownproperty-p:P/F/T = 11/0/11 (100.00%)
        - sec-integer-indexed-exotic-objects-hasproperty-p:P/F/T = 7/0/7 (100.00%)
        - sec-integer-indexed-exotic-objects-defineownproperty-p-desc:P/F/T = 20/0/20 (100.00%)
        - sec-integer-indexed-exotic-objects-get-p-receiver:P/F/T = 8/0/8 (100.00%)
        - sec-integer-indexed-exotic-objects-set-p-v-receiver:P/F/T = 9/0/9 (100.00%)
        - sec-integer-indexed-exotic-objects-delete-p:P/F/T = 10/0/10 (100.00%)
        - sec-integer-indexed-exotic-objects-ownpropertykeys:P/F/T = 10/2/12 (83.33%)
            For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an integer index, in ascending chronological order of property creation, do [...]
            For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do [...]
        - sec-integerindexedobjectcreate:P/F/T = 12/0/12 (100.00%)
        - sec-isvalidintegerindex:P/F/T = 10/0/10 (100.00%)
        - sec-integerindexedelementget:P/F/T = 8/0/8 (100.00%)
        - sec-integerindexedelementset:P/F/T = 12/0/12 (100.00%)
      - sec-module-namespace-exotic-objects:P/F/T = 81/3/84 (96.43%)
        - sec-module-namespace-exotic-objects-getprototypeof:P/F/T = 2/0/2 (100.00%)
        - sec-module-namespace-exotic-objects-setprototypeof-v:P/F/T = 2/0/2 (100.00%)
        - sec-module-namespace-exotic-objects-isextensible:P/F/T = 2/0/2 (100.00%)
        - sec-module-namespace-exotic-objects-preventextensions:P/F/T = 2/0/2 (100.00%)
        - sec-module-namespace-exotic-objects-getownproperty-p:P/F/T = 8/0/8 (100.00%)
        - sec-module-namespace-exotic-objects-defineownproperty-p-desc:P/F/T = 17/0/17 (100.00%)
        - sec-module-namespace-exotic-objects-hasproperty-p:P/F/T = 7/0/7 (100.00%)
        - sec-module-namespace-exotic-objects-get-p-receiver:P/F/T = 19/0/19 (100.00%)
        - sec-module-namespace-exotic-objects-set-p-v-receiver:P/F/T = 2/0/2 (100.00%)
        - sec-module-namespace-exotic-objects-delete-p:P/F/T = 8/0/8 (100.00%)
        - sec-module-namespace-exotic-objects-ownpropertykeys:P/F/T = 4/0/4 (100.00%)
        - sec-modulenamespacecreate:P/F/T = 8/3/11 (72.73%)
            Set _M_'s essential internal methods to the definitions specified in <emu-xref href="#sec-module-namespace-exotic-objects"></emu-xref>.
            Let _sortedExports_ be a List whose elements are the elements of _exports_ ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using *undefined* as _comparefn_.
            Create own properties of _M_ corresponding to the definitions in <emu-xref href="#sec-module-namespace-objects"></emu-xref>.
      - sec-immutable-prototype-exotic-objects:P/F/T = 7/0/7 (100.00%)
        - sec-immutable-prototype-exotic-objects-setprototypeof-v:P/F/T = 2/0/2 (100.00%)
        - sec-set-immutable-prototype:P/F/T = 5/0/5 (100.00%)
    - sec-proxy-object-internal-methods-and-internal-slots:P/F/T = 326/6/332 (98.19%)
      - sec-proxy-object-internal-methods-and-internal-slots-getprototypeof:P/F/T = 20/0/20 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-setprototypeof-v:P/F/T = 20/0/20 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-isextensible:P/F/T = 15/0/15 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-preventextensions:P/F/T = 17/0/17 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-getownproperty-p:P/F/T = 41/0/41 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-defineownproperty-p-desc:P/F/T = 36/0/36 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-hasproperty-p:P/F/T = 22/0/22 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver:P/F/T = 23/0/23 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-set-p-v-receiver:P/F/T = 25/0/25 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-delete-p:P/F/T = 22/0/22 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-ownpropertykeys:P/F/T = 42/5/47 (89.36%)
          Append _key_ as an element of _targetNonconfigurableKeys_.
          Append _key_ as an element of _targetConfigurableKeys_.
          Let _uncheckedResultKeys_ be a List whose elements are the elements of _trapResult_.
          Remove _key_ from _uncheckedResultKeys_.
          Remove _key_ from _uncheckedResultKeys_.
      - sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist:P/F/T = 12/0/12 (100.00%)
      - sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget:P/F/T = 16/0/16 (100.00%)
      - sec-proxycreate:P/F/T = 15/1/16 (93.75%)
          Set _P_'s essential internal methods, except for [[Call]] and [[Construct]], to the definitions specified in <emu-xref href="#sec-proxy-object-internal-methods-and-internal-slots"></emu-xref>.
  - sec-ecmascript-language-source-code:P/F/T = 32/12/44 (72.73%)
    - sec-source-text:P/F/T = 32/12/44 (72.73%)
      - sec-utf16encodecodepoint:P/F/T = 4/3/7 (57.14%)
          return the String value consisting of the code unit whose value is _cp_.
          Let _cu1_ be the code unit whose value is floor((_cp_ - 0x10000) / 0x400) + 0xD800.
          Let _cu2_ be the code unit whose value is ((_cp_ - 0x10000) modulo 0x400) + 0xDC00.
      - sec-codepointstostring:P/F/T = 4/1/5 (80.00%)
          For each code point _cp_ of _text_, do [...]
      - sec-utf16decodesurrogatepair:P/F/T = 3/1/4 (75.00%)
          Return the code point _cp_.
      - sec-codepointat:P/F/T = 10/4/14 (71.43%)
          Let _cp_ be the code point whose numeric value is that of _first_.
          If _first_ is not a <emu-xref href="#leading-surrogate"></emu-xref> or <emu-xref href="#trailing-surrogate"></emu-xref>, then [...]
          If _first_ is a <emu-xref href="#trailing-surrogate"></emu-xref> or _position_ + 1 = _size_, then [...]
          If _second_ is not a <emu-xref href="#trailing-surrogate"></emu-xref>, then [...]
      - sec-stringtocodepoints:P/F/T = 10/0/10 (100.00%)
      - sec-parsetext:P/F/T = 1/3/4 (25.00%)
          Attempt to parse _sourceText_ using _goalSymbol_ as the goal symbol, and analyse the parse result for any early error conditions. Parsing and early error detection may be interleaved in an implementation-defined manner.
          If the parse succeeded and no early errors were found, return the Parse Node (an instance of _goalSymbol_) at the root of the parse tree resulting from the parse.
          Otherwise, return a List of one or more *SyntaxError* objects representing the parsing errors and/or early errors. If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-defined, but at least one must be present.
    - sec-types-of-source-code:
      - sec-directive-prologues-and-the-use-strict-directive:
      - sec-strict-mode-code:
      - sec-non-ecmascript-functions:
  - sec-ecmascript-language-lexical-grammar:P/F/T = 28/11/39 (71.79%)
    - sec-unicode-format-control-characters:
    - sec-white-space:
    - sec-line-terminators:
    - sec-comments:
    - sec-tokens:
    - sec-names-and-keywords:P/F/T = 10/5/15 (66.67%)
      - sec-identifier-names:P/F/T = 10/5/15 (66.67%)
        - sec-identifier-names-static-semantics-early-errors:
        - sec-identifiercodepoints:P/F/T = 6/1/7 (85.71%)
            Let _cps_ be IdentifierCodePoints of the derived |IdentifierName|.
        - sec-identifiercodepoint:P/F/T = 4/4/8 (50.00%)
            Return the code point matched by |IdentifierStartChar|.
            Return the code point matched by |IdentifierPartChar|.
            Return the code point whose numeric value is the MV of |Hex4Digits|.
            Return the code point whose numeric value is the MV of |CodePoint|.
      - sec-keywords-and-reserved-words:
    - sec-punctuators:
    - sec-ecmascript-language-lexical-grammar-literals:P/F/T = 18/6/24 (75.00%)
      - sec-null-literals:
      - sec-boolean-literals:
      - sec-literals-numeric-literals:P/F/T = 16/4/20 (80.00%)
        - sec-numeric-literals-early-errors:
        - sec-static-semantics-mv:
        - sec-numericvalue:P/F/T = 16/4/20 (80.00%)
            Let _n_ be the number of code points in |DecimalDigits|, excluding all occurrences of |NumericLiteralSeparator|.
            Let _mv_ be (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup>) plus the MV of |DecimalDigits|.
            Let _n_ be the number of code points in |DecimalDigits|, excluding all occurrences of |NumericLiteralSeparator|.
            Let _mv_ be (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup>) plus the MV of |DecimalDigits|.
      - sec-literals-string-literals:
        - sec-string-literals-early-errors:
        - sec-static-semantics-sv:
        - sec-string-literals-static-semantics-mv:
      - sec-literals-regular-expression-literals:P/F/T = 2/2/4 (50.00%)
        - sec-static-semantics-bodytext:P/F/T = 1/1/2 (50.00%)
            Return the source text that was recognized as |RegularExpressionBody|.
        - sec-static-semantics-flagtext:P/F/T = 1/1/2 (50.00%)
            Return the source text that was recognized as |RegularExpressionFlags|.
      - sec-template-literal-lexical-components:
        - sec-static-semantics-tv:
        - sec-static-semantics-trv:
    - sec-automatic-semicolon-insertion:
      - sec-rules-of-automatic-semicolon-insertion:
      - sec-examples-of-automatic-semicolon-insertion:
      - sec-interesting-cases-of-automatic-semicolon-insertion:
        - sec-asi-interesting-cases-in-statement-lists:
        - sec-asi-cases-with-no-lineterminator-here:
          - sec-no-lineterminator-here-automatic-semicolon-insertion-list:
  - sec-ecmascript-language-expressions:P/F/T = 1399/6/1405 (99.57%)
    - sec-identifiers:P/F/T = 30/0/30 (100.00%)
      - sec-identifiers-static-semantics-early-errors:
      - sec-static-semantics-stringvalue:P/F/T = 24/0/24 (100.00%)
      - sec-identifiers-runtime-semantics-evaluation:P/F/T = 6/0/6 (100.00%)
    - sec-primary-expression:P/F/T = 337/3/340 (99.12%)
      - sec-this-keyword:P/F/T = 2/0/2 (100.00%)
        - sec-this-keyword-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
      - sec-identifier-reference:
      - sec-primary-expression-literals:P/F/T = 11/0/11 (100.00%)
        - sec-literals-runtime-semantics-evaluation:P/F/T = 11/0/11 (100.00%)
      - sec-array-initializer:P/F/T = 105/0/105 (100.00%)
        - sec-runtime-semantics-arrayaccumulation:P/F/T = 75/0/75 (100.00%)
        - sec-array-initializer-runtime-semantics-evaluation:P/F/T = 30/0/30 (100.00%)
      - sec-object-initializer:P/F/T = 82/0/82 (100.00%)
        - sec-object-initializer-static-semantics-early-errors:
        - sec-static-semantics-iscomputedpropertykey:P/F/T = 4/0/4 (100.00%)
        - sec-static-semantics-propertynamelist:P/F/T = 11/0/11 (100.00%)
        - sec-object-initializer-runtime-semantics-evaluation:P/F/T = 21/0/21 (100.00%)
        - sec-runtime-semantics-propertydefinitionevaluation:P/F/T = 46/0/46 (100.00%)
      - sec-function-defining-expressions:
      - sec-primary-expression-regular-expression-literals:P/F/T = 16/2/18 (88.89%)
        - sec-primary-expression-regular-expression-literals-static-semantics-early-errors:
        - sec-isvalidregularexpressionliteral:P/F/T = 12/2/14 (85.71%)
            If FlagText of _literal_ contains any code points other than `g`, `i`, `m`, `s`, `u`, or `y`, or if it contains the same code point more than once, return *false*.
            Set _patternText_ to the sequence of code points resulting from interpreting each of the 16-bit elements of _stringValue_ as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.
        - sec-regular-expression-literals-runtime-semantics-evaluation:P/F/T = 4/0/4 (100.00%)
      - sec-template-literals:P/F/T = 116/1/117 (99.15%)
        - sec-static-semantics-template-early-errors:
        - sec-static-semantics-templatestrings:P/F/T = 45/0/45 (100.00%)
        - sec-gettemplateobject:P/F/T = 27/1/28 (96.43%)
            Let _rawValue_ be the String value _rawStrings_[_index_].
        - sec-runtime-semantics-substitutionevaluation:P/F/T = 13/0/13 (100.00%)
        - sec-template-literals-runtime-semantics-evaluation:P/F/T = 31/0/31 (100.00%)
      - sec-grouping-operator:P/F/T = 5/0/5 (100.00%)
        - sec-grouping-operator-static-semantics-early-errors:
        - sec-grouping-operator-runtime-semantics-evaluation:P/F/T = 5/0/5 (100.00%)
    - sec-left-hand-side-expressions:P/F/T = 308/0/308 (100.00%)
      - sec-static-semantics:
        - sec-left-hand-side-expressions-static-semantics-early-errors:
      - sec-property-accessors:P/F/T = 38/0/38 (100.00%)
        - sec-property-accessors-runtime-semantics-evaluation:P/F/T = 38/0/38 (100.00%)
      - sec-evaluate-property-access-with-expression-key:P/F/T = 5/0/5 (100.00%)
      - sec-evaluate-property-access-with-identifier-key:P/F/T = 3/0/3 (100.00%)
      - sec-new-operator:P/F/T = 14/0/14 (100.00%)
        - sec-new-operator-runtime-semantics-evaluation:P/F/T = 14/0/14 (100.00%)
          - sec-evaluatenew:P/F/T = 10/0/10 (100.00%)
      - sec-function-calls:P/F/T = 48/0/48 (100.00%)
        - sec-function-calls-runtime-semantics-evaluation:P/F/T = 28/0/28 (100.00%)
        - sec-evaluatecall:P/F/T = 20/0/20 (100.00%)
      - sec-super-keyword:P/F/T = 44/0/44 (100.00%)
        - sec-super-keyword-runtime-semantics-evaluation:P/F/T = 32/0/32 (100.00%)
        - sec-getsuperconstructor:P/F/T = 7/0/7 (100.00%)
        - sec-makesuperpropertyreference:P/F/T = 5/0/5 (100.00%)
      - sec-argument-lists:P/F/T = 49/0/49 (100.00%)
        - sec-runtime-semantics-argumentlistevaluation:P/F/T = 49/0/49 (100.00%)
      - sec-optional-chains:P/F/T = 67/0/67 (100.00%)
        - sec-optional-chaining-evaluation:P/F/T = 21/0/21 (100.00%)
        - sec-optional-chaining-chain-evaluation:P/F/T = 46/0/46 (100.00%)
      - sec-import-calls:P/F/T = 9/0/9 (100.00%)
        - sec-import-call-runtime-semantics-evaluation:P/F/T = 9/0/9 (100.00%)
      - sec-tagged-templates:P/F/T = 12/0/12 (100.00%)
        - sec-tagged-templates-runtime-semantics-evaluation:P/F/T = 12/0/12 (100.00%)
      - sec-meta-properties:P/F/T = 19/0/19 (100.00%)
        - sec-meta-properties-runtime-semantics-evaluation:P/F/T = 19/0/19 (100.00%)
          - sec-hostgetimportmetaproperties:
          - sec-hostfinalizeimportmeta:
    - sec-update-expressions:P/F/T = 44/0/44 (100.00%)
      - sec-update-expressions-static-semantics-early-errors:
      - sec-postfix-increment-operator:P/F/T = 11/0/11 (100.00%)
        - sec-postfix-increment-operator-runtime-semantics-evaluation:P/F/T = 11/0/11 (100.00%)
      - sec-postfix-decrement-operator:P/F/T = 11/0/11 (100.00%)
        - sec-postfix-decrement-operator-runtime-semantics-evaluation:P/F/T = 11/0/11 (100.00%)
      - sec-prefix-increment-operator:P/F/T = 11/0/11 (100.00%)
        - sec-prefix-increment-operator-runtime-semantics-evaluation:P/F/T = 11/0/11 (100.00%)
      - sec-prefix-decrement-operator:P/F/T = 11/0/11 (100.00%)
        - sec-prefix-decrement-operator-runtime-semantics-evaluation:P/F/T = 11/0/11 (100.00%)
    - sec-unary-operators:P/F/T = 64/1/65 (98.46%)
      - sec-delete-operator:P/F/T = 23/0/23 (100.00%)
        - sec-delete-operator-static-semantics-early-errors:
        - sec-delete-operator-runtime-semantics-evaluation:P/F/T = 23/0/23 (100.00%)
      - sec-void-operator:P/F/T = 4/0/4 (100.00%)
        - sec-void-operator-runtime-semantics-evaluation:P/F/T = 4/0/4 (100.00%)
      - sec-typeof-operator:P/F/T = 8/1/9 (88.89%)
        - sec-typeof-operator-runtime-semantics-evaluation:P/F/T = 8/1/9 (88.89%)
            Return a String according to <emu-xref href="#table-typeof-operator-results"></emu-xref>.
      - sec-unary-plus-operator:P/F/T = 3/0/3 (100.00%)
        - sec-unary-plus-operator-runtime-semantics-evaluation:P/F/T = 3/0/3 (100.00%)
      - sec-unary-minus-operator:P/F/T = 10/0/10 (100.00%)
        - sec-unary-minus-operator-runtime-semantics-evaluation:P/F/T = 10/0/10 (100.00%)
      - sec-bitwise-not-operator:P/F/T = 10/0/10 (100.00%)
        - sec-bitwise-not-operator-runtime-semantics-evaluation:P/F/T = 10/0/10 (100.00%)
      - sec-logical-not-operator:P/F/T = 6/0/6 (100.00%)
        - sec-logical-not-operator-runtime-semantics-evaluation:P/F/T = 6/0/6 (100.00%)
    - sec-exp-operator:P/F/T = 2/0/2 (100.00%)
      - sec-exp-operator-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
    - sec-multiplicative-operators:P/F/T = 3/0/3 (100.00%)
      - sec-multiplicative-operators-runtime-semantics-evaluation:P/F/T = 3/0/3 (100.00%)
    - sec-additive-operators:P/F/T = 4/0/4 (100.00%)
      - sec-addition-operator-plus:P/F/T = 2/0/2 (100.00%)
        - sec-addition-operator-plus-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
      - sec-subtraction-operator-minus:P/F/T = 2/0/2 (100.00%)
        - sec-subtraction-operator-minus-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
    - sec-bitwise-shift-operators:P/F/T = 6/0/6 (100.00%)
      - sec-left-shift-operator:P/F/T = 2/0/2 (100.00%)
        - sec-left-shift-operator-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
      - sec-signed-right-shift-operator:P/F/T = 2/0/2 (100.00%)
        - sec-signed-right-shift-operator-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
      - sec-unsigned-right-shift-operator:P/F/T = 2/0/2 (100.00%)
        - sec-unsigned-right-shift-operator-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
    - sec-relational-operators:P/F/T = 71/0/71 (100.00%)
      - sec-relational-operators-runtime-semantics-evaluation:P/F/T = 61/0/61 (100.00%)
      - sec-instanceofoperator:P/F/T = 10/0/10 (100.00%)
    - sec-equality-operators:P/F/T = 30/0/30 (100.00%)
      - sec-equality-operators-runtime-semantics-evaluation:P/F/T = 30/0/30 (100.00%)
    - sec-binary-bitwise-operators:P/F/T = 6/0/6 (100.00%)
      - sec-binary-bitwise-operators-runtime-semantics-evaluation:P/F/T = 6/0/6 (100.00%)
    - sec-binary-logical-operators:P/F/T = 24/0/24 (100.00%)
      - sec-binary-logical-operators-runtime-semantics-evaluation:P/F/T = 24/0/24 (100.00%)
    - sec-conditional-operator:P/F/T = 10/0/10 (100.00%)
      - sec-conditional-operator-runtime-semantics-evaluation:P/F/T = 10/0/10 (100.00%)
    - sec-assignment-operators:P/F/T = 455/2/457 (99.56%)
      - sec-assignment-operators-static-semantics-early-errors:
      - sec-assignment-operators-runtime-semantics-evaluation:P/F/T = 68/1/69 (98.55%)
          Let _opText_ be the sequence of Unicode code points associated with _assignmentOpText_ in the following table: [...]
      - sec-applystringornumericbinaryoperator:P/F/T = 28/1/29 (96.55%)
          Let _operation_ be the abstract operation associated with _opText_ and Type(_lnum_) in the following table: [...]
      - sec-evaluatestringornumericbinaryexpression:P/F/T = 6/0/6 (100.00%)
      - sec-destructuring-assignment:P/F/T = 353/0/353 (100.00%)
        - sec-destructuring-assignment-static-semantics-early-errors:
        - sec-runtime-semantics-destructuringassignmentevaluation:P/F/T = 144/0/144 (100.00%)
        - sec-runtime-semantics-propertydestructuringassignmentevaluation:P/F/T = 37/0/37 (100.00%)
        - sec-runtime-semantics-restdestructuringassignmentevaluation:P/F/T = 6/0/6 (100.00%)
        - sec-runtime-semantics-iteratordestructuringassignmentevaluation:P/F/T = 126/0/126 (100.00%)
        - sec-runtime-semantics-keyeddestructuringassignmentevaluation:P/F/T = 40/0/40 (100.00%)
    - sec-comma-operator:P/F/T = 5/0/5 (100.00%)
      - sec-comma-operator-runtime-semantics-evaluation:P/F/T = 5/0/5 (100.00%)
  - sec-ecmascript-language-statements-and-declarations:P/F/T = 1060/6/1066 (99.44%)
    - sec-statement-semantics:P/F/T = 14/0/14 (100.00%)
      - sec-statement-semantics-runtime-semantics-evaluation:P/F/T = 14/0/14 (100.00%)
    - sec-block:P/F/T = 33/0/33 (100.00%)
      - sec-block-static-semantics-early-errors:
      - sec-block-runtime-semantics-evaluation:P/F/T = 15/0/15 (100.00%)
      - sec-blockdeclarationinstantiation:P/F/T = 18/0/18 (100.00%)
    - sec-declarations-and-the-variable-statement:P/F/T = 117/0/117 (100.00%)
      - sec-let-and-const-declarations:P/F/T = 28/0/28 (100.00%)
        - sec-let-and-const-declarations-static-semantics-early-errors:
        - sec-let-and-const-declarations-runtime-semantics-evaluation:P/F/T = 28/0/28 (100.00%)
      - sec-variable-statement:P/F/T = 25/0/25 (100.00%)
        - sec-variable-statement-runtime-semantics-evaluation:P/F/T = 25/0/25 (100.00%)
      - sec-destructuring-binding-patterns:P/F/T = 64/0/64 (100.00%)
        - sec-destructuring-binding-patterns-runtime-semantics-propertybindinginitialization:P/F/T = 13/0/13 (100.00%)
        - sec-destructuring-binding-patterns-runtime-semantics-restbindinginitialization:P/F/T = 7/0/7 (100.00%)
        - sec-runtime-semantics-keyedbindinginitialization:P/F/T = 44/0/44 (100.00%)
    - sec-empty-statement:P/F/T = 2/0/2 (100.00%)
      - sec-empty-statement-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
    - sec-expression-statement:P/F/T = 3/0/3 (100.00%)
      - sec-expression-statement-runtime-semantics-evaluation:P/F/T = 3/0/3 (100.00%)
    - sec-if-statement:P/F/T = 18/0/18 (100.00%)
      - sec-if-statement-static-semantics-early-errors:
      - sec-if-statement-runtime-semantics-evaluation:P/F/T = 18/0/18 (100.00%)
    - sec-iteration-statements:P/F/T = 472/2/474 (99.58%)
      - sec-iteration-statements-semantics:P/F/T = 18/0/18 (100.00%)
        - sec-loopcontinues:P/F/T = 10/0/10 (100.00%)
        - sec-runtime-semantics-loopevaluation:P/F/T = 8/0/8 (100.00%)
      - sec-do-while-statement:P/F/T = 13/0/13 (100.00%)
        - sec-do-while-statement-static-semantics-early-errors:
        - sec-runtime-semantics-dowhileloopevaluation:P/F/T = 13/0/13 (100.00%)
      - sec-while-statement:P/F/T = 13/0/13 (100.00%)
        - sec-while-statement-static-semantics-early-errors:
        - sec-runtime-semantics-whileloopevaluation:P/F/T = 13/0/13 (100.00%)
      - sec-for-statement:P/F/T = 195/0/195 (100.00%)
        - sec-for-statement-static-semantics-early-errors:
        - sec-runtime-semantics-forloopevaluation:P/F/T = 160/0/160 (100.00%)
        - sec-forbodyevaluation:P/F/T = 21/0/21 (100.00%)
        - sec-createperiterationenvironment:P/F/T = 14/0/14 (100.00%)
      - sec-for-in-and-for-of-statements:P/F/T = 233/2/235 (99.15%)
        - sec-for-in-and-for-of-statements-static-semantics-early-errors:
        - sec-static-semantics-isdestructuring:P/F/T = 30/0/30 (100.00%)
        - sec-runtime-semantics-fordeclarationbindinginitialization:P/F/T = 2/0/2 (100.00%)
        - sec-runtime-semantics-fordeclarationbindinginstantiation:P/F/T = 10/0/10 (100.00%)
        - sec-runtime-semantics-forinofloopevaluation:P/F/T = 27/0/27 (100.00%)
        - sec-runtime-semantics-forinofheadevaluation:P/F/T = 28/0/28 (100.00%)
        - sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset:P/F/T = 85/0/85 (100.00%)
        - sec-for-in-and-for-of-statements-runtime-semantics-evaluation:P/F/T = 9/0/9 (100.00%)
        - sec-enumerate-object-properties:P/F/T = 1/1/2 (50.00%)
            Return an Iterator object (<emu-xref href="#sec-iterator-interface"></emu-xref>) whose `next` method iterates over all the String-valued keys of enumerable properties of _O_. The iterator object is never directly accessible to ECMAScript code. The mechanics and order of enumerating the properties is not specified but must conform to the rules specified below.
        - sec-for-in-iterator-objects:P/F/T = 41/1/42 (97.62%)
          - sec-createforiniterator:P/F/T = 7/0/7 (100.00%)
          - sec-%foriniteratorprototype%-object:P/F/T = 34/1/35 (97.14%)
            - sec-%foriniteratorprototype%.next:P/F/T = 34/1/35 (97.14%)
                Remove the first element from _remaining_.
          - sec-properties-of-for-in-iterator-instances:
    - sec-continue-statement:P/F/T = 5/0/5 (100.00%)
      - sec-continue-statement-static-semantics-early-errors:
      - sec-continue-statement-runtime-semantics-evaluation:P/F/T = 5/0/5 (100.00%)
    - sec-break-statement:P/F/T = 5/0/5 (100.00%)
      - sec-break-statement-static-semantics-early-errors:
      - sec-break-statement-runtime-semantics-evaluation:P/F/T = 5/0/5 (100.00%)
    - sec-return-statement:P/F/T = 8/0/8 (100.00%)
      - sec-return-statement-runtime-semantics-evaluation:P/F/T = 8/0/8 (100.00%)
    - sec-with-statement:P/F/T = 9/0/9 (100.00%)
      - sec-with-statement-static-semantics-early-errors:
      - sec-with-statement-runtime-semantics-evaluation:P/F/T = 9/0/9 (100.00%)
    - sec-switch-statement:P/F/T = 266/0/266 (100.00%)
      - sec-switch-statement-static-semantics-early-errors:
      - sec-runtime-semantics-caseblockevaluation:P/F/T = 243/0/243 (100.00%)
      - sec-runtime-semantics-caseclauseisselected:P/F/T = 5/0/5 (100.00%)
      - sec-switch-statement-runtime-semantics-evaluation:P/F/T = 18/0/18 (100.00%)
    - sec-labelled-statements:P/F/T = 64/0/64 (100.00%)
      - sec-labelled-statements-static-semantics-early-errors:
      - sec-islabelledfunction:P/F/T = 8/0/8 (100.00%)
      - sec-labelled-statements-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
      - sec-runtime-semantics-labelledevaluation:P/F/T = 54/0/54 (100.00%)
    - sec-throw-statement:P/F/T = 4/0/4 (100.00%)
      - sec-throw-statement-runtime-semantics-evaluation:P/F/T = 4/0/4 (100.00%)
    - sec-try-statement:P/F/T = 38/0/38 (100.00%)
      - sec-try-statement-static-semantics-early-errors:
      - sec-runtime-semantics-catchclauseevaluation:P/F/T = 17/0/17 (100.00%)
      - sec-try-statement-runtime-semantics-evaluation:P/F/T = 21/0/21 (100.00%)
    - sec-debugger-statement:P/F/T = 2/4/6 (33.33%)
      - sec-debugger-statement-runtime-semantics-evaluation:P/F/T = 2/4/6 (33.33%)
          If an implementation-defined debugging facility is available and enabled, then [...]
          Perform an implementation-defined debugging action.
          Return a new implementation-defined Completion Record.
          Else, [...]
  - sec-ecmascript-language-functions-and-classes:P/F/T = 1788/27/1815 (98.51%)
    - sec-parameter-lists:P/F/T = 142/0/142 (100.00%)
      - sec-parameter-lists-static-semantics-early-errors:
      - sec-static-semantics-containsexpression:P/F/T = 74/0/74 (100.00%)
      - sec-static-semantics-issimpleparameterlist:P/F/T = 30/0/30 (100.00%)
      - sec-static-semantics-hasinitializer:P/F/T = 12/0/12 (100.00%)
      - sec-static-semantics-expectedargumentcount:P/F/T = 26/0/26 (100.00%)
    - sec-function-definitions:P/F/T = 50/1/51 (98.04%)
      - sec-function-definitions-static-semantics-early-errors:
      - sec-static-semantics-functionbodycontainsusestrict:P/F/T = 1/1/2 (50.00%)
          If the Directive Prologue of |FunctionBody| contains a Use Strict Directive, return *true*; otherwise, return *false*.
      - sec-runtime-semantics-evaluatefunctionbody:P/F/T = 3/0/3 (100.00%)
      - sec-runtime-semantics-instantiateordinaryfunctionobject:P/F/T = 13/0/13 (100.00%)
      - sec-runtime-semantics-instantiateordinaryfunctionexpression:P/F/T = 23/0/23 (100.00%)
      - sec-function-definitions-runtime-semantics-evaluation:P/F/T = 10/0/10 (100.00%)
    - sec-arrow-function-definitions:P/F/T = 21/1/22 (95.45%)
      - sec-arrow-function-definitions-static-semantics-early-errors:
      - sec-static-semantics-concisebodycontainsusestrict:P/F/T = 3/1/4 (75.00%)
          Return FunctionBodyContainsUseStrict of |FunctionBody|.
      - sec-runtime-semantics-evaluateconcisebody:P/F/T = 3/0/3 (100.00%)
      - sec-runtime-semantics-instantiatearrowfunctionexpression:P/F/T = 9/0/9 (100.00%)
      - sec-arrow-function-definitions-runtime-semantics-evaluation:P/F/T = 6/0/6 (100.00%)
    - sec-method-definitions:P/F/T = 119/0/119 (100.00%)
      - sec-method-definitions-static-semantics-early-errors:
      - sec-static-semantics-hasdirectsuper:P/F/T = 22/0/22 (100.00%)
      - sec-static-semantics-specialmethod:P/F/T = 12/0/12 (100.00%)
      - sec-runtime-semantics-definemethod:P/F/T = 14/0/14 (100.00%)
      - sec-runtime-semantics-methoddefinitionevaluation:P/F/T = 71/0/71 (100.00%)
    - sec-generator-function-definitions:P/F/T = 126/0/126 (100.00%)
      - sec-generator-function-definitions-static-semantics-early-errors:
      - sec-runtime-semantics-evaluategeneratorbody:P/F/T = 6/0/6 (100.00%)
      - sec-runtime-semantics-instantiategeneratorfunctionobject:P/F/T = 15/0/15 (100.00%)
      - sec-runtime-semantics-instantiategeneratorfunctionexpression:P/F/T = 25/0/25 (100.00%)
      - sec-generator-function-definitions-runtime-semantics-evaluation:P/F/T = 80/0/80 (100.00%)
    - sec-async-generator-function-definitions:P/F/T = 50/0/50 (100.00%)
      - sec-async-generator-function-definitions-static-semantics-early-errors:
      - sec-runtime-semantics-evaluateasyncgeneratorbody:P/F/T = 6/0/6 (100.00%)
      - sec-runtime-semantics-instantiateasyncgeneratorfunctionobject:P/F/T = 15/0/15 (100.00%)
      - sec-runtime-semantics-instantiateasyncgeneratorfunctionexpression:P/F/T = 25/0/25 (100.00%)
      - sec-asyncgenerator-definitions-evaluation:P/F/T = 4/0/4 (100.00%)
    - sec-class-definitions:P/F/T = 826/17/843 (97.98%)
      - sec-class-definitions-static-semantics-early-errors:
      - sec-static-semantics-classelementkind:P/F/T = 14/0/14 (100.00%)
      - sec-static-semantics-constructormethod:P/F/T = 11/0/11 (100.00%)
      - sec-static-semantics-isstatic:P/F/T = 12/0/12 (100.00%)
      - sec-static-semantics-nonconstructorelements:P/F/T = 11/0/11 (100.00%)
      - sec-static-semantics-prototypepropertynamelist:P/F/T = 15/0/15 (100.00%)
      - sec-static-semantics-allprivateidentifiersvalid:P/F/T = 35/0/35 (100.00%)
      - sec-static-semantics-privateboundidentifiers:P/F/T = 28/0/28 (100.00%)
      - sec-static-semantics-containsarguments:P/F/T = 56/0/56 (100.00%)
      - sec-runtime-semantics-classfielddefinitionevaluation:P/F/T = 30/0/30 (100.00%)
      - sec-runtime-semantics-classstaticblockdefinitionevaluation:P/F/T = 8/0/8 (100.00%)
      - sec-runtime-semantics-evaluateclassstaticblockbody:P/F/T = 3/0/3 (100.00%)
      - sec-static-semantics-classelementevaluation:P/F/T = 12/0/12 (100.00%)
      - sec-runtime-semantics-classdefinitionevaluation:P/F/T = 560/16/576 (97.22%)
          Let _name_ be a new Private Name whose [[Description]] value is _dn_.
          Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].
          Let _existing_ be that PrivateElement.
          Replace _existing_ in _container_ with _combined_.
          Let _name_ be a new Private Name whose [[Description]] value is _dn_.
          Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].
          Let _existing_ be that PrivateElement.
          Replace _existing_ in _container_ with _combined_.
          Let _name_ be a new Private Name whose [[Description]] value is _dn_.
          Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].
          Let _existing_ be that PrivateElement.
          Replace _existing_ in _container_ with _combined_.
          Let _name_ be a new Private Name whose [[Description]] value is _dn_.
          Let _args_ be the List of arguments that was passed to this function by [[Call]] or [[Construct]].
          Let _existing_ be that PrivateElement.
          Replace _existing_ in _container_ with _combined_.
      - sec-runtime-semantics-bindingclassdeclarationevaluation:P/F/T = 11/0/11 (100.00%)
      - sec-class-definitions-runtime-semantics-evaluation:P/F/T = 20/1/21 (95.24%)
          Let _privateName_ be the Private Name in _names_ whose [[Description]] is _privateIdentifier_.
    - sec-async-function-definitions:P/F/T = 49/0/49 (100.00%)
      - sec-async-function-definitions-static-semantics-early-errors:
      - sec-runtime-semantics-instantiateasyncfunctionobject:P/F/T = 11/0/11 (100.00%)
      - sec-runtime-semantics-instantiateasyncfunctionexpression:P/F/T = 21/0/21 (100.00%)
      - sec-runtime-semantics-evaluateasyncfunctionbody:P/F/T = 9/0/9 (100.00%)
      - sec-async-function-definitions-runtime-semantics-evaluation:P/F/T = 8/0/8 (100.00%)
    - sec-async-arrow-function-definitions:P/F/T = 37/1/38 (97.37%)
      - sec-async-arrow-function-definitions-static-semantics-early-errors:
      - sec-static-semantics-asyncconcisebodycontainsusestrict:P/F/T = 3/1/4 (75.00%)
          Return FunctionBodyContainsUseStrict of |AsyncFunctionBody|.
      - sec-runtime-semantics-evaluateasyncconcisebody:P/F/T = 9/0/9 (100.00%)
      - sec-runtime-semantics-instantiateasyncarrowfunctionexpression:P/F/T = 21/0/21 (100.00%)
      - sec-async-arrow-function-definitions-runtime-semantics-evaluation:P/F/T = 4/0/4 (100.00%)
    - sec-tail-position-calls:P/F/T = 368/7/375 (98.13%)
      - sec-isintailposition:P/F/T = 4/6/10 (40.00%)
          If the source text matched by _call_ is non-strict code, return *false*.
          If _call_ is not contained within a |FunctionBody|, |ConciseBody|, or |AsyncConciseBody|, return *false*.
          Let _body_ be the |FunctionBody|, |ConciseBody|, or |AsyncConciseBody| that most closely contains _call_.
          If _body_ is the |FunctionBody| of a |GeneratorBody|, return *false*.
          If _body_ is the |FunctionBody| of an |AsyncFunctionBody|, return *false*.
          If _body_ is the |FunctionBody| of an |AsyncGeneratorBody|, return *false*.
      - sec-static-semantics-hascallintailposition:P/F/T = 361/0/361 (100.00%)
        - sec-statement-rules:P/F/T = 171/0/171 (100.00%)
        - sec-expression-rules:P/F/T = 190/0/190 (100.00%)
      - sec-preparefortailcall:P/F/T = 3/1/4 (75.00%)
          Discard all resources associated with the current execution context.
  - sec-ecmascript-language-scripts-and-modules:P/F/T = 869/11/880 (98.75%)
    - sec-scripts:P/F/T = 107/2/109 (98.17%)
      - sec-scripts-static-semantics-early-errors:
      - sec-static-semantics-isstrict:P/F/T = 8/0/8 (100.00%)
      - sec-script-semantics-runtime-semantics-evaluation:P/F/T = 2/0/2 (100.00%)
      - sec-script-records:
      - sec-parse-script:P/F/T = 5/0/5 (100.00%)
      - sec-runtime-semantics-scriptevaluation:P/F/T = 22/1/23 (95.65%)
          Resume the context that is now on the top of the execution context stack as the running execution context.
      - sec-globaldeclarationinstantiation:P/F/T = 70/1/71 (98.59%)
          Insert _d_ as the first element of _functionsToInitialize_.
    - sec-modules:P/F/T = 762/9/771 (98.83%)
      - sec-module-semantics:P/F/T = 532/9/541 (98.34%)
        - sec-module-semantics-static-semantics-early-errors:
        - sec-importedlocalnames:P/F/T = 6/0/6 (100.00%)
        - sec-static-semantics-modulerequests:P/F/T = 28/1/29 (96.55%)
            Append to _moduleNames_ each element of _additionalNames_ that is not already an element of _moduleNames_.
        - sec-abstract-module-records:
        - sec-cyclic-module-records:P/F/T = 239/5/244 (97.95%)
          - sec-moduledeclarationlinking:P/F/T = 53/2/55 (96.36%)
            - sec-InnerModuleLinking:P/F/T = 38/2/40 (95.00%)
                Let _requiredModule_ be the last element in _stack_.
                Remove the last element of _stack_.
          - sec-moduleevaluation:P/F/T = 186/3/189 (98.41%)
            - sec-innermoduleevaluation:P/F/T = 67/2/69 (97.10%)
                Let _requiredModule_ be the last element in _stack_.
                Remove the last element of _stack_.
            - sec-execute-async-module:P/F/T = 17/0/17 (100.00%)
            - sec-gather-available-ancestors:P/F/T = 16/0/16 (100.00%)
            - sec-async-module-execution-fulfilled:P/F/T = 37/1/38 (97.37%)
                Let _sortedExecList_ be a List whose elements are the elements of _execList_, in the order in which they had their [[AsyncEvaluation]] fields set to *true* in InnerModuleEvaluation.
            - sec-async-module-execution-rejected:P/F/T = 18/0/18 (100.00%)
          - sec-example-cyclic-module-record-graphs:
        - sec-source-text-module-records:P/F/T = 209/3/212 (98.58%)
          - sec-parsemodule:P/F/T = 34/1/35 (97.14%)
              Let _ie_ be the element of _importEntries_ whose [[LocalName]] is the same as _ee_.[[LocalName]].
          - sec-getexportednames:P/F/T = 29/0/29 (100.00%)
          - sec-resolveexport:P/F/T = 54/0/54 (100.00%)
          - sec-source-text-module-record-initialize-environment:P/F/T = 70/1/71 (98.59%)
              Remove _moduleContext_ from the execution context stack.
          - sec-source-text-module-record-execute-module:P/F/T = 22/1/23 (95.65%)
              Resume the context that is now on the top of the execution context stack as the running execution context.
        - sec-hostresolveimportedmodule:
        - sec-hostimportmoduledynamically:
        - sec-finishdynamicimport:P/F/T = 21/0/21 (100.00%)
        - sec-getmodulenamespace:P/F/T = 14/0/14 (100.00%)
        - sec-module-semantics-runtime-semantics-evaluation:P/F/T = 15/0/15 (100.00%)
      - sec-imports:P/F/T = 46/0/46 (100.00%)
        - sec-imports-static-semantics-early-errors:
        - sec-static-semantics-importentries:P/F/T = 15/0/15 (100.00%)
        - sec-static-semantics-importentriesformodule:P/F/T = 31/0/31 (100.00%)
      - sec-exports:P/F/T = 184/0/184 (100.00%)
        - sec-exports-static-semantics-early-errors:
        - sec-static-semantics-exportedbindings:P/F/T = 32/0/32 (100.00%)
        - sec-static-semantics-exportednames:P/F/T = 38/0/38 (100.00%)
        - sec-static-semantics-exportentries:P/F/T = 40/0/40 (100.00%)
        - sec-static-semantics-exportentriesformodule:P/F/T = 34/0/34 (100.00%)
        - sec-static-semantics-referencedbindings:P/F/T = 12/0/12 (100.00%)
        - sec-exports-runtime-semantics-evaluation:P/F/T = 28/0/28 (100.00%)
  - sec-error-handling-and-language-extensions:
    - sec-forbidden-extensions:
  - sec-ecmascript-standard-built-in-objects:
  - sec-global-object:P/F/T = 300/30/330 (90.91%)
    - sec-value-properties-of-the-global-object:
      - sec-globalthis:
      - sec-value-properties-of-the-global-object-infinity:
      - sec-value-properties-of-the-global-object-nan:
      - sec-undefined:
    - sec-function-properties-of-the-global-object:P/F/T = 300/30/330 (90.91%)
      - sec-eval-x:P/F/T = 190/3/193 (98.45%)
        - sec-performeval:P/F/T = 71/2/73 (97.26%)
            If _runningContext_ is not already suspended, suspend _runningContext_.
            Resume the context that is now on the top of the execution context stack as the running execution context.
        - sec-hostensurecancompilestrings:
        - sec-evaldeclarationinstantiation:P/F/T = 114/1/115 (99.13%)
            Insert _d_ as the first element of _functionsToInitialize_.
      - sec-isfinite-number:P/F/T = 5/0/5 (100.00%)
      - sec-isnan-number:P/F/T = 5/0/5 (100.00%)
      - sec-parsefloat-string:P/F/T = 6/2/8 (75.00%)
          If neither _trimmedString_ nor any prefix of _trimmedString_ satisfies the syntax of a |StrDecimalLiteral| (see <emu-xref href="#sec-tonumber-applied-to-the-string-type"></emu-xref>), return *NaN*.
          Let _numberString_ be the longest prefix of _trimmedString_, which might be _trimmedString_ itself, that satisfies the syntax of a |StrDecimalLiteral|.
      - sec-parseint-string-radix:P/F/T = 26/6/32 (81.25%)
          If _S_ is not empty and the first code unit of _S_ is the code unit 0x002D (HYPHEN-MINUS), set _sign_ to -1.
          If _S_ is not empty and the first code unit of _S_ is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from _S_.
          If the length of _S_ is at least 2 and the first two code units of _S_ are either *"0x"* or *"0X"*, then [...]
          Remove the first two code units from _S_.
          If _S_ contains a code unit that is not a radix-_R_ digit, let _end_ be the index within _S_ of the first such code unit; otherwise, let _end_ be the length of _S_.
          Let _mathInt_ be the integer value that is represented by _Z_ in radix-_R_ notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if _R_ is 10 and _Z_ contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if _R_ is not 2, 4, 8, 10, 16, or 32, then _mathInt_ may be an implementation-approximated integer representing the integer value denoted by _Z_ in radix-_R_ notation.)
      - sec-uri-handling-functions:P/F/T = 68/19/87 (78.16%)
        - sec-uri-syntax-and-semantics:P/F/T = 55/16/71 (77.46%)
          - sec-encode:P/F/T = 17/4/21 (80.95%)
              If _C_ is in _unescapedSet_, then [...]
              Else, [...]
              Let _Octets_ be the List of octets resulting by applying the UTF-8 transformation to _cp_.[[CodePoint]].
              Set _R_ to the string-concatenation of: [...]
          - sec-decode:P/F/T = 38/12/50 (76.00%)
              Let _S_ be the String value containing only the code unit _C_.
              If the code units at index (_k_ + 1) and (_k_ + 2) within _string_ do not represent hexadecimal digits, throw a *URIError* exception.
              Let _B_ be the 8-bit value represented by the two hexadecimal digits at index (_k_ + 1) and (_k_ + 2).
              Let _n_ be the number of leading 1 bits in _B_.
              Let _C_ be the code unit whose value is _B_.
              If _C_ is not in _reservedSet_, then [...]
              Let _S_ be the String value containing only the code unit _C_.
              Else, [...]
              If the code units at index (_k_ + 1) and (_k_ + 2) within _string_ do not represent hexadecimal digits, throw a *URIError* exception.
              Let _B_ be the 8-bit value represented by the two hexadecimal digits at index (_k_ + 1) and (_k_ + 2).
              If _Octets_ does not contain a valid UTF-8 encoding of a Unicode code point, throw a *URIError* exception.
              Let _V_ be the code point obtained by applying the UTF-8 transformation to _Octets_, that is, from a List of octets into a 21-bit value.
        - sec-decodeuri-encodeduri:P/F/T = 3/1/4 (75.00%)
            Let _reservedURISet_ be a String containing one instance of each code unit valid in |uriReserved| plus *"#"*.
        - sec-decodeuricomponent-encodeduricomponent:P/F/T = 4/0/4 (100.00%)
        - sec-encodeuri-uri:P/F/T = 3/1/4 (75.00%)
            Let _unescapedURISet_ be a String containing one instance of each code unit valid in |uriReserved| and |uriUnescaped| plus *"#"*.
        - sec-encodeuricomponent-uricomponent:P/F/T = 3/1/4 (75.00%)
            Let _unescapedURIComponentSet_ be a String containing one instance of each code unit valid in |uriUnescaped|.
    - sec-constructor-properties-of-the-global-object:
      - sec-constructor-properties-of-the-global-object-aggregate-error:
      - sec-constructor-properties-of-the-global-object-array:
      - sec-constructor-properties-of-the-global-object-arraybuffer:
      - sec-constructor-properties-of-the-global-object-bigint:
      - sec-constructor-properties-of-the-global-object-bigint64array:
      - sec-constructor-properties-of-the-global-object-biguint64array:
      - sec-constructor-properties-of-the-global-object-boolean:
      - sec-constructor-properties-of-the-global-object-dataview:
      - sec-constructor-properties-of-the-global-object-date:
      - sec-constructor-properties-of-the-global-object-error:
      - sec-constructor-properties-of-the-global-object-evalerror:
      - sec-constructor-properties-of-the-global-object-finnalization-registry:
      - sec-float32array:
      - sec-float64array:
      - sec-constructor-properties-of-the-global-object-function:
      - sec-int8array:
      - sec-int16array:
      - sec-int32array:
      - sec-map:
      - sec-constructor-properties-of-the-global-object-number:
      - sec-constructor-properties-of-the-global-object-object:
      - sec-constructor-properties-of-the-global-object-promise:
      - sec-constructor-properties-of-the-global-object-proxy:
      - sec-constructor-properties-of-the-global-object-rangeerror:
      - sec-constructor-properties-of-the-global-object-referenceerror:
      - sec-constructor-properties-of-the-global-object-regexp:
      - sec-set:
      - sec-constructor-properties-of-the-global-object-sharedarraybuffer:
      - sec-constructor-properties-of-the-global-object-string:
      - sec-constructor-properties-of-the-global-object-symbol:
      - sec-constructor-properties-of-the-global-object-syntaxerror:
      - sec-constructor-properties-of-the-global-object-typeerror:
      - sec-uint8array:
      - sec-uint8clampedarray:
      - sec-uint16array:
      - sec-uint32array:
      - sec-constructor-properties-of-the-global-object-urierror:
      - sec-constructor-properties-of-the-global-object-weakmap:
      - sec-constructor-properties-of-the-global-object-weakref:
      - sec-constructor-properties-of-the-global-object-weakset:
    - sec-other-properties-of-the-global-object:
      - sec-atomics:
      - sec-json:
      - sec-math:
      - sec-reflect:
  - sec-fundamental-objects:P/F/T = 544/12/556 (97.84%)
    - sec-object-objects:P/F/T = 278/2/280 (99.29%)
      - sec-object-constructor:P/F/T = 7/0/7 (100.00%)
        - sec-object-value:P/F/T = 7/0/7 (100.00%)
      - sec-properties-of-the-object-constructor:P/F/T = 157/2/159 (98.74%)
        - sec-object.assign:P/F/T = 16/1/17 (94.12%)
            If only one argument was passed, return _to_.
        - sec-object.create:P/F/T = 8/0/8 (100.00%)
        - sec-object.defineproperties:P/F/T = 21/1/22 (95.45%)
          - sec-objectdefineproperties:P/F/T = 17/1/18 (94.44%)
              Append the pair (a two element List) consisting of _nextKey_ and _desc_ to the end of _descriptors_.
        - sec-object.defineproperty:P/F/T = 7/0/7 (100.00%)
        - sec-object.entries:P/F/T = 4/0/4 (100.00%)
        - sec-object.freeze:P/F/T = 7/0/7 (100.00%)
        - sec-object.fromentries:P/F/T = 11/0/11 (100.00%)
        - sec-object.getownpropertydescriptor:P/F/T = 5/0/5 (100.00%)
        - sec-object.getownpropertydescriptors:P/F/T = 11/0/11 (100.00%)
        - sec-object.getownpropertynames:P/F/T = 2/0/2 (100.00%)
        - sec-object.getownpropertysymbols:P/F/T = 12/0/12 (100.00%)
          - sec-getownpropertykeys:P/F/T = 10/0/10 (100.00%)
        - sec-object.getprototypeof:P/F/T = 3/0/3 (100.00%)
        - sec-object.hasown:P/F/T = 4/0/4 (100.00%)
        - sec-object.is:P/F/T = 2/0/2 (100.00%)
        - sec-object.isextensible:P/F/T = 4/0/4 (100.00%)
        - sec-object.isfrozen:P/F/T = 4/0/4 (100.00%)
        - sec-object.issealed:P/F/T = 4/0/4 (100.00%)
        - sec-object.keys:P/F/T = 4/0/4 (100.00%)
        - sec-object.preventextensions:P/F/T = 7/0/7 (100.00%)
        - sec-object.prototype:
        - sec-object.seal:P/F/T = 7/0/7 (100.00%)
        - sec-object.setprototypeof:P/F/T = 10/0/10 (100.00%)
        - sec-object.values:P/F/T = 4/0/4 (100.00%)
      - sec-properties-of-the-object-prototype-object:P/F/T = 114/0/114 (100.00%)
        - sec-object.prototype.constructor:
        - sec-object.prototype.hasownproperty:P/F/T = 4/0/4 (100.00%)
        - sec-object.prototype.isprototypeof:P/F/T = 11/0/11 (100.00%)
        - sec-object.prototype.propertyisenumerable:P/F/T = 7/0/7 (100.00%)
        - sec-object.prototype.tolocalestring:P/F/T = 3/0/3 (100.00%)
        - sec-object.prototype.tostring:P/F/T = 30/0/30 (100.00%)
        - sec-object.prototype.valueof:P/F/T = 2/0/2 (100.00%)
        - sec-object.prototype.__proto__:P/F/T = 13/0/13 (100.00%)
          - sec-get-object.prototype.__proto__:P/F/T = 3/0/3 (100.00%)
          - sec-set-object.prototype.__proto__:P/F/T = 10/0/10 (100.00%)
        - sec-object.prototype-legacy-accessor-methods:P/F/T = 44/0/44 (100.00%)
          - sec-object.prototype.__defineGetter__:P/F/T = 8/0/8 (100.00%)
          - sec-object.prototype.__defineSetter__:P/F/T = 8/0/8 (100.00%)
          - sec-object.prototype.__lookupGetter__:P/F/T = 14/0/14 (100.00%)
          - sec-object.prototype.__lookupSetter__:P/F/T = 14/0/14 (100.00%)
      - sec-properties-of-object-instances:
    - sec-function-objects:P/F/T = 141/4/145 (97.24%)
      - sec-function-constructor:P/F/T = 89/1/90 (98.89%)
        - sec-function-p1-p2-pn-body:P/F/T = 89/1/90 (98.89%)
            Let _args_ be the _argumentsList_ that was passed to this function by [[Call]] or [[Construct]].
          - sec-createdynamicfunction:P/F/T = 86/0/86 (100.00%)
      - sec-properties-of-the-function-constructor:
        - sec-function.length:
        - sec-function.prototype:
      - sec-properties-of-the-function-prototype-object:P/F/T = 52/3/55 (94.55%)
        - sec-function.prototype.apply:P/F/T = 11/0/11 (100.00%)
        - sec-function.prototype.bind:P/F/T = 27/0/27 (100.00%)
        - sec-function.prototype.call:P/F/T = 6/0/6 (100.00%)
        - sec-function.prototype.constructor:
        - sec-function.prototype.tostring:P/F/T = 5/3/8 (62.50%)
            If Type(_func_) is Object and _func_ has a [[SourceText]] internal slot and _func_.[[SourceText]] is a sequence of Unicode code points and HostHasSourceTextAvailable(_func_) is *true*, then [...]
            If _func_ is a <emu-xref href="#sec-built-in-function-objects">built-in function object</emu-xref>, return an implementation-defined String source code representation of _func_. The representation must have the syntax of a |NativeFunction|. Additionally, if _func_ has an [[InitialName]] internal slot and _func_.[[InitialName]] is a String, the portion of the returned String that would be matched by |NativeFunctionAccessor?| |PropertyName| must be the value of _func_.[[InitialName]].
            return an implementation-defined String source code representation of _func_. The representation must have the syntax of a |NativeFunction|.
        - sec-function.prototype-@@hasinstance:P/F/T = 3/0/3 (100.00%)
      - sec-function-instances:
        - sec-function-instances-length:
        - sec-function-instances-name:
        - sec-function-instances-prototype:
      - sec-hosthassourcetextavailable:
    - sec-boolean-objects:P/F/T = 23/0/23 (100.00%)
      - sec-boolean-constructor:P/F/T = 7/0/7 (100.00%)
        - sec-boolean-constructor-boolean-value:P/F/T = 7/0/7 (100.00%)
      - sec-properties-of-the-boolean-constructor:
        - sec-boolean.prototype:
      - sec-properties-of-the-boolean-prototype-object:P/F/T = 16/0/16 (100.00%)
        - sec-boolean.prototype.constructor:
        - sec-boolean.prototype.tostring:P/F/T = 5/0/5 (100.00%)
        - sec-boolean.prototype.valueof:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-boolean-instances:
    - sec-symbol-objects:P/F/T = 45/5/50 (90.00%)
      - sec-symbol-constructor:P/F/T = 6/1/7 (85.71%)
        - sec-symbol-description:P/F/T = 6/1/7 (85.71%)
            Return a new unique Symbol value whose [[Description]] value is _descString_.
      - sec-properties-of-the-symbol-constructor:P/F/T = 13/4/17 (76.47%)
        - sec-symbol.asynciterator:
        - sec-symbol.for:P/F/T = 6/3/9 (66.67%)
            For each element _e_ of the GlobalSymbolRegistry List, do [...]
            Let _newSymbol_ be a new unique Symbol value whose [[Description]] value is _stringKey_.
            Append the Record { [[Key]]: _stringKey_, [[Symbol]]: _newSymbol_ } to the GlobalSymbolRegistry List.
        - sec-symbol.hasinstance:
        - sec-symbol.isconcatspreadable:
        - sec-symbol.iterator:
        - sec-symbol.keyfor:P/F/T = 7/1/8 (87.50%)
            For each element _e_ of the GlobalSymbolRegistry List (see <emu-xref href="#sec-symbol.for"></emu-xref>), do [...]
        - sec-symbol.match:
        - sec-symbol.matchall:
        - sec-symbol.prototype:
        - sec-symbol.replace:
        - sec-symbol.search:
        - sec-symbol.species:
        - sec-symbol.split:
        - sec-symbol.toprimitive:
        - sec-symbol.tostringtag:
        - sec-symbol.unscopables:
      - sec-properties-of-the-symbol-prototype-object:P/F/T = 26/0/26 (100.00%)
        - sec-symbol.prototype.constructor:
        - sec-symbol.prototype.description:P/F/T = 4/0/4 (100.00%)
        - sec-symbol.prototype.tostring:P/F/T = 9/0/9 (100.00%)
          - sec-symboldescriptivestring:P/F/T = 6/0/6 (100.00%)
        - sec-symbol.prototype.valueof:P/F/T = 2/0/2 (100.00%)
        - sec-symbol.prototype-@@toprimitive:P/F/T = 2/0/2 (100.00%)
        - sec-symbol.prototype-@@tostringtag:
      - sec-properties-of-symbol-instances:
    - sec-error-objects:P/F/T = 57/1/58 (98.28%)
      - sec-error-constructor:P/F/T = 11/0/11 (100.00%)
        - sec-error-message:P/F/T = 11/0/11 (100.00%)
      - sec-properties-of-the-error-constructor:
        - sec-error.prototype:
      - sec-properties-of-the-error-prototype-object:P/F/T = 17/0/17 (100.00%)
        - sec-error.prototype.constructor:
        - sec-error.prototype.message:
        - sec-error.prototype.name:
        - sec-error.prototype.tostring:P/F/T = 17/0/17 (100.00%)
      - sec-properties-of-error-instances:
      - sec-native-error-types-used-in-this-standard:
        - sec-native-error-types-used-in-this-standard-evalerror:
        - sec-native-error-types-used-in-this-standard-rangeerror:
        - sec-native-error-types-used-in-this-standard-referenceerror:
        - sec-native-error-types-used-in-this-standard-syntaxerror:
        - sec-native-error-types-used-in-this-standard-typeerror:
        - sec-native-error-types-used-in-this-standard-urierror:
      - sec-nativeerror-object-structure:P/F/T = 10/1/11 (90.91%)
        - sec-nativeerror-constructors:P/F/T = 10/1/11 (90.91%)
          - sec-nativeerror:P/F/T = 10/1/11 (90.91%)
              Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, <code>"%<var>NativeError</var>.prototype%"</code>, ¬´ [[ErrorData]] ¬ª).
        - sec-properties-of-the-nativeerror-constructors:
          - sec-nativeerror.prototype:
        - sec-properties-of-the-nativeerror-prototype-objects:
          - sec-nativeerror.prototype.constructor:
          - sec-nativeerror.prototype.message:
          - sec-nativeerror.prototype.name:
        - sec-properties-of-nativeerror-instances:
      - sec-aggregate-error-objects:P/F/T = 13/0/13 (100.00%)
        - sec-aggregate-error-constructor:P/F/T = 13/0/13 (100.00%)
          - sec-aggregate-error:P/F/T = 13/0/13 (100.00%)
        - sec-properties-of-the-aggregate-error-constructors:
          - sec-aggregate-error.prototype:
        - sec-properties-of-the-aggregate-error-prototype-objects:
          - sec-aggregate-error.prototype.constructor:
          - sec-aggregate-error.prototype.message:
          - sec-aggregate-error.prototype.name:
        - sec-properties-of-aggregate-error-instances:
      - sec-abstract-operations-for-error-objects:P/F/T = 6/0/6 (100.00%)
        - sec-installerrorcause:P/F/T = 6/0/6 (100.00%)
  - sec-numbers-and-dates:P/F/T = 984/78/1062 (92.66%)
    - sec-number-objects:P/F/T = 159/23/182 (87.36%)
      - sec-number-constructor:P/F/T = 14/0/14 (100.00%)
        - sec-number-constructor-number-value:P/F/T = 14/0/14 (100.00%)
      - sec-properties-of-the-number-constructor:P/F/T = 20/0/20 (100.00%)
        - sec-number.epsilon:
        - sec-number.isfinite:P/F/T = 6/0/6 (100.00%)
        - sec-number.isinteger:P/F/T = 2/0/2 (100.00%)
        - sec-number.isnan:P/F/T = 6/0/6 (100.00%)
        - sec-number.issafeinteger:P/F/T = 6/0/6 (100.00%)
        - sec-number.max_safe_integer:
        - sec-number.max_value:
        - sec-number.min_safe_integer:
        - sec-number.min_value:
        - sec-number.nan:
        - sec-number.negative_infinity:
        - sec-number.parsefloat:
        - sec-number.parseint:
        - sec-number.positive_infinity:
        - sec-number.prototype:
      - sec-properties-of-the-number-prototype-object:P/F/T = 125/23/148 (84.46%)
        - sec-number.prototype.constructor:
        - sec-number.prototype.toexponential:P/F/T = 37/7/44 (84.09%)
            Let _m_ be the String value consisting of _f_ + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).
            Let _e_ and _n_ be integers such that 10<sup>_f_</sup> ‚â§ _n_ < 10<sup>_f_ + 1</sup> and for which _n_ √ó 10<sup>_e_ - _f_</sup> - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ √ó 10<sup>_e_ - _f_</sup> is larger.
            Let _e_, _n_, and _f_ be integers such that _f_ ‚â• 0, 10<sup>_f_</sup> ‚â§ _n_ < 10<sup>_f_ + 1</sup>, ùîΩ(_n_ √ó 10<sup>_e_ - _f_</sup>) is ùîΩ(_x_), and _f_ is as small as possible. Note that the decimal representation of _n_ has _f_ + 1 digits, _n_ is not divisible by 10, and the least significant digit of _n_ is not necessarily uniquely determined by these criteria.
            Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).
            Let _a_ be the first code unit of _m_.
            Let _b_ be the other _f_ code units of _m_.
            Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).
        - sec-number.prototype.tofixed:P/F/T = 31/5/36 (86.11%)
            Let _n_ be an integer for which _n_ / 10<sup>_f_</sup> - _x_ is as close to zero as possible. If there are two such _n_, pick the larger _n_.
            let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).
            Let _z_ be the String value consisting of _f_ + 1 - _k_ occurrences of the code unit 0x0030 (DIGIT ZERO).
            Let _a_ be the first _k_ - _f_ code units of _m_.
            Let _b_ be the other _f_ code units of _m_.
        - sec-number.prototype.tolocalestring:
        - sec-number.prototype.toprecision:P/F/T = 37/10/47 (78.72%)
            Set _s_ to the code unit 0x002D (HYPHEN-MINUS).
            Let _m_ be the String value consisting of _p_ occurrences of the code unit 0x0030 (DIGIT ZERO).
            Let _e_ and _n_ be integers such that 10<sup>_p_ - 1</sup> ‚â§ _n_ < 10<sup>_p_</sup> and for which _n_ √ó 10<sup>_e_ - _p_ + 1</sup> - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ √ó 10<sup>_e_ - _p_ + 1</sup> is larger.
            Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).
            Let _a_ be the first code unit of _m_.
            Let _b_ be the other _p_ - 1 code units of _m_.
            Let _c_ be the code unit 0x002D (HYPHEN-MINUS).
            Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).
            Set _m_ to the string-concatenation of the first _e_ + 1 code units of _m_, the code unit 0x002E (FULL STOP), and the remaining _p_ - (_e_ + 1) code units of _m_.
            Set _m_ to the string-concatenation of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(_e_ + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String _m_.
        - sec-number.prototype.tostring:P/F/T = 9/1/10 (90.00%)
            Return the String representation of this Number value using the radix specified by _radixMV_. Letters `a`-`z` are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in <emu-xref href="#sec-numeric-types-number-tostring"></emu-xref>.
        - sec-number.prototype.valueof:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-number-instances:
    - sec-bigint-objects:P/F/T = 41/1/42 (97.62%)
      - sec-bigint-constructor:P/F/T = 11/0/11 (100.00%)
        - sec-bigint-constructor-number-value:P/F/T = 11/0/11 (100.00%)
          - sec-numbertobigint:P/F/T = 4/0/4 (100.00%)
      - sec-properties-of-the-bigint-constructor:P/F/T = 11/0/11 (100.00%)
        - sec-bigint.asintn:P/F/T = 7/0/7 (100.00%)
        - sec-bigint.asuintn:P/F/T = 4/0/4 (100.00%)
        - sec-bigint.prototype:
      - sec-properties-of-the-bigint-prototype-object:P/F/T = 19/1/20 (95.00%)
        - sec-bigint.prototype.constructor:
        - sec-bigint.prototype.tolocalestring:
        - sec-bigint.prototype.tostring:P/F/T = 9/1/10 (90.00%)
            Return the String representation of this Number value using the radix specified by _radixMV_. Letters `a`-`z` are used for digits with values 10 through 35. The precise algorithm is implementation-defined, however the algorithm should be a generalization of that specified in <emu-xref href="#sec-numeric-types-bigint-tostring"></emu-xref>.
        - sec-bigint.prototype.valueof:P/F/T = 2/0/2 (100.00%)
        - sec-bigint.prototype-@@tostringtag:
    - sec-math-object:P/F/T = 331/9/340 (97.35%)
      - sec-value-properties-of-the-math-object:
        - sec-math.e:
        - sec-math.ln10:
        - sec-math.ln2:
        - sec-math.log10e:
        - sec-math.log2e:
        - sec-math.pi:
        - sec-math.sqrt1_2:
        - sec-math.sqrt2:
        - sec-math-@@tostringtag:
      - sec-function-properties-of-the-math-object:P/F/T = 331/9/340 (97.35%)
        - sec-math.abs:P/F/T = 11/0/11 (100.00%)
        - sec-math.acos:P/F/T = 7/0/7 (100.00%)
        - sec-math.acosh:P/F/T = 9/0/9 (100.00%)
        - sec-math.asin:P/F/T = 7/0/7 (100.00%)
        - sec-math.asinh:P/F/T = 5/0/5 (100.00%)
        - sec-math.atan:P/F/T = 9/0/9 (100.00%)
        - sec-math.atanh:P/F/T = 11/0/11 (100.00%)
        - sec-math.atan2:P/F/T = 48/0/48 (100.00%)
        - sec-math.cbrt:P/F/T = 5/0/5 (100.00%)
        - sec-math.ceil:P/F/T = 8/1/9 (88.89%)
            Return the smallest (closest to -‚àû) integral Number value that is not less than _n_.
        - sec-math.clz32:P/F/T = 3/1/4 (75.00%)
            Let _p_ be the number of leading zero bits in the unsigned 32-bit binary representation of _n_.
        - sec-math.cos:P/F/T = 7/0/7 (100.00%)
        - sec-math.cosh:P/F/T = 9/0/9 (100.00%)
        - sec-math.exp:P/F/T = 9/0/9 (100.00%)
        - sec-math.expm1:P/F/T = 7/0/7 (100.00%)
        - sec-math.floor:P/F/T = 8/1/9 (88.89%)
            Return the greatest (closest to +‚àû) integral Number value that is not greater than _n_.
        - sec-math.fround:P/F/T = 6/3/9 (66.67%)
            Let _n32_ be the result of converting _n_ to a value in IEEE 754-2019 binary32 format using roundTiesToEven mode.
            Let _n64_ be the result of converting _n32_ to a value in IEEE 754-2019 binary64 format.
            Return the ECMAScript Number value corresponding to _n64_.
        - sec-math.hypot:P/F/T = 20/0/20 (100.00%)
        - sec-math.imul:P/F/T = 7/0/7 (100.00%)
        - sec-math.log:P/F/T = 11/0/11 (100.00%)
        - sec-math.log1p:P/F/T = 9/0/9 (100.00%)
        - sec-math.log10:P/F/T = 11/0/11 (100.00%)
        - sec-math.log2:P/F/T = 11/0/11 (100.00%)
        - sec-math.max:P/F/T = 16/0/16 (100.00%)
        - sec-math.min:P/F/T = 16/0/16 (100.00%)
        - sec-math.pow:P/F/T = 4/0/4 (100.00%)
        - sec-math.random:
        - sec-math.round:P/F/T = 7/2/9 (77.78%)
            or an integral Number, return _n_.
            Return the integral Number closest to _n_, preferring the Number closer to +‚àû in the case of a tie.
        - sec-math.sign:P/F/T = 7/0/7 (100.00%)
        - sec-math.sin:P/F/T = 7/0/7 (100.00%)
        - sec-math.sinh:P/F/T = 5/0/5 (100.00%)
        - sec-math.sqrt:P/F/T = 7/0/7 (100.00%)
        - sec-math.tan:P/F/T = 7/0/7 (100.00%)
        - sec-math.tanh:P/F/T = 9/0/9 (100.00%)
        - sec-math.trunc:P/F/T = 8/1/9 (88.89%)
            Return the integral Number nearest _n_ in the direction of *+0*<sub>ùîΩ</sub>.
    - sec-date-objects:P/F/T = 453/45/498 (90.96%)
      - sec-overview-of-date-objects-and-definitions-of-abstract-operations:P/F/T = 28/8/36 (77.78%)
        - sec-time-values-and-time-range:
        - sec-day-number-and-time-within-day:
        - sec-year-number:
        - sec-month-number:
        - sec-date-number:
        - sec-week-day:
        - sec-local-time-zone-adjustment:
        - sec-localtime:P/F/T = 1/1/2 (50.00%)
            Return _t_ + LocalTZA(_t_, *true*).
        - sec-utc-t:P/F/T = 1/1/2 (50.00%)
            Return _t_ - LocalTZA(_t_, *false*).
        - sec-hours-minutes-second-and-milliseconds:
        - sec-maketime:P/F/T = 6/2/8 (75.00%)
            If _hour_ is not finite or _min_ is not finite or _sec_ is not finite or _ms_ is not finite, return *NaN*.
            Let _t_ be ((_h_ `*` msPerHour `+` _m_ `*` msPerMinute) `+` _s_ `*` msPerSecond) `+` _milli_, performing the arithmetic according to IEEE 754-2019 rules (that is, as if using the ECMAScript operators `*` and `+`).
        - sec-makeday:P/F/T = 8/3/11 (72.73%)
            If _year_ is not finite or _month_ is not finite or _date_ is not finite, return *NaN*.
            Find a finite time value _t_ such that YearFromTime(_t_) is _ym_ and MonthFromTime(_t_) is _mn_ and DateFromTime(_t_) is *1*<sub>ùîΩ</sub>; but if this is not possible (because some argument is out of range), return *NaN*.
            Return Day(_t_) + _dt_ - *1*<sub>ùîΩ</sub>.
        - sec-makedate:P/F/T = 6/1/7 (85.71%)
            Let _tv_ be _day_ √ó msPerDay + _time_.
        - sec-timeclip:P/F/T = 6/0/6 (100.00%)
        - sec-date-time-string-format:
          - sec-expanded-years:
      - sec-date-constructor:P/F/T = 49/4/53 (92.45%)
        - sec-date:P/F/T = 49/4/53 (92.45%)
            Let _now_ be the time value (UTC) identifying the current time.
            Let _dv_ be the time value (UTC) identifying the current time.
            Let _tv_ be the result of parsing _v_ as a date, in exactly the same manner as for the `parse` method (<emu-xref href="#sec-date.parse"></emu-xref>).
            If 0 ‚â§ _yi_ ‚â§ 99, let _yr_ be *1900*<sub>ùîΩ</sub> + ùîΩ(_yi_); otherwise, let _yr_ be _y_.
      - sec-properties-of-the-date-constructor:P/F/T = 25/1/26 (96.15%)
        - sec-date.now:
        - sec-date.parse:
        - sec-date.prototype:
        - sec-date.utc:P/F/T = 25/1/26 (96.15%)
            If 0 ‚â§ _yi_ ‚â§ 99, let _yr_ be *1900*<sub>ùîΩ</sub> + ùîΩ(_yi_); otherwise, let _yr_ be _y_.
      - sec-properties-of-the-date-prototype-object:P/F/T = 351/32/383 (91.64%)
        - sec-date.prototype.constructor:
        - sec-date.prototype.getdate:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getday:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getfullyear:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.gethours:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getmilliseconds:P/F/T = 4/1/5 (80.00%)
            Return msFromTime(LocalTime(_t_)).
        - sec-date.prototype.getminutes:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getmonth:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getseconds:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.gettime:P/F/T = 2/0/2 (100.00%)
        - sec-date.prototype.gettimezoneoffset:P/F/T = 4/1/5 (80.00%)
            Return (_t_ - LocalTime(_t_)) / msPerMinute.
        - sec-date.prototype.getutcdate:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getutcday:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getutcfullyear:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getutchours:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getutcmilliseconds:P/F/T = 4/1/5 (80.00%)
            Return msFromTime(_t_).
        - sec-date.prototype.getutcminutes:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getutcmonth:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.getutcseconds:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.setdate:P/F/T = 9/1/10 (90.00%)
            Set the [[DateValue]] internal slot of this Date object to _u_.
        - sec-date.prototype.setfullyear:P/F/T = 15/1/16 (93.75%)
            Set the [[DateValue]] internal slot of this Date object to _u_.
        - sec-date.prototype.sethours:P/F/T = 20/2/22 (90.91%)
            let _milli_ be msFromTime(_t_).
            Set the [[DateValue]] internal slot of this Date object to _u_.
        - sec-date.prototype.setmilliseconds:P/F/T = 9/1/10 (90.00%)
            Set the [[DateValue]] internal slot of this Date object to _u_.
        - sec-date.prototype.setminutes:P/F/T = 16/2/18 (88.89%)
            let _milli_ be msFromTime(_t_).
            Set the [[DateValue]] internal slot of this Date object to _u_.
        - sec-date.prototype.setmonth:P/F/T = 13/1/14 (92.86%)
            Set the [[DateValue]] internal slot of this Date object to _u_.
        - sec-date.prototype.setseconds:P/F/T = 12/2/14 (85.71%)
            let _milli_ be msFromTime(_t_).
            Set the [[DateValue]] internal slot of this Date object to _u_.
        - sec-date.prototype.settime:P/F/T = 5/1/6 (83.33%)
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.setutcdate:P/F/T = 8/1/9 (88.89%)
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.setutcfullyear:P/F/T = 14/1/15 (93.33%)
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.setutchours:P/F/T = 19/2/21 (90.48%)
            let _milli_ be msFromTime(_t_).
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.setutcmilliseconds:P/F/T = 8/1/9 (88.89%)
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.setutcminutes:P/F/T = 15/2/17 (88.24%)
            let _milli_ be msFromTime(_t_).
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.setutcmonth:P/F/T = 12/1/13 (92.31%)
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.setutcseconds:P/F/T = 11/2/13 (84.62%)
            let _milli_ be msFromTime(_t_).
            Set the [[DateValue]] internal slot of this Date object to _v_.
        - sec-date.prototype.todatestring:P/F/T = 6/1/7 (85.71%)
            Let _O_ be this Date object.
        - sec-date.prototype.toisostring:
        - sec-date.prototype.tojson:P/F/T = 6/0/6 (100.00%)
        - sec-date.prototype.tolocaledatestring:
        - sec-date.prototype.tolocalestring:
        - sec-date.prototype.tolocaletimestring:
        - sec-date.prototype.tostring:P/F/T = 33/3/36 (91.67%)
          - sec-timestring:P/F/T = 5/0/5 (100.00%)
          - sec-datestring:P/F/T = 8/2/10 (80.00%)
              Let _weekday_ be the Name of the entry in <emu-xref href="#sec-todatestring-day-names"></emu-xref> with the Number WeekDay(_tv_).
              Let _month_ be the Name of the entry in <emu-xref href="#sec-todatestring-month-names"></emu-xref> with the Number MonthFromTime(_tv_).
          - sec-timezoneestring:P/F/T = 12/1/13 (92.31%)
              Let _tzName_ be an implementation-defined string that is either the empty String or the string-concatenation of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an implementation-defined timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).
          - sec-todatestring:P/F/T = 5/0/5 (100.00%)
        - sec-date.prototype.totimestring:P/F/T = 6/1/7 (85.71%)
            Let _O_ be this Date object.
        - sec-date.prototype.toutcstring:P/F/T = 11/3/14 (78.57%)
            Let _O_ be this Date object.
            Let _weekday_ be the Name of the entry in <emu-xref href="#sec-todatestring-day-names"></emu-xref> with the Number WeekDay(_tv_).
            Let _month_ be the Name of the entry in <emu-xref href="#sec-todatestring-month-names"></emu-xref> with the Number MonthFromTime(_tv_).
        - sec-date.prototype.valueof:P/F/T = 2/0/2 (100.00%)
        - sec-date.prototype-@@toprimitive:P/F/T = 12/0/12 (100.00%)
      - sec-properties-of-date-instances:
  - sec-text-processing:P/F/T = 1428/193/1621 (88.09%)
    - sec-string-objects:P/F/T = 525/23/548 (95.80%)
      - sec-string-constructor:P/F/T = 10/0/10 (100.00%)
        - sec-string-constructor-string-value:P/F/T = 10/0/10 (100.00%)
      - sec-properties-of-the-string-constructor:P/F/T = 39/4/43 (90.70%)
        - sec-string.fromcharcode:P/F/T = 7/1/8 (87.50%)
            Return the String value whose code units are the elements in the List _elements_. If _codeUnits_ is empty, the empty String is returned.
        - sec-string.fromcodepoint:P/F/T = 12/0/12 (100.00%)
        - sec-string.prototype:
        - sec-string.raw:P/F/T = 20/3/23 (86.96%)
            Append the code unit elements of _nextSeg_ to the end of _stringElements_.
            Return the String value whose code units are the elements in the List _stringElements_. If _stringElements_ has no elements, the empty String is returned.
            Append the code unit elements of _nextSub_ to the end of _stringElements_.
      - sec-properties-of-the-string-prototype-object:P/F/T = 474/19/493 (96.15%)
        - sec-string.prototype.at:P/F/T = 13/0/13 (100.00%)
        - sec-string.prototype.charat:P/F/T = 8/0/8 (100.00%)
        - sec-string.prototype.charcodeat:P/F/T = 8/0/8 (100.00%)
        - sec-string.prototype.codepointat:P/F/T = 9/0/9 (100.00%)
        - sec-string.prototype.concat:P/F/T = 9/0/9 (100.00%)
        - sec-string.prototype.constructor:
        - sec-string.prototype.endswith:P/F/T = 20/0/20 (100.00%)
        - sec-string.prototype.includes:P/F/T = 15/0/15 (100.00%)
        - sec-string.prototype.indexof:P/F/T = 9/0/9 (100.00%)
        - sec-string.prototype.lastindexof:P/F/T = 20/0/20 (100.00%)
        - sec-string.prototype.localecompare:P/F/T = 4/0/4 (100.00%)
        - sec-string.prototype.match:P/F/T = 11/0/11 (100.00%)
        - sec-string.prototype.matchall:P/F/T = 18/0/18 (100.00%)
        - sec-string.prototype.normalize:P/F/T = 9/1/10 (90.00%)
            Let _ns_ be the String value that is the result of normalizing _S_ into the normalization form named by _f_ as specified in <a href="https://unicode.org/reports/tr15/">https://unicode.org/reports/tr15/</a>.
        - sec-string.prototype.padend:P/F/T = 3/0/3 (100.00%)
        - sec-string.prototype.padstart:P/F/T = 19/3/22 (86.36%)
          - sec-stringpad:P/F/T = 14/2/16 (87.50%)
              let _filler_ be the String value consisting solely of the code unit 0x0020 (SPACE).
              Let _truncatedStringFiller_ be the String value consisting of repeated concatenations of _filler_ truncated to length _fillLen_.
          - sec-tozeropaddeddecimalstring:P/F/T = 2/1/3 (66.67%)
              Let _S_ be the String representation of _n_, formatted as a decimal number.
        - sec-string.prototype.repeat:P/F/T = 8/1/9 (88.89%)
            Return the String value that is made from _n_ copies of _S_ appended together.
        - sec-string.prototype.replace:P/F/T = 87/9/96 (90.63%)
          - sec-getsubstitution:P/F/T = 59/9/68 (86.76%)
              If _templateRemainder_ starts with *"$$"*, then [...]
              Else if _templateRemainder_ starts with *"$`"*, then [...]
              Else if _templateRemainder_ starts with *"$&"*, then [...]
              Else if _templateRemainder_ starts with *"$'"* (0x0024 (DOLLAR SIGN) followed by 0x0027 (APOSTROPHE)), then [...]
              Else if _templateRemainder_ starts with *"$"* followed by 1 or more decimal digits, then [...]
              For each integer _d_ of ¬´ 2, 1 ¬ª, do [...]
              If _found_ is *false* and _templateRemainder_ starts with *"$"* followed by _d_ or more decimal digits, then [...]
              Else if _templateRemainder_ starts with *"$<"*, then [...]
              Else, [...]
        - sec-string.prototype.replaceall:P/F/T = 47/0/47 (100.00%)
        - sec-string.prototype.search:P/F/T = 11/0/11 (100.00%)
        - sec-string.prototype.slice:P/F/T = 21/0/21 (100.00%)
        - sec-string.prototype.split:P/F/T = 40/1/41 (97.56%)
            Let _codeUnits_ be a List consisting of the sequence of code units that are the elements of _head_.
        - sec-string.prototype.startswith:P/F/T = 20/0/20 (100.00%)
        - sec-string.prototype.substring:P/F/T = 13/0/13 (100.00%)
        - sec-string.prototype.tolocalelowercase:
        - sec-string.prototype.tolocaleuppercase:
        - sec-string.prototype.tolowercase:P/F/T = 6/1/7 (85.71%)
            Let _lowerText_ be the result of toLowercase(_sText_), according to the Unicode Default Case Conversion algorithm.
        - sec-string.prototype.tostring:P/F/T = 2/0/2 (100.00%)
        - sec-string.prototype.touppercase:
        - sec-string.prototype.trim:P/F/T = 11/3/14 (78.57%)
          - sec-trimstring:P/F/T = 8/3/11 (72.73%)
              let _T_ be the String value that is a copy of _S_ with leading white space removed.
              let _T_ be the String value that is a copy of _S_ with trailing white space removed.
              Let _T_ be the String value that is a copy of _S_ with both leading and trailing white space removed.
        - sec-string.prototype.trimend:P/F/T = 3/0/3 (100.00%)
        - sec-string.prototype.trimstart:P/F/T = 3/0/3 (100.00%)
        - sec-string.prototype.valueof:P/F/T = 2/0/2 (100.00%)
        - sec-string.prototype-@@iterator:P/F/T = 16/0/16 (100.00%)
      - sec-properties-of-string-instances:
        - sec-properties-of-string-instances-length:
      - sec-string-iterator-objects:P/F/T = 2/0/2 (100.00%)
        - sec-%stringiteratorprototype%-object:P/F/T = 2/0/2 (100.00%)
          - sec-%stringiteratorprototype%.next:P/F/T = 2/0/2 (100.00%)
          - sec-%stringiteratorprototype%-@@tostringtag:
    - sec-regexp-regular-expression-objects:P/F/T = 903/170/1073 (84.16%)
      - sec-patterns:P/F/T = 67/24/91 (73.63%)
        - sec-patterns-static-semantics-early-errors:
        - sec-patterns-static-semantics-capturing-group-number:P/F/T = 3/2/5 (60.00%)
            Let _n_ be the number of code points in |DecimalDigits|.
            Return (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup> plus the MV of |DecimalDigits|).
        - sec-patterns-static-semantics-is-character-class:P/F/T = 12/0/12 (100.00%)
        - sec-patterns-static-semantics-character-value:P/F/T = 28/9/37 (75.68%)
            Return the numeric value of U+002D (HYPHEN-MINUS).
            Let _ch_ be the code point matched by |SourceCharacter|.
            Return the numeric value of U+0008 (BACKSPACE).
            Return the numeric value of U+002D (HYPHEN-MINUS).
            Return the numeric value according to <emu-xref href="#table-controlescape-code-point-values"></emu-xref>.
            Let _ch_ be the code point matched by |ControlLetter|.
            Return the remainder of dividing _i_ by 32.
            Return the numeric value of U+0000 (NULL).
            Let _ch_ be the code point matched by |IdentityEscape|.
        - sec-static-semantics-sourcetext:P/F/T = 4/4/8 (50.00%)
            Return the List, in source text order, of Unicode code points in the source text matched by this production.
            Return the List, in source text order, of Unicode code points in the source text matched by this production.
            Return the List, in source text order, of Unicode code points in the source text matched by this production.
            Return the List, in source text order, of Unicode code points in the source text matched by this production.
        - sec-static-semantics-capturinggroupname:P/F/T = 6/0/6 (100.00%)
        - sec-regexpidentifiercodepoints:P/F/T = 6/1/7 (85.71%)
            Let _cps_ be RegExpIdentifierCodePoints of the derived |RegExpIdentifierName|.
        - sec-regexpidentifiercodepoint:P/F/T = 8/8/16 (50.00%)
            Return the code point matched by |IdentifierStartChar|.
            Return the code point matched by |IdentifierPartChar|.
            Return the code point whose numeric value is the CharacterValue of |RegExpUnicodeEscapeSequence|.
            Return the code point whose numeric value is the CharacterValue of |RegExpUnicodeEscapeSequence|.
            Let _lead_ be the code unit whose numeric value is that of the code point matched by |UnicodeLeadSurrogate|.
            Let _trail_ be the code unit whose numeric value is that of the code point matched by |UnicodeTrailSurrogate|.
            Let _lead_ be the code unit whose numeric value is that of the code point matched by |UnicodeLeadSurrogate|.
            Let _trail_ be the code unit whose numeric value is that of the code point matched by |UnicodeTrailSurrogate|.
      - sec-pattern-semantics:P/F/T = 304/114/418 (72.73%)
        - sec-notation:
        - sec-compilepattern:P/F/T = 9/5/14 (64.29%)
            Let _Input_ be _inputChars_. This alias will be used throughout the algorithms in <emu-xref href="#sec-pattern-semantics"></emu-xref>.
            Let _InputLength_ be the number of characters contained in _Input_. This alias will be used throughout the algorithms in <emu-xref href="#sec-pattern-semantics"></emu-xref>.
            Let _c_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called: [...]
            Let _cap_ be a List of _NcapturingParens_ *undefined* values, indexed 1 through _NcapturingParens_.
            Let _x_ be the State (_index_, _cap_).
        - sec-compilesubpattern:P/F/T = 64/15/79 (81.01%)
            Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called: [...]
            Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called: [...]
            Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called: [...]
            Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m2_ and performs the following steps when called: [...]
            Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called: [...]
            Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m1_ and performs the following steps when called: [...]
            Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of this |Term|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing this |Term|.
            Let _parenCount_ be the number of left-capturing parentheses in |Atom|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes enclosed by |Atom|.
            Return a new Matcher with parameters (_x_, _c_) that captures _m_, _q_, _parenIndex_, and _parenCount_ and performs the following steps when called: [...]
          - sec-runtime-semantics-repeatmatcher-abstract-operation:P/F/T = 23/6/29 (79.31%)
              Let _d_ be a new Continuation with parameters (_y_) that captures _m_, _min_, _max_, _greedy_, _x_, _c_, _parenIndex_, and _parenCount_ and performs the following steps when called: [...]
              If _min_ = 0 and _y_'s _endIndex_ = _x_'s _endIndex_, return ~failure~.
              Let _cap_ be a copy of _x_'s _captures_ List.
              For each integer _k_ such that _parenIndex_ < _k_ and _k_ ‚â§ _parenIndex_ + _parenCount_, set _cap_[_k_] to *undefined*.
              Let _e_ be _x_'s _endIndex_.
              Let _xr_ be the State (_e_, _cap_).
        - sec-compileassertion:P/F/T = 72/26/98 (73.47%)
            Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called: [...]
            Let _e_ be _x_'s _endIndex_.
            If _e_ = 0, or if _Multiline_ is *true* and the character _Input_[_e_ - 1] is one of |LineTerminator|, then [...]
            Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called: [...]
            Let _e_ be _x_'s _endIndex_.
            If _e_ = _InputLength_, or if _Multiline_ is *true* and the character _Input_[_e_] is one of |LineTerminator|, then [...]
            Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called: [...]
            Let _e_ be _x_'s _endIndex_.
            Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called: [...]
            Let _e_ be _x_'s _endIndex_.
            Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called: [...]
            Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called: [...]
            Let _cap_ be _y_'s _captures_ List.
            Let _xe_ be _x_'s _endIndex_.
            Let _z_ be the State (_xe_, _cap_).
            Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called: [...]
            Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called: [...]
            Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called: [...]
            Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called: [...]
            Let _cap_ be _y_'s _captures_ List.
            Let _xe_ be _x_'s _endIndex_.
            Let _z_ be the State (_xe_, _cap_).
            Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called: [...]
            Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called: [...]
          - sec-runtime-semantics-iswordchar-abstract-operation:P/F/T = 4/2/6 (66.67%)
              Let _c_ be the character _Input_[_e_].
              If _c_ is in _WordCharacters_, return *true*.
        - sec-compilequantifier:P/F/T = 6/0/6 (100.00%)
        - sec-compilequantifierprefix:P/F/T = 16/0/16 (100.00%)
        - sec-compileatom:P/F/T = 79/35/114 (69.30%)
            Let _ch_ be the character matched by |PatternCharacter|.
            Let _A_ be a one-element CharSet containing the character _ch_.
            Let _A_ be the CharSet of all characters.
            Remove from _A_ all characters corresponding to a code point on the right-hand side of the |LineTerminator| production.
            Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of this |Atom|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing this |Atom|.
            Return a new Matcher with parameters (_x_, _c_) that captures _direction_, _m_, and _parenIndex_ and performs the following steps when called: [...]
            Let _d_ be a new Continuation with parameters (_y_) that captures _x_, _c_, _direction_, and _parenIndex_ and performs the following steps when called: [...]
            Let _cap_ be a copy of _y_'s _captures_ List.
            Let _xe_ be _x_'s _endIndex_.
            Let _ye_ be _y_'s _endIndex_.
            Let _r_ be the Range (_xe_, _ye_).
            Let _r_ be the Range (_ye_, _xe_).
            Let _z_ be the State (_ye_, _cap_).
            Let _ch_ be the character whose character value is _cv_.
            Let _A_ be a one-element CharSet containing the character _ch_.
            Search the enclosing |Pattern| for an instance of a |GroupSpecifier| containing a |RegExpIdentifierName| which has a CapturingGroupName equal to the CapturingGroupName of the |RegExpIdentifierName| contained in |GroupName|.
            Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of the located |GroupSpecifier|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing the located |GroupSpecifier|, including its immediately enclosing |Atom|.
          - sec-runtime-semantics-charactersetmatcher-abstract-operation:P/F/T = 15/6/21 (71.43%)
              Return a new Matcher with parameters (_x_, _c_) that captures _A_, _invert_, and _direction_ and performs the following steps when called: [...]
              Let _e_ be _x_'s _endIndex_.
              Let _ch_ be the character _Input_[_index_].
              If there exists a member _a_ of _A_ such that Canonicalize(_a_) is _cc_, let _found_ be *true*. Otherwise, let _found_ be *false*.
              Let _cap_ be _x_'s _captures_ List.
              Let _y_ be the State (_f_, _cap_).
          - sec-backreference-matcher:P/F/T = 15/7/22 (68.18%)
              Return a new Matcher with parameters (_x_, _c_) that captures _n_ and _direction_ and performs the following steps when called: [...]
              Let _cap_ be _x_'s _captures_ List.
              Let _e_ be _x_'s _endIndex_.
              Let _rs_ be _r_'s _startIndex_.
              Let _re_ be _r_'s _endIndex_.
              If there exists an integer _i_ between 0 (inclusive) and _len_ (exclusive) such that Canonicalize(_Input_[_rs_ + _i_]) is not the same character value as Canonicalize(_Input_[_g_ + _i_]), return ~failure~.
              Let _y_ be the State (_f_, _cap_).
          - sec-runtime-semantics-canonicalize-ch:P/F/T = 11/5/16 (68.75%)
              If the file <a href="https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt"><code>CaseFolding.txt</code></a> of the Unicode Character Database provides a simple or common case folding mapping for _ch_, return the result of applying that mapping to _ch_.
              Let _cp_ be the code point whose numeric value is that of _ch_.
              Let _u_ be the result of toUppercase(¬´ _cp_ ¬ª), according to the Unicode Default Case Conversion algorithm.
              If _uStr_ does not consist of a single code unit, return _ch_.
              Let _cu_ be _uStr_'s single code unit element.
        - sec-compilecharacterclass:P/F/T = 6/0/6 (100.00%)
        - sec-compiletocharset:P/F/T = 52/33/85 (61.18%)
            Return the empty CharSet.
            Return the union of CharSets _A_ and _B_.
            Return the union of _D_ and _C_.
            Return the union of CharSets _A_ and _B_.
            Return the union of _D_ and _C_.
            Return the CharSet containing the single character `-` U+002D (HYPHEN-MINUS).
            Return the CharSet containing the character matched by |SourceCharacter|.
            Let _c_ be the character whose character value is _cv_.
            Return the CharSet containing the single character _c_.
            Let _c_ be the character whose character value is _cv_.
            Return the CharSet containing the single character _c_.
            Let _c_ be the character whose character value is _cv_.
            Return the CharSet containing the single character _c_.
            Return the ten-element CharSet containing the characters `0` through `9` inclusive.
            Return the CharSet containing all characters not in the CharSet returned by <emu-grammar>CharacterClassEscape :: `d`</emu-grammar> .
            Return the CharSet containing all characters corresponding to a code point on the right-hand side of the |WhiteSpace| or |LineTerminator| productions.
            Return the CharSet containing all characters not in the CharSet returned by <emu-grammar>CharacterClassEscape :: `s`</emu-grammar> .
            Return the CharSet containing all characters not in the CharSet returned by <emu-grammar>CharacterClassEscape :: `w`</emu-grammar> .
            Return the CharSet containing all Unicode code points included in CompileToCharSet of |UnicodePropertyValueExpression|.
            Return the CharSet containing all Unicode code points not included in CompileToCharSet of |UnicodePropertyValueExpression|.
            Return the CharSet containing all Unicode code points whose character database definition includes the property _p_ with value _v_.
            If UnicodeMatchPropertyValue(`General_Category`, _s_) is identical to a List of Unicode code points that is the name of a Unicode general category or general category alias listed in the ‚ÄúProperty value and aliases‚Äù column of <emu-xref href="#table-unicode-general-category-values"></emu-xref>, then [...]
            Return the CharSet containing all Unicode code points whose character database definition includes the property ‚ÄúGeneral_Category‚Äù with value _s_.
            Return the CharSet containing all Unicode code points whose character database definition includes the property _p_ with value ‚ÄúTrue‚Äù.
          - sec-runtime-semantics-characterrange-abstract-operation:P/F/T = 3/5/8 (37.50%)
              Let _a_ be the one character in CharSet _A_.
              Let _b_ be the one character in CharSet _B_.
              Let _i_ be the character value of character _a_.
              Let _j_ be the character value of character _b_.
              Return the CharSet containing all characters with a character value greater than or equal to _i_ and less than or equal to _j_.
          - sec-runtime-semantics-unicodematchproperty-p:P/F/T = 2/2/4 (50.00%)
              Let _c_ be the canonical <emu-not-ref>property name</emu-not-ref> of _p_ as given in the ‚ÄúCanonical <emu-not-ref>property name</emu-not-ref>‚Äù column of the corresponding row.
              Return the List of Unicode code points _c_.
          - sec-runtime-semantics-unicodematchpropertyvalue-p-v:P/F/T = 3/2/5 (60.00%)
              Let _value_ be the canonical property value of _v_ as given in the ‚ÄúCanonical property value‚Äù column of the corresponding row.
              Return the List of Unicode code points _value_.
      - sec-regexp-constructor:P/F/T = 65/9/74 (87.84%)
        - sec-regexp-pattern-flags:P/F/T = 29/0/29 (100.00%)
        - sec-abstract-operations-for-the-regexp-constructor:P/F/T = 36/9/45 (80.00%)
          - sec-regexpalloc:P/F/T = 4/0/4 (100.00%)
          - sec-regexpinitialize:P/F/T = 22/3/25 (88.00%)
              If _F_ contains any code unit other than *"d"*, *"g"*, *"i"*, *"m"*, *"s"*, *"u"*, or *"y"* or if it contains the same code unit more than once, throw a *SyntaxError* exception.
              Let _patternText_ be the result of interpreting each of _P_'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.
              If _parseResult_ is a non-empty List of *SyntaxError* objects, throw a *SyntaxError* exception.
          - sec-parsepattern:P/F/T = 5/4/9 (55.56%)
              Let _parseResult_ be ParseText(_patternText_, |Pattern[+UnicodeMode, +N]|).
              Let _parseResult_ be ParseText(_patternText_, |Pattern[~UnicodeMode, ~N]|).
              If _parseResult_ is a Parse Node and _parseResult_ contains a |GroupName|, then [...]
              Set _parseResult_ to ParseText(_patternText_, |Pattern[~UnicodeMode, +N]|).
          - sec-regexpcreate:P/F/T = 3/0/3 (100.00%)
          - sec-escaperegexppattern:P/F/T = 2/2/4 (50.00%)
              Let _S_ be a String in the form of a |Pattern[~UnicodeMode]| (|Pattern[+UnicodeMode]| if _F_ contains *"u"*) equivalent to _P_ interpreted as UTF-16 encoded Unicode code points (<emu-xref href="#sec-ecmascript-language-types-string-type"></emu-xref>), in which certain code points are escaped as described below. _S_ may or may not be identical to _P_; however, the Abstract Closure that would result from evaluating _S_ as a |Pattern[~UnicodeMode]| (|Pattern[+UnicodeMode]| if _F_ contains *"u"*) must behave identically to the Abstract Closure given by the constructed object's [[RegExpMatcher]] internal slot. Multiple calls to this abstract operation using the same values for _P_ and _F_ must produce identical results.
              The code points `/` or any |LineTerminator| occurring in the pattern shall be escaped in _S_ as necessary to ensure that the string-concatenation of *"/"*, _S_, *"/"*, and _F_ can be parsed (in an appropriate lexical context) as a |RegularExpressionLiteral| that behaves identically to the constructed regular expression. For example, if _P_ is *"/"*, then _S_ could be *"\\/"* or *"\\u002F"*, among other possibilities, but not *"/"*, because `///` followed by _F_ would be parsed as a |SingleLineComment| rather than a |RegularExpressionLiteral|. If _P_ is the empty String, this specification can be met by letting _S_ be *"(?:)"*.
      - sec-properties-of-the-regexp-constructor:P/F/T = 2/0/2 (100.00%)
        - sec-regexp.prototype:
        - sec-get-regexp-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-regexp-prototype-object:P/F/T = 443/23/466 (95.06%)
        - sec-regexp.prototype.constructor:
        - sec-regexp.prototype.exec:P/F/T = 147/14/161 (91.30%)
          - sec-regexpexec:P/F/T = 10/0/10 (100.00%)
          - sec-regexpbuiltinexec:P/F/T = 84/13/97 (86.60%)
              let _input_ be a List whose elements are the code units that are the elements of _S_.
              Let _inputIndex_ be the index into _input_ of the character that was obtained from element _lastIndex_ of _S_.
              Let _e_ be _r_'s _endIndex_ value.
              Let _n_ be the number of elements in _r_'s _captures_ List. (This is the same value as <emu-xref href="#sec-notation"></emu-xref>'s _NcapturingParens_.)
              If _R_ contains any |GroupName|, then [...]
              Else, [...]
              For each integer _i_ such that _i_ ‚â• 1 and _i_ ‚â§ _n_, in ascending order, do [...]
              Let _captureI_ be _i_<sup>th</sup> element of _r_'s _captures_ List.
              Let _captureStart_ be _captureI_'s _startIndex_.
              Let _captureEnd_ be _captureI_'s _endIndex_.
              If the _i_<sup>th</sup> capture of _R_ was defined with a |GroupName|, then [...]
              Let _s_ be the CapturingGroupName of the corresponding |RegExpIdentifierName|.
              Else, [...]
          - sec-advancestringindex:P/F/T = 9/0/9 (100.00%)
          - sec-getstringindex:P/F/T = 5/1/6 (83.33%)
              Let _eUTF_ be the smallest index into _S_ that corresponds to the character at element _e_ of _codepoints_. If _e_ is greater than or equal to the number of elements in _codepoints_, then _eUTF_ is the number of code units in _S_.
          - sec-match-records:
          - sec-getmatchstring:P/F/T = 4/0/4 (100.00%)
          - sec-getmatchindexpair:P/F/T = 4/0/4 (100.00%)
          - sec-makematchindicesindexpairarray:P/F/T = 26/0/26 (100.00%)
        - sec-get-regexp.prototype.dotAll:P/F/T = 16/0/16 (100.00%)
          - sec-regexphasflag:P/F/T = 12/0/12 (100.00%)
        - sec-get-regexp.prototype.flags:P/F/T = 20/7/27 (74.07%)
            append the code unit 0x0064 (LATIN SMALL LETTER D) as the last code unit of _result_.
            append the code unit 0x0067 (LATIN SMALL LETTER G) as the last code unit of _result_.
            append the code unit 0x0069 (LATIN SMALL LETTER I) as the last code unit of _result_.
            append the code unit 0x006D (LATIN SMALL LETTER M) as the last code unit of _result_.
            append the code unit 0x0073 (LATIN SMALL LETTER S) as the last code unit of _result_.
            append the code unit 0x0075 (LATIN SMALL LETTER U) as the last code unit of _result_.
            append the code unit 0x0079 (LATIN SMALL LETTER Y) as the last code unit of _result_.
        - sec-get-regexp.prototype.global:P/F/T = 4/0/4 (100.00%)
        - sec-get-regexp.prototype.hasIndices:P/F/T = 4/0/4 (100.00%)
        - sec-get-regexp.prototype.ignorecase:P/F/T = 4/0/4 (100.00%)
        - sec-regexp.prototype-@@match:P/F/T = 32/0/32 (100.00%)
        - sec-regexp-prototype-matchall:P/F/T = 17/0/17 (100.00%)
        - sec-get-regexp.prototype.multiline:P/F/T = 4/0/4 (100.00%)
        - sec-regexp.prototype-@@replace:P/F/T = 76/2/78 (97.44%)
            Append in List order the elements of _captures_ to the end of the List _replacerArgs_.
            Append ùîΩ(_position_) and _S_ to _replacerArgs_.
        - sec-regexp.prototype-@@search:P/F/T = 17/0/17 (100.00%)
        - sec-get-regexp.prototype.source:P/F/T = 13/0/13 (100.00%)
        - sec-regexp.prototype-@@split:P/F/T = 64/0/64 (100.00%)
        - sec-get-regexp.prototype.sticky:P/F/T = 4/0/4 (100.00%)
        - sec-regexp.prototype.test:P/F/T = 9/0/9 (100.00%)
        - sec-regexp.prototype.tostring:P/F/T = 8/0/8 (100.00%)
        - sec-get-regexp.prototype.unicode:P/F/T = 4/0/4 (100.00%)
      - sec-properties-of-regexp-instances:
        - sec-lastindex:
      - sec-regexp-string-iterator-objects:P/F/T = 22/0/22 (100.00%)
        - sec-createregexpstringiterator:P/F/T = 20/0/20 (100.00%)
        - sec-%regexpstringiteratorprototype%-object:P/F/T = 2/0/2 (100.00%)
          - sec-%regexpstringiteratorprototype%.next:P/F/T = 2/0/2 (100.00%)
          - sec-%regexpstringiteratorprototype%-@@tostringtag:
  - sec-indexed-collections:P/F/T = 1803/14/1817 (99.23%)
    - sec-array-objects:P/F/T = 927/3/930 (99.68%)
      - sec-array-constructor:P/F/T = 35/0/35 (100.00%)
        - sec-array:P/F/T = 35/0/35 (100.00%)
      - sec-properties-of-the-array-constructor:P/F/T = 82/0/82 (100.00%)
        - sec-array.from:P/F/T = 60/0/60 (100.00%)
        - sec-array.isarray:P/F/T = 2/0/2 (100.00%)
        - sec-array.of:P/F/T = 18/0/18 (100.00%)
        - sec-array.prototype:
        - sec-get-array-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-array-prototype-object:P/F/T = 780/3/783 (99.62%)
        - sec-array.prototype.at:P/F/T = 12/0/12 (100.00%)
        - sec-array.prototype.concat:P/F/T = 39/0/39 (100.00%)
          - sec-isconcatspreadable:P/F/T = 7/0/7 (100.00%)
        - sec-array.prototype.constructor:
        - sec-array.prototype.copywithin:P/F/T = 47/0/47 (100.00%)
        - sec-array.prototype.entries:P/F/T = 3/0/3 (100.00%)
        - sec-array.prototype.every:P/F/T = 18/0/18 (100.00%)
        - sec-array.prototype.fill:P/F/T = 23/0/23 (100.00%)
        - sec-array.prototype.filter:P/F/T = 22/0/22 (100.00%)
        - sec-array.prototype.find:P/F/T = 15/0/15 (100.00%)
        - sec-array.prototype.findindex:P/F/T = 15/0/15 (100.00%)
        - sec-array.prototype.flat:P/F/T = 44/0/44 (100.00%)
          - sec-flattenintoarray:P/F/T = 32/0/32 (100.00%)
        - sec-array.prototype.flatmap:P/F/T = 8/0/8 (100.00%)
        - sec-array.prototype.foreach:P/F/T = 16/0/16 (100.00%)
        - sec-array.prototype.includes:P/F/T = 25/0/25 (100.00%)
        - sec-array.prototype.indexof:P/F/T = 29/0/29 (100.00%)
        - sec-array.prototype.join:P/F/T = 19/0/19 (100.00%)
        - sec-array.prototype.keys:P/F/T = 3/0/3 (100.00%)
        - sec-array.prototype.lastindexof:P/F/T = 26/0/26 (100.00%)
        - sec-array.prototype.map:P/F/T = 18/0/18 (100.00%)
        - sec-array.prototype.pop:P/F/T = 15/0/15 (100.00%)
        - sec-array.prototype.push:P/F/T = 12/0/12 (100.00%)
        - sec-array.prototype.reduce:P/F/T = 34/0/34 (100.00%)
        - sec-array.prototype.reduceright:P/F/T = 34/0/34 (100.00%)
        - sec-array.prototype.reverse:P/F/T = 34/1/35 (97.14%)
            No action is required.
        - sec-array.prototype.shift:P/F/T = 25/0/25 (100.00%)
        - sec-array.prototype.slice:P/F/T = 32/0/32 (100.00%)
        - sec-array.prototype.some:P/F/T = 18/0/18 (100.00%)
        - sec-array.prototype.sort:P/F/T = 52/1/53 (98.11%)
          - sec-sortindexedproperties:P/F/T = 23/1/24 (95.83%)
              Sort _items_ using an implementation-defined sequence of calls to _SortCompare_. If any such call returns an abrupt completion, stop before performing any further calls to _SortCompare_ and return that Completion Record.
        - sec-array.prototype.splice:P/F/T = 73/0/73 (100.00%)
        - sec-array.prototype.tolocalestring:P/F/T = 17/1/18 (94.44%)
            Let _separator_ be the implementation-defined list-separator String value appropriate for the host environment's current locale (such as *", "*).
        - sec-array.prototype.tostring:P/F/T = 6/0/6 (100.00%)
        - sec-array.prototype.unshift:P/F/T = 29/0/29 (100.00%)
        - sec-array.prototype.values:P/F/T = 3/0/3 (100.00%)
        - sec-array.prototype-@@iterator:
        - sec-array.prototype-@@unscopables:P/F/T = 14/0/14 (100.00%)
      - sec-properties-of-array-instances:
        - sec-properties-of-array-instances-length:
      - sec-array-iterator-objects:P/F/T = 30/0/30 (100.00%)
        - sec-createarrayiterator:P/F/T = 28/0/28 (100.00%)
        - sec-%arrayiteratorprototype%-object:P/F/T = 2/0/2 (100.00%)
          - sec-%arrayiteratorprototype%.next:P/F/T = 2/0/2 (100.00%)
          - sec-%arrayiteratorprototype%-@@tostringtag:
    - sec-typedarray-objects:P/F/T = 876/11/887 (98.76%)
      - sec-%typedarray%-intrinsic-object:P/F/T = 2/0/2 (100.00%)
        - sec-%typedarray%:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-%typedarray%-intrinsic-object:P/F/T = 60/1/61 (98.36%)
        - sec-%typedarray%.from:P/F/T = 44/1/45 (97.78%)
            Let _kValue_ be the first element of _values_ and remove that element from _values_.
        - sec-%typedarray%.of:P/F/T = 14/0/14 (100.00%)
        - sec-%typedarray%.prototype:
        - sec-get-%typedarray%-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-%typedarrayprototype%-object:P/F/T = 638/3/641 (99.53%)
        - sec-%typedarray%.prototype.at:P/F/T = 13/0/13 (100.00%)
        - sec-get-%typedarray%.prototype.buffer:P/F/T = 6/0/6 (100.00%)
        - sec-get-%typedarray%.prototype.bytelength:P/F/T = 9/0/9 (100.00%)
        - sec-get-%typedarray%.prototype.byteoffset:P/F/T = 9/0/9 (100.00%)
        - sec-%typedarray%.prototype.constructor:
        - sec-%typedarray%.prototype.copywithin:P/F/T = 51/0/51 (100.00%)
        - sec-%typedarray%.prototype.entries:P/F/T = 4/0/4 (100.00%)
        - sec-%typedarray%.prototype.every:P/F/T = 16/0/16 (100.00%)
        - sec-%typedarray%.prototype.fill:P/F/T = 29/0/29 (100.00%)
        - sec-%typedarray%.prototype.filter:P/F/T = 26/0/26 (100.00%)
        - sec-%typedarray%.prototype.find:P/F/T = 16/0/16 (100.00%)
        - sec-%typedarray%.prototype.findindex:P/F/T = 16/0/16 (100.00%)
        - sec-%typedarray%.prototype.foreach:P/F/T = 14/0/14 (100.00%)
        - sec-%typedarray%.prototype.includes:P/F/T = 26/0/26 (100.00%)
        - sec-%typedarray%.prototype.indexof:P/F/T = 30/0/30 (100.00%)
        - sec-%typedarray%.prototype.join:P/F/T = 20/0/20 (100.00%)
        - sec-%typedarray%.prototype.keys:P/F/T = 4/0/4 (100.00%)
        - sec-%typedarray%.prototype.lastindexof:P/F/T = 27/0/27 (100.00%)
        - sec-get-%typedarray%.prototype.length:P/F/T = 9/0/9 (100.00%)
        - sec-%typedarray%.prototype.map:P/F/T = 16/0/16 (100.00%)
        - sec-%typedarray%.prototype.reduce:P/F/T = 24/0/24 (100.00%)
        - sec-%typedarray%.prototype.reduceright:P/F/T = 24/0/24 (100.00%)
        - sec-%typedarray%.prototype.reverse:P/F/T = 17/0/17 (100.00%)
        - sec-%typedarray%.prototype.set:P/F/T = 90/3/93 (96.77%)
            If _source_ is an Object that has a [[TypedArrayName]] internal slot, then [...]
            Else, [...]
          - sec-settypedarrayfromtypedarray:P/F/T = 50/1/51 (98.04%)
              If _srcBuffer_.[[ArrayBufferData]] and _targetBuffer_.[[ArrayBufferData]] are the same Shared Data Block values, let _same_ be *true*; else let _same_ be *false*.
          - sec-settypedarrayfromarraylike:P/F/T = 30/0/30 (100.00%)
        - sec-%typedarray%.prototype.slice:P/F/T = 52/0/52 (100.00%)
        - sec-%typedarray%.prototype.some:P/F/T = 16/0/16 (100.00%)
        - sec-%typedarray%.prototype.sort:P/F/T = 35/0/35 (100.00%)
        - sec-%typedarray%.prototype.subarray:P/F/T = 26/0/26 (100.00%)
        - sec-%typedarray%.prototype.tolocalestring:
        - sec-%typedarray%.prototype.tostring:
        - sec-%typedarray%.prototype.values:P/F/T = 4/0/4 (100.00%)
        - sec-%typedarray%.prototype-@@iterator:
        - sec-get-%typedarray%.prototype-@@tostringtag:P/F/T = 9/0/9 (100.00%)
      - sec-abstract-operations-for-typedarray-objects:P/F/T = 22/4/26 (84.62%)
        - typedarray-species-create:P/F/T = 7/1/8 (87.50%)
            Let _defaultConstructor_ be the intrinsic object listed in column one of <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for _exemplar_.[[TypedArrayName]].
        - typedarray-create:P/F/T = 6/1/7 (85.71%)
            If _argumentList_ is a List of a single Number, then [...]
        - sec-validatetypedarray:P/F/T = 7/0/7 (100.00%)
        - sec-typedarrayelementsize:P/F/T = 1/1/2 (50.00%)
            Return the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for _O_.[[TypedArrayName]].
        - sec-typedarrayelementtype:P/F/T = 1/1/2 (50.00%)
            Return the Element Type value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for _O_.[[TypedArrayName]].
      - sec-typedarray-constructors:P/F/T = 154/3/157 (98.09%)
        - sec-typedarray:P/F/T = 154/3/157 (98.09%)
            Let _constructorName_ be the String value of the Constructor Name value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for this <var>TypedArray</var> constructor.
            Let _proto_ be <code>"%<var>TypedArray</var>.prototype%"</code>.
          - sec-allocatetypedarray:P/F/T = 16/0/16 (100.00%)
          - sec-initializetypedarrayfromtypedarray:P/F/T = 40/0/40 (100.00%)
          - sec-initializetypedarrayfromarraybuffer:P/F/T = 27/0/27 (100.00%)
          - sec-initializetypedarrayfromlist:P/F/T = 11/1/12 (91.67%)
              Let _kValue_ be the first element of _values_ and remove that element from _values_.
          - sec-initializetypedarrayfromarraylike:P/F/T = 11/0/11 (100.00%)
          - sec-allocatetypedarraybuffer:P/F/T = 10/0/10 (100.00%)
      - sec-properties-of-the-typedarray-constructors:
        - sec-typedarray.bytes_per_element:
        - sec-typedarray.prototype:
      - sec-properties-of-typedarray-prototype-objects:
        - sec-typedarray.prototype.bytes_per_element:
        - sec-typedarray.prototype.constructor:
      - sec-properties-of-typedarray-instances:
  - sec-keyed-collections:P/F/T = 372/3/375 (99.20%)
    - sec-map-objects:P/F/T = 143/0/143 (100.00%)
      - sec-map-constructor:P/F/T = 29/0/29 (100.00%)
        - sec-map-iterable:P/F/T = 9/0/9 (100.00%)
        - sec-add-entries-from-iterable:P/F/T = 20/0/20 (100.00%)
      - sec-properties-of-the-map-constructor:P/F/T = 2/0/2 (100.00%)
        - sec-map.prototype:
        - sec-get-map-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-map-prototype-object:P/F/T = 85/0/85 (100.00%)
        - sec-map.prototype.clear:P/F/T = 9/0/9 (100.00%)
        - sec-map.prototype.constructor:
        - sec-map.prototype.delete:P/F/T = 12/0/12 (100.00%)
        - sec-map.prototype.entries:P/F/T = 3/0/3 (100.00%)
        - sec-map.prototype.foreach:P/F/T = 12/0/12 (100.00%)
        - sec-map.prototype.get:P/F/T = 9/0/9 (100.00%)
        - sec-map.prototype.has:P/F/T = 9/0/9 (100.00%)
        - sec-map.prototype.keys:P/F/T = 3/0/3 (100.00%)
        - sec-map.prototype.set:P/F/T = 15/0/15 (100.00%)
        - sec-get-map.prototype.size:P/F/T = 10/0/10 (100.00%)
        - sec-map.prototype.values:P/F/T = 3/0/3 (100.00%)
        - sec-map.prototype-@@iterator:
        - sec-map.prototype-@@tostringtag:
      - sec-properties-of-map-instances:
      - sec-map-iterator-objects:P/F/T = 27/0/27 (100.00%)
        - sec-createmapiterator:P/F/T = 25/0/25 (100.00%)
        - sec-%mapiteratorprototype%-object:P/F/T = 2/0/2 (100.00%)
          - sec-%mapiteratorprototype%.next:P/F/T = 2/0/2 (100.00%)
          - sec-%mapiteratorprototype%-@@tostringtag:
    - sec-set-objects:P/F/T = 114/2/116 (98.28%)
      - sec-set-constructor:P/F/T = 19/0/19 (100.00%)
        - sec-set-iterable:P/F/T = 19/0/19 (100.00%)
      - sec-properties-of-the-set-constructor:P/F/T = 2/0/2 (100.00%)
        - sec-set.prototype:
        - sec-get-set-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-set-prototype-object:P/F/T = 67/2/69 (97.10%)
        - sec-set.prototype.add:P/F/T = 13/0/13 (100.00%)
        - sec-set.prototype.clear:P/F/T = 7/1/8 (87.50%)
            Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.
        - sec-set.prototype.constructor:
        - sec-set.prototype.delete:P/F/T = 10/1/11 (90.91%)
            Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.
        - sec-set.prototype.entries:P/F/T = 3/0/3 (100.00%)
        - sec-set.prototype.foreach:P/F/T = 12/0/12 (100.00%)
        - sec-set.prototype.has:P/F/T = 9/0/9 (100.00%)
        - sec-set.prototype.keys:
        - sec-get-set.prototype.size:P/F/T = 10/0/10 (100.00%)
        - sec-set.prototype.values:P/F/T = 3/0/3 (100.00%)
        - sec-set.prototype-@@iterator:
        - sec-set.prototype-@@tostringtag:
      - sec-properties-of-set-instances:
      - sec-set-iterator-objects:P/F/T = 26/0/26 (100.00%)
        - sec-createsetiterator:P/F/T = 24/0/24 (100.00%)
        - sec-%setiteratorprototype%-object:P/F/T = 2/0/2 (100.00%)
          - sec-%setiteratorprototype%.next:P/F/T = 2/0/2 (100.00%)
          - sec-%setiteratorprototype%-@@tostringtag:
    - sec-weakmap-objects:P/F/T = 60/0/60 (100.00%)
      - sec-weakmap-constructor:P/F/T = 9/0/9 (100.00%)
        - sec-weakmap-iterable:P/F/T = 9/0/9 (100.00%)
      - sec-properties-of-the-weakmap-constructor:
        - sec-weakmap.prototype:
      - sec-properties-of-the-weakmap-prototype-object:P/F/T = 51/0/51 (100.00%)
        - sec-weakmap.prototype.constructor:
        - sec-weakmap.prototype.delete:P/F/T = 14/0/14 (100.00%)
        - sec-weakmap.prototype.get:P/F/T = 11/0/11 (100.00%)
        - sec-weakmap.prototype.has:P/F/T = 11/0/11 (100.00%)
        - sec-weakmap.prototype.set:P/F/T = 15/0/15 (100.00%)
        - sec-weakmap.prototype-@@tostringtag:
      - sec-properties-of-weakmap-instances:
    - sec-weakset-objects:P/F/T = 55/1/56 (98.21%)
      - sec-weakset-constructor:P/F/T = 19/0/19 (100.00%)
        - sec-weakset-iterable:P/F/T = 19/0/19 (100.00%)
      - sec-properties-of-the-weakset-constructor:
        - sec-weakset.prototype:
      - sec-properties-of-the-weakset-prototype-object:P/F/T = 36/1/37 (97.30%)
        - sec-weakset.prototype.add:P/F/T = 13/0/13 (100.00%)
        - sec-weakset.prototype.constructor:
        - sec-weakset.prototype.delete:P/F/T = 12/1/13 (92.31%)
            Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.
        - sec-weakset.prototype.has:P/F/T = 11/0/11 (100.00%)
        - sec-weakset.prototype-@@tostringtag:
      - sec-properties-of-weakset-instances:
  - sec-structured-data:P/F/T = 878/102/980 (89.59%)
    - sec-arraybuffer-objects:P/F/T = 175/36/211 (82.94%)
      - sec-arraybuffer-notation:
      - sec-abstract-operations-for-arraybuffer-objects:P/F/T = 112/36/148 (75.68%)
        - sec-allocatearraybuffer:P/F/T = 6/0/6 (100.00%)
        - sec-isdetachedbuffer:P/F/T = 4/0/4 (100.00%)
        - sec-detacharraybuffer:P/F/T = 9/0/9 (100.00%)
        - sec-clonearraybuffer:P/F/T = 8/0/8 (100.00%)
        - sec-isunsignedelementtype:P/F/T = 4/0/4 (100.00%)
        - sec-isunclampedintegerelementtype:P/F/T = 4/0/4 (100.00%)
        - sec-isbigintelementtype:P/F/T = 4/0/4 (100.00%)
        - sec-isnotearconfiguration:P/F/T = 6/0/6 (100.00%)
        - sec-rawbytestonumeric:P/F/T = 10/12/22 (45.45%)
            Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
            reverse the order of the elements of _rawBytes_.
            Let _value_ be the byte elements of _rawBytes_ concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary32 value.
            If _value_ is an IEEE 754-2019 binary32 NaN value, return the *NaN* Number value.
            Return the Number value that corresponds to _value_.
            Let _value_ be the byte elements of _rawBytes_ concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary64 value.
            If _value_ is an IEEE 754-2019 binary64 NaN value, return the *NaN* Number value.
            Return the Number value that corresponds to _value_.
            Let _intValue_ be the byte elements of _rawBytes_ concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.
            Let _intValue_ be the byte elements of _rawBytes_ concatenated and interpreted as a bit string encoding of a binary little-endian two's complement number of bit length _elementSize_ √ó 8.
            return the BigInt value that corresponds to _intValue_.
            return the Number value that corresponds to _intValue_.
        - sec-getvaluefrombuffer:P/F/T = 16/6/22 (72.73%)
            Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
            Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.
            Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
            Let _rawValue_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.
            let _rawValue_ be a List whose elements are bytes from _block_ at indices _byteIndex_ (inclusive) through _byteIndex_ + _elementSize_ (exclusive).
            set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
        - sec-numerictorawbytes:P/F/T = 11/6/17 (64.71%)
            Let _rawBytes_ be a List whose elements are the 4 bytes that are the result of converting _value_ to IEEE 754-2019 binary32 format using roundTiesToEven mode. If _isLittleEndian_ is *false*, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If _value_ is *NaN*, _rawBytes_ may be set to any implementation chosen IEEE 754-2019 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value.
            Let _rawBytes_ be a List whose elements are the 8 bytes that are the IEEE 754-2019 binary64 format encoding of _value_. If _isLittleEndian_ is *false*, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If _value_ is *NaN*, _rawBytes_ may be set to any implementation chosen IEEE 754-2019 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value.
            Let _n_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
            Let _convOp_ be the abstract operation named in the Conversion Operation column in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
            Let _rawBytes_ be a List whose elements are the _n_-byte binary encoding of _intValue_. If _isLittleEndian_ is *false*, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.
            Let _rawBytes_ be a List whose elements are the _n_-byte binary two's complement encoding of _intValue_. If _isLittleEndian_ is *false*, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.
        - sec-setvalueinbuffer:P/F/T = 14/5/19 (73.68%)
            Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
            set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
            Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.
            Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
            store the individual bytes of _rawBytes_ into _block_, starting at _block_[_byteIndex_].
        - sec-getmodifysetvalueinbuffer:P/F/T = 16/7/23 (69.57%)
            Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
            set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
            Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.
            Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
            Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.
            Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_byteIndex_].
            Store the individual bytes of _rawBytesModified_ into _block_, starting at _block_[_byteIndex_].
      - sec-arraybuffer-constructor:P/F/T = 5/0/5 (100.00%)
        - sec-arraybuffer-length:P/F/T = 5/0/5 (100.00%)
      - sec-properties-of-the-arraybuffer-constructor:P/F/T = 8/0/8 (100.00%)
        - sec-arraybuffer.isview:P/F/T = 6/0/6 (100.00%)
        - sec-arraybuffer.prototype:
        - sec-get-arraybuffer-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-arraybuffer-prototype-object:P/F/T = 50/0/50 (100.00%)
        - sec-get-arraybuffer.prototype.bytelength:P/F/T = 9/0/9 (100.00%)
        - sec-arraybuffer.prototype.constructor:
        - sec-arraybuffer.prototype.slice:P/F/T = 41/0/41 (100.00%)
        - sec-arraybuffer.prototype-@@tostringtag:
      - sec-properties-of-the-arraybuffer-instances:
    - sec-sharedarraybuffer-objects:P/F/T = 60/1/61 (98.36%)
      - sec-abstract-operations-for-sharedarraybuffer-objects:P/F/T = 14/0/14 (100.00%)
        - sec-allocatesharedarraybuffer:P/F/T = 6/0/6 (100.00%)
        - sec-issharedarraybuffer:P/F/T = 8/0/8 (100.00%)
      - sec-sharedarraybuffer-constructor:P/F/T = 5/0/5 (100.00%)
        - sec-sharedarraybuffer-length:P/F/T = 5/0/5 (100.00%)
      - sec-properties-of-the-sharedarraybuffer-constructor:P/F/T = 2/0/2 (100.00%)
        - sec-sharedarraybuffer.prototype:
        - sec-sharedarraybuffer-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-sharedarraybuffer-prototype-object:P/F/T = 39/1/40 (97.50%)
        - sec-get-sharedarraybuffer.prototype.bytelength:P/F/T = 7/0/7 (100.00%)
        - sec-sharedarraybuffer.prototype.constructor:
        - sec-sharedarraybuffer.prototype.slice:P/F/T = 32/1/33 (96.97%)
            If _new_.[[ArrayBufferData]] and _O_.[[ArrayBufferData]] are the same Shared Data Block values, throw a *TypeError* exception.
        - sec-sharedarraybuffer.prototype.toString:
      - sec-properties-of-the-sharedarraybuffer-instances:
    - sec-dataview-objects:P/F/T = 164/2/166 (98.80%)
      - sec-abstract-operations-for-dataview-objects:P/F/T = 32/2/34 (94.12%)
        - sec-getviewvalue:P/F/T = 14/1/15 (93.33%)
            Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
        - sec-setviewvalue:P/F/T = 18/1/19 (94.74%)
            Let _elementSize_ be the Element Size value specified in <emu-xref href="#table-the-typedarray-constructors"></emu-xref> for Element Type _type_.
      - sec-dataview-constructor:P/F/T = 24/0/24 (100.00%)
        - sec-dataview-buffer-byteoffset-bytelength:P/F/T = 24/0/24 (100.00%)
      - sec-properties-of-the-dataview-constructor:
        - sec-dataview.prototype:
      - sec-properties-of-the-dataview-prototype-object:P/F/T = 108/0/108 (100.00%)
        - sec-get-dataview.prototype.buffer:P/F/T = 6/0/6 (100.00%)
        - sec-get-dataview.prototype.bytelength:P/F/T = 9/0/9 (100.00%)
        - sec-get-dataview.prototype.byteoffset:P/F/T = 9/0/9 (100.00%)
        - sec-dataview.prototype.constructor:
        - sec-dataview.prototype.getbigint64:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.getbiguint64:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.getfloat32:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.getfloat64:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.getint8:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.getint16:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.getint32:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.getuint8:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.getuint16:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.getuint32:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.setbigint64:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.setbiguint64:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.setfloat32:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.setfloat64:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.setint8:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.setint16:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.setint32:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.setuint8:P/F/T = 3/0/3 (100.00%)
        - sec-dataview.prototype.setuint16:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype.setuint32:P/F/T = 5/0/5 (100.00%)
        - sec-dataview.prototype-@@tostringtag:
      - sec-properties-of-dataview-instances:
    - sec-atomics-object:P/F/T = 261/41/302 (86.42%)
      - sec-waiterlist-objects:
      - sec-abstract-operations-for-atomics:P/F/T = 97/23/120 (80.83%)
        - sec-validateintegertypedarray:P/F/T = 14/0/14 (100.00%)
        - sec-validateatomicaccess:P/F/T = 9/0/9 (100.00%)
        - sec-getwaiterlist:P/F/T = 2/1/3 (66.67%)
            Return the WaiterList that is referenced by the pair (_block_, _i_).
        - sec-entercriticalsection:P/F/T = 6/7/13 (46.15%)
            Wait until no agent is in the critical section for _WL_, then enter the critical section for _WL_ (without allowing any other agent to enter).
            If _WL_ has a Synchronize event, then [...]
            Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.
            Let _eventsRecord_ be the Agent Events Record in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
            Let _enterEvent_ be a new Synchronize event.
            Let _leaveEvent_ be the Synchronize event in _WL_.
            Append (_leaveEvent_, _enterEvent_) to _eventsRecord_.[[AgentSynchronizesWith]].
        - sec-leavecriticalsection:P/F/T = 5/5/10 (50.00%)
            Let _execution_ be the [[CandidateExecution]] field of the calling surrounding's Agent Record.
            Let _eventsRecord_ be the Agent Events Record in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
            Let _leaveEvent_ be a new Synchronize event.
            Set the Synchronize event in _WL_ to _leaveEvent_.
            Leave the critical section for _WL_.
        - sec-addwaiter:P/F/T = 4/1/5 (80.00%)
            Add _W_ to the end of the list of waiters in _WL_.
        - sec-removewaiter:P/F/T = 4/1/5 (80.00%)
            Remove _W_ from the list of waiters in _WL_.
        - sec-removewaiters:P/F/T = 9/3/12 (75.00%)
            Let _S_ be a reference to the list of waiters in _WL_.
            Let _W_ be the first waiter in _S_.
            Remove _W_ from _S_.
        - sec-suspendagent:P/F/T = 7/2/9 (77.78%)
            Perform LeaveCriticalSection(_WL_) and suspend _W_ for up to _timeout_ milliseconds, performing the combined operation in such a way that a notification that arrives after the critical section is exited but before the suspension takes effect is not lost. _W_ can notify either because the timeout expired or because it was notified explicitly by another agent calling NotifyWaiter with arguments _WL_ and _W_, and not for any other reasons at all.
            If _W_ was notified explicitly by another agent calling NotifyWaiter with arguments _WL_ and _W_, return *true*.
        - sec-notifywaiter:P/F/T = 3/1/4 (75.00%)
            Notify the agent _W_.
        - sec-atomicreadmodifywrite:P/F/T = 11/0/11 (100.00%)
        - sec-bytelistbitwiseop:P/F/T = 14/1/15 (93.33%)
            _op_ is `|`. Let _resultByte_ be the result of applying the bitwise inclusive OR operation to _xByte_ and _yByte_.
        - sec-bytelistequal:P/F/T = 9/1/10 (90.00%)
            If _xBytes_ and _yBytes_ do not have the same number of elements, return *false*.
      - sec-atomics.add:P/F/T = 14/2/16 (87.50%)
          Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
          Let _add_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called: [...]
      - sec-atomics.and:P/F/T = 3/1/4 (75.00%)
          Let _and_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called: [...]
      - sec-atomics.compareexchange:P/F/T = 34/7/41 (82.93%)
          Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
          Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.
          Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().
          Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.
          Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called: [...]
          Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_indexedPosition_].
          Store the individual bytes of _replacementBytes_ into _block_, starting at _block_[_indexedPosition_].
      - sec-atomics.exchange:P/F/T = 3/1/4 (75.00%)
          Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called: [...]
      - sec-atomics.islockfree:P/F/T = 11/1/12 (91.67%)
          Let _AR_ be the Agent Record of the surrounding agent.
      - sec-atomics.load:P/F/T = 8/0/8 (100.00%)
      - sec-atomics.or:P/F/T = 3/1/4 (75.00%)
          Let _or_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called: [...]
      - sec-atomics.store:P/F/T = 12/0/12 (100.00%)
      - sec-atomics.sub:P/F/T = 14/2/16 (87.50%)
          Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.
          Let _subtract_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called: [...]
      - sec-atomics.wait:P/F/T = 38/0/38 (100.00%)
      - sec-atomics.notify:P/F/T = 21/2/23 (91.30%)
          Let _W_ be the first agent in _S_.
          Remove _W_ from the front of _S_.
      - sec-atomics.xor:P/F/T = 3/1/4 (75.00%)
          Let _xor_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called: [...]
      - sec-atomics-@@tostringtag:
    - sec-json-object:P/F/T = 218/22/240 (90.83%)
      - sec-json.parse:P/F/T = 47/2/49 (95.92%)
          Parse StringToCodePoints(_jsonString_) as a JSON text as specified in ECMA-404. Throw a *SyntaxError* exception if it is not a valid JSON text as defined in that specification.
          Let _completion_ be the result of <emu-meta suppress-effects="user-code">evaluating _script_</emu-meta>.
        - sec-internalizejsonproperty:P/F/T = 30/0/30 (100.00%)
      - sec-json.stringify:P/F/T = 171/20/191 (89.53%)
          Let _PropertyList_ and _ReplacerFunction_ be *undefined*.
          If _v_ has a [[StringData]] or [[NumberData]] internal slot, set _item_ to ? ToString(_v_).
          let _gap_ be the String value containing _spaceMV_ occurrences of the code unit 0x0020 (SPACE).
          If the length of _space_ is 10 or less, let _gap_ be _space_; otherwise let _gap_ be the substring of _space_ from 0 to 10.
        - sec-serializejsonproperty:P/F/T = 47/0/47 (100.00%)
        - sec-quotejsonstring:P/F/T = 5/7/12 (41.67%)
            Let _product_ be the String value consisting solely of the code unit 0x0022 (QUOTATION MARK).
            For each code point _C_ of StringToCodePoints(_value_), do [...]
            If _C_ is listed in the ‚ÄúCode Point‚Äù column of <emu-xref href="#table-json-single-character-escapes"></emu-xref>, then [...]
            Set _product_ to the string-concatenation of _product_ and the escape sequence for _C_ as specified in the ‚ÄúEscape Sequence‚Äù column of the corresponding row.
            Else if _C_ has a numeric value less than 0x0020 (SPACE), or if _C_ has the same numeric value as a <emu-xref href="#leading-surrogate"></emu-xref> or <emu-xref href="#trailing-surrogate"></emu-xref>, then [...]
            Let _unit_ be the code unit whose numeric value is that of _C_.
            Else, [...]
        - sec-unicodeescape:P/F/T = 3/1/4 (75.00%)
            Return the string-concatenation of: [...]
        - sec-serializejsonobject:P/F/T = 35/4/39 (89.74%)
            throw a *TypeError* exception because the structure is cyclical.
            Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.
            Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.
            Remove the last element of _state_.[[Stack]].
        - sec-serializejsonarray:P/F/T = 29/4/33 (87.88%)
            throw a *TypeError* exception because the structure is cyclical.
            Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.
            Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.
            Remove the last element of _state_.[[Stack]].
      - sec-json-@@tostringtag:
  - sec-managing-memory:P/F/T = 58/1/59 (98.31%)
    - sec-weak-ref-objects:P/F/T = 20/0/20 (100.00%)
      - sec-weak-ref-constructor:P/F/T = 9/0/9 (100.00%)
        - sec-weak-ref-target:P/F/T = 9/0/9 (100.00%)
      - sec-properties-of-the-weak-ref-constructor:
        - sec-weak-ref.prototype:
      - sec-properties-of-the-weak-ref-prototype-object:P/F/T = 4/0/4 (100.00%)
        - sec-weak-ref.prototype.constructor:
        - sec-weak-ref.prototype.deref:P/F/T = 4/0/4 (100.00%)
        - sec-weak-ref.prototype-@@tostringtag:
      - sec-weakref-abstract-operations:P/F/T = 7/0/7 (100.00%)
        - sec-weakrefderef:P/F/T = 7/0/7 (100.00%)
      - sec-properties-of-weak-ref-instances:
    - sec-finalization-registry-objects:P/F/T = 38/1/39 (97.44%)
      - sec-finalization-registry-constructor:P/F/T = 11/0/11 (100.00%)
        - sec-finalization-registry-cleanup-callback:P/F/T = 11/0/11 (100.00%)
      - sec-properties-of-the-finalization-registry-constructor:
        - sec-finalization-registry.prototype:
      - sec-properties-of-the-finalization-registry-prototype-object:P/F/T = 27/1/28 (96.43%)
        - sec-finalization-registry.prototype.constructor:
        - sec-finalization-registry.prototype.register:P/F/T = 15/0/15 (100.00%)
        - sec-finalization-registry.prototype.unregister:P/F/T = 12/1/13 (92.31%)
            Remove _cell_ from _finalizationRegistry_.[[Cells]].
        - sec-finalization-registry.prototype-@@tostringtag:
      - sec-properties-of-finalization-registry-instances:
  - sec-control-abstraction-objects:P/F/T = 1007/17/1024 (98.34%)
    - sec-iteration:P/F/T = 82/0/82 (100.00%)
      - sec-common-iteration-interfaces:
        - sec-iterable-interface:
        - sec-iterator-interface:
        - sec-asynciterable-interface:
        - sec-asynciterator-interface:
        - sec-iteratorresult-interface:
      - sec-%iteratorprototype%-object:P/F/T = 2/0/2 (100.00%)
        - sec-%iteratorprototype%-@@iterator:P/F/T = 2/0/2 (100.00%)
      - sec-asynciteratorprototype:P/F/T = 2/0/2 (100.00%)
        - sec-asynciteratorprototype-asynciterator:P/F/T = 2/0/2 (100.00%)
      - sec-async-from-sync-iterator-objects:P/F/T = 78/0/78 (100.00%)
        - sec-createasyncfromsynciterator:P/F/T = 6/0/6 (100.00%)
        - sec-%asyncfromsynciteratorprototype%-object:P/F/T = 57/0/57 (100.00%)
          - sec-%asyncfromsynciteratorprototype%.next:P/F/T = 12/0/12 (100.00%)
          - sec-%asyncfromsynciteratorprototype%.return:P/F/T = 23/0/23 (100.00%)
          - sec-%asyncfromsynciteratorprototype%.throw:P/F/T = 22/0/22 (100.00%)
        - sec-properties-of-async-from-sync-iterator-instances:
        - sec-asyncfromsynciteratorcontinuation:P/F/T = 15/0/15 (100.00%)
    - sec-promise-objects:P/F/T = 550/0/550 (100.00%)
      - sec-promise-abstract-operations:P/F/T = 115/0/115 (100.00%)
        - sec-promisecapability-records:P/F/T = 7/0/7 (100.00%)
          - sec-ifabruptrejectpromise:P/F/T = 7/0/7 (100.00%)
        - sec-promisereaction-records:
        - sec-createresolvingfunctions:P/F/T = 54/0/54 (100.00%)
          - sec-promise-reject-functions:P/F/T = 10/0/10 (100.00%)
          - sec-promise-resolve-functions:P/F/T = 31/0/31 (100.00%)
        - sec-fulfillpromise:P/F/T = 9/0/9 (100.00%)
        - sec-newpromisecapability:P/F/T = 22/0/22 (100.00%)
        - sec-ispromise:P/F/T = 6/0/6 (100.00%)
        - sec-rejectpromise:P/F/T = 11/0/11 (100.00%)
        - sec-triggerpromisereactions:P/F/T = 6/0/6 (100.00%)
        - sec-host-promise-rejection-tracker:
      - sec-promise-jobs:P/F/T = 48/0/48 (100.00%)
        - sec-newpromisereactionjob:P/F/T = 33/0/33 (100.00%)
        - sec-newpromiseresolvethenablejob:P/F/T = 15/0/15 (100.00%)
      - sec-promise-constructor:P/F/T = 16/0/16 (100.00%)
        - sec-promise-executor:P/F/T = 16/0/16 (100.00%)
      - sec-properties-of-the-promise-constructor:P/F/T = 290/0/290 (100.00%)
        - sec-promise.all:P/F/T = 71/0/71 (100.00%)
          - sec-getpromiseresolve:P/F/T = 5/0/5 (100.00%)
          - sec-performpromiseall:P/F/T = 36/0/36 (100.00%)
          - sec-promise.all-resolve-element-functions:P/F/T = 16/0/16 (100.00%)
        - sec-promise.allsettled:P/F/T = 99/0/99 (100.00%)
          - sec-performpromiseallsettled:P/F/T = 45/0/45 (100.00%)
          - sec-promise.allsettled-resolve-element-functions:P/F/T = 20/0/20 (100.00%)
          - sec-promise.allsettled-reject-element-functions:P/F/T = 20/0/20 (100.00%)
        - sec-promise.any:P/F/T = 68/0/68 (100.00%)
          - sec-performpromiseany:P/F/T = 37/0/37 (100.00%)
          - sec-promise.any-reject-element-functions:P/F/T = 17/0/17 (100.00%)
        - sec-promise.prototype:
        - sec-promise.race:P/F/T = 31/0/31 (100.00%)
          - sec-performpromiserace:P/F/T = 17/0/17 (100.00%)
        - sec-promise.reject:P/F/T = 5/0/5 (100.00%)
        - sec-promise.resolve:P/F/T = 14/0/14 (100.00%)
          - sec-promise-resolve:P/F/T = 9/0/9 (100.00%)
        - sec-get-promise-@@species:P/F/T = 2/0/2 (100.00%)
      - sec-properties-of-the-promise-prototype-object:P/F/T = 81/0/81 (100.00%)
        - sec-promise.prototype.catch:P/F/T = 3/0/3 (100.00%)
        - sec-promise.prototype.constructor:
        - sec-promise.prototype.finally:P/F/T = 32/0/32 (100.00%)
        - sec-promise.prototype.then:P/F/T = 46/0/46 (100.00%)
          - sec-performpromisethen:P/F/T = 39/0/39 (100.00%)
        - sec-promise.prototype-@@tostringtag:
      - sec-properties-of-promise-instances:
    - sec-generatorfunction-objects:P/F/T = 3/1/4 (75.00%)
      - sec-generatorfunction-constructor:P/F/T = 3/1/4 (75.00%)
        - sec-generatorfunction:P/F/T = 3/1/4 (75.00%)
            Let _args_ be the _argumentsList_ that was passed to this function by [[Call]] or [[Construct]].
      - sec-properties-of-the-generatorfunction-constructor:
        - sec-generatorfunction.length:
        - sec-generatorfunction.prototype:
      - sec-properties-of-the-generatorfunction-prototype-object:
        - sec-generatorfunction.prototype.constructor:
        - sec-generatorfunction.prototype.prototype:
        - sec-generatorfunction.prototype-@@tostringtag:
      - sec-generatorfunction-instances:
        - sec-generatorfunction-instances-length:
        - sec-generatorfunction-instances-name:
        - sec-generatorfunction-instances-prototype:
    - sec-asyncgeneratorfunction-objects:P/F/T = 3/1/4 (75.00%)
      - sec-asyncgeneratorfunction-constructor:P/F/T = 3/1/4 (75.00%)
        - sec-asyncgeneratorfunction:P/F/T = 3/1/4 (75.00%)
            Let _args_ be the _argumentsList_ that was passed to this function by [[Call]] or [[Construct]].
      - sec-properties-of-asyncgeneratorfunction:
        - sec-asyncgeneratorfunction-length:
        - sec-asyncgeneratorfunction-prototype:
      - sec-properties-of-asyncgeneratorfunction-prototype:
        - sec-asyncgeneratorfunction-prototype-constructor:
        - sec-asyncgeneratorfunction-prototype-prototype:
        - sec-asyncgeneratorfunction-prototype-tostringtag:
      - sec-asyncgeneratorfunction-instances:
        - sec-asyncgeneratorfunction-instance-length:
        - sec-asyncgeneratorfunction-instance-name:
        - sec-asyncgeneratorfunction-instance-prototype:
    - sec-generator-objects:P/F/T = 116/7/123 (94.31%)
      - sec-properties-of-generator-prototype:P/F/T = 10/0/10 (100.00%)
        - sec-generator.prototype.constructor:
        - sec-generator.prototype.next:P/F/T = 2/0/2 (100.00%)
        - sec-generator.prototype.return:P/F/T = 4/0/4 (100.00%)
        - sec-generator.prototype.throw:P/F/T = 4/0/4 (100.00%)
        - sec-generator.prototype-@@tostringtag:
      - sec-properties-of-generator-instances:
      - sec-generator-abstract-operations:P/F/T = 106/7/113 (93.81%)
        - sec-generatorstart:P/F/T = 25/2/27 (92.59%)
            Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
            Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _generator_ can be discarded at this point.
        - sec-generatorvalidate:P/F/T = 10/0/10 (100.00%)
        - sec-generatorresume:P/F/T = 13/0/13 (100.00%)
        - sec-generatorresumeabrupt:P/F/T = 21/1/22 (95.45%)
            Once a generator enters the ~completed~ state it never leaves it and its associated execution context is never resumed. Any execution state associated with _generator_ can be discarded at this point.
        - sec-getgeneratorkind:P/F/T = 6/1/7 (85.71%)
            If _genContext_ does not have a Generator component, return ~non-generator~.
        - sec-generatoryield:P/F/T = 12/1/13 (92.31%)
            Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
        - sec-yield:P/F/T = 5/0/5 (100.00%)
        - sec-createiteratorfromclosure:P/F/T = 14/2/16 (87.50%)
            If _callerContext_ is not already suspended, suspend _callerContext_.
            Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
    - sec-asyncgenerator-objects:P/F/T = 223/5/228 (97.81%)
      - sec-properties-of-asyncgenerator-prototype:P/F/T = 59/0/59 (100.00%)
        - sec-asyncgenerator-prototype-constructor:
        - sec-asyncgenerator-prototype-next:P/F/T = 19/0/19 (100.00%)
        - sec-asyncgenerator-prototype-return:P/F/T = 18/0/18 (100.00%)
        - sec-asyncgenerator-prototype-throw:P/F/T = 22/0/22 (100.00%)
        - sec-asyncgenerator-prototype-tostringtag:
      - sec-properties-of-asyncgenerator-intances:
      - sec-asyncgenerator-abstract-operations:P/F/T = 164/5/169 (97.04%)
        - sec-asyncgeneratorrequest-records:
        - sec-asyncgeneratorstart:P/F/T = 25/1/26 (96.15%)
            Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
        - sec-asyncgeneratorvalidate:P/F/T = 7/0/7 (100.00%)
        - sec-asyncgeneratorenqueue:P/F/T = 4/0/4 (100.00%)
        - sec-asyncgeneratorcompletestep:P/F/T = 21/1/22 (95.45%)
            Remove the first element from _queue_.
        - sec-asyncgeneratorresume:P/F/T = 11/0/11 (100.00%)
        - sec-asyncgeneratorunwrapyieldresumption:P/F/T = 8/0/8 (100.00%)
        - sec-asyncgeneratoryield:P/F/T = 26/1/27 (96.30%)
            Remove _genContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
        - sec-asyncgeneratorawaitreturn:P/F/T = 25/0/25 (100.00%)
        - sec-asyncgeneratordrainqueue:P/F/T = 23/0/23 (100.00%)
        - sec-createasynciteratorfromclosure:P/F/T = 14/2/16 (87.50%)
            If _callerContext_ is not already suspended, suspend _callerContext_.
            Remove _calleeContext_ from the execution context stack and restore _callerContext_ as the running execution context.
    - sec-async-function-objects:P/F/T = 30/3/33 (90.91%)
      - sec-async-function-constructor:P/F/T = 3/1/4 (75.00%)
        - sec-async-function-constructor-arguments:P/F/T = 3/1/4 (75.00%)
            Let _args_ be the _argumentsList_ that was passed to this function by [[Call]] or [[Construct]].
      - sec-async-function-constructor-properties:
        - sec-async-function-constructor-length:
        - sec-async-function-constructor-prototype:
      - sec-async-function-prototype-properties:
        - sec-async-function-prototype-properties-constructor:
        - sec-async-function-prototype-properties-toStringTag:
      - sec-async-function-instances:
        - sec-async-function-instances-length:
        - sec-async-function-instances-name:
      - sec-async-functions-abstract-operations:P/F/T = 27/2/29 (93.10%)
        - sec-async-functions-abstract-operations-async-function-start:P/F/T = 5/1/6 (83.33%)
            Let _asyncContext_ be a copy of _runningContext_.
        - sec-asyncblockstart:P/F/T = 22/1/23 (95.65%)
            Remove _asyncContext_ from the execution context stack and restore the execution context that is at the top of the execution context stack as the running execution context.
  - sec-reflection:P/F/T = 99/0/99 (100.00%)
    - sec-reflect-object:P/F/T = 76/0/76 (100.00%)
      - sec-reflect.apply:P/F/T = 6/0/6 (100.00%)
      - sec-reflect.construct:P/F/T = 9/0/9 (100.00%)
      - sec-reflect.defineproperty:P/F/T = 6/0/6 (100.00%)
      - sec-reflect.deleteproperty:P/F/T = 5/0/5 (100.00%)
      - sec-reflect.get:P/F/T = 8/0/8 (100.00%)
      - sec-reflect.getownpropertydescriptor:P/F/T = 6/0/6 (100.00%)
      - sec-reflect.getprototypeof:P/F/T = 4/0/4 (100.00%)
      - sec-reflect.has:P/F/T = 5/0/5 (100.00%)
      - sec-reflect.isextensible:P/F/T = 4/0/4 (100.00%)
      - sec-reflect.ownkeys:P/F/T = 5/0/5 (100.00%)
      - sec-reflect.preventextensions:P/F/T = 4/0/4 (100.00%)
      - sec-reflect.set:P/F/T = 8/0/8 (100.00%)
      - sec-reflect.setprototypeof:P/F/T = 6/0/6 (100.00%)
      - sec-reflect-@@tostringtag:
    - sec-proxy-objects:P/F/T = 23/0/23 (100.00%)
      - sec-proxy-constructor:P/F/T = 4/0/4 (100.00%)
        - sec-proxy-target-handler:P/F/T = 4/0/4 (100.00%)
      - sec-properties-of-the-proxy-constructor:P/F/T = 19/0/19 (100.00%)
        - sec-proxy.revocable:P/F/T = 19/0/19 (100.00%)
    - sec-module-namespace-objects:
      - sec-@@tostringtag:
  - sec-memory-model:P/F/T = 29/10/39 (74.36%)
    - sec-memory-model-fundamentals:
    - sec-agent-event-records:
    - sec-chosen-value-records:
    - sec-candidate-executions:
    - sec-abstract-operations-for-the-memory-model:P/F/T = 29/10/39 (74.36%)
      - sec-event-set:P/F/T = 5/2/7 (71.43%)
          Let _events_ be an empty Set.
          For each event _E_ of _aer_.[[EventList]], do [...]
      - sec-sharedatablockeventset:P/F/T = 3/3/6 (50.00%)
          Let _events_ be an empty Set.
          For each event _E_ of EventSet(_execution_), do [...]
          WriteSharedMemory, or ReadModifyWriteSharedMemory event, add _E_ to _events_.
      - sec-hosteventset:P/F/T = 2/3/5 (40.00%)
          Let _events_ be an empty Set.
          For each event _E_ of EventSet(_execution_), do [...]
          If _E_ is not in SharedDataBlockEventSet(_execution_), add _E_ to _events_.
      - sec-composewriteeventbytes:P/F/T = 15/2/17 (88.24%)
          If _W_ is a WriteSharedMemory event, then [...]
          Else, [...]
      - sec-valueofreadevent:P/F/T = 4/0/4 (100.00%)
    - sec-relations-of-candidate-executions:
      - sec-agent-order:
      - sec-reads-bytes-from:
      - sec-reads-from:
      - sec-host-synchronizes-with:
      - sec-synchronizes-with:
      - sec-happens-before:
    - sec-properties-of-valid-executions:
      - sec-valid-chosen-reads:
      - sec-coherent-reads:
      - sec-tear-free-aligned-reads:
      - sec-memory-order:
      - sec-valid-executions:
    - sec-races:
    - sec-data-races:
    - sec-data-race-freedom:
    - sec-shared-memory-guidelines: