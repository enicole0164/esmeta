def <BUILTIN>:INTRINSICS.Math.round(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let x = (pop < argumentsList) else let x = absent
  call %0 = clo<ToNumber>(x)
  let n = [? %0]
  if (|| (|| (= n NaN) (= n +INF)) (= n -INF)) {
    (yet "or an integral Number, return _n_.")
  } else {}
  if (&& (< n 0.5f) (< 0.0f n)) {
    return 0.0f
  } else {}
  if (&& (< n -0.0f) (! (< n -0.5f))) {
    return -0.0f
  } else {}
  (yet "Return the integral Number closest to _n_, preferring the Number closer to +âˆž in the case of a tie.")
}