def ToUint8Clamp(
  argument: Unknown,
): Unknown["EitherANormalCompletionContainingAnIntegralNumberOrAnAbruptCompletion"] {
  call %0 = clo<ToNumber>(argument)
  let number = [? %0]
  if (= number NaN) {
    return 0.0f
  } else {}
  if (! (< 0 ([math] number))) {
    return 0.0f
  } else {}
  if (! (< ([math] number) 255)) {
    return 255.0f
  } else {}
  let f = (floor ([math] number))
  if (< (+ f 0.5) ([math] number)) {
    return ([number] (+ f 1))
  } else {}
  if (< ([math] number) (+ f 0.5)) {
    return ([number] f)
  } else {}
  (yet "If _f_ is odd, return 𝔽(_f_ + 1).")
  return ([number] f)
}