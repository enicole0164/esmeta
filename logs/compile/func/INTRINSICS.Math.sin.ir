def <BUILTIN>:INTRINSICS.Math.sin(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let x = (pop < argumentsList) else let x = absent
  call %0 = clo<ToNumber>(x)
  let n = [? %0]
  if (|| (= n NaN) (|| (= n 0.0f) (= n -0.0f))) {
    return n
  } else {}
  if (|| (= n +INF) (= n -INF)) {
    return NaN
  } else {}
  return ([approx-number] ([math:sin] ([math] n)))
}