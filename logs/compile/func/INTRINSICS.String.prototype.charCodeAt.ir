def <BUILTIN>:INTRINSICS.String.prototype.charCodeAt(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let pos = (pop < argumentsList) else let pos = absent
  call %0 = clo<RequireObjectCoercible>(this)
  let O = [? %0]
  call %1 = clo<ToString>(O)
  let S = [? %1]
  call %2 = clo<ToIntegerOrInfinity>(pos)
  let position = [? %2]
  let size = S.length
  if (|| (< position 0) (! (< position size))) {
    return NaN
  } else {}
  return ([number] ([math] S[position]))
}