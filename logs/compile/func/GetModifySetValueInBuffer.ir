def GetModifySetValueInBuffer(
  arrayBuffer: Unknown["ArrayBufferOrASharedArrayBuffer"],
  byteIndex: Unknown["NonnegativeInteger"],
  type: Unknown["TypedArrayElementType"],
  value: Number | BigInt,
  op: Unknown["ReadmodifywriteModificationFunction"],
  isLittleEndian?: Boolean,
): Number | BigInt {
  call %0 = clo<IsDetachedBuffer>(arrayBuffer)
  assert (= %0 false)
  assert (yet "There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.")
  assert (yet "Type(_value_) is BigInt if IsBigIntElementType(_type_) is *true*; otherwise, Type(_value_) is Number.")
  let block = arrayBuffer.ArrayBufferData
  (yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.")
  if (= isLittleEndian absent) {
    (yet "set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.")
  } else {}
  call %1 = clo<NumericToRawBytes>(type, value, isLittleEndian)
  let rawBytes = %1
  call %2 = clo<IsSharedArrayBuffer>(arrayBuffer)
  if (= %2 true) {
    (yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.")
    (yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().")
    (yet "Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.")
    nop
    let rmwEvent = (new ReadModifyWriteSharedMemory("Order" -> ~SeqCst~, "NoTear" -> true, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize, "Payload" -> rawBytes, "ModifyOp" -> op))[#1148]
    push eventList < rmwEvent
    push execution.ChosenValues < (new ChosenValueRecord("Event" -> rmwEvent, "ChosenValue" -> rawBytesRead))[#1149]
  } else {
    (yet "Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_byteIndex_].")
    call %3 = op(rawBytesRead, rawBytes)
    let rawBytesModified = %3
    (yet "Store the individual bytes of _rawBytesModified_ into _block_, starting at _block_[_byteIndex_].")
  }
  call %4 = clo<RawBytesToNumeric>(type, rawBytesRead, isLittleEndian)
  return %4
}