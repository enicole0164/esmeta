def <BUILTIN>:INTRINSICS.Array.prototype.concat(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  let items = argumentsList
  call %0 = clo<ToObject>(this)
  let O = [? %0]
  call %1 = clo<ArraySpeciesCreate>(O, 0)
  let A = [? %1]
  let n = 0
  push O > items
  %3 = items
  %2 = 0
  loop[foreach] (< %2 %3.length) {
    let E = %3[%2]
    call %4 = clo<IsConcatSpreadable>(E)
    let spreadable = [? %4]
    if (= spreadable true) {
      let k = 0
      call %5 = clo<LengthOfArrayLike>(E)
      let len = [? %5]
      if (< (- (** 2 53) 1) (+ n len)) {
        return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1017])
      } else {}
      loop[repeat] (< k len) {
        call %6 = clo<ToString>(([number] k))
        let P = [! %6]
        call %7 = clo<HasProperty>(E, P)
        let exists = [? %7]
        if (= exists true) {
          call %8 = clo<Get>(E, P)
          let subElement = [? %8]
          call %9 = clo<ToString>(([number] n))
          call %10 = clo<CreateDataPropertyOrThrow>(A, [! %9], subElement)
          [? %10]
        } else {}
        n = (+ n 1)
        k = (+ k 1)
      }
    } else {
      nop
      if (! (< n (- (** 2 53) 1))) {
        return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1018])
      } else {}
      call %11 = clo<ToString>(([number] n))
      call %12 = clo<CreateDataPropertyOrThrow>(A, [! %11], E)
      [? %12]
      n = (+ n 1)
    }
    %2 = (+ %2 1)
  }
  call %13 = clo<Set>(A, "length", ([number] n), true)
  [? %13]
  return A
}