def AsyncGeneratorYield(
  value: Unknown,
): Normal[ESValue] | Abrupt {
  let genContext = @EXECUTION_STACK[0]
  assert (? genContext: "ExecutionContext")
  let generator = genContext.Generator
  call %0 = clo<GetGeneratorKind>()
  assert (= %0 ~async~)
  call %1 = clo<Await>(value)
  value = [? %1]
  call %2 = clo<NormalCompletion>(value)
  let completion = %2
  assert (< 1 @EXECUTION_STACK.length)
  let previousContext = @EXECUTION_STACK[1]
  let previousRealm = previousContext.Realm
  call %3 = clo<AsyncGeneratorCompleteStep>(generator, completion, false, previousRealm)
  let queue = generator.AsyncGeneratorQueue
  if (! (= queue.length 0)) {
    nop
    let toYield = queue[0]
    call %4 = clo<Completion>(toYield.Completion)
    let resumptionValue = %4
    call %5 = clo<AsyncGeneratorUnwrapYieldResumption>(resumptionValue)
    return [? %5]
  } else {
    generator.AsyncGeneratorState = ~suspendedYield~
    (pop < @EXECUTION_STACK)
    genContext.ResumeCont = cont<AsyncGeneratorYield:cont0>
    call %6 = (pop < genContext.ReturnCont)(undefined)
  }
}