def <BUILTIN>:INTRINSICS.Atomics.notify(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let typedArray = (pop < argumentsList) else let typedArray = absent
  if (< 0 argumentsList.length) let index = (pop < argumentsList) else let index = absent
  if (< 0 argumentsList.length) let count = (pop < argumentsList) else let count = absent
  call %0 = clo<ValidateIntegerTypedArray>(typedArray, true)
  let buffer = [? %0]
  call %1 = clo<ValidateAtomicAccess>(typedArray, index)
  let indexedPosition = [? %1]
  if (= count undefined) {
    let c = +INF
  } else {
    call %2 = clo<ToIntegerOrInfinity>(count)
    let intCount = [? %2]
    let c = (max intCount 0)
  }
  let block = buffer.ArrayBufferData
  call %3 = clo<IsSharedArrayBuffer>(buffer)
  if (= %3 false) {
    return 0.0f
  } else {}
  call %4 = clo<GetWaiterList>(block, indexedPosition)
  let WL = %4
  let n = 0
  call %5 = clo<EnterCriticalSection>(WL)
  call %6 = clo<RemoveWaiters>(WL, c)
  let S = %6
  loop[repeat] (! (= S.length 0)) {
    (yet "Let _W_ be the first agent in _S_.")
    (yet "Remove _W_ from the front of _S_.")
    call %7 = clo<NotifyWaiter>(WL, W)
    n = (+ n 1)
  }
  call %8 = clo<LeaveCriticalSection>(WL)
  return ([number] n)
}