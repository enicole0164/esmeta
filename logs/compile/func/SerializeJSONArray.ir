def SerializeJSONArray(
  state: Unknown,
  value: ESValue,
): Normal[String] | Abrupt {
  if (contains state.Stack value) {
    (yet "throw a *TypeError* exception because the structure is cyclical.")
  } else {}
  push state.Stack < value
  let stepback = state.Indent
  state.Indent = (concat state.Indent state.Gap)
  let partial = (new [])[#1201]
  call %0 = clo<LengthOfArrayLike>(value)
  let len = [? %0]
  let index = 0
  loop[repeat] (< index len) {
    call %1 = clo<ToString>(([number] index))
    call %2 = clo<SerializeJSONProperty>(state, [! %1], value)
    let strP = [? %2]
    if (= strP undefined) {
      push partial < "null"
    } else {
      push partial < strP
    }
    index = (+ index 1)
  }
  if (= partial.length 0) {
    let final = "[]"
  } else {
    if (= state.Gap "") {
      (yet "Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.")
      let final = (concat "[" properties "]")
    } else {
      let separator = (concat 44cu 10cu state.Indent)
      (yet "Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.")
      let final = (concat "[" 10cu state.Indent properties 10cu stepback "]")
    }
  }
  (yet "Remove the last element of _state_.[[Stack]].")
  state.Indent = stepback
  return final
}