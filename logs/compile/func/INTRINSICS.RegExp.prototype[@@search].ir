def <BUILTIN>:INTRINSICS.RegExp.prototype[@@search](
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let string = (pop < argumentsList) else let string = absent
  let rx = this
  if (! (= (typeof rx) @Object)) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1003])
  } else {}
  call %0 = clo<ToString>(string)
  let S = [? %0]
  call %1 = clo<Get>(rx, "lastIndex")
  let previousLastIndex = [? %1]
  call %2 = clo<SameValue>(previousLastIndex, 0.0f)
  if (= %2 false) {
    call %3 = clo<Set>(rx, "lastIndex", 0.0f, true)
    [? %3]
  } else {}
  call %4 = clo<RegExpExec>(rx, S)
  let result = [? %4]
  call %5 = clo<Get>(rx, "lastIndex")
  let currentLastIndex = [? %5]
  call %6 = clo<SameValue>(currentLastIndex, previousLastIndex)
  if (= %6 false) {
    call %7 = clo<Set>(rx, "lastIndex", previousLastIndex, true)
    [? %7]
  } else {}
  if (= result null) {
    return -1.0f
  } else {}
  call %8 = clo<Get>(result, "index")
  return [? %8]
}