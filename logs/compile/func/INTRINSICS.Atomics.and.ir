def <BUILTIN>:INTRINSICS.Atomics.and(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let typedArray = (pop < argumentsList) else let typedArray = absent
  if (< 0 argumentsList.length) let index = (pop < argumentsList) else let index = absent
  if (< 0 argumentsList.length) let value = (pop < argumentsList) else let value = absent
  (yet "Let _and_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return ByteListBitwiseOp(`&`, _xBytes_, _yBytes_).")
  call %0 = clo<AtomicReadModifyWrite>(typedArray, index, value, and)
  return [? %0]
}