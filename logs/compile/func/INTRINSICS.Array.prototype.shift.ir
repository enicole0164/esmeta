def <BUILTIN>:INTRINSICS.Array.prototype.shift(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  call %0 = clo<ToObject>(this)
  let O = [? %0]
  call %1 = clo<LengthOfArrayLike>(O)
  let len = [? %1]
  if (== len 0) {
    call %2 = clo<Set>(O, "length", 0.0f, true)
    [? %2]
    return undefined
  } else {}
  call %3 = clo<Get>(O, "0")
  let first = [? %3]
  let k = 1
  loop[repeat] (< k len) {
    call %4 = clo<ToString>(([number] k))
    let from = [! %4]
    call %5 = clo<ToString>(([number] (- k 1)))
    let to = [! %5]
    call %6 = clo<HasProperty>(O, from)
    let fromPresent = [? %6]
    if (= fromPresent true) {
      call %7 = clo<Get>(O, from)
      let fromVal = [? %7]
      call %8 = clo<Set>(O, to, fromVal, true)
      [? %8]
    } else {
      assert (= fromPresent false)
      call %9 = clo<DeletePropertyOrThrow>(O, to)
      [? %9]
    }
    k = (+ k 1)
  }
  call %10 = clo<ToString>(([number] (- len 1)))
  call %11 = clo<DeletePropertyOrThrow>(O, [! %10])
  [? %11]
  call %12 = clo<Set>(O, "length", ([number] (- len 1)), true)
  [? %12]
  return first
}