def <BUILTIN>:INTRINSICS.TypedArray.of(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  let items = argumentsList
  let len = items.length
  let C = this
  call %0 = clo<IsConstructor>(C)
  if (= %0 false) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1059])
  } else {}
  call %1 = clo<TypedArrayCreate>(C, (new [([number] len)])[#1060])
  let newObj = [? %1]
  let k = 0
  loop[repeat] (< k len) {
    let kValue = items[k]
    call %2 = clo<ToString>(([number] k))
    let Pk = [! %2]
    call %3 = clo<Set>(newObj, Pk, kValue, true)
    [? %3]
    k = (+ k 1)
  }
  return newObj
}