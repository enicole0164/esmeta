def <BUILTIN>:INTRINSICS.TypedArray.prototype.filter(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let callbackfn = (pop < argumentsList) else let callbackfn = absent
  if (< 0 argumentsList.length) let thisArg = (pop < argumentsList) else let thisArg = absent
  let O = this
  call %0 = clo<ValidateTypedArray>(O)
  [? %0]
  let len = O.ArrayLength
  call %1 = clo<IsCallable>(callbackfn)
  if (= %1 false) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1065])
  } else {}
  let kept = (new [])[#1066]
  let k = 0
  let captured = 0
  loop[repeat] (< k len) {
    call %2 = clo<ToString>(([number] k))
    let Pk = [! %2]
    call %3 = clo<Get>(O, Pk)
    let kValue = [! %3]
    call %4 = clo<Call>(callbackfn, thisArg, (new [kValue, ([number] k), O])[#1067])
    call %5 = clo<ToBoolean>([? %4])
    let selected = %5
    if (= selected true) {
      push kept < kValue
      captured = (+ captured 1)
    } else {}
    k = (+ k 1)
  }
  call %6 = clo<TypedArraySpeciesCreate>(O, (new [([number] captured)])[#1068])
  let A = [? %6]
  let n = 0
  %8 = kept
  %7 = 0
  loop[foreach] (< %7 %8.length) {
    let e = %8[%7]
    call %9 = clo<ToString>(([number] n))
    call %10 = clo<Set>(A, [! %9], e, true)
    [! %10]
    n = (+ n 1)
    %7 = (+ %7 1)
  }
  return A
}