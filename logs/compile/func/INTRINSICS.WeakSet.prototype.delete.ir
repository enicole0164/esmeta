def <BUILTIN>:INTRINSICS.WeakSet.prototype.delete(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let value = (pop < argumentsList) else let value = absent
  let S = this
  call %0 = clo<RequireInternalSlot>(S, "WeakSetData")
  [? %0]
  if (! (= (typeof value) @Object)) {
    return false
  } else {}
  let entries = S.WeakSetData
  %2 = entries
  %1 = 0
  loop[foreach] (< %1 %2.length) {
    let e = %2[%1]
    %3 = (! (= e ~empty~))
    if %3 {
      call %4 = clo<SameValue>(e, value)
      %3 = (= %4 true)
    } else {}
    if %3 {
      (yet "Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.")
      return true
    } else {}
    %1 = (+ %1 1)
  }
  return false
}