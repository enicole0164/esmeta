def <SYNTAX>:BindingElement[1,0].IteratorBindingInitialization(
  this: Ast:BindingElement[1,0],
  iteratorRecord: Unknown,
  environment: Unknown,
): Normal[Const[~unused~]] | Abrupt {
  let v = undefined
  if (= iteratorRecord.Done false) {
    call %0 = clo<IteratorStep>(iteratorRecord)
    call %1 = clo<Completion>(%0)
    let next = %1
    if (&& (comp? next) (! (= next.Type ~normal~))) {
      iteratorRecord.Done = true
    } else {}
    [? next]
    if (= next false) {
      iteratorRecord.Done = true
    } else {
      call %2 = clo<IteratorValue>(next)
      call %3 = clo<Completion>(%2)
      v = %3
      if (&& (comp? v) (! (= v.Type ~normal~))) {
        iteratorRecord.Done = true
      } else {}
      [? v]
    }
  } else {}
  if (&& (! (= this[1] absent)) (= v undefined)) {
    sdo-call %4 = this[1]->Evaluation()
    let defaultValue = %4
    call %5 = clo<GetValue>(defaultValue)
    v = [? %5]
  } else {}
  sdo-call %6 = this[0]->BindingInitialization(v, environment)
  return [? %6]
}