def <SYNTAX>:ForStatement[2,3].ForLoopEvaluation(
  this: Ast:ForStatement[2,3],
  labelSet: Unknown,
): Normal[ESValue] | Abrupt {
  let oldEnv = @EXECUTION_STACK[0].LexicalEnvironment
  call %0 = clo<NewDeclarativeEnvironment>(oldEnv)
  let loopEnv = %0
  sdo-call %1 = this[0]->IsConstantDeclaration()
  let isConst = %1
  sdo-call %2 = this[0]->BoundNames()
  let boundNames = %2
  %4 = boundNames
  %3 = 0
  loop[foreach] (< %3 %4.length) {
    let dn = %4[%3]
    if (= isConst true) {
      method-call %5 = loopEnv->CreateImmutableBinding(dn, true)
      [! %5]
    } else {
      method-call %6 = loopEnv->CreateMutableBinding(dn, false)
      [! %6]
    }
    %3 = (+ %3 1)
  }
  @EXECUTION_STACK[0].LexicalEnvironment = loopEnv
  sdo-call %7 = this[0]->Evaluation()
  let forDcl = %7
  if (&& (comp? forDcl) (! (= forDcl.Type ~normal~))) {
    @EXECUTION_STACK[0].LexicalEnvironment = oldEnv
    return [? forDcl]
  } else {}
  if (= isConst false) {
    let perIterationLets = boundNames
  } else {
    let perIterationLets = (new [])[#619]
  }
  call %8 = clo<ForBodyEvaluation>(this[1], this[2], this[3], perIterationLets, labelSet)
  call %9 = clo<Completion>(%8)
  let bodyResult = %9
  @EXECUTION_STACK[0].LexicalEnvironment = oldEnv
  return [? bodyResult]
}