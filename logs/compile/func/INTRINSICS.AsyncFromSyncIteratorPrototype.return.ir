def <BUILTIN>:INTRINSICS.AsyncFromSyncIteratorPrototype.return(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let value = (pop < argumentsList) else let value = absent
  let O = this
  assert (&& (? O: "Object") (! (= O.SyncIteratorRecord absent)))
  call %0 = clo<NewPromiseCapability>(@EXECUTION_STACK[0].Realm.Intrinsics["%Promise%"])
  let promiseCapability = [! %0]
  let syncIterator = O.SyncIteratorRecord.Iterator
  call %1 = clo<GetMethod>(syncIterator, "return")
  call %2 = clo<Completion>(%1)
  let return = %2
  if (&& (comp? return) (! (= return.Type ~normal~))) {
    call %3 = clo<Call>(promiseCapability.Reject, undefined, (new [return.Value])[#1217])
    [? %3]
    return promiseCapability.Promise
  } else {
    if (? return: "CompletionRecord") {
      return = return.Value
    } else {}
  }
  if (= return undefined) {
    call %4 = clo<CreateIterResultObject>(value, true)
    let iterResult = %4
    call %5 = clo<Call>(promiseCapability.Resolve, undefined, (new [iterResult])[#1218])
    [! %5]
    return promiseCapability.Promise
  } else {}
  if (! (= value absent)) {
    call %6 = clo<Call>(return, syncIterator, (new [value])[#1219])
    call %7 = clo<Completion>(%6)
    let result = %7
  } else {
    call %8 = clo<Call>(return, syncIterator)
    call %9 = clo<Completion>(%8)
    let result = %9
  }
  if (&& (comp? result) (! (= result.Type ~normal~))) {
    call %10 = clo<Call>(promiseCapability.Reject, undefined, (new [result.Value])[#1220])
    [? %10]
    return promiseCapability.Promise
  } else {
    if (? result: "CompletionRecord") {
      result = result.Value
    } else {}
  }
  if (! (= (typeof result) @Object)) {
    call %11 = clo<Call>(promiseCapability.Reject, undefined, (new [(new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1222]])[#1221])
    [! %11]
    return promiseCapability.Promise
  } else {}
  call %12 = clo<AsyncFromSyncIteratorContinuation>(result, promiseCapability)
  return %12
}