def <INTERNAL>:IntegerIndexedExoticObject.DefineOwnProperty(
  O: IntegerIndexedExoticObject,
  P: Symbol | String,
  Desc: PropertyDescriptor,
): Normal[Boolean] | Abrupt {
  if (= (typeof P) @String) {
    call %0 = clo<CanonicalNumericIndexString>(P)
    let numericIndex = %0
    if (! (= numericIndex undefined)) {
      call %1 = clo<IsValidIntegerIndex>(O, numericIndex)
      if (= %1 false) {
        return false
      } else {}
      if (&& (! (= Desc.Configurable absent)) (= Desc.Configurable false)) {
        return false
      } else {}
      if (&& (! (= Desc.Enumerable absent)) (= Desc.Enumerable false)) {
        return false
      } else {}
      call %2 = clo<IsAccessorDescriptor>(Desc)
      if (= %2 true) {
        return false
      } else {}
      if (&& (! (= Desc.Writable absent)) (= Desc.Writable false)) {
        return false
      } else {}
      if (! (= Desc.Value absent)) {
        call %3 = clo<IntegerIndexedElementSet>(O, numericIndex, Desc.Value)
        [? %3]
      } else {}
      return true
    } else {}
  } else {}
  call %4 = clo<OrdinaryDefineOwnProperty>(O, P, Desc)
  return [! %4]
}