def <BUILTIN>:INTRINSICS.Array.prototype.pop(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  call %0 = clo<ToObject>(this)
  let O = [? %0]
  call %1 = clo<LengthOfArrayLike>(O)
  let len = [? %1]
  if (== len 0) {
    call %2 = clo<Set>(O, "length", 0.0f, true)
    [? %2]
    return undefined
  } else {
    assert (< 0 len)
    let newLen = ([number] (- len 1))
    call %3 = clo<ToString>(newLen)
    let index = [! %3]
    call %4 = clo<Get>(O, index)
    let element = [? %4]
    call %5 = clo<DeletePropertyOrThrow>(O, index)
    [? %5]
    call %6 = clo<Set>(O, "length", newLen, true)
    [? %6]
    return element
  }
}