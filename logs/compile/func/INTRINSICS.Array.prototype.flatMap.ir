def <BUILTIN>:INTRINSICS.Array.prototype.flatMap(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let mapperFunction = (pop < argumentsList) else let mapperFunction = absent
  if (< 0 argumentsList.length) let thisArg = (pop < argumentsList) else let thisArg = absent
  call %0 = clo<ToObject>(this)
  let O = [? %0]
  call %1 = clo<LengthOfArrayLike>(O)
  let sourceLen = [? %1]
  call %2 = clo<IsCallable>(mapperFunction)
  if (= %2 false) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1029])
  } else {}
  call %3 = clo<ArraySpeciesCreate>(O, 0)
  let A = [? %3]
  call %4 = clo<FlattenIntoArray>(A, O, sourceLen, 0, 1, mapperFunction, thisArg)
  [? %4]
  return A
}