def <SYNTAX>:AssignmentExpression[5,0].Evaluation(
  this: Ast:AssignmentExpression[5,0],
): Unknown {
  sdo-call %0 = this[0]->Evaluation()
  let lref = %0
  call %1 = clo<GetValue>(lref)
  let lval = [? %1]
  sdo-call %2 = this[2]->Evaluation()
  let rref = %2
  call %3 = clo<GetValue>(rref)
  let rval = [? %3]
  let assignmentOpText = (source-text this[1])
  if (= assignmentOpText "**=") let opText = "**" else {}
  if (= assignmentOpText "*=") let opText = "*" else {}
  if (= assignmentOpText "/=") let opText = "/" else {}
  if (= assignmentOpText "%=") let opText = "%" else {}
  if (= assignmentOpText "+=") let opText = "+" else {}
  if (= assignmentOpText "-=") let opText = "-" else {}
  if (= assignmentOpText "<<=") let opText = "<<" else {}
  if (= assignmentOpText ">>=") let opText = ">>" else {}
  if (= assignmentOpText ">>>=") let opText = ">>>" else {}
  if (= assignmentOpText "&=") let opText = "&" else {}
  if (= assignmentOpText "^=") let opText = "^" else {}
  if (= assignmentOpText "|=") let opText = "|" else {}
  call %4 = clo<ApplyStringOrNumericBinaryOperator>(lval, opText, rval)
  let r = [? %4]
  call %5 = clo<PutValue>(lref, r)
  [? %5]
  return r
}