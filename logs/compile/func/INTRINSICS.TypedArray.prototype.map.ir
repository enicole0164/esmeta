def <BUILTIN>:INTRINSICS.TypedArray.prototype.map(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let callbackfn = (pop < argumentsList) else let callbackfn = absent
  if (< 0 argumentsList.length) let thisArg = (pop < argumentsList) else let thisArg = absent
  let O = this
  call %0 = clo<ValidateTypedArray>(O)
  [? %0]
  let len = O.ArrayLength
  call %1 = clo<IsCallable>(callbackfn)
  if (= %1 false) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1075])
  } else {}
  call %2 = clo<TypedArraySpeciesCreate>(O, (new [([number] len)])[#1076])
  let A = [? %2]
  let k = 0
  loop[repeat] (< k len) {
    call %3 = clo<ToString>(([number] k))
    let Pk = [! %3]
    call %4 = clo<Get>(O, Pk)
    let kValue = [! %4]
    call %5 = clo<Call>(callbackfn, thisArg, (new [kValue, ([number] k), O])[#1077])
    let mappedValue = [? %5]
    call %6 = clo<Set>(A, Pk, mappedValue, true)
    [? %6]
    k = (+ k 1)
  }
  return A
}