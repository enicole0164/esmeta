def <BUILTIN>:INTRINSICS.TypedArray.prototype.fill(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let value = (pop < argumentsList) else let value = absent
  if (< 0 argumentsList.length) let start = (pop < argumentsList) else let start = absent
  if (< 0 argumentsList.length) let end = (pop < argumentsList) else let end = absent
  let O = this
  call %0 = clo<ValidateTypedArray>(O)
  [? %0]
  let len = O.ArrayLength
  if (= O.ContentType ~BigInt~) {
    call %1 = clo<ToBigInt>(value)
    value = [? %1]
  } else {
    call %2 = clo<ToNumber>(value)
    value = [? %2]
  }
  call %3 = clo<ToIntegerOrInfinity>(start)
  let relativeStart = [? %3]
  if (= relativeStart -INF) {
    let k = 0
  } else {
    if (< relativeStart 0) {
      let k = (max (+ len relativeStart) 0)
    } else {
      let k = (min relativeStart len)
    }
  }
  if (= end undefined) {
    let relativeEnd = len
  } else {
    call %4 = clo<ToIntegerOrInfinity>(end)
    let relativeEnd = [? %4]
  }
  if (= relativeEnd -INF) {
    let final = 0
  } else {
    if (< relativeEnd 0) {
      let final = (max (+ len relativeEnd) 0)
    } else {
      let final = (min relativeEnd len)
    }
  }
  call %5 = clo<IsDetachedBuffer>(O.ViewedArrayBuffer)
  if (= %5 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1064])
  } else {}
  loop[repeat] (< k final) {
    call %6 = clo<ToString>(([number] k))
    let Pk = [! %6]
    call %7 = clo<Set>(O, Pk, value, true)
    [! %7]
    k = (+ k 1)
  }
  return O
}