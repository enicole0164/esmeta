def <SYNTAX>:Term[2,0].CompileSubpattern(
  this: Ast:Term[2,0],
  direction: Const[~backward~, ~forward~],
): Unknown["Matcher"] {
  sdo-call %0 = this[0]->CompileAtom(direction)
  let m = %0
  sdo-call %1 = this[1]->CompileQuantifier()
  let q = %1
  assert (! (< q.Max q.Min))
  (yet "Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of this |Term|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing this |Term|.")
  (yet "Let _parenCount_ be the number of left-capturing parentheses in |Atom|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes enclosed by |Atom|.")
  (yet "Return a new Matcher with parameters (_x_, _c_) that captures _m_, _q_, _parenIndex_, and _parenCount_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Return RepeatMatcher(_m_, _q_.[[Min]], _q_.[[Max]], _q_.[[Greedy]], _x_, _c_, _parenIndex_, _parenCount_).")
}