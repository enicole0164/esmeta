def <SYNTAX>:CaseBlock[0,1].CaseBlockEvaluation(
  this: Ast:CaseBlock[0,1],
  input: Unknown,
): Normal[ESValue] | Abrupt {
  let V = undefined
  let A = (get-children (nt |CaseClause|[]) this[0])[#631]
  let found = false
  %1 = A
  %0 = 0
  loop[foreach] (< %0 %1.length) {
    let C = %1[%0]
    if (= found false) {
      call %2 = clo<CaseClauseIsSelected>(C, input)
      found = [? %2]
    } else {}
    if (= found true) {
      sdo-call %3 = C->Evaluation()
      let R = %3
      if (! (= R.Value ~empty~)) {
        V = R.Value
      } else {}
      if (&& (comp? R) (! (= R.Type ~normal~))) {
        call %4 = clo<UpdateEmpty>(R, V)
        return [? %4]
      } else {}
    } else {}
    %0 = (+ %0 1)
  }
  return V
}