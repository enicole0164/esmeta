def <CONC>:GlobalEnvironmentRecord.CreateGlobalFunctionBinding(
  envRec: GlobalEnvironmentRecord,
  N: String,
  V: ESValue,
  D: Boolean,
): Normal[Const[~unused~]] | Abrupt {
  let ObjRec = envRec.ObjectRecord
  let globalObject = ObjRec.BindingObject
  method-call %0 = globalObject->GetOwnProperty(N)
  let existingProp = [? %0]
  if (|| (= existingProp undefined) (= existingProp.Configurable true)) {
    let desc = (new PropertyDescriptor("Value" -> V, "Writable" -> true, "Enumerable" -> true, "Configurable" -> D))[#379]
  } else {
    let desc = (new PropertyDescriptor("Value" -> V))[#380]
  }
  call %1 = clo<DefinePropertyOrThrow>(globalObject, N, desc)
  [? %1]
  call %2 = clo<Set>(globalObject, N, V, false)
  [? %2]
  let varDeclaredNames = envRec.VarNames
  if (! (contains varDeclaredNames N)) {
    push varDeclaredNames < N
  } else {}
  return ~unused~
}