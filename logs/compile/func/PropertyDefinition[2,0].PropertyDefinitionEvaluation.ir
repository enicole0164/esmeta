def <SYNTAX>:PropertyDefinition[2,0].PropertyDefinitionEvaluation(
  this: Ast:PropertyDefinition[2,0],
  object: Unknown,
): Normal[Const[~unused~]] | Abrupt {
  sdo-call %0 = this[0]->Evaluation()
  let propKey = %0
  [? propKey]
  if false {
    let isProtoSetter = false
  } else {
    %1 = (= propKey "__proto__")
    if %1 {
      sdo-call %2 = this[0]->IsComputedPropertyKey()
      %1 = (= %2 false)
    } else {}
    if %1 {
      let isProtoSetter = true
    } else {
      let isProtoSetter = false
    }
  }
  call %3 = clo<IsAnonymousFunctionDefinition>(this[1])
  if (&& (= %3 true) (= isProtoSetter false)) {
    sdo-call %4 = this[1]->NamedEvaluation(propKey)
    let propValue = [? %4]
  } else {
    sdo-call %5 = this[1]->Evaluation()
    let exprValueRef = %5
    call %6 = clo<GetValue>(exprValueRef)
    let propValue = [? %6]
  }
  if (= isProtoSetter true) {
    if (|| (= (typeof propValue) @Object) (= (typeof propValue) @Null)) {
      method-call %7 = object->SetPrototypeOf(propValue)
      [! %7]
    } else {}
    return ~unused~
  } else {}
  assert (yet "_object_ is an ordinary, extensible object with no non-configurable properties.")
  call %8 = clo<CreateDataPropertyOrThrow>(object, propKey, propValue)
  [! %8]
  return ~unused~
}