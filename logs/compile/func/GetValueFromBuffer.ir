def GetValueFromBuffer(
  arrayBuffer: Unknown["ArrayBufferOrSharedArrayBuffer"],
  byteIndex: Unknown["NonnegativeInteger"],
  type: Unknown["TypedArrayElementType"],
  isTypedArray: Boolean,
  order: Const[~SeqCst~, ~Unordered~],
  isLittleEndian?: Boolean,
): Number | BigInt {
  call %0 = clo<IsDetachedBuffer>(arrayBuffer)
  assert (= %0 false)
  assert (yet "There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.")
  let block = arrayBuffer.ArrayBufferData
  (yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.")
  call %1 = clo<IsSharedArrayBuffer>(arrayBuffer)
  if (= %1 true) {
    (yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.")
    (yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().")
    %2 = (= isTypedArray true)
    if %2 {
      call %3 = clo<IsNoTearConfiguration>(type, order)
      %2 = (= %3 true)
    } else {}
    if %2 {
      let noTear = true
    } else {
      let noTear = false
    }
    (yet "Let _rawValue_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.")
    nop
    let readEvent = (new ReadSharedMemory("Order" -> order, "NoTear" -> noTear, "Block" -> block, "ByteIndex" -> byteIndex, "ElementSize" -> elementSize))[#1145]
    push eventList < readEvent
    push execution.ChosenValues < (new ChosenValueRecord("Event" -> readEvent, "ChosenValue" -> rawValue))[#1146]
  } else {
    (yet "let _rawValue_ be a List whose elements are bytes from _block_ at indices _byteIndex_ (inclusive) through _byteIndex_ + _elementSize_ (exclusive).")
  }
  assert (= rawValue.length elementSize)
  if (= isLittleEndian absent) {
    (yet "set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.")
  } else {}
  call %4 = clo<RawBytesToNumeric>(type, rawValue, isLittleEndian)
  return %4
}