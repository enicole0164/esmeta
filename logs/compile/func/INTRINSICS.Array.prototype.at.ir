def <BUILTIN>:INTRINSICS.Array.prototype.at(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let index = (pop < argumentsList) else let index = absent
  call %0 = clo<ToObject>(this)
  let O = [? %0]
  call %1 = clo<LengthOfArrayLike>(O)
  let len = [? %1]
  call %2 = clo<ToIntegerOrInfinity>(index)
  let relativeIndex = [? %2]
  if (! (< relativeIndex 0)) {
    let k = relativeIndex
  } else {
    let k = (+ len relativeIndex)
  }
  if (|| (< k 0) (! (< k len))) {
    return undefined
  } else {}
  call %3 = clo<ToString>(([number] k))
  call %4 = clo<Get>(O, [! %3])
  return [? %4]
}