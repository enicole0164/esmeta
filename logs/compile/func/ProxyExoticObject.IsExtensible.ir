def <INTERNAL>:ProxyExoticObject.IsExtensible(
  O: ProxyExoticObject,
): Normal[Boolean] | Abrupt {
  let handler = O.ProxyHandler
  if (= handler null) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#487])
  } else {}
  assert (= (typeof handler) @Object)
  let target = O.ProxyTarget
  call %0 = clo<GetMethod>(handler, "isExtensible")
  let trap = [? %0]
  if (= trap undefined) {
    call %1 = clo<IsExtensible>(target)
    return [? %1]
  } else {}
  call %2 = clo<Call>(trap, handler, (new [target])[#488])
  call %3 = clo<ToBoolean>([? %2])
  let booleanTrapResult = %3
  call %4 = clo<IsExtensible>(target)
  let targetResult = [? %4]
  call %5 = clo<SameValue>(booleanTrapResult, targetResult)
  if (= %5 false) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#489])
  } else {}
  return booleanTrapResult
}