def <BUILTIN>:INTRINSICS.AggregateError(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let errors = (pop < argumentsList) else let errors = absent
  if (< 0 argumentsList.length) let message = (pop < argumentsList) else let message = absent
  if (< 0 argumentsList.length) let options = (pop < argumentsList) else let options = absent
  if (= NewTarget undefined) {
    let newTarget = @EXECUTION_STACK[0].Function
  } else {
    let newTarget = NewTarget
  }
  call %0 = clo<OrdinaryCreateFromConstructor>(newTarget, "%AggregateError.prototype%", (new ["ErrorData"])[#922])
  let O = [? %0]
  if (! (= message undefined)) {
    call %1 = clo<ToString>(message)
    let msg = [? %1]
    call %2 = clo<CreateNonEnumerableDataPropertyOrThrow>(O, "message", msg)
  } else {}
  call %3 = clo<InstallErrorCause>(O, options)
  [? %3]
  call %4 = clo<IterableToList>(errors)
  let errorsList = [? %4]
  call %5 = clo<CreateArrayFromList>(errorsList)
  call %6 = clo<DefinePropertyOrThrow>(O, "errors", (new PropertyDescriptor("Configurable" -> true, "Enumerable" -> false, "Writable" -> true, "Value" -> %5))[#923])
  [! %6]
  return O
}