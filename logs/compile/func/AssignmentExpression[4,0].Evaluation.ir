def <SYNTAX>:AssignmentExpression[4,0].Evaluation(
  this: Ast:AssignmentExpression[4,0],
): Unknown {
  if (! (|| (? this[0]: "ObjectLiteral") (? this[0]: "ArrayLiteral"))) {
    sdo-call %0 = this[0]->Evaluation()
    let lref = %0
    [? lref]
    call %1 = clo<IsAnonymousFunctionDefinition>(this[1])
    sdo-call %2 = this[0]->IsIdentifierRef()
    if (&& (= %1 true) (= %2 true)) {
      sdo-call %3 = this[1]->NamedEvaluation(lref.ReferencedName)
      let rval = [? %3]
    } else {
      sdo-call %4 = this[1]->Evaluation()
      let rref = %4
      call %5 = clo<GetValue>(rref)
      let rval = [? %5]
    }
    call %6 = clo<PutValue>(lref, rval)
    [? %6]
    return rval
  } else {}
  let assignmentPattern = (parse this[0] (nt |AssignmentPattern|[]))
  sdo-call %7 = this[1]->Evaluation()
  let rref = %7
  call %8 = clo<GetValue>(rref)
  let rval = [? %8]
  sdo-call %9 = assignmentPattern->DestructuringAssignmentEvaluation(rval)
  [? %9]
  return rval
}