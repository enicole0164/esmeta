def CopyDataProperties(
  target: Object,
  source: ESValue,
  excludedItems: List[Symbol | String],
): Normal[Const[~unused~]] | Abrupt {
  if (|| (= source undefined) (= source null)) {
    return ~unused~
  } else {}
  call %0 = clo<ToObject>(source)
  let from = [! %0]
  method-call %1 = from->OwnPropertyKeys()
  let keys = [? %1]
  %3 = keys
  %2 = 0
  loop[foreach] (< %2 %3.length) {
    let nextKey = %3[%2]
    let excluded = false
    %5 = excludedItems
    %4 = 0
    loop[foreach] (< %4 %5.length) {
      let e = %5[%4]
      call %6 = clo<SameValue>(e, nextKey)
      if (= %6 true) {
        excluded = true
      } else {}
      %4 = (+ %4 1)
    }
    if (= excluded false) {
      method-call %7 = from->GetOwnProperty(nextKey)
      let desc = [? %7]
      if (&& (! (= desc undefined)) (= desc.Enumerable true)) {
        call %8 = clo<Get>(from, nextKey)
        let propValue = [? %8]
        call %9 = clo<CreateDataPropertyOrThrow>(target, nextKey, propValue)
        [! %9]
      } else {}
    } else {}
    %2 = (+ %2 1)
  }
  return ~unused~
}