def <BUILTIN>:INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let value = (pop < argumentsList) else let value = absent
  let generator = this
  call %0 = clo<NewPromiseCapability>(@EXECUTION_STACK[0].Realm.Intrinsics["%Promise%"])
  let promiseCapability = [! %0]
  call %1 = clo<AsyncGeneratorValidate>(generator, ~empty~)
  call %2 = clo<Completion>(%1)
  let result = %2
  if (&& (comp? result) (! (= result.Type ~normal~))) {
    call %3 = clo<Call>(promiseCapability.Reject, undefined, (new [result.Value])[#1325])
    [? %3]
    return promiseCapability.Promise
  } else {
    if (? result: "CompletionRecord") {
      result = result.Value
    } else {}
  }
  let completion = comp[~return~/~empty~](value)
  call %4 = clo<AsyncGeneratorEnqueue>(generator, completion, promiseCapability)
  let state = generator.AsyncGeneratorState
  if (|| (= state ~suspendedStart~) (= state ~completed~)) {
    generator.AsyncGeneratorState = ~awaiting-return~
    call %5 = clo<AsyncGeneratorAwaitReturn>(generator)
    [? %5]
  } else {
    if (= state ~suspendedYield~) {
      call %6 = clo<AsyncGeneratorResume>(generator, completion)
    } else {
      assert (|| (= state ~executing~) (= state ~awaiting-return~))
    }
  }
  return promiseCapability.Promise
}