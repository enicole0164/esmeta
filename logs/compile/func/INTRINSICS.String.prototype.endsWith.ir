def <BUILTIN>:INTRINSICS.String.prototype.endsWith(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let searchString = (pop < argumentsList) else let searchString = absent
  if (< 0 argumentsList.length) let endPosition = (pop < argumentsList) else let endPosition = absent
  call %0 = clo<RequireObjectCoercible>(this)
  let O = [? %0]
  call %1 = clo<ToString>(O)
  let S = [? %1]
  call %2 = clo<IsRegExp>(searchString)
  let isRegExp = [? %2]
  if (= isRegExp true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#947])
  } else {}
  call %3 = clo<ToString>(searchString)
  let searchStr = [? %3]
  let len = S.length
  if (= endPosition undefined) {
    let pos = len
  } else {
    call %4 = clo<ToIntegerOrInfinity>(endPosition)
    let pos = [? %4]
  }
  let end = (clamp pos 0 len)
  let searchLength = searchStr.length
  if (== searchLength 0) {
    return true
  } else {}
  let start = (- end searchLength)
  if (< start 0) {
    return false
  } else {}
  let substring = (substring S start end)
  call %5 = clo<SameValueNonNumeric>(substring, searchStr)
  return %5
}