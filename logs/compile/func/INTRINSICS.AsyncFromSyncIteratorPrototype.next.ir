def <BUILTIN>:INTRINSICS.AsyncFromSyncIteratorPrototype.next(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let value = (pop < argumentsList) else let value = absent
  let O = this
  assert (&& (? O: "Object") (! (= O.SyncIteratorRecord absent)))
  call %0 = clo<NewPromiseCapability>(@EXECUTION_STACK[0].Realm.Intrinsics["%Promise%"])
  let promiseCapability = [! %0]
  let syncIteratorRecord = O.SyncIteratorRecord
  if (! (= value absent)) {
    call %1 = clo<IteratorNext>(syncIteratorRecord, value)
    call %2 = clo<Completion>(%1)
    let result = %2
  } else {
    call %3 = clo<IteratorNext>(syncIteratorRecord)
    call %4 = clo<Completion>(%3)
    let result = %4
  }
  if (&& (comp? result) (! (= result.Type ~normal~))) {
    call %5 = clo<Call>(promiseCapability.Reject, undefined, (new [result.Value])[#1216])
    [? %5]
    return promiseCapability.Promise
  } else {
    if (? result: "CompletionRecord") {
      result = result.Value
    } else {}
  }
  call %6 = clo<AsyncFromSyncIteratorContinuation>(result, promiseCapability)
  return %6
}