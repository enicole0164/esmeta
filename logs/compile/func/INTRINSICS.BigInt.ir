def <BUILTIN>:INTRINSICS.BigInt(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let value = (pop < argumentsList) else let value = absent
  if (! (= NewTarget undefined)) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#931])
  } else {}
  call %0 = clo<ToPrimitive>(value, ~number~)
  let prim = [? %0]
  if (= (typeof prim) @Number) {
    call %1 = clo<NumberToBigInt>(prim)
    return [? %1]
  } else {
    call %2 = clo<ToBigInt>(value)
    return [? %2]
  }
}