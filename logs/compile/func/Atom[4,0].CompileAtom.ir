def <SYNTAX>:Atom[4,0].CompileAtom(
  this: Ast:Atom[4,0],
  direction: Const[~backward~, ~forward~],
): Unknown["Matcher"] {
  sdo-call %0 = this[1]->CompileSubpattern(direction)
  let m = %0
  (yet "Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of this |Atom|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing this |Atom|.")
  (yet "Return a new Matcher with parameters (_x_, _c_) that captures _direction_, _m_, and _parenIndex_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures _x_, _c_, _direction_, and _parenIndex_ and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Let _cap_ be a copy of _y_'s _captures_ List.\n    1. Let _xe_ be _x_'s _endIndex_.\n    1. Let _ye_ be _y_'s _endIndex_.\n    1. If _direction_ is ~forward~, then\n      1. Assert: _xe_ ≤ _ye_.\n      1. Let _r_ be the Range (_xe_, _ye_).\n    1. Else,\n      1. Assert: _direction_ is ~backward~.\n      1. Assert: _ye_ ≤ _xe_.\n      1. Let _r_ be the Range (_ye_, _xe_).\n    1. Set _cap_[_parenIndex_ + 1] to _r_.\n    1. Let _z_ be the State (_ye_, _cap_).\n    1. Return _c_(_z_).\n  1. Return _m_(_x_, _d_).")
}