def <SYNTAX>:MethodDefinition[5,0].MethodDefinitionEvaluation(
  this: Ast:MethodDefinition[5,0],
  object: Unknown,
  enumerable: Unknown,
): Normal[PrivateElement | Const[~unused~]] | Abrupt {
  sdo-call %0 = this[0]->Evaluation()
  let propKey = %0
  [? propKey]
  let env = @EXECUTION_STACK[0].LexicalEnvironment
  let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment
  let sourceText = (source-text this)
  call %1 = clo<OrdinaryFunctionCreate>(@EXECUTION_STACK[0].Realm.Intrinsics["%Function.prototype%"], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)
  let closure = %1
  call %2 = clo<MakeMethod>(closure, object)
  call %3 = clo<SetFunctionName>(closure, propKey, "set")
  if (? propKey: "PrivateName") {
    return (new PrivateElement("Key" -> propKey, "Kind" -> ~accessor~, "Get" -> undefined, "Set" -> closure))[#654]
  } else {
    let desc = (new PropertyDescriptor("Set" -> closure, "Enumerable" -> enumerable, "Configurable" -> true))[#655]
    call %4 = clo<DefinePropertyOrThrow>(object, propKey, desc)
    [? %4]
    return ~unused~
  }
}