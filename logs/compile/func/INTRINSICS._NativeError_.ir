def <BUILTIN>:INTRINSICS._NativeError_(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let message = (pop < argumentsList) else let message = absent
  if (< 0 argumentsList.length) let options = (pop < argumentsList) else let options = absent
  if (= NewTarget undefined) {
    let newTarget = @EXECUTION_STACK[0].Function
  } else {
    let newTarget = NewTarget
  }
  (yet "Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, <code>\"%<var>NativeError</var>.prototype%\"</code>, « [[ErrorData]] »).")
  if (! (= message undefined)) {
    call %0 = clo<ToString>(message)
    let msg = [? %0]
    call %1 = clo<CreateNonEnumerableDataPropertyOrThrow>(O, "message", msg)
  } else {}
  call %2 = clo<InstallErrorCause>(O, options)
  [? %2]
  return O
}