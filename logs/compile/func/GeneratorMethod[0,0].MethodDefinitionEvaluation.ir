def <SYNTAX>:GeneratorMethod[0,0].MethodDefinitionEvaluation(
  this: Ast:GeneratorMethod[0,0],
  object: Unknown,
  enumerable: Unknown,
): Normal[PrivateElement | Const[~unused~]] | Abrupt {
  sdo-call %0 = this[0]->Evaluation()
  let propKey = %0
  [? propKey]
  let env = @EXECUTION_STACK[0].LexicalEnvironment
  let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment
  let sourceText = (source-text this)
  call %1 = clo<OrdinaryFunctionCreate>(@EXECUTION_STACK[0].Realm.Intrinsics["%GeneratorFunction.prototype%"], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)
  let closure = %1
  call %2 = clo<MakeMethod>(closure, object)
  call %3 = clo<SetFunctionName>(closure, propKey)
  call %4 = clo<OrdinaryObjectCreate>(@EXECUTION_STACK[0].Realm.Intrinsics["%GeneratorFunction.prototype.prototype%"])
  let prototype = %4
  call %5 = clo<DefinePropertyOrThrow>(closure, "prototype", (new PropertyDescriptor("Value" -> prototype, "Writable" -> true, "Enumerable" -> false, "Configurable" -> false))[#656])
  [! %5]
  call %6 = clo<DefineMethodProperty>(object, propKey, closure, enumerable)
  return %6
}