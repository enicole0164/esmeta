def <BUILTIN>:INTRINSICS.Array.prototype.map(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let callbackfn = (pop < argumentsList) else let callbackfn = absent
  if (< 0 argumentsList.length) let thisArg = (pop < argumentsList) else let thisArg = absent
  call %0 = clo<ToObject>(this)
  let O = [? %0]
  call %1 = clo<LengthOfArrayLike>(O)
  let len = [? %1]
  call %2 = clo<IsCallable>(callbackfn)
  if (= %2 false) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1032])
  } else {}
  call %3 = clo<ArraySpeciesCreate>(O, len)
  let A = [? %3]
  let k = 0
  loop[repeat] (< k len) {
    call %4 = clo<ToString>(([number] k))
    let Pk = [! %4]
    call %5 = clo<HasProperty>(O, Pk)
    let kPresent = [? %5]
    if (= kPresent true) {
      call %6 = clo<Get>(O, Pk)
      let kValue = [? %6]
      call %7 = clo<Call>(callbackfn, thisArg, (new [kValue, ([number] k), O])[#1033])
      let mappedValue = [? %7]
      call %8 = clo<CreateDataPropertyOrThrow>(A, Pk, mappedValue)
      [? %8]
    } else {}
    k = (+ k 1)
  }
  return A
}