def <SYNTAX>:AsyncFunctionExpression[0,0].InstantiateAsyncFunctionExpression(
  this: Ast:AsyncFunctionExpression[0,0],
  name?: Unknown,
): FunctionObject {
  if (= name absent) {
    name = ""
  } else {}
  let env = @EXECUTION_STACK[0].LexicalEnvironment
  let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment
  let sourceText = (source-text this)
  call %0 = clo<OrdinaryFunctionCreate>(@EXECUTION_STACK[0].Realm.Intrinsics["%AsyncFunction.prototype%"], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)
  let closure = %0
  call %1 = clo<SetFunctionName>(closure, name)
  return closure
}