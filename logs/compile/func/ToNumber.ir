def ToNumber(
  argument: ESValue,
): Normal[ESValue] | Abrupt {
  if (= (typeof argument) @Undefined) {
    return NaN
  } else {
    if (= (typeof argument) @Null) {
      return 0.0f
    } else {
      if (= (typeof argument) @Boolean) {
        if (= argument true) {
          return 1.0f
        } else {
          return 0.0f
        }
      } else {
        if (= (typeof argument) @Number) {
          return argument
        } else {
          if (= (typeof argument) @String) {
            call %0 = clo<StringToNumber>(argument)
            return [! %0]
          } else {
            if (= (typeof argument) @Symbol) {
              return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#5])
            } else {
              if (= (typeof argument) @BigInt) {
                return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#6])
              } else {
                assert (= (typeof argument) @Object)
                call %1 = clo<ToPrimitive>(argument, ~number~)
                let primValue = [? %1]
                call %2 = clo<ToNumber>(primValue)
                return [? %2]
              }
            }
          }
        }
      }
    }
  }
}