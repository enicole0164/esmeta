def <BUILTIN>:INTRINSICS.ArrayBuffer.prototype.slice(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let start = (pop < argumentsList) else let start = absent
  if (< 0 argumentsList.length) let end = (pop < argumentsList) else let end = absent
  let O = this
  call %0 = clo<RequireInternalSlot>(O, "ArrayBufferData")
  [? %0]
  call %1 = clo<IsSharedArrayBuffer>(O)
  if (= %1 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1152])
  } else {}
  call %2 = clo<IsDetachedBuffer>(O)
  if (= %2 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1153])
  } else {}
  let len = O.ArrayBufferByteLength
  call %3 = clo<ToIntegerOrInfinity>(start)
  let relativeStart = [? %3]
  if (= relativeStart -INF) {
    let first = 0
  } else {
    if (< relativeStart 0) {
      let first = (max (+ len relativeStart) 0)
    } else {
      let first = (min relativeStart len)
    }
  }
  if (= end undefined) {
    let relativeEnd = len
  } else {
    call %4 = clo<ToIntegerOrInfinity>(end)
    let relativeEnd = [? %4]
  }
  if (= relativeEnd -INF) {
    let final = 0
  } else {
    if (< relativeEnd 0) {
      let final = (max (+ len relativeEnd) 0)
    } else {
      let final = (min relativeEnd len)
    }
  }
  let newLen = (max (- final first) 0)
  call %5 = clo<SpeciesConstructor>(O, @EXECUTION_STACK[0].Realm.Intrinsics["%ArrayBuffer%"])
  let ctor = [? %5]
  call %6 = clo<Construct>(ctor, (new [([number] newLen)])[#1154])
  let new = [? %6]
  call %7 = clo<RequireInternalSlot>(new, "ArrayBufferData")
  [? %7]
  call %8 = clo<IsSharedArrayBuffer>(new)
  if (= %8 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1155])
  } else {}
  call %9 = clo<IsDetachedBuffer>(new)
  if (= %9 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1156])
  } else {}
  call %10 = clo<SameValue>(new, O)
  if (= %10 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1157])
  } else {}
  if (< new.ArrayBufferByteLength newLen) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1158])
  } else {}
  nop
  call %11 = clo<IsDetachedBuffer>(O)
  if (= %11 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1159])
  } else {}
  let fromBuf = O.ArrayBufferData
  let toBuf = new.ArrayBufferData
  call %12 = clo<CopyDataBlockBytes>(toBuf, 0, fromBuf, first, newLen)
  return new
}