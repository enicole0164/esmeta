def <SYNTAX>:MethodDefinition[0,0].DefineMethod(
  this: Ast:MethodDefinition[0,0],
  object: Unknown,
  functionPrototype?: Unknown,
): Unknown["EitherANormalCompletionContainingARecordWithFields[[Key]](aPropertyKey)And[[Closure]](aFunctionObject)OrAnAbruptCompletion"] {
  sdo-call %0 = this[0]->Evaluation()
  let propKey = %0
  [? propKey]
  let env = @EXECUTION_STACK[0].LexicalEnvironment
  let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment
  if (! (= functionPrototype absent)) {
    let prototype = functionPrototype
  } else {
    let prototype = @EXECUTION_STACK[0].Realm.Intrinsics["%Function.prototype%"]
  }
  let sourceText = (source-text this)
  call %1 = clo<OrdinaryFunctionCreate>(prototype, sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)
  let closure = %1
  call %2 = clo<MakeMethod>(closure, object)
  return (new Record("Key" -> propKey, "Closure" -> closure))[#651]
}