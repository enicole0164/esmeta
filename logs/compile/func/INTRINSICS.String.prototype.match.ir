def <BUILTIN>:INTRINSICS.String.prototype.match(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let regexp = (pop < argumentsList) else let regexp = absent
  call %0 = clo<RequireObjectCoercible>(this)
  let O = [? %0]
  if (! (|| (= regexp undefined) (= regexp null))) {
    call %1 = clo<GetMethod>(regexp, @SYMBOL.match)
    let matcher = [? %1]
    if (! (= matcher undefined)) {
      call %2 = clo<Call>(matcher, regexp, (new [O])[#949])
      return [? %2]
    } else {}
  } else {}
  call %3 = clo<ToString>(O)
  let S = [? %3]
  call %4 = clo<RegExpCreate>(regexp, undefined)
  let rx = [? %4]
  call %5 = clo<Invoke>(rx, @SYMBOL.match, (new [S])[#950])
  return [? %5]
}