def <BUILTIN>:INTRINSICS.RegExp(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let pattern = (pop < argumentsList) else let pattern = absent
  if (< 0 argumentsList.length) let flags = (pop < argumentsList) else let flags = absent
  call %0 = clo<IsRegExp>(pattern)
  let patternIsRegExp = [? %0]
  if (= NewTarget undefined) {
    let newTarget = @EXECUTION_STACK[0].Function
    if (&& (= patternIsRegExp true) (= flags undefined)) {
      call %1 = clo<Get>(pattern, "constructor")
      let patternConstructor = [? %1]
      call %2 = clo<SameValue>(newTarget, patternConstructor)
      if (= %2 true) {
        return pattern
      } else {}
    } else {}
  } else {
    let newTarget = NewTarget
  }
  if (&& (= (typeof pattern) @Object) (! (= pattern.RegExpMatcher absent))) {
    let P = pattern.OriginalSource
    if (= flags undefined) {
      let F = pattern.OriginalFlags
    } else {
      let F = flags
    }
  } else {
    if (= patternIsRegExp true) {
      call %3 = clo<Get>(pattern, "source")
      let P = [? %3]
      if (= flags undefined) {
        call %4 = clo<Get>(pattern, "flags")
        let F = [? %4]
      } else {
        let F = flags
      }
    } else {
      let P = pattern
      let F = flags
    }
  }
  call %5 = clo<RegExpAlloc>(newTarget)
  let O = [? %5]
  call %6 = clo<RegExpInitialize>(O, P, F)
  return [? %6]
}