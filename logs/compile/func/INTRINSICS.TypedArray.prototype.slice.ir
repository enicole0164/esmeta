def <BUILTIN>:INTRINSICS.TypedArray.prototype.slice(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let start = (pop < argumentsList) else let start = absent
  if (< 0 argumentsList.length) let end = (pop < argumentsList) else let end = absent
  let O = this
  call %0 = clo<ValidateTypedArray>(O)
  [? %0]
  let len = O.ArrayLength
  call %1 = clo<ToIntegerOrInfinity>(start)
  let relativeStart = [? %1]
  if (= relativeStart -INF) {
    let k = 0
  } else {
    if (< relativeStart 0) {
      let k = (max (+ len relativeStart) 0)
    } else {
      let k = (min relativeStart len)
    }
  }
  if (= end undefined) {
    let relativeEnd = len
  } else {
    call %2 = clo<ToIntegerOrInfinity>(end)
    let relativeEnd = [? %2]
  }
  if (= relativeEnd -INF) {
    let final = 0
  } else {
    if (< relativeEnd 0) {
      let final = (max (+ len relativeEnd) 0)
    } else {
      let final = (min relativeEnd len)
    }
  }
  let count = (max (- final k) 0)
  call %3 = clo<TypedArraySpeciesCreate>(O, (new [([number] count)])[#1094])
  let A = [? %3]
  if (< 0 count) {
    call %4 = clo<IsDetachedBuffer>(O.ViewedArrayBuffer)
    if (= %4 true) {
      return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1095])
    } else {}
    call %5 = clo<TypedArrayElementType>(O)
    let srcType = %5
    call %6 = clo<TypedArrayElementType>(A)
    let targetType = %6
    if (! (= srcType targetType)) {
      let n = 0
      loop[repeat] (< k final) {
        call %7 = clo<ToString>(([number] k))
        let Pk = [! %7]
        call %8 = clo<Get>(O, Pk)
        let kValue = [! %8]
        call %9 = clo<ToString>(([number] n))
        call %10 = clo<Set>(A, [! %9], kValue, true)
        [! %10]
        k = (+ k 1)
        n = (+ n 1)
      }
    } else {
      let srcBuffer = O.ViewedArrayBuffer
      let targetBuffer = A.ViewedArrayBuffer
      call %11 = clo<TypedArrayElementSize>(O)
      let elementSize = %11
      nop
      let srcByteOffset = O.ByteOffset
      let targetByteIndex = A.ByteOffset
      let srcByteIndex = (+ (* k elementSize) srcByteOffset)
      let limit = (+ targetByteIndex (* count elementSize))
      loop[repeat] (< targetByteIndex limit) {
        call %12 = clo<GetValueFromBuffer>(srcBuffer, srcByteIndex, ~Uint8~, true, ~Unordered~)
        let value = %12
        call %13 = clo<SetValueInBuffer>(targetBuffer, targetByteIndex, ~Uint8~, value, true, ~Unordered~)
        srcByteIndex = (+ srcByteIndex 1)
        targetByteIndex = (+ targetByteIndex 1)
      }
    }
  } else {}
  return A
}