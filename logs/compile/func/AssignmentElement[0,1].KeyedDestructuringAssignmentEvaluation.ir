def <SYNTAX>:AssignmentElement[0,1].KeyedDestructuringAssignmentEvaluation(
  this: Ast:AssignmentElement[0,1],
  value: Unknown,
  propertyName: Unknown,
): Normal[Const[~unused~]] | Abrupt {
  if (! (|| (? this[0]: "ObjectLiteral") (? this[0]: "ArrayLiteral"))) {
    sdo-call %0 = this[0]->Evaluation()
    let lref = %0
    [? lref]
  } else {}
  call %1 = clo<GetV>(value, propertyName)
  let v = [? %1]
  if (&& (! (= this[1] absent)) (= v undefined)) {
    call %2 = clo<IsAnonymousFunctionDefinition>(this[1])
    sdo-call %3 = this[0]->IsIdentifierRef()
    if (&& (= %2 true) (= %3 true)) {
      sdo-call %4 = this[1]->NamedEvaluation(lref.ReferencedName)
      let rhsValue = [? %4]
    } else {
      sdo-call %5 = this[1]->Evaluation()
      let defaultValue = %5
      call %6 = clo<GetValue>(defaultValue)
      let rhsValue = [? %6]
    }
  } else {
    let rhsValue = v
  }
  if (|| (? this[0]: "ObjectLiteral") (? this[0]: "ArrayLiteral")) {
    let assignmentPattern = (parse this[0] (nt |AssignmentPattern|[]))
    sdo-call %7 = assignmentPattern->DestructuringAssignmentEvaluation(rhsValue)
    return [? %7]
  } else {}
  call %8 = clo<PutValue>(lref, rhsValue)
  return [? %8]
}