def <BUILTIN>:INTRINSICS.Array.prototype.sort(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let comparefn = (pop < argumentsList) else let comparefn = absent
  %0 = (! (= comparefn undefined))
  if %0 {
    call %1 = clo<IsCallable>(comparefn)
    %0 = (= %1 false)
  } else {}
  if %0 {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1046])
  } else {}
  call %2 = clo<ToObject>(this)
  let obj = [? %2]
  call %3 = clo<LengthOfArrayLike>(obj)
  let len = [? %3]
  let SortCompare = clo<INTRINSICS.Array.prototype.sort:clo0, [comparefn]>
  call %4 = clo<SortIndexedProperties>(obj, len, SortCompare)
  return [? %4]
}