def <BUILTIN>:INTRINSICS.Atomics.load(
  this: ESValue,
  argumentsList: List[ESValue],
  NewTarget: Object | Undefined,
): Unknown {
  if (< 0 argumentsList.length) let typedArray = (pop < argumentsList) else let typedArray = absent
  if (< 0 argumentsList.length) let index = (pop < argumentsList) else let index = absent
  call %0 = clo<ValidateIntegerTypedArray>(typedArray)
  let buffer = [? %0]
  call %1 = clo<ValidateAtomicAccess>(typedArray, index)
  let indexedPosition = [? %1]
  call %2 = clo<IsDetachedBuffer>(buffer)
  if (= %2 true) {
    return comp[~throw~/~empty~]((new OrdinaryObject("Prototype" -> @EXECUTION_STACK[0].Realm.Intrinsics["%TypeError.prototype%"], "ErrorData" -> undefined))[#1189])
  } else {}
  nop
  call %3 = clo<TypedArrayElementType>(typedArray)
  let elementType = %3
  call %4 = clo<GetValueFromBuffer>(buffer, indexedPosition, elementType, true, ~SeqCst~)
  return %4
}