(yet "0 ‚â§ _cp_ ‚â§ 0x10FFFF.") @ UTF16EncodeCodePoint
(yet "0 ‚â§ _integer_ ‚â§ 2<sup>53</sup> - 1.") @ ToIndex
(yet "A `default` export was not explicitly defined by this module.") @ SourceTextModuleRecord.ResolveExport
(yet "A unique such |GroupSpecifier| is found.") @ AtomEscape[3,0].CompileAtom
(yet "Add _W_ to the end of the list of waiters in _WL_.") @ AddWaiter
(yet "Add _name_ as an element of the list _mappedNames_.") @ CreateMappedArgumentsObject
(yet "All elements of _sortedExecList_ have their [[AsyncEvaluation]] field set to *true*, [[PendingAsyncDependencies]] field set to 0, and [[EvaluationError]] field set to ~empty~.") @ AsyncModuleExecutionFulfilled
(yet "All named exports from _module_ are resolvable.") @ SourceTextModuleRecord.InitializeEnvironment
(yet "Append _key_ as an element of _targetConfigurableKeys_.") @ ProxyExoticObject.OwnPropertyKeys
(yet "Append _key_ as an element of _targetNonconfigurableKeys_.") @ ProxyExoticObject.OwnPropertyKeys
(yet "Append _nextValue_ to the end of the List _values_.") @ IterableToList
(yet "Append in List order the elements of _captures_ to the end of the List _replacerArgs_.") @ INTRINSICS.RegExp.prototype[@@replace]
(yet "Append the Record { [[Key]]: _stringKey_, [[Symbol]]: _newSymbol_ } to the GlobalSymbolRegistry List.") @ INTRINSICS.Symbol.for
(yet "Append the code unit elements of _nextSeg_ to the end of _stringElements_.") @ INTRINSICS.String.raw
(yet "Append the code unit elements of _nextSub_ to the end of _stringElements_.") @ INTRINSICS.String.raw
(yet "Append to _moduleNames_ each element of _additionalNames_ that is not already an element of _moduleNames_.") @ ModuleItemList[1,0].ModuleRequests
(yet "Append ùîΩ(_position_) and _S_ to _replacerArgs_.") @ INTRINSICS.RegExp.prototype[@@replace]
(yet "Attempt to parse _sourceText_ using _goalSymbol_ as the goal symbol, and analyse the parse result for any early error conditions. Parsing and early error detection may be interleaved in an implementation-defined manner.") @ ParseText
(yet "Both Type(_x_) and Type(_y_) are Number or both are BigInt.") @ INTRINSICS.TypedArray.prototype.sort:clo0
(yet "Create an immutable indirect binding in _envRec_ for _N_ that references _M_ and _N2_ as its target binding and record that the binding is initialized.") @ ModuleEnvironmentRecord.CreateImportBinding
(yet "Create own properties of _M_ corresponding to the definitions in <emu-xref href=\"#sec-module-namespace-objects\"></emu-xref>.") @ ModuleNamespaceCreate
(yet "Else if _templateRemainder_ starts with *\"$&\"*, then\n  1. Let _ref_ be *\"$&\"*.\n  1. Let _refReplacement_ be _matched_.") @ GetSubstitution
(yet "Else if _templateRemainder_ starts with *\"$'\"* (0x0024 (DOLLAR SIGN) followed by 0x0027 (APOSTROPHE)), then\n  1. Let _ref_ be *\"$'\"*.\n  1. Let _matchLength_ be the length of _matched_.\n  1. Let _tailPos_ be _position_ + _matchLength_.\n  1. Let _refReplacement_ be the substring of _str_ from min(_tailPos_, _stringLength_).\n  1. NOTE: _tailPos_ can exceed _stringLength_ only if this abstract operation was invoked by a call to the intrinsic @@replace method of %RegExp.prototype% on an object whose *\"exec\"* property is not the intrinsic %RegExp.prototype.exec%.") @ GetSubstitution
(yet "Else if _templateRemainder_ starts with *\"$<\"*, then\n  1. Let _gtPos_ be StringIndexOf(_templateRemainder_, *\">\"*, 0).\n  1. If _gtPos_ = -1 or _namedCaptures_ is *undefined*, then\n    1. Let _ref_ be *\"$<\"*.\n    1. Let _refReplacement_ be _ref_.\n  1. Else,\n    1. Let _ref_ be the substring of _templateRemainder_ from 0 to _gtPos_ + 1.\n    1. Let _groupName_ be the substring of _templateRemainder_ from 2 to _gtPos_.\n    1. Assert: Type(_namedCaptures_) is Object.\n    1. Let _capture_ be ? Get(_namedCaptures_, _groupName_).\n    1. If _capture_ is *undefined*, then\n      1. Let _refReplacement_ be *\"\"*.\n    1. Else,\n      1. Let _refReplacement_ be ? ToString(_capture_).") @ GetSubstitution
(yet "Else if _templateRemainder_ starts with *\"$\"* followed by 1 or more decimal digits, then\n  1. Let _found_ be *false*.\n  1. For each integer _d_ of ¬´ 2, 1 ¬ª, do\n    1. If _found_ is *false* and _templateRemainder_ starts with *\"$\"* followed by _d_ or more decimal digits, then\n      1. Set _found_ to *true*.\n      1. Let _ref_ be the substring of _templateRemainder_ from 0 to 1 + _d_.\n      1. Let _digits_ be the substring of _templateRemainder_ from 1 to 1 + _d_.\n      1. Let _index_ be ‚Ñù(StringToNumber(_digits_)).\n      1. Assert: 0 ‚â§ _index_ ‚â§ 99..\n      1. If _index_ = 0, then\n        1. Let _refReplacement_ be _ref_.\n      1. Else if _index_ ‚â§ the number of elements in _captures_, then\n        1. Let _capture_ be _captures_[_index_ - 1].\n        1. If _capture_ is *undefined*, then\n          1. Let _refReplacement_ be *\"\"*.\n        1. Else,\n          1. Let _refReplacement_ be _capture_.\n      1. Else,\n        1. Let _refReplacement_ be _ref_.") @ GetSubstitution
(yet "Else if _templateRemainder_ starts with *\"$`\"*, then\n  1. Let _ref_ be *\"$`\"*.\n  1. Let _refReplacement_ be the substring of _str_ from 0 to _position_.") @ GetSubstitution
(yet "Else, return *-0*<sub>ùîΩ</sub>.") @ Number::multiply
(yet "Else,\n  1. Assert: _W_ is a ReadModifyWriteSharedMemory event..\n  1. Let _bytes_ be ValueOfReadEvent(_execution_, _W_).\n  1. Let _bytesModified_ be _W_.[[ModifyOp]](_bytes_, _W_.[[Payload]]).\n  1. Let _byte_ be _bytesModified_[_payloadIndex_].") @ ComposeWriteEventBytes
(yet "Else,\n  1. Let _S_ be the substring of _string_ from _start_ to _k_ + 1.") @ Decode
(yet "Else,\n  1. Let _cp_ be CodePointAt(_string_, _k_).\n  1. If _cp_.[[IsUnpairedSurrogate]] is *true*, throw a newly created *URIError* object.\n  1. Set _k_ to _k_ + _cp_.[[CodeUnitCount]].\n  1. Let _Octets_ be the List of octets resulting by applying the UTF-8 transformation to _cp_.[[CodePoint]].\n  1. For each _octet_ of _Octets_, do\n    1. Set _R_ to the string-concatenation of:\n      * _R_\n      * *\"%\"*\n      * the String representation of _octet_, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary") @ Encode
(yet "Else,\n  1. Let _groups_ be *undefined*.\n  1. Let _hasGroups_ be *false*.") @ RegExpBuiltinExec
(yet "Else,\n  1. Let _ref_ be the substring of _templateRemainder_ from 0 to 1.\n  1. Let _refReplacement_ be _ref_.") @ GetSubstitution
(yet "Else,\n  1. Perform ? SetTypedArrayFromArrayLike(_target_, _targetOffset_, _source_).") @ INTRINSICS.TypedArray.prototype.set
(yet "Else,\n  1. Return ~empty~.") @ DebuggerStatement[0,0].Evaluation
(yet "Evaluate has already been invoked on _moduleRecord_ and successfully completed.") @ FinishDynamicImport:clo0
(yet "Exactly one element of _names_ is a Private Name whose [[Description]] is _privateIdentifier_.") @ ClassElementName[1,0].Evaluation
(yet "Find a finite time value _t_ such that YearFromTime(_t_) is _ym_ and MonthFromTime(_t_) is _mn_ and DateFromTime(_t_) is *1*<sub>ùîΩ</sub>; but if this is not possible (because some argument is out of range), return *NaN*.") @ MakeDay
(yet "For each code point _C_ of StringToCodePoints(_value_), do\n  1. If _C_ is listed in the ‚ÄúCode Point‚Äù column of <emu-xref href=\"#table-json-single-character-escapes\"></emu-xref>, then\n    1. Set _product_ to the string-concatenation of _product_ and the escape sequence for _C_ as specified in the ‚ÄúEscape Sequence‚Äù column of the corresponding row.\n  1. Else if _C_ has a numeric value less than 0x0020 (SPACE), or if _C_ has the same numeric value as a <emu-xref href=\"#leading-surrogate\"></emu-xref> or <emu-xref href=\"#trailing-surrogate\"></emu-xref>, then\n    1. Let _unit_ be the code unit whose numeric value is that of _C_.\n    1. Set _product_ to the string-concatenation of _product_ and UnicodeEscape(_unit_).\n  1. Else,\n    1. Set _product_ to the string-concatenation of _product_ and UTF16EncodeCodePoint(_C_).") @ QuoteJSONString
(yet "For each code point _cp_ of _text_, do\n  1. Set _result_ to the string-concatenation of _result_ and UTF16EncodeCodePoint(_cp_).") @ CodePointsToString
(yet "For each element _e_ of the GlobalSymbolRegistry List (see <emu-xref href=\"#sec-symbol.for\"></emu-xref>), do\n  1. If SameValue(_e_.[[Symbol]], _sym_) is *true*, return _e_.[[Key]].") @ INTRINSICS.Symbol.keyFor
(yet "For each element _e_ of the GlobalSymbolRegistry List, do\n  1. If SameValue(_e_.[[Key]], _stringKey_) is *true*, return _e_.[[Symbol]].") @ INTRINSICS.Symbol.for
(yet "For each event _E_ of EventSet(_execution_), do\n  1. If _E_ is a ReadSharedMemory, WriteSharedMemory, or ReadModifyWriteSharedMemory event, add _E_ to _events_.") @ SharedDataBlockEventSet
(yet "For each event _E_ of EventSet(_execution_), do\n  1. If _E_ is not in SharedDataBlockEventSet(_execution_), add _E_ to _events_.") @ HostEventSet
(yet "For each event _E_ of _aer_.[[EventList]], do\n  1. Append _E_ to _events_.") @ EventSet
(yet "For each index _i_ of _db_, do\n  1. Append WriteSharedMemory { [[Order]]: ~Init~, [[NoTear]]: *true*, [[Block]]: _db_, [[ByteIndex]]: _i_, [[ElementSize]]: 1, [[Payload]]: _zero_ } to _eventList_.") @ CreateSharedByteDataBlock
(yet "For each integer _i_ such that _i_ ‚â• 1 and _i_ ‚â§ _n_, in ascending order, do\n  1. Let _captureI_ be _i_<sup>th</sup> element of _r_'s _captures_ List.\n  1. If _captureI_ is *undefined*, then\n    1. Let _capturedValue_ be *undefined*.\n    1. Append *undefined* to _indices_.\n  1. Else,\n    1. Let _captureStart_ be _captureI_'s _startIndex_.\n    1. Let _captureEnd_ be _captureI_'s _endIndex_.\n    1. If _fullUnicode_ is *true*, then\n      1. Set _captureStart_ to GetStringIndex(_S_, _captureStart_).\n      1. Set _captureEnd_ to GetStringIndex(_S_, _captureEnd_).\n    1. Let _capture_ be Match Record { [[StartIndex]]: _captureStart_, [[EndIndex]]: _captureEnd_ }.\n    1. Let _capturedValue_ be GetMatchString(_S_, _capture_).\n    1. Append _capture_ to _indices_.\n  1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(ùîΩ(_i_)), _capturedValue_).\n  1. If the _i_<sup>th</sup> capture of _R_ was defined with a |GroupName|, then\n    1. Let _s_ be the CapturingGroupName of the corresponding |RegExpIdentifierName|.\n    1. Perform ! CreateDataPropertyOrThrow(_groups_, _s_, _capturedValue_).\n    1. Append _s_ to _groupNames_.\n  1. Else,\n    1. Append *undefined* to _groupNames_.") @ RegExpBuiltinExec
(yet "For each integer _k_ such that _parenIndex_ < _k_ and _k_ ‚â§ _parenIndex_ + _parenCount_, set _cap_[_k_] to *undefined*.") @ RepeatMatcher
(yet "For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an array index, in ascending chronological order of property creation, do\n  1. Append _P_ to _keys_.") @ StringExoticObject.OwnPropertyKeys
(yet "For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an integer index, in ascending chronological order of property creation, do\n  1. Append _P_ to _keys_.") @ IntegerIndexedExoticObject.OwnPropertyKeys
(yet "For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do\n  1. Append _P_ to _keys_.") @ IntegerIndexedExoticObject.OwnPropertyKeys
(yet "For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do\n  1. Append _P_ to _keys_.") @ StringExoticObject.OwnPropertyKeys
(yet "For each own property key _P_ of _O_ such that _P_ is an array index and ! ToIntegerOrInfinity(_P_) ‚â• _len_, in ascending numeric index order, do\n  1. Append _P_ to _keys_.") @ StringExoticObject.OwnPropertyKeys
(yet "Function.prototype.toString") @ INTRINSICS.Function.prototype.toString
(yet "Function.prototype.toString") @ INTRINSICS.Function.prototype.toString
(yet "GlobalSymbolRegistry does not currently contain an entry for _stringKey_.") @ INTRINSICS.Symbol.for
(yet "GlobalSymbolRegistry does not currently contain an entry for _sym_.") @ INTRINSICS.Symbol.keyFor
(yet "If 0 ‚â§ _yi_ ‚â§ 99, let _yr_ be *1900*<sub>ùîΩ</sub> + ùîΩ(_yi_); otherwise, let _yr_ be _y_.") @ INTRINSICS.Date
(yet "If 0 ‚â§ _yi_ ‚â§ 99, let _yr_ be *1900*<sub>ùîΩ</sub> + ùîΩ(_yi_); otherwise, let _yr_ be _y_.") @ INTRINSICS.Date.UTC
(yet "If FlagText of _literal_ contains any code points other than `g`, `i`, `m`, `s`, `u`, or `y`, or if it contains the same code point more than once, return *false*.") @ IsValidRegularExpressionLiteral
(yet "If IsDataDescriptor(_existingProp_) is *true* and _existingProp_ has attribute values { [[Writable]]: *true*, [[Enumerable]]: *true* }, return *true*.") @ GlobalEnvironmentRecord.CanDeclareGlobalFunction
(yet "If UnicodeMatchPropertyValue(`General_Category`, _s_) is identical to a List of Unicode code points that is the name of a Unicode general category or general category alias listed in the ‚ÄúProperty value and aliases‚Äù column of <emu-xref href=\"#table-unicode-general-category-values\"></emu-xref>, then\n  1. Return the CharSet containing all Unicode code points whose character database definition includes the property ‚ÄúGeneral_Category‚Äù with value _s_.") @ UnicodePropertyValueExpression[1,0].CompileToCharSet
(yet "If _C_ is in _unescapedSet_, then\n  1. Set _k_ to _k_ + 1.\n  1. Set _R_ to the string-concatenation of _R_ and _C_.") @ Encode
(yet "If _C_ is not in _reservedSet_, then\n  1. Let _S_ be the String value containing only the code unit _C_.") @ Decode
(yet "If _F_ contains any code unit other than *\"d\"*, *\"g\"*, *\"i\"*, *\"m\"*, *\"s\"*, *\"u\"*, or *\"y\"* or if it contains the same code unit more than once, throw a *SyntaxError* exception.") @ RegExpInitialize
(yet "If _Octets_ does not contain a valid UTF-8 encoding of a Unicode code point, throw a *URIError* exception.") @ Decode
(yet "If _R_ contains any |GroupName|, then\n  1. Let _groups_ be OrdinaryObjectCreate(*null*).\n  1. Let _hasGroups_ be *true*.") @ RegExpBuiltinExec
(yet "If _S_ contains a code unit that is not a radix-_R_ digit, let _end_ be the index within _S_ of the first such code unit; otherwise, let _end_ be the length of _S_.") @ INTRINSICS.parseInt
(yet "If _S_ is not empty and the first code unit of _S_ is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from _S_.") @ INTRINSICS.parseInt
(yet "If _S_ is not empty and the first code unit of _S_ is the code unit 0x002D (HYPHEN-MINUS), set _sign_ to -1.") @ INTRINSICS.parseInt
(yet "If _WL_ has a Synchronize event, then\n  1. NOTE: A _WL_ whose critical section has been entered at least once has a Synchronize event set by LeaveCriticalSection.\n  1. Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.\n  1. Let _eventsRecord_ be the Agent Events Record in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().\n  1. Let _entererEventList_ be _eventsRecord_.[[EventList]].\n  1. Let _enterEvent_ be a new Synchronize event.\n  1. Append _enterEvent_ to _entererEventList_.\n  1. Let _leaveEvent_ be the Synchronize event in _WL_.\n  1. Append (_leaveEvent_, _enterEvent_) to _eventsRecord_.[[AgentSynchronizesWith]].") @ EnterCriticalSection
(yet "If _W_ is a WriteSharedMemory event, then\n  1. Let _byte_ be _W_.[[Payload]][_payloadIndex_].") @ ComposeWriteEventBytes
(yet "If _W_ was notified explicitly by another agent calling NotifyWaiter with arguments _WL_ and _W_, return *true*.") @ SuspendAgent
(yet "If _argumentList_ is a List of a single Number, then\n  1. If _newTypedArray_.[[ArrayLength]] < ‚Ñù(_argumentList_[0]), throw a newly created *TypeError* object.") @ TypedArrayCreate
(yet "If _c_ is in _WordCharacters_, return *true*.") @ IsWordChar
(yet "If _declarationNames_ does not include the element *\"\\*default\\*\"*, append *\"\\*default\\*\"* to _declarationNames_.") @ ExportDeclaration[4,0].BoundNames
(yet "If _declarationNames_ does not include the element *\"\\*default\\*\"*, append *\"\\*default\\*\"* to _declarationNames_.") @ ExportDeclaration[5,0].BoundNames
(yet "If _direct_ is *false*, then _strictCaller_ is also *false*.") @ PerformEval
(yet "If _exponent_ is an odd integral Number, return *-0*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.") @ Number::exponentiate
(yet "If _exponent_ is an odd integral Number, return *-0*<sub>ùîΩ</sub>. Otherwise, return *+0*<sub>ùîΩ</sub>.") @ Number::exponentiate
(yet "If _exponent_ is an odd integral Number, return *-‚àû*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.") @ Number::exponentiate
(yet "If _exponent_ is an odd integral Number, return *-‚àû*<sub>ùîΩ</sub>. Otherwise, return *+‚àû*<sub>ùîΩ</sub>.") @ Number::exponentiate
(yet "If _f_ is odd, return ùîΩ(_f_ + 1).") @ ToUint8Clamp
(yet "If _first_ is a <emu-xref href=\"#trailing-surrogate\"></emu-xref> or _position_ + 1 = _size_, then\n  1. Return Record { [[CodePoint]]: _cp_, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: *true* }.") @ CodePointAt
(yet "If _first_ is not a <emu-xref href=\"#leading-surrogate\"></emu-xref> or <emu-xref href=\"#trailing-surrogate\"></emu-xref>, then\n  1. Return Record { [[CodePoint]]: _cp_, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: *false* }.") @ CodePointAt
(yet "If _hour_ is not finite or _min_ is not finite or _sec_ is not finite or _ms_ is not finite, return *NaN*.") @ MakeTime
(yet "If _mapperFunction_ is present, then IsCallable(_mapperFunction_) is *true*, _thisArg_ is present, and _depth_ is 1.") @ FlattenIntoArray
(yet "If _new_.[[ArrayBufferData]] and _O_.[[ArrayBufferData]] are the same Shared Data Block values, throw a *TypeError* exception.") @ INTRINSICS.SharedArrayBuffer.prototype.slice
(yet "If _parseResult_ is a Parse Node and _parseResult_ contains a |GroupName|, then\n  1. Set _parseResult_ to ParseText(_patternText_, |Pattern[~UnicodeMode, +N]|).") @ ParsePattern
(yet "If _parseResult_ is a non-empty List of *SyntaxError* objects, throw a *SyntaxError* exception.") @ RegExpInitialize
(yet "If _second_ is not a <emu-xref href=\"#trailing-surrogate\"></emu-xref>, then\n  1. Return Record { [[CodePoint]]: _cp_, [[CodeUnitCount]]: 1, [[IsUnpairedSurrogate]]: *true* }.") @ CodePointAt
(yet "If _source_ is an Object that has a [[TypedArrayName]] internal slot, then\n  1. Perform ? SetTypedArrayFromTypedArray(_target_, _targetOffset_, _source_).") @ INTRINSICS.TypedArray.prototype.set
(yet "If _srcBuffer_.[[ArrayBufferData]] and _targetBuffer_.[[ArrayBufferData]] are the same Shared Data Block values, let _same_ be *true*; else let _same_ be *false*.") @ SetTypedArrayFromTypedArray
(yet "If _symbol_ is the |ReservedWord| `super`, return *true*.") @ SuperProperty[1,0].Contains
(yet "If _templateRemainder_ starts with *\"$$\"*, then\n  1. Let _ref_ be *\"$$\"*.\n  1. Let _refReplacement_ be *\"$\"*.") @ GetSubstitution
(yet "If _uStr_ does not consist of a single code unit, return _ch_.") @ Canonicalize
(yet "If _v_ has a [[StringData]] or [[NumberData]] internal slot, set _item_ to ? ToString(_v_).") @ INTRINSICS.JSON.stringify
(yet "If _value_ is an IEEE 754-2019 binary32 NaN value, return the *NaN* Number value.") @ RawBytesToNumeric
(yet "If _value_ is an IEEE 754-2019 binary64 NaN value, return the *NaN* Number value.") @ RawBytesToNumeric
(yet "If _xBytes_ and _yBytes_ do not have the same number of elements, return *false*.") @ ByteListEqual
(yet "If _x_ or _y_ are any of *NaN*, *+‚àû*<sub>ùîΩ</sub>, or *-‚àû*<sub>ùîΩ</sub>, return *false*.") @ IsLooselyEqual
(yet "If _y_ is *-0*<sub>ùîΩ</sub> or _y_ < *-0*<sub>ùîΩ</sub>, return *+0*<sub>ùîΩ</sub>.") @ Number::multiply
(yet "If _year_ is not finite or _month_ is not finite or _date_ is not finite, return *NaN*.") @ MakeDay
(yet "If an implementation-defined debugging facility is available and enabled, then\n  1. Perform an implementation-defined debugging action.\n  1. Return a new implementation-defined Completion Record.") @ DebuggerStatement[0,0].Evaluation
(yet "If neither _trimmedString_ nor any prefix of _trimmedString_ satisfies the syntax of a |StrDecimalLiteral| (see <emu-xref href=\"#sec-tonumber-applied-to-the-string-type\"></emu-xref>), return *NaN*.") @ INTRINSICS.parseFloat
(yet "If the Directive Prologue of |FunctionBody| contains a Use Strict Directive, return *true*; otherwise, return *false*.") @ FunctionBody[0,0].FunctionBodyContainsUseStrict
(yet "If the binding exists, it must be in the object Environment Record.") @ GlobalEnvironmentRecord.InitializeBinding
(yet "If the binding for _N_ in _envRec_ cannot be deleted, return *false*.") @ DeclarativeEnvironmentRecord.DeleteBinding
(yet "If the binding for _N_ is an indirect binding, then\n  1. Let _M_ and _N2_ be the indirection values provided when this binding for _N_ was created.\n  1. Let _targetEnv_ be _M_.[[Environment]].\n  1. If _targetEnv_ is ~empty~, throw a newly created *ReferenceError* object.\n  1. Return ? _targetEnv_.GetBindingValue(_N2_, *true*).") @ ModuleEnvironmentRecord.GetBindingValue
(yet "If the caller will not be overriding all of _obj_'s [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then _internalSlotsList_ contains [[Extensible]].") @ MakeBasicObject
(yet "If the caller will not be overriding both _obj_'s [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then _internalSlotsList_ contains [[Prototype]].") @ MakeBasicObject
(yet "If the code units at index (_k_ + 1) and (_k_ + 2) within _string_ do not represent hexadecimal digits, throw a *URIError* exception.") @ Decode
(yet "If the code units at index (_k_ + 1) and (_k_ + 2) within _string_ do not represent hexadecimal digits, throw a *URIError* exception.") @ Decode
(yet "If the decimal representation of _n_ has 20 or fewer significant digits, return ùîΩ(_n_).") @ RoundMVResult
(yet "If the file <a href=\"https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt\"><code>CaseFolding.txt</code></a> of the Unicode Character Database provides a simple or common case folding mapping for _ch_, return the result of applying that mapping to _ch_.") @ Canonicalize
(yet "If the length of _S_ is at least 2 and the first two code units of _S_ are either *\"0x\"* or *\"0X\"*, then\n  1. Remove the first two code units from _S_.\n  1. Set _R_ to 16.") @ INTRINSICS.parseInt
(yet "If the length of _space_ is 10 or less, let _gap_ be _space_; otherwise let _gap_ be the substring of _space_ from 0 to 10.") @ INTRINSICS.JSON.stringify
(yet "If the parse succeeded and no early errors were found, return the Parse Node (an instance of _goalSymbol_) at the root of the parse tree resulting from the parse.") @ ParseText
(yet "If this |IdentifierReference| is contained in strict mode code and StringValue of |Identifier| is *\"eval\"* or *\"arguments\"*, return ~invalid~.") @ IdentifierReference[0,0].AssignmentTargetType
(yet "If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.") @ AsyncBlockStart:cont0
(yet "If we return here, the async generator either threw an exception or performed either an implicit or explicit return.") @ AsyncGeneratorStart:cont0
(yet "If we return here, the generator either threw an exception or performed either an implicit or explicit return.") @ GeneratorStart:cont0
(yet "If |ExportDeclaration| is `export` |VariableStatement|, return BoundNames of |ExportDeclaration|.") @ ModuleItem[1,0].VarDeclaredNames
(yet "If |ExportDeclaration| is `export` |VariableStatement|, return VarScopedDeclarations of |VariableStatement|.") @ ModuleItem[1,0].VarScopedDeclarations
(yet "If |ExportDeclaration| is `export` |VariableStatement|, return a new empty List.") @ ModuleItem[1,0].LexicallyDeclaredNames
(yet "Leave the critical section for _WL_.") @ LeaveCriticalSection
(yet "Let _AR_ be the Agent Record of the surrounding agent.") @ AgentCanSuspend
(yet "Let _AR_ be the Agent Record of the surrounding agent.") @ AgentSignifier
(yet "Let _AR_ be the Agent Record of the surrounding agent.") @ INTRINSICS.Atomics.isLockFree
(yet "Let _A_ be a one-element CharSet containing the character _ch_.") @ AtomEscape[2,0].CompileAtom
(yet "Let _A_ be a one-element CharSet containing the character _ch_.") @ Atom[0,0].CompileAtom
(yet "Let _A_ be the CharSet of all characters.") @ Atom[1,0].CompileAtom
(yet "Let _B_ be the 8-bit value represented by the two hexadecimal digits at index (_k_ + 1) and (_k_ + 2).") @ Decode
(yet "Let _B_ be the 8-bit value represented by the two hexadecimal digits at index (_k_ + 1) and (_k_ + 2).") @ Decode
(yet "Let _C_ be the code unit whose value is _B_.") @ Decode
(yet "Let _InputLength_ be the number of characters contained in _Input_. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"></emu-xref>.") @ Pattern[0,0].CompilePattern:clo0
(yet "Let _Input_ be _inputChars_. This alias will be used throughout the algorithms in <emu-xref href=\"#sec-pattern-semantics\"></emu-xref>.") @ Pattern[0,0].CompilePattern:clo0
(yet "Let _O_ be ? OrdinaryCreateFromConstructor(_newTarget_, <code>\"%<var>NativeError</var>.prototype%\"</code>, ¬´ [[ErrorData]] ¬ª).") @ INTRINSICS._NativeError_
(yet "Let _O_ be this Date object.") @ INTRINSICS.Date.prototype.toDateString
(yet "Let _O_ be this Date object.") @ INTRINSICS.Date.prototype.toTimeString
(yet "Let _O_ be this Date object.") @ INTRINSICS.Date.prototype.toUTCString
(yet "Let _PropertyList_ and _ReplacerFunction_ be *undefined*.") @ INTRINSICS.JSON.stringify
(yet "Let _S_ be a String in the form of a |Pattern[~UnicodeMode]| (|Pattern[+UnicodeMode]| if _F_ contains *\"u\"*) equivalent to _P_ interpreted as UTF-16 encoded Unicode code points (<emu-xref href=\"#sec-ecmascript-language-types-string-type\"></emu-xref>), in which certain code points are escaped as described below. _S_ may or may not be identical to _P_; however, the Abstract Closure that would result from evaluating _S_ as a |Pattern[~UnicodeMode]| (|Pattern[+UnicodeMode]| if _F_ contains *\"u\"*) must behave identically to the Abstract Closure given by the constructed object's [[RegExpMatcher]] internal slot. Multiple calls to this abstract operation using the same values for _P_ and _F_ must produce identical results.") @ EscapeRegExpPattern
(yet "Let _S_ be a reference to the list of waiters in _WL_.") @ RemoveWaiters
(yet "Let _S_ be the String representation of _n_, formatted as a decimal number.") @ ToZeroPaddedDecimalString
(yet "Let _S_ be the String value containing only the code unit _C_.") @ Decode
(yet "Let _T_ be the String value that is a copy of _S_ with both leading and trailing white space removed.") @ TrimString
(yet "Let _V_ be the code point obtained by applying the UTF-8 transformation to _Octets_, that is, from a List of octets into a 21-bit value.") @ Decode
(yet "Let _W_ be the first agent in _S_.") @ INTRINSICS.Atomics.notify
(yet "Let _W_ be the first waiter in _S_.") @ RemoveWaiters
(yet "Let _a_ be the first _k_ - _f_ code units of _m_.") @ INTRINSICS.Number.prototype.toFixed
(yet "Let _a_ be the first code unit of _m_.") @ INTRINSICS.Number.prototype.toExponential
(yet "Let _a_ be the first code unit of _m_.") @ INTRINSICS.Number.prototype.toPrecision
(yet "Let _a_ be the one character in CharSet _A_.") @ CharacterRange
(yet "Let _add_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called:\n  1. Let _x_ be RawBytesToNumeric(_type_, _xBytes_, _isLittleEndian_).\n  1. Let _y_ be RawBytesToNumeric(_type_, _yBytes_, _isLittleEndian_).\n  1. If Type(_x_) is Number, then\n    1. Let _sum_ be Number::add(_x_, _y_).\n  1. Else,\n    1. Assert: Type(_x_) is BigInt.\n    1. Let _sum_ be BigInt::add(_x_, _y_).\n  1. Let _sumBytes_ be NumericToRawBytes(_type_, _sum_, _isLittleEndian_).\n  1. Assert: _sumBytes_, _xBytes_, and _yBytes_ have the same number of elements..\n  1. Return _sumBytes_.") @ INTRINSICS.Atomics.add
(yet "Let _agentRecord_ be the surrounding agent's Agent Record.") @ AddToKeptObjects
(yet "Let _agentRecord_ be the surrounding agent's Agent Record.") @ ClearKeptObjects
(yet "Let _and_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return ByteListBitwiseOp(`&`, _xBytes_, _yBytes_).") @ INTRINSICS.Atomics.and
(yet "Let _b_ be the one character in CharSet _B_.") @ CharacterRange
(yet "Let _b_ be the other _f_ code units of _m_.") @ INTRINSICS.Number.prototype.toExponential
(yet "Let _b_ be the other _f_ code units of _m_.") @ INTRINSICS.Number.prototype.toFixed
(yet "Let _b_ be the other _p_ - 1 code units of _m_.") @ INTRINSICS.Number.prototype.toPrecision
(yet "Let _bytes_ be a List whose sole element is a nondeterministically chosen byte value.") @ CopyDataBlockBytes
(yet "Let _c_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called:\n  1. Assert: _y_ is a State.\n  1. Return _y_.") @ Pattern[0,0].CompilePattern:clo0
(yet "Let _c_ be the canonical <emu-not-ref>property name</emu-not-ref> of _p_ as given in the ‚ÄúCanonical <emu-not-ref>property name</emu-not-ref>‚Äù column of the corresponding row.") @ UnicodeMatchProperty
(yet "Let _c_ be the character _Input_[_e_].") @ IsWordChar
(yet "Let _c_ be the character whose character value is _cv_.") @ ClassEscape[0,0].CompileToCharSet
(yet "Let _c_ be the character whose character value is _cv_.") @ ClassEscape[1,0].CompileToCharSet
(yet "Let _c_ be the character whose character value is _cv_.") @ ClassEscape[3,0].CompileToCharSet
(yet "Let _c_ be the code unit 0x002D (HYPHEN-MINUS).") @ INTRINSICS.Number.prototype.toPrecision
(yet "Let _cap_ be a List of _NcapturingParens_ *undefined* values, indexed 1 through _NcapturingParens_.") @ Pattern[0,0].CompilePattern:clo0
(yet "Let _cap_ be a copy of _x_'s _captures_ List.") @ RepeatMatcher
(yet "Let _ch_ be the character matched by |PatternCharacter|.") @ Atom[0,0].CompileAtom
(yet "Let _ch_ be the character whose character value is _cv_.") @ AtomEscape[2,0].CompileAtom
(yet "Let _ch_ be the code point matched by |ControlLetter|.") @ CharacterEscape[1,0].CharacterValue
(yet "Let _ch_ be the code point matched by |IdentityEscape|.") @ CharacterEscape[5,0].CharacterValue
(yet "Let _ch_ be the code point matched by |SourceCharacter|.") @ ClassAtomNoDash[0,0].CharacterValue
(yet "Let _chosen_ be an implementation-defined choice of either _option1_ or _option2_.") @ RoundMVResult
(yet "Let _codeUnits_ be a List consisting of the sequence of code units that are the elements of _head_.") @ INTRINSICS.String.prototype.split
(yet "Let _completion_ be the result of <emu-meta suppress-effects=\"user-code\">evaluating _script_</emu-meta>.") @ INTRINSICS.JSON.parse
(yet "Let _constructorName_ be the String value of the Constructor Name value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for this <var>TypedArray</var> constructor.") @ INTRINSICS._TypedArray_
(yet "Let _convOp_ be the abstract operation named in the Conversion Operation column in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ NumericToRawBytes
(yet "Let _cp_ be the code point whose numeric value is that of _ch_.") @ Canonicalize
(yet "Let _cp_ be the code point whose numeric value is that of _first_.") @ CodePointAt
(yet "Let _cps_ be IdentifierCodePoints of the derived |IdentifierName|.") @ IdentifierName[1,0].IdentifierCodePoints
(yet "Let _cps_ be RegExpIdentifierCodePoints of the derived |RegExpIdentifierName|.") @ RegExpIdentifierName[1,0].RegExpIdentifierCodePoints
(yet "Let _cu1_ be the code unit whose value is floor((_cp_ - 0x10000) / 0x400) + 0xD800.") @ UTF16EncodeCodePoint
(yet "Let _cu2_ be the code unit whose value is ((_cp_ - 0x10000) modulo 0x400) + 0xDC00.") @ UTF16EncodeCodePoint
(yet "Let _cu_ be _uStr_'s single code unit element.") @ Canonicalize
(yet "Let _d_ be a new Continuation with parameters (_y_) that captures _m_, _min_, _max_, _greedy_, _x_, _c_, _parenIndex_, and _parenCount_ and performs the following steps when called:\n  1. Assert: _y_ is a State.\n  1. [id=\"step-repeatmatcher-done\"] If _min_ = 0 and _y_'s _endIndex_ = _x_'s _endIndex_, return ~failure~.\n  1. If _min_ = 0, let _min2_ be 0.\n  1. Else, let _min2_ be _min_ - 1.\n  1. If _max_ is +‚àû, let _max2_ be +‚àû.\n  1. Else, let _max2_ be _max_ - 1.\n  1. Return RepeatMatcher(_m_, _min2_, _max2_, _greedy_, _y_, _c_, _parenIndex_, _parenCount_).") @ RepeatMatcher
(yet "Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).") @ INTRINSICS.Number.prototype.toExponential
(yet "Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).") @ INTRINSICS.Number.prototype.toPrecision
(yet "Let _db_ be a new Data Block value consisting of _size_ bytes. If it is impossible to create such a Data Block, throw a *RangeError* exception.") @ CreateByteDataBlock
(yet "Let _db_ be a new Shared Data Block value consisting of _size_ bytes. If it is impossible to create such a Shared Data Block, throw a *RangeError* exception.") @ CreateSharedByteDataBlock
(yet "Let _defaultConstructor_ be the intrinsic object listed in column one of <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for _exemplar_.[[TypedArrayName]].") @ TypedArraySpeciesCreate
(yet "Let _dv_ be the time value (UTC) identifying the current time.") @ INTRINSICS.Date
(yet "Let _eUTF_ be the smallest index into _S_ that corresponds to the character at element _e_ of _codepoints_. If _e_ is greater than or equal to the number of elements in _codepoints_, then _eUTF_ is the number of code units in _S_.") @ GetStringIndex
(yet "Let _e_ and _n_ be integers such that 10<sup>_f_</sup> ‚â§ _n_ < 10<sup>_f_ + 1</sup> and for which _n_ √ó 10<sup>_e_ - _f_</sup> - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ √ó 10<sup>_e_ - _f_</sup> is larger.") @ INTRINSICS.Number.prototype.toExponential
(yet "Let _e_ and _n_ be integers such that 10<sup>_p_ - 1</sup> ‚â§ _n_ < 10<sup>_p_</sup> and for which _n_ √ó 10<sup>_e_ - _p_ + 1</sup> - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ √ó 10<sup>_e_ - _p_ + 1</sup> is larger.") @ INTRINSICS.Number.prototype.toPrecision
(yet "Let _e_ be _r_'s _endIndex_ value.") @ RegExpBuiltinExec
(yet "Let _e_ be _x_'s _endIndex_.") @ RepeatMatcher
(yet "Let _e_, _n_, and _f_ be integers such that _f_ ‚â• 0, 10<sup>_f_</sup> ‚â§ _n_ < 10<sup>_f_ + 1</sup>, ùîΩ(_n_ √ó 10<sup>_e_ - _f_</sup>) is ùîΩ(_x_), and _f_ is as small as possible. Note that the decimal representation of _n_ has _f_ + 1 digits, _n_ is not divisible by 10, and the least significant digit of _n_ is not necessarily uniquely determined by these criteria.") @ INTRINSICS.Number.prototype.toExponential
(yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ GetModifySetValueInBuffer
(yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ GetValueFromBuffer
(yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ GetViewValue
(yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ RawBytesToNumeric
(yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ SetValueInBuffer
(yet "Let _elementSize_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ SetViewValue
(yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().") @ CopyDataBlockBytes
(yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().") @ CreateSharedByteDataBlock
(yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().") @ GetModifySetValueInBuffer
(yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().") @ GetValueFromBuffer
(yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().") @ INTRINSICS.Atomics.compareExchange
(yet "Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().") @ SetValueInBuffer
(yet "Let _eventsRecord_ be the Agent Events Record in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().") @ LeaveCriticalSection
(yet "Let _events_ be an empty Set.") @ EventSet
(yet "Let _events_ be an empty Set.") @ HostEventSet
(yet "Let _events_ be an empty Set.") @ SharedDataBlockEventSet
(yet "Let _execution_ be the [[CandidateExecution]] field of the calling surrounding's Agent Record.") @ LeaveCriticalSection
(yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.") @ CopyDataBlockBytes
(yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.") @ CreateSharedByteDataBlock
(yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.") @ GetModifySetValueInBuffer
(yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.") @ GetValueFromBuffer
(yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.") @ INTRINSICS.Atomics.compareExchange
(yet "Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.") @ SetValueInBuffer
(yet "Let _fromSize_ be the number of bytes in _fromBlock_.") @ CopyDataBlockBytes
(yet "Let _i_ be the character value of character _a_.") @ CharacterRange
(yet "Let _ie_ be the element of _importEntries_ whose [[LocalName]] is the same as _ee_.[[LocalName]].") @ ParseModule
(yet "Let _inputIndex_ be the index into _input_ of the character that was obtained from element _lastIndex_ of _S_.") @ RegExpBuiltinExec
(yet "Let _intValue_ be the byte elements of _rawBytes_ concatenated and interpreted as a bit string encoding of a binary little-endian two's complement number of bit length _elementSize_ √ó 8.") @ RawBytesToNumeric
(yet "Let _intValue_ be the byte elements of _rawBytes_ concatenated and interpreted as a bit string encoding of an unsigned little-endian binary number.") @ RawBytesToNumeric
(yet "Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.") @ INTRINSICS.Atomics.add
(yet "Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.") @ INTRINSICS.Atomics.compareExchange
(yet "Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.") @ INTRINSICS.Atomics.sub
(yet "Let _j_ be the character value of character _b_.") @ CharacterRange
(yet "Let _kValue_ be the first element of _values_ and remove that element from _values_.") @ INTRINSICS.TypedArray.from
(yet "Let _kValue_ be the first element of _values_ and remove that element from _values_.") @ InitializeTypedArrayFromList
(yet "Let _lead_ be the code unit whose numeric value is that of the code point matched by |UnicodeLeadSurrogate|.") @ RegExpIdentifierPart[2,0].RegExpIdentifierCodePoint
(yet "Let _lead_ be the code unit whose numeric value is that of the code point matched by |UnicodeLeadSurrogate|.") @ RegExpIdentifierStart[2,0].RegExpIdentifierCodePoint
(yet "Let _leaveEvent_ be a new Synchronize event.") @ LeaveCriticalSection
(yet "Let _lowerText_ be the result of toLowercase(_sText_), according to the Unicode Default Case Conversion algorithm.") @ INTRINSICS.String.prototype.toLowerCase
(yet "Let _m_ be the String value consisting of _f_ + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).") @ INTRINSICS.Number.prototype.toExponential
(yet "Let _m_ be the String value consisting of _p_ occurrences of the code unit 0x0030 (DIGIT ZERO).") @ INTRINSICS.Number.prototype.toPrecision
(yet "Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).") @ INTRINSICS.Number.prototype.toExponential
(yet "Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).") @ INTRINSICS.Number.prototype.toPrecision
(yet "Let _mathInt_ be the integer value that is represented by _Z_ in radix-_R_ notation, using the letters <b>A</b>-<b>Z</b> and <b>a</b>-<b>z</b> for digits with values 10 through 35. (However, if _R_ is 10 and _Z_ contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if _R_ is not 2, 4, 8, 10, 16, or 32, then _mathInt_ may be an implementation-approximated integer representing the integer value denoted by _Z_ in radix-_R_ notation.)") @ INTRINSICS.parseInt
(yet "Let _month_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"></emu-xref> with the Number MonthFromTime(_tv_).") @ DateString
(yet "Let _month_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-month-names\"></emu-xref> with the Number MonthFromTime(_tv_).") @ INTRINSICS.Date.prototype.toUTCString
(yet "Let _mv_ be (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup>) plus the MV of |DecimalDigits|.") @ DecimalBigIntegerLiteral[1,1].NumericValue
(yet "Let _mv_ be (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup>) plus the MV of |DecimalDigits|.") @ DecimalBigIntegerLiteral[2,0].NumericValue
(yet "Let _n32_ be the result of converting _n_ to a value in IEEE 754-2019 binary32 format using roundTiesToEven mode.") @ INTRINSICS.Math.fround
(yet "Let _n64_ be the result of converting _n32_ to a value in IEEE 754-2019 binary64 format.") @ INTRINSICS.Math.fround
(yet "Let _n_ be an integer for which _n_ / 10<sup>_f_</sup> - _x_ is as close to zero as possible. If there are two such _n_, pick the larger _n_.") @ INTRINSICS.Number.prototype.toFixed
(yet "Let _n_ be the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for Element Type _type_.") @ NumericToRawBytes
(yet "Let _n_ be the number of code points in the second |DecimalDigits|.") @ StrUnsignedDecimalLiteral[1,0].StringNumericValue
(yet "Let _n_ be the number of code points in the second |DecimalDigits|.") @ StrUnsignedDecimalLiteral[1,1].StringNumericValue
(yet "Let _n_ be the number of code points in the second |DecimalDigits|.") @ StrUnsignedDecimalLiteral[1,2].StringNumericValue
(yet "Let _n_ be the number of code points in the second |DecimalDigits|.") @ StrUnsignedDecimalLiteral[1,3].StringNumericValue
(yet "Let _n_ be the number of code points in |DecimalDigits|, excluding all occurrences of |NumericLiteralSeparator|.") @ DecimalBigIntegerLiteral[1,1].NumericValue
(yet "Let _n_ be the number of code points in |DecimalDigits|, excluding all occurrences of |NumericLiteralSeparator|.") @ DecimalBigIntegerLiteral[2,0].NumericValue
(yet "Let _n_ be the number of code points in |DecimalDigits|.") @ DecimalEscape[0,1].CapturingGroupNumber
(yet "Let _n_ be the number of code points in |DecimalDigits|.") @ StrUnsignedDecimalLiteral[2,0].StringNumericValue
(yet "Let _n_ be the number of code points in |DecimalDigits|.") @ StrUnsignedDecimalLiteral[2,1].StringNumericValue
(yet "Let _n_ be the number of elements in _r_'s _captures_ List. (This is the same value as <emu-xref href=\"#sec-notation\"></emu-xref>'s _NcapturingParens_.)") @ RegExpBuiltinExec
(yet "Let _n_ be the number of leading 1 bits in _B_.") @ Decode
(yet "Let _newSymbol_ be a new unique Symbol value whose [[Description]] value is _stringKey_.") @ INTRINSICS.Symbol.for
(yet "Let _now_ be the time value (UTC) identifying the current time.") @ INTRINSICS.Date
(yet "Let _ns_ be the String value that is the result of normalizing _S_ into the normalization form named by _f_ as specified in <a href=\"https://unicode.org/reports/tr15/\">https://unicode.org/reports/tr15/</a>.") @ INTRINSICS.String.prototype.normalize
(yet "Let _numberString_ be the longest prefix of _trimmedString_, which might be _trimmedString_ itself, that satisfies the syntax of a |StrDecimalLiteral|.") @ INTRINSICS.parseFloat
(yet "Let _option1_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit.") @ RoundMVResult
(yet "Let _option2_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit and then incrementing it at the 20th position (with carrying as necessary).") @ RoundMVResult
(yet "Let _or_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return ByteListBitwiseOp(`|`, _xBytes_, _yBytes_).") @ INTRINSICS.Atomics.or
(yet "Let _p_ be the number of leading zero bits in the unsigned 32-bit binary representation of _n_.") @ INTRINSICS.Math.clz32
(yet "Let _parenCount_ be the number of left-capturing parentheses in |Atom|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes enclosed by |Atom|.") @ Term[2,0].CompileSubpattern
(yet "Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of the located |GroupSpecifier|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing the located |GroupSpecifier|, including its immediately enclosing |Atom|.") @ AtomEscape[3,0].CompileAtom
(yet "Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of this |Atom|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing this |Atom|.") @ Atom[4,0].CompileAtom
(yet "Let _parenIndex_ be the number of left-capturing parentheses in the entire regular expression that occur to the left of this |Term|. This is the total number of <emu-grammar>Atom :: `(` GroupSpecifier Disjunction `)`</emu-grammar> Parse Nodes prior to or enclosing this |Term|.") @ Term[2,0].CompileSubpattern
(yet "Let _parseResult_ be ParseText(_patternText_, |Pattern[+UnicodeMode, +N]|).") @ ParsePattern
(yet "Let _parseResult_ be ParseText(_patternText_, |Pattern[~UnicodeMode, ~N]|).") @ ParsePattern
(yet "Let _patternText_ be the result of interpreting each of _P_'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.") @ RegExpInitialize
(yet "Let _product_ be the String value consisting solely of the code unit 0x0022 (QUOTATION MARK).") @ QuoteJSONString
(yet "Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.") @ SerializeJSONArray
(yet "Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.") @ SerializeJSONObject
(yet "Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.") @ SerializeJSONArray
(yet "Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.") @ SerializeJSONObject
(yet "Let _proto_ be <code>\"%<var>TypedArray</var>.prototype%\"</code>.") @ INTRINSICS._TypedArray_
(yet "Let _r_ be ‚Ñù(_n_) - (‚Ñù(_d_) √ó _q_) where _q_ is an integer that is negative if and only if _n_ and _d_ have opposite sign, and whose magnitude is as large as possible without exceeding the magnitude of ‚Ñù(_n_) / ‚Ñù(_d_).") @ Number::remainder
(yet "Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.") @ GetModifySetValueInBuffer
(yet "Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.") @ INTRINSICS.Atomics.compareExchange
(yet "Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_byteIndex_].") @ GetModifySetValueInBuffer
(yet "Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_indexedPosition_].") @ INTRINSICS.Atomics.compareExchange
(yet "Let _rawBytes_ be a List whose elements are the 4 bytes that are the result of converting _value_ to IEEE 754-2019 binary32 format using roundTiesToEven mode. If _isLittleEndian_ is *false*, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If _value_ is *NaN*, _rawBytes_ may be set to any implementation chosen IEEE 754-2019 binary32 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value.") @ NumericToRawBytes
(yet "Let _rawBytes_ be a List whose elements are the 8 bytes that are the IEEE 754-2019 binary64 format encoding of _value_. If _isLittleEndian_ is *false*, the bytes are arranged in big endian order. Otherwise, the bytes are arranged in little endian order. If _value_ is *NaN*, _rawBytes_ may be set to any implementation chosen IEEE 754-2019 binary64 format Not-a-Number encoding. An implementation must always choose the same encoding for each implementation distinguishable *NaN* value.") @ NumericToRawBytes
(yet "Let _rawBytes_ be a List whose elements are the _n_-byte binary encoding of _intValue_. If _isLittleEndian_ is *false*, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.") @ NumericToRawBytes
(yet "Let _rawBytes_ be a List whose elements are the _n_-byte binary two's complement encoding of _intValue_. If _isLittleEndian_ is *false*, the bytes are ordered in big endian order. Otherwise, the bytes are ordered in little endian order.") @ NumericToRawBytes
(yet "Let _rawValue_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.") @ GetValueFromBuffer
(yet "Let _rawValue_ be the String value _rawStrings_[_index_].") @ GetTemplateObject
(yet "Let _requiredModule_ be the last element in _stack_.") @ InnerModuleEvaluation
(yet "Let _requiredModule_ be the last element in _stack_.") @ InnerModuleLinking
(yet "Let _reservedURISet_ be a String containing one instance of each code unit valid in |uriReserved| plus *\"#\"*.") @ INTRINSICS.decodeURI
(yet "Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return _newBytes_.") @ INTRINSICS.Atomics.compareExchange
(yet "Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return _newBytes_.") @ INTRINSICS.Atomics.exchange
(yet "Let _separator_ be the implementation-defined list-separator String value appropriate for the host environment's current locale (such as *\", \"*).") @ INTRINSICS.Array.prototype.toLocaleString
(yet "Let _sortedExecList_ be a List whose elements are the elements of _execList_, in the order in which they had their [[AsyncEvaluation]] fields set to *true* in InnerModuleEvaluation.") @ AsyncModuleExecutionFulfilled
(yet "Let _sortedExports_ be a List whose elements are the elements of _exports_ ordered as if an Array of the same values had been sorted using %Array.prototype.sort% using *undefined* as _comparefn_.") @ ModuleNamespaceCreate
(yet "Let _subtract_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called:\n  1. Let _x_ be RawBytesToNumeric(_type_, _xBytes_, _isLittleEndian_).\n  1. Let _y_ be RawBytesToNumeric(_type_, _yBytes_, _isLittleEndian_).\n  1. If Type(_x_) is Number, then\n    1. Let _difference_ be Number::subtract(_x_, _y_).\n  1. Else,\n    1. Assert: Type(_x_) is BigInt.\n    1. Let _difference_ be BigInt::subtract(_x_, _y_).\n  1. Let _differenceBytes_ be NumericToRawBytes(_type_, _difference_, _isLittleEndian_).\n  1. Assert: _differenceBytes_, _xBytes_, and _yBytes_ have the same number of elements..\n  1. Return _differenceBytes_.") @ INTRINSICS.Atomics.sub
(yet "Let _t_ be ((_h_ `*` msPerHour `+` _m_ `*` msPerMinute) `+` _s_ `*` msPerSecond) `+` _milli_, performing the arithmetic according to IEEE 754-2019 rules (that is, as if using the ECMAScript operators `*` and `+`).") @ MakeTime
(yet "Let _toSize_ be the number of bytes in _toBlock_.") @ CopyDataBlockBytes
(yet "Let _trail_ be the code unit whose numeric value is that of the code point matched by |UnicodeTrailSurrogate|.") @ RegExpIdentifierPart[2,0].RegExpIdentifierCodePoint
(yet "Let _trail_ be the code unit whose numeric value is that of the code point matched by |UnicodeTrailSurrogate|.") @ RegExpIdentifierStart[2,0].RegExpIdentifierCodePoint
(yet "Let _truncatedStringFiller_ be the String value consisting of repeated concatenations of _filler_ truncated to length _fillLen_.") @ StringPad
(yet "Let _tv_ be _day_ √ó msPerDay + _time_.") @ MakeDate
(yet "Let _tv_ be the result of parsing _v_ as a date, in exactly the same manner as for the `parse` method (<emu-xref href=\"#sec-date.parse\"></emu-xref>).") @ INTRINSICS.Date
(yet "Let _tzName_ be an implementation-defined string that is either the empty String or the string-concatenation of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT PARENTHESIS), an implementation-defined timezone name, and the code unit 0x0029 (RIGHT PARENTHESIS).") @ TimeZoneString
(yet "Let _u_ be the result of toUppercase(¬´ _cp_ ¬ª), according to the Unicode Default Case Conversion algorithm.") @ Canonicalize
(yet "Let _uncheckedResultKeys_ be a List whose elements are the elements of _trapResult_.") @ ProxyExoticObject.OwnPropertyKeys
(yet "Let _unescapedURIComponentSet_ be a String containing one instance of each code unit valid in |uriUnescaped|.") @ INTRINSICS.encodeURIComponent
(yet "Let _unescapedURISet_ be a String containing one instance of each code unit valid in |uriReserved| and |uriUnescaped| plus *\"#\"*.") @ INTRINSICS.encodeURI
(yet "Let _value_ be the byte elements of _rawBytes_ concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary32 value.") @ RawBytesToNumeric
(yet "Let _value_ be the byte elements of _rawBytes_ concatenated and interpreted as a little-endian bit string encoding of an IEEE 754-2019 binary64 value.") @ RawBytesToNumeric
(yet "Let _value_ be the canonical property value of _v_ as given in the ‚ÄúCanonical property value‚Äù column of the corresponding row.") @ UnicodeMatchPropertyValue
(yet "Let _weekday_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"></emu-xref> with the Number WeekDay(_tv_).") @ DateString
(yet "Let _weekday_ be the Name of the entry in <emu-xref href=\"#sec-todatestring-day-names\"></emu-xref> with the Number WeekDay(_tv_).") @ INTRINSICS.Date.prototype.toUTCString
(yet "Let _x_ be the State (_index_, _cap_).") @ Pattern[0,0].CompilePattern:clo0
(yet "Let _xor_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return ByteListBitwiseOp(`^`, _xBytes_, _yBytes_).") @ INTRINSICS.Atomics.xor
(yet "Let _xr_ be the State (_e_, _cap_).") @ RepeatMatcher
(yet "Let _z_ be the String value consisting of _f_ + 1 - _k_ occurrences of the code unit 0x0030 (DIGIT ZERO).") @ INTRINSICS.Number.prototype.toFixed
(yet "No action is required.") @ INTRINSICS.Array.prototype.reverse
(yet "Notify the agent _W_.") @ NotifyWaiter
(yet "Optionally, set _F_.[[InitialName]] to _name_.") @ SetFunctionName
(yet "Otherwise, return a List of one or more *SyntaxError* objects representing the parsing errors and/or early errors. If more than one parsing error or early error is present, the number and ordering of error objects in the list is implementation-defined, but at least one must be present.") @ ParseText
(yet "Parse StringToCodePoints(_jsonString_) as a JSON text as specified in ECMA-404. Throw a *SyntaxError* exception if it is not a valid JSON text as defined in that specification.") @ INTRINSICS.JSON.parse
(yet "Perform LeaveCriticalSection(_WL_) and suspend _W_ for up to _timeout_ milliseconds, performing the combined operation in such a way that a notification that arrives after the critical section is exited but before the suspension takes effect is not lost. _W_ can notify either because the timeout expired or because it was notified explicitly by another agent calling NotifyWaiter with arguments _WL_ and _W_, and not for any other reasons at all.") @ SuspendAgent
(yet "Remove _W_ from _S_.") @ RemoveWaiters
(yet "Remove _W_ from the front of _S_.") @ INTRINSICS.Atomics.notify
(yet "Remove _W_ from the list of waiters in _WL_.") @ RemoveWaiter
(yet "Remove _cell_ from _finalizationRegistry_.[[Cells]].") @ INTRINSICS.FinalizationRegistry.prototype.unregister
(yet "Remove _key_ from _uncheckedResultKeys_.") @ ProxyExoticObject.OwnPropertyKeys
(yet "Remove _key_ from _uncheckedResultKeys_.") @ ProxyExoticObject.OwnPropertyKeys
(yet "Remove _moduleContext_ from the execution context stack.") @ SourceTextModuleRecord.InitializeEnvironment
(yet "Remove from _A_ all characters corresponding to a code point on the right-hand side of the |LineTerminator| production.") @ Atom[1,0].CompileAtom
(yet "Remove the binding for _N_ from _envRec_.") @ DeclarativeEnvironmentRecord.DeleteBinding
(yet "Remove the last element of _stack_.") @ InnerModuleEvaluation
(yet "Remove the last element of _stack_.") @ InnerModuleLinking
(yet "Remove the last element of _state_.[[Stack]].") @ SerializeJSONArray
(yet "Remove the last element of _state_.[[Stack]].") @ SerializeJSONObject
(yet "Repeat, until (_x_ = 0 or _x_ = -1) and (_y_ = 0 or _y_ = -1),\n  1. Let _xDigit_ be _x_ modulo 2.\n  1. Let _yDigit_ be _y_ modulo 2.\n  1. If _op_ is `&`, set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryAnd(_xDigit_, _yDigit_).\n  1. Else if _op_ is `|`, set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryOr(_xDigit_, _yDigit_).\n  1. Else,\n    1. Assert: _op_ is `^`.\n    1. Set _result_ to _result_ + 2<sup>_shift_</sup> √ó BinaryXor(_xDigit_, _yDigit_).\n  1. Set _shift_ to _shift_ + 1.\n  1. Set _x_ to (_x_ - _xDigit_) / 2.\n  1. Set _y_ to (_y_ - _yDigit_) / 2.") @ BigIntBitwiseOp
(yet "Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.") @ INTRINSICS.Set.prototype.clear
(yet "Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.") @ INTRINSICS.Set.prototype.delete
(yet "Replace the element of _entries_ whose value is _e_ with an element whose value is ~empty~.") @ INTRINSICS.WeakSet.prototype.delete
(yet "Return (_t_ - LocalTime(_t_)) / msPerMinute.") @ INTRINSICS.Date.prototype.getTimezoneOffset
(yet "Return (the MV of |NonZeroDigit| √ó 10<sup>_n_</sup> plus the MV of |DecimalDigits|).") @ DecimalEscape[0,1].CapturingGroupNumber
(yet "Return Day(_t_) + _dt_ - *1*<sub>ùîΩ</sub>.") @ MakeDay
(yet "Return FunctionBodyContainsUseStrict of |AsyncFunctionBody|.") @ AsyncConciseBody[1,0].AsyncConciseBodyContainsUseStrict
(yet "Return FunctionBodyContainsUseStrict of |FunctionBody|.") @ ConciseBody[1,0].ConciseBodyContainsUseStrict
(yet "Return _t_ + LocalTZA(_t_, *true*).") @ LocalTime
(yet "Return _t_ - LocalTZA(_t_, *false*).") @ UTC
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _A_, _invert_, and _direction_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _e_ be _x_'s _endIndex_.\n  1. If _direction_ is ~forward~, let _f_ be _e_ + 1.\n  1. Else, let _f_ be _e_ - 1.\n  1. If _f_ < 0 or _f_ > _InputLength_, return ~failure~.\n  1. Let _index_ be min(_e_, _f_).\n  1. Let _ch_ be the character _Input_[_index_].\n  1. Let _cc_ be Canonicalize(_ch_).\n  1. If there exists a member _a_ of _A_ such that Canonicalize(_a_) is _cc_, let _found_ be *true*. Otherwise, let _found_ be *false*.\n  1. If _invert_ is *false* and _found_ is *false*, return ~failure~.\n  1. If _invert_ is *true* and _found_ is *true*, return ~failure~.\n  1. Let _cap_ be _x_'s _captures_ List.\n  1. Let _y_ be the State (_f_, _cap_).\n  1. Return _c_(_y_).") @ CharacterSetMatcher
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _direction_, _m_, and _parenIndex_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures _x_, _c_, _direction_, and _parenIndex_ and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Let _cap_ be a copy of _y_'s _captures_ List.\n    1. Let _xe_ be _x_'s _endIndex_.\n    1. Let _ye_ be _y_'s _endIndex_.\n    1. If _direction_ is ~forward~, then\n      1. Assert: _xe_ ‚â§ _ye_.\n      1. Let _r_ be the Range (_xe_, _ye_).\n    1. Else,\n      1. Assert: _direction_ is ~backward~.\n      1. Assert: _ye_ ‚â§ _xe_.\n      1. Let _r_ be the Range (_ye_, _xe_).\n    1. Set _cap_[_parenIndex_ + 1] to _r_.\n    1. Let _z_ be the State (_ye_, _cap_).\n    1. Return _c_(_z_).\n  1. Return _m_(_x_, _d_).") @ Atom[4,0].CompileAtom
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m1_ and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _m1_(_y_, _c_).\n  1. Return _m2_(_x_, _d_).") @ Alternative[1,0].CompileSubpattern
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m2_ and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _m2_(_y_, _c_).\n  1. Return _m1_(_x_, _d_).") @ Alternative[1,0].CompileSubpattern
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _r_ be _m1_(_x_, _c_).\n  1. If _r_ is not ~failure~, return _r_.\n  1. Return _m2_(_x_, _c_).") @ Disjunction[1,0].CompileSubpattern
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _y_.\n  1. Let _r_ be _m_(_x_, _d_).\n  1. If _r_ is not ~failure~, return ~failure~.\n  1. Return _c_(_x_).") @ Assertion[5,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _y_.\n  1. Let _r_ be _m_(_x_, _d_).\n  1. If _r_ is not ~failure~, return ~failure~.\n  1. Return _c_(_x_).") @ Assertion[7,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _y_.\n  1. Let _r_ be _m_(_x_, _d_).\n  1. If _r_ is ~failure~, return ~failure~.\n  1. Let _y_ be _r_.State.\n  1. Let _cap_ be _y_'s _captures_ List.\n  1. Let _xe_ be _x_'s _endIndex_.\n  1. Let _z_ be the State (_xe_, _cap_).\n  1. Return _c_(_z_).") @ Assertion[4,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures nothing and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _y_.\n  1. Let _r_ be _m_(_x_, _d_).\n  1. If _r_ is ~failure~, return ~failure~.\n  1. Let _y_ be _r_.State.\n  1. Let _cap_ be _y_'s _captures_ List.\n  1. Let _xe_ be _x_'s _endIndex_.\n  1. Let _z_ be the State (_xe_, _cap_).\n  1. Return _c_(_z_).") @ Assertion[6,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _m_, _q_, _parenIndex_, and _parenCount_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Return RepeatMatcher(_m_, _q_.[[Min]], _q_.[[Max]], _q_.[[Greedy]], _x_, _c_, _parenIndex_, _parenCount_).") @ Term[2,0].CompileSubpattern
(yet "Return a new Matcher with parameters (_x_, _c_) that captures _n_ and _direction_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _cap_ be _x_'s _captures_ List.\n  1. Let _r_ be _cap_[_n_].\n  1. If _r_ is *undefined*, return _c_(_x_).\n  1. Let _e_ be _x_'s _endIndex_.\n  1. Let _rs_ be _r_'s _startIndex_.\n  1. Let _re_ be _r_'s _endIndex_.\n  1. Let _len_ be _re_ - _rs_.\n  1. If _direction_ is ~forward~, let _f_ be _e_ + _len_.\n  1. Else, let _f_ be _e_ - _len_.\n  1. If _f_ < 0 or _f_ > _InputLength_, return ~failure~.\n  1. Let _g_ be min(_e_, _f_).\n  1. If there exists an integer _i_ between 0 (inclusive) and _len_ (exclusive) such that Canonicalize(_Input_[_rs_ + _i_]) is not the same character value as Canonicalize(_Input_[_g_ + _i_]), return ~failure~.\n  1. Let _y_ be the State (_f_, _cap_).\n  1. Return _c_(_y_).") @ BackreferenceMatcher
(yet "Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _e_ be _x_'s _endIndex_.\n  1. If _e_ = 0, or if _Multiline_ is *true* and the character _Input_[_e_ - 1] is one of |LineTerminator|, then\n    1. Return _c_(_x_).\n  1. Return ~failure~.") @ Assertion[0,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _e_ be _x_'s _endIndex_.\n  1. If _e_ = _InputLength_, or if _Multiline_ is *true* and the character _Input_[_e_] is one of |LineTerminator|, then\n    1. Return _c_(_x_).\n  1. Return ~failure~.") @ Assertion[1,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _e_ be _x_'s _endIndex_.\n  1. Let _a_ be IsWordChar(_e_ - 1).\n  1. Let _b_ be IsWordChar(_e_).\n  1. If _a_ is *true* and _b_ is *false* or _a_ is *false* and _b_ is *true*, return _c_(_x_).\n  1. Return ~failure~.") @ Assertion[2,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _e_ be _x_'s _endIndex_.\n  1. Let _a_ be IsWordChar(_e_ - 1).\n  1. Let _b_ be IsWordChar(_e_).\n  1. If _a_ is *true* and _b_ is *true* or _a_ is *false* and _b_ is *false*, return _c_(_x_).\n  1. Return ~failure~.") @ Assertion[3,0].CompileAssertion
(yet "Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Return _c_(_x_).") @ Alternative[0,0].CompileSubpattern
(yet "Return msFromTime(LocalTime(_t_)).") @ INTRINSICS.Date.prototype.getMilliseconds
(yet "Return msFromTime(_t_).") @ INTRINSICS.Date.prototype.getUTCMilliseconds
(yet "Return the CharSet containing all Unicode code points included in CompileToCharSet of |UnicodePropertyValueExpression|.") @ CharacterClassEscape[6,0].CompileToCharSet
(yet "Return the CharSet containing all Unicode code points not included in CompileToCharSet of |UnicodePropertyValueExpression|.") @ CharacterClassEscape[7,0].CompileToCharSet
(yet "Return the CharSet containing all Unicode code points whose character database definition includes the property _p_ with value _v_.") @ UnicodePropertyValueExpression[0,0].CompileToCharSet
(yet "Return the CharSet containing all Unicode code points whose character database definition includes the property _p_ with value ‚ÄúTrue‚Äù.") @ UnicodePropertyValueExpression[1,0].CompileToCharSet
(yet "Return the CharSet containing all characters corresponding to a code point on the right-hand side of the |WhiteSpace| or |LineTerminator| productions.") @ CharacterClassEscape[2,0].CompileToCharSet
(yet "Return the CharSet containing all characters not in the CharSet returned by <emu-grammar>CharacterClassEscape :: `d`</emu-grammar> .") @ CharacterClassEscape[1,0].CompileToCharSet
(yet "Return the CharSet containing all characters not in the CharSet returned by <emu-grammar>CharacterClassEscape :: `s`</emu-grammar> .") @ CharacterClassEscape[3,0].CompileToCharSet
(yet "Return the CharSet containing all characters not in the CharSet returned by <emu-grammar>CharacterClassEscape :: `w`</emu-grammar> .") @ CharacterClassEscape[5,0].CompileToCharSet
(yet "Return the CharSet containing all characters with a character value greater than or equal to _i_ and less than or equal to _j_.") @ CharacterRange
(yet "Return the CharSet containing the character matched by |SourceCharacter|.") @ ClassAtomNoDash[0,0].CompileToCharSet
(yet "Return the CharSet containing the single character _c_.") @ ClassEscape[0,0].CompileToCharSet
(yet "Return the CharSet containing the single character _c_.") @ ClassEscape[1,0].CompileToCharSet
(yet "Return the CharSet containing the single character _c_.") @ ClassEscape[3,0].CompileToCharSet
(yet "Return the CharSet containing the single character `-` U+002D (HYPHEN-MINUS).") @ ClassAtom[0,0].CompileToCharSet
(yet "Return the ECMAScript Number value corresponding to _n64_.") @ INTRINSICS.Math.fround
(yet "Return the Element Size value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for _O_.[[TypedArrayName]].") @ TypedArrayElementSize
(yet "Return the Element Type value specified in <emu-xref href=\"#table-the-typedarray-constructors\"></emu-xref> for _O_.[[TypedArrayName]].") @ TypedArrayElementType
(yet "Return the List of Unicode code points _c_.") @ UnicodeMatchProperty
(yet "Return the List of Unicode code points _value_.") @ UnicodeMatchPropertyValue
(yet "Return the List, in source text order, of Unicode code points in the source text matched by this production.") @ UnicodePropertyNameCharacters[0,0].SourceText
(yet "Return the List, in source text order, of Unicode code points in the source text matched by this production.") @ UnicodePropertyNameCharacters[0,1].SourceText
(yet "Return the List, in source text order, of Unicode code points in the source text matched by this production.") @ UnicodePropertyValueCharacters[0,0].SourceText
(yet "Return the List, in source text order, of Unicode code points in the source text matched by this production.") @ UnicodePropertyValueCharacters[0,1].SourceText
(yet "Return the Number value that corresponds to _value_.") @ RawBytesToNumeric
(yet "Return the Number value that corresponds to _value_.") @ RawBytesToNumeric
(yet "Return the String value that is made from _n_ copies of _S_ appended together.") @ INTRINSICS.String.prototype.repeat
(yet "Return the String value whose code units are the elements in the List _elements_. If _codeUnits_ is empty, the empty String is returned.") @ INTRINSICS.String.fromCharCode
(yet "Return the String value whose code units are the elements in the List _stringElements_. If _stringElements_ has no elements, the empty String is returned.") @ INTRINSICS.String.raw
(yet "Return the WaiterList that is referenced by the pair (_block_, _i_).") @ GetWaiterList
(yet "Return the code point _cp_.") @ UTF16SurrogatePairToCodePoint
(yet "Return the code point matched by |IdentifierPartChar|.") @ IdentifierPart[0,0].IdentifierCodePoint
(yet "Return the code point matched by |IdentifierPartChar|.") @ RegExpIdentifierPart[0,0].RegExpIdentifierCodePoint
(yet "Return the code point matched by |IdentifierStartChar|.") @ IdentifierStart[0,0].IdentifierCodePoint
(yet "Return the code point matched by |IdentifierStartChar|.") @ RegExpIdentifierStart[0,0].RegExpIdentifierCodePoint
(yet "Return the code point whose numeric value is the CharacterValue of |RegExpUnicodeEscapeSequence|.") @ RegExpIdentifierPart[1,0].RegExpIdentifierCodePoint
(yet "Return the code point whose numeric value is the CharacterValue of |RegExpUnicodeEscapeSequence|.") @ RegExpIdentifierStart[1,0].RegExpIdentifierCodePoint
(yet "Return the code point whose numeric value is the MV of |CodePoint|.") @ UnicodeEscapeSequence[1,0].IdentifierCodePoint
(yet "Return the code point whose numeric value is the MV of |Hex4Digits|.") @ UnicodeEscapeSequence[0,0].IdentifierCodePoint
(yet "Return the empty CharSet.") @ ClassRanges[0,0].CompileToCharSet
(yet "Return the greatest (closest to +‚àû) integral Number value that is not greater than _n_.") @ INTRINSICS.Math.floor
(yet "Return the integral Number closest to _n_, preferring the Number closer to +‚àû in the case of a tie.") @ INTRINSICS.Math.round
(yet "Return the integral Number nearest _n_ in the direction of *+0*<sub>ùîΩ</sub>.") @ INTRINSICS.Math.trunc
(yet "Return the numeric value according to <emu-xref href=\"#table-controlescape-code-point-values\"></emu-xref>.") @ CharacterEscape[0,0].CharacterValue
(yet "Return the numeric value of U+0000 (NULL).") @ CharacterEscape[2,0].CharacterValue
(yet "Return the numeric value of U+0008 (BACKSPACE).") @ ClassEscape[0,0].CharacterValue
(yet "Return the numeric value of U+002D (HYPHEN-MINUS).") @ ClassAtom[0,0].CharacterValue
(yet "Return the numeric value of U+002D (HYPHEN-MINUS).") @ ClassEscape[1,0].CharacterValue
(yet "Return the remainder of dividing _i_ by 32.") @ CharacterEscape[1,0].CharacterValue
(yet "Return the result of |ComputedPropertyName| Contains _symbol_.") @ PropertyName[1,0].ComputedPropertyContains
(yet "Return the smallest (closest to -‚àû) integral Number value that is not less than _n_.") @ INTRINSICS.Math.ceil
(yet "Return the source text that was recognized as |RegularExpressionBody|.") @ RegularExpressionLiteral[0,0].BodyText
(yet "Return the source text that was recognized as |RegularExpressionFlags|.") @ RegularExpressionLiteral[0,0].FlagText
(yet "Return the string-concatenation of:\n  * 0x005c (REVERSE SOLIDUS)\n  * *\"u\"*\n  * the String representation of _n_, formatted as a four-digit lowercase hexadecimal number, padded to the left with zeroes if necessary") @ UnicodeEscape
(yet "Return the ten-element CharSet containing the characters `0` through `9` inclusive.") @ CharacterClassEscape[0,0].CompileToCharSet
(yet "Return the union of CharSets _A_ and _B_.") @ NonemptyClassRangesNoDash[1,0].CompileToCharSet
(yet "Return the union of CharSets _A_ and _B_.") @ NonemptyClassRanges[1,0].CompileToCharSet
(yet "Return the union of _D_ and _C_.") @ NonemptyClassRangesNoDash[2,0].CompileToCharSet
(yet "Return the union of _D_ and _C_.") @ NonemptyClassRanges[2,0].CompileToCharSet
(yet "Search the enclosing |Pattern| for an instance of a |GroupSpecifier| containing a |RegExpIdentifierName| which has a CapturingGroupName equal to the CapturingGroupName of the |RegExpIdentifierName| contained in |GroupName|.") @ AtomEscape[3,0].CompileAtom
(yet "Set _M_'s essential internal methods to the definitions specified in <emu-xref href=\"#sec-module-namespace-exotic-objects\"></emu-xref>.") @ ModuleNamespaceCreate
(yet "Set _P_'s essential internal methods, except for [[Call]] and [[Construct]], to the definitions specified in <emu-xref href=\"#sec-proxy-object-internal-methods-and-internal-slots\"></emu-xref>.") @ ProxyCreate
(yet "Set _m_ to the string-concatenation of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(_e_ + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String _m_.") @ INTRINSICS.Number.prototype.toPrecision
(yet "Set _m_ to the string-concatenation of the first _e_ + 1 code units of _m_, the code unit 0x002E (FULL STOP), and the remaining _p_ - (_e_ + 1) code units of _m_.") @ INTRINSICS.Number.prototype.toPrecision
(yet "Set _patternText_ to the sequence of code points resulting from interpreting each of the 16-bit elements of _stringValue_ as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.") @ IsValidRegularExpressionLiteral
(yet "Set _s_ to the code unit 0x002D (HYPHEN-MINUS).") @ INTRINSICS.Number.prototype.toPrecision
(yet "Set all of the bytes of _db_ to 0.") @ CreateByteDataBlock
(yet "Set the Synchronize event in _WL_ to _leaveEvent_.") @ LeaveCriticalSection
(yet "Set the [[DateValue]] internal slot of this Date object to _u_.") @ INTRINSICS.Date.prototype.setDate
(yet "Set the [[DateValue]] internal slot of this Date object to _u_.") @ INTRINSICS.Date.prototype.setFullYear
(yet "Set the [[DateValue]] internal slot of this Date object to _u_.") @ INTRINSICS.Date.prototype.setHours
(yet "Set the [[DateValue]] internal slot of this Date object to _u_.") @ INTRINSICS.Date.prototype.setMilliseconds
(yet "Set the [[DateValue]] internal slot of this Date object to _u_.") @ INTRINSICS.Date.prototype.setMinutes
(yet "Set the [[DateValue]] internal slot of this Date object to _u_.") @ INTRINSICS.Date.prototype.setMonth
(yet "Set the [[DateValue]] internal slot of this Date object to _u_.") @ INTRINSICS.Date.prototype.setSeconds
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setTime
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setUTCDate
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setUTCFullYear
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setUTCHours
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setUTCMilliseconds
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setUTCMinutes
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setUTCMonth
(yet "Set the [[DateValue]] internal slot of this Date object to _v_.") @ INTRINSICS.Date.prototype.setUTCSeconds
(yet "Sort _items_ using an implementation-defined sequence of calls to _SortCompare_. If any such call returns an abrupt completion, stop before performing any further calls to _SortCompare_ and return that Completion Record.") @ SortIndexedProperties
(yet "Store the individual bytes of _rawBytesModified_ into _block_, starting at _block_[_byteIndex_].") @ GetModifySetValueInBuffer
(yet "Store the individual bytes of _replacementBytes_ into _block_, starting at _block_[_indexedPosition_].") @ INTRINSICS.Atomics.compareExchange
(yet "The calling agent is in the critical section for _WL_.") @ AddWaiter
(yet "The calling agent is in the critical section for _WL_.") @ LeaveCriticalSection
(yet "The calling agent is in the critical section for _WL_.") @ NotifyWaiter
(yet "The calling agent is in the critical section for _WL_.") @ RemoveWaiter
(yet "The calling agent is in the critical section for _WL_.") @ RemoveWaiters
(yet "The calling agent is in the critical section for _WL_.") @ SuspendAgent
(yet "The calling agent is not in the critical section for any WaiterList.") @ EnterCriticalSection
(yet "The code points `/` or any |LineTerminator| occurring in the pattern shall be escaped in _S_ as necessary to ensure that the string-concatenation of *\"/\"*, _S_, *\"/\"*, and _F_ can be parsed (in an appropriate lexical context) as a |RegularExpressionLiteral| that behaves identically to the constructed regular expression. For example, if _P_ is *\"/\"*, then _S_ could be *\"\\\\/\"* or *\"\\\\u002F\"*, among other possibilities, but not *\"/\"*, because `///` followed by _F_ would be parsed as a |SingleLineComment| rather than a |RegularExpressionLiteral|. If _P_ is the empty String, this specification can be met by letting _S_ be *\"(?:)\"*.") @ EscapeRegExpPattern
(yet "The following Set will succeed, since formal parameters mapped by arguments objects are always writable.") @ ArgumentsExoticObject.DefineOwnProperty
(yet "The following Set will succeed, since formal parameters mapped by arguments objects are always writable.") @ ArgumentsExoticObject.Set
(yet "The following loop will terminate.") @ EvalDeclarationInstantiation
(yet "The mathematical value of _A_'s *\"length\"* property is _n_ + 1.") @ RegExpBuiltinExec
(yet "The mathematical value of _array_'s *\"length\"* property is _numberOfArgs_.") @ INTRINSICS.Array
(yet "The next step never returns an abrupt completion because Type(_v_) is String.") @ INTRINSICS.Date
(yet "The next step never returns an abrupt completion because _localEnv_.[[ThisBindingStatus]] is not ~initialized~.") @ OrdinaryCallBindThis
(yet "There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.") @ GetModifySetValueInBuffer
(yet "There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.") @ GetValueFromBuffer
(yet "There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.") @ SetValueInBuffer
(yet "There is more than one `*` import that includes the requested name.") @ SourceTextModuleRecord.ResolveExport
(yet "This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent.") @ CyclicModuleRecord.Evaluate
(yet "This is a circular import request.") @ SourceTextModuleRecord.ResolveExport
(yet "This is only possible for getter/setter pairs.") @ ClassTail[0,0].ClassDefinitionEvaluation
(yet "This is only possible for getter/setter pairs.") @ ClassTail[0,1].ClassDefinitionEvaluation
(yet "This is only possible for getter/setter pairs.") @ ClassTail[0,2].ClassDefinitionEvaluation
(yet "This is only possible for getter/setter pairs.") @ ClassTail[0,3].ClassDefinitionEvaluation
(yet "Type(_firstArgument_) is Object and _firstArgument_ does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.") @ INTRINSICS._TypedArray_
(yet "Type(_value_) is BigInt if IsBigIntElementType(_type_) is *true*; otherwise, Type(_value_) is Number.") @ GetModifySetValueInBuffer
(yet "Type(_value_) is BigInt if IsBigIntElementType(_type_) is *true*; otherwise, Type(_value_) is Number.") @ SetValueInBuffer
(yet "Wait until no agent is in the critical section for _WL_, then enter the critical section for _WL_ (without allowing any other agent to enter).") @ EnterCriticalSection
(yet "We've reached the starting point of an `export *` circularity.") @ SourceTextModuleRecord.GetExportedNames
(yet "When _M_.[[Environment]] is instantiated it will have a direct binding for _N2_.") @ ModuleEnvironmentRecord.CreateImportBinding
(yet "While _finalizationRegistry_.[[Cells]] contains a Record _cell_ such that _cell_.[[WeakRefTarget]] is ~empty~, an implementation may perform the following steps:\n  1. Choose any such _cell_.\n  1. Remove _cell_ from _finalizationRegistry_.[[Cells]].\n  1. Perform ? HostCallJobCallback(_callback_, *undefined*, ¬´ _cell_.[[HeldValue]] ¬ª).") @ CleanupFinalizationRegistry
(yet "[YET] Number.prototype.toLocaleString") @ INTRINSICS.Number.prototype.toLocaleString
(yet "[YET] String.prototype.toLocaleLowerCase") @ INTRINSICS.String.prototype.toLocaleLowerCase
(yet "[YET] String.prototype.toLocaleUpperCase") @ INTRINSICS.String.prototype.toLocaleUpperCase
(yet "[YET] String.prototype.toUpperCase") @ INTRINSICS.String.prototype.toUpperCase
(yet "_A_ and _B_ each contain exactly one character.") @ CharacterRange
(yet "_C_ is an instance of the production <emu-grammar>CaseClause : `case` Expression `:` StatementList?</emu-grammar>.") @ CaseClauseIsSelected
(yet "_O_ has [[ViewedArrayBuffer]] and [[ArrayLength]] internal slots.") @ INTRINSICS.get TypedArray.prototype.length
(yet "_O_ has all of the internal slots of a For-In Iterator Instance (<emu-xref href=\"#sec-properties-of-for-in-iterator-instances\"></emu-xref>).") @ INTRINSICS.ForInIteratorPrototype.next
(yet "_W_ has _byteLocation_ in its range.") @ ComposeWriteEventBytes
(yet "_W_ is equivalent to AgentSignifier().") @ SuspendAgent
(yet "_W_ is not on the list of waiters in _WL_.") @ INTRINSICS.Atomics.wait
(yet "_W_ is not on the list of waiters in any WaiterList.") @ AddWaiter
(yet "_W_ is on the list of waiters in _WL_.") @ RemoveWaiter
(yet "_W_ is on the list of waiters in _WL_.") @ SuspendAgent
(yet "_Ws_ is a List of WriteSharedMemory or ReadModifyWriteSharedMemory events with length equal to _R_.[[ElementSize]].") @ ValueOfReadEvent
(yet "_ch_ is a UTF-16 code unit.") @ Canonicalize
(yet "_envRec_ has a binding for the name that is the value of _N_.") @ DeclarativeEnvironmentRecord.DeleteBinding
(yet "_finalizationRegistry_ has [[Cells]] and [[CleanupCallback]] internal slots.") @ CleanupFinalizationRegistry
(yet "_formals_ does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.") @ CreateMappedArgumentsObject
(yet "_fromBlock_ and _toBlock_ are distinct values.") @ CopyDataBlockBytes
(yet "_generatorBody_ is an Abstract Closure with no parameters.") @ AsyncGeneratorStart:cont0
(yet "_generatorBody_ is an Abstract Closure with no parameters.") @ GeneratorStart:cont0
(yet "_groupNames_ has _n_ - 1 elements.") @ MakeMatchIndicesIndexPairArray
(yet "_homeObject_ is an ordinary, extensible object with no non-configurable properties.") @ DefineMethodProperty
(yet "_i_ and _i_ + 3 are valid byte offsets within the memory of _block_.") @ GetWaiterList
(yet "_index_ is a non-negative integer which is ‚â§ the number of characters in _inputChars_.") @ Pattern[0,0].CompilePattern:clo0
(yet "_intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.") @ GetPrototypeFromConstructor
(yet "_intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.") @ OrdinaryCreateFromConstructor
(yet "_lead_ is a <emu-xref href=\"#leading-surrogate\"></emu-xref> and _trail_ is a <emu-xref href=\"#trailing-surrogate\"></emu-xref>.") @ UTF16SurrogatePairToCodePoint
(yet "_lhs_ binds a single name.") @ ForIn/OfBodyEvaluation
(yet "_map_ contains a formal parameter mapping for _P_.") @ ArgumentsExoticObject.Get
(yet "_match_.[[EndIndex]] is an integer between _match_.[[StartIndex]] and the length of _S_, inclusive.") @ GetMatchIndexPair
(yet "_match_.[[EndIndex]] is an integer between _match_.[[StartIndex]] and the length of _S_, inclusive.") @ GetMatchString
(yet "_match_.[[StartIndex]] is a non-negative integer less than or equal to the length of _S_.") @ GetMatchIndexPair
(yet "_match_.[[StartIndex]] is a non-negative integer less than or equal to the length of _S_.") @ GetMatchString
(yet "_module_ does not provide the direct binding for this export.") @ SourceTextModuleRecord.ResolveExport
(yet "_module_ has been linked and declarations in its module environment have been instantiated.") @ SourceTextModuleRecord.ExecuteModule
(yet "_module_ imports a specific binding for this export.") @ SourceTextModuleRecord.GetExportedNames
(yet "_module_ imports a specific binding for this export.") @ SourceTextModuleRecord.ResolveExport
(yet "_module_ occurs exactly once in _stack_.") @ InnerModuleEvaluation
(yet "_module_ occurs exactly once in _stack_.") @ InnerModuleLinking
(yet "_module_ provides the direct binding for this export.") @ SourceTextModuleRecord.GetExportedNames
(yet "_module_ provides the direct binding for this export.") @ SourceTextModuleRecord.ResolveExport
(yet "_module_.[[AsyncEvaluation]] is *false* and was never previously set to *true*.") @ InnerModuleEvaluation
(yet "_n_ and _d_ are finite and non-zero.") @ Number::remainder
(yet "_nx_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.") @ INTRINSICS.Math.atan2
(yet "_ny_ is finite and is neither *+0*<sub>ùîΩ</sub> nor *-0*<sub>ùîΩ</sub>.") @ INTRINSICS.Math.atan2
(yet "_obj_ is an extensible ordinary object with no own properties.") @ FromPropertyDescriptor
(yet "_obj_ is an extensible ordinary object with no own properties.") @ INTRINSICS.Object.fromEntries
(yet "_object_ is an ordinary, extensible object with no non-configurable properties.") @ PropertyDefinition[0,0].PropertyDefinitionEvaluation
(yet "_object_ is an ordinary, extensible object with no non-configurable properties.") @ PropertyDefinition[2,0].PropertyDefinitionEvaluation
(yet "_op_ is `|`. Let _resultByte_ be the result of applying the bitwise inclusive OR operation to _xByte_ and _yByte_.") @ ByteListBitwiseOp
(yet "_p_ is a Unicode <emu-not-ref>property name</emu-not-ref> or property alias listed in the ‚Äú<emu-not-ref>Property name</emu-not-ref> and aliases‚Äù column of <emu-xref href=\"#table-nonbinary-unicode-properties\"></emu-xref> or <emu-xref href=\"#table-binary-unicode-properties\"></emu-xref>.") @ UnicodeMatchProperty
(yet "_p_ is a Unicode property name or property alias listed in the ‚ÄúProperty name and aliases‚Äù column of <emu-xref href=\"#table-nonbinary-unicode-properties\"></emu-xref>.") @ UnicodePropertyValueExpression[0,0].CompileToCharSet
(yet "_p_ is a binary Unicode property or binary property alias listed in the ‚ÄúProperty name and aliases‚Äù column of <emu-xref href=\"#table-binary-unicode-properties\"></emu-xref>.") @ UnicodePropertyValueExpression[1,0].CompileToCharSet
(yet "_p_ is a canonical, unaliased Unicode property name listed in the ‚ÄúCanonical property name‚Äù column of <emu-xref href=\"#table-nonbinary-unicode-properties\"></emu-xref>.") @ UnicodeMatchPropertyValue
(yet "_requiredModule_.[[Status]] is ~evaluating~ if and only if _requiredModule_ is in _stack_.") @ InnerModuleEvaluation
(yet "_requiredModule_.[[Status]] is ~linking~ if and only if _requiredModule_ is in _stack_.") @ InnerModuleLinking
(yet "_restSub_ is a possibly empty List.") @ SubstitutionTemplate[0,0].ArgumentListEvaluation
(yet "_result_ has [[TypedArrayName]] and [[ContentType]] internal slots.") @ TypedArraySpeciesCreate
(yet "_result_ is a normal completion with a value of ~unused~. The possible sources of this value are Await or, if the async function doesn't await anything, step <emu-xref href=\"#step-asyncblockstart-return-undefined\"></emu-xref> above.") @ AsyncBlockStart:cont1
(yet "_unfiltered_ is either a String, Number, Boolean, Null, or an Object that is defined by either an |ArrayLiteral| or an |ObjectLiteral|.") @ INTRINSICS.JSON.parse
(yet "_v_ is a property value or property value alias for Unicode property _p_ listed in the ‚ÄúProperty value and aliases‚Äù column of <emu-xref href=\"#table-unicode-general-category-values\"></emu-xref> or <emu-xref href=\"#table-unicode-script-values\"></emu-xref>.") @ UnicodeMatchPropertyValue
(yet "_values_ is now an empty List.") @ INTRINSICS.TypedArray.from
(yet "_values_ is now an empty List.") @ InitializeTypedArrayFromList
(yet "_xBytes_ and _yBytes_ have the same number of elements.") @ ByteListBitwiseOp
(yet "_x_ and _y_ are finite and non-zero.") @ Number::lessThan
(yet "and _Desc_.[[Writable]] is *false*, then\n  1. Set _newArgDesc_ to a copy of _Desc_.\n  1. Set _newArgDesc_.[[Value]] to ! Get(_map_, _P_).") @ ArgumentsExoticObject.DefineOwnProperty
(yet "append the code unit 0x0064 (LATIN SMALL LETTER D) as the last code unit of _result_.") @ INTRINSICS.get RegExp.prototype.flags
(yet "append the code unit 0x0067 (LATIN SMALL LETTER G) as the last code unit of _result_.") @ INTRINSICS.get RegExp.prototype.flags
(yet "append the code unit 0x0069 (LATIN SMALL LETTER I) as the last code unit of _result_.") @ INTRINSICS.get RegExp.prototype.flags
(yet "append the code unit 0x006D (LATIN SMALL LETTER M) as the last code unit of _result_.") @ INTRINSICS.get RegExp.prototype.flags
(yet "append the code unit 0x0073 (LATIN SMALL LETTER S) as the last code unit of _result_.") @ INTRINSICS.get RegExp.prototype.flags
(yet "append the code unit 0x0075 (LATIN SMALL LETTER U) as the last code unit of _result_.") @ INTRINSICS.get RegExp.prototype.flags
(yet "append the code unit 0x0079 (LATIN SMALL LETTER Y) as the last code unit of _result_.") @ INTRINSICS.get RegExp.prototype.flags
(yet "let _T_ be the String value that is a copy of _S_ with leading white space removed.") @ TrimString
(yet "let _T_ be the String value that is a copy of _S_ with trailing white space removed.") @ TrimString
(yet "let _filler_ be the String value consisting solely of the code unit 0x0020 (SPACE).") @ StringPad
(yet "let _gap_ be the String value containing _spaceMV_ occurrences of the code unit 0x0020 (SPACE).") @ INTRINSICS.JSON.stringify
(yet "let _input_ be a List whose elements are the code units that are the elements of _S_.") @ RegExpBuiltinExec
(yet "let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).") @ INTRINSICS.Number.prototype.toFixed
(yet "let _milli_ be msFromTime(_t_).") @ INTRINSICS.Date.prototype.setHours
(yet "let _milli_ be msFromTime(_t_).") @ INTRINSICS.Date.prototype.setMinutes
(yet "let _milli_ be msFromTime(_t_).") @ INTRINSICS.Date.prototype.setSeconds
(yet "let _milli_ be msFromTime(_t_).") @ INTRINSICS.Date.prototype.setUTCHours
(yet "let _milli_ be msFromTime(_t_).") @ INTRINSICS.Date.prototype.setUTCMinutes
(yet "let _milli_ be msFromTime(_t_).") @ INTRINSICS.Date.prototype.setUTCSeconds
(yet "let _rawValue_ be a List whose elements are bytes from _block_ at indices _byteIndex_ (inclusive) through _byteIndex_ + _elementSize_ (exclusive).") @ GetValueFromBuffer
(yet "or an integral Number, return _n_.") @ INTRINSICS.Math.round
(yet "perform any host-defined steps for reporting the error.") @ HostEnqueueFinalizationRegistryCleanupJob
(yet "return the BigInt value that corresponds to _intValue_.") @ RawBytesToNumeric
(yet "return the Number value that corresponds to _intValue_.") @ RawBytesToNumeric
(yet "return the String value consisting of the code unit whose value is _cp_.") @ UTF16EncodeCodePoint
(yet "reverse the order of the elements of _rawBytes_.") @ RawBytesToNumeric
(yet "set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.") @ GetModifySetValueInBuffer
(yet "set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.") @ GetValueFromBuffer
(yet "set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.") @ SetValueInBuffer
(yet "store the individual bytes of _rawBytes_ into _block_, starting at _block_[_byteIndex_].") @ SetValueInBuffer
(yet "throw a *TypeError* exception because the structure is cyclical.") @ SerializeJSONArray
(yet "throw a *TypeError* exception because the structure is cyclical.") @ SerializeJSONObject