"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw x => 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw 0 ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += x => 0 ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) throw 0 , 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { x : ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; 0 !== 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var y = { } ; var retVal ; y [ Symbol . toPrimitive ] = function ( ) { return retVal ; } ; retVal = 86 ; assert . sameValue ( 1 + y , 87 ) ; assert . sameValue ( 's' + y , 's86' ) ; assert . sameValue ( y + 's' , '86s' ) ; retVal = 'str' ; assert . sameValue ( 0 + y , '0str' ) ; assert . sameValue ( y + 0 , 'str0' ) ; assert . sameValue ( 's' + y , 'sstr' ) ; assert . sameValue ( y + 's' , 'strs' ) ; retVal = Symbol . toPrimitive ; assert . throws ( TypeError , function ( ) { 0 + y ; } , 'ToNumber(Symbol): right-hand side' ) ; { } assert . throws ( TypeError , function ( ) { '' + y ; } , 'ToString(Symbol): right-hand side' ) ; assert . throws ( TypeError , function ( ) { y + '' ; } , 'ToString(Symbol): left-hand size' ) ; 
