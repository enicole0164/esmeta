"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = null ; { } 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var thisVals = [ ] ; var nextResult = { done : false , value : { } } ; var nextNextResult = { done : false , value : { } } ; var mapFn = function ( ) { thisVals . push ( this ) ; } ; var items = { } ; var thisVal = { } ; items [ Symbol . iterator ] = { groups : '' } ; Array . from ( items , mapFn , thisVal ) ; assert . sameValue ( thisVals . length , 2 , 'The value of thisVals.length is expected to be 2' ) ; assert . sameValue ( thisVals [ 0 ] , thisVal , 'The value of thisVals[0] is expected to equal the value of thisVal' ) ; 
