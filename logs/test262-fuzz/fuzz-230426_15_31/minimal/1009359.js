"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = async function * x ( ... x ) { } ; assert . notSameValue = class { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( async x => 0 ) ; else ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } async x => 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( typeof String . prototype . at , 'function' ) ; assert . throws ( TypeError , ( ) => { String . prototype . at . call ( undefined ) ; } , '`String.prototype.at.call(undefined)` throws TypeError' ) ; do ; while ( 0 ) ; 
