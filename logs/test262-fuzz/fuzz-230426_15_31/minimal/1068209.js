"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; x => 0 ; assert . notSameValue = function x ( ) { } ; { } assert . _toString = { ownKeys : ( ) => { throw 0 ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var result = true ; try { decodeURIComponent ( "%" ) ; result = false ; } catch ( e ) { if ( ( e instanceof URIError ) !== true ) { result = false ; } } try { decodeURIComponent ( "%A" ) ; result = false ; } catch ( e ) { if ( ( e instanceof URIError ) !== true ) { result = false ; } } ; try { decodeURIComponent ( '' ) ; result = false ; } catch ( e ) { if ( ( e instanceof URIError ) !== true ) { result = false ; } } if ( result !== true ) if ( 0 ) ; else ; 
