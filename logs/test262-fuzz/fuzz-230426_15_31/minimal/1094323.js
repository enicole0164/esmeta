"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( 0 ) ; else ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = { set : false } ; assert . throws = async function * x ( x , ) { } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw Test262Error ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var __evaluated ; var __condition = 0 , __odds = 0 ; __evaluated = eval ( "while(__condition < 10) { __condition++; if (((''+__condition/2).split('.')).length>1) continue; __odds++;}" ) ; if ( __evaluated ) { throw new Test262Error ( '#2: __evaluated === 4. Actual:  __evaluated ===' + __evaluated ) ; } 
