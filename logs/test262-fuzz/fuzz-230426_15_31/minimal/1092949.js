"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } } ; assert . sameValue = function * ( ) { } ; assert . notSameValue = [ 0 , ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func ) ; if ( message ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } finally { } return ; } { ; } throw new Test262Error ( message ) ; } ; 0 ; function Test262Error ( message ) { this . message = message || "" ; } if ( 0 ) ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( typeof Array . prototype . flat , 'function' ) ; assert . throws ( TypeError , function ( ) { [ ] . flat . call ( null ) ; } , 'null value' ) ; assert . throws ( TypeError , function ( ) { [ ] . flat . call ( ) ; } ) ; switch ( 0 ) { } 
