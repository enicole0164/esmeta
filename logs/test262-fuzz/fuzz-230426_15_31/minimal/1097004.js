"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; x => { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) throw 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else var x ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + { 0 : 0 } ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { } finally { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { index : null } ; } assert . sameValue ( typeof Symbol . keyFor , 'function' ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( null ) ; } , 'null' ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( undefined ) ; } , 'undefined' ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( '1' ) ; } , 'number' ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( '' ) ; } , 'string' ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( { } ) ; } , 'ordinary object' ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( [ ] ) ; } , { 1 : null } ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( arguments ) ; } , 'arguments exotic object' ) ; var subject = Object ( Symbol ( 's' ) ) ; assert . throws ( TypeError , function ( ) { Symbol . keyFor ( subject ) ; } , 'symbol object' ) ; 
