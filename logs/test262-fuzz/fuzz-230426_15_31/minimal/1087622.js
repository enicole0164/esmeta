"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } ; throw new Test262Error ( message ) ; } assert . _isSameValue = { index : '' } ; assert . sameValue = { lastIndex : true } ; assert . _toString = { construct : function * ( x ) { } } ; class x { } 0 ; async x => 0 ; function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { try { } finally { } } var iter ; var executionorder = 0n ; var valueisset = false ; async function * g ( ) { iter . return ( ) . then ( ) . catch ( ) ; ; yield ; ; } iter = g ( ) ; iter . next ( ) . then ( function ( result ) { assert . sameValue ( ++ executionorder , 1 ) ; var [ ] = 0 , x ; assert . sameValue ( result . done , false ) ; { } } ) . catch ( $DONE ) ; 
