"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { ; } return a !== a && b !== b ; } ; assert . sameValue = async function ( ) { } ; assert . notSameValue = x => 0 ; 0 ? 0 : 0 ; assert . _toString = async function * x ( x , ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; x => 0 ; function $DONOTEVALUATE ( ) { { } } var iterNextValThrows = { } ; var returnCount = 0 ; var poisonedVal = { done : false } ; var error = new Test262Error ( ) ; Object . defineProperty ( poisonedVal , 'value' , { get : function ( ) { throw error ; } } ) ; iterNextValThrows [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedVal ; } , return : function ( ) { returnCount += 1 ; } } ; } ; Promise . race ( iterNextValThrows ) ; assert . sameValue ( returnCount , 0 ) ; 
