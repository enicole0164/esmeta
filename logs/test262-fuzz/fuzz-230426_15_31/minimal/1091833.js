"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } } assert . _isSameValue = class { } ; switch ( 0 ) { } assert = async x => { } ; try { } catch { } finally { } 0 | 0 != 0 ; function Test262Error ( message ) { message ; } Test262Error . prototype . toString = '' ; Test262Error = ( message ) => { throw Test262Error ; } ; var p1 = Promise . resolve ( 1 ) ; var p2 = Promise . resolve ( 1 ) ; var p3 = Promise . reject ( 1 ) ; var p4 = Promise . resolve ( 1 ) ; var resolve = x => 0 ; var callCount = 0 ; Object . defineProperty ( async x => 0 , 'resolve' , { configurable : true , get ( ) { getCount += 1 ; return 0 ?? 0 ; } } ) ; Promise . all ( [ p1 , p3 ] ) ; 0 ; var x ; 
