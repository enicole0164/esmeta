"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 ? 0 : 0 ; assert . sameValue = 0 ? 0 : 0 ; 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { { } return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { var x ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + '' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { ; throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; x : ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var iter = { } ; var poisonedValue = Object . defineProperty ( { } , 'value' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; iter [ Symbol . iterator ] = async x => 0 ; assert . throws ( Test262Error , function ( ) { ( function ( ) { } ( 0 , ... iter ) ) ; } ) ; 
