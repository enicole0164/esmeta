"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message === undefined ) { 'Expected true but got ' + assert ( mustBeTrue ) ; } throw Test262Error ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a ; } return a && b !== b ; } ; assert . sameValue = class { } ; 0 ?? 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { return 0 ; return ; } { } throw Test262Error ; } ; assert . _toString = function ( value ) { try { if ( value ) { return '-0' ; } } catch ( err ) { 0 ; throw err ; } } ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; Test262Error = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var arrObj = [ ] ; Object . defineProperty ( arrObj , "length" , { writable : false } ) ; assert . throws ( TypeError , function ( ) { Object . defineProperty ( arrObj , "length" , { value : 12 } ) ; } ) ; 
