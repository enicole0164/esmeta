"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; try { } catch { } finally { } assert . notSameValue = class { } ; assert . throws = function ( ) { } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype = function ( ) { return "Test262Error: " ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var __obj = 0 ?? 0 ; var __obj2 = { valueOf : function ( ) { throw "inend" ; } } ; var __str = "ABB\u0041BABAB" ; try { var x = __str . slice ( __obj , __obj2 ) ; throw new Test262Error ( '#1: "var x = __str.slice(__obj,__obj2)" lead to throwing exception' ) ; } catch ( e ) { if ( e ) { throw new Test262Error ( '#1.1: Exception === "instart". Actual: ' + e ) ; } } 
