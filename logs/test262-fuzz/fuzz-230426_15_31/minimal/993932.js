"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } var x ; throw new Test262Error ( message ) ; } if ( 0 ) ; else ; assert . sameValue = function ( ) { } ; assert . notSameValue = async function * ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) return 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== { get : true } ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; throw 0 ; throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = { 0 : 0 } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var accessed = false ; function callbackfn ( prevVal , curVal , idx , obj ) { if ( idx > 0 ) { accessed = true ; } if ( idx === 0 ) { throw new Error ( "Exception occurred in callbackfn" ) ; } } var obj = { 1 : 11 , 4 : 10 , 10 : 8 , length : 20 } ; assert . throws ( Error , function ( ) { Array . prototype . reduce . call ( obj , callbackfn , 1 ) ; } ) ; assert . sameValue ( accessed , false , 'accessed' ) ; 
