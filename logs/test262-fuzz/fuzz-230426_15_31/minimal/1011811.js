"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { } ; assert . sameValue = function ( ) { } ; if ( 0 ) ; else ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; x : ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var poisoned = 0 ; var poison = { toString ( ) { poisoned += 1 ; throw 'Should not call toString on this/replaceValue' ; } , } ; var searchValue = { [ Symbol . match ] : false , flags : 'g' , [ Symbol . replace ] ( ) { throw new Test262Error ( ) ; } , toString ( ) { throw 'Should not call toString on searchValue' ; } } ; assert . throws ( Test262Error , function ( ) { '' . replaceAll . call ( poison , searchValue , poison ) ; } ) ; assert . sameValue ( poisoned , 0 ) ; 
