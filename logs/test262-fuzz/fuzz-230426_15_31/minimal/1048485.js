"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = function * ( ) { } ; if ( 0 , 0 , 0 ) ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw 0 && 0 ; throw new Test262Error ( message ) ; } ; assert . throws = '' ; assert . _toString = { [ Symbol . species ] : async function * ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw /a/ ; } assert . sameValue ( Number . isNaN ( "NaN" ) , false , "string" ) ; assert . sameValue ( Number . isNaN ( [ NaN ] ) , false , "[NaN]" ) ; assert . sameValue ( Number . isNaN ( new Number ( NaN ) ) , false , "Number object" ) ; assert . sameValue ( Number . isNaN ( false ) , false , "false" ) ; assert . sameValue ( Number . isNaN ( true ) , false , "true" ) ; assert . sameValue ( Number . isNaN ( undefined ) , false , "undefined" ) ; assert . sameValue ( Number . isNaN ( null ) , false , "null" ) ; assert . sameValue ( Number . isNaN ( Symbol ( "1" ) ) , false , "symbol" ) ; assert . sameValue ( Number . isNaN ( ) , false , "no arg" ) ; 
