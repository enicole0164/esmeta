"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } throw Test262Error ; } ; assert . throws = function ( expectedErrorConstructor ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } try { func ( ) ; } catch ( thrown ) { x : ; return ; } throw new Test262Error ( message ) ; } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert ( eval ( '1; async function f() {}' ) , 1 ) ; 
