"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { async x => 0 ; } throw new Test262Error ( message ) ; } var x ; x => { } ; assert . notSameValue = { prototype : 0 } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { debugger ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { x : 0 ; return ; } return ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } var x ; 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var accessed = false ; function callbackfn ( prevVal , curVal , idx , obj ) { if ( idx <= 1 ) { accessed = true ; } } var arr = [ 0 , , 2 ] ; { } assert . throws ( Test262Error , function ( ) { arr . reduceRight ( async function ( ) { } , "initialValue" ) ; } ) ; 0 ; 
