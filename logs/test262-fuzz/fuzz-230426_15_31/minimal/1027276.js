"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } var x ; throw new Test262Error ( message ) ; } ; if ( 0 ) ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) try { } catch { } finally { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + { groups : function ( x ) { } } ; throw new Test262Error ( message ) ; } ; assert . _toString = { [ Symbol . unscopables ] : '' } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var substring = String . prototype . substring ; assert . sameValue ( typeof substring , 'function' ) ; assert . throws ( TypeError , function ( ) { substring . call ( undefined , 0 , 1 ) ; } , 'undefined' ) ; assert . throws ( TypeError , function ( ) { substring . call ( null , 0 , 1 ) ; } , 'null' ) ; 
