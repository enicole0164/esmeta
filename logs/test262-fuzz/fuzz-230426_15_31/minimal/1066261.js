"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = { 1 : async function ( x ) { } } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = { } ; assert . _toString = [ ] ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { return 0 ; } else debugger ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var obj = { [ Symbol . iterator ] ( ) { return { next ( ) { return { value : 1 , done : false } ; } , return ( ) { return 1 ; } } ; } } ; async function * asyncg ( ) { yield * obj ; } var iter = asyncg ( ) ; iter . next ( ) . then ( function ( result ) { iter . return ( ) . then ( function ( result ) { throw new Test262Error ( "Promise should be rejected, got: " + result . value ) ; } , this ) . catch ( $DONE ) ; } ) . catch ( $DONE ) ; 
