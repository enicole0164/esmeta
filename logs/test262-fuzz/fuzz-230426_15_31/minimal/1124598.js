"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 ; ; assert . notSameValue = async function * x ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( 0 ) ; else ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { throw 0 ; return ; } x : var { ... x } = 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = { message : async function ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } let limit = { toString ( ) { } , valueOf ( ) { throw new Test262Error ( ) ; } } ; assert . throws ( Test262Error , ( ) => { "" . split ( "" , limit ) ; } ) ; 
