"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = x => 0 ; var x ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; return ; } throw new Test262Error ( message ) ; } ; assert . _toString = { groups : 0 } ; function Test262Error ( message ) { message || "" ; } x => 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { String . prototype . repeat . call ( 0 < 0 >>> 0 ) ; } ) ; 
