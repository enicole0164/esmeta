"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert = { 1 : function * ( x ) { } } ; assert . sameValue = 0 & 0 ? 0 : 0 ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName ; 0 ; if ( message === undefined ) { '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else try { } catch { } finally { } return ; } message += 'Expected a ' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { throw 0 , 0 ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error = { hasIndices : true } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , "Array.prototype.shift.call('')" ) ; assert . throws ( TypeError , ( ) => { Array . prototype . shift . call ( 'abc' ) ; } , "Array.prototype.shift.call('abc')" ) ; try { } finally { } { } 
