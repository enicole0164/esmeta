"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { value : async function ( x ) { } } ; x => 0 ; async x => 0 ; 0 | 0 & 0 ; assert . _toString = function ( value ) { var x ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { writable : '' } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var array = [ "first" , "second" ] ; Object . defineProperty ( array , { [ Symbol . toPrimitive ] : false } , { get : class { } } ) ; array . reverse ( ) ; assert . sameValue ( ( 0 in array ) , false , "Indexed property '0' not present" ) ; assert . sameValue ( ( 1 in array ) , true , "Indexed property '1' present" ) ; assert . sameValue ( array [ 1 ] , "first" , "Indexed property '1' value correct" ) ; 
