"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } } ; assert . sameValue = function ( actual , expected , message ) { debugger ; if ( message ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) ; throw new Test262Error ( message ) ; } ; assert . notSameValue = { } ; assert . throws = function * ( ) { } ; assert . _toString = function * ( ) { } ; function Test262Error ( message ) { this . message = message ; } Test262Error . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw Test262Error ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var __obj = { valueOf : function ( ) { throw "instart" ; } } ; var __obj2 = { valueOf : function ( ) { throw "inend" ; } } ; var __str = "ABB\u0041BABAB" ; try { var x = __str . substring ( __obj , __obj2 ) ; throw new Test262Error ( '#1: "var x = __str.substring(__obj,__obj2)" lead to throw exception' ) ; } catch ( e ) { if ( e !== "instart" ) { throw new Test262Error ( '#1.1: Exception === "instart". Actual: ' + e ) ; } } 
