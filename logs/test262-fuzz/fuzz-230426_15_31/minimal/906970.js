"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 ; } return a !== a ; } ; if ( 0 ) ; assert . notSameValue = function ( actual , message ) { if ( ! assert . _isSameValue ( actual ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + '», «' + assert . _toString ( unexpected ) ; throw Test262Error ; } ; 0 || 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } try { var s1 = { x : 1 } ; s1 . valueOf = Number . prototype . valueOf ; var v1 = s1 . valueOf ( ) ; throw new Test262Error ( '#1: Number.prototype.valueOf on not a Number object should throw TypeError' ) ; } catch ( e ) { assert ( e instanceof TypeError ) ; } try { var s2 = { x : 1 } ; s2 . myValueOf = Number . prototype . valueOf ; var v2 = s2 . myValueOf ( ) ; throw Test262Error ; } catch ( e ) { assert ( e instanceof TypeError , 'The result of evaluating (e instanceof TypeError) is expected to be true' ) ; } 
