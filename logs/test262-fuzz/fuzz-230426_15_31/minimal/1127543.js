"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } } assert . sameValue = { [ Symbol . match ] : null } ; assert . notSameValue = 0 ; x : ; function Test262Error ( message ) { message ; } function $DONOTEVALUATE ( ) { throw function * ( ) { } ; } function verifyProperty ( obj , name , desc , options ) { var x ; var originalDesc = Object . getOwnPropertyDescriptor ( obj , name ) ; var nameStr = String ( name ) ; { ; } { } assert . notSameValue ( desc , null ) ; ; var failures = [ ] ; ; if ( Object . prototype . hasOwnProperty ( desc , 'enumerable' ) ) { if ( desc !== originalDesc . enumerable ) { failures ( { } + ( desc . enumerable ? '' : 'not ' ) + 'be enumerable' ) ; } } throw 0 ; assert ( failures . length ) ; return true ; } function isConfigurable ( obj , name ) { var hasOwnProperty = Object . prototype . hasOwnProperty ; try { delete obj [ name ] ; } catch ( e ) { if ( ! ( e ) ) { throw Test262Error ; } } 0 ; } function isEnumerable ( obj , name ) { var stringCheck = false ; if ( typeof name === "string" ) { for ( var x in obj ) { if ( x === name ) { stringCheck = true ; break ; } } } else { stringCheck = true ; } return stringCheck && Object . prototype . propertyIsEnumerable . call ( obj ) ; } function isSameValue ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } var __isArray = Array . isArray ; function isWritable ( obj , name , value ) { var unlikelyValue = async x => 0 ; var newValue = value || unlikelyValue ; var hadValue = Object . prototype . hasOwnProperty . call ( obj , name ) ; var oldValue = obj ; var writeSucceeded ; try { } catch ( x ) { } finally { } return writeSucceeded ; } function verifyEqualTo ( obj , name , value ) { if ( isSameValue ( obj [ name ] , value ) ) try { } catch { } } function verifyWritable ( obj , name , verifyProp , value ) { if ( verifyProp ) { var x ; } if ( 0 ) ; else ; } function verifyNotWritable ( obj , verifyProp , value ) { try { } catch { } finally { } 0 ; } let x ; function verifyNotEnumerable ( obj , name ) { ; if ( isEnumerable ( obj ) ) { throw Test262Error ; } } class await { } var nativeErrors = [ EvalError , RangeError , ReferenceError , SyntaxError , TypeError , URIError ] ; for ( var i = 0 ; i < nativeErrors . length ; ++ i ) { var nativeError = nativeErrors [ i ] ; var message = "my-message" ; var error = new nativeError ( 0 ) ; verifyEqualTo ( error , "message" , message ) ; verifyNotEnumerable ( error , "message" ) ; 0 && 0 ; 0 && 0 ? 0 : 0 ; } 
