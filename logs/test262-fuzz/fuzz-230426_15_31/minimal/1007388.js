"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 'Expected true but got ' ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } x => 0 ; } ; assert . notSameValue = { setPrototypeOf : null } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; var x ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown || thrown === null ) { return ; throw new Test262Error ( message ) ; } else while ( 0 ) ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( typeof String . prototype . replaceAll , 'function' , 'function must exist' ) ; var poisoned = 0 ; var poison = { toString ( ) { poisoned += 1 ; throw 'Should not call toString on replaceValue' ; } , } ; var thisValueCalled = 0 ; var thisValue = { toString ( ) { thisValueCalled += 1 ; return '' ; } } ; var called = 0 ; var searchValue = { toString ( ) { called += 1 ; throw new Test262Error ( ) ; } } ; assert . throws ( Test262Error , function ( ) { '' . replaceAll . call ( thisValue , searchValue , poison ) ; } , 'custom' ) ; assert . sameValue ( called , 1 ) ; assert . sameValue ( thisValueCalled , 1 ) ; thisValueCalled = 0 ; called = 0 ; searchValue = this ; var x ; assert . sameValue ( called ) ; assert . sameValue ( thisValueCalled , 1 ) ; assert . sameValue ( poisoned , 0 ) ; 
