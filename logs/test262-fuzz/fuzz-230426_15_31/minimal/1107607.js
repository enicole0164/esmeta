"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } x => 0 ; 0 ; assert . notSameValue = { deleteProperty : function * ( x ) { } } ; assert . throws = function ( expectedErrorConstructor , func ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; } try { func ( ) ; } catch ( thrown ) { switch ( 0 ) { } return ; } message += 'Expected a ' + expectedErrorConstructor ; throw new Test262Error ( message ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; var obj = { } ; assert . throws ( TypeError , function ( ) { Object . setPrototypeOf ( { groups : null } . prototype , Array ) ; } ) ; 
