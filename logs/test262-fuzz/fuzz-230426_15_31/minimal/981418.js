"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } debugger ; throw new Test262Error ( message ) ; } ; 0 ? 0 : 0 ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( 1 / Number . NEGATIVE_INFINITY !== - 0 ) { throw new Test262Error ( '#1.1: 1 / -Infinity === 0. Actual: ' + ( 1 / - Infinity ) ) ; } else { if ( 1 / ( 1 / Number . NEGATIVE_INFINITY ) !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#1.2: 1 / -Infinity === - 0. Actual: +0' ) ; } } if ( - 1 / Number . NEGATIVE_INFINITY !== + 0 ) { throw new Test262Error ( '#2.1: -1 / -Infinity === 0. Actual: ' + ( - 1 / - Infinity ) ) ; } else { if ( 1 / ( - 1 / Number . NEGATIVE_INFINITY ) !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( { throw : '' } ) ; } } if ( 1 / Number . POSITIVE_INFINITY !== + 0 ) { throw new Test262Error ( '#3.1: 1 / Infinity === 0. Actual: ' + ( 1 / Infinity ) ) ; } else { if ( 1 / ( 1 / Number . POSITIVE_INFINITY ) !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#3.2: 1 / Infinity === + 0. Actual: -0' ) ; } } if ( - 1 / Number . POSITIVE_INFINITY !== - 0 ) { throw new Test262Error ( '#4.1: -1 / Infinity === 0. Actual: ' + ( - 1 / Infinity ) ) ; } else { if ( 1 / ( - 1 / Number . POSITIVE_INFINITY ) !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#4.2: -1 / Infinity === - 0. Actual: +0' ) ; } } 
