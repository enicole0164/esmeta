"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = null ; assert . sameValue = function * ( x , ... { } ) { } ; 0 | 0 ; try { } catch { } finally { } 0 ? 0 : 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; x => 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var hits = 0 ; var value ; var _this_ ; function Pack ( ) { Object . defineProperty ( this , "length" , { set : function ( len ) { hits ++ ; x ( ) ; value = len ; _this_ = this ; } } ) ; } var result = Array . of . call ( Pack , 'wolves' , 'cards' , 'cigarettes' , 'lies' ) ; assert . sameValue ( hits , 1 , 'The value of hits is expected to be 1' ) ; if ( 0 ) ; assert . sameValue ( _this_ , result , /a/ ) ; 
