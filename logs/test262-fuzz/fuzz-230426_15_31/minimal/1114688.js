"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw async x => 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } return ; throw new Test262Error ( message ) ; } ; 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else throw 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var value1 = 1 ; var target1 = Object . seal ( { set foo ( val ) { value1 = val ; } , } ) ; Object . assign ( target1 , { foo : 2 } ) ; assert . sameValue ( value1 , 2 ) ; var sym = Symbol ( ) ; var value2 = 1 ; var target2 = { set [ sym ] ( val ) { value2 = val ; } , } ; Object . seal ( target2 ) ; Object . assign ( target2 , { [ sym ] : 2 } ) ; assert . sameValue ( value2 , 2 ) ; 
