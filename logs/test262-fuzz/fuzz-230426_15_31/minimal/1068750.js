"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } try { } finally { } assert . sameValue = x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { } else if ( thrown . constructor !== expectedErrorConstructor ) x : ; return ; } return 0 ; throw new Test262Error ( message ) ; } ; ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { 0 : 11 , 1 : 12 } ; Object . defineProperty ( obj , "length" , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { Array . prototype . every . call ( obj , undefined ) ; } ) ; 
