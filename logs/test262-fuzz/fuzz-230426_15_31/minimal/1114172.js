"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = `${ 0 }` ; switch ( 0 ) { default : } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) return 0 ; else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 | 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class Base { constructor ( x , y ) { this . x = x ; this . y = y ; } } var obj = { } ; class Subclass extends Base { constructor ( x , y ) { super ( x , y ) ; assert . sameValue ( this !== obj , true , "The result of `this !== obj` is `true`" ) ; } } var f = Subclass . bind ( obj ) ; assert . throws ( TypeError , function ( ) { f ( 1 , 2 ) ; } ) ; var s = new f ( 1 , 2 ) ; assert . sameValue ( s . x , 1 , "The value of `s.x` is `1`" ) ; assert . sameValue ( s . y , 2 , "The value of `s.y` is `2`" ) ; var x ; var s1 = new f ( 1 ) ; assert . sameValue ( s1 . x , 1 , "The value of `s1.x` is `1`" ) ; assert . sameValue ( s1 . y , undefined , "The value of `s1.y` is `undefined`" ) ; ; var g = Subclass . bind ( obj , 1 ) ; assert . throws ( TypeError , function ( ) { g ( 8 ) ; } ) ; var s2 = new g ( 8 ) ; assert . sameValue ( s2 . x , 1 , "The value of `s2.x` is `1`" ) ; assert . sameValue ( s2 . y , 8 , "The value of `s2.y` is `8`" ) ; assert . sameValue ( Object . getPrototypeOf ( s ) , Subclass . prototype , "`Object.getPrototypeOf(s)` returns `Subclass.prototype`" ) ; 
