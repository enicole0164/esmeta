"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = 0 ?? 0 ; 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; try { func ( ) ; } catch ( thrown ) { do ; while ( 0 ) ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { Object . entries ( null ) ; } ) ; assert . throws ( TypeError , function ( ) { Object . entries ( undefined ) ; } ) ; 
