"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = x => 0 ; assert . notSameValue = function ( actual , unexpected ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + '») to be false' ; throw new Test262Error ( message ) ; } ; { } x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var thrown = new Test262Error ( ) ; var badIter = { } ; var poisonedNext = Object . defineProperty ( { } , 'next' , { get : function ( ) { throw thrown ; } } ) ; badIter [ Symbol . iterator ] = function ( ) { return poisonedNext ; } ; function * g ( ) { try { yield * badIter ; } catch ( err ) { caught = err ; } } var iter = g ( ) ; result = iter . next ( ) ; assert . sameValue ( result . value , undefined ) ; assert . sameValue ( result . done , true ) ; assert . sameValue ( caught , thrown ) ; 
