"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } { ; } throw new Test262Error ( message ) ; } assert . _isSameValue = async function ( ) { } ; assert . sameValue = true ; assert . notSameValue = 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { var x ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { { ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var poisonedValue = Object . defineProperty ( { } , 'value' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; var iter = { } ; iter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedValue ; } } ; } ; assert . throws ( Test262Error , function ( ) { let [ ... x ] = iter ; } ) ; 
