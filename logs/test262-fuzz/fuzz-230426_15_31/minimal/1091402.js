"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; 0 , 0 ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } return 0 ; throw new Test262Error ( message ) ; } ; assert . throws = x => 0 ; assert . _toString = 0 ^ 0 ^ 0 === 0 >>> 0 << 0 >= 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } function callbackfn ( val , idx , obj ) { return this === eval ; } var testResult = [ 11 ] . map ( callbackfn , eval ) ; assert . sameValue ( testResult [ 0 ] , true , 'testResult[0]' ) ; 
