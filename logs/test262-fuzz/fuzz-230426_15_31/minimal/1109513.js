"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } return ; throw new Test262Error ( message ) ; } assert . _isSameValue = { ignoreCase : async function * ( x ) { } } ; x => 0 ; async x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; try { } catch { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { setPrototypeOf : '' } ; var x ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var f = Object . getOwnPropertyDescriptor ( { get f ( ) { } } , 'f' ) . get ; Object . defineProperty ( f , 'prototype' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { f [ Symbol . hasInstance ] ( { } ) ; } ) ; 
