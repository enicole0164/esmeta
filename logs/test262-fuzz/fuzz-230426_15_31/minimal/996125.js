"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = x => 0 ; assert . sameValue = { name : function ( x ) { } } ; assert . notSameValue = { defineProperty : async function ( x ) { } } ; assert . throws = { enumerable : async function ( x ) { } } ; assert . _toString = function ( value ) { debugger ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } assert . sameValue ( Number . isInteger ( NaN ) , false , 'Number.isInteger(NaN)' ) ; 
