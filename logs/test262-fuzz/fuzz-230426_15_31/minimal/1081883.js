"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = async function ( ) { } ; async x => 0 ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = async x => 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { return 0 , 0 ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var thrownError = new Error ( "Catch me." ) ; var obj = { [ Symbol . iterator ] ( ) { return { next ( ) { return { get done ( ) { throw thrownError ; } , value : 1 } ; } } ; } } ; async function * asyncg ( ) { yield * obj ; } asyncg ( ) . next ( ) . then ( function ( result ) { throw new Test262Error ( "Promise should be rejected." ) ; } , function ( err ) { assert . sameValue ( err , thrownError , "Promise should be rejected with thrown error" ) ; } ) . then ( $DONE , $DONE ) ; 
