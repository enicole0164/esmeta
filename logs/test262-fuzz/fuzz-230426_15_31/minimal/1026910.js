"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; try { } catch { } assert . notSameValue = { add : ( ) => { throw 0 ; } } ; assert . throws = this ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { { } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } var o = { } ; var setter = function ( x ) { } ; var d1 = { set : setter } ; Object . defineProperty ( o , "foo" , d1 ) ; var getter = undefined ; var desc = { get : getter } ; Object . defineProperty ( o , "foo" , desc ) ; var d2 = Object . getOwnPropertyDescriptor ( o , "foo" ) ; assert . sameValue ( d2 . get , getter , 'd2.get' ) ; assert . sameValue ( d2 . set , setter , 'd2.set' ) ; assert . sameValue ( d2 . configurable , false , 'd2.configurable' ) ; assert . sameValue ( d2 . enumerable , false , 'd2.enumerable' ) ; 
