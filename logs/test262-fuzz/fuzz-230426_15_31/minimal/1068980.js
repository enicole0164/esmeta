"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { } throw new Test262Error ( message ) ; } x => 0 ; assert = { isExtensible : true } ; x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { apply : 0 } ; Test262Error = ( message ) => { throw Test262Error ; } ; function __consolePrintHandle__ ( msg ) { print ( ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { await : ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } let async ; async function fn ( ) { for ( var [ ] in 0 ) ; } fn ( ) . then ( ( ) => 0 ( ) `` , $DONE ) . then ( $DONE , $DONE ) ; 
