"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { set : 0 } ; x => 0 ; assert . notSameValue = { throw : ( ) => { throw 0 ; } } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) try { } finally { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { return 0 ; return ; } if ( 0 ) ; throw new Test262Error ( message ) ; } ; { } function Test262Error ( message ) { this . message = message || "" ; } var x ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { Object . prototype . propertyIsEnumerable . call ( { [ Symbol . toPrimitive ] : 0 } , 'foo' ) ; } , 'Object.prototype.propertyIsEnumerable.call(null, "foo") throws a TypeError exception' ) ; 
