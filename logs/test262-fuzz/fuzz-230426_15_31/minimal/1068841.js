"use strict";
function assert ( mustBeTrue ) { { } } assert . throws = function ( expectedErrorConstructor , func ) { { ; } try { func ( ) ; } catch ( thrown ) { return 0 ; } } ; function Test262Error ( message ) { ; } function $DONOTEVALUATE ( ) { throw { 1 : '' } ; } var nextCount = { [ Symbol . toPrimitive ] : ( ) => { throw 0 ; } } ; var iterable = { } ; var x ; var iterator = { next : function ( ) { nextCount += 1 ; if ( nextCount ) { var x ; } throw 0 ; } } ; iterable [ Symbol . iterator ] = function ( ) { return iterator ; } ; assert . throws ( Test262Error , function ( ) { 0 , [ x , , ] = iterable ; } ) ; assert ( returnCount ) ; 
