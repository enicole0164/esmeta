"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } ; assert = { lastIndex : function * ( x ) { } } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } async x => 0 ; throw Test262Error ; } ; { } assert . _toString = function ( value ) { if ( 0 ) ; else var x ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype = function ( ) { return "Test262Error: " ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; var iterator = '' [ Symbol . iterator ] ( ) ; var object = Object . create ( iterator ) ; assert . throws ( TypeError , function ( ) { object . next ( ) ; } ) ; 
