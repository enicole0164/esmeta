"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } try { } catch ( x ) { } finally { } assert . sameValue = [ 0 , ] ; assert . notSameValue = x => { } ; assert . throws = [ 0 ] ; assert . _toString = { preventExtensions : function * ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var arrObj = [ 1 , 2 , 3 ] ; var newArrObj = arrObj . splice ( - 2 , 1 ) ; assert . sameValue ( newArrObj . length , 1 , 'newArrObj.length' ) ; assert . sameValue ( newArrObj [ 0 ] , 2 , 'newArrObj[0]' ) ; 
