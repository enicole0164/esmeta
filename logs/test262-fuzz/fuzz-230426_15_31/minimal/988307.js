"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } while ( 0 ) ; throw new Test262Error ( message ) ; } assert . _isSameValue = '' ; assert . sameValue = async function ( ... [ ... x ] ) { } ; x => 0 ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; function $DONOTEVALUATE ( ) { { } } const number = 9007199254740991 ; const bigint = 9007199254740991n ; const m = new Map ( [ [ { sticky : false } , number ] , [ bigint , bigint ] , ] ) ; assert . sameValue ( m . size , 2 ) ; assert . sameValue ( m . has ( number ) , true ) ; assert . sameValue ( m . has ( bigint ) , true ) ; assert . sameValue ( m . get ( number ) , number ) ; { ; } m . delete ( number ) ; assert . sameValue ( m . size , 1 ) ; assert . sameValue ( m . has ( number ) , false ) ; m . delete ( bigint ) ; assert . sameValue ( m . size , 0 ) ; assert . sameValue ( m . has ( bigint ) , false ) ; m . set ( number ) ; assert . sameValue ( m . size , 1 ) ; m . set ( bigint , bigint ) ; assert . sameValue ( m . size , 2 ) ; 
