"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } try { } catch { } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = [ ] ; assert . notSameValue = function ( actual , unexpected , message ) { if ( assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw Test262Error ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw Test262Error ; } ; 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var poisonedReplace = { } ; Object . defineProperty ( poisonedReplace , Symbol . replace , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { '' . replace ( poisonedReplace ) ; } ) ; 
