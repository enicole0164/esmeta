"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = async function ( ) { } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = { [ Symbol . toPrimitive ] : 0 } ; assert . _toString = function ( value ) { if ( 0 , 0 ) ; else ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var __obj = { toString : function ( ) { throw "intostr" ; } } ; __obj . toLowerCase = String . prototype . toLowerCase ; try { var x = __obj . toLowerCase ( ) ; throw new Test262Error ( '#1: "var x = __obj.toLowerCase()" lead to throwing exception' ) ; } catch ( e ) { if ( e !== "intostr" ) { throw new Test262Error ( '#1.1: Exception === "intostr". Actual: ' + e ) ; } } 
