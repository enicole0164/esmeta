"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( 0 ) ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = this ; async x => 0 ; async x => { } ; try { } catch { } finally { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; 0 ?? 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) debugger ; else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } let a = Promise . reject ( 'a' ) . catch ( ( v ) => v ) ; let b = Promise . resolve ( 'b' ) . then ( ( v ) => { throw v ; } ) ; let c = Promise . reject ( 'c' ) . then ( ( v ) => { throw v ; } ) ; let d = Promise . resolve ( 'd' ) . finally ( ( v ) => v ) ; let e = Promise . reject ( 'e' ) . finally ( ( v ) => v ) ; class x { ; } let g = Promise . reject ( 'g' ) . finally ( ( v ) => { throw v ; } ) ; let h = Promise . reject ( 'h' ) . then ( ( v ) => v , ( ) => 'j' ) ; let i = Promise . resolve ( 'i' ) . then ( v => v ) ; x => 0 ; 
