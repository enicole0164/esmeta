"use strict";
function assert ( mustBeTrue , message ) { { } if ( message === undefined ) 0 ; } assert . _isSameValue = { prototype : function ( x ) { } } ; assert . sameValue = { length : async function ( x ) { } } ; 0 ; { sticky : true ; } ; function Test262Error ( message ) { this . message = message || "" ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; var quickIter = { } ; var iter , exprValue , throwReceived ; quickIter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { done : false } ; } , throw : function ( x ) { throwReceived = x ; return { done : true , value : 3333 } ; } } ; } ; function * g ( ) { yield * quickIter ; } iter = g ( ) ; iter . next ( ) ; iter . throw ( 2222 ) ; assert . sameValue ( throwReceived , 2222 ) ; 
