"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; 0 ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { { } return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = async x => { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var toExponential = Number . prototype . toExponential ; assert . throws ( TypeError , function ( ) { toExponential . call ( { } , 1 ) ; } , "{}" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( "1" , 1 ) ; } , "string" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( Number , 1 ) ; } , "Number" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( true , 1 ) ; } , "true" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( false , 1 ) ; } , "false" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( null , 1 ) ; } , "null" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( undefined , 1 ) ; } , "undefined" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( Symbol ( "1" ) , 1 ) ; } , "symbol" ) ; assert . throws ( TypeError , function ( ) { toExponential . call ( [ ] , 1 ) ; } , "[]" ) ; 
