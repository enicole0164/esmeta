"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } 0 , 0 ; assert . sameValue = 0 ; async x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + { writable : 0 } ; } else { message += 'Expected a ' + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } { ; } throw Test262Error ; } ; assert . _toString = `` ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x ; function poison ( ) { throw new Test262Error ( 'poison handled' ) ; } function morePoison ( ) { throw 'poison!!!!' ; } x = undefined ; assert . throws ( Test262Error , function ( ) { undefined ?? poison ( ) ?? morePoison ( ) ; } , 'undefined ?? poison() ?? morePoison();' ) ; undefined ; assert . throws ( Test262Error , { raw : async function ( x ) { } } , 'null ?? poison() ?? morePoison();' ) ; assert . throws ( Test262Error , function ( ) { poison ( ) ?? morePoison ( ) ; } , 'poison() ?? morePoison();' ) ; 
