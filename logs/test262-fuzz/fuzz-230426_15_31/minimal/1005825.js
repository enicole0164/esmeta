"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } var x ; assert . sameValue = { source : function ( x ) { } } ; assert . notSameValue = 0 ?? 0 ? 0 : 0 ; async x => { } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) return 0 , 0 ; throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } x : ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } let a = Promise . reject ( 'a' ) . catch ( ( v ) => v ) ; let b = Promise . resolve ( 'b' ) . then ( ( v ) => { throw v ; } ) ; let c = Promise . reject ( 'c' ) . then ( ( v ) => { throw v ; } ) ; let d = Promise . resolve ( 'd' ) . finally ( ( v ) => v ) ; let e = Promise . reject ( 'e' ) . finally ( ( v ) => v ) ; let f = Promise . resolve ( 'f' ) . finally ( ( v ) => { throw v ; } ) ; let g = Promise . reject ( 'g' ) . finally ( ( v ) => { throw v ; } ) ; let h = Promise . reject ( 'h' ) . then ( ( v ) => v , ( ) => 'j' ) ; let i = Promise . resolve ( 'i' ) . then ( v => v ) ; x => 0 ; 
