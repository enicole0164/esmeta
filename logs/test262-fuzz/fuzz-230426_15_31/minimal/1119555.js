"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert . _isSameValue = async x => 0 ; assert . sameValue = async function x ( ) { } ; assert . notSameValue = { deleteProperty : function ( x ) { } } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; for ( const [ x , , ] of 0 ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { { } return ; } if ( 0 ) ; throw new Test262Error ( message ) ; } ; assert . _toString = { add : async function * ( x ) { } } ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class C { set #m ( v ) { this . _v = v ; } checkPrivateSetter ( ) { assert . sameValue ( this . hasOwnProperty ( "#m" ) , false ) ; assert . sameValue ( "#m" in this , false ) ; assert . sameValue ( this . __lookupSetter__ ( "#m" ) , undefined ) ; this . #m = "Test262" ; assert . sameValue ( this . _v , "Test262" ) ; return 0 ; } } let c = new C ( ) ; assert . sameValue ( c . checkPrivateSetter ( ) , 0 ) ; 
