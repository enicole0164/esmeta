"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 0 ; } throw new Test262Error ( message ) ; } async x => 0 ; assert . sameValue = x => 0 ; x => 0 ; var x ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var thrownError = new Error ( "Catch me." ) ; var obj = { [ Symbol . iterator ] ( ) { return { next ( ) { return { value : 1 , done : false } ; } , get throw ( ) { throw thrownError ; } } ; } } ; async function * asyncg ( ) { yield * obj ; } var iter = asyncg ( ) ; iter . next ( ) . then ( function ( result ) { iter . throw ( ) . then ( function ( result ) { throw new Test262Error ( "Promise should be rejected, got: " + result . value ) ; } , null ) . catch ( $DONE ) ; } ) . catch ( $DONE ) ; 
