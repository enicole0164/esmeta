"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = x => 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 ; } return a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } switch ( 0 ) { } throw new Test262Error ( message ) ; } ; assert . notSameValue = 0 ?? 0 ^ 0 ; assert . throws = { multiline : false } ; ; function Test262Error ( message ) { this . message = message || "" ; } if ( 0 ) throw 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Number . isInteger ( "1" ) , false , "string" ) ; assert . sameValue ( Number . isInteger ( [ 1 ] ) , false , "[1]" ) ; assert . sameValue ( Number . isInteger ( new Number ( 42 ) ) , false , "Number object" ) ; assert . sameValue ( Number . isInteger ( false ) , false , "false" ) ; assert . sameValue ( Number . isInteger ( true ) , false , "true" ) ; var x ; assert . sameValue ( Number . isInteger ( Symbol ( "1" ) ) , false , "symbol" ) ; assert . sameValue ( Number . isInteger ( ) , false , "no arg" ) ; 
