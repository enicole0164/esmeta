"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; 0 ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { var x ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = async function ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( Number . NEGATIVE_INFINITY * - 1 !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#1: -Infinity * -1 === Infinity. Actual: ' + ( - Infinity * - 1 ) ) ; } if ( - 1 * Number . NEGATIVE_INFINITY !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#2: -1 * -Infinity === Infinity. Actual: ' + ( - 1 * - Infinity ) ) ; } if ( Number . POSITIVE_INFINITY * - 1 !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#3: Infinity * -1 === -Infinity. Actual: ' + ( Infinity * - 1 ) ) ; } if ( - 1 * Number . POSITIVE_INFINITY !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#4: -1 * Infinity === -Infinity. Actual: ' + ( - 1 * Infinity ) ) ; } if ( Number . POSITIVE_INFINITY * Number . MAX_VALUE !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#5: Infinity * Number.MAX_VALUE === Infinity. Actual: ' + ( Infinity * Number . MAX_VALUE ) ) ; } if ( Number . POSITIVE_INFINITY * Number . MAX_VALUE !== Number . MAX_VALUE * Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#6: Infinity * Number.MAX_VALUE === Number.MAX_VALUE * Infinity. Actual: ' + ( Infinity * Number . MAX_VALUE ) ) ; } if ( Number . NEGATIVE_INFINITY * Number . MIN_VALUE !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#7: -Infinity * Number.MIN_VALUE === -Infinity. Actual: ' + ( - Infinity * Number . MIN_VALUE ) ) ; } if ( Number . NEGATIVE_INFINITY * Number . MIN_VALUE !== Number . MIN_VALUE * Number . NEGATIVE_INFINITY ) x : ; 
