"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } if ( 0 ) ; assert . sameValue = null ; assert . notSameValue = { [ Symbol . unscopables ] : true } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { debugger ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { { } return ; } x : ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 ? 0 : 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype = { flags : true } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var array = [ 0 ] ; var arrayPrototypeSet0Calls = 0 ; Object . defineProperty ( Array . prototype , "0" , { set ( _val ) { Object . freeze ( array ) ; arrayPrototypeSet0Calls ++ ; } , } ) ; assert . throws ( TypeError , function ( ) { array . unshift ( 1 ) ; } ) ; assert ( ! array . hasOwnProperty ( 0 ) ) ; assert . sameValue ( array . length , 0 ) ; assert . sameValue ( arrayPrototypeSet0Calls , 1 ) ; 
