"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert . _isSameValue = function ( a , b ) { if ( a ) { return a !== 0 ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = async function ( ) { } ; if ( 0 ) ; else ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { configurable : true } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var iter = ( async function * ( ) { yield await "a" ; } ) ( ) ; iter . next ( ) . then ( [ ] ) . then ( undefined , $DONE ) ; iter . next ( ) . then ( function ( result ) { assert . sameValue ( result . value , undefined , 'Second result `value`' ) ; assert ( result . done , true , 'Second result `done` flag' ) ; } ) . then ( $DONE , $DONE ) ; 
