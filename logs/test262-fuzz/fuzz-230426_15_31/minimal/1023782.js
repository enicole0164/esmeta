"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } x : ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { var x , x ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += x => 0 ; throw new Test262Error ( message ) ; } ; try { } finally { } switch ( 0 ) { } assert . _toString = function ( value ) { debugger ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var thrown = new Test262Error ( ) ; var badIter = { } ; var poisonedDone = Object . defineProperty ( { } , 'done' , { get : function ( ) { throw thrown ; } } ) ; badIter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { done : false } ; } , return : function ( ) { return poisonedDone ; } } ; } ; function * g ( ) { try { yield * badIter ; } catch ( err ) { caught = err ; } } var iter = g ( ) ; var caught ; iter . next ( ) ; iter . return ( ) ; assert . sameValue ( caught , thrown ) ; 
