"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { throw 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { done : '' } ; assert . sameValue = { [ Symbol . isConcatSpreadable ] : null } ; assert . notSameValue = `${ 0 }` ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) 0 ; if ( message === undefined ) { message = '' ; } else { ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown !== expectedErrorConstructor ) var x ; return ; } 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } assert . throws ( TypeError , function ( ) { String . prototype . includes . call ( null , '' ) ; } ) ; 
