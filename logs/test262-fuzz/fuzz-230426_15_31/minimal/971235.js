"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } assert . _isSameValue = class x { } ; assert . sameValue = `${ 0 }` ; switch ( 0 ) { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { } if ( 0 ) try { } catch { } finally { } try { func ( ) ; } catch ( thrown ) { try { } finally { } return ; } throw new Test262Error ( message ) ; } ; assert . _toString = async function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } ; 0 ? 0 : 0 ; class x { } assert . throws ( TypeError , function ( ) { Object . prototype . isPrototypeOf . call ( function * await ( ) { } , { } ) ; } ) ; 
