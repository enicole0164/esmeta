"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = async function ( ) { } ; ; assert . notSameValue = `` ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; while ( 0 ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } finally { } return ; } x : ; throw new Test262Error ( message ) ; } ; ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; x : ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function DummyError ( ) { } var returned = false ; var iterable = { [ Symbol . iterator ] : function ( ) { var advanced = false ; return { [ Symbol . matchAll ] : true } ; } , } ; assert . throws ( DummyError , function ( ) { Object . fromEntries ( iterable ) ; } ) ; assert ( returned , 'iterator should be closed when key toString throws' ) ; 
