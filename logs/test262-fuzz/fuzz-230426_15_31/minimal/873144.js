"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; { } assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } for ( var i = 0 ; i < a . length ; i ++ ) { if ( ! compareArray . isSameValue ( b [ i ] , a [ i ] ) ) { return false ; } } return true ; } compareArray . isSameValue = function ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } ; compareArray . format = function ( arrayLike ) { return `[${ [ ] . map . call ( arrayLike , String ) . join ( ', ' ) }]` ; } ; assert . compareArray = class { } ; assert . compareArray ( [ 0 , 1 , 2 , 3 ] . copyWithin ( 0 , - 1 ) , [ 3 , 1 , 2 , 3 ] , '[0, 1, 2, 3].copyWithin(0, -1) must return [3, 1, 2, 3]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 , 4 ] . copyWithin ( 2 , - 2 ) , [ 0 , 1 , 3 , 4 , 4 ] , '[0, 1, 2, 3, 4].copyWithin(2, -2) must return [0, 1, 3, 4, 4]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 , 4 ] . copyWithin ( 1 , - 2 ) , [ 0 , 3 , 4 , 3 , 4 ] , '[0, 1, 2, 3, 4].copyWithin(1, -2) must return [0, 3, 4, 3, 4]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 ] . copyWithin ( - 1 , - 2 ) , [ 0 , 1 , 2 , 2 ] , '[0, 1, 2, 3].copyWithin(-1, -2) must return [0, 1, 2, 2]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 , 4 ] . copyWithin ( - 2 , - 3 ) , [ 0 , 1 , 2 , 2 , 3 ] , '[0, 1, 2, 3, 4].copyWithin(-2, -3) must return [0, 1, 2, 2, 3]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 , 4 ] . copyWithin ( - 5 , - 2 ) , [ 3 , 4 , 2 , 3 , 4 ] , '[0, 1, 2, 3, 4].copyWithin(-5, -2) must return [3, 4, 2, 3, 4]' ) ; 
