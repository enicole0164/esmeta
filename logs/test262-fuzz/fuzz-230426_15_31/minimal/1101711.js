"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) if ( 0 ) ; throw new Test262Error ( message ) ; } assert . _isSameValue = { name : true } ; assert . sameValue = { set : ( ) => { throw 0 ; } } ; x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { ; return ; } x => 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 ? 0 : 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; async x => 0 ; let x ; var a = [ ] ; Object . defineProperty ( a , 'constructor' , async function * ( ) { } ) ; assert . throws ( Test262Error , function ( ) { a . splice ( ) ; } ) ; 
