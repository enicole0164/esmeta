"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = [ 0 ] ; { } x : ; assert . throws = 0 && 0 ; assert . _toString = function ( value ) { { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) throw x => 0 ; else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } Promise . resolve = x => 0 ; Promise . any ( [ 1 ] ) . then ( ( ) => $DONE ( 'The promise should not be resolved.' ) , error => { assert ( error instanceof TypeError ) ; } ) . then ( $DONE , $DONE ) ; 
