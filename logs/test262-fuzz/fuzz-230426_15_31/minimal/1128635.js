"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( ) { function * x ( ) { } } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message ) { message = '' ; } else { ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = x => 0 ; assert . _toString = async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } { } function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var promise = new Promise ( function ( ) { } ) ; var iter = { } ; var returnCount = 0 ; iter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { done : false , value : promise } ; } , return : function ( ) { returnCount += 1 ; return { } ; } } ; } ; promise . then = function ( ) { throw new Test262Error ( ) ; } ; Promise . race ( iter ) ; assert . sameValue ( returnCount , 1 ) ; 
