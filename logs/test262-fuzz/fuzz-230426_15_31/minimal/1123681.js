"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { ' ' ; } 0 , 0 ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; 0 || 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } Promise . reject . call ( function ( executor ) { checkPoint += "a" ; executor ( ) ; checkPoint += "b" ; executor ( function ( ) { } , function ( ) { } ) ; checkPoint += "c" ; } , { } ) ; var checkPoint = "" ; Promise . reject . call ( function ( executor ) { checkPoint += "a" ; executor ( undefined , { } ) ; checkPoint += "b" ; executor ( function ( ) { } , function ( ) { } ) ; checkPoint += "c" ; } , { } ) ; assert . sameValue ( checkPoint , "abc" , "executor initially called with (undefined, undefined)" ) ; var checkPoint = "" ; assert . throws ( TypeError , function ( ) { Promise . reject . call ( function ( executor ) { checkPoint += "a" ; executor ( undefined , function ( ) { } ) ; checkPoint += "b" ; executor ( function ( ) { } , function ( ) { } ) ; checkPoint += "c" ; } ) ; } , "executor initially called with (undefined, function)" ) ; assert . sameValue ( checkPoint , "ab" , "executor initially called with (undefined, function)" ) ; var checkPoint = "" ; assert . throws ( TypeError , function ( ) { x => 0 ; } , "executor initially called with (function, undefined)" ) ; assert . sameValue ( checkPoint , "ab" , "executor initially called with (function, undefined)" ) ; assert . throws ( TypeError , `${ 0 }` , "executor initially called with (String, Number)" ) ; assert ( checkPoint , "ab" , "executor initially called with (String, Number)" ) ; 
