"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) x : ; throw new Test262Error ( message ) ; } assert . _isSameValue = { sticky : ( ) => { throw 0 ; } } ; assert . sameValue = { [ Symbol . match ] : null } ; assert . notSameValue = async function x ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; x : ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { return 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + { then : '' } ; throw new Test262Error ( message ) ; } ; assert . _toString = { get : async function * ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } if ( 0 ) ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } var obj = { } ; Object . defineProperty ( obj , "length" , { get : function ( ) { throw new Test262Error ( ) ; } , configurable : true } ) ; assert . throws ( Test262Error , function ( ) { Array . prototype . reduce . call ( obj , function ( ) { } ) ; } ) ; 
