"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } var x ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) ; throw new Test262Error ( message ) ; } ; assert . notSameValue = 0 || 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) throw 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; { } function Test262Error ( message ) { this . message = message || "" ; } { } Test262Error . thrower = ( message ) => { throw Test262Error ; } ; assert . sameValue ( typeof String . prototype . replaceAll , 'function' , 'function must exist' ) ; var poisoned = 0 ; var poison = { toString ( ) { poisoned += 1 ; throw 'Should not call toString on this/replaceValue' ; } , } ; var called = 0 ; var value = undefined ; var searchValue = { [ Symbol . match ] : true , get flags ( ) { called += 1 ; return value ; } } ; assert . throws ( TypeError , function ( ) { '' . replaceAll . call ( poison , searchValue , poison ) ; } , 'undefined' ) ; assert . sameValue ( called , 1 ) ; called = 0 ; value = null ; assert . throws ( TypeError , function ( ) { '' . replaceAll . call ( poison , this , poison ) ; } , 'null' ) ; assert . sameValue ( poisoned , 0 ) ; 
