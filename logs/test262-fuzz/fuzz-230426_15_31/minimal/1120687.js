"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = 0 != 0 !== 0 ? 0 : 0 ; assert . notSameValue = ( 0 ) ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += { [ Symbol . split ] : 0 } ; throw new Test262Error ( message ) ; } else ; return ; } ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { await : ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function f ( ) { throw new Test262Error ( ) ; } assert . throws ( Test262Error , function ( ) { class C { static [ f ( ) ] ; } } ) ; 
