"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } x => 0 ; assert . sameValue = async function x ( ) { } ; assert . notSameValue = 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; { } x : ; try { func ( ) ; } catch ( thrown ) { try { } catch { } finally { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; } ; assert . _toString = function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } x : ; x => 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var iter = { } ; var poisonedValue = Object . defineProperty ( { } , 'value' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; iter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedValue ; } } ; } ; assert . throws ( Test262Error , function ( ) { ( function ( ) { } ( ... iter ) ) ; } ) ; 
