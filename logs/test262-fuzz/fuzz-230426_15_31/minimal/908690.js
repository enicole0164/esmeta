"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { multiline : null } ; assert . sameValue = 0 ? 0 : 0 ; assert . notSameValue = async x => 0 ; assert . throws = 0 && 0 && 0 ; assert . _toString = function ( value ) { var x ; } ; function Test262Error ( message ) { this . message = message || "" ; } x => 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { } ; var map = new Map ( ) ; map . set ( 'foo' , 1 ) ; map . set ( obj , 2 ) ; map . set ( map , 3 ) ; var iterator = map . keys ( ) ; var result ; result = iterator . next ( ) ; assert . sameValue ( result . value , 'foo' , 'First result `value` ("key")' ) ; assert . sameValue ( result . done , false , 'First result `done` flag' ) ; result = iterator . next ( ) ; assert . sameValue ( result . value , obj , 'Second result `value` ("key")' ) ; assert . sameValue ( result . done , false , 'Second result `done` flag' ) ; result = iterator . next ( ) ; assert . sameValue ( result . value , map , 'Third result `value` ("key")' ) ; assert . sameValue ( result . done , false , 'Third result `done` flag' ) ; result = iterator . next ( ) ; assert . sameValue ( result . value , undefined , 'Exhausted result `value`' ) ; ; result = iterator . next ( ) ; assert . sameValue ( result . value , undefined , 'Exhausted result `value` (repeated request)' ) ; assert . sameValue ( result . done , true , 'Exhausted result `done` flag (repeated request)' ) ; 
