"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message === undefined ) { 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; try { } finally { } assert . notSameValue = async function * ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " ; } ; 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var A = function ( _length ) { this . length = 0 ; Object . preventExtensions ( this ) ; } ; var arr = [ ] ; arr . constructor = { } ; arr . constructor [ Symbol . species ] = A ; assert . throws ( TypeError , function ( ) { arr . concat ( [ 1 ] ) ; } , { raw : function ( x ) { } } ) ; 
