"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = x => 0 ; 0 ( ) . x &&= 0 ; x : ; assert . throws = { multiline : async function * ( x ) { } } ; assert . _toString = async function ( ... [ ] ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } let Array ; assert . sameValue ( Array , undefined ) ; assert . sameValue ( typeof this . Array , 'function' ) ; let descriptor = Object . getOwnPropertyDescriptor ( this , 'Array' ) ; assert . sameValue ( descriptor . configurable , true ) ; assert . sameValue ( descriptor . enumerable , false ) ; assert . sameValue ( descriptor . writable , true ) ; 
