"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; { } assert . notSameValue = async function ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { } finally { } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = class { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( isNaN ( Number . NEGATIVE_INFINITY / Number . NEGATIVE_INFINITY ) !== true ) { throw new Test262Error ( '#1: -Infinity / -Infinity === Not-a-Number. Actual: ' + ( - Infinity / - Infinity ) ) ; } if ( isNaN ( Number . POSITIVE_INFINITY / Number . POSITIVE_INFINITY ) !== true ) { throw new Test262Error ( '#2: Infinity / Infinity === Not-a-Number. Actual: ' + ( Infinity / Infinity ) ) ; } if ( isNaN ( Number . NEGATIVE_INFINITY / Number . POSITIVE_INFINITY ) !== true ) { throw new Test262Error ( '#3: -Infinity / Infinity === Not-a-Number. Actual: ' + ( - Infinity / Infinity ) ) ; } 0 ; 
