"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } } assert . _isSameValue = x => 0 ; assert . sameValue = `${ 0 }` ; switch ( 0 ) { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( func ) { } x : ; try { func ( ) ; } catch ( thrown ) { try { } finally { } } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = async x => 0 ; Test262Error . thrower = ( message ) => { throw Test262Error ; } ; assert . throws ( TypeError , function ( ) { Object . prototype . isPrototypeOf . call ( undefined ) ; } ) ; 
