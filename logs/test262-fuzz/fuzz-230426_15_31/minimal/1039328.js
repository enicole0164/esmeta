"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { preventExtensions : null } ; assert . sameValue = function ( actual , expected , message ) { debugger ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function x ( ) { } ; assert . throws = [ ] ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } var x ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function f ( ) { "use strict" ; return this === undefined ; } ; assert ( f . apply ( ) , 'f.apply() !== true' ) ; 
