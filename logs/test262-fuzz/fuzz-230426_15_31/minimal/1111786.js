"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; var x ; 0 ? 0 : 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) debugger ; return ; } { } throw new Test262Error ( message ) ; } ; if ( 0 ) ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var stopped = 0 ; var obj = { length : 3 } ; Object . defineProperty ( obj , "1" , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; Object . defineProperty ( obj , "2" , { get : function ( ) { stopped ++ ; } } ) ; assert . throws ( Test262Error , function ( ) { [ ] . includes . call ( obj , 7 ) ; } ) ; assert . sameValue ( stopped , 0 , "It stops the loop after the abrupt completion" ) ; 
