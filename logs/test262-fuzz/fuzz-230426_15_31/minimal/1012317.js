"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { [ Symbol . search ] : async function ( x ) { } } ; assert . sameValue = 0 ; assert . notSameValue = async x => 0 ; assert . throws = { source : function * ( x ) { } } ; assert . _toString = { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( isNaN ( Number . POSITIVE_INFINITY + Number . NEGATIVE_INFINITY ) !== true ) { throw new Test262Error ( x => 0 ) ; } if ( isNaN ( Number . NEGATIVE_INFINITY + Number . POSITIVE_INFINITY ) !== true ) { throw x => 0 ; } 
