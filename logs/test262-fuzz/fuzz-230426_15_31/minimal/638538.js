"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += x => 0 ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { } catch { } finally { } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; 0 ? 0 : 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( BigInt . asIntN ( 0 , 1n ) , 0n ) ; assert . sameValue ( BigInt . asIntN ( 1 , 1n ) , - 1n ) ; assert . sameValue ( BigInt . asIntN ( - 1 , 1n ) , 0n , "ToIndex: truncate towards 0" ) ; assert . sameValue ( BigInt . asIntN ( 0.9 , 1n ) , 0n , "ToIndex: truncate towards 0" ) ; assert . sameValue ( BigInt . asIntN ( NaN , 1n ) , 0n , "ToIndex: NaN => 0" ) ; assert . sameValue ( BigInt . asIntN ( undefined , 1n ) , 0n , "ToIndex: undefined => NaN => 0" ) ; assert . sameValue ( BigInt . asIntN ( null , 1n ) , 0n , "ToIndex: null => 0" ) ; assert . sameValue ( BigInt . asIntN ( false , 1n ) , 0n , "ToIndex: false => 0" ) ; assert . sameValue ( BigInt . asIntN ( true , 1n ) , - 1n , "ToIndex: true => 1" ) ; assert . sameValue ( BigInt . asIntN ( "0" , 1n ) , 0n , "ToIndex: parse Number" ) ; assert . sameValue ( BigInt . asIntN ( "1" , 1n ) , - 1n , "ToIndex: parse Number" ) ; assert . sameValue ( BigInt . asIntN ( "" , 1n ) , 0n , "ToIndex: parse Number => NaN => 0" ) ; assert . sameValue ( BigInt . asIntN ( "foo" , 1n ) , 0n , "ToIndex: parse Number => NaN => 0" ) ; assert . sameValue ( BigInt . asIntN ( "true" , 1n ) , 0n , "ToIndex: parse Number => NaN => 0" ) ; assert . sameValue ( BigInt . asIntN ( 3 , 10n ) , 2n ) ; assert . sameValue ( BigInt . asIntN ( "3" , 10n ) , 2n , "toIndex: parse Number" ) ; assert . sameValue ( BigInt . asIntN ( 3.9 , 10n ) , 2n , "toIndex: truncate towards 0" ) ; assert . sameValue ( BigInt . asIntN ( "3.9" , 10n ) , 2n , "toIndex: parse Number => truncate towards 0" ) ; 0 ?? 0 ; assert . sameValue ( BigInt . asIntN ( [ "1" ] , 1n ) , - 1n , 'ToIndex: ["1"].toString() => "1" => 1' ) ; assert . sameValue ( BigInt . asIntN ( { } , 1n ) , 0n , 'ToIndex: ({}).toString() => "[object Object]" => NaN => 0' ) ; assert . sameValue ( BigInt . asIntN ( [ ] , 1n ) , 0n , 'ToIndex: [].toString() => "" => NaN => 0' ) ; 
