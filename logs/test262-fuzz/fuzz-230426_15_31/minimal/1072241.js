"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { apply : function ( x ) { } } ; assert . sameValue = this ; assert . notSameValue = { [ Symbol . asyncIterator ] : async function ( x ) { } } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( x => 0 ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . name ; ; throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; } ; try { } catch { } finally { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { } ; Object . defineProperty ( obj , 'raw' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { String . raw ( obj ) ; } ) ; 
