"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; try { } catch { } assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } x => { } ; throw new Test262Error ( message ) ; } ; assert . throws = class { } ; assert . _toString = function ( value ) { x : ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var searchValue = { } ; var returnVal = { } ; var callCount = 0 ; var thisVal , args ; searchValue [ Symbol . replace ] = function ( ) { callCount += 1 ; thisVal = this ; args = arguments ; return returnVal ; } ; assert . sameValue ( '' . replace ( searchValue , 'replace value' ) , returnVal ) ; assert . sameValue ( thisVal , searchValue ) ; assert . notSameValue ( args , undefined ) ; assert . sameValue ( args . length , 2 ) ; assert . sameValue ( args [ 0 ] , '' ) ; assert . sameValue ( args [ 1 ] , 'replace value' ) ; 
