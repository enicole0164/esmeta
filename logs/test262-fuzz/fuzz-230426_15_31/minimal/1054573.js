"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw Test262Error ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a || 1 === 1 / b ; } return a !== a && b ; } ; assert . sameValue = async x => 0 ; assert = { join : false } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' ) ; return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { ; } } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name ) { return Object . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } { name : '' } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { Set ( ) ; } ) ; 
