"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } var x ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( ) { } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { next : '' } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( isFinite ( "0" ) , true , "'0'" ) ; assert . sameValue ( isFinite ( "" ) , true , "the empty string" ) ; assert . sameValue ( isFinite ( "Infinity" ) , false , "'Infinity'" ) ; assert . sameValue ( isFinite ( "this is not a number" ) , false , "string" ) ; assert . sameValue ( isFinite ( true ) , true , "true" ) ; assert . sameValue ( isFinite ( false ) , true , "false" ) ; assert . sameValue ( isFinite ( [ 1 ] ) , true , "Object [1]" ) ; { } assert . sameValue ( isFinite ( [ NaN ] ) , false , "Object [NaN]" ) ; assert . sameValue ( isFinite ( null ) , true , "null" ) ; ; assert . sameValue ( isFinite ( ) , false , "no arg" ) ; 
