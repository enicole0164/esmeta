"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } switch ( 0 ) { } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + { unicode : null } + error ) ; return ; } ; message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; try { } catch { } await : ; if ( 0 ) 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { construct : false } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { done : false } ; } assert . sameValue ( typeof String . prototype . at , 'function' ) ; let s = "" ; { } assert . sameValue ( s . at ( 1n ) , undefined , 's.at(0) must return undefined' ) ; var x ; 
