"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } var x ; assert . sameValue = x => 0 ; assert . notSameValue = async function ( ... x ) { } ; 0 [ 0 ] &&= 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var map = new WeakMap ( ) ; var key = { } ; assert . sameValue ( map . get ( key ) , undefined , 'returns undefined if key is not on the weakmap' ) ; map . set ( key , 1 ) ; map . set ( { } , 2 ) ; map . delete ( key ) ; map . set ( { } , 3 ) ; assert . sameValue ( map . get ( key ) , undefined , 'returns undefined if key was deleted' ) ; 
