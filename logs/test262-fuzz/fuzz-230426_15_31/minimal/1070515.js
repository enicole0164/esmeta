"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { x => 0 ; } } assert . _isSameValue = { [ Symbol . iterator ] : '' } ; ; 0 , 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; ; try { func ( ) ; } catch ( thrown ) { 0 ; return ; } 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; var obj = { toString : function ( ) { throw new Test262Error ( ) ; } } ; assert . throws ( Test262Error , function ( ) { `${ 0 } ${ obj }` ; } ) ; 
