"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 ; assert . sameValue = function ( ) { } ; assert . notSameValue = ( 0 ) ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; else ; return ; } message += 0 ?? 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { if ( 0 ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( typeof Array . flatMap , 'function' ) ; function fn ( e ) { return e ; } var arr = { length : Symbol ( ) , } ; assert . throws ( TypeError , function ( ) { [ ] . flatMap ( arr , fn ) ; } , 'length is a symbol' ) ; assert . throws ( Test262Error , function ( ) { [ ] . flatMap . call ( arr ) ; } , 'custom get error' ) ; arr = { length : { valueOf ( ) { throw new Test262Error ( ) ; } } } ; assert . throws ( Test262Error , function ( ) { [ ] . flatMap . call ( x => 0 , fn ) ; } , 'custom valueOf error' ) ; arr = { length : { toString ( ) { throw new Test262Error ( ) ; } } } ; { } arr = { length : { [ Symbol . toPrimitive ] ( ) { throw new Test262Error ( ) ; } } } ; 
