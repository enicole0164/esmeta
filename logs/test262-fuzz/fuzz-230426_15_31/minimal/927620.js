"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + { throw : null } + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } 0 ; throw new Test262Error ( message ) ; } ; assert . notSameValue = `${ 0 }` ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw async x => 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; return ; } debugger ; throw new Test262Error ( message ) ; } ; assert . _toString = [ 0 , ] ; function Test262Error ( message ) { this . message = message || "" ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var slice = String . prototype . slice ; assert . sameValue ( typeof slice , 'function' ) ; assert . throws ( TypeError , function ( ) { slice . call ( undefined , 0 ) ; } , 'undefined' ) ; assert . throws ( TypeError , function ( ) { slice . call ( null , 0 ) ; } , 'null' ) ; 
