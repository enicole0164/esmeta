"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b ; } ; assert . sameValue = { name : function ( x ) { } } ; 0 || 0 ; assert . throws = { lastIndex : '' } ; assert = function ( value ) { if ( 0 ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( "" . lastIndexOf ( ) !== 1 ) { throw new Test262Error ( '#1: "".lastIndexOf() === -1. Actual: ' ) ; } 
