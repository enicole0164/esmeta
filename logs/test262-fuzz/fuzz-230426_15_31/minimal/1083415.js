"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert ( actual , unexpected ) ) { return ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( ) { } ; x : ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var object = { valueOf : function ( ) { return 1 ; } } ; var y = object -- ; if ( y !== 1 ) { throw new Test262Error ( '#1: var object = {valueOf: function() {return 1}}; var y = object--; y === 1. Actual: ' + ( y ) ) ; } else { if ( object !== 1 - 1 ) { throw new Test262Error ( '#1: var object = {valueOf: function() {return 1}}; object--; object === 1 - 1. Actual: ' + ( object ) ) ; } } var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { return 0 ; } } ; var y = object -- ; if ( y !== 1 ) { throw Test262Error ; } else ; var object = { valueOf : function ( ) { return 1 ; } } ; var y = object -- ; if ( y !== 1 ) { throw Test262Error ; } else { if ( object !== 1 - 1 ) x : ; } try { var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { throw "error" ; } } ; var y = object -- ; if ( y !== 1 ) { throw new Test262Error ( '#4.1: var object = {valueOf: function() {return 1}, toString: function() {throw "error"}}; var y = object--; y === 1. Actual: ' + ( y ) ) ; } else { if ( object !== 1 - 1 ) { throw new Test262Error ( '#4.2: var object = {valueOf: function() {return 1}, toString: function() {throw "error"}}; object--; object === 1 - 1. Actual: ' + ( object ) ) ; } } } catch ( e ) { throw 0 ; } var object = { toString : function ( ) { return 1 ; } } ; var y = object -- ; if ( y !== 1 ) { throw new Test262Error ( '#5.1: var object = {toString: function() {return 1}}; var y = object--; y === 1. Actual: ' + ( y ) ) ; } else { if ( object !== 1 - 1 ) { throw new Test262Error ( '#5.2: var object = {toString: function() {return 1}}; object--; object === 1 - 1. Actual: ' + ( object ) ) ; } } var object = { valueOf : function ( ) { return { } ; } , toString : function ( ) { return 1 ; } } ; var y = object -- ; 0 ; try { var object = { valueOf : function ( ) { return { } ; } , toString : function ( ) { return { } ; } } ; var y = object -- ; throw new Test262Error ( '#8.1: var object = {valueOf: function() {return {}}, toString: function() {return {}}}; object-- throw TypeError. Actual: ' + ( y ) ) ; } catch ( e ) { if ( ( e instanceof TypeError ) !== true ) { throw new Test262Error ( '#8.2: var object = {valueOf: function() {return {}}, toString: function() {return {}}}; object-- throw TypeError. Actual: ' + ( e ) ) ; } } 
