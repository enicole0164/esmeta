"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = null ; while ( 0 , 0 ) try { } catch { } assert . notSameValue = async function x ( ) { } ; assert . throws = async function * ( ) { } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; async function await ( ) { } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { x : ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var token = { } ; var asyncIter = { [ Symbol . asyncIterator ] ( ) { return this ; } , next ( ) { return { done : false , get value ( ) { throw token ; } } ; } } ; async function * f ( ) { var thrown ; try { yield * asyncIter ; } catch ( e ) { thrown = e ; } return ; } var iter = f ( ) ; iter . next ( ) . then ( ( { value } ) => { assert . sameValue ( value , token ) ; } ) . then ( $DONE , $DONE ) ; 
