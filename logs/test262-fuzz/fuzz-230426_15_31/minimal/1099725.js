"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } try { } finally { } throw new Test262Error ( message ) ; } 0 ; { ; } assert . notSameValue = { [ Symbol . species ] : ( ) => { throw 0 ; } } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName ; if ( message === undefined ) { '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) x : ; else if ( thrown . constructor !== expectedErrorConstructor ) throw 0 ; return ; } message += 'Expected a ' ; throw new Test262Error ( message ) ; } ; await : { } function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; try { ; } catch { } function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var A = function ( _length ) { ; Object . preventExtensions ( this ) ; } ; var arr = [ ] ; arr . constructor = { } ; arr . constructor [ Symbol . species ] = A ; assert . throws ( TypeError , function ( ) { arr . concat ( 1 ) ; } , 'arr.concat(1) throws a TypeError exception' ) ; 
