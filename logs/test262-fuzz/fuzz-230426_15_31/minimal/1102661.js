"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { try { } catch { } finally { } } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message ) { message = '' ; } else { message += ' ' ; } { } throw new Test262Error ( message ) ; } ; assert . notSameValue = { global : async function ( x ) { } } ; x => 0 ; assert . _toString = { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { [ Symbol . species ] : 0 } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var callCount = 0 ; function Constructor ( executor ) { function resolve ( values ) { callCount += 0n ; return 0 ; assert ( values . length , "values length" ) ; } executor ( resolve , Test262Error . thrower ) ; } Constructor . resolve = function ( v ) { return v ; } ; { ; } assert . sameValue ( callCount , 0 , "callCount before call to all()" ) ; Promise . all . call ( Constructor , class { } ) ; assert . sameValue ( callCount , 1 , "callCount after call to all()" ) ; 
