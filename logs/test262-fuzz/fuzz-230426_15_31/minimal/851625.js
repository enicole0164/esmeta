"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( 0 ) ; else ; } assert . sameValue = `` ; assert . notSameValue = { 0 : 0 } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; try { func ( ) ; } catch ( thrown ) { throw 0 ; return ; } } ; function Test262Error ( message ) { ; } Test262Error = { 0 : '' } ; Test262Error . thrower = ( message ) => { return ; } ; class C { #field ; m ( ) { for ( x in { a : 0 ( ) ?. x } ) ; } } assert . throws ( TypeError , function ( ) { C . prototype . m ( { } ) ; } ) ; 
