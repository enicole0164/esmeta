"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } ; throw new Test262Error ( message ) ; } ; assert . notSameValue = `` ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw x => 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { return ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function foo ( ) { } Object . defineProperty ( foo , "length" , { value : undefined } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "undefined" ) ; Object . defineProperty ( foo , "length" , { value : null } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "null" ) ; Object . defineProperty ( foo , "length" , { value : true } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "boolean" ) ; Object . defineProperty ( foo , "length" , { value : "1" } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "string" ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "symbol" ) ; Object . defineProperty ( foo , "length" , { value : new Number ( 1 ) } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "Number object" ) ; function bar ( ) { } Object . setPrototypeOf ( bar , { length : 42 } ) ; assert ( delete bar . length ) ; var bound = Function . prototype . bind . call ( bar , null , 1 ) ; assert . sameValue ( bound . length , 0 , "not own" ) ; 
