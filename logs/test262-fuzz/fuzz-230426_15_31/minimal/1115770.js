"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a ; } ; assert . sameValue = function ( actual , expected ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw Test262Error ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; async x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw x => 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } finally { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var iterable = { } ; var iterator = { next : function ( ) { return { done : true } ; } , return : function ( ) { return null ; } } ; iterable [ Symbol . iterator ] = function ( ) { return iterator ; } ; assert . throws ( TypeError , function ( ) { 0 , [ ] = iterable ; } ) ; 
