"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } 0 ; try { } catch { } finally { } assert . notSameValue = ( ... [ ] ) => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { return ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { throw 0 ; return ; } 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; 0 | 0 || 0 | 0 ^ 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } assert . throws ( TypeError , function ( ) { Array . prototype . every . call ( null ) ; } ) ; 
