"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = async function ( ... x ) { } ; assert . notSameValue = x => 0 ; if ( 0 ) ; assert . _toString = '' ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Number . NaN . toFixed ( ) , "NaN" , 'Number.NaN.toFixed() must return "NaN"' ) ; assert . sameValue ( Number . NaN . toFixed ( 0 ) , "NaN" , 'Number.NaN.toFixed(0) must return "NaN"' ) ; assert . sameValue ( Number . NaN . toFixed ( 1 ) , 'Number.NaN.toFixed(1) must return "NaN"' ) ; assert . sameValue ( Number . NaN . toFixed ( 1.1 ) , "NaN" , 'Number.NaN.toFixed(1.1) must return "NaN"' ) ; assert . sameValue ( Number . NaN . toFixed ( 0.9 ) , "NaN" , 'Number.NaN.toFixed(0.9) must return "NaN"' ) ; assert . sameValue ( Number . NaN . toFixed ( "1.1" ) , "NaN" , 'Number.NaN.toFixed("1.1") must return "NaN"' ) ; assert . sameValue ( Number . NaN . toFixed ( "0.9" ) , "NaN" , 'Number.NaN.toFixed("0.9") must return "NaN"' ) ; assert . sameValue ( Number . NaN . toFixed ( Number . NaN ) , "NaN" , 'Number.NaN.toFixed(Number.NaN) must return "NaN"' ) ; 0 ^ 0 ?? 0 ; try { s = Number . NaN . toFixed ( Number . POSITIVE_INFINITY ) ; throw new Test262Error ( ( 0 ) ) ; } catch ( e ) { assert ( e instanceof RangeError , 'The result of evaluating (e instanceof RangeError) is expected to be true' ) ; } 
