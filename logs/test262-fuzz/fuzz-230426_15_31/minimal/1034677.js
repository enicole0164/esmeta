"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } return ; throw new Test262Error ( message ) ; } assert . _isSameValue = class { } ; assert . sameValue = `` ; ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else x : ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; 0 ? 0 : 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var set = new Set ( [ 1 , 2 ] ) ; var iterator = set [ Symbol . iterator ] ( ) ; assert . throws ( TypeError , function ( ) { iterator . next . call ( { } ) ; } ) ; iterator = set . entries ( ) ; assert . throws ( TypeError , function ( ) { iterator . next . call ( { } ) ; } ) ; iterator = set . keys ( ) ; assert . throws ( TypeError , function ( ) { iterator . next . call ( { } ) ; } ) ; iterator = set . values ( ) ; assert . throws ( TypeError , function ( ) { iterator . next . call ( { } ) ; } ) ; iterator . next . call ( set [ Symbol . iterator ] ( ) ) ; 
