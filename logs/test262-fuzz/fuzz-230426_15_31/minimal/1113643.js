"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = `` ; assert . sameValue = 0 ; assert . notSameValue = [ 0 ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) ; else throw 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; async x => { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { global : null } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var arrayLike = { length : 2 , 0 : 0 , get 1 ( ) { throw new Test262Error ( ) ; } , } ; assert . throws ( Test262Error , function ( ) { ( function ( ) { } ) . apply ( null , arrayLike ) ; } ) ; 
