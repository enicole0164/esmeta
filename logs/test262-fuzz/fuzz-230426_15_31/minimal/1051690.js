"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 ; } return a && b !== b ; } ; switch ( 0 ) { } assert . notSameValue = function ( actual , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } message += 'Expected a ' + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { } ; Object . defineProperty ( obj , "foo" , { value : 12 , writable : true , configurable : false } ) ; Object . preventExtensions ( obj ) ; assert . sameValue ( Object . isFrozen ( obj ) , false , 'Object.isFrozen(obj)' ) ; 
