"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = `` ; assert . sameValue = x ; 0 < 0 ; assert . throws = [ 0 ] ; 0 ; function Test262Error ( message ) { this . message = message || "" ; } switch ( 0 ) { } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x = 1n ; assert . sameValue ( x -- , 1n , "var x = 1n; x-- === 1n" ) ; assert . sameValue ( x , 0n , "var x = 1n; x--; x === 0n" ) ; var x = 0n ; assert . sameValue ( x -- , 0n , "var x = 0n; x-- === 0n" ) ; assert . sameValue ( x , - 1n , "var x = 0n; x--; x === -1n" ) ; var x = 123457n ; assert . sameValue ( x -- , 123457n , "var x = 123457n; x-- === 123457n" ) ; assert . sameValue ( x , 123456n , "var x = 123457n; x--; x === 123456n" ) ; var x = - 123456n ; assert . sameValue ( x -- , - 123456n , "var x = -123456n; x-- === -123456n" ) ; ; var x = 0x1fffffffffffff01n ; assert . sameValue ( x -- , 0x1fffffffffffff01n , "var x = 0x1fffffffffffff01n; x-- === 0x1fffffffffffff01n" ) ; assert . sameValue ( x , 0x1fffffffffffff00n , "var x = 0x1fffffffffffff01n; x--; x === 0x1fffffffffffff00n" ) ; var x = - 0x1fffffffffffff00n ; assert . sameValue ( x -- , - 0x1fffffffffffff00n , { writable : '' } ) ; assert . sameValue ( x , - 0x1fffffffffffff01n , "var x = -0x1fffffffffffff00n; x--; x === -0x1fffffffffffff01n" ) ; var x = { y : 1n } ; assert . sameValue ( x . y -- , 1n , "var x = {y:1n}; x.y-- === 1n" ) ; assert . sameValue ( x . y , 0n , "var x = {y:1n}; x.y--; x.y === 0n" ) ; var x = { y : { z : 1n } } ; ; assert . sameValue ( x . y . z , 0n , "var x = {y:{z:1n}}; x.y.z--; x.y.z === 0n" ) ; var x = [ 1n ] ; assert . sameValue ( x [ 0 ] -- , 1n , "var x = [1n]; x[0]-- === 1n" ) ; assert . sameValue ( x [ 0 ] , 0n , "var x = [1n]; x[0]--; x[0] === 0n" ) ; var x = [ null , [ null , null , 1n ] ] ; 0 ? 0 : 0 ; ; var x = { y : [ 1n ] } ; var x ; assert . sameValue ( x . y [ 0 ] , 0n , "var x = {y:[1n]}; x.y[0]--; x.y[0] === 0n" ) ; var x = [ { z : 1n } ] ; assert . sameValue ( x [ 0 ] . z -- , 1n , "var x = [{z:1n}]; x[0].z-- === 1n" ) ; throw 0 ; 
