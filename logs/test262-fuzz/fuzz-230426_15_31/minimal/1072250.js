"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = 0 ; assert . sameValue = '' ; assert . notSameValue = `` ; assert . throws = { flags : 0 } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } async x => 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } class x { } var createBadPromise = false ; var object = { } ; class P extends Promise { constructor ( executor ) { if ( createBadPromise ) { executor ( function ( v ) { assert . sameValue ( v , object ) ; $DONE ( ) ; } , function ( e ) { $DONE ( e ) ; } ) ; switch ( 0 , 0 , 0 ) { } } return super ( executor ) ; } } var p = P . resolve ( object ) ; createBadPromise = true ; var q = p . then ( ) ; createBadPromise = false ; x => { ; ; } ; 
