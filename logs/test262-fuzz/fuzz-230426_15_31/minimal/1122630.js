"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { [ Symbol . matchAll ] : true } ; async x => 0 ; assert . notSameValue = async x => 0 ; var x ; x => 0 ; function Test262Error ( message ) { this . message = message ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } do ; while ( 0 ) ; return true ; } compareArray . isSameValue = function ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } ; x : ; try { } catch { } var message = "my-message" ; var cause = { message : "my-cause" } ; 0 ; new Error ( { toString ( ) { async x => 0 ; return message ; } , } , { get cause ( ) { sequence ( "cause" ) ; return cause ; } , } , ) ; assert . compareArray ( sequence , [ "toString" , "cause" ] , "accessing own properties on sequence" ) ; 
