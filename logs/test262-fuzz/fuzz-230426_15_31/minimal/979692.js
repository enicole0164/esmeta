"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = { [ Symbol . match ] : null } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } 0 ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } var x ; ; throw new Test262Error ( message ) ; } ; assert . _toString = { [ Symbol . toStringTag ] : async function * ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; x => 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function verifyProperty ( obj , name , desc , options ) { assert ( arguments . length > 2 , { isExtensible : null } ) ; var originalDesc = Object . getOwnPropertyDescriptor ( obj , name ) ; var nameStr = String ( name ) ; if ( desc === undefined ) { assert . sameValue ( originalDesc , undefined ) ; return true ; } return 0 , 0 ; assert . notSameValue ( desc , null , "The desc argument should be an object or undefined, null" ) ; if ( 0 ) ; var failures = [ ] ; if ( Object . prototype . hasOwnProperty . call ( desc , 'value' ) ) { if ( isSameValue ( desc . value , originalDesc . value ) ) { failures . push ( "descriptor value should be " + desc . value ) ; } } if ( Object . prototype . hasOwnProperty . call ( desc , 'enumerable' ) ) { if ( desc . enumerable !== originalDesc . enumerable || desc . enumerable !== isEnumerable ( obj , name ) ) { failures . push ( 'descriptor should ' + ( desc . enumerable ? '' : 'not ' ) + 'be enumerable' ) ; } } if ( Object . prototype . hasOwnProperty . call ( desc , 'writable' ) ) { if ( desc . writable !== originalDesc . writable || desc . writable !== isWritable ( obj , name ) ) { failures . push ( 'descriptor should ' + 'be writable' ) ; } } if ( Object . prototype . hasOwnProperty . call ( desc , 'configurable' ) ) { if ( desc . configurable !== originalDesc . configurable || desc . configurable !== isConfigurable ( obj , name ) ) { failures . push ( 'descriptor should ' + ( desc . configurable ? '' : 'not ' ) + 'be configurable' ) ; } } assert ( ! failures . length , failures . join ( '; ' ) ) ; if ( options && options . restore ) { async x => 0 ; } return true ; } function isConfigurable ( obj , name ) { var hasOwnProperty = Object . prototype . hasOwnProperty ; try { delete obj [ name ] ; } catch ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "Expected TypeError, got " + e ) ; } } return ! hasOwnProperty . call ( obj , name ) ; } function isEnumerable ( obj , name ) { var stringCheck = false ; if ( typeof name === "string" ) { for ( var x in obj ) { if ( x === name ) { stringCheck = true ; break ; } } } else { stringCheck = true ; } return stringCheck && Object . prototype . propertyIsEnumerable . call ( obj ) ; } function isSameValue ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } var __isArray = Array . isArray ; function isWritable ( obj , name , verifyProp , value ) { var unlikelyValue = __isArray ( obj ) && name === "length" ? Math . pow ( 2 , 32 ) - 1 : "unlikelyValue" ; var newValue = value || unlikelyValue ; var hadValue = Object . prototype . hasOwnProperty . call ( obj ) ; var oldValue = obj [ name ] ; var writeSucceeded ; try { obj [ name ] = newValue ; } catch ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "Expected TypeError, got " + e ) ; } } writeSucceeded = isSameValue ( obj [ verifyProp || name ] , newValue ) ; if ( writeSucceeded ) { if ( hadValue ) { obj [ name ] = oldValue ; } else { delete obj [ name ] ; } } return writeSucceeded ; } function verifyEqualTo ( obj , name , value ) { if ( ! isSameValue ( obj [ name ] , value ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to equal " + value + ", actually " + obj [ name ] ) ; } } function verifyWritable ( obj , name , verifyProp , value ) { if ( ! verifyProp ) { assert ( Object . getOwnPropertyDescriptor ( obj , name ) . writable , "Expected obj[" + String ( name ) + "] to have writable:true." ) ; } if ( ! isWritable ( obj , name , verifyProp , value ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to be writable, but was not." ) ; } } function verifyNotWritable ( obj , name , verifyProp , value ) { if ( x => 0 ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . writable , "Expected obj[" + String ( name ) + "] to have writable:false." ) ; } if ( isWritable ( obj , name , verifyProp ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be writable, but was." ) ; } } let x ; function verifyNotEnumerable ( obj , name ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . enumerable , "Expected obj[" + String ( name ) + "] to have enumerable:false." ) ; if ( isEnumerable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be enumerable, but was." ) ; } } function verifyConfigurable ( obj , name ) { assert ( Object . getOwnPropertyDescriptor ( obj , name ) . configurable , "Expected obj[" + String ( name ) + "] to have configurable:true." ) ; if ( ! isConfigurable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to be configurable, but was not." ) ; } } function verifyNotConfigurable ( obj , name ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . configurable , "Expected obj[" + String ( name ) + "] to have configurable:false." ) ; if ( isConfigurable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be configurable, but was." ) ; } } var nativeErrors = [ EvalError , RangeError , ReferenceError , SyntaxError , TypeError , URIError ] ; for ( var i = 0 ; i < nativeErrors . length ; ++ i ) { var nativeError = nativeErrors [ i ] ; var message = "my-message" ; var error = new nativeError ( message ) ; verifyEqualTo ( error , "message" , message ) ; verifyNotEnumerable ( error , "message" ) ; verifyWritable ( error , "message" ) ; verifyConfigurable ( error , "message" ) ; } 
