"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } await : ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = async x => 0 ; { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) try { } catch { } finally { } { } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; else ; return ; } x => 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var arrayLike = { } ; arrayLike . length = 2 ** 53 - 1 ; x => 0 ; arrayLike . length = 2 ** 53 ; x => 0 ; arrayLike . length = 2 ** 53 + 2 ; x => 0 ; arrayLike . length = Infinity ; assert . throws ( TypeError , function ( ) { Array . prototype . push . call ( arrayLike , null ) ; } , "Length is Infinity" ) ; 
