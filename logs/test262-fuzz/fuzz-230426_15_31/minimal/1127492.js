"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = this ; assert . notSameValue = { construct : '' } ; assert . throws = ( 0 ) ; assert . _toString = `` ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = `` ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } var p = { toString : function ( ) { throw 1 ; } } ; var body = { toString : function ( ) { throw "body" ; } } ; try { var f = new Function ( 0 ? 0 : 0 , body ) ; throw new Test262Error ( '#1: test failed' ) ; } catch ( e ) { assert . sameValue ( e , 1 , 'The value of e is expected to be 1' ) ; } 
