"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw Test262Error ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; var x ; assert . notSameValue = this ; await => 0 ; 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Object ( 2n ) - 1n , 1n , 'The result of (Object(2n) - 1n) is 1n' ) ; assert . sameValue ( 3n - Object ( 2n ) , 1n , 'The result of (3n - Object(2n)) is 1n' ) ; x => 0 ; assert . sameValue ( 3n - { valueOf : function ( ) { return 2n ; } } , 1n , { index : null } ) ; assert . sameValue ( { toString : function ( ) { return 2n ; } } - 1n , 1n , 'The result of (({toString: function() {return 2n;}}) - 1n) is 1n' ) ; async x => 0 ; 
