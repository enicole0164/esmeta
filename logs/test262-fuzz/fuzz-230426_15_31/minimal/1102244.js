"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { } throw new Test262Error ( message ) ; } async x => 0 ; ; assert . notSameValue = this ; x : ; ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } class x { } let callCount = 0 ; Promise . any ( { [ Symbol . iterator ] ( ) { callCount ++ ; return 1 ; } } ) . then ( ( ) => { $DONE ( 'The promise should be rejected, but was resolved' ) ; } , ( error ) => { assert . sameValue ( callCount , 1 , 'callCount === 1' ) ; assert ( error instanceof TypeError ) ; } ) . then ( $DONE , $DONE ) ; 
