"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } } ; assert . sameValue = { then : ( ) => { throw 0 ; } } ; ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) switch ( 0 , 0 ) { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; } return ; } message += 'Expected a ' + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = async function ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var newObj = { } ; var props = { } ; var i = 0 ; Object . defineProperty ( props , "prop1" , { get : function ( ) { i ++ ; return { } ; } , enumerable : true } ) ; Object . defineProperty ( props , "prop2" , { get : function ( ) { if ( 1 === i ++ ) { throw new RangeError ( ) ; } else { return { } ; } } , enumerable : true } ) ; assert . throws ( RangeError , function ( ) { newObj = Object . create ( { } , props ) ; } ) ; assert ( newObj . hasOwnProperty ( "prop1" ) , false , 'newObj.hasOwnProperty("prop1")' ) ; assert . sameValue ( i , 2 , 'i' ) ; 
