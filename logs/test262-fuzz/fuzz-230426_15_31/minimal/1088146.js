"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = 0 ?? 0 ; { ; } assert . notSameValue = this ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; x : ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { x : ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { x : ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var poisonedPrototypeLength = function ( ) { } ; var items = { } ; 0 ?? 0 ; switch ( 0 ) { } assert . throws ( Test262Error , function ( ) { Array . from . call ( ( 0 ) , items ) ; } , { prototype : false } ) ; 
