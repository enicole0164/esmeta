"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 0 ? 0 : 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; ; if ( 0 ) ; else ; assert . throws = [ 0 , ] ; assert . _toString = x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } if ( 0 ) ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; let x ; assert . sameValue ( Object . prototype . toString . call ( function ( ) { return arguments ; } ( ) ) , "[object Arguments]" , "Object.prototype.toString.call(function() { return arguments; }()) returns [object Arguments]" ) ; 
