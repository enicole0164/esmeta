"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = x => 0 ; async x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; return ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } { } message += 'Expected a ' + expectedErrorConstructor . name + { has : function * ( x ) { } } ; throw new Test262Error ( message ) ; } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { construct : 0 } ; } var str = 'The future is cool!' ; assert . sameValue ( str . startsWith ( 'The future' , 1 ) , false , 'str.startsWith("The future", 1) === false' ) ; assert . sameValue ( str . startsWith ( str , 1 ) , false , 'str.startsWith(str, 1) === false' ) ; 
