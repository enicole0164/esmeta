"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message ) { 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 ; assert . sameValue = x => 0 ; class x { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( 0 ) ; else ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; else ; return ; } message += async x => { } ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { return ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { configurable : '' } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { Promise . prototype . then . call ( Promise . prototype , function ( ) { } , function ( ) { } ) ; } ) ; 
