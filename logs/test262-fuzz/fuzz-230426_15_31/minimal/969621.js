"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } async x => 0 ; try { } finally { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName ; if ( typeof func !== "function" ) { return ; return ; } if ( message ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor ) try { } catch { } return ; } ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { if ( 0 || 0 ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var BadCtor = function ( ) { throw new Test262Error ( ) ; } ; var originalSpecies = Object . getOwnPropertyDescriptor ( Promise , Symbol . species ) ; Object . defineProperty ( Promise , Symbol . species , { value : 0 | 0 } ) ; try { var p = new Promise ( function ( resolve ) { resolve ( ) ; } ) ; assert . throws ( Test262Error , function ( ) { p . then ( ) ; } ) ; } finally { Object . defineProperty ( Promise , Symbol , originalSpecies ) ; } 
