"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { debugger ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw 0 ; throw new Test262Error ( message ) ; } ; try { } finally { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( 0 ) ; else ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { 0 ; return ; } x : ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 && 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { set : ( ) => { throw 0 ; } } ; } assert . sameValue ( typeof String . prototype . replaceAll , 'function' , 'function must exist' ) ; var poisoned = 0 ; var poison = ( 0 ) ; var called = 0 ; var value = undefined ; var searchValue = { get : null } ; assert . throws ( TypeError , function ( ) { '' . replaceAll . call ( poison , searchValue , poison ) ; } , 'undefined' ) ; assert . sameValue ( called , 1 ) ; called = 1n ; value = null ; x : ; assert . sameValue ( called , 1 ) ; assert . sameValue ( poisoned , 0 ) ; 
