"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 0 ? 0 : 0 ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = '' ; assert . _toString = { [ Symbol . species ] : async function * ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } 0 ? async x => 0 : 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Number . isNaN ( "NaN" ) , false , "string" ) ; assert . sameValue ( Number . isNaN ( [ NaN ] ) , false , "[NaN]" ) ; assert . sameValue ( Number . isNaN ( new Number ( NaN ) ) , false , "Number object" ) ; assert . sameValue ( Number . isNaN ( false ) , false , "false" ) ; assert . sameValue ( Number . isNaN ( true ) , false , "true" ) ; assert . sameValue ( Number . isNaN ( undefined ) , false , "undefined" ) ; assert . sameValue ( Number . isNaN ( null ) , false , "null" ) ; assert . sameValue ( Number . isNaN ( Symbol ( "1" ) ) , false , "symbol" ) ; assert . sameValue ( Number . isNaN ( ) , false , "no arg" ) ; 
