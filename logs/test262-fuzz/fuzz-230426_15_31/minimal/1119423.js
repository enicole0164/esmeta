"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { apply : false } ; assert . sameValue = class { } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw 0 ; throw new Test262Error ( message ) ; } ; assert . throws = class { } ; assert . _toString = function ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( ( undefined == undefined ) !== true ) { throw new Test262Error ( '#1: (undefined == undefined) === true' ) ; } if ( ( void 0 == undefined ) !== true ) { throw new Test262Error ( '#2: (void 0 == undefined) === true' ) ; } if ( ( undefined == eval ( "var x" ) ) !== true ) { throw new Test262Error ( '#3: (undefined == eval("var x")) === true' ) ; } if ( ( undefined == null ) !== true ) { throw new Test262Error ( { enumerable : null } ) ; } if ( ( null == void 0 ) !== true ) { throw new Test262Error ( '#5: (null == void 0) === true' ) ; } if ( ( null == null ) !== true ) { throw new Test262Error ( '#6: (null == null) === true' ) ; } 
