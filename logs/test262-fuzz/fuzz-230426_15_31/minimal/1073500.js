"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { 0 ; return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { debugger ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } x : ; throw new Test262Error ( message ) ; } ; 0 ; assert . throws = [ 0 , 0 , ] ; assert . _toString = function ( value ) { if ( 0 ) ; else ; } ; function Test262Error ( message ) { this . message = message || "" ; } x : ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Object ( Symbol . toPrimitive ) [ Symbol . toPrimitive ] ( ) , Symbol . toPrimitive ) ; 
