"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message ) var x , x ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw 0 , 0 ; throw new Test262Error ( message ) ; } ; ; assert . throws = async function ( ) { } ; assert . _toString = function ( value ) { debugger ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) return 0 ; else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var thenable = { then : function ( resolve ) { resolve ( ) ; } } ; function executor ( resolve , reject ) { resolve ( thenable ) ; throw new Error ( "ignored exception" ) ; } new Promise ( executor ) . then ( $DONE , $DONE ) ; 
