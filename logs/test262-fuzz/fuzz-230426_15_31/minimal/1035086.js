"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { flags : '' } ; 0 && 0 ; assert . notSameValue = function * x ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } catch ( x ) { } finally { } return ; } message += 0 ?? 0 ; throw new Test262Error ( message ) ; } ; try { } finally { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { raw : '' } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var count = 0 ; var item = [ 'foo' , 'bar' ] ; Object . defineProperty ( item , 0 , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; var iterable = { } ; iterable [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { value : item , done : false } ; } , return : function ( ) { count ++ ; } } ; } ; assert . throws ( Test262Error , function ( ) { new Map ( iterable ) ; } ) ; var x , x ; 
