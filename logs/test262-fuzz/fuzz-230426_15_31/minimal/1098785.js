"use strict";
let x ; assert . _isSameValue = x => 0 ; assert . sameValue = x => 0 ; try { } finally { } async x => 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function Array ( ) { } var o = { x : 1 , y : 2 } ; var a = Object . keys ( o ) ; var s = Object . prototype . toString . call ( a ) ; assert . sameValue ( s , '[object Array]' , 's' ) ; 
