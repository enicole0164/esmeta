"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = x => 0 ; assert . notSameValue = function * ( ) { } ; assert . throws = async function ( ) { } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var iterStepThrows = { } ; var poisonedDone = { } ; var returnCount = 0 ; var error = new Test262Error ( ) ; Object . defineProperty ( poisonedDone , 'done' , { get ( ) { throw error ; } } ) ; Object . defineProperty ( poisonedDone , 'value' , { get ( ) { } } ) ; iterStepThrows [ Symbol . iterator ] = function ( ) { return { next ( ) { return poisonedDone ; } , return ( ) { returnCount += 1 ; return { } ; } } ; } ; Promise . allSettled ( iterStepThrows ) ; assert . sameValue ( returnCount , 0 ) ; 
