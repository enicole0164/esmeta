"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 ; } return a !== a && b !== b ; } ; assert . sameValue = { [ Symbol . toPrimitive ] : false } ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; else ; return ; } 0 ?? 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } x => 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { } ; var map = new Map ( ) ; map . set ( 2 , obj ) ; map . set ( 3 , map ) ; var iterator = map . values ( ) ; var result ; result = iterator . next ( ) ; assert . sameValue ( result . value , 'foo' , 'First result `value` ("value")' ) ; assert . sameValue ( result . done , false , 'First result `done` flag' ) ; result = iterator . next ( ) ; assert . sameValue ( result . value , obj , 'Second result `value` ("value")' ) ; assert . sameValue ( result . done , false , 'Second result `done` flag' ) ; assert . sameValue ( result . value , map , 'Third result `value` ("value")' ) ; assert . sameValue ( result . done , false , 'Third result `done` flag' ) ; result = iterator . next ( ) ; assert . sameValue ( result . value , undefined , 'Exhausted result `value`' ) ; assert . sameValue ( result . done , true , 'Exhausted result `done` flag' ) ; result = iterator . next ( ) ; ; assert . sameValue ( result . done , true , 'Exhausted result `done` flag (repeated request)' ) ; 
