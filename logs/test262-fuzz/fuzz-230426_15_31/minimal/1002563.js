"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = { has : 0 } + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } x => { } ; assert . sameValue = async function ( ) { } ; assert . notSameValue = { 0 : async function * ( x ) { } } ; assert . throws = 0 ?? 0 ; await : ; function Test262Error ( message ) { this . message = message || "" ; } 0 ? 0 : 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( 0. . toString ( 2 ) , "0" ) ; assert . sameValue ( 1n . toString ( 0 ) , "1" ) ; assert . sameValue ( NaN . toString ( 1 ) , "NaN" ) ; assert . sameValue ( Infinity . toString ( 2 ) , "Infinity" ) ; 
