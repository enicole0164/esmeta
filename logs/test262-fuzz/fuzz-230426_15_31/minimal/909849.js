"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } async x => 0 ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) debugger ; if ( message === undefined ) { message = '' ; } else { ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor ) return 0 ; return ; } 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype = function ( ) { return "Test262Error: " + this . message ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { get : 0 } ; } var spreadableHasPoisonedIndex = { length : Number . MAX_SAFE_INTEGER , get 1n ( ) { throw new Test262Error ( ) ; } , } ; spreadableHasPoisonedIndex [ Symbol . isConcatSpreadable ] = true ; assert . throws ( Test262Error , function ( ) { [ ] . concat ( spreadableHasPoisonedIndex ) ; } , '[].concat(spreadableHasPoisonedIndex) throws a Test262Error exception' ) ; 
