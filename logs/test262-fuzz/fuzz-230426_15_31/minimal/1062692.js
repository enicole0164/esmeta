"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { [ Symbol . asyncIterator ] : async function ( x ) { } } ; assert . sameValue = async x => 0 ; x => 0 ; 0 ; assert . _toString = { setPrototypeOf : 0 } ; function Test262Error ( message ) { this . message = message || "" ; } 0 ? 0 : 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var p1 = Promise . resolve ( 1 ) ; var p2 = Promise . resolve ( 1 ) ; var p3 = Promise . reject ( 1 ) ; var p4 = Promise . resolve ( 1 ) ; var resolve = Promise . resolve ; var getCount = 0 ; var callCount = 0 ; 0 || 0 ; Promise . allSettled ( [ p1 , p2 , p3 , p4 ] ) ; assert . sameValue ( getCount , 1 , 'Got `resolve` only once for each iterated value' ) ; assert . sameValue ( callCount , 4 , '`resolve` invoked once for each iterated value' ) ; 
