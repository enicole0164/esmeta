"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } try { } catch { } finally { } throw new Test262Error ( message ) ; } 0 , 0 ; assert . sameValue = async function * ( ... x ) { } ; assert . notSameValue = x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) debugger ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) return 0 ; return ; } message += async x => { } ; throw new Test262Error ( message ) ; } ; assert . _toString = class x { } ; function Test262Error ( message ) { this . message = message || "" ; } try { } catch { } finally { } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { Map . prototype . entries . call ( new Set ( ) ) ; } ) ; assert . throws ( TypeError , function ( ) { var m = new Map ( ) ; m . entries . call ( new Set ( ) ) ; } ) ; 
