"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 0 ?? 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = `` ; x : switch ( 0 ) { case 0 : default : case 0 : } assert . notSameValue = [ 0 ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; var x ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } catch { } return ; } switch ( 0 ) { default : } throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { return ; } ; function Test262Error ( message ) { this . message = message || "" ; } var x ; x => 0 ; async function x ( [ x ] = 0 ) { } var predicate = async function ( ) { } ; assert . throws ( Test262Error , function ( ) { [ 1 ] . find ( predicate ) ; } ) ; 
