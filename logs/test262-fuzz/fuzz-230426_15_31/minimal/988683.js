"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; ; assert . _toString = `${ 0 }` ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error = ( message ) => { throw Test262Error ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function fn ( ) { } Object . defineProperty ( fn , "length" , { value : NaN } ) ; assert . sameValue ( fn . bind ( ) . length , 0 ) ; Object . defineProperty ( fn , "length" , { value : - 0 } ) ; assert . sameValue ( fn . bind ( ) . length , 0 ) ; Object . defineProperty ( fn , "length" , { value : Infinity } ) ; { } assert . sameValue ( fn . bind ( 0 , 0 ) . length , Infinity , "target length of infinity, one bound argument" ) ; Object . defineProperty ( fn , "length" , { value : - Infinity } ) ; assert . sameValue ( fn . bind ( ) . length , "target length of negative infinity, zero bound arguments" ) ; assert . sameValue ( fn . bind ( 0 , 0 ) . length , 0 , "target length of negative infinity, one bound argument" ) ; Object . defineProperty ( fn , "length" , { value : 3.66 } ) ; assert . sameValue ( fn . bind ( ) . length , 3 ) ; Object . defineProperty ( fn , "length" ) ; assert . sameValue ( fn . bind ( ) . length , 0 ) ; 
