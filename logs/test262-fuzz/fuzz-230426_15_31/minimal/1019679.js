"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } } assert . _isSameValue = function ( a ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert = class { } ; x => { } ; assert = async function * ( ) { ; ; } ; assert . _toString = async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class C extends class { } { #field ; constructor ( ) { var init = ( ) => super ( ) ; var object = { get a ( ) { init ( ) ; } } ; ( object ) ; } } assert . throws ( ReferenceError , function ( ) { new C ( ) ; } ) ; 
