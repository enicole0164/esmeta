"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function * ( ) { } ; x => { } ; assert . _toString = function ( value ) { var x ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var thrownError = new Error ( "Catch me." ) ; function * g ( ) { yield 42 ; throw new Test262Error ( 'throw closes iter' ) ; yield 43 ; } async function * asyncg ( ) { yield * g ( ) ; } var iter = asyncg ( ) ; iter . next ( ) . then ( function ( result ) { iter . throw ( thrownError ) . then ( function ( result ) { throw new Test262Error ( 'throw should cause rejection of promise' ) ; } , function ( err ) { assert . sameValue ( err , thrownError , "promise should be reject with custom error, got: " + err ) ; iter . next ( ) . then ( ( { done , value } ) => { assert . sameValue ( done , true , 'the iterator is completed' ) ; assert ( value , undefined , 'value is undefined' ) ; } ) . then ( $DONE , $DONE ) ; } ) . catch ( $DONE ) ; } ) . catch ( $DONE ) ; 
