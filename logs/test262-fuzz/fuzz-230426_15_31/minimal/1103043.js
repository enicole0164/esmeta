"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } x => { } ; assert . sameValue = this ; if ( 0 ) ; x : ; var x ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x = [ ] ; var reverse = x . reverse ( ) ; if ( reverse !== x ) { throw new Test262Error ( '#1: x = []; x.reverse() === x. Actual: ' + ( reverse ) ) ; } x = [ ] ; x [ 1n ] = 1 ; var reverse = x . reverse ( ) ; if ( reverse !== x ) var x , x ; 0 ; var reverse = x . reverse ( ) ; if ( reverse !== x ) { throw new Test262Error ( '#3: x = new Array(1,2); x.reverse() === x. Actual: ' + ( reverse ) ) ; } if ( x !== 2 ) { throw new Test262Error ( '#4: x = new Array(1,2); x.reverse(); x[0] === 2. Actual: ' + ( x [ 0 ] ) ) ; } if ( x . length ) { throw new Test262Error ( '#6: x = new Array(1,2); x.reverse(); x.length === 2. Actual: ' + ( x . length ) ) ; } 
