"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } if ( 0 ) ; try { } finally { } assert . notSameValue = null ; try { } catch { } assert . _toString = function ( value ) { try { } catch ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Array . prototype . unshift . call ( true ) , 0 , 'Array.prototype.unshift.call(true) must return 0' ) ; assert . sameValue ( Array . prototype . unshift . call ( false ) , 0 , 'Array.prototype.unshift.call(false) must return 0' ) ; 
