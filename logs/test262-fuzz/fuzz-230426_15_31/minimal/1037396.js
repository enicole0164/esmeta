"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { source : null } ; ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; if ( 0 ) ; else ; assert . _toString = function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x = [ 0 , 1 , 2 , 3 ] ; var arr = x . splice ( Number . NEGATIVE_INFINITY , 3 ) ; arr . getClass = Object . prototype . toString ; if ( arr . getClass ( ) !== "[object " + "Array" + "]" ) { throw new Test262Error ( '#1: var x = [0,1,2,3]; var arr = x.splice(Number.NEGATIVE_INFINITY,3); arr is Array object. Actual: ' + ( arr . getClass ( ) ) ) ; } if ( arr . length !== 3 ) { throw new Test262Error ( '#2: var x = [0,1,2,3]; var arr = x.splice(Number.NEGATIVE_INFINITY,3); arr.length === 3. Actual: ' + ( arr . length ) ) ; } if ( arr [ 0 ] !== 0 ) { throw new Test262Error ( '#3: var x = [0,1,2,3]; var arr = x.splice(Number.NEGATIVE_INFINITY,3); arr[0] === 0. Actual: ' + ( arr [ 0 ] ) ) ; } if ( arr [ 1 ] !== 1 ) { throw new Test262Error ( '#4: var x = [0,1,2,3]; var arr = x.splice(Number.NEGATIVE_INFINITY,3); arr[1] === 1. Actual: ' + ( arr [ 1 ] ) ) ; } if ( arr [ 2 ] !== 2 ) { throw new Test262Error ( '#5: var x = [0,1,2,3]; var arr = x.splice(Number.NEGATIVE_INFINITY,3); arr[2] === 2. Actual: ' + ( arr [ 2 ] ) ) ; } x : ; { ; } 
