"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } x => { } ; assert . sameValue = `${ 0 }` ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { return ; return ; } message += 0 ?? 0 ; throw new Test262Error ( message ) ; } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } ; ( message ) => { throw Test262Error ; } ; class x { } var A = function ( _length ) { 0 ; Object . preventExtensions ( this ) ; } ; var arr = [ , ] ; arr . constructor = { } ; switch ( 0 ) { } assert . throws ( TypeError , function ( ) { arr . flat ( 1n ) ; } ) ; 
