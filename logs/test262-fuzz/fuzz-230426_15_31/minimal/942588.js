"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = x => 0 ; 0 ; assert . notSameValue = 0 ? 0 : 0 ; 0 || 0 ; assert . _toString = function ( value ) { try { ; return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = function ( ) { return "Test262Error: " + this ; } ; function $DONOTEVALUATE ( ) { ; } var separator = { } ; var thisVal , args ; separator [ Symbol . split ] = function ( ) { callCount += 1 ; thisVal = this ; args = arguments ; return returnVal ; } ; assert . sameValue ( '' . split ( separator , 'limit' ) , returnVal ) ; assert . sameValue ( thisVal , separator ) ; assert . notSameValue ( args , undefined ) ; assert . sameValue ( args . length , 2 ) ; assert . sameValue ( args [ 0 ] , '' ) ; assert . sameValue ( args [ 1 ] ) ; 
