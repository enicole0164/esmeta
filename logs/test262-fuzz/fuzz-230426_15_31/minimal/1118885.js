"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 0 ?? 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; x : switch ( 0 ) { case 0 : default : case 0 : } assert . notSameValue = [ 0 ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { x : ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) 0 ; return ; } switch ( 0 ) { default : } throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { return ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { 0 : async function * ( x ) { } } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; async function * x ( ) { } var predicate = function ( ) { throw new Test262Error ( ) ; } ; assert . throws ( Test262Error , function ( ) { [ 1 ] . find ( predicate ) ; } ) ; 
