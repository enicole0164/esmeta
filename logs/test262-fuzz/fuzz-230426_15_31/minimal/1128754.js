"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = this ; try { } catch { } { ; } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; while ( 0 ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; for ( 0 ; ; ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) return 0 ; return ; } return ; throw new Test262Error ( message ) ; } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } switch ( 0 ) { } async x => { } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , ( ) => { Object . assign ( 'a' , [ 1 ] ) ; } ) ; 
