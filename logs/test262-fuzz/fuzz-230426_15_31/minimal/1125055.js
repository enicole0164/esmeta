"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { [ Symbol . toPrimitive ] : true } ; assert . sameValue = async x => 0 ; assert . notSameValue = 0 || 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { debugger ; return ; } { } throw new Test262Error ( message ) ; } ; for ( var x in 0 ) ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Number . isInteger ( 6.75 ) , false , '6.75' ) ; assert . sameValue ( Number . isInteger ( 0.000001 ) , false , '0.000001' ) ; assert . sameValue ( Number . isInteger ( - 0.000001 ) , false , '-0.000001' ) ; assert . sameValue ( Number . isInteger ( 11e-1 ) , false , '11e-1' ) ; 
