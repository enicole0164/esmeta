"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) var x ; throw new Test262Error ( message ) ; } x => 0 ; assert . sameValue = function x ( ) { } ; assert . notSameValue = { } ; if ( 0 ) ; else ; assert . _toString = function ( value ) { switch ( 0 ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = { get : '' } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function x ( ) { } var array = async x => 0 ; var arrayIndex = - 1 ; function mapFn ( value , index ) { arrayIndex ++ ; var x , [ ] = 0 ; assert . sameValue ( value , 127 , `` ) ; assert . sameValue ( index , arrayIndex , { defineProperty : null } ) ; return value ; } var a = Array . from ( array , 0 ) ; assert . sameValue ( a . length , array . length , { [ Symbol . iterator ] : false } ) ; 0 ; 
