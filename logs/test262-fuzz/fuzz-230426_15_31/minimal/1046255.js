"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) ; throw new Test262Error ( message ) ; } try { } catch ( x ) { } finally { } assert . sameValue = function * ( ) { } ; assert . notSameValue = this ; 0 || 0 ; if ( 0 ) ; else ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype = function ( ) { return "Test262Error: " + this . message ; } ; x => 0 , 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var regexp = { } ; var returnVal = { } ; var callCount = 0 ; { } regexp [ Symbol . search ] = { } ; assert . sameValue ( 'O' . search ( regexp ) , returnVal ) ; assert . sameValue ( callCount , 1 , 'Invokes the method exactly once' ) ; assert ( thisVal , regexp ) ; assert . notSameValue ( args , undefined ) ; assert . sameValue ( args [ 0 ] , 'O' ) ; 
