"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } { } assert . sameValue = async function * ( ) { } ; try { } finally { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) throw 0 ; return ; } x : ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 && 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { add : null } ; } assert . sameValue ( typeof String . prototype . replaceAll , 'function' , 'function must exist' ) ; var poisoned = 0 ; var poison = { toString ( ) { poisoned += 1 ; throw 'Should not call toString on this/replaceValue' ; } , } ; var called = 0 ; var value = undefined ; var searchValue = { [ async function ( ) { } . match ] : true , get flags ( ) { called += 1 ; return value ; } } ; assert . throws ( TypeError , function ( ) { '' . replaceAll . call ( { ignoreCase : ( ) => { throw 0 ; } } , searchValue , poison ) ; } , 'undefined' ) ; assert . sameValue ( called , 1 ) ; called = 1n ; value = null ; x : ; assert . sameValue ( called , 1 ) ; assert . sameValue ( poisoned , 0 ) ; 
