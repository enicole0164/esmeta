"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; async x => 0 ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += x => 0 ; throw new Test262Error ( message ) ; } ; x : ; assert . _toString = function ( value ) { 0 ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var executed = false ; class A { } class C extends A { #x = #x in 0 ; } new C ( ) ; assert . sameValue ( executed , true ) ; 
