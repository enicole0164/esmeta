"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } var x ; throw new Test262Error ( message ) ; } var x ; x => { } ; assert . notSameValue = { prototype : 0 } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { debugger ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { x : 0 ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; } ; this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var accessed = false ; function callbackfn ( prevVal , curVal , idx , obj ) { if ( idx <= 1 ) { accessed = true ; } } var arr = [ 0 , , 2 ] ; Object . defineProperty ( arr , "1" , { get : function * ( ) { } , configurable : true } ) ; assert . throws ( Test262Error , function ( ) { arr . reduceRight ( class { } ) ; } ) ; 
