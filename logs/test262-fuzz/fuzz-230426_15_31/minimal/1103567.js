"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { writable : async function * ( x ) { } } ; assert . sameValue = { has : function * ( x ) { } } ; assert . notSameValue = async function ( ) { } ; try { } finally { } assert . _toString = async function * x ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var __instance = { toString : function ( ) { } } ; var __obj = { toString : function ( ) { throw "infirstarg" ; } } ; __instance . concat = String . prototype . concat ; try { String . prototype . concat . call ( __instance , __obj , notexist ) ; { } } catch ( e ) { if ( e !== "intostring" ) { throw new Test262Error ( '#1: e === "intostring". Actual: ' + e ) ; } } var notexist ; 
