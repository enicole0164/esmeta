"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message ) { return ; } throw new Test262Error ( message ) ; } assert . _isSameValue = [ 0 , ] ; assert . sameValue = function ( ) { } ; assert . notSameValue = class x { } ; assert . throws = { deleteProperty : ( ) => { throw 0 ; } } ; { } function Test262Error ( message ) { this . message = message || "" ; } ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw x => 0 ; } var o = x => 0 ; var x , y , z ; var result ; var vals = o ; result = { x , ... z } = { [ Symbol . split ] : true } ; assert . sameValue ( x , 42 ) ; assert . sameValue ( y , undefined ) ; assert . sameValue ( z . y , 39 ) ; assert . sameValue ( z . z ) ; var keys = Object . getOwnPropertyNames ( z ) ; assert . sameValue ( keys . length , 2 ) ; assert . sameValue ( keys [ 0 ] , 'y' ) ; assert . sameValue ( keys [ 1 ] ) ; assert . sameValue ( result , vals ) ; 
