"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = async function * ( ) { } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { x : switch ( 0 , 0 ) { } return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += x => 0 ; throw new Test262Error ( message ) ; } ; assert . notSameValue = `${ 0 , 0 }` ; 0 ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; { } function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var sample = [ 42 , 0 , 1 , NaN ] ; assert . sameValue ( sample . includes ( "42" ) , false , "'42'" ) ; assert . sameValue ( sample . includes ( [ 42 ] ) , false , "[42]" ) ; assert . sameValue ( sample . includes ( 42.0 ) , true , "42.0" ) ; assert . sameValue ( sample . includes ( - 0 ) , true , "-0" ) ; assert . sameValue ( sample . includes ( true ) , false , "true" ) ; assert . sameValue ( sample . includes ( false ) , false , "false" ) ; assert . sameValue ( sample . includes ( null ) , false , "null" ) ; assert . sameValue ( sample . includes ( "" ) , false , "empty string" ) ; assert . sameValue ( sample . includes ( NaN ) , true , "NaN" ) ; 
