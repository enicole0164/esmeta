"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } { ; } var x ; assert . notSameValue = 0 & 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { ' ' ; } try { func ( ) ; } catch ( thrown ) { 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name ; throw new Test262Error ( message ) ; } ; ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var toStringAccessed = false ; var valueOfAccessed = false ; var obj = { length : { toString : function ( ) { toStringAccessed = true ; return { } ; } , valueOf : function ( ) { valueOfAccessed = true ; return { } ; } } } ; assert . throws ( TypeError , function ( ) { Array . prototype . indexOf . call ( obj ) ; } ) ; assert ( toStringAccessed , 'toStringAccessed' ) ; assert ( valueOfAccessed , 'valueOfAccessed' ) ; 
