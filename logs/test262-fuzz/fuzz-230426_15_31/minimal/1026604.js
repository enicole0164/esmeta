"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) throw 0 ; throw new Test262Error ( message ) ; } try { } finally { } x : ; assert . notSameValue = { dotAll : 0 } ; x => 0 ; try { ; } catch { } finally { } function Test262Error ( message ) { this . message = message || "" ; } x => 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { debugger ; } var thrown = new Test262Error ( ) ; var badIter = { } ; var poisonedValue = Object . defineProperty ( { done : true } , 'value' , { get : function ( ) { throw thrown ; } } ) ; badIter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { done : false } ; } , return : x => 0 } ; } ; function * g ( ) { try { yield * badIter ; } catch ( err ) { caught = err ; } } var iter = g ( ) ; var caught ; iter . next ( ) ; iter . return ( ) ; assert . sameValue ( caught , thrown ) ; 
