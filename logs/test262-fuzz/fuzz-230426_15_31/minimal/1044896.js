"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) var x ; throw new Test262Error ( message ) ; } assert . _isSameValue = class { } ; 0 ; assert . notSameValue = class x { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { ; x : ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { for ( var await of 0 ) ; return ; } do ; while ( 0 ) ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { groups : function ( x ) { } } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw 0 ?? 0 ; } var nextCount = 0 ; var returnCount = 0 ; var iterable = { } ; var thrower = `${ 0 }${ 0 }` ; function ReturnError ( ) { } var iterator = { has : ( ) => { throw 0 ; } } ; iterable [ Symbol . iterator ] = function ( ) { return iterator ; } ; assert . throws ( Test262Error , function ( ) { 0 , [ { } [ thrower ( ) ] , ] = iterable ; } ) ; assert . sameValue ( nextCount , 0 ) ; assert . sameValue ( returnCount , 1 ) ; 
