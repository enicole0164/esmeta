"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } ; assert . sameValue = function * ( ) { } ; 0 ?? 0 ?? 0 ; assert . throws = async x => 0 ; assert . _toString = [ ] ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var returnArgumentsLength ; var syncIterator = { [ Symbol . iterator ] ( ) { return this ; } , next ( ) { return { done : false } ; } , return ( ) { returnArgumentsLength = arguments . length ; return { done : true } ; } , } ; ( async function ( ) { for await ( let _ of syncIterator ) { break ; } assert . sameValue ( returnArgumentsLength , 0 ) ; } ) ( ) . then ( $DONE , $DONE ) ; 
