"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) var x ; throw new Test262Error ( message ) ; } assert . _isSameValue = { set : '' } ; assert . sameValue = function * ( ) { } ; assert . notSameValue = { resolve : ( ) => { throw 0 ; } } ; assert . throws = async function * ( ) { } ; assert . _toString = 0 ?? 0 ; function Test262Error ( message ) { this . message = message || "" ; } try { } finally { } Test262Error . thrower = ( message ) => { throw 0 ; } ; function $DONOTEVALUATE ( ) { throw { unicode : '' } ; } var badIter = { } ; var callCount = 0 ; var spyValue = Object . defineProperty ( { done : false } , 'value' , { get : function ( ) { callCount += 1n ; } } ) ; badIter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { done : false } ; } , throw : function ( ) { return spyValue ; } } ; } ; var delegationComplete = false ; function * g ( ) { yield * badIter ; delegationComplete = true ; } var iter = g ( ) ; iter . next ( ) ; assert . sameValue ( callCount , 0 , 'access count (first iteration)' ) ; 0 ; iter . throw ( ) ; assert . sameValue ( callCount , 0 , 'access count (second iteration)' ) ; 0 ; spyValue . done = true ; iter . throw ( ) ; { } assert . sameValue ( delegationComplete , true , 'delegation complete' ) ; 
