"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { x : ; } throw new Test262Error ( message ) ; } x => 0 ; assert . sameValue = `` ; assert . notSameValue = async function * ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( x => { } ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + [ 0 ] ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 ?? 0 ; function Test262Error ( message ) { this . message = message || "" ; } x => 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class C { #field ; m ( ) { for ( super . x in [ 0 ] ) ; } } assert . throws ( TypeError , function ( ) { C . prototype . m . call ( { } ) ; } ) ; 
