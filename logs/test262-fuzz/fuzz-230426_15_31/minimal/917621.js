"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } await : ; throw new Test262Error ( message ) ; } assert . _isSameValue = 0 ; assert . sameValue = '' ; assert . notSameValue = `` ; assert . throws = { flags : 0 } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; try { } catch { } function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } class x { } var createBadPromise = true ; var object = { } ; class P extends Promise { constructor ( executor ) { if ( createBadPromise ) { executor ( function ( v ) { assert . sameValue ( v , object ) ; $DONE ( ) ; } , class x { } ) ; return object ; } return super ( executor ) ; } } var p = P . resolve ( object ) ; createBadPromise = true ; var q = p . then ( ) ; createBadPromise = false ; assert . sameValue ( q , object , "then() returns object" ) ; 
