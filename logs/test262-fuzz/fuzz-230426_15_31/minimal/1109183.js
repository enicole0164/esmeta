"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = { isExtensible : function ( x ) { } } ; ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; x : ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { var x ; return ; } ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( ) { { } } ; function Test262Error ( message ) { this . message = message || "" ; } ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { exec : 0 } ; } var arr = [ ] ; Object . preventExtensions ( arr ) ; assert . throws ( TypeError , function ( ) { Object . defineProperties ( arr , { "0" : { value : 1 } } ) ; } ) ; assert . sameValue ( arr . hasOwnProperty ( "0" ) , false , 'arr.hasOwnProperty("0")' ) ; 
