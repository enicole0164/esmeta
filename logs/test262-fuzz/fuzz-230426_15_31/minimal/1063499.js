"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } 0 ; try { ; } catch { } finally { } throw new Test262Error ( message ) ; } ; { x : ; } async x => 0 ; x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; let x ; assert . sameValue ( typeof Array . prototype . at , 'function' , { done : async function * ( x ) { } } ) ; let a = `${ 0 }` ; assert . sameValue ( a . at ( - 2 ) , undefined , 'a.at(-2) returns undefined' ) ; assert . sameValue ( a . at ( 0 ) , undefined , 'a.at(0) returns undefined' ) ; assert . sameValue ( a . at ( 1 ) , undefined , 'a.at(1) returns undefined' ) ; 
