"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = this ; var x ; assert . notSameValue = x => 0 ; x => 0 ; assert . _toString = { isExtensible : false } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } async x => { } ; 0 ? x => 0 : 0 ; x : ; assert . sameValue ( Object . is ( Infinity , - Infinity ) , false , "`Object.is(Infinity, -Infinity)` returns `false`" ) ; 
