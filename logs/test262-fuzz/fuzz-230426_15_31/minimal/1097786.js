"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { async x => 0 ; } throw new Test262Error ( message ) ; } var x ; x => { } ; { prototype : 0 } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { debugger ; return ; } var x ; try { func ( ) ; } catch ( thrown ) { x : 0 ; } return ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var accessed = false ; function callbackfn ( prevVal , curVal , obj ) { if ( idx <= 1 ) { accessed = true ; } } var arr = [ 0 , , 2 ] ; Object . defineProperty ( arr , "1" , { get : function ( ) { throw new Test262Error ( "unhandle exception happened in getter" ) ; } , configurable : true } ) ; assert . throws ( Test262Error , function ( ) { arr . reduceRight ( async function ( ) { } , "initialValue" ) ; } ) ; assert . sameValue ( accessed , false , 'accessed' ) ; 
