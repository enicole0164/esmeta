"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . sameValue = function * ( ) { } ; assert . notSameValue = this ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; while ( 0 ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } catch ( x ) { } finally { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { return ; return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var split = String . prototype . split ; assert . sameValue ( typeof split , 'function' ) ; assert . throws ( TypeError , function ( ) { split . call ( undefined , '' ) ; } , 'undefined' ) ; assert . throws ( TypeError , function ( ) { split . call ( null , '' ) ; } , 'null' ) ; 
