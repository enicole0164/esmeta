"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } switch ( 0 ) { } throw new Test262Error ( message ) ; } ; switch ( 0 ) { } assert . throws = async function * ( ) { } ; assert . _toString = `${ 0 , 0 }` ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { throw : ( ) => { throw 0 ; } } ; 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var thrown = new Test262Error ( ) ; var badIter = { } ; var poisonedDone = Object . defineProperty ( { } , 'done' , { get : function ( ) { throw thrown ; } } ) ; badIter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { done : false } ; } , throw : function ( ) { return poisonedDone ; } } ; } ; function * g ( ) { try { yield * badIter ; } catch ( err ) { err ; } } var iter = g ( ) ; var caught ; iter . next ( ) ; iter . throw ( ) ; assert . sameValue ( caught , thrown ) ; 
