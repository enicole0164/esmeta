"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = 0 ?? 0 ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = { unicode : true } ; assert . _toString = function ( value ) { debugger ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } if ( Number . NEGATIVE_INFINITY / 0 !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#1: Infinity / 0 === Infinity. Actual: ' + ( Infinity / 0 ) ) ; } if ( Number . NEGATIVE_INFINITY / 0 !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#2: -Infinity / -0 === Infinity. Actual: ' + ( - Infinity / - 0 ) ) ; } if ( Number . POSITIVE_INFINITY / 0 !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#3: Infinity / 0 === Infinity. Actual: ' + ( Infinity / 0 ) ) ; } if ( Number . POSITIVE_INFINITY / - 0 !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#4: Infinity / -0 === -Infinity. Actual: ' + ( Infinity / - 0 ) ) ; } 
