"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } x : ; throw new Test262Error ( message ) ; } assert . _isSameValue = 0 ? 0 : 0 ; assert . sameValue = async function * ( ) { } ; assert . notSameValue = async function ( ) { } ; async x => 0 ? 0 : async x => 0 ; try { } catch { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } var array = [ 0 , 'a' , true , false , null ] ; var i = 0 ; for ( var value of array . keys ( ) ) { assert . sameValue ( value , i , 'element at index ' ) ; i ++ ; } assert . sameValue ( i , 8 , 'Visits all elements' ) ; 
