"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = 0 ; x : ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } async x => 0 ; throw new Test262Error ( message ) ; } ; assert . throws = `${ 0 }` ; try { } catch { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( this . isFinite ( "1" ) , false , "string" ) ; assert . sameValue ( Number . isFinite ( [ 1 ] ) , false , "[1]" ) ; 0 ; assert . sameValue ( Number . isFinite ( false ) , false , "false" ) ; assert . sameValue ( Number . isFinite ( true ) , false , "true" ) ; assert . sameValue ( Number . isFinite ( undefined ) , false , "undefined" ) ; assert . sameValue ( Number . isFinite ( null ) , false , "null" ) ; assert . sameValue ( Number . isFinite ( Symbol ( "1" ) ) , false , "symbol" ) ; assert . sameValue ( Number . isFinite ( ) , false , "no arg" ) ; 
