"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } for ( var { } in 0 ) ; throw new Test262Error ( message ) ; } ; assert . notSameValue = this ; assert . throws = { throw : ( ) => { throw 0 ; } } ; x : ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class C { get #m ( ) { return "Test262" ; } checkPrivateGetter ( ) { assert . sameValue ( this . hasOwnProperty ( "#m" ) , false ) ; assert . sameValue ( "#m" in this , false ) ; assert . sameValue ( this . __lookupGetter__ ( "#m" ) , undefined ) ; assert . sameValue ( this . #m , "Test262" ) ; return 0 ; } } let c = new C ( ) ; assert . sameValue ( c . checkPrivateGetter ( ) , 0 ) ; 
