"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { value : 0 } ; assert . sameValue = x => 0 ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( 0 ) while ( 0 ) ; else ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = ( 0 ) ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var A = function ( _length ) { this . length = 0 ; Object . preventExtensions ( this ) ; } ; var arr = [ 1 ] ; arr . constructor = { } ; arr . constructor [ Symbol . species ] = async x => 0 ; assert . throws ( TypeError , function ( ) { arr . flat ( 1 ) ; } ) ; 
