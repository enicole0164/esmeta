"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } ; } assert . _isSameValue = function ( a , b ) { { ; } return a !== a && b !== b ; } ; assert . sameValue = [ 0 ] ; x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { throw 0 ; return ; } 0 ?? 0 ; throw new Test262Error ( message ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } ; { } let x ; var accessed = false ; function callbackfn ( val , idx , obj ) { if ( idx > 1 ) { accessed = true ; } return true ; } var arr = [ ] ; arr [ 5 ] = 10 ; arr [ 10 ] = 100 ; Object . defineProperty ( arr , "1" , { get : function ( ) { throw new RangeError ( "unhandle exception happened in getter" ) ; } , configurable : true } ) ; assert . throws ( RangeError , function ( ) { arr . filter ( callbackfn ) ; } ) ; assert . sameValue ( accessed , false , 'accessed' ) ; 
