"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; ; assert . notSameValue = { getOwnPropertyDescriptor : 0 } ; assert . throws = function ( ) { } ; assert . _toString = async function * x ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } async x => 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var __instance = { toString : function ( ) { throw "intostring" ; } } ; var __obj = { toString : function ( ) { throw "infirstarg" ; } } ; __instance . concat = String . prototype . concat ; try { String . prototype . concat . call ( __instance , __obj , notexist ) ; throw 0 ( ) [ 0 ] %= 0 ; } catch ( e ) { if ( e !== "intostring" ) { throw new Test262Error ( '#1: e === "intostring". Actual: ' + e ) ; } } var notexist ; 
