"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = this ; assert . notSameValue = function ( actual , unexpected , message ) { if ( assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; return 0 ; } } throw new Test262Error ( message ) ; } ; try { } finally { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var fromIndex = Symbol ( "1" ) ; var sample = [ 7 ] ; assert . throws ( TypeError , function ( ) { sample . includes ( 7 , fromIndex ) ; } ) ; 
