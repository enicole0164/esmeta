"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = { prototype : true } + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = { lastIndex : ( ) => { throw 0 ; } } ; assert . notSameValue = function ( actual , unexpected ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . call ( value ) ; } } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var s = new WeakSet ( ) ; var foo = { } ; var bar = { } ; var baz = { } ; s . add ( foo ) ; s . add ( bar ) ; s . add ( baz ) ; assert ( s . has ( foo ) ) ; assert ( s . has ( bar ) ) ; assert ( s . has ( baz ) ) ; 
