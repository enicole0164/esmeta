"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } var x ; assert = { [ Symbol . isConcatSpreadable ] : async function * ( x ) { } } ; 0 ; assert . throws = class x { } ; assert . _toString = { multiline : true } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = function ( ) { return "Test262Error: " ; } ; ; var iterNextValThrows = { } ; var returnCount = 0 ; var poisonedVal = { throw : '' } ; var error = Test262Error ; Object . defineProperty ( poisonedVal , 'value' , { get : function ( ) { throw error ; } } ) ; iterNextValThrows [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedVal ; } , return : function ( ) { returnCount += 1 ; return { } ; } } ; } ; Promise . all ( iterNextValThrows ) ; assert . sameValue ( returnCount , 0 ) ; 
