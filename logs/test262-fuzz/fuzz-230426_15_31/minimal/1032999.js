"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 === 1 / b ; } return a !== a && b !== b ; } ; assert = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw 0 ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else try { } finally { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = { [ Symbol . replace ] : null } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { join : async function ( x ) { } } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b !== a . length ) { return false ; } throw 0 ; return true ; } compareArray . isSameValue = function ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } ; 0 ; { ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } const actual = [ ] ; const expected = async function ( ) { } ; const iterations = 3 ; async function * naturalNumbers ( start ) { let current = start ; while ( current > 0 ) { yield Promise . resolve ( current -- ) ; } } async function trigger ( ) { for await ( const num of naturalNumbers ( iterations ) ) { actual . push ( 'Await: ' + num ) ; } } async function checkAssertions ( ) { assert . compareArray ( actual , expected , 'Async/await and promises should be interleaved' ) ; } function countdown ( counter ) { actual . push ( 'Promise: ' + counter ) ; if ( counter > 0 ) { return Promise . resolve ( counter - 1 ) . then ( countdown ) ; } else { checkAssertions ( ) . then ; } } trigger ( ) ; countdown ( iterations * 2 ) ; 
