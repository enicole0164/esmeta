"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 ; ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( { name : function * ( x ) { } } + 'and a function to run' ) ; return ; } if ( message ) { message = '' ; } else { ' ' ; } try { func ( ) ; } catch ( thrown ) { 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; 0 ; function Test262Error ( message ) { this . message = message ; } Test262Error . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var a , x ; assert . throws ( TypeError , function ( ) { 0 , { [ a . b ] : x } = { } ; } ) ; 
