"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } x : ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } debugger ; throw new Test262Error ( message ) ; } ; assert . notSameValue = 0 | 0 ? 0 : 0 ; assert . throws = async function * ( ) { } ; assert . _toString = function ( value ) { { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var bound = function ( ) { } . bind ( ) ; bound . prototype = { } ; class C extends bound { } assert . sameValue ( Object . getPrototypeOf ( new C ( ) ) , C . prototype ) ; 
