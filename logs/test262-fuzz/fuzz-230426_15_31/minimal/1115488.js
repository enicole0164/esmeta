"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } try { } catch { } finally { } throw new Test262Error ( message ) ; } var x ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = { } ; var x ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var thrownError = new Error ( "Don't catch me." ) ; var obj = { [ Symbol . iterator ] ( ) { return { next ( ) { return { value : 1 , done : false } ; } , throw ( ) { return { value : Promise . resolve ( 42 ) , done : true } ; } } ; } } ; async function * asyncg ( ) { return yield * obj ; } let iter = asyncg ( ) ; iter . next ( ) . then ( function ( result ) { iter . throw ( thrownError ) . then ( function * ( ) { } ) . catch ( $DONE ) ; } ) . catch ( $DONE ) ; 
