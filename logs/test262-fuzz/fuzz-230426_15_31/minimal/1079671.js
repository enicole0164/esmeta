"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a && b !== b ; } ; { } assert . notSameValue = function ( actual , unexpected ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = async function * ( ... x ) { } ; assert . _toString = class { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; 0 ?? 0 ; let x ; assert . notSameValue ( Symbol ( '' ) , Symbol ( '' ) , 'empty string' ) ; assert . notSameValue ( Symbol ( ) , Symbol ( ) , 'undefined' ) ; assert ( Symbol ( null ) , Symbol ( null ) , 'null value' ) ; assert . notSameValue ( Symbol ( 'x' ) , 'string "x"' ) ; 
