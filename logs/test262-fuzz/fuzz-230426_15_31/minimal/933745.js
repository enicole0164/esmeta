"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } { } throw new Test262Error ( message ) ; } x => 0 ; if ( 0 ) ; else ; assert . notSameValue = { [ Symbol . asyncIterator ] : '' } ; 0 & 0 === 0 || 0 ; assert . _toString = function ( value ) { x : ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { configurable : false } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class x { ; } function fn ( ) { const a = 'local' ; return eval ?. ( ) ; } { } const b = ( a => eval ?. ( 'a' ) ) ( 'local' ) ; throw 0 ; 
