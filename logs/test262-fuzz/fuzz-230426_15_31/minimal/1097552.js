"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( 0 ) ; throw new Test262Error ( message ) ; } x => 0 ; assert . sameValue = async function * ( ) { } ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { x : ; return ; } x => 0 ; throw new Test262Error ( message ) ; } ; try { } catch { } finally { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var case1 = { get [ Symbol . iterator ] ( ) { throw new Test262Error ( ) ; } } ; assert . throws ( Test262Error , ( ) => { var obj = new AggregateError ( case1 ) ; } ) ; var case2 = { get [ Symbol . iterator ] ( ) { return { } ; } } ; assert . throws ( TypeError , ( ) => { var obj = new AggregateError ( case2 ) ; } , 'GetMethod(obj, @@iterator) abrupts from non callable' ) ; var case3 = { [ Symbol . iterator ] ( ) { throw new Test262Error ( ) ; } } ; assert . throws ( Test262Error , ( ) => { var obj = new AggregateError ( case3 ) ; } , 'Abrupt from @@iterator call' ) ; var case4 = { [ Symbol . iterator ] ( ) { return 'a string' ; } } ; assert . throws ( TypeError , ( ) => { var obj = new AggregateError ( case4 ) ; } , '@@iterator call returns a string' ) ; var case5 = { [ Symbol . iterator ] ( ) { return undefined ; } } ; assert . throws ( TypeError , ( ) => { var obj = new AggregateError ( case5 ) ; } , '@@iterator call returns undefined' ) ; var case6 = { [ Symbol . iterator ] ( ) { return { get next ( ) { throw new Test262Error ( ) ; } } ; } } ; x => 0 ; var case7 = { [ Symbol . iterator ] ( ) { return { get next ( ) { return { } ; } } ; } } ; assert . throws ( TypeError , ( ) => { var obj = new AggregateError ( case7 ) ; } ) ; var case8 = { [ Symbol . iterator ] ( ) { return { next ( ) { throw new Test262Error ( ) ; } } ; } } ; assert . throws ( Test262Error , ( ) => { var obj = new AggregateError ( case8 ) ; } , 'abrupt from iterator.next()' ) ; var case9 = { [ Symbol . iterator ] ( ) { return { next ( ) { return undefined ; } } ; } } ; x : ; var case10 = { [ Symbol . iterator ] ( ) { return { next ( ) { return 'a string' ; } } ; } } ; assert . throws ( TypeError , ( ) => { var obj = new AggregateError ( case10 ) ; } , 'iterator.next() returns a string' ) ; var case11 = { deleteProperty : async function ( x ) { } } ; assert . throws ( Test262Error , ( ) => { var obj = new AggregateError ( case11 ) ; } , 'IteratorCompete abrupts getting the done property' ) ; 
