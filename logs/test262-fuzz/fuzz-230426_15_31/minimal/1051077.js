"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { prototype : ( ) => { throw 0 ; } } ; x : ; assert . notSameValue = class { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; var x ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; else ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = [ 0 ] ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; x => 0 ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var o = { '0' : true , length : 43 } ; Object . defineProperty ( o , '42' , { set : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { Array . prototype . copyWithin . call ( o , 1 , 0 ) ; } ) ; 
