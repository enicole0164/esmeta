"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } while ( 0 ) ; throw new Test262Error ( message ) ; } ; assert . sameValue = function * ( ) { ; ; } ; assert . notSameValue = { [ Symbol . toStringTag ] : 0 } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) x : ; ; try { func ( ) ; } catch ( thrown ) { var x ; return ; } async x => 0 ; throw new Test262Error ( message ) ; } ; 0 , 0 ; function Test262Error ( message ) { this . message = message ; } try { } finally { ; } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { join : false } ; } class Base { constructor ( o ) { return o ; } } class C extends Base { get #p ( ) { } set #p ( x ) { } } var obj = { } ; new C ( obj ) ; assert . throws ( TypeError , function ( ) { new C ( obj ) ; } ) ; 
