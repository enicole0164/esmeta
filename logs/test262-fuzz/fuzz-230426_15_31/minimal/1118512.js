"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } await : ; throw new Test262Error ( message ) ; } assert . _isSameValue = x => 0 ; assert . sameValue = class { } ; x => { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { var x , x ; return ; } var x ; throw new Test262Error ( message ) ; } ; assert . _toString = { [ Symbol . match ] : 0 } ; function Test262Error ( message ) { this . message = message || "" ; } try { } finally { } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { 1 : ( ) => { throw 0 ; } } ; } var iter = { } ; var poisonedValue = Object . defineProperty ( { } , 'value' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; iter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedValue ; } } ; } ; assert . throws ( Test262Error , function ( ) { [ ... iter ] ; } ) ; 
