"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw Test262Error ; } var x ; assert = async x => 0 ; assert . notSameValue = [ 0 , , ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else throw 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; } ; assert . _toString = class { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; await : ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var trappedKey = { get a ( ) { x : ; } , get b ( ) { throw new Test262Error ( 'Should not try to get the second element' ) ; } } ; assert . throws ( RangeError , function ( ) { Object . values ( trappedKey ) ; } ) ; 
