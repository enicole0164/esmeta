"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } try { } finally { } throw new Test262Error ( message ) ; } assert . _isSameValue = 0 ?? 0 ; assert . sameValue = 0 ? ( ) => 0 : 0 ; 0 | 0 || 0 | 0 ; assert . throws = async function * ( ) { } ; ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { getPrototypeOf : false } ; try { ; } finally { } class x { } class C { #m = 'test262' ; static access ( obj ) { return obj ?. #m ; } } let c = new C ( ) ; assert . sameValue ( C . access ( c ) , 'test262' ) ; assert . sameValue ( C . access ( null ) , undefined ) ; await : ; 0 ; 
