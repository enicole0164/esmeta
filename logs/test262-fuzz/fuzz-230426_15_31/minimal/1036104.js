"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw 0 ; throw new Test262Error ( message ) ; } x : ; assert . sameValue = [ 0 , , ] ; assert . notSameValue = { [ Symbol . unscopables ] : true } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + await ; throw new Test262Error ( message ) ; } ; ; function Test262Error ( message ) { this . message = message || "" ; } 0 || 0 | 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var array = [ ] ; var arrayPrototypeSet0Calls = 0 ; Object . defineProperty ( Array . prototype , "0" , { } ) ; assert . throws ( TypeError , function ( ) { array . unshift ( 1 ) ; } ) ; assert ( ! array . hasOwnProperty ( 0 ) ) ; assert . sameValue ( array . length , 0 ) ; assert . sameValue ( arrayPrototypeSet0Calls , 1 ) ; 
