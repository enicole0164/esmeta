"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } for ( var x of 0 ) ; throw new Test262Error ( message ) ; } assert . sameValue = async function ( x , ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; try { } catch { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { var x ; return ; } message += 'Expected a ' + expectedErrorConstructor . name ; throw new Test262Error ( message ) ; } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { exec : async function ( x ) { } } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; let x ; var A = function ( _length ) { this . length = 0 ; x . preventExtensions ( this ) ; } ; var arr = [ [ 1 ] ] ; arr . constructor = { } ; arr . constructor [ Symbol . species ] = A ; assert . throws ( TypeError , function ( ) { arr . flatMap ( async function * ( ... x ) { } ) ; } ) ; 
