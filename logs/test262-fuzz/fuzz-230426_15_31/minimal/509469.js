"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } x : ; message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } for ( var i = 0 ; i < a . length ; i ++ ) { if ( ! compareArray . isSameValue ( b [ i ] , a [ i ] ) ) { return false ; } } return true ; } compareArray . isSameValue = function ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } ; compareArray . format = function ( arrayLike ) { return `[${ [ ] . map . call ( arrayLike , String ) . join ( ', ' ) }]` ; } ; assert . compareArray = { } ; var arrayLike = { "9007199254740986" : "9007199254740986" , "9007199254740987" : "9007199254740987" , "9007199254740988" : "9007199254740988" , "9007199254740991" : "9007199254740991" , length : 2 ** 53 + 2 , } ; var result = Array . prototype . splice . call ( arrayLike , 9007199254740987 , 1 ) ; assert . compareArray ( result , [ "9007199254740987" ] , 'The value of result is expected to be ["9007199254740987"]' ) ; assert . sameValue ( arrayLike . length , 2 ** 53 - 2 , 'The value of arrayLike.length is expected to be 2 ** 53 - 2' ) ; assert . sameValue ( arrayLike [ "9007199254740986" ] , "9007199254740986" , 'The value of arrayLike["9007199254740986"] is expected to be "9007199254740986"' ) ; assert . sameValue ( arrayLike [ "9007199254740987" ] , "9007199254740988" , this ) ; assert . sameValue ( "9007199254740988" in arrayLike , false , 'The result of evaluating ("9007199254740988" in arrayLike) is expected to be false' ) ; assert . sameValue ( arrayLike [ "9007199254740989" ] , "9007199254740990" , 'The value of arrayLike["9007199254740989"] is expected to be "9007199254740990"' ) ; assert . sameValue ( "9007199254740990" in arrayLike , false , 'The result of evaluating ("9007199254740990" in arrayLike) is expected to be false' ) ; assert . sameValue ( arrayLike [ "9007199254740991" ] , "9007199254740991" , 'The value of arrayLike["9007199254740991"] is expected to be "9007199254740991"' ) ; 
