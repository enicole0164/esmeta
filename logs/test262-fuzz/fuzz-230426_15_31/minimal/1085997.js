"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { resolve : function ( x ) { } } ; async x => 0 ; assert . notSameValue = { groups : function * ( x ) { } } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( message === undefined ) { '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { { } return ; } return 0 ; throw Test262Error ; } ; assert . _toString = function ( ) { } ; function Test262Error ( message ) { message || "" ; } function * x ( [ ] ) { } var itemsPoisonedSymbolIterator = { } ; itemsPoisonedSymbolIterator [ Symbol . iterator ] = function ( ) { throw new Test262Error ( ) ; } ; assert . throws ( Test262Error , function ( ) { Array . from ( itemsPoisonedSymbolIterator ) ; } , 'Array.from(itemsPoisonedSymbolIterator) throws a Test262Error exception' ) ; 
