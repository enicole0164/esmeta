"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = async function ( ) { } ; assert . notSameValue = [ 0 ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; x : ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { var x ; } var accessed = false ; var testResult = false ; var initialValue = 0 ; function callbackfn ( prevVal , curVal , idx , obj ) { if ( idx >= 1 ) { accessed = true ; testResult = ( curVal >= 1 ) ; } } var arr = [ 0 , , 2 ] ; Object . defineProperty ( arr , "1" , { get : function ( ) { throw new RangeError ( "unhandle exception happened in getter" ) ; } , configurable : true } ) ; assert . throws ( RangeError , function ( ) { arr . reduce ( callbackfn , initialValue ) ; } ) ; assert . sameValue ( accessed , false , 'accessed' ) ; assert . sameValue ( testResult , false , 'testResult' ) ; 
