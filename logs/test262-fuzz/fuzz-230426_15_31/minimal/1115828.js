"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; x => 0 ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } x => 0 ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var o = { length : 1 } ; Object . defineProperty ( o , '0' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { Array . prototype . copyWithin . call ( o , 0 ) ; } ) ; 
