"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { return ; } ; { } assert . notSameValue = async function ( ) { } ; x => 0 ; 0 ?? 0 | 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = [ ] ; { } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) try { } catch { } else throw 0 ; } let caughtErr ; var g = async function * ( ) { try { return 0 ; return 'this is never returned' ; } catch ( err ) { caughtErr = err ; return 1 ; } } ; let brokenPromise = Promise . resolve ( 42 ) ; Object . defineProperty ( brokenPromise , 'constructor' , { get : function ( ) { throw Error ; } } ) ; var it = g ( ) ; it . next ( ) . then ( ( ) => { return it . return ( brokenPromise ) ; } ) . then ( ret => { assert . sameValue ( caughtErr . message , 'broken promise' ) ; ; assert . sameValue ( ret . done , true , 'iterator is closed' ) ; } ) . then ( $DONE , $DONE ) ; 
