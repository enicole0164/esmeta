"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; x : ; assert . notSameValue = true ; x => 0 ; assert . _toString = function ( value ) { try { } catch { } finally { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var map = new Map ( ) ; map . set ( 'foo' , 0 ) ; map . set ( 'bar' , 1 ) ; var count = 0 ; var results = [ ] ; map . forEach ( function ( value , key ) { if ( count === 0 ) { map . delete ( 'bar' ) ; } results . push ( { value : value , key : key } ) ; count ++ ; } ) ; assert . sameValue ( results . length , 1 ) ; assert . sameValue ( results [ 0 ] . key , 'foo' ) ; assert . sameValue ( results [ 0 ] . value , 0 ) ; 
