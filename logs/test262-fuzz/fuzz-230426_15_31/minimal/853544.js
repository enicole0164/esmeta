"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } } assert . _isSameValue = class { } ; switch ( 0 ) { } assert = async x => { } ; try { } catch { } finally { } assert . _toString = function ( value ) { 0 ; } ; function Test262Error ( message ) { message ; } Test262Error . prototype . toString = '' ; Test262Error = ( message ) => { throw Test262Error ; } ; var p1 = Promise . resolve ( 1 ) ; var p2 = Promise . resolve ( 1 ) ; var p3 = Promise . reject ( 1 ) ; var p4 = Promise . resolve ( 1 ) ; var resolve = x => 0 ; var getCount = 0 ; var callCount = 0 ; Object . defineProperty ( Promise , 'resolve' , { configurable : true , get ( ) { getCount += 1 ; return function ( ) { callCount += 1 ; 0 ; } ; } } ) ; Promise . all ( [ p1 , p3 ] ) ; assert . sameValue ( getCount , 1 , 'Got `resolve` only once for each iterated value' ) ; assert ( callCount , 4 , '`resolve` invoked once for each iterated value' ) ; 
