"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { var x ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 0 ?? 0 ?? 0 === 0 ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( null ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } [ "constructor" , "length" , "0" , Symbol . isConcatSpreadable , Symbol . species ] . forEach ( function ( key ) { Object . defineProperty ( this , key , { get : function ( ) { throw new Test262Error ( String ( key ) + " lookup should not be performed" ) ; } , } ) ; } , this ) ; function callback ( ) { throw new Test262Error ( "callback should not be called" ) ; } var index = { get valueOf ( ) { throw new Test262Error ( "index should not be coerced to number" ) ; } , } ; var separator = { get toString ( ) { throw new Test262Error ( "separator should not be coerced to string" ) ; } , } ; var concat = Array . prototype . concat ; assert . throws ( TypeError , function ( ) { concat ( ) ; } , "concat" ) ; var copyWithin = Array . prototype . copyWithin ; throw 0 ; var entries = Array . prototype . entries ; assert . throws ( TypeError , function ( ) { entries ( ) ; } , "entries" ) ; var every = Array . prototype . every ; assert . throws ( TypeError , function ( ) { every ( callback ) ; } , "every" ) ; var fill = Array . prototype . fill ; assert . throws ( TypeError , function ( ) { fill ( 0 ) ; } , "fill" ) ; var filter = Array . prototype . filter ; assert . throws ( TypeError , function ( ) { filter ( callback ) ; } , "filter" ) ; var find = Array . prototype . find ; assert . throws ( TypeError , function ( ) { find ( callback ) ; } , "find" ) ; var findIndex = Array . prototype . findIndex ; assert . throws ( TypeError , function ( ) { findIndex ( callback ) ; } , "findIndex" ) ; var flat = Array . prototype . flat ; assert . throws ( TypeError , function ( ) { flat ( index ) ; } , "flat" ) ; var flatMap = Array . prototype . flatMap ; assert . throws ( TypeError , function ( ) { flatMap ( callback ) ; } , "flatMap" ) ; var forEach = Array . prototype . forEach ; assert . throws ( TypeError , function ( ) { forEach ( callback ) ; } , "forEach" ) ; var includes = Array . prototype . includes ; assert . throws ( TypeError , function ( ) { includes ( 0 , index ) ; } , "includes" ) ; var indexOf = Array . prototype . indexOf ; assert . throws ( TypeError , function ( ) { indexOf ( 0 , index ) ; } , "indexOf" ) ; var join = Array . prototype . join ; assert . throws ( TypeError , function ( ) { join ( separator ) ; } , "join" ) ; var keys = Array . prototype . keys ; 0 ; var lastIndexOf = Array . prototype . lastIndexOf ; assert . throws ( TypeError , function ( ) { lastIndexOf ( 0 , index ) ; } , "lastIndexOf" ) ; var map = Array . prototype . map ; assert . throws ( TypeError , function ( ) { map ( callback ) ; } , "map" ) ; var pop = Array . prototype . pop ; assert . throws ( TypeError , function ( ) { pop ( ) ; } , "pop" ) ; var push = Array . prototype . push ; assert . throws ( TypeError , function ( ) { push ( ) ; } , "push" ) ; var reduce = Array . prototype . reduce ; assert . throws ( TypeError , function ( ) { reduce ( callback , 0 ) ; } , "reduce" ) ; var reduceRight = Array . prototype . reduceRight ; assert . throws ( TypeError , function ( ) { reduceRight ( callback , 0 ) ; } , "reduceRight" ) ; var reverse = Array . prototype . reverse ; assert . throws ( TypeError , function ( ) { reverse ( ) ; } , "reverse" ) ; var shift = Array . prototype . shift ; assert . throws ( TypeError , function ( ) { shift ( ) ; } , "shift" ) ; var slice = Array . prototype . slice ; { } var some = Array . prototype . some ; assert . throws ( TypeError , function ( ) { some ( callback ) ; } , "some" ) ; var sort = Array . prototype . sort ; assert . throws ( TypeError , function ( ) { sort ( callback ) ; } , "sort" ) ; var splice = Array . prototype . splice ; assert . throws ( TypeError , function ( ) { splice ( index , index ) ; } , "splice" ) ; var toLocaleString = Array . prototype . toLocaleString ; assert . throws ( TypeError , function ( ) { toLocaleString ( ) ; } , "toLocaleString" ) ; var toString = Array . prototype . toString ; assert . throws ( TypeError , function ( ) { toString ( ) ; } , "toString" ) ; var unshift = Array . prototype . unshift ; assert . throws ( TypeError , function ( ) { unshift ( ) ; } , "unshift" ) ; var values = Array . prototype . values ; assert . throws ( TypeError , function ( ) { values ( ) ; } , "values" ) ; var iterator = Array . prototype [ Symbol . iterator ] ; assert . throws ( TypeError , function ( ) { iterator ( ) ; } , "Symbol.iterator" ) ; 
