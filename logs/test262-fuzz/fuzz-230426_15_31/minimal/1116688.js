"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = this ; assert . sameValue = ( 0 ) ; assert . notSameValue = { 1 : true } ; async x => 0 ; assert . _toString = function ( ) { throw 0 ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; { } function $DONOTEVALUATE ( ) { 0 ; } var thrown = new Test262Error ( ) ; var badIter = { } ; var poisonedDone = Object . defineProperty ( { } , 'done' , { get : function ( ) { throw thrown ; } } ) ; badIter [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedDone ; } } ; } ; function * g ( ) { try { yield * badIter ; } catch ( err ) { caught = err ; } } var iter = g ( ) ; var result , caught ; result = iter . next ( ) ; assert . sameValue ( caught , thrown ) ; 
