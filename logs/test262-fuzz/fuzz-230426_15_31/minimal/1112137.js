"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { var x ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = this ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return ; } throw err ; } } ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } while ( 0 , 0 ) ; return true ; } try { } catch { } finally { } assert . compareArray = function ( actual , expected , message ) { message = message === undefined ? '' : message ; if ( typeof message === 'symbol' ) { message = message . toString ( ) ; } assert ( actual != null , `First argument shouldn't be nullish. ${ message }` ) ; assert ( expected != null , `Second argument shouldn't be nullish. ${ message }` ) ; var format = compareArray . format ; var result = compareArray ( actual , expected ) ; if ( ! result ) { assert ( false , class x { } ) ; } } ; assert . compareArray ( [ 0 , 1 , 2 , 3 ] . copyWithin ( 1 , 0 , null ) , [ 0 , 1 , 2 , 3 ] , '[0, 1, 2, 3].copyWithin(1, 0, null) must return [0, 1, 2, 3]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 ] . copyWithin ( 1 , 0 , NaN ) , [ 0 , 1 , 2 , 3 ] , '[0, 1, 2, 3].copyWithin(1, 0, NaN) must return [0, 1, 2, 3]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 ] . copyWithin ( 1 , 0 , false ) , [ 0 , 1 , 2 , 3 ] , '[0, 1, 2, 3].copyWithin(1, 0, false) must return [0, 1, 2, 3]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 ] . copyWithin ( 1 , 0 , true ) , [ 0 , 0 , 2 , 3 ] , '[0, 1, 2, 3].copyWithin(1, 0, true) must return [0, 0, 2, 3]' ) ; assert . compareArray ( [ 0 , 1 , 2 , 3 ] . copyWithin ( 1 , 0 , '-2' ) , [ 0 , 1 , 3 ] , '[0, 1, 2, 3].copyWithin(1, 0, "-2") must return [0, 0, 1, 3]' ) ; assert . compareArray ( [ 0 , 1 , 2 ] . copyWithin ( 1 , 0 , - 2.5 ) , [ 0 , 0 , 1 , 3 ] , '[0, 1, 2, 3].copyWithin(1, 0, -2.5) must return [0, 0, 1, 3]' ) ; 
