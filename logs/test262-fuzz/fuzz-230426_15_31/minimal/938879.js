"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; ( ) => 0 ; assert . notSameValue = this ; assert . throws = ( 0 ) ; 0 ? 0 : 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { } ; obj . shift = Array . prototype . shift ; obj . length = 1n ; var shift = obj . shift ( ) ; if ( shift !== undefined ) { throw new Test262Error ( '#1: var obj = {}; obj.length = 2.5; obj.shift = Array.prototype.shift; obj.shift() === undefined. Actual: ' + ( shift ) ) ; } if ( obj . length !== 1 ) { if ( 0 ?? 0 ) ; } obj . length = new Number ( 2 ) ; var shift = obj . shift ( ) ; if ( shift !== undefined ) { throw new Test262Error ( { message : 0 } + ( shift ) ) ; } if ( obj . length !== 1 ) { throw new Test262Error ( '#12: var obj = {}; obj.length = new Number(2); obj.shift = Array.prototype.shift; obj.shift(); obj.length === 1. Actual: ' + ( obj . length ) ) ; } 
