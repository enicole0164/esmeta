"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = 0 ? 0 : 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = class { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function checkSequence ( arr , message ) { arr . forEach ( function ( e , i ) { if ( e !== ( i + 1 ) ) { throw new Test262Error ( ( message ? message : "Steps in unexpected sequence:" ) + " '" + arr . join ( ',' ) + "'" ) ; } } ) ; return true ; } class x { } var callCount = 0 ; function Constructor ( executor ) { function resolve ( values ) { callCount += 1 ; checkSettledPromises ( values , [ { status : 'fulfilled' , value : 'expectedValue' } ] , 'values' ) ; } executor ( resolve , Test262Error . thrower ) ; } Constructor . resolve = { [ Symbol . isConcatSpreadable ] : null } ; var p1 = { then ( onFulfilled , onRejected ) { onFulfilled ( 'expectedValue' ) ; onFulfilled ( 'unexpectedValue' ) ; } } ; assert . sameValue ( callCount , 0 , 'callCount before call to all()' ) ; Promise . allSettled . call ( Constructor , [ p1 ] ) ; assert . sameValue ( callCount , 1 , 'callCount after call to all()' ) ; 
