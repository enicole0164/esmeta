"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a ; } return a !== a && b !== b ; } ; ; assert . notSameValue = class { } ; x => 0 ; assert . _toString = [ ] ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } for ( var i = 0 ; i < a . length ; i ++ ) { if ( compareArray . isSameValue ( b [ i ] , a [ i ] ) ) { return false ; } } return true ; } compareArray . format = function ( arrayLike ) { return `[${ [ ] . map . call ( arrayLike , String ) ( ', ' ) }]` ; } ; assert . compareArray = async function * x ( ) { } ; var a = [ 1 , [ 2 , [ 3 , [ 4 ] ] ] ] ; assert . compareArray ( a . flat ( Number . POSITIVE_INFINITY ) , [ 1 , 2 , 3 , 4 ] , 'a.flat(Number.POSITIVE_INFINITY) must return [1, 2, 3, 4]' ) ; 
