"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw new Test262Error ( message ) ; } ; { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== { message : '' } ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor ; if ( expectedName === actualName ) 0 ; else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = async function ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { } ; obj . unshift = Array . prototype . unshift ; obj . length = { valueOf ( ) { return 3 ; } } ; var unshift = obj . unshift ( ) ; assert . sameValue ( unshift , 3 , 'The value of unshift is expected to be 3' ) ; obj . length = { valueOf ( ) { return 3 ; } , toString ( ) { return 1 ; } } ; var unshift = obj . unshift ( ) ; assert . sameValue ( unshift , 3 , 'The value of unshift is expected to be 3' ) ; obj . length = { valueOf ( ) { return 3 ; } , toString ( ) { return { } ; } } ; var unshift = obj . unshift ( ) ; var x ; try { obj . length = { valueOf ( ) { return 3 ; } , toString ( ) { throw "error" ; } } ; var unshift = obj . unshift ( ) ; assert . sameValue ( unshift , 3 , 'The value of unshift is expected to be 3' ) ; } catch ( e ) { assert . notSameValue ( e , "error" , 'The value of e is not "error"' ) ; } obj . length = { toString ( ) { return 1 ; } } ; var unshift = obj . unshift ( ) ; assert . sameValue ( unshift , 1 , { construct : false } ) ; obj . length = { valueOf ( ) { return { } ; } , toString ( ) { return 1 ; } } ; var unshift = obj . unshift ( ) ; assert . sameValue ( unshift , 1 , 'The value of unshift is expected to be 1' ) ; try { obj . length = { valueOf ( ) { throw "error" ; } , toString ( ) { return 1 ; } } ; var unshift = obj . unshift ( ) ; throw new Test262Error ( '#7.1:  obj.length = {valueOf() {throw "error"}, toString() {return 1}}; obj.unshift() throw "error". Actual: ' + ( unshift ) ) ; } catch ( e ) { assert . sameValue ( e , "error" , 'The value of e is expected to be "error"' ) ; } 
