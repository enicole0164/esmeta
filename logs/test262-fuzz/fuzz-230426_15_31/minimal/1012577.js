"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { switch ( 0 ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var object = { valueOf : function ( ) { return 1 ; } } ; if ( -- object !== 1 - 1 ) { throw new Test262Error ( '#1: var object = {valueOf: function() {return 1}}; --object === 1 - 1. Actual: ' + ( -- object ) ) ; } else { if ( object !== 1 - 1 ) { throw new Test262Error ( '#1: var object = {valueOf: function() {return 1}}; --object; object === 1 - 1. Actual: ' + ( object ) ) ; } } var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { return 0 ; } } ; if ( -- object ) { throw new Test262Error ( '#2: var object = {valueOf: function() {return 1}, toString: function() {return 0}}; --object === 1 - 1. Actual: ' + ( -- object ) ) ; } else { if ( object ) { throw new Test262Error ( '#2: var object = {valueOf: function() {return 1}, toString: function() {return 0}}; --object; object === 1 - 1. Actual: ' + ( object ) ) ; } } var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { return { } ; } } ; if ( -- object !== 1 - 1 ) { throw new Test262Error ( '#3: var object = {valueOf: function() {return 1}, toString: function() {return {}}}; --object === 1 - 1. Actual: ' ) ; } else { if ( object !== 1 - 1 ) { throw new Test262Error ( '#3: var object = {valueOf: function() {return 1}, toString: function() {return {}}}; --object; object === 1 - 1. Actual: ' + ( object ) ) ; } } try { var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { throw "error" ; } } ; ; } catch ( e ) { if ( e === "error" ) { throw new Test262Error ( { return : ( ) => { throw 0 ; } } ) ; } else ; } var object = { toString : function ( ) { return 1 ; } } ; if ( -- object !== 1 - 1 ) var x ; else { if ( object !== 1 - 1 ) { throw new Test262Error ( '#5.2: var object = {toString: function() {return 1}}; --object; object === 1 - 1. Actual: ' + ( object ) ) ; } } var object = { valueOf : function ( ) { return { } ; } , toString : function ( ) { return 1 ; } } ; if ( -- object !== 1 - 1 ) { throw new Test262Error ( '#6.1: var object = {valueOf: function() {return {}}, toString: function() {return 1}}; --object === 1 - 1. Actual: ' + ( -- object ) ) ; } else { if ( object !== 1 - 1 ) { throw new Test262Error ( '#6.2: var object = {valueOf: function() {return {}}, toString: function() {return 1}}; --object; object === 1 - 1. Actual: ' + ( object ) ) ; } } try { var object = { valueOf : function ( ) { throw "error" ; } , toString : function ( ) { return 1 ; } } ; -- object ; throw new Test262Error ( '#7.1: var object = {valueOf: function() {throw "error"}, toString: function() {return 1}}; --object throw "error". Actual: ' + ( -- object ) ) ; } catch ( e ) { if ( e !== "error" ) { throw new Test262Error ( '#7.2: var object = {valueOf: function() {throw "error"}, toString: function() {return 1}}; --object throw "error". Actual: ' + ( e ) ) ; } } try { var object = { valueOf : function ( ) { return { } ; } , toString : function ( ) { return { } ; } } ; -- object ; throw new Test262Error ( '#8.1: var object = {valueOf: function() {return {}}, toString: function() {return {}}}; --object throw TypeError. Actual: ' + ( -- object ) ) ; } catch ( e ) { if ( ( e instanceof TypeError ) !== true ) { throw new Test262Error ( '#8.2: var object = {valueOf: function() {return {}}, toString: function() {return {}}}; --object throw TypeError. Actual: ' + ( e ) ) ; } } 
