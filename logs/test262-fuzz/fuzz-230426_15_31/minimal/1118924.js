"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; 0 ? 0 : 0 ; 0 ^ 0 ?? 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { return ; return ; } 0 ? 0 : 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = { [ Symbol . match ] : 0 } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function StopUnshift ( ) { } var arrayLike = { get "9007199254740986" ( ) { throw new StopUnshift ( ) ; } , "9007199254740987" : "9007199254740987" , "9007199254740989" : "9007199254740989" , "9007199254740991" : "9007199254740991" , length : 2 ** 53 - 2 } ; assert . throws ( StopUnshift , function ( ) { Array . prototype . unshift . call ( arrayLike , null ) ; } ) ; assert . sameValue ( arrayLike . length , 2 ** 53 - 2 , "arrayLike.length is unchanged" ) ; assert . sameValue ( arrayLike [ "9007199254740987" ] , "9007199254740987" , "arrayLike['9007199254740987'] is unchanged" ) ; { ; } assert . sameValue ( "9007199254740989" in arrayLike , false , "arrayLike['9007199254740989'] is removed" ) ; x : var x ; ; 
