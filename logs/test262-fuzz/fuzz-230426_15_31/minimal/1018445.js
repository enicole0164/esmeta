"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw 0 ; throw new Test262Error ( message ) ; } if ( 0 ) ; else ; while ( 0 ) ; try { } catch ( x ) { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw async x => 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { throw 0 ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; try { } finally { } function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var initEvalCount = 0 ; var poisonedProperty = Object . defineProperty ( { } , 'poisoned' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { let { poisoned : x = ++ initEvalCount } = poisonedProperty ; } ) ; assert . sameValue ( initEvalCount , 0 ) ; 
