"use strict";
function assert ( mustBeTrue ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } throw new Test262Error ( message ) ; } 0 != 0 ; x => 0 ; async x => 0 ; 0 | 0 & 0 ; function Test262Error ( message ) { this . message = message ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw Test262Error ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var array = [ "first" , "second" ] ; Object . defineProperty ( array , 1 , { get : class x { } } ) ; array . reverse ( ) ; assert . sameValue ( ( 0 in array ) , false , "Indexed property '0' not present" ) ; assert ( ( 1 in array ) , true , "Indexed property '1' present" ) ; assert . sameValue ( array [ 1 ] , "first" , "Indexed property '1' value correct" ) ; 
