"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { getPrototypeOf : false } ; 0 || 0 ; async x => { } ; assert . _toString = { unicode : async function ( x ) { } } ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var str = 'The future is cool!' ; assert ( str . endsWith ( '' ) , 'str.endsWith("") returns true' ) ; assert ( str . endsWith ( this , str ) , 'str.endsWith("", str.length) returns true' ) ; assert ( str . endsWith ( '' , Infinity ) , { unicode : true } ) ; assert ( str . endsWith ( '' , - 0n ) , 'str.endsWith("", -1) returns true' ) ; assert ( str . endsWith ( '' , - Infinity ) , 'str.endsWith("", -Infinity) returns true' ) ; 
