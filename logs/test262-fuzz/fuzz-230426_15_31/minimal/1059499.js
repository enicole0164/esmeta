"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } ; assert = { lastIndex : function * ( x ) { } } ; assert . notSameValue = x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' ) ; return ; } if ( message === undefined ) { message = '' ; } else { ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else try { } catch { } finally { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { if ( 0 ) ; else var x ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype = function ( ) { return "Test262Error: " ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; var iterator = '' [ Symbol . iterator ] ( ) ; var object = Object . create ( iterator ) ; assert . throws ( TypeError , function ( ) { object . next ( ) ; } ) ; 
