"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = x => { } ; assert . sameValue = this ; x => { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = ( 0 ) ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( Number . NEGATIVE_INFINITY * Number . NEGATIVE_INFINITY !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#1: -Infinity * -Infinity === Infinity. Actual: ' + ( - Infinity * - Infinity ) ) ; } if ( Number . POSITIVE_INFINITY * Number . POSITIVE_INFINITY !== Number . POSITIVE_INFINITY ) { throw new Test262Error ( '#2: Infinity * Infinity === Infinity. Actual: ' + ( Infinity * Infinity ) ) ; } if ( Number . NEGATIVE_INFINITY * Number . POSITIVE_INFINITY !== Number . NEGATIVE_INFINITY ) { throw new Test262Error ( '#3: -Infinity * Infinity === -Infinity. Actual: ' + ( - Infinity * Infinity ) ) ; } switch ( 0 ) { } 
