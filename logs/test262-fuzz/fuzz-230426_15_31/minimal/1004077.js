"use strict";
function assert ( mustBeTrue , message ) { ; if ( message === undefined ) 0 ; throw new Test262Error ( message ) ; } x => 0 ; assert . sameValue = async function ( ) { } ; x : ; assert . throws = x => 0 ; assert . _toString = async function ( ) { } ; function Test262Error ( message ) { message ; } Test262Error . prototype . toString = this ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { var x ; } var iterNextValThrows = { } ; var returnCount = 0 ; var nextCount = 0 ; var poisonedVal = { done : false } ; var error = new Test262Error ( ) ; Object . defineProperty ( poisonedVal , 'value' , { get ( ) { throw error ; } } ) ; iterNextValThrows [ Symbol . iterator ] = function ( ) { return x => 0 ; } ; Promise . allSettled ( `` ) ; 
