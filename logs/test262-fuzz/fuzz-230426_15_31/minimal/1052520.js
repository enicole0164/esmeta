"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a ; } ; async x => 0 ; assert . notSameValue = [ 0 ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedErrorConstructor . name ; actualName = thrown . constructor . name ; throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; x : ; function Test262Error ( message ) { this . message = message || "" ; } { } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { throw : false } ; } var poisonedValue = Object . defineProperty ( { } , 'value' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; var g = { } ; g [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedValue ; } } ; } ; assert . throws ( Test262Error , function ( ) { let [ x ] = g ; } ) ; 
