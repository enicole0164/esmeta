"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw Test262Error ; } assert . _isSameValue = async function ( ) { } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } try { } finally { ; } throw new Test262Error ( message ) ; } ; try { } catch ( x ) { } finally { } 0 ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class C { #f = 'Test262' ; method ( o ) { return o ?. x . x . #f ; } } let c = new C ( ) ; let o = { c : c } ; assert . sameValue ( c . method ( o ) , 'Test262' ) ; assert . sameValue ( c . method ( null ) , undefined ) ; assert . sameValue ( c . method ( undefined ) , undefined ) ; o = { c : new Object ( ) } ; assert . throws ( TypeError , function ( ) { c . method ( o ) ; } , 'accessed private field from an ordinary object' ) ; 
