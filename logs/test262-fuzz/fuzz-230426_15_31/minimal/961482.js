"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } debugger ; throw new Test262Error ( message ) ; } var x ; 0 | 0 ; assert . notSameValue = this ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { debugger ; return ; } try { } finally { } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) if ( 0 ) ; else try { } catch { } finally { } return ; } switch ( 0 ) { } throw new Test262Error ( message ) ; } ; x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x ; assert . throws ( TypeError , function ( ) { String . prototype [ Symbol . iterator ] . call ( null ) ; } ) ; 
