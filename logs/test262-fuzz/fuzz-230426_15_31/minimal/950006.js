"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' ; } throw new Test262Error ( message ) ; } async x => 0 ; assert . sameValue = this ; while ( 0 ) var x ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) throw 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) return ; return ; } 0 ; throw new Test262Error ( message ) ; } ; x => 0 ; function Test262Error ( message ) { this . message = message ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var arrObj = [ 0 , 1 , 2 ] ; assert . throws ( TypeError , function ( ) { ; Object . defineProperty ( arrObj , "length" , { value : 0 , writable : false } ) ; } ) ; assert . sameValue ( arrObj . length , 2 , 'arrObj.length' ) ; 
