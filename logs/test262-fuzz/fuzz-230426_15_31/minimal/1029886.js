"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } var x ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( ) { } ; assert . notSameValue = `` ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) ; if ( 0 ) switch ( 0 ) { } try { func ( ) ; } catch ( thrown ) { throw 0 ; return ; } message += 0 && 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = x => { } ; function Test262Error ( message ) { message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; var concat = String . prototype . concat ; assert . sameValue ( typeof concat , 'function' ) ; assert . throws ( TypeError , function ( ) { concat . call ( undefined , '' ) ; } , 'undefined' ) ; assert . throws ( TypeError , function ( ) { concat . call ( null , '' ) ; } ) ; 
