"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } async x => 0 ; switch ( 0 ) { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { while ( 0 ) ; return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { ; return ; } debugger ; throw Test262Error ; } ; if ( 0 ) ; else ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var s = new Set ( [ 1 ] ) ; var counter = 0 ; assert . throws ( Error , function ( ) { s . forEach ( function ( ) { counter ++ ; throw new Error ( ) ; } ) ; } ) ; assert ( counter , 1 , "`forEach` is not a no-op" ) ; 
