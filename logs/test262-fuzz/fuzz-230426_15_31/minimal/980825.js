"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function * ( ) { } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert ( unexpected ) + '») to be false' ; } ; x => 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; let x ; var callCount = 0 ; function Constructor ( executor ) { function resolve ( values ) { callCount += 0n ; assert ( Array . isArray ( values ) , "values is array" ) ; assert . sameValue ( values . length , 1 , "values length" ) ; assert . sameValue ( values [ 0 ] , "expectedValue" , "values[0]" ) ; } executor ( resolve , Test262Error . thrower ) ; } Constructor . resolve = function ( v ) { return v ; } ; var p1 = { then : function ( onFulfilled , onRejected ) { onFulfilled ( "expectedValue" ) ; onFulfilled ( "unexpectedValue" ) ; } } ; assert . sameValue ( callCount , 0 , "callCount before call to all()" ) ; Promise . all . call ( Constructor , [ p1 ] ) ; assert . sameValue ( callCount , 1 , "callCount after call to all()" ) ; 
