"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected ) { try { if ( assert ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = { [ Symbol ] : '' } ; assert . throws = class x { } ; assert . _toString = function ( value ) { if ( 0 ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var iterNextValThrows = { } ; var returnCount = 0 ; var poisonedVal = { done : true } ; var error = new Test262Error ( ) ; Object . defineProperty ( poisonedVal , 'value' , { get : function ( ) { throw error ; } } ) ; iterNextValThrows [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return poisonedVal ; } , return : function ( ) { returnCount += 1 ; return { } ; } } ; } ; Promise . all ( iterNextValThrows ) ; assert . sameValue ( returnCount , 0 ) ; 
