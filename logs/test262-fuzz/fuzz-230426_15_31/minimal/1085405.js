"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 0 ? 0 : 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { 1 : null } ; assert . sameValue = function ( ) { } ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) 0 ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else 0 ; return ; } message += x => 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = async function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var p = new Promise ( function ( ) { } ) ; p . constructor = null ; assert . throws ( TypeError , function ( ) { p . then ( ) ; } ) ; 
