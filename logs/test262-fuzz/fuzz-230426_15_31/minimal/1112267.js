"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) ; throw new Test262Error ( message ) ; } assert . _isSameValue = function * x ( ) { } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' ) ; return ; } if ( message ) { message = '' ; } else { message += ' ' ; } debugger ; throw new Test262Error ( message ) ; } ; assert . throws = class { } ; function Test262Error ( message ) { message || "" ; } if ( 0 , 0 ) ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; class x { } var s = new Set ( ) ; var expects = [ 1 , 2 , 3 ] ; s . add ( 1 ) . add ( 2 ) . add ( 3 ) ; s . forEach ( function ( value ) { assert . sameValue ( value , expects . shift ( ) ) ; } ) ; 0 ; 
