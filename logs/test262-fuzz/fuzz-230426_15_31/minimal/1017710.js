"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } { } throw new Test262Error ( message ) ; } async x => 0 ; assert . sameValue = class { } ; assert . notSameValue = { construct : async function ( x ) { } } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw 0 && 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { ; } catch { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { Array . prototype . find . call ( undefined , function ( ) { } ) ; } ) ; assert . throws ( TypeError , function ( ) { Array . prototype . find . call ( null , function ( ) { } ) ; } ) ; 
