"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; 0 ; x => 0 ; assert . throws = { deleteProperty : 0 } ; ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Object ( 2n ) << 1n , 4n , 'The result of (Object(2n) << 1n) is 4n' ) ; assert . sameValue ( 1n << Object ( 2n ) , 4n , 'The result of (1n << Object(2n)) is 4n' ) ; assert . sameValue ( { [ Symbol . toPrimitive ] : function ( ) { return 2n ; } } , 4n , 'The result of (({[Symbol.toPrimitive]: function() {return 2n;}}) << 1n) is 4n' ) ; assert . sameValue ( 1n << { [ Symbol . toPrimitive ] : function ( ) { return 2n ; } } , 4n , 'The result of (1n << {[Symbol.toPrimitive]: function() {return 2n;}}) is 4n' ) ; assert . sameValue ( { valueOf : function ( ) { return 2n ; } } , 4n , 'The result of (({valueOf: function() {return 2n;}}) << 1n) is 4n' ) ; async x => 0 ; assert . sameValue ( { toString : function ( ) { return 2n ; } } << 1n , 4n , 'The result of (({toString: function() {return 2n;}}) << 1n) is 4n' ) ; assert . sameValue ( 1n << { toString : function ( ) { return 2n ; } } , 4n , 'The result of (1n << {toString: function() {return 2n;}}) is 4n' ) ; 
