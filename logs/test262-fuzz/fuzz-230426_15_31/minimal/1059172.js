"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { [ Symbol . search ] : async function ( x ) { } } ; assert . sameValue = { get : 0 } ; assert . notSameValue = 0 || 0 && 0 ; assert . throws = class { } ; assert . _toString = function ( value ) { return 0 ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { } ; } var x = new Array ( 0 , 1 , 2 , 3 ) ; { } x = [ ] ; x [ 0 ] = 0 ; x [ 3 ] = 3 ; ; x = [ ] ; x [ 0 ] = 0 ; if ( x . join ( { [ Symbol . toPrimitive ] : null } ) !== "0" ) { debugger ; } 
