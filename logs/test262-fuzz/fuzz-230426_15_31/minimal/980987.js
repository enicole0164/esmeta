"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = [ 0 ] ; x => 0 ; x : ; assert . throws = async function ( ) { } ; assert . _toString = ( 0 ) ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; x : ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } class x { } var thrownError = new Error ( "Catch me." ) ; function * g ( ) { throw thrownError ; } async function * asyncg ( ) { yield * g ( ) ; } asyncg ( ) . next ( ) . then ( function ( result ) { throw new Test262Error ( "Promise should be rejected." ) ; } , function ( err ) { assert . sameValue ( err , thrownError , "Promise should be rejected with thrown error" ) ; } ) . then ( $DONE , $DONE ) ; 
