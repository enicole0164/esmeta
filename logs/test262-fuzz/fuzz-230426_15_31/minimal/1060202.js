"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 & 0 ; 0 ?? 0 ; assert . notSameValue = [ 0 , , ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { debugger ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { throw 0 ; return ; } { } throw new Test262Error ( message ) ; } ; x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { next : ( ) => { throw 0 ; } } ; switch ( 0 ) { } let x ; assert . throws ( TypeError , function ( ) { WeakMap . prototype . delete . call ( x => 0 , { } ) ; } ) ; x : ; 
