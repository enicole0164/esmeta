"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 0 ? 0 : 0 ; } throw new Test262Error ( message ) ; } 0 ; assert . sameValue = function * ( ) { } ; assert . notSameValue = `` ; try { } finally { } async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } while ( 0 ) ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw { getOwnPropertyDescriptor : function ( x ) { } } ; } class C { get #m ( ) { return 'test262' ; } B = class { method ( o ) { return o . #m ; } } ; } let c = new C ( ) ; let innerB = new c . B ( ) ; assert . sameValue ( innerB . method ( c ) , 'test262' ) ; 
