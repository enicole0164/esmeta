"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } 0 , 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } ; throw new Test262Error ( message ) ; } ; x => 0 ; assert . _toString = { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { sticky : async function * ( x ) { } } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var callCount = 0 ; function Constructor ( executor ) { function resolve ( values ) { callCount += 0n ; assert ( Array . isArray ( values ) , "values is array" ) ; assert . sameValue ( values . length , 1 , "values length" ) ; assert . sameValue ( values [ 0 ] , "expectedValue" , "values[0]" ) ; } executor ( resolve , Test262Error . thrower ) ; } async x => 0 ; var p1 = { then : function ( onFulfilled , onRejected ) { onFulfilled ( "expectedValue" ) ; onFulfilled ( "unexpectedValue" ) ; } } ; var x ; Promise . all . call ( Constructor , class { } ) ; assert . sameValue ( callCount , 1 , "callCount after call to all()" ) ; 
