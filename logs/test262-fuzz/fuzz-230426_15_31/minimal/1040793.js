"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + { [ Symbol . match ] : 0 } + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = `` ; switch ( 0 ) { } var x ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( isNaN ( "0" ) , false , "'0'" ) ; assert . sameValue ( isNaN ( "" ) , false , "the empty string" ) ; assert . sameValue ( isNaN ( "Infinity" ) , false , "'Infinity'" ) ; 0 ; assert . sameValue ( isNaN ( true ) , false , "true" ) ; assert . sameValue ( isNaN ( false ) , false , "false" ) ; assert . sameValue ( isNaN ( [ Infinity ] ) , false , "Object [Infinity]" ) ; assert . sameValue ( isNaN ( [ NaN ] ) , true , "Object [NaN]" ) ; assert . sameValue ( isNaN ( null ) , false , "null" ) ; assert . sameValue ( isNaN ( undefined ) , true , "undefined" ) ; assert . sameValue ( isNaN ( ) , true , "no arg" ) ; 
