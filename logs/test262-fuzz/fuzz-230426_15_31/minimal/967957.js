"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; try { } catch { } assert . notSameValue = this ; assert . throws = `${ 0 }` ; assert . _toString = function ( value ) { if ( 0 ) ; else x : ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { return 0 ; } var token = { } ; var asyncIter = { [ Symbol . asyncIterator ] ( ) { return this ; } , next ( ) { return { done : false , value : undefined , } ; } , return ( ) { return { done : false , get value ( ) { x : ; } } ; } } ; async function * f ( ) { var thrown ; try { yield * asyncIter ; } catch ( e ) { thrown = e ; } return thrown ; } var iter = f ( ) ; iter . next ( ) . then ( ( ) => { iter . return ( ) . then ( ( { value } ) => { assert . sameValue ( value , token ) ; } ) . then ( $DONE , $DONE ) ; } ) . catch ( $DONE ) ; 
