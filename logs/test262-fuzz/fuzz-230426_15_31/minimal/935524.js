"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } x => 0 ; assert . sameValue = x => 0 ; var x ; assert . throws = { add : async function ( x ) { } } ; assert . _toString = null ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( 1n > Infinity , false , 'The result of (1n > Infinity) is false' ) ; assert . sameValue ( Infinity > 1n , true , 'The result of (Infinity > 1n) is true' ) ; { } assert . sameValue ( Infinity > - 1n , true , 'The result of (Infinity > -1n) is true' ) ; assert . sameValue ( 1n > - Infinity , true , 'The result of (1n > -Infinity) is true' ) ; assert . sameValue ( - Infinity > 1 , false , 'The result of (-Infinity > 1n) is false' ) ; if ( 0 ) ; assert . sameValue ( - Infinity > - 1n , false , 'The result of (-Infinity > -1n) is false' ) ; assert . sameValue ( 0n > NaN , false , 'The result of (0n > NaN) is false' ) ; assert . sameValue ( NaN > 0n , false , 'The result of (NaN > 0n) is false' ) ; 
