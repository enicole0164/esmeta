"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } ; throw new Test262Error ( message ) ; } ; var x ; assert . throws = x => 0 ; assert . _toString = function ( value ) { var x ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } let error = new Error ( ) ; var callCount = 0 ; async function * gen ( ) { callCount += 1 ; yield Promise . reject ( error ) ; yield "unreachable" ; } var iter = gen ( ) ; iter . next ( ) . then ( ( ) => { throw new Test262Error ( "Promise incorrectly resolved." ) ; } ) . catch ( rejectValue => { assert . sameValue ( rejectValue , error ) ; iter . next ( ) . then ( ( { done , value } ) => { assert . sameValue ( done , true , "The value of IteratorResult.done is `true`" ) ; assert . sameValue ( value , undefined , "The value of IteratorResult.value is `undefined`" ) ; } ) . then ( $DONE , $DONE ) ; } ) ; assert . sameValue ( callCount , 1 ) ; 
