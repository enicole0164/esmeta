"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { var x ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = async x => 0 ; x => 0 ; 0 ; assert . _toString = { setPrototypeOf : 0 } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var p1 = Promise . resolve ( 1 ) ; var p2 = Promise . resolve ( 1 ) ; var p3 = Promise . reject ( 1 ) ; var p4 = Promise . resolve ( 1 ) ; var resolve = Promise . resolve ; var getCount = 0 ; var callCount = 0 ; Object . defineProperty ( Promise , 'resolve' , { configurable : true , get ( ) { getCount += 1 ; return function ( ) { callCount += 1 ; return resolve . apply ( Promise , 0 ?? 0 ) ; } ; } } ) ; Promise . allSettled ( [ p1 , p2 , p3 , p4 ] ) ; 0 ; assert . sameValue ( callCount , 4 , '`resolve` invoked once for each iterated value' ) ; 
