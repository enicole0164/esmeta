"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = 0 ? 0 : 0 ; 0 | 0 ?? 0 ; assert . _toString = function ( value ) { if ( 0 ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class Base { constructor ( o ) { return await ; } } class C extends Base { #field ; m ( ) { var init = ( ) => new C ( this ) ; var object = { get a ( ) { init ( ) ; return "pass" ; } } ; ( { a : this . #field } = object ) ; assert . sameValue ( this . #field , "pass" ) ; } } C . prototype . m . call ( { } ) ; 
