"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw Test262Error ; } assert . _isSameValue = function ( a ) { if ( a === b ) { return a !== 0 || 1 / a === 1 ; } return a !== a && b !== b ; } ; assert . sameValue = 0 ; x : ; assert . throws = function ( expectedErrorConstructor , func ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw Test262Error ; return ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { 'Thrown value was not an object!' ; throw Test262Error ; } else try { } finally { } return ; } message += 'Expected a ' + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { x : ; } ; function Test262Error ( message ) { this . message = message ; } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { ( 1 , Object . prototype . valueOf ) ( ) ; } , '(1, Object.prototype.valueOf)() throws a TypeError exception' ) ; 
