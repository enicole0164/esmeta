"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } x => 0 ; assert . sameValue = 0 && 0 ; var x ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; while ( 0 ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function x ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } for ( var i = 0 ; i < a . length ; i ++ ) { if ( ! compareArray . isSameValue ( b [ i ] , a [ i ] ) ) { return false ; } } return true ; } compareArray . isSameValue = function ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } ; compareArray . format = function ( arrayLike ) { return `[${ [ ] . map . call ( arrayLike , String ) . join ( ', ' ) }]` ; } ; assert . compareArray = async function * ( ) { } ; assert . compareArray ( [ 0 , 0 , 0 ] . fill ( 8 , 1 ) , [ 0 , 8 , 8 ] , '[0, 0, 0].fill(8, 1) must return [0, 8, 8]' ) ; assert . compareArray ( [ 0 , 0 , 0 ] . fill ( 8 , 4 ) , [ 0 , 0 , 0 ] , '[0, 0, 0].fill(8, 4) must return [0, 0, 0]' ) ; assert . compareArray ( [ 0 , 0 , 0 ] . fill ( 8 , - 1 ) , [ 0 , 0 , 8 ] , '[0, 0, 0].fill(8, -1) must return [0, 0, 8]' ) ; 
