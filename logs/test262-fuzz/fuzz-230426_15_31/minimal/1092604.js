"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = this ; switch ( 0 ) { } assert . notSameValue = async function * ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } { } try { func ( ) ; } catch ( thrown ) { var x ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = `${ 0 }` ; function Test262Error ( message ) { this . message = message || "" ; } try { ; } catch { } finally { } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var count = 0 ; var iterable = { } ; iterable [ Symbol . iterator ] = function ( ) { return { next : function ( ) { return { get value ( ) { throw new Test262Error ( ) ; } , done : false } ; } } ; } ; assert . throws ( Test262Error , function ( ) { new WeakSet ( iterable ) ; } ) ; 
