"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { } catch { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } throw x => 0 ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } var x ; message += 'Expected a ' + ' to be thrown but no exception was thrown at all' ; throw Test262Error ; } ; 0 ; function Test262Error ( message ) { this . message = message || "" ; } 0 || 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var simulation = { } ; var thenable = { then ( _ , reject ) { new Promise ( function ( resolve ) { resolve ( ) ; } ) . then ( function ( ) { reject ( simulation ) ; } ) ; } } ; Promise . allSettled ( [ thenable ] ) . then ( ( settleds ) => { assert . sameValue ( settleds . length , 1 ) ; assert . sameValue ( settleds [ 0 ] . status , 'rejected' ) ; assert . sameValue ( settleds [ 0 ] . reason , simulation ) ; } ) . then ( $DONE , $DONE ) ; 
