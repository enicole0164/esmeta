"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { done : true } ; assert . sameValue = { [ Symbol . iterator ] : async function ( x ) { } } ; assert . notSameValue = this ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { var x ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else ; return ; } 0 ? 0 : 0 ; throw new Test262Error ( message ) ; } ; assert . _toString = { [ Symbol . search ] : function * ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; 0 ; function $DONOTEVALUATE ( ) { throw { enumerable : true } ; } var toStringAccessed = false ; var valueOfAccessed = false ; var obj = { 1 : true , length : { toString : function ( ) { toStringAccessed = true ; return { } ; } , valueOf : function ( ) { valueOfAccessed = true ; return { } ; } } } ; assert . throws ( TypeError , function ( ) { Array . prototype . lastIndexOf . call ( obj , true ) ; } ) ; assert ( toStringAccessed , 'toStringAccessed' ) ; assert ( valueOfAccessed , 'valueOfAccessed' ) ; 
