"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } return ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a ; } ; assert . sameValue = x => 0 ; assert . notSameValue = function * ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; x : ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { x : ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var toPrecision = Number . prototype . toPrecision ; assert . throws ( TypeError , function ( ) { toPrecision . call ( { } , 1 ) ; } , "{}" ) ; assert . throws ( TypeError , "string" ) ; assert . throws ( TypeError , function ( ) { toPrecision . call ( Number , 1 ) ; } , "Number" ) ; assert . throws ( TypeError , function ( ) { toPrecision . call ( false , 1 ) ; } , "false" ) ; x => 0 ; assert . throws ( TypeError , { length : 0 } , "undefined" ) ; 0 ?? 0 ^ 0 != 0 ^ 0 ; assert . throws ( TypeError , "[]" ) ; 
