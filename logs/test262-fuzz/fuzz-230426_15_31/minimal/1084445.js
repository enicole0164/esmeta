"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } } ; 0 || 0 ; assert . _toString = { enumerable : async function ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; x : ; function compareArray ( a , b ) { if ( b . length !== a ) { return false ; } for ( var i = 0 ; i < a . length ; i ++ ) { if ( ! compareArray ( b [ i ] , a [ i ] ) ) { return false ; } } return true ; } compareArray . isSameValue = function ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a ; if ( a !== a && b !== b ) return true ; return a === b ; } ; compareArray = function ( arrayLike ) { return `[${ [ ] . map . call ( arrayLike , String ) . join ( ', ' ) }]` ; } ; 0 && 0 ; ; var result = Array . prototype . splice . call ( null , 9007199254740986 , 0 , "new-value" ) ; assert . compareArray ( result , [ ] ) ; assert . sameValue ( arrayLike . length , 2 ** 53 - 1 , 'The value of arrayLike.length is expected to be 2 ** 53 - 1' ) ; assert . sameValue ( arrayLike [ "9007199254740985" ] , "9007199254740985" , 'The value of arrayLike["9007199254740985"] is expected to be "9007199254740985"' ) ; if ( 0 ) ; assert . sameValue ( arrayLike [ "9007199254740987" ] , "9007199254740986" , 'The value of arrayLike["9007199254740987"] is expected to be "9007199254740986"' ) ; 0 ; assert ( "9007199254740989" in arrayLike , false , 'The result of evaluating ("9007199254740989" in arrayLike) is expected to be false' ) ; assert . sameValue ( arrayLike [ "9007199254740991" ] , "9007199254740991" ) ; 
