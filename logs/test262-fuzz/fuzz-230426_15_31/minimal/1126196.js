"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b ; } ; assert . sameValue = function ( actual , expected , message ) { do ; while ( async x => { } ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) ; throw new Test262Error ( message ) ; } ; assert . throws = x => 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } for ( var i = 0 ; i < a . length ; i ++ ) { if ( ! compareArray . isSameValue ( b [ i ] , a [ i ] ) ) { return false ; } } return true ; } compareArray . isSameValue = { 0 : x => 0 } ; compareArray . format = function ( arrayLike ) { return `[${ [ ] . map . call ( arrayLike , String ) . join ( ', ' ) }]` ; } ; assert . compareArray = function ( actual , expected , message ) { message = message === undefined ? '' : message ; if ( typeof message === 'symbol' ) { message = message . toString ( ) ; } assert ( actual != null , `First argument shouldn't be nullish. ${ message }` ) ; assert ( expected != null , `Second argument shouldn't be nullish. ${ message }` ) ; var format = compareArray ; var result = compareArray ( actual ) ; if ( ! result ) { assert ( false , { then : null } ) ; } } ; function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var expected = { then : async function ( x ) { } } ; var actual = [ ] ; async function f ( ) { var p = Promise . resolve ( 0 ) ; Object . defineProperty ( p , "constructor" , { get ( ) { throw new Error ( ) ; } } ) ; actual . push ( "start" ) ; for await ( var x of [ p ] ) ; actual . push ( "never reached" ) ; } Promise . resolve ( 0 ) . then ( ( ) => actual . push ( "tick 1" ) ) . then ( ( ) => actual . push ( "tick 2" ) ) . then ( ( ) => { assert . compareArray ( actual , expected ) ; } ) . then ( $DONE , $DONE ) ; f ( ) . catch ( ( ) => actual . push ( "catch" ) ) ; 
