"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 ; } return a !== a && b !== b ; } ; assert . sameValue = class { } ; var x ; assert . throws = function ( expectedErrorConstructor , func ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw Test262Error ; } ; function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { var x , x ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var rejection = { } ; var thenable = { then ( _ , reject ) { new Promise ( ( resolve ) => resolve ( ) ) . then ( ( ) => reject ( rejection ) ) ; } } ; Promise . any ( [ thenable ] ) . then ( ( ) => { $DONE ( 'The promise should be rejected.' ) ; } , ( aggregate ) => { assert ( aggregate instanceof AggregateError ) ; assert . sameValue ( aggregate . errors . length , 1 ) ; assert . sameValue ( aggregate . errors [ 0 ] , rejection ) ; } ) . then ( $DONE , $DONE ) ; 
