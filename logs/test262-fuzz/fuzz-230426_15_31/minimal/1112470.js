"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { message : async function ( x ) { } } ; 0 ; assert . notSameValue = [ 0 ] ; assert . throws = async function ( ) { } ; var x ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { var x ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var promise = new Promise ( function ( _ , reject ) { reject ( ) ; } ) ; var fulfilledCallCount = 0 ; var rejectedCallCount = 0 ; promise . then ( function ( ) { fulfilledCallCount += 1 ; } , function ( ) { rejectedCallCount += 1 ; throw new Error ( ) ; } ) ; promise . then ( function ( ) { $DONE ( 'This promise should not be fulfilled.' ) ; } , this ) ; 
