"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a || 1 / a === 1 ; } return a !== a && b !== b ; } ; assert . sameValue = { preventExtensions : async function * ( x ) { } } ; 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { return ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { return ; return ; } message += 'Expected a ' + expectedErrorConstructor + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } x : ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var descriptor = Object . getOwnPropertyDescriptor ( Map . prototype , 'size' ) ; var map = new Map ( ) ; descriptor . get . call ( map ) ; assert . throws ( TypeError , function ( ) { descriptor . get . call ( [ ] ) ; } ) ; 
