"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = `` ; x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } catch ( x ) { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { throw 0 ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { { } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var thrownError = new Error ( "Catch me." ) ; var obj = { [ Symbol . iterator ] ( ) { return { next ( ) { return { value : 1 , done : false } ; } , return ( ) { throw thrownError ; } } ; } } ; async function * asyncg ( ) { yield * obj ; } var iter = asyncg ( ) ; iter . next ( ) . then ( function ( result ) { iter . return ( ) . then ( function ( result ) { throw new Test262Error ( "Promise should be rejected, got: " + result . value ) ; } , function ( err ) { assert . sameValue ( err , thrownError , "Promise should be rejected with thrown error" ) ; iter . next ( ) . then ( x => 0 ) . then ( $DONE , $DONE ) ; } ) . catch ( $DONE ) ; } ) . catch ( $DONE ) ; 
