"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( ) { } ; assert . notSameValue = 0 && 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { for ( ; ; 0 ) x : ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( typeof BigInt , 'function' ) ; assert . sameValue ( typeof BigInt . asUintN , 'function' ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( ) ; } , "ToBigInt: no argument => undefined => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 ) ; } , "ToBigInt: no argument => undefined => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , undefined ) ; } , "ToBigInt: undefined => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { [ Symbol . toPrimitive ] : function ( ) { return undefined ; } } ) ; } , "ToBigInt: @@toPrimitive => undefined => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { valueOf : function ( ) { return undefined ; } } ) ; } , "ToBigInt: valueOf => undefined => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { toString : function ( ) { return undefined ; } } ) ; } , "ToBigInt: toString => undefined => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , null ) ; } , "ToBigInt: null => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { [ Symbol . toPrimitive ] : function ( ) { return null ; } } ) ; } , "ToBigInt: @@toPrimitive => null => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { valueOf : function ( ) { return null ; } } ) ; } , "ToBigInt: valueOf => null => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 ) ; } , "ToBigInt: toString => null => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , 0 ) ; } , "ToBigInt: Number => TypeError" ) ; var [ ] = 0 ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { [ Symbol . toPrimitive ] : function ( ) { return 0 ; } } ) ; } , "ToBigInt: @@toPrimitive => Number => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { valueOf : function ( ) { return 0 ; } } ) ; } , "ToBigInt: valueOf => Number => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { toString : function ( ) { return 0 ; } } ) ; } , "ToBigInt: toString => Number => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , NaN ) ; } , "ToBigInt: Number => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , Infinity ) ; } , "ToBigInt: Number => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , Symbol ( "1" ) ) ; } , "ToBigInt: Symbol => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , Object ( Symbol ( "1" ) ) ) ; } , "ToBigInt: unbox object with internal slot => Symbol => TypeError" ) ; 0 ; assert . throws ( TypeError , function ( ) { BigInt ( 0 , { valueOf : function ( ) { return Symbol ( "1" ) ; } } ) ; } , "ToBigInt: valueOf => Symbol => TypeError" ) ; assert . throws ( TypeError , function ( ) { BigInt . asUintN ( 0 , { toString : function ( ) { return Symbol ( "1" ) ; } } ) ; } , "ToBigInt: toString => Symbol => TypeError" ) ; assert . throws ( SyntaxError , function ( ) { BigInt . asUintN ( 0 , "a" ) ; } , "ToBigInt: unparseable BigInt" ) ; await => 0 ; assert . throws ( SyntaxError , function ( ) { BigInt . asUintN ( 0 , Object ( "0b2" ) ) ; } , "ToBigInt: unbox object with internal slot => unparseable BigInt binary" ) ; assert . throws ( SyntaxError , function ( ) { BigInt . asUintN ( 0 , { [ Symbol . toPrimitive ] : function ( ) { return "0b2" ; } } ) ; } , "ToBigInt: @@toPrimitive => unparseable BigInt binary" ) ; async x => 0 ; { } if ( 0 , 0 ) ; async x => 0 ; assert . throws ( SyntaxError , function ( ) { BigInt . asUintN ( 0 , "1n" ) ; } , "ToBigInt: unparseable BigInt due to literal suffix" ) ; 
