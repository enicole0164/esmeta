"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { cause : function ( x ) { } } ; assert . sameValue = [ , , ] ; try { } catch { } assert . throws = function ( [ x ] ) { } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x = [ 0 , 1 , 2 , 3 , 4 ] ; var arr = x . slice ( - 6 , - 6 ) ; arr . getClass = Object . prototype . toString ; if ( arr . getClass ( ) !== "[object " + "Array" + "]" ) { throw new Test262Error ( '#1: var x = [0,1,2,3,4]; var arr = x.slice(-6,-6); arr is Array object. Actual: ' + ( arr . getClass ( ) ) ) ; } if ( arr . length !== 0 ) { throw new Test262Error ( '#2: var x = [0,1,2,3,4]; var arr = x.slice(-6,-6); arr.length === 0. Actual: ' + ( arr . length ) ) ; } if ( arr [ 0 ] !== undefined ) { throw new Test262Error ( '#3: var x = [0,1,2,3,4]; var arr = x.slice(-6,-6); arr[0] === undefined. Actual: ' + ( arr [ 0 ] ) ) ; } 
