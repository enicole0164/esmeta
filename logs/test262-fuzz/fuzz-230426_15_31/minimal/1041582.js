"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; 0 ; ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } ; message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; x : ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x = [ 0 , 1 , 2 , 3 , 4 ] ; var arr = x . slice ( Number . NEGATIVE_INFINITY , 3 ) ; arr . getClass = Object . prototype . toString ; throw 0 ; if ( arr . length !== 3 ) { debugger ; } if ( arr [ 0 ] !== 0 ) { throw new Test262Error ( '#3: var x = [0,1,2,3,4]; var arr = x.slice(Number.NEGATIVE_INFINITY,3); arr[0] === 0. Actual: ' + ( arr [ 0 ] ) ) ; } if ( arr [ 1 ] !== 1 ) { throw new Test262Error ( '#4: var x = [0,1,2,3,4]; var arr = x.slice(Number.NEGATIVE_INFINITY,3); arr[1] === 1. Actual: ' + ( arr [ 1 ] ) ) ; } if ( arr [ 2 ] !== 2 ) { throw new Test262Error ( '#5: var x = [0,1,2,3,4]; var arr = x.slice(Number.NEGATIVE_INFINITY,3); arr[2] === 2. Actual: ' + ( arr [ 2 ] ) ) ; } if ( arr [ 3 ] !== undefined ) { try { } finally { } } 
