"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = await => 0 ; x : ; assert . notSameValue = async function * ( ) { } ; assert . throws = x => 0 ; assert . _toString = function ( value ) { if ( 0 ) ; else ; } ; function Test262Error ( message ) { this . message = message || "" ; } { } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw [ 0 , ] ; } var arr = [ 'Shoes' , 'Car' , 'Bike' ] ; var called = 0 ; var result = arr . findIndex ( function ( val ) { called ++ ; return true ; } ) ; assert . sameValue ( result , 0 ) ; assert . sameValue ( called , 1 , 'predicate was called once' ) ; called = 0 ; result = x => 0 ; assert . sameValue ( called , 3 , 'predicate was called three times' ) ; assert . sameValue ( result , 2 ) ; result = arr . findIndex ( function ( val ) { return 'string' ; } ) ; assert . sameValue ( result , 0 , 'coerced string' ) ; result = arr . findIndex ( function ( val ) { return { } ; } ) ; assert . sameValue ( result , 0 , 'coerced object' ) ; ; assert . sameValue ( result , 0 , 'coerced Symbol' ) ; 0 ?? 0 ; assert . sameValue ( result , 0 , 'coerced number' ) ; result = arr . findIndex ( function ( val ) { return - 1 ; } ) ; assert . sameValue ( result , 0 , 'coerced negative number' ) ; 
