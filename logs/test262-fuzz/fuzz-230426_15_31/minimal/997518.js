"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw Test262Error ; } assert . sameValue = [ ] ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { '' ; } else { message += ' ' ; } try { } catch ( x ) { ; } throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { try { } catch { } finally { } return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else var x ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 ? 0 : 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = function ( ) { return "Test262Error: " ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var objWithPoisonedLengthValueOf = { "length" : { valueOf : function ( ) { throw new Test262Error ( ) ; } , toString : null } , "1" : "A" , "3" : "B" , "5" : "C" } ; objWithPoisonedLengthValueOf [ Symbol . isConcatSpreadable ] = true ; assert . throws ( Test262Error , function ( ) { [ ] . concat ( objWithPoisonedLengthValueOf ) ; } , '[].concat(objWithPoisonedLengthValueOf) throws a Test262Error exception' ) ; 
