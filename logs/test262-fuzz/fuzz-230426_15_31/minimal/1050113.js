"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { debugger ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; { ; } assert . notSameValue = async function * ( ... x ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; x : ; try { } catch { } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; return ; } { } throw new Test262Error ( message ) ; } ; x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var initCount = 0 ; function thrower ( ) { throw new Test262Error ( ) ; } function f ( { a , b = 0 || 0 , c = ++ initCount } ) { } assert . throws ( Test262Error , function ( ) { f ( { } ) ; } ) ; assert . sameValue ( initCount , 0 ) ; 
