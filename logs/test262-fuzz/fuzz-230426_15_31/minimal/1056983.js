"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } { } throw new Test262Error ( message ) ; } assert . _isSameValue = async function ( ) { } ; assert . sameValue = class { } ; assert . notSameValue = `` ; 0 ?? 0 ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { resolve : true } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; let x ; let value ; function await ( ) { return value ; } class C { #field ; static isNameIn ( ) { return #field in await ( null ) ; } } value = new C ( ) ; assert . sameValue ( C . isNameIn ( ) , true ) ; value = { } ; assert . sameValue ( C . isNameIn ( ) , false ) ; 
