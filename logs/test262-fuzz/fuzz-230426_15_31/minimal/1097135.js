"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = { raw : 0 } + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } var x ; assert . sameValue = class { } ; 0 ? 0 : 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw async x => 0 ; return ; } if ( message ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' ) { { } throw new Test262Error ( message ) ; } else ; return ; } var x ; throw new Test262Error ( message ) ; } ; assert . _toString = x => 0 ; function Test262Error ( message ) { message || "" ; } ; ; function $DONOTEVALUATE ( ) { throw { value : null } ; } var following = 0 ; var iter = function * ( ) { throw new Test262Error ( ) ; following += 1 ; } ( ) ; assert . throws ( Test262Error , function ( ) { let [ , ] = iter ; } ) ; iter . next ( ) ; 
