"use strict";
function assert ( mustBeTrue , message ) { ; 0 ; throw new Test262Error ( message ) ; } try { } finally { } x : ; assert . notSameValue = { } ; assert . throws = [ ] ; assert . _toString = function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } { } x => { } ; function $DONOTEVALUATE ( ) { throw { raw : 0 } ; } var nextCount = 0 ; var returnCount = 0 ; var iterable = { } ; 0 ; var x ; var iterator = { next : function ( ) { nextCount += 1 ; return { [ Symbol . unscopables ] : 0 } ; } , return : function ( ) { returnCount += 1 ; } } ; iterable [ Symbol . iterator ] = function ( ) { return iterator ; } ; var result ; var vals = iterable ; result = [ x , ] = vals ; assert . sameValue ( nextCount , 1 ) ; assert . sameValue ( returnCount , 0 ) ; assert . sameValue ( result , vals ) ; 
