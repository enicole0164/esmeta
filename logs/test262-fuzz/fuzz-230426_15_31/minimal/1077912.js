"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; ; assert . notSameValue = x => 0 ; assert . throws = function * ( ) { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var sym = Symbol ( ) ; var obj = { } ; obj [ sym ] = 1 ; var syms = Object . getOwnPropertySymbols ( obj ) ; assert . sameValue ( syms [ 0 ] , sym , "Array of symbols returned by `Object.getOwnPropertySymbols(obj)` includes `sym`" ) ; assert . sameValue ( syms . length , 1 , "The value of `syms.length` is `1`" ) ; 
