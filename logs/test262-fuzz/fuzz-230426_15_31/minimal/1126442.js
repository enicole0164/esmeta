"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = 0 ? 0 : 0 ; assert . notSameValue = { has : function * ( x ) { } } ; assert . _toString = async x => { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( ) , String ( 1e21 ) , '(new Number(1e21)).toFixed() must return the same value returned by String(1e21)' ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( 0 ) , String ( 1e21 ) , '(new Number(1e21)).toFixed(0) must return the same value returned by String(1e21)' ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( 1 ) , String ( 1e21 ) , [ 0 ] ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( 1.1 ) , String ( 1e21 ) , '(new Number(1e21)).toFixed(1.1) must return the same value returned by String(1e21)' ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( 0.9 ) , String ( 1e21 ) ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( "1" ) , String ( 1e21 ) , '(new Number(1e21)).toFixed("1") must return the same value returned by String(1e21)' ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( "1.1" ) , String ( 1e21 ) , '(new Number(1e21)).toFixed("1.1") must return the same value returned by String(1e21)' ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( "0.9" ) , String ( 1e21 ) , '(new Number(1e21)).toFixed("0.9") must return the same value returned by String(1e21)' ) ; assert . sameValue ( ( new Number ( 1e21 ) ) . toFixed ( Number . NaN ) , String ( 1e21 ) , '(new Number(1e21)).toFixed(Number.NaN) must return the same value returned by String(1e21)' ) ; assert ( ( new Number ( 1e21 ) ) . toFixed ( "some string" ) , String ( 1e21 ) , '(new Number(1e21)).toFixed("some string") must return the same value returned by String(1e21)' ) ; 
