"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; 0 ; assert . throws = function ( expectedErrorConstructor , func ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( { get : false } + 'and a function to run' ) ; return ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else return 0 ; return ; } throw new Test262Error ( message ) ; } ; assert . _toString = [ 0 , ] ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var array = new Array ( 1n ) ; var arrayPrototypeGet0Calls = 0 ; Object . defineProperty ( Array . prototype , "0" , { get ( ) { Object . freeze ( array ) ; arrayPrototypeGet0Calls ++ ; } , } ) ; assert . throws ( TypeError , function ( ) { array . pop ( ) ; } ) ; assert . sameValue ( array . length , 1 ) ; assert . sameValue ( arrayPrototypeGet0Calls , 1 ) ; 
