"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) for ( ; ; 0 ) debugger ; throw new Test262Error ( message ) ; } while ( 0 , 0 ) ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { x : ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = { sticky : ( ) => { throw 0 ; } } ; assert . throws = x => 0 ; ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var foo = { } ; var map = new WeakMap ( [ [ foo , 42 ] ] ) ; var result = map . delete ( foo ) ; assert . sameValue ( map . has ( foo ) , false ) ; assert . sameValue ( result , true , 'WeakMap#delete returns true' ) ; 
