"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; var x ; assert . notSameValue = [ ] ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) x : ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; 0 ; throw new Test262Error ( message ) ; } return ; } for ( let x of 0 ) ; throw new Test262Error ( message ) ; } ; assert . _toString = { 0 : async function ( x ) { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var constructorSetsIndex0ConfigurableFalse = function ( ) { Object . defineProperty ( '' , '0' , { writable : true , configurable : false } ) ; } ; var closeCount = 0 ; var items = { } ; var nextResult = { done : false } ; items [ Symbol . iterator ] = function ( ) { return { return : function ( ) { closeCount += 1 ; } , next : function ( ) { var result = nextResult ; nextResult = { done : true } ; return result ; } } ; } ; assert . throws ( TypeError , function ( ) { Array . from . call ( constructorSetsIndex0ConfigurableFalse , items ) ; } , 'Array.from.call(constructorSetsIndex0ConfigurableFalse, items) throws a TypeError exception' ) ; assert . sameValue ( closeCount , 1 , 'The value of closeCount is expected to be 1' ) ; 
