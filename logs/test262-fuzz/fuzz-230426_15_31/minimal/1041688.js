"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } async x => 0 ; throw new Test262Error ( message ) ; } ; { } assert . throws = [ ] ; assert . _toString = { index : false } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } let callCount = 0 ; let errorArray ; function Constructor ( executor ) { executor ( Test262Error . thrower , ( error ) => { callCount ++ ; errorArray = error . errors ; } ) ; } Constructor . resolve = function ( v ) { return v ; } ; let p1OnRejected ; let p1 = { then ( onFulfilled , onRejected ) { p1OnRejected = onRejected ; onRejected ( "onRejectedValue" ) ; } } ; assert . sameValue ( callCount , 0 , "callCount before call to any()" ) ; Promise . any . call ( Constructor , [ p1 ] ) ; assert . sameValue ( callCount , 1 , "callCount after call to any()" ) ; ; p1OnRejected ( "unexpectedonRejectedValue" ) ; assert . sameValue ( errorArray [ 0 ] , "onRejectedValue" , "errorArray[0] === 'onRejectedValue', after call to p1OnRejected()" ) ; 
