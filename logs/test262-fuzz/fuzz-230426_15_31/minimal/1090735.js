"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = async x => { } ; assert . sameValue = { } ; try { } catch { } finally { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) if ( 0 ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { ; return ; } return ; throw new Test262Error ( message ) ; } ; assert . _toString = 0 || 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var o = { } ; var getter = function ( ) { return 1 ; } ; var d1 = { get : getter } ; Object . defineProperty ( o , "foo" , d1 ) ; var setter = function ( x ) { } ; var desc = { set : setter } ; assert . throws ( TypeError , function ( ) { Object . defineProperty ( o , "foo" , desc ) ; } ) ; var d2 = Object . getOwnPropertyDescriptor ( o ) ; assert . sameValue ( d2 . get , getter , 'd2.get' ) ; assert . sameValue ( d2 . configurable , false , 'd2.configurable' ) ; assert ( d2 . enumerable , false , 'd2.enumerable' ) ; 
