"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } throw 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = 0 ? 0 : 0 ; { } assert . notSameValue = async function ( ) { } ; x => 0 ; 0 ?? 0 | 0 ; function Test262Error ( message ) { this . message = message || "" ; } try { } catch { } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; let x ; function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) try { } catch { } else { 0 ; } } let caughtErr ; var g = async function * ( ) { try { yield 0 ; return 'this is never returned' ; } catch ( err ) { caughtErr = err ; return 1 ; } } ; let brokenPromise = Promise . resolve ( 42 ) ; Object . defineProperty ( brokenPromise , 'constructor' , { get : function ( ) { throw Error ; } } ) ; var it = g ( ) ; it . next ( ) . then ( ( ) => { return it . return ( brokenPromise ) ; } ) . then ( 0 ?? 0 ? 0 : 0 ) . then ( $DONE , $DONE ) ; 
