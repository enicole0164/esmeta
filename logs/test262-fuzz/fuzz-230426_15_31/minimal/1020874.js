"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } 0 ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( x ) { } ; async x => 0 ; function Test262Error ( message ) { this . message = message || "" ; } function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function FACTORY ( ) { } FACTORY . prototype = Function . prototype ; var obj = new FACTORY ; assert . sameValue ( typeof obj . apply , "function" , 'The value of `typeof obj.apply` is expected to be "function"' ) ; try { obj . apply ( ) ; x : ; } catch ( e ) { assert ( e instanceof TypeError , 'The result of evaluating (e instanceof TypeError) is expected to be true' ) ; } 
