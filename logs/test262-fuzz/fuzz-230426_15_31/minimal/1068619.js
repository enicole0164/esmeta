"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } switch ( 0 ? 0 : 0 ) { } throw new Test262Error ( message ) ; } ; ; assert . throws = `${ 0 }` ; try { } catch { } function Test262Error ( message ) { this . message = message || "" ; } x : ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function x ( ) { } assert . sameValue ( Number . isFinite ( "1" ) , false , "string" ) ; assert . sameValue ( Number . isFinite ( [ 1 ] ) , false , "[1]" ) ; 0 ; assert . sameValue ( Number . isFinite ( false ) , false , "false" ) ; assert . sameValue ( Number . isFinite ( true ) , false , "true" ) ; assert . sameValue ( Number . isFinite ( undefined ) , false , "undefined" ) ; assert . sameValue ( Number . isFinite ( null ) , false , "null" ) ; assert . sameValue ( Number . isFinite ( Symbol ( "1" ) ) , false , "symbol" ) ; assert . sameValue ( Number . isFinite ( ) , false , "no arg" ) ; 
