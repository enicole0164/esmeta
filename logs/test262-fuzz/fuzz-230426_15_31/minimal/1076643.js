"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a ; } return a !== a && b !== b ; } ; assert . sameValue = function x ( ) { } ; x : ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) switch ( 0 ) { } else if ( thrown . constructor !== expectedErrorConstructor ) throw 0 ; return ; } message += 'Expected a ' ; throw new Test262Error ( message ) ; } ; 0 || 0 ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var accessed = false ; function callbackfn ( val , idx , obj ) { if ( idx > 1 ) { accessed = true ; } } var arr = [ ] ; arr [ 5 ] = 10 ; arr [ 10 ] = 100 ; Object . defineProperty ( arr , "1" , { get : function ( ) { throw new RangeError ( "unhandle exception happened in getter" ) ; } , configurable : true } ) ; Object . defineProperty ( arr , "2" , this ) ; assert . throws ( RangeError , function ( ) { arr . forEach ( callbackfn ) ; } ) ; assert . sameValue ( accessed , false , 'accessed' ) ; 
