"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; throw 0 ; throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw Test262Error ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; let x ; var obj = { } ; obj . pop = Array . prototype . pop ; obj [ 0 ] = - 1 ; obj . length = { valueOf ( ) { return 1 ; } } ; var pop = obj . pop ( ) ; assert . sameValue ( pop , - 1 , 'The value of pop is expected to be -1' ) ; obj [ 0 ] = - 1 ; obj . length = { valueOf ( ) { return 1 ; } , toString ( ) { return 0 ; } } ; var pop = obj . pop ( ) ; assert . sameValue ( pop , - 1 , 'The value of pop is expected to be -1' ) ; obj [ 0 ] = - 1 ; obj . length = { valueOf ( ) { return 1 ; } , toString ( ) { return { } ; } } ; var pop = obj . pop ( ) ; assert . sameValue ( pop , - 1 , 'The value of pop is expected to be -1' ) ; try { obj [ 0 ] = - 1 ; obj . length = { valueOf ( ) { return 1 ; } , toString ( ) { throw "error" ; } } ; var pop = obj . pop ( ) ; assert . sameValue ( pop , - 1 , 'The value of pop is expected to be -1' ) ; } catch ( e ) { assert . notSameValue ( e , "error" , 'The value of e is not "error"' ) ; } obj [ 0 ] = - 1 ; obj . length = { toString ( ) { return 0 ; } } ; var pop = obj . pop ( ) ; assert . sameValue ( pop , undefined , 'The value of pop is expected to equal undefined' ) ; obj [ 0 ] = - 1 ; obj . length = { valueOf ( ) { return { } ; } , toString ( ) { return 0 ; } } ; var pop = obj . pop ( ) ; ; try { obj [ 0 ] = - 1 ; obj . length = { valueOf ( ) { return { } ; } , toString ( ) { return { } ; } } ; var pop = obj . pop ( ) ; throw new Test262Error ( '#8.1: obj[0] = -1; obj.length = {valueOf() {return {}}, toString() {return {}}}  obj.pop() throw TypeError. Actual: ' + ( pop ) ) ; } catch ( e ) { assert . sameValue ( e instanceof TypeError , true , 'The result of evaluating (e instanceof TypeError) is expected to be true' ) ; } 
