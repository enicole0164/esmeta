"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) return 0 ; throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { x : ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; x : var x ; assert . throws = function * x ( ) { } ; assert . _toString = this ; function Test262Error ( message ) { this . message = message || "" ; } 0 ? 0 : 0 ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( Number . isSafeInteger ( "1" ) , false , "string" ) ; assert . sameValue ( Number . isSafeInteger ( [ 1 ] ) , false , "[1]" ) ; assert . sameValue ( Number . isSafeInteger ( new Number ( 42 ) ) , false , "Number object" ) ; assert . sameValue ( Number . isSafeInteger ( false ) , false , "false" ) ; assert . sameValue ( Number . isSafeInteger ( true ) , false , "true" ) ; assert . sameValue ( Number . isSafeInteger ( undefined ) , false , "undefined" ) ; assert . sameValue ( Number . isSafeInteger ( 0 ? 0 : 0n ) , false , "null" ) ; assert . sameValue ( Number . isSafeInteger ( Symbol ( "1" ) ) , false , "symbol" ) ; assert . sameValue ( Number . isSafeInteger ( ) , false , "no arg" ) ; 
