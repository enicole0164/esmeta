"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue ) { return ; } if ( 0 ) ; else ; throw new Test262Error ( message ) ; } assert . _isSameValue = { exec : function ( x ) { } } ; assert . sameValue = `` ; { } assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; ; if ( message ) { message = '' ; } else { ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( 0 ) ; return ; } 0 ?? 0 ; { ; } } ; function Test262Error ( message ) { this . message = message || "" ; } do ; while ( 0 ) ; var x ; function await ( ) { } class C { #field ; m ( ) { for ( 0 . x in { a : super . x } ) ; } } assert . throws ( TypeError , function ( ) { C . prototype . m . call ( { } ) ; } ) ; 
