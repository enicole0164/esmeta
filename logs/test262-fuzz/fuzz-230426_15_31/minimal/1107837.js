"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; x => 0 ; assert . notSameValue = { source : false } ; assert . throws = this ; assert . _toString = function ( value ) { try { if ( value === 0 ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { has : ( ) => { throw 0 ; } } ; Test262Error = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } Object . seal ( new ( Object . getPrototypeOf ( function * ( ) { } ) . constructor ) ( ) ) ; 
