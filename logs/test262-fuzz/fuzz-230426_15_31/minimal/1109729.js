"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function * ( ... [ ] ) { } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) for ( let x in 0 ) ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) var x ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; x : ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } 0 ? 0 : 0 ; assert . throws ( TypeError , function ( ) { "" . indexOf ( Object ( Symbol ( "1" ) ) ) ; } , "ToString: unbox object with internal slot => Symbol => TypeError" ) ; assert . throws ( TypeError , function ( ) { "" . indexOf ( { [ Symbol . toPrimitive ] : function ( ) { return Symbol ( "1" ) ; } } ) ; } , "ToString: @@toPrimitive => Symbol => TypeError" ) ; assert . throws ( TypeError , function ( ) { "" . indexOf ( { valueOf : function ( ) { return Symbol ( "1" ) ; } , toString : null } ) ; } , "ToString: valueOf => Symbol => TypeError" ) ; assert . throws ( TypeError , function ( ) { "" . indexOf ( { toString : function ( ) { return Symbol ( "1" ) ; } } ) ; } , "ToString: toString => Symbol => TypeError" ) ; 
