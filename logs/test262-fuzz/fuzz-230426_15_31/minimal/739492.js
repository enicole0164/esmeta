"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } } ; assert . notSameValue = '' ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; var x ; if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = class { } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var array = [ ] ; var iterationCount = 0 ; Object . defineProperty ( array , '0' , { get : function ( ) { throw new Test262Error ( ) ; } } ) ; assert . throws ( Test262Error , function ( ) { for ( var value of array ) { 1 ; } } ) ; assert . sameValue ( iterationCount , 0 ) ; 
