"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { add : false } ; if ( 0 , 0 ) ; 0 ^ 0 ? 0 : 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( 1n > '0n' , false , 'The result of (1n > "0n") is false' ) ; assert . sameValue ( 1n > '0.' , false , 'The result of (1n > "0.") is false' ) ; assert . sameValue ( 1n > '.0' , false , 'The result of (1n > ".0") is false' ) ; assert . sameValue ( 1n > '0/1' , false , 'The result of (1n > "0/1") is false' ) ; assert . sameValue ( 1n > 'z0' , false , 'The result of (1n > "z0") is false' ) ; assert . sameValue ( 1n > '0z' , false , 'The result of (1n > "0z") is false' ) ; assert . sameValue ( 1n > '++0' , false , 'The result of (1n > "++0") is false' ) ; assert . sameValue ( 1n > '--0' , false , 'The result of (1n > "--0") is false' ) ; assert . sameValue ( 1n > '0e0' , false , 'The result of (1n > "0e0") is false' ) ; assert . sameValue ( 1n > 'Infinity' , false , 'The result of (1n > "Infinity") is false' ) ; assert . sameValue ( '1n' > 0n , false , 'The result of ("1n" > 0n) is false' ) ; assert . sameValue ( '1.' > 0n , false , 'The result of ("1." > 0n) is false' ) ; assert . sameValue ( '.1' > 0n , false , 'The result of (".1" > 0n) is false' ) ; assert . sameValue ( '1/1' > 0n , false , 'The result of ("1/1" > 0n) is false' ) ; assert . sameValue ( 'z1' > 0n , false , 'The result of ("z1" > 0n) is false' ) ; assert . sameValue ( '1z' > 0n , false , 'The result of ("1z" > 0n) is false' ) ; assert . sameValue ( '++1' > 0n , false , 'The result of ("++1" > 0n) is false' ) ; assert . sameValue ( '--1' > 0n , false , 'The result of ("--1" > 0n) is false' ) ; assert . sameValue ( '1e0' > 0n , false , 'The result of ("1e0" > 0n) is false' ) ; assert . sameValue ( 'Infinity' > 0n , false , 'The result of ("Infinity" > 0n) is false' ) ; 
