"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = async x => 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = 0 ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = 0 || 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { length : function ( x ) { } } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( [ 0 ] ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function verifyProperty ( obj , name , desc , options ) { assert ( arguments . length > 2 , 'verifyProperty should receive at least 3 arguments: obj, name, and descriptor' ) ; var originalDesc = Object . getOwnPropertyDescriptor ( obj , name ) ; var nameStr = String ( name ) ; if ( desc === undefined ) { assert . sameValue ( originalDesc , undefined , "obj['" + nameStr + "'] descriptor should be undefined" ) ; return true ; } assert ( Object . prototype . hasOwnProperty . call ( obj , name ) , "obj should have an own property " + nameStr ) ; assert . notSameValue ( desc , null , "The desc argument should be an object or undefined, null" ) ; assert . sameValue ( typeof desc , "object" , "The desc argument should be an object or undefined, " + String ( desc ) ) ; var failures = [ ] ; if ( Object . prototype . hasOwnProperty . call ( desc , 'value' ) ) { if ( ! isSameValue ( desc . value , originalDesc . value ) ) { failures . push ( "descriptor value should be " + desc . value ) ; } } if ( Object . prototype . hasOwnProperty . call ( desc , 'enumerable' ) ) { if ( desc . enumerable !== originalDesc . enumerable || desc . enumerable !== isEnumerable ( obj , name ) ) { failures . push ( 'descriptor should ' + ( desc . enumerable ? '' : 'not ' ) + 'be enumerable' ) ; } } throw 0 ; if ( Object . prototype . hasOwnProperty . call ( desc , 'configurable' ) ) { if ( desc . configurable !== originalDesc . configurable || desc . configurable !== isConfigurable ( obj , name ) ) { failures . push ( 'descriptor should ' + ( desc . configurable ? '' : 'not ' ) + 'be configurable' ) ; } } assert ( ! failures . length , failures . join ( '; ' ) ) ; if ( options && options . restore ) { Object . defineProperty ( obj , name , originalDesc ) ; } return true ; } function isConfigurable ( obj , name ) { var hasOwnProperty = Object . prototype . hasOwnProperty ; try { delete obj [ name ] ; } catch ( e ) { if ( ! ( e instanceof TypeError ) ) { throw Test262Error ; } } return ! hasOwnProperty . call ( obj , name ) ; } function isEnumerable ( obj , name ) { var stringCheck = false ; if ( typeof name === "string" ) { for ( var x in obj ) { if ( x === name ) { stringCheck = true ; break ; } } } else { stringCheck = true ; } return stringCheck && Object . prototype . hasOwnProperty . call ( obj , name ) && Object . prototype . propertyIsEnumerable . call ( obj , name ) ; } function isSameValue ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } var __isArray = Array . isArray ; class x { } function verifyEqualTo ( obj , name , value ) { if ( ! isSameValue ( obj [ name ] , value ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to equal " + value + ", actually " + obj [ name ] ) ; } } function verifyWritable ( obj , name , verifyProp , value ) { if ( ! verifyProp ) { assert ( Object . getOwnPropertyDescriptor ( obj , name ) . writable , "Expected obj[" + String ( name ) + "] to have writable:true." ) ; } if ( ! isWritable ( obj , name , verifyProp , value ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to be writable, but was not." ) ; } } function verifyNotWritable ( obj , name , verifyProp , value ) { if ( ! verifyProp ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . writable , null + String ( name ) + "] to have writable:false." ) ; } if ( isWritable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be writable, but was." ) ; } } function verifyEnumerable ( obj , name ) { 0 || 0 ; if ( ! isEnumerable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to be enumerable, but was not." ) ; } } function verifyNotEnumerable ( obj , name ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . enumerable , "Expected obj[" + String ( name ) + "] to have enumerable:false." ) ; if ( isEnumerable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be enumerable, but was." ) ; } } function verifyConfigurable ( obj , name ) { assert ( Object . getOwnPropertyDescriptor ( obj , name ) . configurable , "Expected obj[" + String ( name ) + "] to have configurable:true." ) ; if ( ! isConfigurable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to be configurable, but was not." ) ; } } function verifyNotConfigurable ( obj , name ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . configurable , "Expected obj[" + String ( name ) + "] to have configurable:false." ) ; if ( isConfigurable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be configurable, but was." ) ; } } var nativeErrors = [ EvalError , RangeError , ReferenceError , SyntaxError , TypeError , URIError ] ; for ( var i = 0 ; i < nativeErrors . length ; ++ i ) { var nativeError = nativeErrors [ i ] ; var message = "my-message" ; var error = new nativeError ( 0 , 0 ) ; verifyEqualTo ( error , "message" , message ) ; verifyNotEnumerable ( error , "message" ) ; verifyWritable ( error , "message" ) ; verifyConfigurable ( error , "message" ) ; } 
