"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = { [ Symbol . toPrimitive ] : async function * ( x ) { } } ; ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . throws ( TypeError , function ( ) { 0n >>> Object ( 2n ) ; } , '0n >>> Object(2n) throws TypeError' ) ; assert . throws ( TypeError , function ( ) { ( { [ Symbol . toPrimitive ] : function ( ) { return [ ] ; } } ) >>> 0n ; } , '({[Symbol.toPrimitive]: function() {return 2n;}}) >>> 0n throws TypeError' ) ; assert . throws ( TypeError , function ( ) { 0n >>> { [ Symbol . toPrimitive ] : function ( ) { return 2n ; } } ; } , '0n >>> {[Symbol.toPrimitive]: function() {return 2n;}} throws TypeError' ) ; assert . throws ( TypeError , function ( ) { ( { valueOf : function ( ) { return 2n ; } } ) >>> 0n ; } , '({valueOf: function() {return 2n;}}) >>> 0n throws TypeError' ) ; assert . throws ( TypeError , function ( ) { 0n >>> { valueOf : function ( ) { return 2n ; } } ; } , '0n >>> {valueOf: function() {return 2n;}} throws TypeError' ) ; assert . throws ( TypeError , function ( ) { ( { toString : function ( ) { return 2n ; } } ) >>> 0n ; } , '({toString: function() {return 2n;}}) >>> 0n throws TypeError' ) ; assert . throws ( TypeError , function ( ) { 0n >>> { toString : function ( ) { return 2n ; } } ; } , '0n >>> {toString: function() {return 2n;}} throws TypeError' ) ; 
