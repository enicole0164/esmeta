"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } { } throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( ) { } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var arrayIndex = - 1 ; var originalLength = 7 ; var obj = { length : originalLength , 0 : 2 , 1 : 4 , 2 : 8 , 3 : 16 , 4 : 32 , 5 : 64 , 6 : 128 } ; var array = [ 2 , 4 , 8 , 16 , 32 , 64 , 128 ] ; function mapFn ( value , index ) { arrayIndex ++ ; assert . sameValue ( value , obj [ arrayIndex ] , 'The value of value is expected to equal the value of obj[arrayIndex]' ) ; assert . sameValue ( index , arrayIndex , 'The value of index is expected to equal the value of arrayIndex' ) ; obj [ originalLength + arrayIndex ] = 2 * arrayIndex + 1 ; return obj [ arrayIndex ] ; } var a = Array . from ( obj , mapFn ) ; assert . sameValue ( a . length , array . length , 'The value of a.length is expected to equal the value of array.length' ) ; for ( var j = 0 ; j < a . length ; j ++ ) { assert . sameValue ( a [ j ] , array [ j ] , 'The value of a[j] is expected to equal the value of array[j]' ) ; } 
