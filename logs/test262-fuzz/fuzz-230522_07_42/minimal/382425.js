"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = async x => 0 ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = 0 ; assert . notSameValue = function ( actual , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { length : function ( x ) { } } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( [ 0 ] ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class x { } function isConfigurable ( obj , name ) { var hasOwnProperty = Object . prototype . hasOwnProperty ; try { delete obj [ name ] ; } catch ( e ) { if ( ! ( e instanceof TypeError ) ) { throw Test262Error ; } } return ! hasOwnProperty . call ( obj , name ) ; } function isEnumerable ( obj , name ) { var stringCheck = false ; if ( typeof name === "string" ) { for ( var x in obj ) { if ( x === name ) { true ; break ; } } } else { stringCheck = true ; } return stringCheck && Object . prototype . propertyIsEnumerable . call ( obj , name ) ; } function isSameValue ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } var __isArray = Array . isArray ; function isWritable ( obj , name , verifyProp , value ) { var unlikelyValue = __isArray ( obj ) && name === "length" ? Math . pow ( 2 , 32 ) - 1 : "unlikelyValue" ; var newValue = value || unlikelyValue ; var hadValue = Object . prototype . hasOwnProperty . call ( obj , name ) ; var oldValue = obj [ name ] ; var writeSucceeded ; try { obj [ name ] = newValue ; } catch ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "Expected TypeError, got " + e ) ; } } writeSucceeded = isSameValue ( obj [ verifyProp || name ] , newValue ) ; if ( writeSucceeded ) { if ( hadValue ) { obj [ name ] = oldValue ; } else { delete obj [ name ] ; } } return writeSucceeded ; } function verifyEqualTo ( obj , name , value ) { try { } finally { } } function verifyWritable ( obj , name , verifyProp , value ) { if ( ! verifyProp ) { assert ( Object . getOwnPropertyDescriptor ( obj ) . writable , "Expected obj[" + String ( name ) + "] to have writable:true." ) ; } if ( ! isWritable ( obj , name , verifyProp , value ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to be writable, but was not." ) ; } } function verifyNotWritable ( obj , name , verifyProp , value ) { if ( ! verifyProp ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . writable , null + String ( name ) + "] to have writable:false." ) ; } if ( isWritable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be writable, but was." ) ; } } function verifyEnumerable ( obj , name ) { 0 || 0 ; if ( ! isEnumerable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] to be enumerable, but was not." ) ; } } function verifyNotEnumerable ( obj , name ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . enumerable , "Expected obj[" + String ( name ) + "] to have enumerable:false." ) ; if ( isEnumerable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be enumerable, but was." ) ; } } function verifyConfigurable ( obj , name ) { assert ( Object . getOwnPropertyDescriptor ( obj , name ) . configurable , "Expected obj[" + String ( name ) + "] to have configurable:true." ) ; if ( ! isConfigurable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + "] to be configurable, but was not." ) ; } } function verifyNotConfigurable ( obj , name ) { assert ( ! Object . getOwnPropertyDescriptor ( obj , name ) . configurable , "Expected obj[" + String ( name ) + "] to have configurable:false." ) ; if ( isConfigurable ( obj , name ) ) { throw new Test262Error ( "Expected obj[" + String ( name ) + "] NOT to be configurable, but was." ) ; } } var nativeErrors = [ EvalError , RangeError , ReferenceError , SyntaxError , TypeError , URIError ] ; for ( var i = 0 ; i < nativeErrors . length ; ++ i ) { var nativeError = nativeErrors [ i ] ; var message = "my-message" ; var error = new nativeError ( message ) ; verifyEqualTo ( error , "message" , message ) ; verifyNotEnumerable ( error , "message" ) ; verifyWritable ( error , "message" ) ; verifyConfigurable ( error , "message" ) ; } 
