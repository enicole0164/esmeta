"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } var x ; try { } catch ( x ) { ; ; ; } finally { } assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = x => 0 ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } assert . sameValue ( 0n > 0n , false , 'The result of (0n > 0n) is false' ) ; assert . sameValue ( 1n > 1n , false , 'The result of (1n > 1n) is false' ) ; assert . sameValue ( - 1n > - 1n , false , 'The result of (-1n > -1n) is false' ) ; assert . sameValue ( 0n > - 0n , false , 'The result of (0n > -0n) is false' ) ; assert . sameValue ( - 0n > 0n , false , 'The result of (-0n > 0n) is false' ) ; assert . sameValue ( 0n > 1n , false , 'The result of (0n > 1n) is false' ) ; assert . sameValue ( 1n > 0n , true , 'The result of (1n > 0n) is true' ) ; assert . sameValue ( 0n > - 1n , true , 'The result of (0n > -1n) is true' ) ; assert . sameValue ( - 1n > 0n , false , 'The result of (-1n > 0n) is false' ) ; assert . sameValue ( 1n > - 1n , true , 'The result of (1n > -1n) is true' ) ; assert . sameValue ( - 1n > 1n , false , 'The result of (-1n > 1n) is false' ) ; assert . sameValue ( 0x1fffffffffffff01n > 0x1fffffffffffff02n , false , 'The result of (0x1fffffffffffff01n > 0x1fffffffffffff02n) is false' ) ; assert . sameValue ( 0x1fffffffffffff02n > 0x1fffffffffffff01n , true , 'The result of (0x1fffffffffffff02n > 0x1fffffffffffff01n) is true' ) ; assert . sameValue ( - 0x1fffffffffffff01n > - 0x1fffffffffffff02n , true , 'The result of (-0x1fffffffffffff01n > -0x1fffffffffffff02n) is true' ) ; assert . sameValue ( - 0x1fffffffffffff02n > - 0x1fffffffffffff01n , false , 'The result of (-0x1fffffffffffff02n > -0x1fffffffffffff01n) is false' ) ; assert . sameValue ( 0x10000000000000000n > 0n , true , 'The result of (0x10000000000000000n > 0n) is true' ) ; assert . sameValue ( 0n > 0x10000000000000000n , false , 'The result of (0n > 0x10000000000000000n) is false' ) ; assert . sameValue ( 0x10000000000000000n > 1n , true , 'The result of (0x10000000000000000n > 1n) is true' ) ; assert . sameValue ( 1n > 0x10000000000000000n , false , 'The result of (1n > 0x10000000000000000n) is false' ) ; assert . sameValue ( 0x10000000000000000n > - 1n , true , 'The result of (0x10000000000000000n > -1n) is true' ) ; assert . sameValue ( - 1n > 0x10000000000000000n , false , 'The result of (-1n > 0x10000000000000000n) is false' ) ; assert . sameValue ( 0x10000000000000001n > 0n , true , 'The result of (0x10000000000000001n > 0n) is true' ) ; assert . sameValue ( 0n > 0x10000000000000001n , false , 'The result of (0n > 0x10000000000000001n) is false' ) ; assert . sameValue ( - 0x10000000000000000n > 0n , false , 'The result of (-0x10000000000000000n > 0n) is false' ) ; assert . sameValue ( 0n > - 0x10000000000000000n , true , 'The result of (0n > -0x10000000000000000n) is true' ) ; assert . sameValue ( - 0x10000000000000000n > 1n , false , 'The result of (-0x10000000000000000n > 1n) is false' ) ; assert . sameValue ( 1n > - 0x10000000000000000n , true , 'The result of (1n > -0x10000000000000000n) is true' ) ; assert . sameValue ( - 0x10000000000000000n > - 1n , false , 'The result of (-0x10000000000000000n > -1n) is false' ) ; assert . sameValue ( - 1n > - 0x10000000000000000n , true , 'The result of (-1n > -0x10000000000000000n) is true' ) ; assert . sameValue ( - 0x10000000000000001n > 0n , false , 'The result of (-0x10000000000000001n > 0n) is false' ) ; assert . sameValue ( 0n > - 0x10000000000000001n , true , 'The result of (0n > -0x10000000000000001n) is true' ) ; assert . sameValue ( 0x10000000000000000n > 0x100000000n , true , 'The result of (0x10000000000000000n > 0x100000000n) is true' ) ; assert . sameValue ( 0x100000000n > 0x10000000000000000n , false , 'The result of (0x100000000n > 0x10000000000000000n) is false' ) ; 
