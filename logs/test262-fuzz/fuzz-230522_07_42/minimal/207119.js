"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; x => 0 ; assert . notSameValue = 0 || 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) debugger ; return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } async function * g ( ) { } var AsyncGeneratorPrototype = Object . getPrototypeOf ( g ) . prototype ; function * syncGenerator ( ) { } var syncIterator = syncGenerator ( ) ; var testPromises = [ AsyncGeneratorPrototype . return . call ( { } ) . then ( function ( ) { throw new Test262Error ( "AsyncGeneratorPrototype.throw should reject promise" + " when `this` value is an object" ) ; } , function ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "(object) expected TypeError but got " + e ) ; } } ) , AsyncGeneratorPrototype . return . call ( function ( ) { } ) . then ( function ( ) { throw new Test262Error ( "AsyncGeneratorPrototype.throw should reject promise" + " when `this` value is a function" ) ; } , function ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "(function) expected TypeError but got " + e ) ; } } ) , AsyncGeneratorPrototype . return . call ( g ) . then ( function ( ) { throw new Test262Error ( "AsyncGeneratorPrototype.throw should reject promise" + " when `this` value is an async generator function" ) ; } , function ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "(async generator function) expected TypeError but got " + e ) ; } } ) , AsyncGeneratorPrototype . return . call ( g . prototype ) . then ( function ( ) { throw new Test262Error ( "AsyncGeneratorPrototype.throw should reject promise" + " when `this` value is an async generator function prototype object" ) ; } , function ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "(async generator function prototype) expected TypeError but got " + e ) ; } } , ) , AsyncGeneratorPrototype . return . call ( syncIterator ) . then ( function ( ) { throw new Test262Error ( "AsyncGeneratorPrototype.throw should reject promise" + " when `this` value is a generator" ) ; } , function ( e ) { if ( ! ( e instanceof TypeError ) ) { throw new Test262Error ( "(generator) expected TypeError but got " + e ) ; } } ) ] ; Promise . all ( testPromises ) . then ( ( ) => { } ) . then ( $DONE , $DONE ) ; 
