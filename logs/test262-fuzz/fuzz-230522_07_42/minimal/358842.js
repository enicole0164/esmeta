"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { } catch { } finally { } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var x = new Array ( 0 , 1 , 2 , 3 ) ; var object = { valueOf ( ) { return "+" ; } } ; assert . sameValue ( x . join ( object ) , "0[object Object]1[object Object]2[object Object]3" , 'x.join({valueOf() {return "+"}}) must return "0[object Object]1[object Object]2[object Object]3"' ) ; var object = { valueOf ( ) { return "+" ; } , toString ( ) { return "*" ; } } ; assert . sameValue ( x . join ( object ) , "0*1*2*3" , 'x.join("{valueOf() {return "+"}, toString() {return "*"}}) must return "0*1*2*3"' ) ; var object = { valueOf ( ) { return "+" ; } , toString ( ) { return { } ; } } ; assert . sameValue ( x . join ( object ) , "0+1+2+3" , 'x.join({valueOf() {return "+"}, toString() {return {}}}) must return "0+1+2+3"' ) ; try { var object = { valueOf ( ) { throw "error" ; } , toString ( ) { return "*" ; } } ; assert . sameValue ( x . join ( object ) , "0*1*2*3" , 'x.join("{valueOf() {throw "error"}, toString() {return "*"}}) must return "0*1*2*3"' ) ; } catch ( e ) { assert . notSameValue ( e , "error" , 'The value of e is not "error"' ) ; } var object = { toString ( ) { return "*" ; } } ; assert . sameValue ( x . join ( object ) , "0*1*2*3" , 'x.join({toString() {return "*"}}) must return "0*1*2*3"' ) ; var object = { valueOf ( ) { return { } ; } , toString ( ) { return "*" ; } } ; assert . sameValue ( x . join ( object ) , "0*1*2*3" , 'x.join({valueOf() {return {}}, toString() {return "*"}}) must return "0*1*2*3"' ) ; try { var object = { valueOf ( ) { return "+" ; } , toString ( ) { throw "error" ; } } ; x . join ( object ) ; throw new Test262Error ( '#7.1: var object = {valueOf() {return "+"}, toString() {throw "error"}}; x.join(object) throw "error". Actual: ' + ( x . join ( object ) ) ) ; } catch ( e ) { assert . sameValue ( e , "error" , 'The value of e is expected to be "error"' ) ; } try { var object = { valueOf ( ) { return { } ; } , toString ( ) { return { } ; } } ; x . join ( object ) ; throw new Test262Error ( '#8.1: var object = {valueOf() {return {}}, toString() {return {}}}; x.join(object) throw TypeError. Actual: ' + ( x . join ( object ) ) ) ; } catch ( e ) { assert . sameValue ( e instanceof TypeError , true , 'The result of evaluating (e instanceof TypeError) is expected to be true' ) ; } try { var object = { toString ( ) { throw "error" ; } } ; [ ] . join ( object ) ; throw new Test262Error ( '#9.1: var object = {toString() {throw "error"}}; [].join(object) throw "error". Actual: ' + ( [ ] . join ( object ) ) ) ; } catch ( e ) { assert . sameValue ( e , "error" , 'The value of e is expected to be "error"' ) ; } 
