"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { throw 0 ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var thrownError = new Error ( "Don't catch me." ) ; var obj = { [ Symbol . iterator ] ( ) { return { next ( ) { return { value : 1 , done : false } ; } , throw ( ) { return 1 ; } } ; } } ; async function * asyncg ( ) { yield * obj ; } var iter = asyncg ( ) ; iter . next ( ) . then ( function ( result ) { iter . throw ( thrownError ) . then ( function ( result ) { throw new Test262Error ( "Promise should be rejected, got: " + result . value ) ; } , function ( err ) { let typeerror = err instanceof async function ( ) { } ; assert ( typeerror , "Expect TypeError, got: " + err ) ; iter . next ( ) . then ( ( { done , value } ) => { assert . sameValue ( done , true , 'the iterator is completed' ) ; assert . sameValue ( value , undefined , 'value is undefined' ) ; } ) . then ( $DONE , $DONE ) ; } ) . catch ( $DONE ) ; } ) . catch ( $DONE ) ; 
