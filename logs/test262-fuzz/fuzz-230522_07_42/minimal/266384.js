"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } if ( ( true != { valueOf : function ( ) { return 1 ; } } ) !== false ) { throw new Test262Error ( '#1: (true != {valueOf: function() {return 1}}) === false' ) ; } if ( ( 1 != { valueOf : function ( ) { return 1 ; } , toString : function ( ) { return 0 ; } } ) !== false ) { throw new Test262Error ( '#2: (1 != {valueOf: function() {return 1}, toString: function() {return 0}}) === false' ) ; } if ( ( "+1" != { valueOf : function ( ) { return 1 ; } , toString : function ( ) { return { } ; } } ) !== false ) { throw new Test262Error ( '#3: ("+1" != {valueOf: function() {return 1}, toString: function() {return {}}}) === false' ) ; } try { if ( ( true != { valueOf : function ( ) { return "+1" ; } , toString : function ( ) { throw "error" ; } } ) !== false ) { throw new Test262Error ( '#4.1: (true != {valueOf: function() {return "+1"}, toString: function() {throw "error"}}) === false' ) ; } } catch ( e ) { if ( e === "error" ) { throw new Test262Error ( '#4.2: (true != {valueOf: function() {return "+1"}, toString: function() {throw "error"}}) not throw "error"' ) ; } else { throw new Test262Error ( '#4.3: (true != {valueOf: function() {return "+1"}, toString: function() {throw "error"}}) not throw Error. Actual: ' + ( e ) ) ; } } if ( ( 0n != { toString : function ( ) { return "+1" ; } } ) !== false ) { throw new Test262Error ( '#5: (1 != {toString: function() {return "+1"}}) === false' ) ; } if ( ( "1" != { valueOf : function ( ) { return { } ; } , toString : function ( ) { return "+1" ; } } ) !== true ) { throw new Test262Error ( '#6.1: ("1" != {valueOf: function() {return {}}, toString: function() {return "+1"}}) === true' ) ; } else { if ( ( "+1" != { valueOf : function ( ) { return { } ; } , toString : function ( ) { return "+1" ; } } ) !== false ) { throw new Test262Error ( '#6.2: ("+1" != {valueOf: function() {return {}}, toString: function() {return "+1"}}) === false' ) ; } } try { ( 1 != { valueOf : function ( ) { throw "error" ; } , toString : function ( ) { return 1 ; } } ) ; throw new Test262Error ( '#7: (1 != {valueOf: function() {throw "error"}, toString: function() {return 1}}) throw "error"' ) ; } catch ( e ) { if ( e !== "error" ) { throw new Test262Error ( '#7: (1 != {valueOf: function() {throw "error"}, toString: function() {return 1}}) throw "error"' ) ; } } try { ( 1 != { valueOf : function ( ) { return { } ; } , toString : function ( ) { return { } ; } } ) ; throw new Test262Error ( '#8: (1 != {valueOf: function() {return {}}, toString: function() {return {}}}) throw TypeError' ) ; } catch ( e ) { if ( ( e instanceof TypeError ) !== true ) { throw new Test262Error ( '#8: (1 != {valueOf: function() {return {}}, toString: function() {return {}}}) throw TypeError' ) ; } } 
