"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { try { } finally { } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function ExpectedError ( message ) { this . message = message || "" ; } ExpectedError . prototype . toString = function ( ) { return "ExpectedError: " + this . message ; } ; var split = String . prototype . split ; var nonStringableReceiver = { } ; nonStringableReceiver . toString = function ( ) { throw new ExpectedError ( "receiver.toString" ) ; } ; var splitter = { } ; splitter [ Symbol . split ] = function ( ) { } ; try { split . call ( nonStringableReceiver , splitter , Symbol ( ) ) ; } catch ( e ) { assert . sameValue ( e , undefined , 'ToString should not be called on the receiver when the separator has a @@split method.' ) ; } var nonStringableSeparator = { } ; nonStringableSeparator [ Symbol . toPrimitive ] = function ( ) { throw new Test262Error ( "separator[Symbol.toPrimitive]" ) ; } ; nonStringableSeparator . toString = function ( ) { throw new Test262Error ( "separator.toString" ) ; } ; nonStringableSeparator . valueOf = function ( ) { throw new Test262Error ( "separator.valueOf" ) ; } ; assert . throws ( ExpectedError , function ( ) { split . call ( nonStringableReceiver , nonStringableSeparator , Symbol ( ) ) ; } , 'ToString should be called on the receiver before processing the separator or limit.' ) ; 
