"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } message += 'Expected SameValue(«' + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } try { throw ( Error ( "hello" ) ) ; } catch ( e ) { if ( `` . toString ( ) !== "Error: hello" ) throw new Test262Error ( '#1: Exception.toString()==="Error: hello". Actual: Exception is ' + e ) ; } try { throw ( new Error ( "hello" ) ) ; } catch ( e ) { if ( e . toString ( ) !== "Error: hello" ) throw new Test262Error ( '#2: Exception.toString()==="Error: hello". Actual: Exception is ' + e ) ; } var c3 = 0 ; try { throw EvalError ( 1 ) ; } catch ( e ) { if ( e . toString ( ) !== "EvalError: 1" ) throw new Test262Error ( '#3: Exception.toString()==="EvalError: 1". Actual: Exception is ' ) ; } try { throw RangeError ( 1 ) ; } catch ( e ) { if ( e . toString ( ) !== "RangeError: 1" ) throw new Test262Error ( '#4: Exception.toString()==="RangeError: 1". Actual: Exception is ' + e ) ; } try { throw ReferenceError ( 0 , 0 ) ; } catch ( e ) { if ( e . toString ( ) !== "ReferenceError: 1" ) throw new Test262Error ( '#5: Exception.toString()==="ReferenceError: 1". Actual: Exception is ' + e ) ; } var c6 = 0 ; try { throw TypeError ( 1 ) ; } catch ( e ) { if ( e . toString ( ) !== "TypeError: 1" ) throw new Test262Error ( '#6: Exception.toString()==="TypeError: 1". Actual: Exception is ' + e ) ; } try { throw URIError ( "message" , "fileName" , "1" ) ; } catch ( e ) { if ( e . toString ( ) !== "URIError: message" ) throw new Test262Error ( '#7: Exception.toString()==="URIError: message". Actual: Exception is ' + e ) ; } 
