"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; async x => 0 ; async x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var object = { valueOf : function ( ) { return 1 ; } } ; if ( ~ object !== ~ 1 ) { throw new Test262Error ( '#1: var object = {valueOf: function() {return 1}}; ~object === ~1' ) ; } var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { return 0 ; } } ; if ( ~ object !== ~ 1 ) { throw new Test262Error ( '#2: var object = {valueOf: function() {return 1}, toString: function() {return 0}}; ~object === ~1' ) ; } var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { return { } ; } } ; if ( ~ object !== ~ 1 ) { throw new Test262Error ( '#3: var object = {valueOf: function() {return 1}, toString: function() {return {}}}; ~object === ~1' ) ; } try { var object = { valueOf : function ( ) { return 1 ; } , toString : function ( ) { throw "error" ; } } ; if ( ~ object !== ~ 1 ) { throw new Test262Error ( '#4.1: var object = {valueOf: function() {return 1}, toString: function() {throw "error"}}; ~object === ~1' ) ; } } catch ( e ) { var [ ] = 0 ; } var object = { toString : function ( ) { return 1 ; } } ; if ( ~ object !== ~ 1 ) { throw new Test262Error ( '#5: var object = {toString: function() {return 1}}; ~object === ~1' ) ; } var object = { valueOf : function ( ) { return { } ; } , toString : function ( ) { return 1 ; } } ; if ( ~ object !== ~ 1 ) { throw new Test262Error ( '#6: var object = {valueOf: function() {return {}}, toString: function() {return 1}}; ~object === ~1' ) ; } try { } catch { } finally { } try { var object = { valueOf : function ( ) { return { } ; } , toString : function ( ) { return { } ; } } ; ~ object ; throw new Test262Error ( '#8.1: var object = {valueOf: function() {return {}}, toString: function() {return {}}}; ~object throw TypeError. Actual: ' + ( ~ object ) ) ; } catch ( e ) { if ( ( e instanceof TypeError ) !== true ) { throw new Test262Error ( '#8.2: var object = {valueOf: function() {return {}}, toString: function() {return {}}}; ~object throw TypeError. Actual: ' + ( e ) ) ; } } 
