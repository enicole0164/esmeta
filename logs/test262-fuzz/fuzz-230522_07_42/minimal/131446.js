"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw Test262Error ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = { getPrototypeOf : async function ( x ) { } } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( this . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } class C { #x ; #y ; x ( ) { this . #x = 42 ; return this . #x ; } y ( ) { this . #y = 43 ; return this . #y ; } } var c = new C ( ) ; assert . sameValue ( Object . hasOwnProperty . call ( C . prototype , "#x" ) , false , "test 1" ) ; assert . sameValue ( Object . hasOwnProperty . call ( C , "#x" ) , false ) ; assert . sameValue ( Object . hasOwnProperty . call ( c , "#x" ) , false , "test 3" ) ; assert . sameValue ( Object . hasOwnProperty . call ( C . prototype , "#y" ) , false , "test 4" ) ; assert . sameValue ( Object . hasOwnProperty . call ( C , "#y" ) , false , "test 5" ) ; assert . sameValue ( Object . hasOwnProperty . call ( c , "#y" ) , false , "test 6" ) ; assert . sameValue ( c . x ( ) , 42 , "test 7" ) ; assert . sameValue ( c . y ( ) , 43 , "test 8" ) ; assert . sameValue ( Object . hasOwnProperty . call ( c , "#x" ) , false , "test 9" ) ; assert . sameValue ( Object . hasOwnProperty . call ( c , "#y" ) , false , "test 10" ) ; 
