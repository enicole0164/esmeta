"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + this . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function __consolePrintHandle__ ( msg ) { print ( msg ) ; } function $DONE ( error ) { if ( error ) { if ( typeof error === 'object' && error !== null && 'name' in error ) { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:' + error . name + ': ' + error . message ) ; } else { __consolePrintHandle__ ( 'Test262:AsyncTestFailure:Test262Error: ' + error ) ; } } else { __consolePrintHandle__ ( 'Test262:AsyncTestComplete' ) ; } } var log = [ ] ; var obj = { [ Symbol . iterator ] ( ) { var throwCount = 0 ; return { name : "syncIterator" , get next ( ) { log . push ( { name : "get next" } ) ; return function ( ) { return { value : "next-value-1" , done : false } ; } ; } , get throw ( ) { log . push ( { name : "get throw" , thisValue : this } ) ; return function ( ) { log . push ( { name : "call throw" , thisValue : this , args : [ ... arguments ] } ) ; throwCount ++ ; if ( throwCount == 1 ) { return { name : "throw-result-1" , get value ( ) { log . push ( { name : "get throw value (1)" , thisValue : this } ) ; return "throw-value-1" ; } , get done ( ) { log . push ( { name : "get throw done (1)" , thisValue : this } ) ; return false ; } } ; } return { name : "throw-result-2" , get value ( ) { log . push ( { name : "get throw value (2)" , thisValue : this } ) ; return "throw-value-2" ; } , get done ( ) { log . push ( { name : "get throw done (2)" , thisValue : this } ) ; return true ; } } ; } ; } } ; } } ; var callCount = 0 ; var gen = { async * method ( ) { callCount += 1 ; log . push ( { name : "before yield*" } ) ; var v = yield * obj ; x : ; return "return-value" ; } } . method ; var iter = gen ( ) ; assert . sameValue ( log . length , 0 , "log.length" ) ; iter . next ( ) . then ( v => { assert . sameValue ( log [ 0 ] . name , "before yield*" ) ; assert . sameValue ( log [ 1 ] . name , "get next" ) ; assert . sameValue ( v . value , "next-value-1" ) ; assert . sameValue ( v . done , false ) ; assert . sameValue ( log . length , 2 , "log.length" ) ; iter . throw ( "throw-arg-1" ) . then ( v => { assert . sameValue ( log [ 2 ] . name , "get throw" ) ; assert . sameValue ( log [ 2 ] . thisValue . name , "syncIterator" , "get throw thisValue" ) ; assert . sameValue ( log [ 3 ] . name , "call throw" ) ; assert . sameValue ( log [ 3 ] . thisValue . name , "syncIterator" , "throw thisValue" ) ; assert . sameValue ( log [ 3 ] . args . length , 1 , "throw args.length" ) ; assert . sameValue ( log [ 3 ] . args [ 0 ] , "throw-arg-1" , "throw args[0]" ) ; assert . sameValue ( log [ 4 ] . name , "get throw done (1)" ) ; assert . sameValue ( log [ 4 ] . thisValue . name , "throw-result-1" , "get throw done thisValue" ) ; assert . sameValue ( log [ 5 ] . name , "get throw value (1)" ) ; assert . sameValue ( log [ 5 ] . thisValue . name , "throw-result-1" , "get throw value thisValue" ) ; assert . sameValue ( v . value , "throw-value-1" ) ; assert . sameValue ( v . done , false ) ; assert . sameValue ( log . length , 6 , "log.length" ) ; iter . throw ( ) . then ( v => { assert . sameValue ( log [ 6 ] . name , "get throw" ) ; assert . sameValue ( log [ 6 ] . thisValue . name , "syncIterator" , "get throw thisValue" ) ; assert . sameValue ( log [ 7 ] . name , "call throw" ) ; assert . sameValue ( log [ 7 ] . thisValue . name , "syncIterator" , "throw thisValue" ) ; assert . sameValue ( log [ 7 ] . args . length , 1 , "throw args.length" ) ; assert . sameValue ( log [ 7 ] . args [ 0 ] , undefined , "throw args[0]" ) ; assert . sameValue ( log [ 8 ] . name , "get throw done (2)" ) ; assert . sameValue ( log [ 8 ] . thisValue . name , "throw-result-2" , "get throw done thisValue" ) ; assert . sameValue ( log [ 9 ] . name , "get throw value (2)" ) ; assert . sameValue ( log [ 9 ] . thisValue . name , "throw-result-2" , "get throw value thisValue" ) ; assert . sameValue ( log [ 10 ] . name , "after yield*" ) ; assert . sameValue ( log [ 10 ] . value , "throw-value-2" ) ; assert . sameValue ( v . value , "return-value" ) ; assert . sameValue ( v . done , true ) ; assert . sameValue ( log . length , 11 , "log.length" ) ; } ) . then ( $DONE , $DONE ) ; } ) . catch ( $DONE ) ; } ) . catch ( $DONE ) ; assert . sameValue ( callCount , 1 ) ; 
