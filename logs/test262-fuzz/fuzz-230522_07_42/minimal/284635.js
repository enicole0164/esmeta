"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { switch ( 0 , 0 ) { } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw async x => 0 ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { do ; while ( 0 ) ; } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function compareArray ( a , b ) { if ( b . length !== a . length ) { return false ; } for ( var i = 0 ; i < a . length ; i ++ ) { if ( ! compareArray . isSameValue ( b [ i ] , a [ i ] ) ) { return false ; } } return true ; } compareArray . isSameValue = function ( a , b ) { if ( a === 0 && b === 0 ) return 1 / a === 1 / b ; if ( a !== a && b !== b ) return true ; return a === b ; } ; compareArray . format = function ( arrayLike ) { return `[${ [ ] . map . call ( arrayLike , String ) . join ( ', ' ) }]` ; } ; assert . compareArray = function ( actual , expected , message ) { message = message === undefined ? '' : message ; if ( typeof message === 'symbol' ) { message = message . toString ( ) ; } assert ( actual != null , `First argument shouldn't be nullish. ${ message }` ) ; assert ( expected != null , `Second argument shouldn't be nullish. ${ message }` ) ; var format = compareArray . format ; var result = compareArray ( actual , expected ) ; if ( ! result ) { assert ( false , `Expected ${ format ( actual ) } and ${ format ( expected ) } to have the same contents. ${ message }` ) ; } } ; var a = [ 1 , [ 2 ] ] ; var expected = a ; var depthNum = 'TestString' ; var actual = a . flat ( depthNum ) ; assert . compareArray ( actual , expected , 'The value of actual is expected to equal the value of expected' ) ; depthNum = { } ; actual = a . flat ( depthNum ) ; assert . compareArray ( actual , expected , 'The value of actual is expected to equal the value of expected' ) ; depthNum = Number . NEGATIVE_INFINITY ; actual = a . flat ( depthNum ) ; assert . compareArray ( actual , expected , 'The value of actual is expected to equal the value of expected' ) ; depthNum = + 0 ; actual = a . flat ( depthNum ) ; assert . compareArray ( actual , expected , 'The value of actual is expected to equal the value of expected' ) ; depthNum = - 0 ; actual = a . flat ( depthNum ) ; assert . compareArray ( actual , expected , 'The value of actual is expected to equal the value of expected' ) ; depthNum = '1' ; actual = a . flat ( depthNum ) ; expected = [ 1 , 2 ] ; assert . compareArray ( actual , expected , 'The value of actual is expected to equal the value of expected' ) ; 
