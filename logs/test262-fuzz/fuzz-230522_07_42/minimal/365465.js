"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } 0 ? 0 : 0 ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; x : ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } { } throw Test262Error ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( { preventExtensions : function * ( x ) { } } + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + { [ Symbol . search ] : 0 } ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = { index : true } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function foo ( ) { } Object . defineProperty ( [ 0 ] , "length" , { value : undefined } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "undefined" ) ; Object . defineProperty ( foo , "length" , { value : null } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "null" ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 ) ; Object . defineProperty ( foo , "length" , { value : "1" } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "string" ) ; Object . defineProperty ( foo , "length" , { value : Symbol ( "1" ) } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "symbol" ) ; Object . defineProperty ( foo , "length" , { value : new Number ( 1 ) } ) ; assert . sameValue ( foo . bind ( null , 1 ) . length , 0 , "Number object" ) ; function bar ( ) { } Object . setPrototypeOf ( bar , 0 ?? 0 ) ; assert ( delete bar . length ) ; var bound = Function . prototype . bind . call ( bar , null , 1 ) ; assert . sameValue ( bound . length , 0 , "not own" ) ; 
