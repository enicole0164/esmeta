"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; ; assert . _toString = function ( value ) { try { if ( value === 0 && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } var obj = { } ; obj . push = Array . prototype . push ; obj . length = { valueOf ( ) { return 3 ; } } ; var push = obj . push ( ) ; assert . sameValue ( push , 3 , 'The value of push is expected to be 3' ) ; obj . length = { valueOf ( ) { return 3 ; } , toString ( ) { return 1 ; } } ; var push = obj . push ( ) ; assert . sameValue ( push , 3 , 'The value of push is expected to be 3' ) ; obj . length = { valueOf ( ) { return 3 ; } , toString ( ) { return { } ; } } ; var push = obj . push ( ) ; assert . sameValue ( push , 3 , 'The value of push is expected to be 3' ) ; try { obj . length = { valueOf ( ) { return 3 ; } , toString ( ) { throw "error" ; } } ; var push = obj . push ( ) ; assert . sameValue ( push , 3 , 'The value of push is expected to be 3' ) ; } catch ( e ) { assert . notSameValue ( e , "error" , 'The value of e is not "error"' ) ; } obj . length = { toString ( ) { return 1 ; } } ; var push = obj . push ( ) ; assert . sameValue ( push , 1 , 'The value of push is expected to be 1' ) ; obj . length = { valueOf ( ) { return { } ; } , toString ( ) { return 1 ; } } ; var push = obj . push ( ) ; assert . sameValue ( push , 1 , 'The value of push is expected to be 1' ) ; try { obj . length = { valueOf ( ) { throw "error" ; } , toString ( ) { return 1 ; } } ; var push = obj . push ( ) ; throw new Test262Error ( '#7.1:  obj.length = {valueOf() {throw "error"}, toString() {return 1}}; obj.push() throw "error". Actual: ' + ( push ) ) ; } catch ( e ) { assert . sameValue ( e , "error" , 'The value of e is expected to be "error"' ) ; } try { obj . length = { valueOf ( ) { return { } ; } , toString ( ) { return { } ; } } ; var push = obj . push ( ) ; throw new Test262Error ( '#8.1:  obj.length = {valueOf() {return {}}, toString() {return {}}}  obj.push() throw TypeError. Actual: ' + ( push ) ) ; } catch ( e ) { assert . sameValue ( e instanceof TypeError , true , 'The result of evaluating (e instanceof TypeError) is expected to be true' ) ; } 
