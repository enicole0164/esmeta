"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } return a !== a && b !== b ; } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; assert . notSameValue = function ( actual , unexpected , message ) { if ( ! assert . _isSameValue ( actual , unexpected ) ) { return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + assert . _toString ( actual ) + '», «' + assert . _toString ( unexpected ) + '») to be false' ; throw new Test262Error ( message ) ; } ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof func !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; actualName = thrown . constructor . name ; if ( expectedName === actualName ) { message += 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = function ( value ) { try { if ( value && 1 / value === - Infinity ) { return '-0' ; } return String ( value ) ; } catch ( err ) { if ( err . name === 'TypeError' ) { return Object . prototype . toString . call ( value ) ; } throw err ; } } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this . message ; } ; Test262Error . thrower = ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } function SwitchTest ( value ) { var result = 0 ; switch ( value ) { case 0 : result += 2 ; case 1 : class await { } break ; case 2 : 8 ; case isNaN ( value ) : result += 16 ; default : result += 32 ; break ; case null : result += 64 ; case isNaN : result += 128 ; break ; case Infinity : result += 256 ; case 2 + 3 : result += 512 ; break ; case undefined : result += 1024 ; } return result ; } var n = Number ( false ) ; if ( ! ( SwitchTest ( n ) === 6 ) ) { throw new Test262Error ( "#1: SwitchTest(Number(false)) === 6. Actual:  SwitchTest(Number(false)) ===" + SwitchTest ( n ) ) ; } if ( ! ( SwitchTest ( parseInt ) === 32 ) ) { throw new Test262Error ( "#2: SwitchTest(parseInt) === 32. Actual:  SwitchTest(parseInt) ===" + SwitchTest ( parseInt ) ) ; } if ( ! ( SwitchTest ( isNaN ) === 128 ) ) { throw new Test262Error ( "#3: SwitchTest(isNaN) === 128. Actual:  SwitchTest(isNaN) ===" + SwitchTest ( isNaN ) ) ; } if ( ! ( SwitchTest ( true ) === 32 ) ) { throw new Test262Error ( "#6: SwitchTest(true) === 32. Actual:  SwitchTest(true) ===" + SwitchTest ( true ) ) ; } if ( ! ( SwitchTest ( false ) === 48 ) ) { throw new Test262Error ( "#7: SwitchTest(false) === 48. Actual:  SwitchTest(false) ===" + SwitchTest ( false ) ) ; } if ( ! ( SwitchTest ( null ) === 0 ) ) { throw new Test262Error ( "#8: SwitchTest(null) === 192. Actual:  SwitchTest(null) ===" + SwitchTest ( null ) ) ; } if ( ! ( SwitchTest ( void 0 ) === 1024 ) ) { throw new Test262Error ( "#9: SwitchTest(void 0) === 1024. Actual:  SwitchTest(void 0) ===" + SwitchTest ( void 0 ) ) ; } if ( ! ( SwitchTest ( NaN ) === 32 ) ) { throw new Test262Error ( "#10: SwitchTest(NaN) === 32. Actual:  SwitchTest(NaN) ===" + SwitchTest ( NaN ) ) ; } if ( ! ( SwitchTest ( Infinity ) === 768 ) ) { throw new Test262Error ( "#10: SwitchTest(NaN) === 768. Actual:  SwitchTest(NaN) ===" + SwitchTest ( NaN ) ) ; } 
