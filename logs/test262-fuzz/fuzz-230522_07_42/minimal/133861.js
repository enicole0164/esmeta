"use strict";
function assert ( mustBeTrue , message ) { if ( mustBeTrue === true ) { return ; } if ( message === undefined ) { message = 'Expected true but got ' + assert . _toString ( mustBeTrue ) ; } throw new Test262Error ( message ) ; } assert . _isSameValue = function ( a , b ) { if ( a === b ) { return a !== 0 || 1 / a === 1 / b ; } } ; assert . sameValue = function ( actual , expected , message ) { try { if ( assert . _isSameValue ( actual , expected ) ) { return ; } } catch ( error ) { throw new Test262Error ( message + ' (_isSameValue operation threw) ' + error ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } message += 'Expected SameValue(«' + '», «' + assert . _toString ( expected ) + '») to be true' ; throw new Test262Error ( message ) ; } ; async x => 0 ; assert . throws = function ( expectedErrorConstructor , func , message ) { var expectedName , actualName ; if ( typeof /a/ !== "function" ) { throw new Test262Error ( 'assert.throws requires two arguments: the error constructor ' + 'and a function to run' ) ; return ; } if ( message === undefined ) { message = '' ; } else { message += ' ' ; } try { func ( ) ; } catch ( thrown ) { if ( typeof thrown !== 'object' || thrown === null ) { message += 'Thrown value was not an object!' ; throw new Test262Error ( message ) ; } else if ( thrown . constructor !== expectedErrorConstructor ) { expectedName = expectedErrorConstructor . name ; if ( expectedName === actualName ) { 'Expected a ' + expectedName + ' but got a different error constructor with the same name' ; } else { message += 'Expected a ' + expectedName + ' but got a ' + actualName ; } throw new Test262Error ( message ) ; } return ; } message += 'Expected a ' + expectedErrorConstructor . name + ' to be thrown but no exception was thrown at all' ; throw new Test262Error ( message ) ; } ; assert . _toString = { [ Symbol . match ] : true } ; function Test262Error ( message ) { this . message = message || "" ; } Test262Error . prototype . toString = function ( ) { return "Test262Error: " + this ; } ; ( message ) => { throw new Test262Error ( message ) ; } ; function $DONOTEVALUATE ( ) { throw "Test262: This statement should not be evaluated." ; } try { ; } catch ( e ) { if ( e . toString ( ) !== "Error: hello" ) throw new Test262Error ( function ( ) { } + e ) ; } try { throw ( new Error ( "hello" ) ) ; } catch ( e ) { if ( e . toString ( ) !== "Error: hello" ) throw new Test262Error ( '#2: Exception.toString()==="Error: hello". Actual: Exception is ' + e ) ; } var c3 = 0 ; try { throw EvalError ( 1 ) ; } catch ( e ) { if ( e . toString ( ) !== "EvalError: 1" ) throw new Test262Error ( '#3: Exception.toString()==="EvalError: 1". Actual: Exception is ' + e ) ; } try { throw RangeError ( 1 ) ; } catch ( e ) { if ( e . toString ( ) !== "RangeError: 1" ) throw new Test262Error ( '#4: Exception.toString()==="RangeError: 1". Actual: Exception is ' + e ) ; } try { throw ReferenceError ( 1 ) ; } catch ( e ) { if ( e . toString ( ) !== "ReferenceError: 1" ) throw new Test262Error ( '#5: Exception.toString()==="ReferenceError: 1". Actual: Exception is ' + e ) ; } var c6 = 0 ; try { throw TypeError ( 1 ) ; } catch ( e ) { if ( e . toString ( ) !== "TypeError: 1" ) throw new Test262Error ( '#6: Exception.toString()==="TypeError: 1". Actual: Exception is ' + e ) ; } 
