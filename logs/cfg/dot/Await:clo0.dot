digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1 {
    label = "def <BUILTIN-CLO>:Await:clo0(this: Unknown, argumentsList: Unknown, NewTarget: Unknown): Unknown"
    style = rounded
    cluster1_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1_entry_name -> cluster1_entry [arrowhead=none, color="black", style=dashed]
    cluster1_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1_entry -> node1 [color="black"]
    cluster1_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1_exit_name -> cluster1_exit [arrowhead=none, color="black", style=dashed]
    cluster1_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1_name [shape=none, label=<<font color="black">Branch[1]</font>>]
    node1_name -> node1 [arrowhead=none, color="black", style=dashed]
    node1 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node1 -> node2 [label=<<font color="black">true</font>> color="black"]
    node1 -> node3 [label=<<font color="black">false</font>> color="black"]
    node2_name [shape=none, label=<<font color="black">Block[2]</font>>]
    node2_name -> node2 [arrowhead=none, color="black", style=dashed]
    node2 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2 -> node4 [color="black"]
    node3_name [shape=none, label=<<font color="black">Block[3]</font>>]
    node3_name -> node3 [arrowhead=none, color="black", style=dashed]
    node3 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3 -> node4 [color="black"]
    node4_name [shape=none, label=<<font color="black">Block[4]</font>>]
    node4_name -> node4 [arrowhead=none, color="black", style=dashed]
    node4 [shape=box, label=<<font color="black">[0] let prevContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] push asyncContext &gt; @EXECUTION_STACK<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4 -> node5 [color="black"]
    node5_name [shape=none, label=<<font color="black">Call[5]</font>>]
    node5_name -> node5 [arrowhead=none, color="black", style=dashed]
    node5 [shape=cds, label=<<font color="black">%1 = clo&lt;NormalCompletion&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node5 -> node6 [color="black"]
    node6_name [shape=none, label=<<font color="black">Branch[6]</font>>]
    node6_name -> node6 [arrowhead=none, color="black", style=dashed]
    node6 [shape=diamond, label=<<font color="black">(= asyncContext.ReturnCont absent)</font>> color="black" fillcolor="white", style=filled]
    node6 -> node7 [label=<<font color="black">true</font>> color="black"]
    node6 -> node8 [label=<<font color="black">false</font>> color="black"]
    node7_name [shape=none, label=<<font color="black">Block[7]</font>>]
    node7_name -> node7 [arrowhead=none, color="black", style=dashed]
    node7 [shape=box, label=<<font color="black">[0] asyncContext.ReturnCont = (new [])[#0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7 -> node8 [color="black"]
    node8_name [shape=none, label=<<font color="black">Block[8]</font>>]
    node8_name -> node8 [arrowhead=none, color="black", style=dashed]
    node8 [shape=box, label=<<font color="black">[0] push cont&lt;Await:clo0:cont0&gt; &gt; asyncContext.ReturnCont<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8 -> node9 [color="black"]
    node9_name [shape=none, label=<<font color="black">Call[9]</font>>]
    node9_name -> node9 [arrowhead=none, color="black", style=dashed]
    node9 [shape=cds, label=<<font color="black">%0 = asyncContext.ResumeCont(%1)</font>> color="black" fillcolor="white", style=filled]
    node9 -> cluster1_exit [color="black"]
  }
}