digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1220 {
    label = "def <SYNTAX>:ArrayLiteral[2,1].Evaluation(this: Ast:ArrayLiteral[2,1]): Unknown"
    style = rounded
    cluster1220_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1220_entry_name -> cluster1220_entry [arrowhead=none, color="black", style=dashed]
    cluster1220_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1220_entry -> node5542 [color="black"]
    cluster1220_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1220_exit_name -> cluster1220_exit [arrowhead=none, color="black", style=dashed]
    cluster1220_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5542_name [shape=none, label=<<font color="black">Call[5542]</font>>]
    node5542_name -> node5542 [arrowhead=none, color="black", style=dashed]
    node5542 [shape=cds, label=<<font color="black">%0 = clo&lt;ArrayCreate&gt;(0)</font>> color="black" fillcolor="white", style=filled]
    node5542 -> node5543 [color="black"]
    node5543_name [shape=none, label=<<font color="black">Block[5543]</font>>]
    node5543_name -> node5543 [arrowhead=none, color="black", style=dashed]
    node5543 [shape=box, label=<<font color="black">[0] let array = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5543 -> node5544 [color="black"]
    node5544_name [shape=none, label=<<font color="black">Call[5544]</font>>]
    node5544_name -> node5544 [arrowhead=none, color="black", style=dashed]
    node5544 [shape=cds, label=<<font color="black">%1 = this[0]-&gt;ArrayAccumulation(array, 0)</font>> color="black" fillcolor="white", style=filled]
    node5544 -> node5545 [color="black"]
    node5545_name [shape=none, label=<<font color="black">Block[5545]</font>>]
    node5545_name -> node5545 [arrowhead=none, color="black", style=dashed]
    node5545 [shape=box, label=<<font color="black">[0] let nextIndex = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5545 -> node5546 [color="black"]
    node5546_name [shape=none, label=<<font color="black">Branch[5546]</font>>]
    node5546_name -> node5546 [arrowhead=none, color="black", style=dashed]
    node5546 [shape=diamond, label=<<font color="black">(! (= this[1] absent))</font>> color="black" fillcolor="white", style=filled]
    node5546 -> node5547 [label=<<font color="black">true</font>> color="black"]
    node5546 -> node5549 [label=<<font color="black">false</font>> color="black"]
    node5547_name [shape=none, label=<<font color="black">Call[5547]</font>>]
    node5547_name -> node5547 [arrowhead=none, color="black", style=dashed]
    node5547 [shape=cds, label=<<font color="black">%2 = this[1]-&gt;ArrayAccumulation(array, nextIndex)</font>> color="black" fillcolor="white", style=filled]
    node5547 -> node5548 [color="black"]
    node5549_name [shape=none, label=<<font color="black">Block[5549]</font>>]
    node5549_name -> node5549 [arrowhead=none, color="black", style=dashed]
    node5549 [shape=box, label=<<font color="black">[0] return array<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5549 -> cluster1220_exit [color="black"]
    node5548_name [shape=none, label=<<font color="black">Block[5548]</font>>]
    node5548_name -> node5548 [arrowhead=none, color="black", style=dashed]
    node5548 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5548 -> node5549 [color="black"]
  }
}