digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster172 {
    label = "def IterableToList(items: ESValue, method?: FunctionObject): Unknown["EitherANormalCompletionContainingAListOrAnAbruptCompletion"]"
    style = rounded
    cluster172_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster172_entry_name -> cluster172_entry [arrowhead=none, color="black", style=dashed]
    cluster172_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster172_entry -> node1498 [color="black"]
    cluster172_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster172_exit_name -> cluster172_exit [arrowhead=none, color="black", style=dashed]
    cluster172_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1498_name [shape=none, label=<<font color="black">Branch[1498]</font>>]
    node1498_name -> node1498 [arrowhead=none, color="black", style=dashed]
    node1498 [shape=diamond, label=<<font color="black">(! (= method absent))</font>> color="black" fillcolor="white", style=filled]
    node1498 -> node1499 [label=<<font color="black">true</font>> color="black"]
    node1498 -> node1501 [label=<<font color="black">false</font>> color="black"]
    node1499_name [shape=none, label=<<font color="black">Call[1499]</font>>]
    node1499_name -> node1499 [arrowhead=none, color="black", style=dashed]
    node1499 [shape=cds, label=<<font color="black">%0 = clo&lt;GetIterator&gt;(items, ~sync~, method)</font>> color="black" fillcolor="white", style=filled]
    node1499 -> node1500 [color="black"]
    node1501_name [shape=none, label=<<font color="black">Call[1501]</font>>]
    node1501_name -> node1501 [arrowhead=none, color="black", style=dashed]
    node1501 [shape=cds, label=<<font color="black">%1 = clo&lt;GetIterator&gt;(items, ~sync~)</font>> color="black" fillcolor="white", style=filled]
    node1501 -> node1502 [color="black"]
    node1500_name [shape=none, label=<<font color="black">Block[1500]</font>>]
    node1500_name -> node1500 [arrowhead=none, color="black", style=dashed]
    node1500 [shape=box, label=<<font color="black">[0] let iteratorRecord = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1500 -> node1503 [color="black"]
    node1502_name [shape=none, label=<<font color="black">Block[1502]</font>>]
    node1502_name -> node1502 [arrowhead=none, color="black", style=dashed]
    node1502 [shape=box, label=<<font color="black">[0] let iteratorRecord = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1502 -> node1503 [color="black"]
    node1503_name [shape=none, label=<<font color="black">Block[1503]</font>>]
    node1503_name -> node1503 [arrowhead=none, color="black", style=dashed]
    node1503 [shape=box, label=<<font color="black">[0] let values = (new [])[#81]<BR ALIGN="LEFT"/>[1] let next = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1503 -> node1504 [color="black"]
    node1504_name [shape=none, label=<<font color="black">Branch[1504]</font>>]
    node1504_name -> node1504 [arrowhead=none, color="black", style=dashed]
    node1504 [shape=diamond, label=<<font color="black">(! (= next false))</font>> color="black" fillcolor="white", style=filled]
    node1504 -> node1505 [label=<<font color="black">true</font>> color="black"]
    node1504 -> node1510 [label=<<font color="black">false</font>> color="black"]
    node1505_name [shape=none, label=<<font color="black">Call[1505]</font>>]
    node1505_name -> node1505 [arrowhead=none, color="black", style=dashed]
    node1505 [shape=cds, label=<<font color="black">%2 = clo&lt;IteratorStep&gt;(iteratorRecord)</font>> color="black" fillcolor="white", style=filled]
    node1505 -> node1506 [color="black"]
    node1510_name [shape=none, label=<<font color="black">Block[1510]</font>>]
    node1510_name -> node1510 [arrowhead=none, color="black", style=dashed]
    node1510 [shape=box, label=<<font color="black">[0] return values<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1510 -> cluster172_exit [color="black"]
    node1506_name [shape=none, label=<<font color="black">Block[1506]</font>>]
    node1506_name -> node1506 [arrowhead=none, color="black", style=dashed]
    node1506 [shape=box, label=<<font color="black">[0] next = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1506 -> node1507 [color="black"]
    node1507_name [shape=none, label=<<font color="black">Branch[1507]</font>>]
    node1507_name -> node1507 [arrowhead=none, color="black", style=dashed]
    node1507 [shape=diamond, label=<<font color="black">(! (= next false))</font>> color="black" fillcolor="white", style=filled]
    node1507 -> node1508 [label=<<font color="black">true</font>> color="black"]
    node1507 -> node1504 [label=<<font color="black">false</font>> color="black"]
    node1508_name [shape=none, label=<<font color="black">Call[1508]</font>>]
    node1508_name -> node1508 [arrowhead=none, color="black", style=dashed]
    node1508 [shape=cds, label=<<font color="black">%3 = clo&lt;IteratorValue&gt;(next)</font>> color="black" fillcolor="white", style=filled]
    node1508 -> node1509 [color="black"]
    node1509_name [shape=none, label=<<font color="black">Block[1509]</font>>]
    node1509_name -> node1509 [arrowhead=none, color="black", style=dashed]
    node1509 [shape=box, label=<<font color="black">[0] let nextValue = [? %3]<BR ALIGN="LEFT"/>[1] (yet &quot;Append _nextValue_ to the end of the List _values_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1509 -> node1504 [color="black"]
  }
}