digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1982 {
    label = "def <BUILTIN>:INTRINSICS.eval(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster1982_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1982_entry_name -> cluster1982_entry [arrowhead=none, color="black", style=dashed]
    cluster1982_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1982_entry -> node10711 [color="black"]
    cluster1982_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1982_exit_name -> cluster1982_exit [arrowhead=none, color="black", style=dashed]
    cluster1982_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10711_name [shape=none, label=<<font color="black">Branch[10711]</font>>]
    node10711_name -> node10711 [arrowhead=none, color="black", style=dashed]
    node10711 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node10711 -> node10712 [label=<<font color="black">true</font>> color="black"]
    node10711 -> node10713 [label=<<font color="black">false</font>> color="black"]
    node10712_name [shape=none, label=<<font color="black">Block[10712]</font>>]
    node10712_name -> node10712 [arrowhead=none, color="black", style=dashed]
    node10712 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10712 -> node10714 [color="black"]
    node10713_name [shape=none, label=<<font color="black">Block[10713]</font>>]
    node10713_name -> node10713 [arrowhead=none, color="black", style=dashed]
    node10713 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10713 -> node10714 [color="black"]
    node10714_name [shape=none, label=<<font color="black">Block[10714]</font>>]
    node10714_name -> node10714 [arrowhead=none, color="black", style=dashed]
    node10714 [shape=box, label=<<font color="black">[0] assert (&lt; 1 @EXECUTION_STACK.length)<BR ALIGN="LEFT"/>[1] let callerContext = @EXECUTION_STACK[1]<BR ALIGN="LEFT"/>[2] let callerRealm = callerContext.Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10714 -> node10715 [color="black"]
    node10715_name [shape=none, label=<<font color="black">Call[10715]</font>>]
    node10715_name -> node10715 [arrowhead=none, color="black", style=dashed]
    node10715 [shape=cds, label=<<font color="black">%0 = clo&lt;PerformEval&gt;(x, callerRealm, false, false)</font>> color="black" fillcolor="white", style=filled]
    node10715 -> node10716 [color="black"]
    node10716_name [shape=none, label=<<font color="black">Block[10716]</font>>]
    node10716_name -> node10716 [arrowhead=none, color="black", style=dashed]
    node10716 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10716 -> cluster1982_exit [color="black"]
  }
}