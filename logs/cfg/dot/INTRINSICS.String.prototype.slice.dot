digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2190 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.slice(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2190_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2190_entry_name -> cluster2190_entry [arrowhead=none, color="black", style=dashed]
    cluster2190_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2190_entry -> node13672 [color="black"]
    cluster2190_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2190_exit_name -> cluster2190_exit [arrowhead=none, color="black", style=dashed]
    cluster2190_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13672_name [shape=none, label=<<font color="black">Branch[13672]</font>>]
    node13672_name -> node13672 [arrowhead=none, color="black", style=dashed]
    node13672 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13672 -> node13673 [label=<<font color="black">true</font>> color="black"]
    node13672 -> node13674 [label=<<font color="black">false</font>> color="black"]
    node13673_name [shape=none, label=<<font color="black">Block[13673]</font>>]
    node13673_name -> node13673 [arrowhead=none, color="black", style=dashed]
    node13673 [shape=box, label=<<font color="black">[0] let start = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13673 -> node13675 [color="black"]
    node13674_name [shape=none, label=<<font color="black">Block[13674]</font>>]
    node13674_name -> node13674 [arrowhead=none, color="black", style=dashed]
    node13674 [shape=box, label=<<font color="black">[0] let start = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13674 -> node13675 [color="black"]
    node13675_name [shape=none, label=<<font color="black">Branch[13675]</font>>]
    node13675_name -> node13675 [arrowhead=none, color="black", style=dashed]
    node13675 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13675 -> node13676 [label=<<font color="black">true</font>> color="black"]
    node13675 -> node13677 [label=<<font color="black">false</font>> color="black"]
    node13676_name [shape=none, label=<<font color="black">Block[13676]</font>>]
    node13676_name -> node13676 [arrowhead=none, color="black", style=dashed]
    node13676 [shape=box, label=<<font color="black">[0] let end = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13676 -> node13678 [color="black"]
    node13677_name [shape=none, label=<<font color="black">Block[13677]</font>>]
    node13677_name -> node13677 [arrowhead=none, color="black", style=dashed]
    node13677 [shape=box, label=<<font color="black">[0] let end = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13677 -> node13678 [color="black"]
    node13678_name [shape=none, label=<<font color="black">Call[13678]</font>>]
    node13678_name -> node13678 [arrowhead=none, color="black", style=dashed]
    node13678 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13678 -> node13679 [color="black"]
    node13679_name [shape=none, label=<<font color="black">Block[13679]</font>>]
    node13679_name -> node13679 [arrowhead=none, color="black", style=dashed]
    node13679 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13679 -> node13680 [color="black"]
    node13680_name [shape=none, label=<<font color="black">Call[13680]</font>>]
    node13680_name -> node13680 [arrowhead=none, color="black", style=dashed]
    node13680 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13680 -> node13681 [color="black"]
    node13681_name [shape=none, label=<<font color="black">Block[13681]</font>>]
    node13681_name -> node13681 [arrowhead=none, color="black", style=dashed]
    node13681 [shape=box, label=<<font color="black">[0] let S = [? %1]<BR ALIGN="LEFT"/>[1] let len = S.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13681 -> node13682 [color="black"]
    node13682_name [shape=none, label=<<font color="black">Call[13682]</font>>]
    node13682_name -> node13682 [arrowhead=none, color="black", style=dashed]
    node13682 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(start)</font>> color="black" fillcolor="white", style=filled]
    node13682 -> node13683 [color="black"]
    node13683_name [shape=none, label=<<font color="black">Block[13683]</font>>]
    node13683_name -> node13683 [arrowhead=none, color="black", style=dashed]
    node13683 [shape=box, label=<<font color="black">[0] let intStart = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13683 -> node13684 [color="black"]
    node13684_name [shape=none, label=<<font color="black">Branch[13684]</font>>]
    node13684_name -> node13684 [arrowhead=none, color="black", style=dashed]
    node13684 [shape=diamond, label=<<font color="black">(= intStart -INF)</font>> color="black" fillcolor="white", style=filled]
    node13684 -> node13685 [label=<<font color="black">true</font>> color="black"]
    node13684 -> node13686 [label=<<font color="black">false</font>> color="black"]
    node13685_name [shape=none, label=<<font color="black">Block[13685]</font>>]
    node13685_name -> node13685 [arrowhead=none, color="black", style=dashed]
    node13685 [shape=box, label=<<font color="black">[0] let from = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13685 -> node13689 [color="black"]
    node13686_name [shape=none, label=<<font color="black">Branch[13686]</font>>]
    node13686_name -> node13686 [arrowhead=none, color="black", style=dashed]
    node13686 [shape=diamond, label=<<font color="black">(&lt; intStart 0)</font>> color="black" fillcolor="white", style=filled]
    node13686 -> node13687 [label=<<font color="black">true</font>> color="black"]
    node13686 -> node13688 [label=<<font color="black">false</font>> color="black"]
    node13689_name [shape=none, label=<<font color="black">Branch[13689]</font>>]
    node13689_name -> node13689 [arrowhead=none, color="black", style=dashed]
    node13689 [shape=diamond, label=<<font color="black">(= end undefined)</font>> color="black" fillcolor="white", style=filled]
    node13689 -> node13690 [label=<<font color="black">true</font>> color="black"]
    node13689 -> node13691 [label=<<font color="black">false</font>> color="black"]
    node13687_name [shape=none, label=<<font color="black">Block[13687]</font>>]
    node13687_name -> node13687 [arrowhead=none, color="black", style=dashed]
    node13687 [shape=box, label=<<font color="black">[0] let from = (max (+ len intStart) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13687 -> node13689 [color="black"]
    node13688_name [shape=none, label=<<font color="black">Block[13688]</font>>]
    node13688_name -> node13688 [arrowhead=none, color="black", style=dashed]
    node13688 [shape=box, label=<<font color="black">[0] let from = (min intStart len)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13688 -> node13689 [color="black"]
    node13690_name [shape=none, label=<<font color="black">Block[13690]</font>>]
    node13690_name -> node13690 [arrowhead=none, color="black", style=dashed]
    node13690 [shape=box, label=<<font color="black">[0] let intEnd = len<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13690 -> node13693 [color="black"]
    node13691_name [shape=none, label=<<font color="black">Call[13691]</font>>]
    node13691_name -> node13691 [arrowhead=none, color="black", style=dashed]
    node13691 [shape=cds, label=<<font color="black">%3 = clo&lt;ToIntegerOrInfinity&gt;(end)</font>> color="black" fillcolor="white", style=filled]
    node13691 -> node13692 [color="black"]
    node13693_name [shape=none, label=<<font color="black">Branch[13693]</font>>]
    node13693_name -> node13693 [arrowhead=none, color="black", style=dashed]
    node13693 [shape=diamond, label=<<font color="black">(= intEnd -INF)</font>> color="black" fillcolor="white", style=filled]
    node13693 -> node13694 [label=<<font color="black">true</font>> color="black"]
    node13693 -> node13695 [label=<<font color="black">false</font>> color="black"]
    node13692_name [shape=none, label=<<font color="black">Block[13692]</font>>]
    node13692_name -> node13692 [arrowhead=none, color="black", style=dashed]
    node13692 [shape=box, label=<<font color="black">[0] let intEnd = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13692 -> node13693 [color="black"]
    node13694_name [shape=none, label=<<font color="black">Block[13694]</font>>]
    node13694_name -> node13694 [arrowhead=none, color="black", style=dashed]
    node13694 [shape=box, label=<<font color="black">[0] let to = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13694 -> node13698 [color="black"]
    node13695_name [shape=none, label=<<font color="black">Branch[13695]</font>>]
    node13695_name -> node13695 [arrowhead=none, color="black", style=dashed]
    node13695 [shape=diamond, label=<<font color="black">(&lt; intEnd 0)</font>> color="black" fillcolor="white", style=filled]
    node13695 -> node13696 [label=<<font color="black">true</font>> color="black"]
    node13695 -> node13697 [label=<<font color="black">false</font>> color="black"]
    node13698_name [shape=none, label=<<font color="black">Branch[13698]</font>>]
    node13698_name -> node13698 [arrowhead=none, color="black", style=dashed]
    node13698 [shape=diamond, label=<<font color="black">(! (&lt; from to))</font>> color="black" fillcolor="white", style=filled]
    node13698 -> node13699 [label=<<font color="black">true</font>> color="black"]
    node13698 -> node13700 [label=<<font color="black">false</font>> color="black"]
    node13696_name [shape=none, label=<<font color="black">Block[13696]</font>>]
    node13696_name -> node13696 [arrowhead=none, color="black", style=dashed]
    node13696 [shape=box, label=<<font color="black">[0] let to = (max (+ len intEnd) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13696 -> node13698 [color="black"]
    node13697_name [shape=none, label=<<font color="black">Block[13697]</font>>]
    node13697_name -> node13697 [arrowhead=none, color="black", style=dashed]
    node13697 [shape=box, label=<<font color="black">[0] let to = (min intEnd len)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13697 -> node13698 [color="black"]
    node13699_name [shape=none, label=<<font color="black">Block[13699]</font>>]
    node13699_name -> node13699 [arrowhead=none, color="black", style=dashed]
    node13699 [shape=box, label=<<font color="black">[0] return &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13699 -> cluster2190_exit [color="black"]
    node13700_name [shape=none, label=<<font color="black">Block[13700]</font>>]
    node13700_name -> node13700 [arrowhead=none, color="black", style=dashed]
    node13700 [shape=box, label=<<font color="black">[0] return (substring S from to)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13700 -> cluster2190_exit [color="black"]
  }
}