digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1235 {
    label = "def <SYNTAX>:PropertyDefinition[2,0].PropertyDefinitionEvaluation(this: Ast:PropertyDefinition[2,0], object: Unknown): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1235_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1235_entry_name -> cluster1235_entry [arrowhead=none, color="black", style=dashed]
    cluster1235_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1235_entry -> node5606 [color="black"]
    cluster1235_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1235_exit_name -> cluster1235_exit [arrowhead=none, color="black", style=dashed]
    cluster1235_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5606_name [shape=none, label=<<font color="black">Call[5606]</font>>]
    node5606_name -> node5606 [arrowhead=none, color="black", style=dashed]
    node5606 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5606 -> node5607 [color="black"]
    node5607_name [shape=none, label=<<font color="black">Block[5607]</font>>]
    node5607_name -> node5607 [arrowhead=none, color="black", style=dashed]
    node5607 [shape=box, label=<<font color="black">[0] let propKey = %0<BR ALIGN="LEFT"/>[1] [? propKey]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5607 -> node5608 [color="black"]
    node5608_name [shape=none, label=<<font color="black">Branch[5608]</font>>]
    node5608_name -> node5608 [arrowhead=none, color="black", style=dashed]
    node5608 [shape=diamond, label=<<font color="black">false</font>> color="black" fillcolor="white", style=filled]
    node5608 -> node5609 [label=<<font color="black">true</font>> color="black"]
    node5608 -> node5610 [label=<<font color="black">false</font>> color="black"]
    node5609_name [shape=none, label=<<font color="black">Block[5609]</font>>]
    node5609_name -> node5609 [arrowhead=none, color="black", style=dashed]
    node5609 [shape=box, label=<<font color="black">[0] let isProtoSetter = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5609 -> node5617 [color="black"]
    node5610_name [shape=none, label=<<font color="black">Block[5610]</font>>]
    node5610_name -> node5610 [arrowhead=none, color="black", style=dashed]
    node5610 [shape=box, label=<<font color="black">[0] %1 = (= propKey &quot;__proto__&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5610 -> node5611 [color="black"]
    node5617_name [shape=none, label=<<font color="black">Call[5617]</font>>]
    node5617_name -> node5617 [arrowhead=none, color="black", style=dashed]
    node5617 [shape=cds, label=<<font color="black">%3 = clo&lt;IsAnonymousFunctionDefinition&gt;(this[1])</font>> color="black" fillcolor="white", style=filled]
    node5617 -> node5618 [color="black"]
    node5611_name [shape=none, label=<<font color="black">Branch[5611]</font>>]
    node5611_name -> node5611 [arrowhead=none, color="black", style=dashed]
    node5611 [shape=diamond, label=<<font color="black">%1</font>> color="black" fillcolor="white", style=filled]
    node5611 -> node5612 [label=<<font color="black">true</font>> color="black"]
    node5611 -> node5614 [label=<<font color="black">false</font>> color="black"]
    node5618_name [shape=none, label=<<font color="black">Branch[5618]</font>>]
    node5618_name -> node5618 [arrowhead=none, color="black", style=dashed]
    node5618 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %3 true) (= isProtoSetter false))</font>> color="black" fillcolor="white", style=filled]
    node5618 -> node5619 [label=<<font color="black">true</font>> color="black"]
    node5618 -> node5621 [label=<<font color="black">false</font>> color="black"]
    node5612_name [shape=none, label=<<font color="black">Call[5612]</font>>]
    node5612_name -> node5612 [arrowhead=none, color="black", style=dashed]
    node5612 [shape=cds, label=<<font color="black">%2 = this[0]-&gt;IsComputedPropertyKey()</font>> color="black" fillcolor="white", style=filled]
    node5612 -> node5613 [color="black"]
    node5614_name [shape=none, label=<<font color="black">Branch[5614]</font>>]
    node5614_name -> node5614 [arrowhead=none, color="black", style=dashed]
    node5614 [shape=diamond, label=<<font color="black">%1</font>> color="black" fillcolor="white", style=filled]
    node5614 -> node5615 [label=<<font color="black">true</font>> color="black"]
    node5614 -> node5616 [label=<<font color="black">false</font>> color="black"]
    node5619_name [shape=none, label=<<font color="black">Call[5619]</font>>]
    node5619_name -> node5619 [arrowhead=none, color="black", style=dashed]
    node5619 [shape=cds, label=<<font color="black">%4 = this[1]-&gt;NamedEvaluation(propKey)</font>> color="black" fillcolor="white", style=filled]
    node5619 -> node5620 [color="black"]
    node5621_name [shape=none, label=<<font color="black">Call[5621]</font>>]
    node5621_name -> node5621 [arrowhead=none, color="black", style=dashed]
    node5621 [shape=cds, label=<<font color="black">%5 = this[1]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5621 -> node5622 [color="black"]
    node5613_name [shape=none, label=<<font color="black">Block[5613]</font>>]
    node5613_name -> node5613 [arrowhead=none, color="black", style=dashed]
    node5613 [shape=box, label=<<font color="black">[0] %1 = (= %2 false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5613 -> node5614 [color="black"]
    node5615_name [shape=none, label=<<font color="black">Block[5615]</font>>]
    node5615_name -> node5615 [arrowhead=none, color="black", style=dashed]
    node5615 [shape=box, label=<<font color="black">[0] let isProtoSetter = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5615 -> node5617 [color="black"]
    node5616_name [shape=none, label=<<font color="black">Block[5616]</font>>]
    node5616_name -> node5616 [arrowhead=none, color="black", style=dashed]
    node5616 [shape=box, label=<<font color="black">[0] let isProtoSetter = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5616 -> node5617 [color="black"]
    node5620_name [shape=none, label=<<font color="black">Block[5620]</font>>]
    node5620_name -> node5620 [arrowhead=none, color="black", style=dashed]
    node5620 [shape=box, label=<<font color="black">[0] let propValue = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5620 -> node5625 [color="black"]
    node5622_name [shape=none, label=<<font color="black">Block[5622]</font>>]
    node5622_name -> node5622 [arrowhead=none, color="black", style=dashed]
    node5622 [shape=box, label=<<font color="black">[0] let exprValueRef = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5622 -> node5623 [color="black"]
    node5625_name [shape=none, label=<<font color="black">Branch[5625]</font>>]
    node5625_name -> node5625 [arrowhead=none, color="black", style=dashed]
    node5625 [shape=diamond, label=<<font color="black">(= isProtoSetter true)</font>> color="black" fillcolor="white", style=filled]
    node5625 -> node5626 [label=<<font color="black">true</font>> color="black"]
    node5625 -> node5630 [label=<<font color="black">false</font>> color="black"]
    node5623_name [shape=none, label=<<font color="black">Call[5623]</font>>]
    node5623_name -> node5623 [arrowhead=none, color="black", style=dashed]
    node5623 [shape=cds, label=<<font color="black">%6 = clo&lt;GetValue&gt;(exprValueRef)</font>> color="black" fillcolor="white", style=filled]
    node5623 -> node5624 [color="black"]
    node5626_name [shape=none, label=<<font color="black">Branch[5626]</font>>]
    node5626_name -> node5626 [arrowhead=none, color="black", style=dashed]
    node5626 [shape=diamond, label=<<font color="black">(|| (= (typeof propValue) @Object) (= (typeof propValue) @Null))</font>> color="black" fillcolor="white", style=filled]
    node5626 -> node5627 [label=<<font color="black">true</font>> color="black"]
    node5626 -> node5629 [label=<<font color="black">false</font>> color="black"]
    node5630_name [shape=none, label=<<font color="black">Block[5630]</font>>]
    node5630_name -> node5630 [arrowhead=none, color="black", style=dashed]
    node5630 [shape=box, label=<<font color="black">[0] assert (yet &quot;_object_ is an ordinary, extensible object with no non-configurable properties.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5630 -> node5631 [color="black"]
    node5624_name [shape=none, label=<<font color="black">Block[5624]</font>>]
    node5624_name -> node5624 [arrowhead=none, color="black", style=dashed]
    node5624 [shape=box, label=<<font color="black">[0] let propValue = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5624 -> node5625 [color="black"]
    node5627_name [shape=none, label=<<font color="black">Call[5627]</font>>]
    node5627_name -> node5627 [arrowhead=none, color="black", style=dashed]
    node5627 [shape=cds, label=<<font color="black">%7 = object-&gt;SetPrototypeOf(propValue)</font>> color="black" fillcolor="white", style=filled]
    node5627 -> node5628 [color="black"]
    node5629_name [shape=none, label=<<font color="black">Block[5629]</font>>]
    node5629_name -> node5629 [arrowhead=none, color="black", style=dashed]
    node5629 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5629 -> cluster1235_exit [color="black"]
    node5631_name [shape=none, label=<<font color="black">Call[5631]</font>>]
    node5631_name -> node5631 [arrowhead=none, color="black", style=dashed]
    node5631 [shape=cds, label=<<font color="black">%8 = clo&lt;CreateDataPropertyOrThrow&gt;(object, propKey, propValue)</font>> color="black" fillcolor="white", style=filled]
    node5631 -> node5632 [color="black"]
    node5628_name [shape=none, label=<<font color="black">Block[5628]</font>>]
    node5628_name -> node5628 [arrowhead=none, color="black", style=dashed]
    node5628 [shape=box, label=<<font color="black">[0] [! %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5628 -> node5629 [color="black"]
    node5632_name [shape=none, label=<<font color="black">Block[5632]</font>>]
    node5632_name -> node5632 [arrowhead=none, color="black", style=dashed]
    node5632 [shape=box, label=<<font color="black">[0] [! %8]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5632 -> cluster1235_exit [color="black"]
  }
}