digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1578 {
    label = "def <SYNTAX>:ArrowFunction[0,0].InstantiateArrowFunctionExpression(this: Ast:ArrowFunction[0,0], name?: Unknown): FunctionObject"
    style = rounded
    cluster1578_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1578_entry_name -> cluster1578_entry [arrowhead=none, color="black", style=dashed]
    cluster1578_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1578_entry -> node8459 [color="black"]
    cluster1578_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1578_exit_name -> cluster1578_exit [arrowhead=none, color="black", style=dashed]
    cluster1578_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8459_name [shape=none, label=<<font color="black">Branch[8459]</font>>]
    node8459_name -> node8459 [arrowhead=none, color="black", style=dashed]
    node8459 [shape=diamond, label=<<font color="black">(= name absent)</font>> color="black" fillcolor="white", style=filled]
    node8459 -> node8460 [label=<<font color="black">true</font>> color="black"]
    node8459 -> node8461 [label=<<font color="black">false</font>> color="black"]
    node8460_name [shape=none, label=<<font color="black">Block[8460]</font>>]
    node8460_name -> node8460 [arrowhead=none, color="black", style=dashed]
    node8460 [shape=box, label=<<font color="black">[0] name = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8460 -> node8461 [color="black"]
    node8461_name [shape=none, label=<<font color="black">Block[8461]</font>>]
    node8461_name -> node8461 [arrowhead=none, color="black", style=dashed]
    node8461 [shape=box, label=<<font color="black">[0] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[1] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[2] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8461 -> node8462 [color="black"]
    node8462_name [shape=none, label=<<font color="black">Call[8462]</font>>]
    node8462_name -> node8462 [arrowhead=none, color="black", style=dashed]
    node8462 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Function.prototype%&quot;], sourceText, this[0], this[1], ~lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8462 -> node8463 [color="black"]
    node8463_name [shape=none, label=<<font color="black">Block[8463]</font>>]
    node8463_name -> node8463 [arrowhead=none, color="black", style=dashed]
    node8463 [shape=box, label=<<font color="black">[0] let closure = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8463 -> node8464 [color="black"]
    node8464_name [shape=none, label=<<font color="black">Call[8464]</font>>]
    node8464_name -> node8464 [arrowhead=none, color="black", style=dashed]
    node8464 [shape=cds, label=<<font color="black">%1 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node8464 -> node8465 [color="black"]
    node8465_name [shape=none, label=<<font color="black">Block[8465]</font>>]
    node8465_name -> node8465 [arrowhead=none, color="black", style=dashed]
    node8465 [shape=box, label=<<font color="black">[0] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8465 -> cluster1578_exit [color="black"]
  }
}