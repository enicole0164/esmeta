digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2633 {
    label = "def AsyncGeneratorUnwrapYieldResumption(resumptionValue: Normal): Normal[ESValue] | Abrupt"
    style = rounded
    cluster2633_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2633_entry_name -> cluster2633_entry [arrowhead=none, color="black", style=dashed]
    cluster2633_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2633_entry -> node19530 [color="black"]
    cluster2633_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2633_exit_name -> cluster2633_exit [arrowhead=none, color="black", style=dashed]
    cluster2633_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19530_name [shape=none, label=<<font color="black">Branch[19530]</font>>]
    node19530_name -> node19530 [arrowhead=none, color="black", style=dashed]
    node19530 [shape=diamond, label=<<font color="black">(! (= resumptionValue.Type ~return~))</font>> color="black" fillcolor="white", style=filled]
    node19530 -> node19531 [label=<<font color="black">true</font>> color="black"]
    node19530 -> node19532 [label=<<font color="black">false</font>> color="black"]
    node19531_name [shape=none, label=<<font color="black">Block[19531]</font>>]
    node19531_name -> node19531 [arrowhead=none, color="black", style=dashed]
    node19531 [shape=box, label=<<font color="black">[0] return [? resumptionValue]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19531 -> cluster2633_exit [color="black"]
    node19532_name [shape=none, label=<<font color="black">Call[19532]</font>>]
    node19532_name -> node19532 [arrowhead=none, color="black", style=dashed]
    node19532 [shape=cds, label=<<font color="black">%0 = clo&lt;Await&gt;(resumptionValue.Value)</font>> color="black" fillcolor="white", style=filled]
    node19532 -> node19533 [color="black"]
    node19533_name [shape=none, label=<<font color="black">Call[19533]</font>>]
    node19533_name -> node19533 [arrowhead=none, color="black", style=dashed]
    node19533 [shape=cds, label=<<font color="black">%1 = clo&lt;Completion&gt;(%0)</font>> color="black" fillcolor="white", style=filled]
    node19533 -> node19534 [color="black"]
    node19534_name [shape=none, label=<<font color="black">Block[19534]</font>>]
    node19534_name -> node19534 [arrowhead=none, color="black", style=dashed]
    node19534 [shape=box, label=<<font color="black">[0] let awaited = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19534 -> node19535 [color="black"]
    node19535_name [shape=none, label=<<font color="black">Branch[19535]</font>>]
    node19535_name -> node19535 [arrowhead=none, color="black", style=dashed]
    node19535 [shape=diamond, label=<<font color="black">(= awaited.Type ~throw~)</font>> color="black" fillcolor="white", style=filled]
    node19535 -> node19536 [label=<<font color="black">true</font>> color="black"]
    node19535 -> node19537 [label=<<font color="black">false</font>> color="black"]
    node19536_name [shape=none, label=<<font color="black">Block[19536]</font>>]
    node19536_name -> node19536 [arrowhead=none, color="black", style=dashed]
    node19536 [shape=box, label=<<font color="black">[0] return [? awaited]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19536 -> cluster2633_exit [color="black"]
    node19537_name [shape=none, label=<<font color="black">Block[19537]</font>>]
    node19537_name -> node19537 [arrowhead=none, color="black", style=dashed]
    node19537 [shape=box, label=<<font color="black">[0] assert (= awaited.Type ~normal~)<BR ALIGN="LEFT"/>[1] return comp[~return~/~empty~](awaited.Value)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19537 -> cluster2633_exit [color="black"]
  }
}