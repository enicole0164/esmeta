digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1479 {
    label = "def CaseClauseIsSelected(C: Ast[CaseClause], input: ESValue): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1479_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1479_entry_name -> cluster1479_entry [arrowhead=none, color="black", style=dashed]
    cluster1479_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1479_entry -> node8130 [color="black"]
    cluster1479_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1479_exit_name -> cluster1479_exit [arrowhead=none, color="black", style=dashed]
    cluster1479_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8130_name [shape=none, label=<<font color="black">Block[8130]</font>>]
    node8130_name -> node8130 [arrowhead=none, color="black", style=dashed]
    node8130 [shape=box, label=<<font color="black">[0] assert (yet &quot;_C_ is an instance of the production &lt;emu-grammar&gt;CaseClause : `case` Expression `:` StatementList?&lt;/emu-grammar&gt;.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8130 -> node8131 [color="black"]
    node8131_name [shape=none, label=<<font color="black">Call[8131]</font>>]
    node8131_name -> node8131 [arrowhead=none, color="black", style=dashed]
    node8131 [shape=cds, label=<<font color="black">%0 = C.Expression-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node8131 -> node8132 [color="black"]
    node8132_name [shape=none, label=<<font color="black">Block[8132]</font>>]
    node8132_name -> node8132 [arrowhead=none, color="black", style=dashed]
    node8132 [shape=box, label=<<font color="black">[0] let exprRef = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8132 -> node8133 [color="black"]
    node8133_name [shape=none, label=<<font color="black">Call[8133]</font>>]
    node8133_name -> node8133 [arrowhead=none, color="black", style=dashed]
    node8133 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(exprRef)</font>> color="black" fillcolor="white", style=filled]
    node8133 -> node8134 [color="black"]
    node8134_name [shape=none, label=<<font color="black">Block[8134]</font>>]
    node8134_name -> node8134 [arrowhead=none, color="black", style=dashed]
    node8134 [shape=box, label=<<font color="black">[0] let clauseSelector = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8134 -> node8135 [color="black"]
    node8135_name [shape=none, label=<<font color="black">Call[8135]</font>>]
    node8135_name -> node8135 [arrowhead=none, color="black", style=dashed]
    node8135 [shape=cds, label=<<font color="black">%2 = clo&lt;IsStrictlyEqual&gt;(input, clauseSelector)</font>> color="black" fillcolor="white", style=filled]
    node8135 -> node8136 [color="black"]
    node8136_name [shape=none, label=<<font color="black">Block[8136]</font>>]
    node8136_name -> node8136 [arrowhead=none, color="black", style=dashed]
    node8136 [shape=box, label=<<font color="black">[0] return %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8136 -> cluster1479_exit [color="black"]
  }
}