digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2412 {
    label = "def SetTypedArrayFromArrayLike(target: Unknown["TypedArray"], targetOffset: Unknown["NonnegativeIntegerOr+âˆž"], source: Unknown["ECMAScriptLanguageValue,ButNotATypedArray"]): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2412_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2412_entry_name -> cluster2412_entry [arrowhead=none, color="black", style=dashed]
    cluster2412_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2412_entry -> node16499 [color="black"]
    cluster2412_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2412_exit_name -> cluster2412_exit [arrowhead=none, color="black", style=dashed]
    cluster2412_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16499_name [shape=none, label=<<font color="black">Block[16499]</font>>]
    node16499_name -> node16499 [arrowhead=none, color="black", style=dashed]
    node16499 [shape=box, label=<<font color="black">[0] let targetBuffer = target.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16499 -> node16500 [color="black"]
    node16500_name [shape=none, label=<<font color="black">Call[16500]</font>>]
    node16500_name -> node16500 [arrowhead=none, color="black", style=dashed]
    node16500 [shape=cds, label=<<font color="black">%0 = clo&lt;IsDetachedBuffer&gt;(targetBuffer)</font>> color="black" fillcolor="white", style=filled]
    node16500 -> node16501 [color="black"]
    node16501_name [shape=none, label=<<font color="black">Branch[16501]</font>>]
    node16501_name -> node16501 [arrowhead=none, color="black", style=dashed]
    node16501 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node16501 -> node16502 [label=<<font color="black">true</font>> color="black"]
    node16501 -> node16503 [label=<<font color="black">false</font>> color="black"]
    node16502_name [shape=none, label=<<font color="black">Block[16502]</font>>]
    node16502_name -> node16502 [arrowhead=none, color="black", style=dashed]
    node16502 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1090])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16502 -> cluster2412_exit [color="black"]
    node16503_name [shape=none, label=<<font color="black">Block[16503]</font>>]
    node16503_name -> node16503 [arrowhead=none, color="black", style=dashed]
    node16503 [shape=box, label=<<font color="black">[0] let targetLength = target.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16503 -> node16504 [color="black"]
    node16504_name [shape=none, label=<<font color="black">Call[16504]</font>>]
    node16504_name -> node16504 [arrowhead=none, color="black", style=dashed]
    node16504 [shape=cds, label=<<font color="black">%1 = clo&lt;TypedArrayElementSize&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node16504 -> node16505 [color="black"]
    node16505_name [shape=none, label=<<font color="black">Block[16505]</font>>]
    node16505_name -> node16505 [arrowhead=none, color="black", style=dashed]
    node16505 [shape=box, label=<<font color="black">[0] let targetElementSize = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16505 -> node16506 [color="black"]
    node16506_name [shape=none, label=<<font color="black">Call[16506]</font>>]
    node16506_name -> node16506 [arrowhead=none, color="black", style=dashed]
    node16506 [shape=cds, label=<<font color="black">%2 = clo&lt;TypedArrayElementType&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node16506 -> node16507 [color="black"]
    node16507_name [shape=none, label=<<font color="black">Block[16507]</font>>]
    node16507_name -> node16507 [arrowhead=none, color="black", style=dashed]
    node16507 [shape=box, label=<<font color="black">[0] let targetType = %2<BR ALIGN="LEFT"/>[1] let targetByteOffset = target.ByteOffset<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16507 -> node16508 [color="black"]
    node16508_name [shape=none, label=<<font color="black">Call[16508]</font>>]
    node16508_name -> node16508 [arrowhead=none, color="black", style=dashed]
    node16508 [shape=cds, label=<<font color="black">%3 = clo&lt;ToObject&gt;(source)</font>> color="black" fillcolor="white", style=filled]
    node16508 -> node16509 [color="black"]
    node16509_name [shape=none, label=<<font color="black">Block[16509]</font>>]
    node16509_name -> node16509 [arrowhead=none, color="black", style=dashed]
    node16509 [shape=box, label=<<font color="black">[0] let src = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16509 -> node16510 [color="black"]
    node16510_name [shape=none, label=<<font color="black">Call[16510]</font>>]
    node16510_name -> node16510 [arrowhead=none, color="black", style=dashed]
    node16510 [shape=cds, label=<<font color="black">%4 = clo&lt;LengthOfArrayLike&gt;(src)</font>> color="black" fillcolor="white", style=filled]
    node16510 -> node16511 [color="black"]
    node16511_name [shape=none, label=<<font color="black">Block[16511]</font>>]
    node16511_name -> node16511 [arrowhead=none, color="black", style=dashed]
    node16511 [shape=box, label=<<font color="black">[0] let srcLength = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16511 -> node16512 [color="black"]
    node16512_name [shape=none, label=<<font color="black">Branch[16512]</font>>]
    node16512_name -> node16512 [arrowhead=none, color="black", style=dashed]
    node16512 [shape=diamond, label=<<font color="black">(= targetOffset +INF)</font>> color="black" fillcolor="white", style=filled]
    node16512 -> node16513 [label=<<font color="black">true</font>> color="black"]
    node16512 -> node16514 [label=<<font color="black">false</font>> color="black"]
    node16513_name [shape=none, label=<<font color="black">Block[16513]</font>>]
    node16513_name -> node16513 [arrowhead=none, color="black", style=dashed]
    node16513 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1091])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16513 -> cluster2412_exit [color="black"]
    node16514_name [shape=none, label=<<font color="black">Branch[16514]</font>>]
    node16514_name -> node16514 [arrowhead=none, color="black", style=dashed]
    node16514 [shape=diamond, label=<<font color="black">(&lt; targetLength (+ srcLength targetOffset))</font>> color="black" fillcolor="white", style=filled]
    node16514 -> node16515 [label=<<font color="black">true</font>> color="black"]
    node16514 -> node16516 [label=<<font color="black">false</font>> color="black"]
    node16515_name [shape=none, label=<<font color="black">Block[16515]</font>>]
    node16515_name -> node16515 [arrowhead=none, color="black", style=dashed]
    node16515 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1092])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16515 -> cluster2412_exit [color="black"]
    node16516_name [shape=none, label=<<font color="black">Block[16516]</font>>]
    node16516_name -> node16516 [arrowhead=none, color="black", style=dashed]
    node16516 [shape=box, label=<<font color="black">[0] let targetByteIndex = (+ (* targetOffset targetElementSize) targetByteOffset)<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/>[2] let limit = (+ targetByteIndex (* targetElementSize srcLength))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16516 -> node16517 [color="black"]
    node16517_name [shape=none, label=<<font color="black">Branch[16517]</font>>]
    node16517_name -> node16517 [arrowhead=none, color="black", style=dashed]
    node16517 [shape=diamond, label=<<font color="black">(&lt; targetByteIndex limit)</font>> color="black" fillcolor="white", style=filled]
    node16517 -> node16518 [label=<<font color="black">true</font>> color="black"]
    node16517 -> node16532 [label=<<font color="black">false</font>> color="black"]
    node16518_name [shape=none, label=<<font color="black">Call[16518]</font>>]
    node16518_name -> node16518 [arrowhead=none, color="black", style=dashed]
    node16518 [shape=cds, label=<<font color="black">%5 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16518 -> node16519 [color="black"]
    node16532_name [shape=none, label=<<font color="black">Block[16532]</font>>]
    node16532_name -> node16532 [arrowhead=none, color="black", style=dashed]
    node16532 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16532 -> cluster2412_exit [color="black"]
    node16519_name [shape=none, label=<<font color="black">Block[16519]</font>>]
    node16519_name -> node16519 [arrowhead=none, color="black", style=dashed]
    node16519 [shape=box, label=<<font color="black">[0] let Pk = [! %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16519 -> node16520 [color="black"]
    node16520_name [shape=none, label=<<font color="black">Call[16520]</font>>]
    node16520_name -> node16520 [arrowhead=none, color="black", style=dashed]
    node16520 [shape=cds, label=<<font color="black">%6 = clo&lt;Get&gt;(src, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16520 -> node16521 [color="black"]
    node16521_name [shape=none, label=<<font color="black">Block[16521]</font>>]
    node16521_name -> node16521 [arrowhead=none, color="black", style=dashed]
    node16521 [shape=box, label=<<font color="black">[0] let value = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16521 -> node16522 [color="black"]
    node16522_name [shape=none, label=<<font color="black">Branch[16522]</font>>]
    node16522_name -> node16522 [arrowhead=none, color="black", style=dashed]
    node16522 [shape=diamond, label=<<font color="black">(= target.ContentType ~BigInt~)</font>> color="black" fillcolor="white", style=filled]
    node16522 -> node16523 [label=<<font color="black">true</font>> color="black"]
    node16522 -> node16525 [label=<<font color="black">false</font>> color="black"]
    node16523_name [shape=none, label=<<font color="black">Call[16523]</font>>]
    node16523_name -> node16523 [arrowhead=none, color="black", style=dashed]
    node16523 [shape=cds, label=<<font color="black">%7 = clo&lt;ToBigInt&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node16523 -> node16524 [color="black"]
    node16525_name [shape=none, label=<<font color="black">Call[16525]</font>>]
    node16525_name -> node16525 [arrowhead=none, color="black", style=dashed]
    node16525 [shape=cds, label=<<font color="black">%8 = clo&lt;ToNumber&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node16525 -> node16526 [color="black"]
    node16524_name [shape=none, label=<<font color="black">Block[16524]</font>>]
    node16524_name -> node16524 [arrowhead=none, color="black", style=dashed]
    node16524 [shape=box, label=<<font color="black">[0] value = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16524 -> node16527 [color="black"]
    node16526_name [shape=none, label=<<font color="black">Block[16526]</font>>]
    node16526_name -> node16526 [arrowhead=none, color="black", style=dashed]
    node16526 [shape=box, label=<<font color="black">[0] value = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16526 -> node16527 [color="black"]
    node16527_name [shape=none, label=<<font color="black">Call[16527]</font>>]
    node16527_name -> node16527 [arrowhead=none, color="black", style=dashed]
    node16527 [shape=cds, label=<<font color="black">%9 = clo&lt;IsDetachedBuffer&gt;(targetBuffer)</font>> color="black" fillcolor="white", style=filled]
    node16527 -> node16528 [color="black"]
    node16528_name [shape=none, label=<<font color="black">Branch[16528]</font>>]
    node16528_name -> node16528 [arrowhead=none, color="black", style=dashed]
    node16528 [shape=diamond, label=<<font color="black">(= %9 true)</font>> color="black" fillcolor="white", style=filled]
    node16528 -> node16529 [label=<<font color="black">true</font>> color="black"]
    node16528 -> node16530 [label=<<font color="black">false</font>> color="black"]
    node16529_name [shape=none, label=<<font color="black">Block[16529]</font>>]
    node16529_name -> node16529 [arrowhead=none, color="black", style=dashed]
    node16529 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1093])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16529 -> cluster2412_exit [color="black"]
    node16530_name [shape=none, label=<<font color="black">Call[16530]</font>>]
    node16530_name -> node16530 [arrowhead=none, color="black", style=dashed]
    node16530 [shape=cds, label=<<font color="black">%10 = clo&lt;SetValueInBuffer&gt;(targetBuffer, targetByteIndex, targetType, value, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node16530 -> node16531 [color="black"]
    node16531_name [shape=none, label=<<font color="black">Block[16531]</font>>]
    node16531_name -> node16531 [arrowhead=none, color="black", style=dashed]
    node16531 [shape=box, label=<<font color="black">[0] k = (+ k 1)<BR ALIGN="LEFT"/>[1] targetByteIndex = (+ targetByteIndex targetElementSize)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16531 -> node16517 [color="black"]
  }
}