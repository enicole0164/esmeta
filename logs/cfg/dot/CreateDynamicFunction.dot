digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2034 {
    label = "def CreateDynamicFunction(constructor: Unknown["Constructor"], newTarget: Unknown["Constructor"], kind: Const[~asyncGenerator~, ~async~, ~generator~, ~normal~], args: List[ESValue]): Normal[FunctionObject] | Abrupt"
    style = rounded
    cluster2034_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2034_entry_name -> cluster2034_entry [arrowhead=none, color="black", style=dashed]
    cluster2034_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2034_entry -> node11496 [color="black"]
    cluster2034_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2034_exit_name -> cluster2034_exit [arrowhead=none, color="black", style=dashed]
    cluster2034_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11496_name [shape=none, label=<<font color="black">Block[11496]</font>>]
    node11496_name -> node11496 [arrowhead=none, color="black", style=dashed]
    node11496 [shape=box, label=<<font color="black">[0] assert (&lt; 1 @EXECUTION_STACK.length)<BR ALIGN="LEFT"/>[1] let callerContext = @EXECUTION_STACK[1]<BR ALIGN="LEFT"/>[2] let callerRealm = callerContext.Realm<BR ALIGN="LEFT"/>[3] let calleeRealm = @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11496 -> node11497 [color="black"]
    node11497_name [shape=none, label=<<font color="black">Call[11497]</font>>]
    node11497_name -> node11497 [arrowhead=none, color="black", style=dashed]
    node11497 [shape=cds, label=<<font color="black">%0 = clo&lt;HostEnsureCanCompileStrings&gt;(callerRealm, calleeRealm)</font>> color="black" fillcolor="white", style=filled]
    node11497 -> node11498 [color="black"]
    node11498_name [shape=none, label=<<font color="black">Block[11498]</font>>]
    node11498_name -> node11498 [arrowhead=none, color="black", style=dashed]
    node11498 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11498 -> node11499 [color="black"]
    node11499_name [shape=none, label=<<font color="black">Branch[11499]</font>>]
    node11499_name -> node11499 [arrowhead=none, color="black", style=dashed]
    node11499 [shape=diamond, label=<<font color="black">(= newTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node11499 -> node11500 [label=<<font color="black">true</font>> color="black"]
    node11499 -> node11501 [label=<<font color="black">false</font>> color="black"]
    node11500_name [shape=none, label=<<font color="black">Block[11500]</font>>]
    node11500_name -> node11500 [arrowhead=none, color="black", style=dashed]
    node11500 [shape=box, label=<<font color="black">[0] newTarget = constructor<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11500 -> node11501 [color="black"]
    node11501_name [shape=none, label=<<font color="black">Branch[11501]</font>>]
    node11501_name -> node11501 [arrowhead=none, color="black", style=dashed]
    node11501 [shape=diamond, label=<<font color="black">(= kind ~normal~)</font>> color="black" fillcolor="white", style=filled]
    node11501 -> node11502 [label=<<font color="black">true</font>> color="black"]
    node11501 -> node11503 [label=<<font color="black">false</font>> color="black"]
    node11502_name [shape=none, label=<<font color="black">Block[11502]</font>>]
    node11502_name -> node11502 [arrowhead=none, color="black", style=dashed]
    node11502 [shape=box, label=<<font color="black">[0] let prefix = &quot;function&quot;<BR ALIGN="LEFT"/>[1] let exprSym = (nt |FunctionExpression|[])<BR ALIGN="LEFT"/>[2] let bodySym = (nt |FunctionBody|[FF])<BR ALIGN="LEFT"/>[3] let parameterSym = (nt |FormalParameters|[FF])<BR ALIGN="LEFT"/>[4] let fallbackProto = &quot;%Function.prototype%&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11502 -> node11508 [color="black"]
    node11503_name [shape=none, label=<<font color="black">Branch[11503]</font>>]
    node11503_name -> node11503 [arrowhead=none, color="black", style=dashed]
    node11503 [shape=diamond, label=<<font color="black">(= kind ~generator~)</font>> color="black" fillcolor="white", style=filled]
    node11503 -> node11504 [label=<<font color="black">true</font>> color="black"]
    node11503 -> node11505 [label=<<font color="black">false</font>> color="black"]
    node11508_name [shape=none, label=<<font color="black">Block[11508]</font>>]
    node11508_name -> node11508 [arrowhead=none, color="black", style=dashed]
    node11508 [shape=box, label=<<font color="black">[0] let argCount = args.length<BR ALIGN="LEFT"/>[1] let P = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11508 -> node11509 [color="black"]
    node11504_name [shape=none, label=<<font color="black">Block[11504]</font>>]
    node11504_name -> node11504 [arrowhead=none, color="black", style=dashed]
    node11504 [shape=box, label=<<font color="black">[0] let prefix = &quot;function*&quot;<BR ALIGN="LEFT"/>[1] let exprSym = (nt |GeneratorExpression|[])<BR ALIGN="LEFT"/>[2] let bodySym = (nt |GeneratorBody|[])<BR ALIGN="LEFT"/>[3] let parameterSym = (nt |FormalParameters|[TF])<BR ALIGN="LEFT"/>[4] let fallbackProto = &quot;%GeneratorFunction.prototype%&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11504 -> node11508 [color="black"]
    node11505_name [shape=none, label=<<font color="black">Branch[11505]</font>>]
    node11505_name -> node11505 [arrowhead=none, color="black", style=dashed]
    node11505 [shape=diamond, label=<<font color="black">(= kind ~async~)</font>> color="black" fillcolor="white", style=filled]
    node11505 -> node11506 [label=<<font color="black">true</font>> color="black"]
    node11505 -> node11507 [label=<<font color="black">false</font>> color="black"]
    node11509_name [shape=none, label=<<font color="black">Branch[11509]</font>>]
    node11509_name -> node11509 [arrowhead=none, color="black", style=dashed]
    node11509 [shape=diamond, label=<<font color="black">(== argCount 0)</font>> color="black" fillcolor="white", style=filled]
    node11509 -> node11510 [label=<<font color="black">true</font>> color="black"]
    node11509 -> node11511 [label=<<font color="black">false</font>> color="black"]
    node11506_name [shape=none, label=<<font color="black">Block[11506]</font>>]
    node11506_name -> node11506 [arrowhead=none, color="black", style=dashed]
    node11506 [shape=box, label=<<font color="black">[0] let prefix = &quot;async function&quot;<BR ALIGN="LEFT"/>[1] let exprSym = (nt |AsyncFunctionExpression|[])<BR ALIGN="LEFT"/>[2] let bodySym = (nt |AsyncFunctionBody|[])<BR ALIGN="LEFT"/>[3] let parameterSym = (nt |FormalParameters|[FT])<BR ALIGN="LEFT"/>[4] let fallbackProto = &quot;%AsyncFunction.prototype%&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11506 -> node11508 [color="black"]
    node11507_name [shape=none, label=<<font color="black">Block[11507]</font>>]
    node11507_name -> node11507 [arrowhead=none, color="black", style=dashed]
    node11507 [shape=box, label=<<font color="black">[0] assert (= kind ~asyncGenerator~)<BR ALIGN="LEFT"/>[1] let prefix = &quot;async function*&quot;<BR ALIGN="LEFT"/>[2] let exprSym = (nt |AsyncGeneratorExpression|[])<BR ALIGN="LEFT"/>[3] let bodySym = (nt |AsyncGeneratorBody|[])<BR ALIGN="LEFT"/>[4] let parameterSym = (nt |FormalParameters|[TT])<BR ALIGN="LEFT"/>[5] let fallbackProto = &quot;%AsyncGeneratorFunction.prototype%&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11507 -> node11508 [color="black"]
    node11510_name [shape=none, label=<<font color="black">Block[11510]</font>>]
    node11510_name -> node11510 [arrowhead=none, color="black", style=dashed]
    node11510 [shape=box, label=<<font color="black">[0] let bodyArg = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11510 -> node11521 [color="black"]
    node11511_name [shape=none, label=<<font color="black">Branch[11511]</font>>]
    node11511_name -> node11511 [arrowhead=none, color="black", style=dashed]
    node11511 [shape=diamond, label=<<font color="black">(== argCount 1)</font>> color="black" fillcolor="white", style=filled]
    node11511 -> node11512 [label=<<font color="black">true</font>> color="black"]
    node11511 -> node11513 [label=<<font color="black">false</font>> color="black"]
    node11521_name [shape=none, label=<<font color="black">Call[11521]</font>>]
    node11521_name -> node11521 [arrowhead=none, color="black", style=dashed]
    node11521 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(bodyArg)</font>> color="black" fillcolor="white", style=filled]
    node11521 -> node11522 [color="black"]
    node11512_name [shape=none, label=<<font color="black">Block[11512]</font>>]
    node11512_name -> node11512 [arrowhead=none, color="black", style=dashed]
    node11512 [shape=box, label=<<font color="black">[0] let bodyArg = args[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11512 -> node11521 [color="black"]
    node11513_name [shape=none, label=<<font color="black">Block[11513]</font>>]
    node11513_name -> node11513 [arrowhead=none, color="black", style=dashed]
    node11513 [shape=box, label=<<font color="black">[0] assert (&lt; 1 argCount)<BR ALIGN="LEFT"/>[1] let firstArg = args[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11513 -> node11514 [color="black"]
    node11522_name [shape=none, label=<<font color="black">Block[11522]</font>>]
    node11522_name -> node11522 [arrowhead=none, color="black", style=dashed]
    node11522 [shape=box, label=<<font color="black">[0] let bodyString = (concat 10cu [? %3] 10cu)<BR ALIGN="LEFT"/>[1] let sourceString = (concat prefix &quot; anonymous(&quot; P 10cu &quot;) {&quot; bodyString &quot;}&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11522 -> node11523 [color="black"]
    node11514_name [shape=none, label=<<font color="black">Call[11514]</font>>]
    node11514_name -> node11514 [arrowhead=none, color="black", style=dashed]
    node11514 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(firstArg)</font>> color="black" fillcolor="white", style=filled]
    node11514 -> node11515 [color="black"]
    node11523_name [shape=none, label=<<font color="black">Call[11523]</font>>]
    node11523_name -> node11523 [arrowhead=none, color="black", style=dashed]
    node11523 [shape=cds, label=<<font color="black">%4 = clo&lt;StringToCodePoints&gt;(sourceString)</font>> color="black" fillcolor="white", style=filled]
    node11523 -> node11524 [color="black"]
    node11515_name [shape=none, label=<<font color="black">Block[11515]</font>>]
    node11515_name -> node11515 [arrowhead=none, color="black", style=dashed]
    node11515 [shape=box, label=<<font color="black">[0] P = [? %1]<BR ALIGN="LEFT"/>[1] let k = 1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11515 -> node11516 [color="black"]
    node11524_name [shape=none, label=<<font color="black">Block[11524]</font>>]
    node11524_name -> node11524 [arrowhead=none, color="black", style=dashed]
    node11524 [shape=box, label=<<font color="black">[0] let sourceText = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11524 -> node11525 [color="black"]
    node11516_name [shape=none, label=<<font color="black">Branch[11516]</font>>]
    node11516_name -> node11516 [arrowhead=none, color="black", style=dashed]
    node11516 [shape=diamond, label=<<font color="black">(&lt; k (- argCount 1))</font>> color="black" fillcolor="white", style=filled]
    node11516 -> node11517 [label=<<font color="black">true</font>> color="black"]
    node11516 -> node11520 [label=<<font color="black">false</font>> color="black"]
    node11525_name [shape=none, label=<<font color="black">Call[11525]</font>>]
    node11525_name -> node11525 [arrowhead=none, color="black", style=dashed]
    node11525 [shape=cds, label=<<font color="black">%5 = clo&lt;StringToCodePoints&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node11525 -> node11526 [color="black"]
    node11517_name [shape=none, label=<<font color="black">Block[11517]</font>>]
    node11517_name -> node11517 [arrowhead=none, color="black", style=dashed]
    node11517 [shape=box, label=<<font color="black">[0] let nextArg = args[k]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11517 -> node11518 [color="black"]
    node11520_name [shape=none, label=<<font color="black">Block[11520]</font>>]
    node11520_name -> node11520 [arrowhead=none, color="black", style=dashed]
    node11520 [shape=box, label=<<font color="black">[0] let bodyArg = args[k]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11520 -> node11521 [color="black"]
    node11526_name [shape=none, label=<<font color="black">Block[11526]</font>>]
    node11526_name -> node11526 [arrowhead=none, color="black", style=dashed]
    node11526 [shape=box, label=<<font color="black">[0] let parameters = (parse %5 parameterSym)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11526 -> node11527 [color="black"]
    node11518_name [shape=none, label=<<font color="black">Call[11518]</font>>]
    node11518_name -> node11518 [arrowhead=none, color="black", style=dashed]
    node11518 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(nextArg)</font>> color="black" fillcolor="white", style=filled]
    node11518 -> node11519 [color="black"]
    node11527_name [shape=none, label=<<font color="black">Branch[11527]</font>>]
    node11527_name -> node11527 [arrowhead=none, color="black", style=dashed]
    node11527 [shape=diamond, label=<<font color="black">(? parameters: &quot;ListOfErrors&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11527 -> node11528 [label=<<font color="black">true</font>> color="black"]
    node11527 -> node11529 [label=<<font color="black">false</font>> color="black"]
    node11519_name [shape=none, label=<<font color="black">Block[11519]</font>>]
    node11519_name -> node11519 [arrowhead=none, color="black", style=dashed]
    node11519 [shape=box, label=<<font color="black">[0] let nextArgString = [? %2]<BR ALIGN="LEFT"/>[1] P = (concat P &quot;,&quot; nextArgString)<BR ALIGN="LEFT"/>[2] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11519 -> node11516 [color="black"]
    node11528_name [shape=none, label=<<font color="black">Block[11528]</font>>]
    node11528_name -> node11528 [arrowhead=none, color="black", style=dashed]
    node11528 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#905])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11528 -> cluster2034_exit [color="black"]
    node11529_name [shape=none, label=<<font color="black">Call[11529]</font>>]
    node11529_name -> node11529 [arrowhead=none, color="black", style=dashed]
    node11529 [shape=cds, label=<<font color="black">%6 = clo&lt;StringToCodePoints&gt;(bodyString)</font>> color="black" fillcolor="white", style=filled]
    node11529 -> node11530 [color="black"]
    node11530_name [shape=none, label=<<font color="black">Block[11530]</font>>]
    node11530_name -> node11530 [arrowhead=none, color="black", style=dashed]
    node11530 [shape=box, label=<<font color="black">[0] let body = (parse %6 bodySym)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11530 -> node11531 [color="black"]
    node11531_name [shape=none, label=<<font color="black">Branch[11531]</font>>]
    node11531_name -> node11531 [arrowhead=none, color="black", style=dashed]
    node11531 [shape=diamond, label=<<font color="black">(? body: &quot;ListOfErrors&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11531 -> node11532 [label=<<font color="black">true</font>> color="black"]
    node11531 -> node11533 [label=<<font color="black">false</font>> color="black"]
    node11532_name [shape=none, label=<<font color="black">Block[11532]</font>>]
    node11532_name -> node11532 [arrowhead=none, color="black", style=dashed]
    node11532 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#906])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11532 -> cluster2034_exit [color="black"]
    node11533_name [shape=none, label=<<font color="black">Block[11533]</font>>]
    node11533_name -> node11533 [arrowhead=none, color="black", style=dashed]
    node11533 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] let expr = (parse sourceText exprSym)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11533 -> node11534 [color="black"]
    node11534_name [shape=none, label=<<font color="black">Branch[11534]</font>>]
    node11534_name -> node11534 [arrowhead=none, color="black", style=dashed]
    node11534 [shape=diamond, label=<<font color="black">(? expr: &quot;ListOfErrors&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11534 -> node11535 [label=<<font color="black">true</font>> color="black"]
    node11534 -> node11536 [label=<<font color="black">false</font>> color="black"]
    node11535_name [shape=none, label=<<font color="black">Block[11535]</font>>]
    node11535_name -> node11535 [arrowhead=none, color="black", style=dashed]
    node11535 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#907])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11535 -> cluster2034_exit [color="black"]
    node11536_name [shape=none, label=<<font color="black">Call[11536]</font>>]
    node11536_name -> node11536 [arrowhead=none, color="black", style=dashed]
    node11536 [shape=cds, label=<<font color="black">%7 = clo&lt;GetPrototypeFromConstructor&gt;(newTarget, fallbackProto)</font>> color="black" fillcolor="white", style=filled]
    node11536 -> node11537 [color="black"]
    node11537_name [shape=none, label=<<font color="black">Block[11537]</font>>]
    node11537_name -> node11537 [arrowhead=none, color="black", style=dashed]
    node11537 [shape=box, label=<<font color="black">[0] let proto = [? %7]<BR ALIGN="LEFT"/>[1] let realmF = @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/>[2] let env = realmF.GlobalEnv<BR ALIGN="LEFT"/>[3] let privateEnv = null<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11537 -> node11538 [color="black"]
    node11538_name [shape=none, label=<<font color="black">Call[11538]</font>>]
    node11538_name -> node11538 [arrowhead=none, color="black", style=dashed]
    node11538 [shape=cds, label=<<font color="black">%8 = clo&lt;OrdinaryFunctionCreate&gt;(proto, sourceText, parameters, body, ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node11538 -> node11539 [color="black"]
    node11539_name [shape=none, label=<<font color="black">Block[11539]</font>>]
    node11539_name -> node11539 [arrowhead=none, color="black", style=dashed]
    node11539 [shape=box, label=<<font color="black">[0] let F = %8<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11539 -> node11540 [color="black"]
    node11540_name [shape=none, label=<<font color="black">Call[11540]</font>>]
    node11540_name -> node11540 [arrowhead=none, color="black", style=dashed]
    node11540 [shape=cds, label=<<font color="black">%9 = clo&lt;SetFunctionName&gt;(F, &quot;anonymous&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11540 -> node11541 [color="black"]
    node11541_name [shape=none, label=<<font color="black">Branch[11541]</font>>]
    node11541_name -> node11541 [arrowhead=none, color="black", style=dashed]
    node11541 [shape=diamond, label=<<font color="black">(= kind ~generator~)</font>> color="black" fillcolor="white", style=filled]
    node11541 -> node11542 [label=<<font color="black">true</font>> color="black"]
    node11541 -> node11546 [label=<<font color="black">false</font>> color="black"]
    node11542_name [shape=none, label=<<font color="black">Call[11542]</font>>]
    node11542_name -> node11542 [arrowhead=none, color="black", style=dashed]
    node11542 [shape=cds, label=<<font color="black">%10 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%GeneratorFunction.prototype.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node11542 -> node11543 [color="black"]
    node11546_name [shape=none, label=<<font color="black">Branch[11546]</font>>]
    node11546_name -> node11546 [arrowhead=none, color="black", style=dashed]
    node11546 [shape=diamond, label=<<font color="black">(= kind ~asyncGenerator~)</font>> color="black" fillcolor="white", style=filled]
    node11546 -> node11547 [label=<<font color="black">true</font>> color="black"]
    node11546 -> node11551 [label=<<font color="black">false</font>> color="black"]
    node11543_name [shape=none, label=<<font color="black">Block[11543]</font>>]
    node11543_name -> node11543 [arrowhead=none, color="black", style=dashed]
    node11543 [shape=box, label=<<font color="black">[0] let prototype = %10<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11543 -> node11544 [color="black"]
    node11547_name [shape=none, label=<<font color="black">Call[11547]</font>>]
    node11547_name -> node11547 [arrowhead=none, color="black", style=dashed]
    node11547 [shape=cds, label=<<font color="black">%12 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%AsyncGeneratorFunction.prototype.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node11547 -> node11548 [color="black"]
    node11551_name [shape=none, label=<<font color="black">Branch[11551]</font>>]
    node11551_name -> node11551 [arrowhead=none, color="black", style=dashed]
    node11551 [shape=diamond, label=<<font color="black">(= kind ~normal~)</font>> color="black" fillcolor="white", style=filled]
    node11551 -> node11552 [label=<<font color="black">true</font>> color="black"]
    node11551 -> node11553 [label=<<font color="black">false</font>> color="black"]
    node11544_name [shape=none, label=<<font color="black">Call[11544]</font>>]
    node11544_name -> node11544 [arrowhead=none, color="black", style=dashed]
    node11544 [shape=cds, label=<<font color="black">%11 = clo&lt;DefinePropertyOrThrow&gt;(F, &quot;prototype&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false))[#908])</font>> color="black" fillcolor="white", style=filled]
    node11544 -> node11545 [color="black"]
    node11548_name [shape=none, label=<<font color="black">Block[11548]</font>>]
    node11548_name -> node11548 [arrowhead=none, color="black", style=dashed]
    node11548 [shape=box, label=<<font color="black">[0] let prototype = %12<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11548 -> node11549 [color="black"]
    node11552_name [shape=none, label=<<font color="black">Call[11552]</font>>]
    node11552_name -> node11552 [arrowhead=none, color="black", style=dashed]
    node11552 [shape=cds, label=<<font color="black">%14 = clo&lt;MakeConstructor&gt;(F)</font>> color="black" fillcolor="white", style=filled]
    node11552 -> node11553 [color="black"]
    node11553_name [shape=none, label=<<font color="black">Block[11553]</font>>]
    node11553_name -> node11553 [arrowhead=none, color="black", style=dashed]
    node11553 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] return F<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11553 -> cluster2034_exit [color="black"]
    node11545_name [shape=none, label=<<font color="black">Block[11545]</font>>]
    node11545_name -> node11545 [arrowhead=none, color="black", style=dashed]
    node11545 [shape=box, label=<<font color="black">[0] [! %11]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11545 -> node11553 [color="black"]
    node11549_name [shape=none, label=<<font color="black">Call[11549]</font>>]
    node11549_name -> node11549 [arrowhead=none, color="black", style=dashed]
    node11549 [shape=cds, label=<<font color="black">%13 = clo&lt;DefinePropertyOrThrow&gt;(F, &quot;prototype&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false))[#909])</font>> color="black" fillcolor="white", style=filled]
    node11549 -> node11550 [color="black"]
    node11550_name [shape=none, label=<<font color="black">Block[11550]</font>>]
    node11550_name -> node11550 [arrowhead=none, color="black", style=dashed]
    node11550 [shape=box, label=<<font color="black">[0] [! %13]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11550 -> node11553 [color="black"]
  }
}