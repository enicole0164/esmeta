digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1599 {
    label = "def <SYNTAX>:AsyncMethod[0,0].MethodDefinitionEvaluation(this: Ast:AsyncMethod[0,0], object: Unknown, enumerable: Unknown): Normal[PrivateElement | Const[~unused~]] | Abrupt"
    style = rounded
    cluster1599_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1599_entry_name -> cluster1599_entry [arrowhead=none, color="black", style=dashed]
    cluster1599_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1599_entry -> node8566 [color="black"]
    cluster1599_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1599_exit_name -> cluster1599_exit [arrowhead=none, color="black", style=dashed]
    cluster1599_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8566_name [shape=none, label=<<font color="black">Call[8566]</font>>]
    node8566_name -> node8566 [arrowhead=none, color="black", style=dashed]
    node8566 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node8566 -> node8567 [color="black"]
    node8567_name [shape=none, label=<<font color="black">Block[8567]</font>>]
    node8567_name -> node8567 [arrowhead=none, color="black", style=dashed]
    node8567 [shape=box, label=<<font color="black">[0] let propKey = %0<BR ALIGN="LEFT"/>[1] [? propKey]<BR ALIGN="LEFT"/>[2] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[3] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[4] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8567 -> node8568 [color="black"]
    node8568_name [shape=none, label=<<font color="black">Call[8568]</font>>]
    node8568_name -> node8568 [arrowhead=none, color="black", style=dashed]
    node8568 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%AsyncFunction.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8568 -> node8569 [color="black"]
    node8569_name [shape=none, label=<<font color="black">Block[8569]</font>>]
    node8569_name -> node8569 [arrowhead=none, color="black", style=dashed]
    node8569 [shape=box, label=<<font color="black">[0] let closure = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8569 -> node8570 [color="black"]
    node8570_name [shape=none, label=<<font color="black">Call[8570]</font>>]
    node8570_name -> node8570 [arrowhead=none, color="black", style=dashed]
    node8570 [shape=cds, label=<<font color="black">%2 = clo&lt;MakeMethod&gt;(closure, object)</font>> color="black" fillcolor="white", style=filled]
    node8570 -> node8571 [color="black"]
    node8571_name [shape=none, label=<<font color="black">Call[8571]</font>>]
    node8571_name -> node8571 [arrowhead=none, color="black", style=dashed]
    node8571 [shape=cds, label=<<font color="black">%3 = clo&lt;SetFunctionName&gt;(closure, propKey)</font>> color="black" fillcolor="white", style=filled]
    node8571 -> node8572 [color="black"]
    node8572_name [shape=none, label=<<font color="black">Call[8572]</font>>]
    node8572_name -> node8572 [arrowhead=none, color="black", style=dashed]
    node8572 [shape=cds, label=<<font color="black">%4 = clo&lt;DefineMethodProperty&gt;(object, propKey, closure, enumerable)</font>> color="black" fillcolor="white", style=filled]
    node8572 -> node8573 [color="black"]
    node8573_name [shape=none, label=<<font color="black">Block[8573]</font>>]
    node8573_name -> node8573 [arrowhead=none, color="black", style=dashed]
    node8573 [shape=box, label=<<font color="black">[0] return %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8573 -> cluster1599_exit [color="black"]
  }
}