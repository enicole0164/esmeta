digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2357 {
    label = "def <BUILTIN>:INTRINSICS.Array.prototype.forEach(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2357_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2357_entry_name -> cluster2357_entry [arrowhead=none, color="black", style=dashed]
    cluster2357_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2357_entry -> node15154 [color="black"]
    cluster2357_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2357_exit_name -> cluster2357_exit [arrowhead=none, color="black", style=dashed]
    cluster2357_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15154_name [shape=none, label=<<font color="black">Branch[15154]</font>>]
    node15154_name -> node15154 [arrowhead=none, color="black", style=dashed]
    node15154 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15154 -> node15155 [label=<<font color="black">true</font>> color="black"]
    node15154 -> node15156 [label=<<font color="black">false</font>> color="black"]
    node15155_name [shape=none, label=<<font color="black">Block[15155]</font>>]
    node15155_name -> node15155 [arrowhead=none, color="black", style=dashed]
    node15155 [shape=box, label=<<font color="black">[0] let callbackfn = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15155 -> node15157 [color="black"]
    node15156_name [shape=none, label=<<font color="black">Block[15156]</font>>]
    node15156_name -> node15156 [arrowhead=none, color="black", style=dashed]
    node15156 [shape=box, label=<<font color="black">[0] let callbackfn = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15156 -> node15157 [color="black"]
    node15157_name [shape=none, label=<<font color="black">Branch[15157]</font>>]
    node15157_name -> node15157 [arrowhead=none, color="black", style=dashed]
    node15157 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15157 -> node15158 [label=<<font color="black">true</font>> color="black"]
    node15157 -> node15159 [label=<<font color="black">false</font>> color="black"]
    node15158_name [shape=none, label=<<font color="black">Block[15158]</font>>]
    node15158_name -> node15158 [arrowhead=none, color="black", style=dashed]
    node15158 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15158 -> node15160 [color="black"]
    node15159_name [shape=none, label=<<font color="black">Block[15159]</font>>]
    node15159_name -> node15159 [arrowhead=none, color="black", style=dashed]
    node15159 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15159 -> node15160 [color="black"]
    node15160_name [shape=none, label=<<font color="black">Call[15160]</font>>]
    node15160_name -> node15160 [arrowhead=none, color="black", style=dashed]
    node15160 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node15160 -> node15161 [color="black"]
    node15161_name [shape=none, label=<<font color="black">Block[15161]</font>>]
    node15161_name -> node15161 [arrowhead=none, color="black", style=dashed]
    node15161 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15161 -> node15162 [color="black"]
    node15162_name [shape=none, label=<<font color="black">Call[15162]</font>>]
    node15162_name -> node15162 [arrowhead=none, color="black", style=dashed]
    node15162 [shape=cds, label=<<font color="black">%1 = clo&lt;LengthOfArrayLike&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node15162 -> node15163 [color="black"]
    node15163_name [shape=none, label=<<font color="black">Block[15163]</font>>]
    node15163_name -> node15163 [arrowhead=none, color="black", style=dashed]
    node15163 [shape=box, label=<<font color="black">[0] let len = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15163 -> node15164 [color="black"]
    node15164_name [shape=none, label=<<font color="black">Call[15164]</font>>]
    node15164_name -> node15164 [arrowhead=none, color="black", style=dashed]
    node15164 [shape=cds, label=<<font color="black">%2 = clo&lt;IsCallable&gt;(callbackfn)</font>> color="black" fillcolor="white", style=filled]
    node15164 -> node15165 [color="black"]
    node15165_name [shape=none, label=<<font color="black">Branch[15165]</font>>]
    node15165_name -> node15165 [arrowhead=none, color="black", style=dashed]
    node15165 [shape=diamond, label=<<font color="black">(= %2 false)</font>> color="black" fillcolor="white", style=filled]
    node15165 -> node15166 [label=<<font color="black">true</font>> color="black"]
    node15165 -> node15167 [label=<<font color="black">false</font>> color="black"]
    node15166_name [shape=none, label=<<font color="black">Block[15166]</font>>]
    node15166_name -> node15166 [arrowhead=none, color="black", style=dashed]
    node15166 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1030])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15166 -> cluster2357_exit [color="black"]
    node15167_name [shape=none, label=<<font color="black">Block[15167]</font>>]
    node15167_name -> node15167 [arrowhead=none, color="black", style=dashed]
    node15167 [shape=box, label=<<font color="black">[0] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15167 -> node15168 [color="black"]
    node15168_name [shape=none, label=<<font color="black">Branch[15168]</font>>]
    node15168_name -> node15168 [arrowhead=none, color="black", style=dashed]
    node15168 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node15168 -> node15169 [label=<<font color="black">true</font>> color="black"]
    node15168 -> node15179 [label=<<font color="black">false</font>> color="black"]
    node15169_name [shape=none, label=<<font color="black">Call[15169]</font>>]
    node15169_name -> node15169 [arrowhead=none, color="black", style=dashed]
    node15169 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15169 -> node15170 [color="black"]
    node15179_name [shape=none, label=<<font color="black">Block[15179]</font>>]
    node15179_name -> node15179 [arrowhead=none, color="black", style=dashed]
    node15179 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15179 -> cluster2357_exit [color="black"]
    node15170_name [shape=none, label=<<font color="black">Block[15170]</font>>]
    node15170_name -> node15170 [arrowhead=none, color="black", style=dashed]
    node15170 [shape=box, label=<<font color="black">[0] let Pk = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15170 -> node15171 [color="black"]
    node15171_name [shape=none, label=<<font color="black">Call[15171]</font>>]
    node15171_name -> node15171 [arrowhead=none, color="black", style=dashed]
    node15171 [shape=cds, label=<<font color="black">%4 = clo&lt;HasProperty&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node15171 -> node15172 [color="black"]
    node15172_name [shape=none, label=<<font color="black">Block[15172]</font>>]
    node15172_name -> node15172 [arrowhead=none, color="black", style=dashed]
    node15172 [shape=box, label=<<font color="black">[0] let kPresent = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15172 -> node15173 [color="black"]
    node15173_name [shape=none, label=<<font color="black">Branch[15173]</font>>]
    node15173_name -> node15173 [arrowhead=none, color="black", style=dashed]
    node15173 [shape=diamond, label=<<font color="black">(= kPresent true)</font>> color="black" fillcolor="white", style=filled]
    node15173 -> node15174 [label=<<font color="black">true</font>> color="black"]
    node15173 -> node15178 [label=<<font color="black">false</font>> color="black"]
    node15174_name [shape=none, label=<<font color="black">Call[15174]</font>>]
    node15174_name -> node15174 [arrowhead=none, color="black", style=dashed]
    node15174 [shape=cds, label=<<font color="black">%5 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node15174 -> node15175 [color="black"]
    node15178_name [shape=none, label=<<font color="black">Block[15178]</font>>]
    node15178_name -> node15178 [arrowhead=none, color="black", style=dashed]
    node15178 [shape=box, label=<<font color="black">[0] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15178 -> node15168 [color="black"]
    node15175_name [shape=none, label=<<font color="black">Block[15175]</font>>]
    node15175_name -> node15175 [arrowhead=none, color="black", style=dashed]
    node15175 [shape=box, label=<<font color="black">[0] let kValue = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15175 -> node15176 [color="black"]
    node15176_name [shape=none, label=<<font color="black">Call[15176]</font>>]
    node15176_name -> node15176 [arrowhead=none, color="black", style=dashed]
    node15176 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(callbackfn, thisArg, (new [kValue, ([number] k), O])[#1031])</font>> color="black" fillcolor="white", style=filled]
    node15176 -> node15177 [color="black"]
    node15177_name [shape=none, label=<<font color="black">Block[15177]</font>>]
    node15177_name -> node15177 [arrowhead=none, color="black", style=dashed]
    node15177 [shape=box, label=<<font color="black">[0] [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15177 -> node15178 [color="black"]
  }
}