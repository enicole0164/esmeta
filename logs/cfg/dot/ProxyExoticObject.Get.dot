digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1157 {
    label = "def <INTERNAL>:ProxyExoticObject.Get(O: ProxyExoticObject, P: Symbol | String, Receiver: ESValue): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1157_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1157_entry_name -> cluster1157_entry [arrowhead=none, color="black", style=dashed]
    cluster1157_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1157_entry -> node5189 [color="black"]
    cluster1157_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1157_exit_name -> cluster1157_exit [arrowhead=none, color="black", style=dashed]
    cluster1157_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5189_name [shape=none, label=<<font color="black">Block[5189]</font>>]
    node5189_name -> node5189 [arrowhead=none, color="black", style=dashed]
    node5189 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5189 -> node5190 [color="black"]
    node5190_name [shape=none, label=<<font color="black">Branch[5190]</font>>]
    node5190_name -> node5190 [arrowhead=none, color="black", style=dashed]
    node5190 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5190 -> node5191 [label=<<font color="black">true</font>> color="black"]
    node5190 -> node5192 [label=<<font color="black">false</font>> color="black"]
    node5191_name [shape=none, label=<<font color="black">Block[5191]</font>>]
    node5191_name -> node5191 [arrowhead=none, color="black", style=dashed]
    node5191 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#512])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5191 -> cluster1157_exit [color="black"]
    node5192_name [shape=none, label=<<font color="black">Block[5192]</font>>]
    node5192_name -> node5192 [arrowhead=none, color="black", style=dashed]
    node5192 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5192 -> node5193 [color="black"]
    node5193_name [shape=none, label=<<font color="black">Call[5193]</font>>]
    node5193_name -> node5193 [arrowhead=none, color="black", style=dashed]
    node5193 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;get&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5193 -> node5194 [color="black"]
    node5194_name [shape=none, label=<<font color="black">Block[5194]</font>>]
    node5194_name -> node5194 [arrowhead=none, color="black", style=dashed]
    node5194 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5194 -> node5195 [color="black"]
    node5195_name [shape=none, label=<<font color="black">Branch[5195]</font>>]
    node5195_name -> node5195 [arrowhead=none, color="black", style=dashed]
    node5195 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5195 -> node5196 [label=<<font color="black">true</font>> color="black"]
    node5195 -> node5198 [label=<<font color="black">false</font>> color="black"]
    node5196_name [shape=none, label=<<font color="black">Call[5196]</font>>]
    node5196_name -> node5196 [arrowhead=none, color="black", style=dashed]
    node5196 [shape=cds, label=<<font color="black">%1 = target-&gt;Get(P, Receiver)</font>> color="black" fillcolor="white", style=filled]
    node5196 -> node5197 [color="black"]
    node5198_name [shape=none, label=<<font color="black">Call[5198]</font>>]
    node5198_name -> node5198 [arrowhead=none, color="black", style=dashed]
    node5198 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target, P, Receiver])[#513])</font>> color="black" fillcolor="white", style=filled]
    node5198 -> node5199 [color="black"]
    node5197_name [shape=none, label=<<font color="black">Block[5197]</font>>]
    node5197_name -> node5197 [arrowhead=none, color="black", style=dashed]
    node5197 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5197 -> cluster1157_exit [color="black"]
    node5199_name [shape=none, label=<<font color="black">Block[5199]</font>>]
    node5199_name -> node5199 [arrowhead=none, color="black", style=dashed]
    node5199 [shape=box, label=<<font color="black">[0] let trapResult = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5199 -> node5200 [color="black"]
    node5200_name [shape=none, label=<<font color="black">Call[5200]</font>>]
    node5200_name -> node5200 [arrowhead=none, color="black", style=dashed]
    node5200 [shape=cds, label=<<font color="black">%3 = target-&gt;GetOwnProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5200 -> node5201 [color="black"]
    node5201_name [shape=none, label=<<font color="black">Block[5201]</font>>]
    node5201_name -> node5201 [arrowhead=none, color="black", style=dashed]
    node5201 [shape=box, label=<<font color="black">[0] let targetDesc = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5201 -> node5202 [color="black"]
    node5202_name [shape=none, label=<<font color="black">Branch[5202]</font>>]
    node5202_name -> node5202 [arrowhead=none, color="black", style=dashed]
    node5202 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= targetDesc undefined)) (= targetDesc.Configurable false))</font>> color="black" fillcolor="white", style=filled]
    node5202 -> node5203 [label=<<font color="black">true</font>> color="black"]
    node5202 -> node5212 [label=<<font color="black">false</font>> color="black"]
    node5203_name [shape=none, label=<<font color="black">Call[5203]</font>>]
    node5203_name -> node5203 [arrowhead=none, color="black", style=dashed]
    node5203 [shape=cds, label=<<font color="black">%4 = clo&lt;IsDataDescriptor&gt;(targetDesc)</font>> color="black" fillcolor="white", style=filled]
    node5203 -> node5204 [color="black"]
    node5212_name [shape=none, label=<<font color="black">Block[5212]</font>>]
    node5212_name -> node5212 [arrowhead=none, color="black", style=dashed]
    node5212 [shape=box, label=<<font color="black">[0] return trapResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5212 -> cluster1157_exit [color="black"]
    node5204_name [shape=none, label=<<font color="black">Branch[5204]</font>>]
    node5204_name -> node5204 [arrowhead=none, color="black", style=dashed]
    node5204 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %4 true) (= targetDesc.Writable false))</font>> color="black" fillcolor="white", style=filled]
    node5204 -> node5205 [label=<<font color="black">true</font>> color="black"]
    node5204 -> node5208 [label=<<font color="black">false</font>> color="black"]
    node5205_name [shape=none, label=<<font color="black">Call[5205]</font>>]
    node5205_name -> node5205 [arrowhead=none, color="black", style=dashed]
    node5205 [shape=cds, label=<<font color="black">%5 = clo&lt;SameValue&gt;(trapResult, targetDesc.Value)</font>> color="black" fillcolor="white", style=filled]
    node5205 -> node5206 [color="black"]
    node5208_name [shape=none, label=<<font color="black">Call[5208]</font>>]
    node5208_name -> node5208 [arrowhead=none, color="black", style=dashed]
    node5208 [shape=cds, label=<<font color="black">%6 = clo&lt;IsAccessorDescriptor&gt;(targetDesc)</font>> color="black" fillcolor="white", style=filled]
    node5208 -> node5209 [color="black"]
    node5206_name [shape=none, label=<<font color="black">Branch[5206]</font>>]
    node5206_name -> node5206 [arrowhead=none, color="black", style=dashed]
    node5206 [shape=diamond, label=<<font color="black">(= %5 false)</font>> color="black" fillcolor="white", style=filled]
    node5206 -> node5207 [label=<<font color="black">true</font>> color="black"]
    node5206 -> node5208 [label=<<font color="black">false</font>> color="black"]
    node5209_name [shape=none, label=<<font color="black">Branch[5209]</font>>]
    node5209_name -> node5209 [arrowhead=none, color="black", style=dashed]
    node5209 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %6 true) (= targetDesc.Get undefined))</font>> color="black" fillcolor="white", style=filled]
    node5209 -> node5210 [label=<<font color="black">true</font>> color="black"]
    node5209 -> node5212 [label=<<font color="black">false</font>> color="black"]
    node5207_name [shape=none, label=<<font color="black">Block[5207]</font>>]
    node5207_name -> node5207 [arrowhead=none, color="black", style=dashed]
    node5207 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#514])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5207 -> cluster1157_exit [color="black"]
    node5210_name [shape=none, label=<<font color="black">Branch[5210]</font>>]
    node5210_name -> node5210 [arrowhead=none, color="black", style=dashed]
    node5210 [shape=diamond, label=<<font color="black">(! (= trapResult undefined))</font>> color="black" fillcolor="white", style=filled]
    node5210 -> node5211 [label=<<font color="black">true</font>> color="black"]
    node5210 -> node5212 [label=<<font color="black">false</font>> color="black"]
    node5211_name [shape=none, label=<<font color="black">Block[5211]</font>>]
    node5211_name -> node5211 [arrowhead=none, color="black", style=dashed]
    node5211 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#515])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5211 -> cluster1157_exit [color="black"]
  }
}