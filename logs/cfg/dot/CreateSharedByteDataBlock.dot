digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster74 {
    label = "def CreateSharedByteDataBlock(size: Unknown["NonnegativeInteger"]): Unknown["EitherANormalCompletionContainingASharedDataBlockOrAnAbruptCompletion"]"
    style = rounded
    cluster74_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster74_entry_name -> cluster74_entry [arrowhead=none, color="black", style=dashed]
    cluster74_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster74_entry -> node576 [color="black"]
    cluster74_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster74_exit_name -> cluster74_exit [arrowhead=none, color="black", style=dashed]
    cluster74_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node576_name [shape=none, label=<<font color="black">Block[576]</font>>]
    node576_name -> node576 [arrowhead=none, color="black", style=dashed]
    node576 [shape=box, label=<<font color="black">[0] (yet &quot;Let _db_ be a new Shared Data Block value consisting of _size_ bytes. If it is impossible to create such a Shared Data Block, throw a *RangeError* exception.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().&quot;)<BR ALIGN="LEFT"/>[3] let zero = (new [0])[#23]<BR ALIGN="LEFT"/>[4] (yet &quot;For each index _i_ of _db_, do\n  1. Append WriteSharedMemory { [[Order]]: ~Init~, [[NoTear]]: *true*, [[Block]]: _db_, [[ByteIndex]]: _i_, [[ElementSize]]: 1, [[Payload]]: _zero_ } to _eventList_.&quot;)<BR ALIGN="LEFT"/>[5] return db<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node576 -> cluster74_exit [color="black"]
  }
}