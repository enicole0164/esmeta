digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2167 {
    label = "def thisStringValue(value: Unknown): Unknown"
    style = rounded
    cluster2167_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2167_entry_name -> cluster2167_entry [arrowhead=none, color="black", style=dashed]
    cluster2167_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2167_entry -> node13271 [color="black"]
    cluster2167_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2167_exit_name -> cluster2167_exit [arrowhead=none, color="black", style=dashed]
    cluster2167_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13271_name [shape=none, label=<<font color="black">Branch[13271]</font>>]
    node13271_name -> node13271 [arrowhead=none, color="black", style=dashed]
    node13271 [shape=diamond, label=<<font color="black">(= (typeof value) @String)</font>> color="black" fillcolor="white", style=filled]
    node13271 -> node13272 [label=<<font color="black">true</font>> color="black"]
    node13271 -> node13273 [label=<<font color="black">false</font>> color="black"]
    node13272_name [shape=none, label=<<font color="black">Block[13272]</font>>]
    node13272_name -> node13272 [arrowhead=none, color="black", style=dashed]
    node13272 [shape=box, label=<<font color="black">[0] return value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13272 -> cluster2167_exit [color="black"]
    node13273_name [shape=none, label=<<font color="black">Branch[13273]</font>>]
    node13273_name -> node13273 [arrowhead=none, color="black", style=dashed]
    node13273 [shape=diamond, label=<<font color="black">(&amp;&amp; (= (typeof value) @Object) (! (= value.StringData absent)))</font>> color="black" fillcolor="white", style=filled]
    node13273 -> node13274 [label=<<font color="black">true</font>> color="black"]
    node13273 -> node13275 [label=<<font color="black">false</font>> color="black"]
    node13274_name [shape=none, label=<<font color="black">Block[13274]</font>>]
    node13274_name -> node13274 [arrowhead=none, color="black", style=dashed]
    node13274 [shape=box, label=<<font color="black">[0] let s = value.StringData<BR ALIGN="LEFT"/>[1] assert (= (typeof s) @String)<BR ALIGN="LEFT"/>[2] return s<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13274 -> cluster2167_exit [color="black"]
    node13275_name [shape=none, label=<<font color="black">Block[13275]</font>>]
    node13275_name -> node13275 [arrowhead=none, color="black", style=dashed]
    node13275 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#946])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13275 -> cluster2167_exit [color="black"]
  }
}