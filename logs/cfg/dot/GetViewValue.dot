digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2494 {
    label = "def GetViewValue(view: Unknown, requestIndex: Unknown, isLittleEndian: Unknown, type: Unknown): Normal[Number | BigInt] | Abrupt"
    style = rounded
    cluster2494_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2494_entry_name -> cluster2494_entry [arrowhead=none, color="black", style=dashed]
    cluster2494_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2494_entry -> node17622 [color="black"]
    cluster2494_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2494_exit_name -> cluster2494_exit [arrowhead=none, color="black", style=dashed]
    cluster2494_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17622_name [shape=none, label=<<font color="black">Call[17622]</font>>]
    node17622_name -> node17622 [arrowhead=none, color="black", style=dashed]
    node17622 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(view, &quot;DataView&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17622 -> node17623 [color="black"]
    node17623_name [shape=none, label=<<font color="black">Block[17623]</font>>]
    node17623_name -> node17623 [arrowhead=none, color="black", style=dashed]
    node17623 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= view.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17623 -> node17624 [color="black"]
    node17624_name [shape=none, label=<<font color="black">Call[17624]</font>>]
    node17624_name -> node17624 [arrowhead=none, color="black", style=dashed]
    node17624 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIndex&gt;(requestIndex)</font>> color="black" fillcolor="white", style=filled]
    node17624 -> node17625 [color="black"]
    node17625_name [shape=none, label=<<font color="black">Block[17625]</font>>]
    node17625_name -> node17625 [arrowhead=none, color="black", style=dashed]
    node17625 [shape=box, label=<<font color="black">[0] let getIndex = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17625 -> node17626 [color="black"]
    node17626_name [shape=none, label=<<font color="black">Call[17626]</font>>]
    node17626_name -> node17626 [arrowhead=none, color="black", style=dashed]
    node17626 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBoolean&gt;(isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17626 -> node17627 [color="black"]
    node17627_name [shape=none, label=<<font color="black">Block[17627]</font>>]
    node17627_name -> node17627 [arrowhead=none, color="black", style=dashed]
    node17627 [shape=box, label=<<font color="black">[0] isLittleEndian = %2<BR ALIGN="LEFT"/>[1] let buffer = view.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17627 -> node17628 [color="black"]
    node17628_name [shape=none, label=<<font color="black">Call[17628]</font>>]
    node17628_name -> node17628 [arrowhead=none, color="black", style=dashed]
    node17628 [shape=cds, label=<<font color="black">%3 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node17628 -> node17629 [color="black"]
    node17629_name [shape=none, label=<<font color="black">Branch[17629]</font>>]
    node17629_name -> node17629 [arrowhead=none, color="black", style=dashed]
    node17629 [shape=diamond, label=<<font color="black">(= %3 true)</font>> color="black" fillcolor="white", style=filled]
    node17629 -> node17630 [label=<<font color="black">true</font>> color="black"]
    node17629 -> node17631 [label=<<font color="black">false</font>> color="black"]
    node17630_name [shape=none, label=<<font color="black">Block[17630]</font>>]
    node17630_name -> node17630 [arrowhead=none, color="black", style=dashed]
    node17630 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1167])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17630 -> cluster2494_exit [color="black"]
    node17631_name [shape=none, label=<<font color="black">Block[17631]</font>>]
    node17631_name -> node17631 [arrowhead=none, color="black", style=dashed]
    node17631 [shape=box, label=<<font color="black">[0] let viewOffset = view.ByteOffset<BR ALIGN="LEFT"/>[1] let viewSize = view.ByteLength<BR ALIGN="LEFT"/>[2] (yet &quot;Let _elementSize_ be the Element Size value specified in &lt;emu-xref href=\&quot;#table-the-typedarray-constructors\&quot;&gt;&lt;/emu-xref&gt; for Element Type _type_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17631 -> node17632 [color="black"]
    node17632_name [shape=none, label=<<font color="black">Branch[17632]</font>>]
    node17632_name -> node17632 [arrowhead=none, color="black", style=dashed]
    node17632 [shape=diamond, label=<<font color="black">(&lt; viewSize (+ getIndex elementSize))</font>> color="black" fillcolor="white", style=filled]
    node17632 -> node17633 [label=<<font color="black">true</font>> color="black"]
    node17632 -> node17634 [label=<<font color="black">false</font>> color="black"]
    node17633_name [shape=none, label=<<font color="black">Block[17633]</font>>]
    node17633_name -> node17633 [arrowhead=none, color="black", style=dashed]
    node17633 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1168])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17633 -> cluster2494_exit [color="black"]
    node17634_name [shape=none, label=<<font color="black">Block[17634]</font>>]
    node17634_name -> node17634 [arrowhead=none, color="black", style=dashed]
    node17634 [shape=box, label=<<font color="black">[0] let bufferIndex = (+ getIndex viewOffset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17634 -> node17635 [color="black"]
    node17635_name [shape=none, label=<<font color="black">Call[17635]</font>>]
    node17635_name -> node17635 [arrowhead=none, color="black", style=dashed]
    node17635 [shape=cds, label=<<font color="black">%4 = clo&lt;GetValueFromBuffer&gt;(buffer, bufferIndex, type, false, ~Unordered~, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17635 -> node17636 [color="black"]
    node17636_name [shape=none, label=<<font color="black">Block[17636]</font>>]
    node17636_name -> node17636 [arrowhead=none, color="black", style=dashed]
    node17636 [shape=box, label=<<font color="black">[0] return %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17636 -> cluster2494_exit [color="black"]
  }
}