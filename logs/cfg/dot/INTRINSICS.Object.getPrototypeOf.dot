digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2010 {
    label = "def <BUILTIN>:INTRINSICS.Object.getPrototypeOf(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2010_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2010_entry_name -> cluster2010_entry [arrowhead=none, color="black", style=dashed]
    cluster2010_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2010_entry -> node11223 [color="black"]
    cluster2010_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2010_exit_name -> cluster2010_exit [arrowhead=none, color="black", style=dashed]
    cluster2010_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11223_name [shape=none, label=<<font color="black">Branch[11223]</font>>]
    node11223_name -> node11223 [arrowhead=none, color="black", style=dashed]
    node11223 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11223 -> node11224 [label=<<font color="black">true</font>> color="black"]
    node11223 -> node11225 [label=<<font color="black">false</font>> color="black"]
    node11224_name [shape=none, label=<<font color="black">Block[11224]</font>>]
    node11224_name -> node11224 [arrowhead=none, color="black", style=dashed]
    node11224 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11224 -> node11226 [color="black"]
    node11225_name [shape=none, label=<<font color="black">Block[11225]</font>>]
    node11225_name -> node11225 [arrowhead=none, color="black", style=dashed]
    node11225 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11225 -> node11226 [color="black"]
    node11226_name [shape=none, label=<<font color="black">Call[11226]</font>>]
    node11226_name -> node11226 [arrowhead=none, color="black", style=dashed]
    node11226 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node11226 -> node11227 [color="black"]
    node11227_name [shape=none, label=<<font color="black">Block[11227]</font>>]
    node11227_name -> node11227 [arrowhead=none, color="black", style=dashed]
    node11227 [shape=box, label=<<font color="black">[0] let obj = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11227 -> node11228 [color="black"]
    node11228_name [shape=none, label=<<font color="black">Call[11228]</font>>]
    node11228_name -> node11228 [arrowhead=none, color="black", style=dashed]
    node11228 [shape=cds, label=<<font color="black">%1 = obj-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node11228 -> node11229 [color="black"]
    node11229_name [shape=none, label=<<font color="black">Block[11229]</font>>]
    node11229_name -> node11229 [arrowhead=none, color="black", style=dashed]
    node11229 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11229 -> cluster2010_exit [color="black"]
  }
}