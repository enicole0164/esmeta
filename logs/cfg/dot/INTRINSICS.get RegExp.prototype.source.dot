digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2330 {
    label = "def <BUILTIN>:INTRINSICS.get RegExp.prototype.source(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2330_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2330_entry_name -> cluster2330_entry [arrowhead=none, color="black", style=dashed]
    cluster2330_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2330_entry -> node14534 [color="black"]
    cluster2330_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2330_exit_name -> cluster2330_exit [arrowhead=none, color="black", style=dashed]
    cluster2330_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14534_name [shape=none, label=<<font color="black">Block[14534]</font>>]
    node14534_name -> node14534 [arrowhead=none, color="black", style=dashed]
    node14534 [shape=box, label=<<font color="black">[0] let R = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14534 -> node14535 [color="black"]
    node14535_name [shape=none, label=<<font color="black">Branch[14535]</font>>]
    node14535_name -> node14535 [arrowhead=none, color="black", style=dashed]
    node14535 [shape=diamond, label=<<font color="black">(! (= (typeof R) @Object))</font>> color="black" fillcolor="white", style=filled]
    node14535 -> node14536 [label=<<font color="black">true</font>> color="black"]
    node14535 -> node14537 [label=<<font color="black">false</font>> color="black"]
    node14536_name [shape=none, label=<<font color="black">Block[14536]</font>>]
    node14536_name -> node14536 [arrowhead=none, color="black", style=dashed]
    node14536 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1004])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14536 -> cluster2330_exit [color="black"]
    node14537_name [shape=none, label=<<font color="black">Branch[14537]</font>>]
    node14537_name -> node14537 [arrowhead=none, color="black", style=dashed]
    node14537 [shape=diamond, label=<<font color="black">(= R.OriginalSource absent)</font>> color="black" fillcolor="white", style=filled]
    node14537 -> node14538 [label=<<font color="black">true</font>> color="black"]
    node14537 -> node14542 [label=<<font color="black">false</font>> color="black"]
    node14538_name [shape=none, label=<<font color="black">Call[14538]</font>>]
    node14538_name -> node14538 [arrowhead=none, color="black", style=dashed]
    node14538 [shape=cds, label=<<font color="black">%0 = clo&lt;SameValue&gt;(R, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RegExp.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node14538 -> node14539 [color="black"]
    node14542_name [shape=none, label=<<font color="black">Block[14542]</font>>]
    node14542_name -> node14542 [arrowhead=none, color="black", style=dashed]
    node14542 [shape=box, label=<<font color="black">[0] assert (! (= R.OriginalFlags absent))<BR ALIGN="LEFT"/>[1] let src = R.OriginalSource<BR ALIGN="LEFT"/>[2] let flags = R.OriginalFlags<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14542 -> node14543 [color="black"]
    node14539_name [shape=none, label=<<font color="black">Branch[14539]</font>>]
    node14539_name -> node14539 [arrowhead=none, color="black", style=dashed]
    node14539 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node14539 -> node14540 [label=<<font color="black">true</font>> color="black"]
    node14539 -> node14541 [label=<<font color="black">false</font>> color="black"]
    node14543_name [shape=none, label=<<font color="black">Call[14543]</font>>]
    node14543_name -> node14543 [arrowhead=none, color="black", style=dashed]
    node14543 [shape=cds, label=<<font color="black">%1 = clo&lt;EscapeRegExpPattern&gt;(src, flags)</font>> color="black" fillcolor="white", style=filled]
    node14543 -> node14544 [color="black"]
    node14540_name [shape=none, label=<<font color="black">Block[14540]</font>>]
    node14540_name -> node14540 [arrowhead=none, color="black", style=dashed]
    node14540 [shape=box, label=<<font color="black">[0] return &quot;(?:)&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14540 -> cluster2330_exit [color="black"]
    node14541_name [shape=none, label=<<font color="black">Block[14541]</font>>]
    node14541_name -> node14541 [arrowhead=none, color="black", style=dashed]
    node14541 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1005])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14541 -> cluster2330_exit [color="black"]
    node14544_name [shape=none, label=<<font color="black">Block[14544]</font>>]
    node14544_name -> node14544 [arrowhead=none, color="black", style=dashed]
    node14544 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14544 -> cluster2330_exit [color="black"]
  }
}