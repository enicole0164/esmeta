digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1261 {
    label = "def <SYNTAX>:CallExpression[4,0].Evaluation(this: Ast:CallExpression[4,0]): Unknown"
    style = rounded
    cluster1261_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1261_entry_name -> cluster1261_entry [arrowhead=none, color="black", style=dashed]
    cluster1261_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1261_entry -> node5806 [color="black"]
    cluster1261_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1261_exit_name -> cluster1261_exit [arrowhead=none, color="black", style=dashed]
    cluster1261_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5806_name [shape=none, label=<<font color="black">Call[5806]</font>>]
    node5806_name -> node5806 [arrowhead=none, color="black", style=dashed]
    node5806 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5806 -> node5807 [color="black"]
    node5807_name [shape=none, label=<<font color="black">Block[5807]</font>>]
    node5807_name -> node5807 [arrowhead=none, color="black", style=dashed]
    node5807 [shape=box, label=<<font color="black">[0] let baseReference = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5807 -> node5808 [color="black"]
    node5808_name [shape=none, label=<<font color="black">Call[5808]</font>>]
    node5808_name -> node5808 [arrowhead=none, color="black", style=dashed]
    node5808 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(baseReference)</font>> color="black" fillcolor="white", style=filled]
    node5808 -> node5809 [color="black"]
    node5809_name [shape=none, label=<<font color="black">Block[5809]</font>>]
    node5809_name -> node5809 [arrowhead=none, color="black", style=dashed]
    node5809 [shape=box, label=<<font color="black">[0] let baseValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5809 -> node5810 [color="black"]
    node5810_name [shape=none, label=<<font color="black">Branch[5810]</font>>]
    node5810_name -> node5810 [arrowhead=none, color="black", style=dashed]
    node5810 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node5810 -> node5811 [label=<<font color="black">true</font>> color="black"]
    node5810 -> node5812 [label=<<font color="black">false</font>> color="black"]
    node5811_name [shape=none, label=<<font color="black">Block[5811]</font>>]
    node5811_name -> node5811 [arrowhead=none, color="black", style=dashed]
    node5811 [shape=box, label=<<font color="black">[0] let strict = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5811 -> node5813 [color="black"]
    node5812_name [shape=none, label=<<font color="black">Block[5812]</font>>]
    node5812_name -> node5812 [arrowhead=none, color="black", style=dashed]
    node5812 [shape=box, label=<<font color="black">[0] let strict = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5812 -> node5813 [color="black"]
    node5813_name [shape=none, label=<<font color="black">Call[5813]</font>>]
    node5813_name -> node5813 [arrowhead=none, color="black", style=dashed]
    node5813 [shape=cds, label=<<font color="black">%2 = clo&lt;EvaluatePropertyAccessWithExpressionKey&gt;(baseValue, this[1], strict)</font>> color="black" fillcolor="white", style=filled]
    node5813 -> node5814 [color="black"]
    node5814_name [shape=none, label=<<font color="black">Block[5814]</font>>]
    node5814_name -> node5814 [arrowhead=none, color="black", style=dashed]
    node5814 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5814 -> cluster1261_exit [color="black"]
  }
}