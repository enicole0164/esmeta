digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2046 {
    label = "def <BUILTIN>:INTRINSICS.Symbol.keyFor(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2046_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2046_entry_name -> cluster2046_entry [arrowhead=none, color="black", style=dashed]
    cluster2046_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2046_entry -> node11662 [color="black"]
    cluster2046_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2046_exit_name -> cluster2046_exit [arrowhead=none, color="black", style=dashed]
    cluster2046_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11662_name [shape=none, label=<<font color="black">Branch[11662]</font>>]
    node11662_name -> node11662 [arrowhead=none, color="black", style=dashed]
    node11662 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11662 -> node11663 [label=<<font color="black">true</font>> color="black"]
    node11662 -> node11664 [label=<<font color="black">false</font>> color="black"]
    node11663_name [shape=none, label=<<font color="black">Block[11663]</font>>]
    node11663_name -> node11663 [arrowhead=none, color="black", style=dashed]
    node11663 [shape=box, label=<<font color="black">[0] let sym = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11663 -> node11665 [color="black"]
    node11664_name [shape=none, label=<<font color="black">Block[11664]</font>>]
    node11664_name -> node11664 [arrowhead=none, color="black", style=dashed]
    node11664 [shape=box, label=<<font color="black">[0] let sym = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11664 -> node11665 [color="black"]
    node11665_name [shape=none, label=<<font color="black">Branch[11665]</font>>]
    node11665_name -> node11665 [arrowhead=none, color="black", style=dashed]
    node11665 [shape=diamond, label=<<font color="black">(! (= (typeof sym) @Symbol))</font>> color="black" fillcolor="white", style=filled]
    node11665 -> node11666 [label=<<font color="black">true</font>> color="black"]
    node11665 -> node11667 [label=<<font color="black">false</font>> color="black"]
    node11666_name [shape=none, label=<<font color="black">Block[11666]</font>>]
    node11666_name -> node11666 [arrowhead=none, color="black", style=dashed]
    node11666 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#918])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11666 -> cluster2046_exit [color="black"]
    node11667_name [shape=none, label=<<font color="black">Block[11667]</font>>]
    node11667_name -> node11667 [arrowhead=none, color="black", style=dashed]
    node11667 [shape=box, label=<<font color="black">[0] (yet &quot;For each element _e_ of the GlobalSymbolRegistry List (see &lt;emu-xref href=\&quot;#sec-symbol.for\&quot;&gt;&lt;/emu-xref&gt;), do\n  1. If SameValue(_e_.[[Symbol]], _sym_) is *true*, return _e_.[[Key]].&quot;)<BR ALIGN="LEFT"/>[1] assert (yet &quot;GlobalSymbolRegistry does not currently contain an entry for _sym_.&quot;)<BR ALIGN="LEFT"/>[2] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11667 -> cluster2046_exit [color="black"]
  }
}