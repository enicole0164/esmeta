digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2408 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.reduceRight(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2408_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2408_entry_name -> cluster2408_entry [arrowhead=none, color="black", style=dashed]
    cluster2408_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2408_entry -> node16391 [color="black"]
    cluster2408_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2408_exit_name -> cluster2408_exit [arrowhead=none, color="black", style=dashed]
    cluster2408_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16391_name [shape=none, label=<<font color="black">Branch[16391]</font>>]
    node16391_name -> node16391 [arrowhead=none, color="black", style=dashed]
    node16391 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16391 -> node16392 [label=<<font color="black">true</font>> color="black"]
    node16391 -> node16393 [label=<<font color="black">false</font>> color="black"]
    node16392_name [shape=none, label=<<font color="black">Block[16392]</font>>]
    node16392_name -> node16392 [arrowhead=none, color="black", style=dashed]
    node16392 [shape=box, label=<<font color="black">[0] let callbackfn = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16392 -> node16394 [color="black"]
    node16393_name [shape=none, label=<<font color="black">Block[16393]</font>>]
    node16393_name -> node16393 [arrowhead=none, color="black", style=dashed]
    node16393 [shape=box, label=<<font color="black">[0] let callbackfn = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16393 -> node16394 [color="black"]
    node16394_name [shape=none, label=<<font color="black">Branch[16394]</font>>]
    node16394_name -> node16394 [arrowhead=none, color="black", style=dashed]
    node16394 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16394 -> node16395 [label=<<font color="black">true</font>> color="black"]
    node16394 -> node16396 [label=<<font color="black">false</font>> color="black"]
    node16395_name [shape=none, label=<<font color="black">Block[16395]</font>>]
    node16395_name -> node16395 [arrowhead=none, color="black", style=dashed]
    node16395 [shape=box, label=<<font color="black">[0] let initialValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16395 -> node16397 [color="black"]
    node16396_name [shape=none, label=<<font color="black">Block[16396]</font>>]
    node16396_name -> node16396 [arrowhead=none, color="black", style=dashed]
    node16396 [shape=box, label=<<font color="black">[0] let initialValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16396 -> node16397 [color="black"]
    node16397_name [shape=none, label=<<font color="black">Block[16397]</font>>]
    node16397_name -> node16397 [arrowhead=none, color="black", style=dashed]
    node16397 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16397 -> node16398 [color="black"]
    node16398_name [shape=none, label=<<font color="black">Call[16398]</font>>]
    node16398_name -> node16398 [arrowhead=none, color="black", style=dashed]
    node16398 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateTypedArray&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16398 -> node16399 [color="black"]
    node16399_name [shape=none, label=<<font color="black">Block[16399]</font>>]
    node16399_name -> node16399 [arrowhead=none, color="black", style=dashed]
    node16399 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let len = O.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16399 -> node16400 [color="black"]
    node16400_name [shape=none, label=<<font color="black">Call[16400]</font>>]
    node16400_name -> node16400 [arrowhead=none, color="black", style=dashed]
    node16400 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(callbackfn)</font>> color="black" fillcolor="white", style=filled]
    node16400 -> node16401 [color="black"]
    node16401_name [shape=none, label=<<font color="black">Branch[16401]</font>>]
    node16401_name -> node16401 [arrowhead=none, color="black", style=dashed]
    node16401 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node16401 -> node16402 [label=<<font color="black">true</font>> color="black"]
    node16401 -> node16403 [label=<<font color="black">false</font>> color="black"]
    node16402_name [shape=none, label=<<font color="black">Block[16402]</font>>]
    node16402_name -> node16402 [arrowhead=none, color="black", style=dashed]
    node16402 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1081])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16402 -> cluster2408_exit [color="black"]
    node16403_name [shape=none, label=<<font color="black">Branch[16403]</font>>]
    node16403_name -> node16403 [arrowhead=none, color="black", style=dashed]
    node16403 [shape=diamond, label=<<font color="black">(&amp;&amp; (= len 0) (= initialValue absent))</font>> color="black" fillcolor="white", style=filled]
    node16403 -> node16404 [label=<<font color="black">true</font>> color="black"]
    node16403 -> node16405 [label=<<font color="black">false</font>> color="black"]
    node16404_name [shape=none, label=<<font color="black">Block[16404]</font>>]
    node16404_name -> node16404 [arrowhead=none, color="black", style=dashed]
    node16404 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1082])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16404 -> cluster2408_exit [color="black"]
    node16405_name [shape=none, label=<<font color="black">Block[16405]</font>>]
    node16405_name -> node16405 [arrowhead=none, color="black", style=dashed]
    node16405 [shape=box, label=<<font color="black">[0] let k = (- len 1)<BR ALIGN="LEFT"/>[1] let accumulator = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16405 -> node16406 [color="black"]
    node16406_name [shape=none, label=<<font color="black">Branch[16406]</font>>]
    node16406_name -> node16406 [arrowhead=none, color="black", style=dashed]
    node16406 [shape=diamond, label=<<font color="black">(! (= initialValue absent))</font>> color="black" fillcolor="white", style=filled]
    node16406 -> node16407 [label=<<font color="black">true</font>> color="black"]
    node16406 -> node16408 [label=<<font color="black">false</font>> color="black"]
    node16407_name [shape=none, label=<<font color="black">Block[16407]</font>>]
    node16407_name -> node16407 [arrowhead=none, color="black", style=dashed]
    node16407 [shape=box, label=<<font color="black">[0] accumulator = initialValue<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16407 -> node16412 [color="black"]
    node16408_name [shape=none, label=<<font color="black">Call[16408]</font>>]
    node16408_name -> node16408 [arrowhead=none, color="black", style=dashed]
    node16408 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16408 -> node16409 [color="black"]
    node16412_name [shape=none, label=<<font color="black">Branch[16412]</font>>]
    node16412_name -> node16412 [arrowhead=none, color="black", style=dashed]
    node16412 [shape=diamond, label=<<font color="black">(! (&lt; k 0))</font>> color="black" fillcolor="white", style=filled]
    node16412 -> node16413 [label=<<font color="black">true</font>> color="black"]
    node16412 -> node16419 [label=<<font color="black">false</font>> color="black"]
    node16409_name [shape=none, label=<<font color="black">Block[16409]</font>>]
    node16409_name -> node16409 [arrowhead=none, color="black", style=dashed]
    node16409 [shape=box, label=<<font color="black">[0] let Pk = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16409 -> node16410 [color="black"]
    node16413_name [shape=none, label=<<font color="black">Call[16413]</font>>]
    node16413_name -> node16413 [arrowhead=none, color="black", style=dashed]
    node16413 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16413 -> node16414 [color="black"]
    node16419_name [shape=none, label=<<font color="black">Block[16419]</font>>]
    node16419_name -> node16419 [arrowhead=none, color="black", style=dashed]
    node16419 [shape=box, label=<<font color="black">[0] return accumulator<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16419 -> cluster2408_exit [color="black"]
    node16410_name [shape=none, label=<<font color="black">Call[16410]</font>>]
    node16410_name -> node16410 [arrowhead=none, color="black", style=dashed]
    node16410 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16410 -> node16411 [color="black"]
    node16414_name [shape=none, label=<<font color="black">Block[16414]</font>>]
    node16414_name -> node16414 [arrowhead=none, color="black", style=dashed]
    node16414 [shape=box, label=<<font color="black">[0] let Pk = [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16414 -> node16415 [color="black"]
    node16411_name [shape=none, label=<<font color="black">Block[16411]</font>>]
    node16411_name -> node16411 [arrowhead=none, color="black", style=dashed]
    node16411 [shape=box, label=<<font color="black">[0] accumulator = [! %3]<BR ALIGN="LEFT"/>[1] k = (- k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16411 -> node16412 [color="black"]
    node16415_name [shape=none, label=<<font color="black">Call[16415]</font>>]
    node16415_name -> node16415 [arrowhead=none, color="black", style=dashed]
    node16415 [shape=cds, label=<<font color="black">%5 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16415 -> node16416 [color="black"]
    node16416_name [shape=none, label=<<font color="black">Block[16416]</font>>]
    node16416_name -> node16416 [arrowhead=none, color="black", style=dashed]
    node16416 [shape=box, label=<<font color="black">[0] let kValue = [! %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16416 -> node16417 [color="black"]
    node16417_name [shape=none, label=<<font color="black">Call[16417]</font>>]
    node16417_name -> node16417 [arrowhead=none, color="black", style=dashed]
    node16417 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(callbackfn, undefined, (new [accumulator, kValue, ([number] k), O])[#1083])</font>> color="black" fillcolor="white", style=filled]
    node16417 -> node16418 [color="black"]
    node16418_name [shape=none, label=<<font color="black">Block[16418]</font>>]
    node16418_name -> node16418 [arrowhead=none, color="black", style=dashed]
    node16418 [shape=box, label=<<font color="black">[0] accumulator = [? %6]<BR ALIGN="LEFT"/>[1] k = (- k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16418 -> node16412 [color="black"]
  }
}