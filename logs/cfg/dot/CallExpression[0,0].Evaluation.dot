digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1269 {
    label = "def <SYNTAX>:CallExpression[0,0].Evaluation(this: Ast:CallExpression[0,0]): Unknown"
    style = rounded
    cluster1269_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1269_entry_name -> cluster1269_entry [arrowhead=none, color="black", style=dashed]
    cluster1269_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1269_entry -> node5857 [color="black"]
    cluster1269_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1269_exit_name -> cluster1269_exit [arrowhead=none, color="black", style=dashed]
    cluster1269_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5857_name [shape=none, label=<<font color="black">Block[5857]</font>>]
    node5857_name -> node5857 [arrowhead=none, color="black", style=dashed]
    node5857 [shape=box, label=<<font color="black">[0] let expr = (parse this[0] (nt |CallMemberExpression|[]))<BR ALIGN="LEFT"/>[1] let memberExpr = expr.MemberExpression<BR ALIGN="LEFT"/>[2] let arguments = expr.Arguments<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5857 -> node5858 [color="black"]
    node5858_name [shape=none, label=<<font color="black">Call[5858]</font>>]
    node5858_name -> node5858 [arrowhead=none, color="black", style=dashed]
    node5858 [shape=cds, label=<<font color="black">%0 = memberExpr-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5858 -> node5859 [color="black"]
    node5859_name [shape=none, label=<<font color="black">Block[5859]</font>>]
    node5859_name -> node5859 [arrowhead=none, color="black", style=dashed]
    node5859 [shape=box, label=<<font color="black">[0] let ref = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5859 -> node5860 [color="black"]
    node5860_name [shape=none, label=<<font color="black">Call[5860]</font>>]
    node5860_name -> node5860 [arrowhead=none, color="black", style=dashed]
    node5860 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node5860 -> node5861 [color="black"]
    node5861_name [shape=none, label=<<font color="black">Block[5861]</font>>]
    node5861_name -> node5861 [arrowhead=none, color="black", style=dashed]
    node5861 [shape=box, label=<<font color="black">[0] let func = [? %1]<BR ALIGN="LEFT"/>[1] %2 = (? ref: &quot;ReferenceRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5861 -> node5862 [color="black"]
    node5862_name [shape=none, label=<<font color="black">Branch[5862]</font>>]
    node5862_name -> node5862 [arrowhead=none, color="black", style=dashed]
    node5862 [shape=diamond, label=<<font color="black">%2</font>> color="black" fillcolor="white", style=filled]
    node5862 -> node5863 [label=<<font color="black">true</font>> color="black"]
    node5862 -> node5867 [label=<<font color="black">false</font>> color="black"]
    node5863_name [shape=none, label=<<font color="black">Call[5863]</font>>]
    node5863_name -> node5863 [arrowhead=none, color="black", style=dashed]
    node5863 [shape=cds, label=<<font color="black">%3 = clo&lt;IsPropertyReference&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node5863 -> node5864 [color="black"]
    node5867_name [shape=none, label=<<font color="black">Branch[5867]</font>>]
    node5867_name -> node5867 [arrowhead=none, color="black", style=dashed]
    node5867 [shape=diamond, label=<<font color="black">%2</font>> color="black" fillcolor="white", style=filled]
    node5867 -> node5868 [label=<<font color="black">true</font>> color="black"]
    node5867 -> node5881 [label=<<font color="black">false</font>> color="black"]
    node5864_name [shape=none, label=<<font color="black">Block[5864]</font>>]
    node5864_name -> node5864 [arrowhead=none, color="black", style=dashed]
    node5864 [shape=box, label=<<font color="black">[0] %2 = (= %3 false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5864 -> node5865 [color="black"]
    node5868_name [shape=none, label=<<font color="black">Call[5868]</font>>]
    node5868_name -> node5868 [arrowhead=none, color="black", style=dashed]
    node5868 [shape=cds, label=<<font color="black">%4 = clo&lt;SameValue&gt;(func, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%eval%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node5868 -> node5869 [color="black"]
    node5881_name [shape=none, label=<<font color="black">Block[5881]</font>>]
    node5881_name -> node5881 [arrowhead=none, color="black", style=dashed]
    node5881 [shape=box, label=<<font color="black">[0] let thisCall = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5881 -> node5882 [color="black"]
    node5865_name [shape=none, label=<<font color="black">Branch[5865]</font>>]
    node5865_name -> node5865 [arrowhead=none, color="black", style=dashed]
    node5865 [shape=diamond, label=<<font color="black">%2</font>> color="black" fillcolor="white", style=filled]
    node5865 -> node5866 [label=<<font color="black">true</font>> color="black"]
    node5865 -> node5867 [label=<<font color="black">false</font>> color="black"]
    node5869_name [shape=none, label=<<font color="black">Branch[5869]</font>>]
    node5869_name -> node5869 [arrowhead=none, color="black", style=dashed]
    node5869 [shape=diamond, label=<<font color="black">(= %4 true)</font>> color="black" fillcolor="white", style=filled]
    node5869 -> node5870 [label=<<font color="black">true</font>> color="black"]
    node5869 -> node5881 [label=<<font color="black">false</font>> color="black"]
    node5882_name [shape=none, label=<<font color="black">Call[5882]</font>>]
    node5882_name -> node5882 [arrowhead=none, color="black", style=dashed]
    node5882 [shape=cds, label=<<font color="black">%7 = clo&lt;IsInTailPosition&gt;(thisCall)</font>> color="black" fillcolor="white", style=filled]
    node5882 -> node5883 [color="black"]
    node5866_name [shape=none, label=<<font color="black">Block[5866]</font>>]
    node5866_name -> node5866 [arrowhead=none, color="black", style=dashed]
    node5866 [shape=box, label=<<font color="black">[0] %2 = (= ref.ReferencedName &quot;eval&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5866 -> node5867 [color="black"]
    node5870_name [shape=none, label=<<font color="black">Call[5870]</font>>]
    node5870_name -> node5870 [arrowhead=none, color="black", style=dashed]
    node5870 [shape=cds, label=<<font color="black">%5 = arguments-&gt;ArgumentListEvaluation()</font>> color="black" fillcolor="white", style=filled]
    node5870 -> node5871 [color="black"]
    node5883_name [shape=none, label=<<font color="black">Block[5883]</font>>]
    node5883_name -> node5883 [arrowhead=none, color="black", style=dashed]
    node5883 [shape=box, label=<<font color="black">[0] let tailCall = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5883 -> node5884 [color="black"]
    node5871_name [shape=none, label=<<font color="black">Block[5871]</font>>]
    node5871_name -> node5871 [arrowhead=none, color="black", style=dashed]
    node5871 [shape=box, label=<<font color="black">[0] let argList = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5871 -> node5872 [color="black"]
    node5884_name [shape=none, label=<<font color="black">Call[5884]</font>>]
    node5884_name -> node5884 [arrowhead=none, color="black", style=dashed]
    node5884 [shape=cds, label=<<font color="black">%8 = clo&lt;EvaluateCall&gt;(func, ref, arguments, tailCall)</font>> color="black" fillcolor="white", style=filled]
    node5884 -> node5885 [color="black"]
    node5872_name [shape=none, label=<<font color="black">Branch[5872]</font>>]
    node5872_name -> node5872 [arrowhead=none, color="black", style=dashed]
    node5872 [shape=diamond, label=<<font color="black">(= argList.length 0)</font>> color="black" fillcolor="white", style=filled]
    node5872 -> node5873 [label=<<font color="black">true</font>> color="black"]
    node5872 -> node5874 [label=<<font color="black">false</font>> color="black"]
    node5885_name [shape=none, label=<<font color="black">Block[5885]</font>>]
    node5885_name -> node5885 [arrowhead=none, color="black", style=dashed]
    node5885 [shape=box, label=<<font color="black">[0] return [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5885 -> cluster1269_exit [color="black"]
    node5873_name [shape=none, label=<<font color="black">Block[5873]</font>>]
    node5873_name -> node5873 [arrowhead=none, color="black", style=dashed]
    node5873 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5873 -> cluster1269_exit [color="black"]
    node5874_name [shape=none, label=<<font color="black">Block[5874]</font>>]
    node5874_name -> node5874 [arrowhead=none, color="black", style=dashed]
    node5874 [shape=box, label=<<font color="black">[0] let evalArg = argList[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5874 -> node5875 [color="black"]
    node5875_name [shape=none, label=<<font color="black">Branch[5875]</font>>]
    node5875_name -> node5875 [arrowhead=none, color="black", style=dashed]
    node5875 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node5875 -> node5876 [label=<<font color="black">true</font>> color="black"]
    node5875 -> node5877 [label=<<font color="black">false</font>> color="black"]
    node5876_name [shape=none, label=<<font color="black">Block[5876]</font>>]
    node5876_name -> node5876 [arrowhead=none, color="black", style=dashed]
    node5876 [shape=box, label=<<font color="black">[0] let strictCaller = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5876 -> node5878 [color="black"]
    node5877_name [shape=none, label=<<font color="black">Block[5877]</font>>]
    node5877_name -> node5877 [arrowhead=none, color="black", style=dashed]
    node5877 [shape=box, label=<<font color="black">[0] let strictCaller = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5877 -> node5878 [color="black"]
    node5878_name [shape=none, label=<<font color="black">Block[5878]</font>>]
    node5878_name -> node5878 [arrowhead=none, color="black", style=dashed]
    node5878 [shape=box, label=<<font color="black">[0] let evalRealm = @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5878 -> node5879 [color="black"]
    node5879_name [shape=none, label=<<font color="black">Call[5879]</font>>]
    node5879_name -> node5879 [arrowhead=none, color="black", style=dashed]
    node5879 [shape=cds, label=<<font color="black">%6 = clo&lt;PerformEval&gt;(evalArg, evalRealm, strictCaller, true)</font>> color="black" fillcolor="white", style=filled]
    node5879 -> node5880 [color="black"]
    node5880_name [shape=none, label=<<font color="black">Block[5880]</font>>]
    node5880_name -> node5880 [arrowhead=none, color="black", style=dashed]
    node5880 [shape=box, label=<<font color="black">[0] return [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5880 -> cluster1269_exit [color="black"]
  }
}