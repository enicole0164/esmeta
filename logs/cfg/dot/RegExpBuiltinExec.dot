digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2313 {
    label = "def RegExpBuiltinExec(R: Unknown["InitializedRegExpInstance"], S: String): Normal[ArrayExoticObject | Null] | Abrupt"
    style = rounded
    cluster2313_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2313_entry_name -> cluster2313_entry [arrowhead=none, color="black", style=dashed]
    cluster2313_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2313_entry -> node14178 [color="black"]
    cluster2313_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2313_exit_name -> cluster2313_exit [arrowhead=none, color="black", style=dashed]
    cluster2313_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14178_name [shape=none, label=<<font color="black">Block[14178]</font>>]
    node14178_name -> node14178 [arrowhead=none, color="black", style=dashed]
    node14178 [shape=box, label=<<font color="black">[0] let length = S.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14178 -> node14179 [color="black"]
    node14179_name [shape=none, label=<<font color="black">Call[14179]</font>>]
    node14179_name -> node14179 [arrowhead=none, color="black", style=dashed]
    node14179 [shape=cds, label=<<font color="black">%0 = clo&lt;Get&gt;(R, &quot;lastIndex&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14179 -> node14180 [color="black"]
    node14180_name [shape=none, label=<<font color="black">Call[14180]</font>>]
    node14180_name -> node14180 [arrowhead=none, color="black", style=dashed]
    node14180 [shape=cds, label=<<font color="black">%1 = clo&lt;ToLength&gt;([? %0])</font>> color="black" fillcolor="white", style=filled]
    node14180 -> node14181 [color="black"]
    node14181_name [shape=none, label=<<font color="black">Block[14181]</font>>]
    node14181_name -> node14181 [arrowhead=none, color="black", style=dashed]
    node14181 [shape=box, label=<<font color="black">[0] let lastIndex = ([math] [? %1])<BR ALIGN="LEFT"/>[1] let flags = R.OriginalFlags<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14181 -> node14182 [color="black"]
    node14182_name [shape=none, label=<<font color="black">Branch[14182]</font>>]
    node14182_name -> node14182 [arrowhead=none, color="black", style=dashed]
    node14182 [shape=diamond, label=<<font color="black">(contains flags &quot;g&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14182 -> node14183 [label=<<font color="black">true</font>> color="black"]
    node14182 -> node14184 [label=<<font color="black">false</font>> color="black"]
    node14183_name [shape=none, label=<<font color="black">Block[14183]</font>>]
    node14183_name -> node14183 [arrowhead=none, color="black", style=dashed]
    node14183 [shape=box, label=<<font color="black">[0] let global = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14183 -> node14185 [color="black"]
    node14184_name [shape=none, label=<<font color="black">Block[14184]</font>>]
    node14184_name -> node14184 [arrowhead=none, color="black", style=dashed]
    node14184 [shape=box, label=<<font color="black">[0] let global = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14184 -> node14185 [color="black"]
    node14185_name [shape=none, label=<<font color="black">Branch[14185]</font>>]
    node14185_name -> node14185 [arrowhead=none, color="black", style=dashed]
    node14185 [shape=diamond, label=<<font color="black">(contains flags &quot;y&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14185 -> node14186 [label=<<font color="black">true</font>> color="black"]
    node14185 -> node14187 [label=<<font color="black">false</font>> color="black"]
    node14186_name [shape=none, label=<<font color="black">Block[14186]</font>>]
    node14186_name -> node14186 [arrowhead=none, color="black", style=dashed]
    node14186 [shape=box, label=<<font color="black">[0] let sticky = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14186 -> node14188 [color="black"]
    node14187_name [shape=none, label=<<font color="black">Block[14187]</font>>]
    node14187_name -> node14187 [arrowhead=none, color="black", style=dashed]
    node14187 [shape=box, label=<<font color="black">[0] let sticky = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14187 -> node14188 [color="black"]
    node14188_name [shape=none, label=<<font color="black">Branch[14188]</font>>]
    node14188_name -> node14188 [arrowhead=none, color="black", style=dashed]
    node14188 [shape=diamond, label=<<font color="black">(contains flags &quot;d&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14188 -> node14189 [label=<<font color="black">true</font>> color="black"]
    node14188 -> node14190 [label=<<font color="black">false</font>> color="black"]
    node14189_name [shape=none, label=<<font color="black">Block[14189]</font>>]
    node14189_name -> node14189 [arrowhead=none, color="black", style=dashed]
    node14189 [shape=box, label=<<font color="black">[0] let hasIndices = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14189 -> node14191 [color="black"]
    node14190_name [shape=none, label=<<font color="black">Block[14190]</font>>]
    node14190_name -> node14190 [arrowhead=none, color="black", style=dashed]
    node14190 [shape=box, label=<<font color="black">[0] let hasIndices = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14190 -> node14191 [color="black"]
    node14191_name [shape=none, label=<<font color="black">Branch[14191]</font>>]
    node14191_name -> node14191 [arrowhead=none, color="black", style=dashed]
    node14191 [shape=diamond, label=<<font color="black">(&amp;&amp; (= global false) (= sticky false))</font>> color="black" fillcolor="white", style=filled]
    node14191 -> node14192 [label=<<font color="black">true</font>> color="black"]
    node14191 -> node14193 [label=<<font color="black">false</font>> color="black"]
    node14192_name [shape=none, label=<<font color="black">Block[14192]</font>>]
    node14192_name -> node14192 [arrowhead=none, color="black", style=dashed]
    node14192 [shape=box, label=<<font color="black">[0] lastIndex = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14192 -> node14193 [color="black"]
    node14193_name [shape=none, label=<<font color="black">Block[14193]</font>>]
    node14193_name -> node14193 [arrowhead=none, color="black", style=dashed]
    node14193 [shape=box, label=<<font color="black">[0] let matcher = R.RegExpMatcher<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14193 -> node14194 [color="black"]
    node14194_name [shape=none, label=<<font color="black">Branch[14194]</font>>]
    node14194_name -> node14194 [arrowhead=none, color="black", style=dashed]
    node14194 [shape=diamond, label=<<font color="black">(contains flags &quot;u&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14194 -> node14195 [label=<<font color="black">true</font>> color="black"]
    node14194 -> node14196 [label=<<font color="black">false</font>> color="black"]
    node14195_name [shape=none, label=<<font color="black">Block[14195]</font>>]
    node14195_name -> node14195 [arrowhead=none, color="black", style=dashed]
    node14195 [shape=box, label=<<font color="black">[0] let fullUnicode = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14195 -> node14197 [color="black"]
    node14196_name [shape=none, label=<<font color="black">Block[14196]</font>>]
    node14196_name -> node14196 [arrowhead=none, color="black", style=dashed]
    node14196 [shape=box, label=<<font color="black">[0] let fullUnicode = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14196 -> node14197 [color="black"]
    node14197_name [shape=none, label=<<font color="black">Block[14197]</font>>]
    node14197_name -> node14197 [arrowhead=none, color="black", style=dashed]
    node14197 [shape=box, label=<<font color="black">[0] let matchSucceeded = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14197 -> node14198 [color="black"]
    node14198_name [shape=none, label=<<font color="black">Branch[14198]</font>>]
    node14198_name -> node14198 [arrowhead=none, color="black", style=dashed]
    node14198 [shape=diamond, label=<<font color="black">(= fullUnicode true)</font>> color="black" fillcolor="white", style=filled]
    node14198 -> node14199 [label=<<font color="black">true</font>> color="black"]
    node14198 -> node14201 [label=<<font color="black">false</font>> color="black"]
    node14199_name [shape=none, label=<<font color="black">Call[14199]</font>>]
    node14199_name -> node14199 [arrowhead=none, color="black", style=dashed]
    node14199 [shape=cds, label=<<font color="black">%2 = clo&lt;StringToCodePoints&gt;(S)</font>> color="black" fillcolor="white", style=filled]
    node14199 -> node14200 [color="black"]
    node14201_name [shape=none, label=<<font color="black">Block[14201]</font>>]
    node14201_name -> node14201 [arrowhead=none, color="black", style=dashed]
    node14201 [shape=box, label=<<font color="black">[0] (yet &quot;let _input_ be a List whose elements are the code units that are the elements of _S_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14201 -> node14202 [color="black"]
    node14200_name [shape=none, label=<<font color="black">Block[14200]</font>>]
    node14200_name -> node14200 [arrowhead=none, color="black", style=dashed]
    node14200 [shape=box, label=<<font color="black">[0] let input = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14200 -> node14202 [color="black"]
    node14202_name [shape=none, label=<<font color="black">Block[14202]</font>>]
    node14202_name -> node14202 [arrowhead=none, color="black", style=dashed]
    node14202 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14202 -> node14203 [color="black"]
    node14203_name [shape=none, label=<<font color="black">Branch[14203]</font>>]
    node14203_name -> node14203 [arrowhead=none, color="black", style=dashed]
    node14203 [shape=diamond, label=<<font color="black">(= matchSucceeded false)</font>> color="black" fillcolor="white", style=filled]
    node14203 -> node14204 [label=<<font color="black">true</font>> color="black"]
    node14203 -> node14219 [label=<<font color="black">false</font>> color="black"]
    node14204_name [shape=none, label=<<font color="black">Branch[14204]</font>>]
    node14204_name -> node14204 [arrowhead=none, color="black", style=dashed]
    node14204 [shape=diamond, label=<<font color="black">(&lt; length lastIndex)</font>> color="black" fillcolor="white", style=filled]
    node14204 -> node14205 [label=<<font color="black">true</font>> color="black"]
    node14204 -> node14209 [label=<<font color="black">false</font>> color="black"]
    node14219_name [shape=none, label=<<font color="black">Block[14219]</font>>]
    node14219_name -> node14219 [arrowhead=none, color="black", style=dashed]
    node14219 [shape=box, label=<<font color="black">[0] (yet &quot;Let _e_ be _r_'s _endIndex_ value.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14219 -> node14220 [color="black"]
    node14205_name [shape=none, label=<<font color="black">Branch[14205]</font>>]
    node14205_name -> node14205 [arrowhead=none, color="black", style=dashed]
    node14205 [shape=diamond, label=<<font color="black">(|| (= global true) (= sticky true))</font>> color="black" fillcolor="white", style=filled]
    node14205 -> node14206 [label=<<font color="black">true</font>> color="black"]
    node14205 -> node14208 [label=<<font color="black">false</font>> color="black"]
    node14209_name [shape=none, label=<<font color="black">Block[14209]</font>>]
    node14209_name -> node14209 [arrowhead=none, color="black", style=dashed]
    node14209 [shape=box, label=<<font color="black">[0] (yet &quot;Let _inputIndex_ be the index into _input_ of the character that was obtained from element _lastIndex_ of _S_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14209 -> node14210 [color="black"]
    node14220_name [shape=none, label=<<font color="black">Branch[14220]</font>>]
    node14220_name -> node14220 [arrowhead=none, color="black", style=dashed]
    node14220 [shape=diamond, label=<<font color="black">(= fullUnicode true)</font>> color="black" fillcolor="white", style=filled]
    node14220 -> node14221 [label=<<font color="black">true</font>> color="black"]
    node14220 -> node14223 [label=<<font color="black">false</font>> color="black"]
    node14206_name [shape=none, label=<<font color="black">Call[14206]</font>>]
    node14206_name -> node14206 [arrowhead=none, color="black", style=dashed]
    node14206 [shape=cds, label=<<font color="black">%3 = clo&lt;Set&gt;(R, &quot;lastIndex&quot;, 0.0f, true)</font>> color="black" fillcolor="white", style=filled]
    node14206 -> node14207 [color="black"]
    node14208_name [shape=none, label=<<font color="black">Block[14208]</font>>]
    node14208_name -> node14208 [arrowhead=none, color="black", style=dashed]
    node14208 [shape=box, label=<<font color="black">[0] return null<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14208 -> cluster2313_exit [color="black"]
    node14210_name [shape=none, label=<<font color="black">Call[14210]</font>>]
    node14210_name -> node14210 [arrowhead=none, color="black", style=dashed]
    node14210 [shape=cds, label=<<font color="black">%4 = matcher(input, inputIndex)</font>> color="black" fillcolor="white", style=filled]
    node14210 -> node14211 [color="black"]
    node14221_name [shape=none, label=<<font color="black">Call[14221]</font>>]
    node14221_name -> node14221 [arrowhead=none, color="black", style=dashed]
    node14221 [shape=cds, label=<<font color="black">%7 = clo&lt;GetStringIndex&gt;(S, e)</font>> color="black" fillcolor="white", style=filled]
    node14221 -> node14222 [color="black"]
    node14223_name [shape=none, label=<<font color="black">Branch[14223]</font>>]
    node14223_name -> node14223 [arrowhead=none, color="black", style=dashed]
    node14223 [shape=diamond, label=<<font color="black">(|| (= global true) (= sticky true))</font>> color="black" fillcolor="white", style=filled]
    node14223 -> node14224 [label=<<font color="black">true</font>> color="black"]
    node14223 -> node14226 [label=<<font color="black">false</font>> color="black"]
    node14207_name [shape=none, label=<<font color="black">Block[14207]</font>>]
    node14207_name -> node14207 [arrowhead=none, color="black", style=dashed]
    node14207 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14207 -> node14208 [color="black"]
    node14211_name [shape=none, label=<<font color="black">Block[14211]</font>>]
    node14211_name -> node14211 [arrowhead=none, color="black", style=dashed]
    node14211 [shape=box, label=<<font color="black">[0] let r = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14211 -> node14212 [color="black"]
    node14222_name [shape=none, label=<<font color="black">Block[14222]</font>>]
    node14222_name -> node14222 [arrowhead=none, color="black", style=dashed]
    node14222 [shape=box, label=<<font color="black">[0] e = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14222 -> node14223 [color="black"]
    node14224_name [shape=none, label=<<font color="black">Call[14224]</font>>]
    node14224_name -> node14224 [arrowhead=none, color="black", style=dashed]
    node14224 [shape=cds, label=<<font color="black">%8 = clo&lt;Set&gt;(R, &quot;lastIndex&quot;, ([number] e), true)</font>> color="black" fillcolor="white", style=filled]
    node14224 -> node14225 [color="black"]
    node14226_name [shape=none, label=<<font color="black">Block[14226]</font>>]
    node14226_name -> node14226 [arrowhead=none, color="black", style=dashed]
    node14226 [shape=box, label=<<font color="black">[0] (yet &quot;Let _n_ be the number of elements in _r_'s _captures_ List. (This is the same value as &lt;emu-xref href=\&quot;#sec-notation\&quot;&gt;&lt;/emu-xref&gt;'s _NcapturingParens_.)&quot;)<BR ALIGN="LEFT"/>[1] assert (&lt; n (- (** 2 32) 1))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14226 -> node14227 [color="black"]
    node14212_name [shape=none, label=<<font color="black">Branch[14212]</font>>]
    node14212_name -> node14212 [arrowhead=none, color="black", style=dashed]
    node14212 [shape=diamond, label=<<font color="black">(= r ~failure~)</font>> color="black" fillcolor="white", style=filled]
    node14212 -> node14213 [label=<<font color="black">true</font>> color="black"]
    node14212 -> node14218 [label=<<font color="black">false</font>> color="black"]
    node14225_name [shape=none, label=<<font color="black">Block[14225]</font>>]
    node14225_name -> node14225 [arrowhead=none, color="black", style=dashed]
    node14225 [shape=box, label=<<font color="black">[0] [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14225 -> node14226 [color="black"]
    node14227_name [shape=none, label=<<font color="black">Call[14227]</font>>]
    node14227_name -> node14227 [arrowhead=none, color="black", style=dashed]
    node14227 [shape=cds, label=<<font color="black">%9 = clo&lt;ArrayCreate&gt;((+ n 1))</font>> color="black" fillcolor="white", style=filled]
    node14227 -> node14228 [color="black"]
    node14213_name [shape=none, label=<<font color="black">Branch[14213]</font>>]
    node14213_name -> node14213 [arrowhead=none, color="black", style=dashed]
    node14213 [shape=diamond, label=<<font color="black">(= sticky true)</font>> color="black" fillcolor="white", style=filled]
    node14213 -> node14214 [label=<<font color="black">true</font>> color="black"]
    node14213 -> node14216 [label=<<font color="black">false</font>> color="black"]
    node14218_name [shape=none, label=<<font color="black">Block[14218]</font>>]
    node14218_name -> node14218 [arrowhead=none, color="black", style=dashed]
    node14218 [shape=box, label=<<font color="black">[0] assert (? r: &quot;State&quot;)<BR ALIGN="LEFT"/>[1] matchSucceeded = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14218 -> node14203 [color="black"]
    node14228_name [shape=none, label=<<font color="black">Block[14228]</font>>]
    node14228_name -> node14228 [arrowhead=none, color="black", style=dashed]
    node14228 [shape=box, label=<<font color="black">[0] let A = [! %9]<BR ALIGN="LEFT"/>[1] assert (yet &quot;The mathematical value of _A_'s *\&quot;length\&quot;* property is _n_ + 1.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14228 -> node14229 [color="black"]
    node14214_name [shape=none, label=<<font color="black">Call[14214]</font>>]
    node14214_name -> node14214 [arrowhead=none, color="black", style=dashed]
    node14214 [shape=cds, label=<<font color="black">%5 = clo&lt;Set&gt;(R, &quot;lastIndex&quot;, 0.0f, true)</font>> color="black" fillcolor="white", style=filled]
    node14214 -> node14215 [color="black"]
    node14216_name [shape=none, label=<<font color="black">Call[14216]</font>>]
    node14216_name -> node14216 [arrowhead=none, color="black", style=dashed]
    node14216 [shape=cds, label=<<font color="black">%6 = clo&lt;AdvanceStringIndex&gt;(S, lastIndex, fullUnicode)</font>> color="black" fillcolor="white", style=filled]
    node14216 -> node14217 [color="black"]
    node14229_name [shape=none, label=<<font color="black">Call[14229]</font>>]
    node14229_name -> node14229 [arrowhead=none, color="black", style=dashed]
    node14229 [shape=cds, label=<<font color="black">%10 = clo&lt;CreateDataPropertyOrThrow&gt;(A, &quot;index&quot;, ([number] lastIndex))</font>> color="black" fillcolor="white", style=filled]
    node14229 -> node14230 [color="black"]
    node14215_name [shape=none, label=<<font color="black">Block[14215]</font>>]
    node14215_name -> node14215 [arrowhead=none, color="black", style=dashed]
    node14215 [shape=box, label=<<font color="black">[0] [? %5]<BR ALIGN="LEFT"/>[1] return null<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14215 -> cluster2313_exit [color="black"]
    node14217_name [shape=none, label=<<font color="black">Block[14217]</font>>]
    node14217_name -> node14217 [arrowhead=none, color="black", style=dashed]
    node14217 [shape=box, label=<<font color="black">[0] lastIndex = %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14217 -> node14203 [color="black"]
    node14230_name [shape=none, label=<<font color="black">Block[14230]</font>>]
    node14230_name -> node14230 [arrowhead=none, color="black", style=dashed]
    node14230 [shape=box, label=<<font color="black">[0] [! %10]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14230 -> node14231 [color="black"]
    node14231_name [shape=none, label=<<font color="black">Call[14231]</font>>]
    node14231_name -> node14231 [arrowhead=none, color="black", style=dashed]
    node14231 [shape=cds, label=<<font color="black">%11 = clo&lt;CreateDataPropertyOrThrow&gt;(A, &quot;input&quot;, S)</font>> color="black" fillcolor="white", style=filled]
    node14231 -> node14232 [color="black"]
    node14232_name [shape=none, label=<<font color="black">Block[14232]</font>>]
    node14232_name -> node14232 [arrowhead=none, color="black", style=dashed]
    node14232 [shape=box, label=<<font color="black">[0] [! %11]<BR ALIGN="LEFT"/>[1] let match = (new MatchRecord(&quot;StartIndex&quot; -&gt; lastIndex, &quot;EndIndex&quot; -&gt; e))[#989]<BR ALIGN="LEFT"/>[2] let indices = (new [])[#990]<BR ALIGN="LEFT"/>[3] let groupNames = (new [])[#991]<BR ALIGN="LEFT"/>[4] push indices &lt; match<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14232 -> node14233 [color="black"]
    node14233_name [shape=none, label=<<font color="black">Call[14233]</font>>]
    node14233_name -> node14233 [arrowhead=none, color="black", style=dashed]
    node14233 [shape=cds, label=<<font color="black">%12 = clo&lt;GetMatchString&gt;(S, match)</font>> color="black" fillcolor="white", style=filled]
    node14233 -> node14234 [color="black"]
    node14234_name [shape=none, label=<<font color="black">Block[14234]</font>>]
    node14234_name -> node14234 [arrowhead=none, color="black", style=dashed]
    node14234 [shape=box, label=<<font color="black">[0] let matchedSubstr = %12<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14234 -> node14235 [color="black"]
    node14235_name [shape=none, label=<<font color="black">Call[14235]</font>>]
    node14235_name -> node14235 [arrowhead=none, color="black", style=dashed]
    node14235 [shape=cds, label=<<font color="black">%13 = clo&lt;CreateDataPropertyOrThrow&gt;(A, &quot;0&quot;, matchedSubstr)</font>> color="black" fillcolor="white", style=filled]
    node14235 -> node14236 [color="black"]
    node14236_name [shape=none, label=<<font color="black">Block[14236]</font>>]
    node14236_name -> node14236 [arrowhead=none, color="black", style=dashed]
    node14236 [shape=box, label=<<font color="black">[0] [! %13]<BR ALIGN="LEFT"/>[1] (yet &quot;If _R_ contains any |GroupName|, then\n  1. Let _groups_ be OrdinaryObjectCreate(*null*).\n  1. Let _hasGroups_ be *true*.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Else,\n  1. Let _groups_ be *undefined*.\n  1. Let _hasGroups_ be *false*.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14236 -> node14237 [color="black"]
    node14237_name [shape=none, label=<<font color="black">Call[14237]</font>>]
    node14237_name -> node14237 [arrowhead=none, color="black", style=dashed]
    node14237 [shape=cds, label=<<font color="black">%14 = clo&lt;CreateDataPropertyOrThrow&gt;(A, &quot;groups&quot;, groups)</font>> color="black" fillcolor="white", style=filled]
    node14237 -> node14238 [color="black"]
    node14238_name [shape=none, label=<<font color="black">Block[14238]</font>>]
    node14238_name -> node14238 [arrowhead=none, color="black", style=dashed]
    node14238 [shape=box, label=<<font color="black">[0] [! %14]<BR ALIGN="LEFT"/>[1] (yet &quot;For each integer _i_ such that _i_ &ge; 1 and _i_ &le; _n_, in ascending order, do\n  1. Let _captureI_ be _i_&lt;sup&gt;th&lt;/sup&gt; element of _r_'s _captures_ List.\n  1. If _captureI_ is *undefined*, then\n    1. Let _capturedValue_ be *undefined*.\n    1. Append *undefined* to _indices_.\n  1. Else,\n    1. Let _captureStart_ be _captureI_'s _startIndex_.\n    1. Let _captureEnd_ be _captureI_'s _endIndex_.\n    1. If _fullUnicode_ is *true*, then\n      1. Set _captureStart_ to GetStringIndex(_S_, _captureStart_).\n      1. Set _captureEnd_ to GetStringIndex(_S_, _captureEnd_).\n    1. Let _capture_ be Match Record { [[StartIndex]]: _captureStart_, [[EndIndex]]: _captureEnd_ }.\n    1. Let _capturedValue_ be GetMatchString(_S_, _capture_).\n    1. Append _capture_ to _indices_.\n  1. Perform ! CreateDataPropertyOrThrow(_A_, ! ToString(𝔽(_i_)), _capturedValue_).\n  1. If the _i_&lt;sup&gt;th&lt;/sup&gt; capture of _R_ was defined with a |GroupName|, then\n    1. Let _s_ be the CapturingGroupName of the corresponding |RegExpIdentifierName|.\n    1. Perform ! CreateDataPropertyOrThrow(_groups_, _s_, _capturedValue_).\n    1. Append _s_ to _groupNames_.\n  1. Else,\n    1. Append *undefined* to _groupNames_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14238 -> node14239 [color="black"]
    node14239_name [shape=none, label=<<font color="black">Branch[14239]</font>>]
    node14239_name -> node14239 [arrowhead=none, color="black", style=dashed]
    node14239 [shape=diamond, label=<<font color="black">(= hasIndices true)</font>> color="black" fillcolor="white", style=filled]
    node14239 -> node14240 [label=<<font color="black">true</font>> color="black"]
    node14239 -> node14244 [label=<<font color="black">false</font>> color="black"]
    node14240_name [shape=none, label=<<font color="black">Call[14240]</font>>]
    node14240_name -> node14240 [arrowhead=none, color="black", style=dashed]
    node14240 [shape=cds, label=<<font color="black">%15 = clo&lt;MakeMatchIndicesIndexPairArray&gt;(S, indices, groupNames, hasGroups)</font>> color="black" fillcolor="white", style=filled]
    node14240 -> node14241 [color="black"]
    node14244_name [shape=none, label=<<font color="black">Block[14244]</font>>]
    node14244_name -> node14244 [arrowhead=none, color="black", style=dashed]
    node14244 [shape=box, label=<<font color="black">[0] return A<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14244 -> cluster2313_exit [color="black"]
    node14241_name [shape=none, label=<<font color="black">Block[14241]</font>>]
    node14241_name -> node14241 [arrowhead=none, color="black", style=dashed]
    node14241 [shape=box, label=<<font color="black">[0] let indicesArray = %15<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14241 -> node14242 [color="black"]
    node14242_name [shape=none, label=<<font color="black">Call[14242]</font>>]
    node14242_name -> node14242 [arrowhead=none, color="black", style=dashed]
    node14242 [shape=cds, label=<<font color="black">%16 = clo&lt;CreateDataPropertyOrThrow&gt;(A, &quot;indices&quot;, indicesArray)</font>> color="black" fillcolor="white", style=filled]
    node14242 -> node14243 [color="black"]
    node14243_name [shape=none, label=<<font color="black">Block[14243]</font>>]
    node14243_name -> node14243 [arrowhead=none, color="black", style=dashed]
    node14243 [shape=box, label=<<font color="black">[0] [! %16]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14243 -> node14244 [color="black"]
  }
}