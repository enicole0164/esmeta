digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1274 {
    label = "def <SYNTAX>:SuperCall[0,0].Evaluation(this: Ast:SuperCall[0,0]): Unknown"
    style = rounded
    cluster1274_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1274_entry_name -> cluster1274_entry [arrowhead=none, color="black", style=dashed]
    cluster1274_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1274_entry -> node5940 [color="black"]
    cluster1274_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1274_exit_name -> cluster1274_exit [arrowhead=none, color="black", style=dashed]
    cluster1274_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5940_name [shape=none, label=<<font color="black">Call[5940]</font>>]
    node5940_name -> node5940 [arrowhead=none, color="black", style=dashed]
    node5940 [shape=cds, label=<<font color="black">%0 = clo&lt;GetNewTarget&gt;()</font>> color="black" fillcolor="white", style=filled]
    node5940 -> node5941 [color="black"]
    node5941_name [shape=none, label=<<font color="black">Block[5941]</font>>]
    node5941_name -> node5941 [arrowhead=none, color="black", style=dashed]
    node5941 [shape=box, label=<<font color="black">[0] let newTarget = %0<BR ALIGN="LEFT"/>[1] assert (= (typeof newTarget) @Object)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5941 -> node5942 [color="black"]
    node5942_name [shape=none, label=<<font color="black">Call[5942]</font>>]
    node5942_name -> node5942 [arrowhead=none, color="black", style=dashed]
    node5942 [shape=cds, label=<<font color="black">%1 = clo&lt;GetSuperConstructor&gt;()</font>> color="black" fillcolor="white", style=filled]
    node5942 -> node5943 [color="black"]
    node5943_name [shape=none, label=<<font color="black">Block[5943]</font>>]
    node5943_name -> node5943 [arrowhead=none, color="black", style=dashed]
    node5943 [shape=box, label=<<font color="black">[0] let func = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5943 -> node5944 [color="black"]
    node5944_name [shape=none, label=<<font color="black">Call[5944]</font>>]
    node5944_name -> node5944 [arrowhead=none, color="black", style=dashed]
    node5944 [shape=cds, label=<<font color="black">%2 = this[0]-&gt;ArgumentListEvaluation()</font>> color="black" fillcolor="white", style=filled]
    node5944 -> node5945 [color="black"]
    node5945_name [shape=none, label=<<font color="black">Block[5945]</font>>]
    node5945_name -> node5945 [arrowhead=none, color="black", style=dashed]
    node5945 [shape=box, label=<<font color="black">[0] let argList = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5945 -> node5946 [color="black"]
    node5946_name [shape=none, label=<<font color="black">Call[5946]</font>>]
    node5946_name -> node5946 [arrowhead=none, color="black", style=dashed]
    node5946 [shape=cds, label=<<font color="black">%3 = clo&lt;IsConstructor&gt;(func)</font>> color="black" fillcolor="white", style=filled]
    node5946 -> node5947 [color="black"]
    node5947_name [shape=none, label=<<font color="black">Branch[5947]</font>>]
    node5947_name -> node5947 [arrowhead=none, color="black", style=dashed]
    node5947 [shape=diamond, label=<<font color="black">(= %3 false)</font>> color="black" fillcolor="white", style=filled]
    node5947 -> node5948 [label=<<font color="black">true</font>> color="black"]
    node5947 -> node5949 [label=<<font color="black">false</font>> color="black"]
    node5948_name [shape=none, label=<<font color="black">Block[5948]</font>>]
    node5948_name -> node5948 [arrowhead=none, color="black", style=dashed]
    node5948 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#573])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5948 -> cluster1274_exit [color="black"]
    node5949_name [shape=none, label=<<font color="black">Call[5949]</font>>]
    node5949_name -> node5949 [arrowhead=none, color="black", style=dashed]
    node5949 [shape=cds, label=<<font color="black">%4 = clo&lt;Construct&gt;(func, argList, newTarget)</font>> color="black" fillcolor="white", style=filled]
    node5949 -> node5950 [color="black"]
    node5950_name [shape=none, label=<<font color="black">Block[5950]</font>>]
    node5950_name -> node5950 [arrowhead=none, color="black", style=dashed]
    node5950 [shape=box, label=<<font color="black">[0] let result = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5950 -> node5951 [color="black"]
    node5951_name [shape=none, label=<<font color="black">Call[5951]</font>>]
    node5951_name -> node5951 [arrowhead=none, color="black", style=dashed]
    node5951 [shape=cds, label=<<font color="black">%5 = clo&lt;GetThisEnvironment&gt;()</font>> color="black" fillcolor="white", style=filled]
    node5951 -> node5952 [color="black"]
    node5952_name [shape=none, label=<<font color="black">Block[5952]</font>>]
    node5952_name -> node5952 [arrowhead=none, color="black", style=dashed]
    node5952 [shape=box, label=<<font color="black">[0] let thisER = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5952 -> node5953 [color="black"]
    node5953_name [shape=none, label=<<font color="black">Call[5953]</font>>]
    node5953_name -> node5953 [arrowhead=none, color="black", style=dashed]
    node5953 [shape=cds, label=<<font color="black">%6 = thisER-&gt;BindThisValue(result)</font>> color="black" fillcolor="white", style=filled]
    node5953 -> node5954 [color="black"]
    node5954_name [shape=none, label=<<font color="black">Block[5954]</font>>]
    node5954_name -> node5954 [arrowhead=none, color="black", style=dashed]
    node5954 [shape=box, label=<<font color="black">[0] [? %6]<BR ALIGN="LEFT"/>[1] let F = thisER.FunctionObject<BR ALIGN="LEFT"/>[2] assert (? F: &quot;ECMAScriptFunctionObject&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5954 -> node5955 [color="black"]
    node5955_name [shape=none, label=<<font color="black">Call[5955]</font>>]
    node5955_name -> node5955 [arrowhead=none, color="black", style=dashed]
    node5955 [shape=cds, label=<<font color="black">%7 = clo&lt;InitializeInstanceElements&gt;(result, F)</font>> color="black" fillcolor="white", style=filled]
    node5955 -> node5956 [color="black"]
    node5956_name [shape=none, label=<<font color="black">Block[5956]</font>>]
    node5956_name -> node5956 [arrowhead=none, color="black", style=dashed]
    node5956 [shape=box, label=<<font color="black">[0] [? %7]<BR ALIGN="LEFT"/>[1] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5956 -> cluster1274_exit [color="black"]
  }
}