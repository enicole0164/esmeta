digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1885 {
    label = "def <CONC>:CyclicModuleRecord.Link(module: CyclicModuleRecord): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1885_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1885_entry_name -> cluster1885_entry [arrowhead=none, color="black", style=dashed]
    cluster1885_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1885_entry -> node10099 [color="black"]
    cluster1885_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1885_exit_name -> cluster1885_exit [arrowhead=none, color="black", style=dashed]
    cluster1885_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10099_name [shape=none, label=<<font color="black">Block[10099]</font>>]
    node10099_name -> node10099 [arrowhead=none, color="black", style=dashed]
    node10099 [shape=box, label=<<font color="black">[0] assert (! (|| (= module.Status ~linking~) (= module.Status ~evaluating~)))<BR ALIGN="LEFT"/>[1] let stack = (new [])[#769]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10099 -> node10100 [color="black"]
    node10100_name [shape=none, label=<<font color="black">Call[10100]</font>>]
    node10100_name -> node10100 [arrowhead=none, color="black", style=dashed]
    node10100 [shape=cds, label=<<font color="black">%0 = clo&lt;InnerModuleLinking&gt;(module, stack, 0)</font>> color="black" fillcolor="white", style=filled]
    node10100 -> node10101 [color="black"]
    node10101_name [shape=none, label=<<font color="black">Call[10101]</font>>]
    node10101_name -> node10101 [arrowhead=none, color="black", style=dashed]
    node10101 [shape=cds, label=<<font color="black">%1 = clo&lt;Completion&gt;(%0)</font>> color="black" fillcolor="white", style=filled]
    node10101 -> node10102 [color="black"]
    node10102_name [shape=none, label=<<font color="black">Block[10102]</font>>]
    node10102_name -> node10102 [arrowhead=none, color="black", style=dashed]
    node10102 [shape=box, label=<<font color="black">[0] let result = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10102 -> node10103 [color="black"]
    node10103_name [shape=none, label=<<font color="black">Branch[10103]</font>>]
    node10103_name -> node10103 [arrowhead=none, color="black", style=dashed]
    node10103 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? result) (! (= result.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node10103 -> node10104 [label=<<font color="black">true</font>> color="black"]
    node10103 -> node10108 [label=<<font color="black">false</font>> color="black"]
    node10104_name [shape=none, label=<<font color="black">Block[10104]</font>>]
    node10104_name -> node10104 [arrowhead=none, color="black", style=dashed]
    node10104 [shape=box, label=<<font color="black">[0] %3 = stack<BR ALIGN="LEFT"/>[1] %2 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10104 -> node10105 [color="black"]
    node10108_name [shape=none, label=<<font color="black">Block[10108]</font>>]
    node10108_name -> node10108 [arrowhead=none, color="black", style=dashed]
    node10108 [shape=box, label=<<font color="black">[0] assert (|| (|| (= module.Status ~linked~) (= module.Status ~evaluating-async~)) (= module.Status ~evaluated~))<BR ALIGN="LEFT"/>[1] assert (= stack.length 0)<BR ALIGN="LEFT"/>[2] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10108 -> cluster1885_exit [color="black"]
    node10105_name [shape=none, label=<<font color="black">Branch[10105]</font>>]
    node10105_name -> node10105 [arrowhead=none, color="black", style=dashed]
    node10105 [shape=diamond, label=<<font color="black">(&lt; %2 %3.length)</font>> color="black" fillcolor="white", style=filled]
    node10105 -> node10106 [label=<<font color="black">true</font>> color="black"]
    node10105 -> node10107 [label=<<font color="black">false</font>> color="black"]
    node10106_name [shape=none, label=<<font color="black">Block[10106]</font>>]
    node10106_name -> node10106 [arrowhead=none, color="black", style=dashed]
    node10106 [shape=box, label=<<font color="black">[0] let m = %3[%2]<BR ALIGN="LEFT"/>[1] assert (= m.Status ~linking~)<BR ALIGN="LEFT"/>[2] m.Status = ~unlinked~<BR ALIGN="LEFT"/>[3] %2 = (+ %2 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10106 -> node10105 [color="black"]
    node10107_name [shape=none, label=<<font color="black">Block[10107]</font>>]
    node10107_name -> node10107 [arrowhead=none, color="black", style=dashed]
    node10107 [shape=box, label=<<font color="black">[0] assert (= module.Status ~unlinked~)<BR ALIGN="LEFT"/>[1] return [? result]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10107 -> cluster1885_exit [color="black"]
  }
}