digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2493 {
    label = "def <BUILTIN>:INTRINSICS.SharedArrayBuffer.prototype.slice(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2493_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2493_entry_name -> cluster2493_entry [arrowhead=none, color="black", style=dashed]
    cluster2493_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2493_entry -> node17577 [color="black"]
    cluster2493_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2493_exit_name -> cluster2493_exit [arrowhead=none, color="black", style=dashed]
    cluster2493_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17577_name [shape=none, label=<<font color="black">Branch[17577]</font>>]
    node17577_name -> node17577 [arrowhead=none, color="black", style=dashed]
    node17577 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17577 -> node17578 [label=<<font color="black">true</font>> color="black"]
    node17577 -> node17579 [label=<<font color="black">false</font>> color="black"]
    node17578_name [shape=none, label=<<font color="black">Block[17578]</font>>]
    node17578_name -> node17578 [arrowhead=none, color="black", style=dashed]
    node17578 [shape=box, label=<<font color="black">[0] let start = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17578 -> node17580 [color="black"]
    node17579_name [shape=none, label=<<font color="black">Block[17579]</font>>]
    node17579_name -> node17579 [arrowhead=none, color="black", style=dashed]
    node17579 [shape=box, label=<<font color="black">[0] let start = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17579 -> node17580 [color="black"]
    node17580_name [shape=none, label=<<font color="black">Branch[17580]</font>>]
    node17580_name -> node17580 [arrowhead=none, color="black", style=dashed]
    node17580 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17580 -> node17581 [label=<<font color="black">true</font>> color="black"]
    node17580 -> node17582 [label=<<font color="black">false</font>> color="black"]
    node17581_name [shape=none, label=<<font color="black">Block[17581]</font>>]
    node17581_name -> node17581 [arrowhead=none, color="black", style=dashed]
    node17581 [shape=box, label=<<font color="black">[0] let end = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17581 -> node17583 [color="black"]
    node17582_name [shape=none, label=<<font color="black">Block[17582]</font>>]
    node17582_name -> node17582 [arrowhead=none, color="black", style=dashed]
    node17582 [shape=box, label=<<font color="black">[0] let end = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17582 -> node17583 [color="black"]
    node17583_name [shape=none, label=<<font color="black">Block[17583]</font>>]
    node17583_name -> node17583 [arrowhead=none, color="black", style=dashed]
    node17583 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17583 -> node17584 [color="black"]
    node17584_name [shape=none, label=<<font color="black">Call[17584]</font>>]
    node17584_name -> node17584 [arrowhead=none, color="black", style=dashed]
    node17584 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;ArrayBufferData&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17584 -> node17585 [color="black"]
    node17585_name [shape=none, label=<<font color="black">Block[17585]</font>>]
    node17585_name -> node17585 [arrowhead=none, color="black", style=dashed]
    node17585 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17585 -> node17586 [color="black"]
    node17586_name [shape=none, label=<<font color="black">Call[17586]</font>>]
    node17586_name -> node17586 [arrowhead=none, color="black", style=dashed]
    node17586 [shape=cds, label=<<font color="black">%1 = clo&lt;IsSharedArrayBuffer&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node17586 -> node17587 [color="black"]
    node17587_name [shape=none, label=<<font color="black">Branch[17587]</font>>]
    node17587_name -> node17587 [arrowhead=none, color="black", style=dashed]
    node17587 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node17587 -> node17588 [label=<<font color="black">true</font>> color="black"]
    node17587 -> node17589 [label=<<font color="black">false</font>> color="black"]
    node17588_name [shape=none, label=<<font color="black">Block[17588]</font>>]
    node17588_name -> node17588 [arrowhead=none, color="black", style=dashed]
    node17588 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1163])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17588 -> cluster2493_exit [color="black"]
    node17589_name [shape=none, label=<<font color="black">Block[17589]</font>>]
    node17589_name -> node17589 [arrowhead=none, color="black", style=dashed]
    node17589 [shape=box, label=<<font color="black">[0] let len = O.ArrayBufferByteLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17589 -> node17590 [color="black"]
    node17590_name [shape=none, label=<<font color="black">Call[17590]</font>>]
    node17590_name -> node17590 [arrowhead=none, color="black", style=dashed]
    node17590 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(start)</font>> color="black" fillcolor="white", style=filled]
    node17590 -> node17591 [color="black"]
    node17591_name [shape=none, label=<<font color="black">Block[17591]</font>>]
    node17591_name -> node17591 [arrowhead=none, color="black", style=dashed]
    node17591 [shape=box, label=<<font color="black">[0] let relativeStart = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17591 -> node17592 [color="black"]
    node17592_name [shape=none, label=<<font color="black">Branch[17592]</font>>]
    node17592_name -> node17592 [arrowhead=none, color="black", style=dashed]
    node17592 [shape=diamond, label=<<font color="black">(= relativeStart -INF)</font>> color="black" fillcolor="white", style=filled]
    node17592 -> node17593 [label=<<font color="black">true</font>> color="black"]
    node17592 -> node17594 [label=<<font color="black">false</font>> color="black"]
    node17593_name [shape=none, label=<<font color="black">Block[17593]</font>>]
    node17593_name -> node17593 [arrowhead=none, color="black", style=dashed]
    node17593 [shape=box, label=<<font color="black">[0] let first = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17593 -> node17597 [color="black"]
    node17594_name [shape=none, label=<<font color="black">Branch[17594]</font>>]
    node17594_name -> node17594 [arrowhead=none, color="black", style=dashed]
    node17594 [shape=diamond, label=<<font color="black">(&lt; relativeStart 0)</font>> color="black" fillcolor="white", style=filled]
    node17594 -> node17595 [label=<<font color="black">true</font>> color="black"]
    node17594 -> node17596 [label=<<font color="black">false</font>> color="black"]
    node17597_name [shape=none, label=<<font color="black">Branch[17597]</font>>]
    node17597_name -> node17597 [arrowhead=none, color="black", style=dashed]
    node17597 [shape=diamond, label=<<font color="black">(= end undefined)</font>> color="black" fillcolor="white", style=filled]
    node17597 -> node17598 [label=<<font color="black">true</font>> color="black"]
    node17597 -> node17599 [label=<<font color="black">false</font>> color="black"]
    node17595_name [shape=none, label=<<font color="black">Block[17595]</font>>]
    node17595_name -> node17595 [arrowhead=none, color="black", style=dashed]
    node17595 [shape=box, label=<<font color="black">[0] let first = (max (+ len relativeStart) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17595 -> node17597 [color="black"]
    node17596_name [shape=none, label=<<font color="black">Block[17596]</font>>]
    node17596_name -> node17596 [arrowhead=none, color="black", style=dashed]
    node17596 [shape=box, label=<<font color="black">[0] let first = (min relativeStart len)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17596 -> node17597 [color="black"]
    node17598_name [shape=none, label=<<font color="black">Block[17598]</font>>]
    node17598_name -> node17598 [arrowhead=none, color="black", style=dashed]
    node17598 [shape=box, label=<<font color="black">[0] let relativeEnd = len<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17598 -> node17601 [color="black"]
    node17599_name [shape=none, label=<<font color="black">Call[17599]</font>>]
    node17599_name -> node17599 [arrowhead=none, color="black", style=dashed]
    node17599 [shape=cds, label=<<font color="black">%3 = clo&lt;ToIntegerOrInfinity&gt;(end)</font>> color="black" fillcolor="white", style=filled]
    node17599 -> node17600 [color="black"]
    node17601_name [shape=none, label=<<font color="black">Branch[17601]</font>>]
    node17601_name -> node17601 [arrowhead=none, color="black", style=dashed]
    node17601 [shape=diamond, label=<<font color="black">(= relativeEnd -INF)</font>> color="black" fillcolor="white", style=filled]
    node17601 -> node17602 [label=<<font color="black">true</font>> color="black"]
    node17601 -> node17603 [label=<<font color="black">false</font>> color="black"]
    node17600_name [shape=none, label=<<font color="black">Block[17600]</font>>]
    node17600_name -> node17600 [arrowhead=none, color="black", style=dashed]
    node17600 [shape=box, label=<<font color="black">[0] let relativeEnd = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17600 -> node17601 [color="black"]
    node17602_name [shape=none, label=<<font color="black">Block[17602]</font>>]
    node17602_name -> node17602 [arrowhead=none, color="black", style=dashed]
    node17602 [shape=box, label=<<font color="black">[0] let final = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17602 -> node17606 [color="black"]
    node17603_name [shape=none, label=<<font color="black">Branch[17603]</font>>]
    node17603_name -> node17603 [arrowhead=none, color="black", style=dashed]
    node17603 [shape=diamond, label=<<font color="black">(&lt; relativeEnd 0)</font>> color="black" fillcolor="white", style=filled]
    node17603 -> node17604 [label=<<font color="black">true</font>> color="black"]
    node17603 -> node17605 [label=<<font color="black">false</font>> color="black"]
    node17606_name [shape=none, label=<<font color="black">Block[17606]</font>>]
    node17606_name -> node17606 [arrowhead=none, color="black", style=dashed]
    node17606 [shape=box, label=<<font color="black">[0] let newLen = (max (- final first) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17606 -> node17607 [color="black"]
    node17604_name [shape=none, label=<<font color="black">Block[17604]</font>>]
    node17604_name -> node17604 [arrowhead=none, color="black", style=dashed]
    node17604 [shape=box, label=<<font color="black">[0] let final = (max (+ len relativeEnd) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17604 -> node17606 [color="black"]
    node17605_name [shape=none, label=<<font color="black">Block[17605]</font>>]
    node17605_name -> node17605 [arrowhead=none, color="black", style=dashed]
    node17605 [shape=box, label=<<font color="black">[0] let final = (min relativeEnd len)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17605 -> node17606 [color="black"]
    node17607_name [shape=none, label=<<font color="black">Call[17607]</font>>]
    node17607_name -> node17607 [arrowhead=none, color="black", style=dashed]
    node17607 [shape=cds, label=<<font color="black">%4 = clo&lt;SpeciesConstructor&gt;(O, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SharedArrayBuffer%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node17607 -> node17608 [color="black"]
    node17608_name [shape=none, label=<<font color="black">Block[17608]</font>>]
    node17608_name -> node17608 [arrowhead=none, color="black", style=dashed]
    node17608 [shape=box, label=<<font color="black">[0] let ctor = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17608 -> node17609 [color="black"]
    node17609_name [shape=none, label=<<font color="black">Call[17609]</font>>]
    node17609_name -> node17609 [arrowhead=none, color="black", style=dashed]
    node17609 [shape=cds, label=<<font color="black">%5 = clo&lt;Construct&gt;(ctor, (new [([number] newLen)])[#1164])</font>> color="black" fillcolor="white", style=filled]
    node17609 -> node17610 [color="black"]
    node17610_name [shape=none, label=<<font color="black">Block[17610]</font>>]
    node17610_name -> node17610 [arrowhead=none, color="black", style=dashed]
    node17610 [shape=box, label=<<font color="black">[0] let new = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17610 -> node17611 [color="black"]
    node17611_name [shape=none, label=<<font color="black">Call[17611]</font>>]
    node17611_name -> node17611 [arrowhead=none, color="black", style=dashed]
    node17611 [shape=cds, label=<<font color="black">%6 = clo&lt;RequireInternalSlot&gt;(new, &quot;ArrayBufferData&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17611 -> node17612 [color="black"]
    node17612_name [shape=none, label=<<font color="black">Block[17612]</font>>]
    node17612_name -> node17612 [arrowhead=none, color="black", style=dashed]
    node17612 [shape=box, label=<<font color="black">[0] [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17612 -> node17613 [color="black"]
    node17613_name [shape=none, label=<<font color="black">Call[17613]</font>>]
    node17613_name -> node17613 [arrowhead=none, color="black", style=dashed]
    node17613 [shape=cds, label=<<font color="black">%7 = clo&lt;IsSharedArrayBuffer&gt;(new)</font>> color="black" fillcolor="white", style=filled]
    node17613 -> node17614 [color="black"]
    node17614_name [shape=none, label=<<font color="black">Branch[17614]</font>>]
    node17614_name -> node17614 [arrowhead=none, color="black", style=dashed]
    node17614 [shape=diamond, label=<<font color="black">(= %7 false)</font>> color="black" fillcolor="white", style=filled]
    node17614 -> node17615 [label=<<font color="black">true</font>> color="black"]
    node17614 -> node17616 [label=<<font color="black">false</font>> color="black"]
    node17615_name [shape=none, label=<<font color="black">Block[17615]</font>>]
    node17615_name -> node17615 [arrowhead=none, color="black", style=dashed]
    node17615 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1165])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17615 -> cluster2493_exit [color="black"]
    node17616_name [shape=none, label=<<font color="black">Block[17616]</font>>]
    node17616_name -> node17616 [arrowhead=none, color="black", style=dashed]
    node17616 [shape=box, label=<<font color="black">[0] (yet &quot;If _new_.[[ArrayBufferData]] and _O_.[[ArrayBufferData]] are the same Shared Data Block values, throw a *TypeError* exception.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17616 -> node17617 [color="black"]
    node17617_name [shape=none, label=<<font color="black">Branch[17617]</font>>]
    node17617_name -> node17617 [arrowhead=none, color="black", style=dashed]
    node17617 [shape=diamond, label=<<font color="black">(&lt; new.ArrayBufferByteLength newLen)</font>> color="black" fillcolor="white", style=filled]
    node17617 -> node17618 [label=<<font color="black">true</font>> color="black"]
    node17617 -> node17619 [label=<<font color="black">false</font>> color="black"]
    node17618_name [shape=none, label=<<font color="black">Block[17618]</font>>]
    node17618_name -> node17618 [arrowhead=none, color="black", style=dashed]
    node17618 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1166])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17618 -> cluster2493_exit [color="black"]
    node17619_name [shape=none, label=<<font color="black">Block[17619]</font>>]
    node17619_name -> node17619 [arrowhead=none, color="black", style=dashed]
    node17619 [shape=box, label=<<font color="black">[0] let fromBuf = O.ArrayBufferData<BR ALIGN="LEFT"/>[1] let toBuf = new.ArrayBufferData<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17619 -> node17620 [color="black"]
    node17620_name [shape=none, label=<<font color="black">Call[17620]</font>>]
    node17620_name -> node17620 [arrowhead=none, color="black", style=dashed]
    node17620 [shape=cds, label=<<font color="black">%8 = clo&lt;CopyDataBlockBytes&gt;(toBuf, 0, fromBuf, first, newLen)</font>> color="black" fillcolor="white", style=filled]
    node17620 -> node17621 [color="black"]
    node17621_name [shape=none, label=<<font color="black">Block[17621]</font>>]
    node17621_name -> node17621 [arrowhead=none, color="black", style=dashed]
    node17621 [shape=box, label=<<font color="black">[0] return new<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17621 -> cluster2493_exit [color="black"]
  }
}