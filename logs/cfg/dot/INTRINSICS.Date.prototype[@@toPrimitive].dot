digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2162 {
    label = "def <BUILTIN>:INTRINSICS.Date.prototype[@@toPrimitive](this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2162_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2162_entry_name -> cluster2162_entry [arrowhead=none, color="black", style=dashed]
    cluster2162_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2162_entry -> node13197 [color="black"]
    cluster2162_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2162_exit_name -> cluster2162_exit [arrowhead=none, color="black", style=dashed]
    cluster2162_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13197_name [shape=none, label=<<font color="black">Branch[13197]</font>>]
    node13197_name -> node13197 [arrowhead=none, color="black", style=dashed]
    node13197 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13197 -> node13198 [label=<<font color="black">true</font>> color="black"]
    node13197 -> node13199 [label=<<font color="black">false</font>> color="black"]
    node13198_name [shape=none, label=<<font color="black">Block[13198]</font>>]
    node13198_name -> node13198 [arrowhead=none, color="black", style=dashed]
    node13198 [shape=box, label=<<font color="black">[0] let hint = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13198 -> node13200 [color="black"]
    node13199_name [shape=none, label=<<font color="black">Block[13199]</font>>]
    node13199_name -> node13199 [arrowhead=none, color="black", style=dashed]
    node13199 [shape=box, label=<<font color="black">[0] let hint = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13199 -> node13200 [color="black"]
    node13200_name [shape=none, label=<<font color="black">Block[13200]</font>>]
    node13200_name -> node13200 [arrowhead=none, color="black", style=dashed]
    node13200 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13200 -> node13201 [color="black"]
    node13201_name [shape=none, label=<<font color="black">Branch[13201]</font>>]
    node13201_name -> node13201 [arrowhead=none, color="black", style=dashed]
    node13201 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node13201 -> node13202 [label=<<font color="black">true</font>> color="black"]
    node13201 -> node13203 [label=<<font color="black">false</font>> color="black"]
    node13202_name [shape=none, label=<<font color="black">Block[13202]</font>>]
    node13202_name -> node13202 [arrowhead=none, color="black", style=dashed]
    node13202 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#940])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13202 -> cluster2162_exit [color="black"]
    node13203_name [shape=none, label=<<font color="black">Branch[13203]</font>>]
    node13203_name -> node13203 [arrowhead=none, color="black", style=dashed]
    node13203 [shape=diamond, label=<<font color="black">(|| (= hint &quot;string&quot;) (= hint &quot;default&quot;))</font>> color="black" fillcolor="white", style=filled]
    node13203 -> node13204 [label=<<font color="black">true</font>> color="black"]
    node13203 -> node13205 [label=<<font color="black">false</font>> color="black"]
    node13204_name [shape=none, label=<<font color="black">Block[13204]</font>>]
    node13204_name -> node13204 [arrowhead=none, color="black", style=dashed]
    node13204 [shape=box, label=<<font color="black">[0] let tryFirst = ~string~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13204 -> node13208 [color="black"]
    node13205_name [shape=none, label=<<font color="black">Branch[13205]</font>>]
    node13205_name -> node13205 [arrowhead=none, color="black", style=dashed]
    node13205 [shape=diamond, label=<<font color="black">(= hint &quot;number&quot;)</font>> color="black" fillcolor="white", style=filled]
    node13205 -> node13206 [label=<<font color="black">true</font>> color="black"]
    node13205 -> node13207 [label=<<font color="black">false</font>> color="black"]
    node13208_name [shape=none, label=<<font color="black">Call[13208]</font>>]
    node13208_name -> node13208 [arrowhead=none, color="black", style=dashed]
    node13208 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryToPrimitive&gt;(O, tryFirst)</font>> color="black" fillcolor="white", style=filled]
    node13208 -> node13209 [color="black"]
    node13206_name [shape=none, label=<<font color="black">Block[13206]</font>>]
    node13206_name -> node13206 [arrowhead=none, color="black", style=dashed]
    node13206 [shape=box, label=<<font color="black">[0] let tryFirst = ~number~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13206 -> node13208 [color="black"]
    node13207_name [shape=none, label=<<font color="black">Block[13207]</font>>]
    node13207_name -> node13207 [arrowhead=none, color="black", style=dashed]
    node13207 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#941])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13207 -> cluster2162_exit [color="black"]
    node13209_name [shape=none, label=<<font color="black">Block[13209]</font>>]
    node13209_name -> node13209 [arrowhead=none, color="black", style=dashed]
    node13209 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13209 -> cluster2162_exit [color="black"]
  }
}