digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2653 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.has(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2653_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2653_entry_name -> cluster2653_entry [arrowhead=none, color="black", style=dashed]
    cluster2653_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2653_entry -> node19740 [color="black"]
    cluster2653_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2653_exit_name -> cluster2653_exit [arrowhead=none, color="black", style=dashed]
    cluster2653_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19740_name [shape=none, label=<<font color="black">Branch[19740]</font>>]
    node19740_name -> node19740 [arrowhead=none, color="black", style=dashed]
    node19740 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19740 -> node19741 [label=<<font color="black">true</font>> color="black"]
    node19740 -> node19742 [label=<<font color="black">false</font>> color="black"]
    node19741_name [shape=none, label=<<font color="black">Block[19741]</font>>]
    node19741_name -> node19741 [arrowhead=none, color="black", style=dashed]
    node19741 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19741 -> node19743 [color="black"]
    node19742_name [shape=none, label=<<font color="black">Block[19742]</font>>]
    node19742_name -> node19742 [arrowhead=none, color="black", style=dashed]
    node19742 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19742 -> node19743 [color="black"]
    node19743_name [shape=none, label=<<font color="black">Branch[19743]</font>>]
    node19743_name -> node19743 [arrowhead=none, color="black", style=dashed]
    node19743 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19743 -> node19744 [label=<<font color="black">true</font>> color="black"]
    node19743 -> node19745 [label=<<font color="black">false</font>> color="black"]
    node19744_name [shape=none, label=<<font color="black">Block[19744]</font>>]
    node19744_name -> node19744 [arrowhead=none, color="black", style=dashed]
    node19744 [shape=box, label=<<font color="black">[0] let propertyKey = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19744 -> node19746 [color="black"]
    node19745_name [shape=none, label=<<font color="black">Block[19745]</font>>]
    node19745_name -> node19745 [arrowhead=none, color="black", style=dashed]
    node19745 [shape=box, label=<<font color="black">[0] let propertyKey = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19745 -> node19746 [color="black"]
    node19746_name [shape=none, label=<<font color="black">Branch[19746]</font>>]
    node19746_name -> node19746 [arrowhead=none, color="black", style=dashed]
    node19746 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19746 -> node19747 [label=<<font color="black">true</font>> color="black"]
    node19746 -> node19748 [label=<<font color="black">false</font>> color="black"]
    node19747_name [shape=none, label=<<font color="black">Block[19747]</font>>]
    node19747_name -> node19747 [arrowhead=none, color="black", style=dashed]
    node19747 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1351])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19747 -> cluster2653_exit [color="black"]
    node19748_name [shape=none, label=<<font color="black">Call[19748]</font>>]
    node19748_name -> node19748 [arrowhead=none, color="black", style=dashed]
    node19748 [shape=cds, label=<<font color="black">%0 = clo&lt;ToPropertyKey&gt;(propertyKey)</font>> color="black" fillcolor="white", style=filled]
    node19748 -> node19749 [color="black"]
    node19749_name [shape=none, label=<<font color="black">Block[19749]</font>>]
    node19749_name -> node19749 [arrowhead=none, color="black", style=dashed]
    node19749 [shape=box, label=<<font color="black">[0] let key = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19749 -> node19750 [color="black"]
    node19750_name [shape=none, label=<<font color="black">Call[19750]</font>>]
    node19750_name -> node19750 [arrowhead=none, color="black", style=dashed]
    node19750 [shape=cds, label=<<font color="black">%1 = target-&gt;HasProperty(key)</font>> color="black" fillcolor="white", style=filled]
    node19750 -> node19751 [color="black"]
    node19751_name [shape=none, label=<<font color="black">Block[19751]</font>>]
    node19751_name -> node19751 [arrowhead=none, color="black", style=dashed]
    node19751 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19751 -> cluster2653_exit [color="black"]
  }
}