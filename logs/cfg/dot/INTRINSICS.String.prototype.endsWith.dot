digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2173 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.endsWith(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2173_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2173_entry_name -> cluster2173_entry [arrowhead=none, color="black", style=dashed]
    cluster2173_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2173_entry -> node13338 [color="black"]
    cluster2173_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2173_exit_name -> cluster2173_exit [arrowhead=none, color="black", style=dashed]
    cluster2173_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13338_name [shape=none, label=<<font color="black">Branch[13338]</font>>]
    node13338_name -> node13338 [arrowhead=none, color="black", style=dashed]
    node13338 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13338 -> node13339 [label=<<font color="black">true</font>> color="black"]
    node13338 -> node13340 [label=<<font color="black">false</font>> color="black"]
    node13339_name [shape=none, label=<<font color="black">Block[13339]</font>>]
    node13339_name -> node13339 [arrowhead=none, color="black", style=dashed]
    node13339 [shape=box, label=<<font color="black">[0] let searchString = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13339 -> node13341 [color="black"]
    node13340_name [shape=none, label=<<font color="black">Block[13340]</font>>]
    node13340_name -> node13340 [arrowhead=none, color="black", style=dashed]
    node13340 [shape=box, label=<<font color="black">[0] let searchString = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13340 -> node13341 [color="black"]
    node13341_name [shape=none, label=<<font color="black">Branch[13341]</font>>]
    node13341_name -> node13341 [arrowhead=none, color="black", style=dashed]
    node13341 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13341 -> node13342 [label=<<font color="black">true</font>> color="black"]
    node13341 -> node13343 [label=<<font color="black">false</font>> color="black"]
    node13342_name [shape=none, label=<<font color="black">Block[13342]</font>>]
    node13342_name -> node13342 [arrowhead=none, color="black", style=dashed]
    node13342 [shape=box, label=<<font color="black">[0] let endPosition = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13342 -> node13344 [color="black"]
    node13343_name [shape=none, label=<<font color="black">Block[13343]</font>>]
    node13343_name -> node13343 [arrowhead=none, color="black", style=dashed]
    node13343 [shape=box, label=<<font color="black">[0] let endPosition = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13343 -> node13344 [color="black"]
    node13344_name [shape=none, label=<<font color="black">Call[13344]</font>>]
    node13344_name -> node13344 [arrowhead=none, color="black", style=dashed]
    node13344 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13344 -> node13345 [color="black"]
    node13345_name [shape=none, label=<<font color="black">Block[13345]</font>>]
    node13345_name -> node13345 [arrowhead=none, color="black", style=dashed]
    node13345 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13345 -> node13346 [color="black"]
    node13346_name [shape=none, label=<<font color="black">Call[13346]</font>>]
    node13346_name -> node13346 [arrowhead=none, color="black", style=dashed]
    node13346 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13346 -> node13347 [color="black"]
    node13347_name [shape=none, label=<<font color="black">Block[13347]</font>>]
    node13347_name -> node13347 [arrowhead=none, color="black", style=dashed]
    node13347 [shape=box, label=<<font color="black">[0] let S = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13347 -> node13348 [color="black"]
    node13348_name [shape=none, label=<<font color="black">Call[13348]</font>>]
    node13348_name -> node13348 [arrowhead=none, color="black", style=dashed]
    node13348 [shape=cds, label=<<font color="black">%2 = clo&lt;IsRegExp&gt;(searchString)</font>> color="black" fillcolor="white", style=filled]
    node13348 -> node13349 [color="black"]
    node13349_name [shape=none, label=<<font color="black">Block[13349]</font>>]
    node13349_name -> node13349 [arrowhead=none, color="black", style=dashed]
    node13349 [shape=box, label=<<font color="black">[0] let isRegExp = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13349 -> node13350 [color="black"]
    node13350_name [shape=none, label=<<font color="black">Branch[13350]</font>>]
    node13350_name -> node13350 [arrowhead=none, color="black", style=dashed]
    node13350 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white", style=filled]
    node13350 -> node13351 [label=<<font color="black">true</font>> color="black"]
    node13350 -> node13352 [label=<<font color="black">false</font>> color="black"]
    node13351_name [shape=none, label=<<font color="black">Block[13351]</font>>]
    node13351_name -> node13351 [arrowhead=none, color="black", style=dashed]
    node13351 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#947])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13351 -> cluster2173_exit [color="black"]
    node13352_name [shape=none, label=<<font color="black">Call[13352]</font>>]
    node13352_name -> node13352 [arrowhead=none, color="black", style=dashed]
    node13352 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(searchString)</font>> color="black" fillcolor="white", style=filled]
    node13352 -> node13353 [color="black"]
    node13353_name [shape=none, label=<<font color="black">Block[13353]</font>>]
    node13353_name -> node13353 [arrowhead=none, color="black", style=dashed]
    node13353 [shape=box, label=<<font color="black">[0] let searchStr = [? %3]<BR ALIGN="LEFT"/>[1] let len = S.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13353 -> node13354 [color="black"]
    node13354_name [shape=none, label=<<font color="black">Branch[13354]</font>>]
    node13354_name -> node13354 [arrowhead=none, color="black", style=dashed]
    node13354 [shape=diamond, label=<<font color="black">(= endPosition undefined)</font>> color="black" fillcolor="white", style=filled]
    node13354 -> node13355 [label=<<font color="black">true</font>> color="black"]
    node13354 -> node13356 [label=<<font color="black">false</font>> color="black"]
    node13355_name [shape=none, label=<<font color="black">Block[13355]</font>>]
    node13355_name -> node13355 [arrowhead=none, color="black", style=dashed]
    node13355 [shape=box, label=<<font color="black">[0] let pos = len<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13355 -> node13358 [color="black"]
    node13356_name [shape=none, label=<<font color="black">Call[13356]</font>>]
    node13356_name -> node13356 [arrowhead=none, color="black", style=dashed]
    node13356 [shape=cds, label=<<font color="black">%4 = clo&lt;ToIntegerOrInfinity&gt;(endPosition)</font>> color="black" fillcolor="white", style=filled]
    node13356 -> node13357 [color="black"]
    node13358_name [shape=none, label=<<font color="black">Block[13358]</font>>]
    node13358_name -> node13358 [arrowhead=none, color="black", style=dashed]
    node13358 [shape=box, label=<<font color="black">[0] let end = (clamp pos 0 len)<BR ALIGN="LEFT"/>[1] let searchLength = searchStr.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13358 -> node13359 [color="black"]
    node13357_name [shape=none, label=<<font color="black">Block[13357]</font>>]
    node13357_name -> node13357 [arrowhead=none, color="black", style=dashed]
    node13357 [shape=box, label=<<font color="black">[0] let pos = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13357 -> node13358 [color="black"]
    node13359_name [shape=none, label=<<font color="black">Branch[13359]</font>>]
    node13359_name -> node13359 [arrowhead=none, color="black", style=dashed]
    node13359 [shape=diamond, label=<<font color="black">(== searchLength 0)</font>> color="black" fillcolor="white", style=filled]
    node13359 -> node13360 [label=<<font color="black">true</font>> color="black"]
    node13359 -> node13361 [label=<<font color="black">false</font>> color="black"]
    node13360_name [shape=none, label=<<font color="black">Block[13360]</font>>]
    node13360_name -> node13360 [arrowhead=none, color="black", style=dashed]
    node13360 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13360 -> cluster2173_exit [color="black"]
    node13361_name [shape=none, label=<<font color="black">Block[13361]</font>>]
    node13361_name -> node13361 [arrowhead=none, color="black", style=dashed]
    node13361 [shape=box, label=<<font color="black">[0] let start = (- end searchLength)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13361 -> node13362 [color="black"]
    node13362_name [shape=none, label=<<font color="black">Branch[13362]</font>>]
    node13362_name -> node13362 [arrowhead=none, color="black", style=dashed]
    node13362 [shape=diamond, label=<<font color="black">(&lt; start 0)</font>> color="black" fillcolor="white", style=filled]
    node13362 -> node13363 [label=<<font color="black">true</font>> color="black"]
    node13362 -> node13364 [label=<<font color="black">false</font>> color="black"]
    node13363_name [shape=none, label=<<font color="black">Block[13363]</font>>]
    node13363_name -> node13363 [arrowhead=none, color="black", style=dashed]
    node13363 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13363 -> cluster2173_exit [color="black"]
    node13364_name [shape=none, label=<<font color="black">Block[13364]</font>>]
    node13364_name -> node13364 [arrowhead=none, color="black", style=dashed]
    node13364 [shape=box, label=<<font color="black">[0] let substring = (substring S start end)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13364 -> node13365 [color="black"]
    node13365_name [shape=none, label=<<font color="black">Call[13365]</font>>]
    node13365_name -> node13365 [arrowhead=none, color="black", style=dashed]
    node13365 [shape=cds, label=<<font color="black">%5 = clo&lt;SameValueNonNumeric&gt;(substring, searchStr)</font>> color="black" fillcolor="white", style=filled]
    node13365 -> node13366 [color="black"]
    node13366_name [shape=none, label=<<font color="black">Block[13366]</font>>]
    node13366_name -> node13366 [arrowhead=none, color="black", style=dashed]
    node13366 [shape=box, label=<<font color="black">[0] return %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13366 -> cluster2173_exit [color="black"]
  }
}