digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1471 {
    label = "def <SYNTAX>:ReturnStatement[1,0].Evaluation(this: Ast:ReturnStatement[1,0]): Unknown"
    style = rounded
    cluster1471_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1471_entry_name -> cluster1471_entry [arrowhead=none, color="black", style=dashed]
    cluster1471_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1471_entry -> node7853 [color="black"]
    cluster1471_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1471_exit_name -> cluster1471_exit [arrowhead=none, color="black", style=dashed]
    cluster1471_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node7853_name [shape=none, label=<<font color="black">Call[7853]</font>>]
    node7853_name -> node7853 [arrowhead=none, color="black", style=dashed]
    node7853 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node7853 -> node7854 [color="black"]
    node7854_name [shape=none, label=<<font color="black">Block[7854]</font>>]
    node7854_name -> node7854 [arrowhead=none, color="black", style=dashed]
    node7854 [shape=box, label=<<font color="black">[0] let exprRef = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7854 -> node7855 [color="black"]
    node7855_name [shape=none, label=<<font color="black">Call[7855]</font>>]
    node7855_name -> node7855 [arrowhead=none, color="black", style=dashed]
    node7855 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(exprRef)</font>> color="black" fillcolor="white", style=filled]
    node7855 -> node7856 [color="black"]
    node7856_name [shape=none, label=<<font color="black">Block[7856]</font>>]
    node7856_name -> node7856 [arrowhead=none, color="black", style=dashed]
    node7856 [shape=box, label=<<font color="black">[0] let exprValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7856 -> node7857 [color="black"]
    node7857_name [shape=none, label=<<font color="black">Call[7857]</font>>]
    node7857_name -> node7857 [arrowhead=none, color="black", style=dashed]
    node7857 [shape=cds, label=<<font color="black">%2 = clo&lt;GetGeneratorKind&gt;()</font>> color="black" fillcolor="white", style=filled]
    node7857 -> node7858 [color="black"]
    node7858_name [shape=none, label=<<font color="black">Branch[7858]</font>>]
    node7858_name -> node7858 [arrowhead=none, color="black", style=dashed]
    node7858 [shape=diamond, label=<<font color="black">(= %2 ~async~)</font>> color="black" fillcolor="white", style=filled]
    node7858 -> node7859 [label=<<font color="black">true</font>> color="black"]
    node7858 -> node7861 [label=<<font color="black">false</font>> color="black"]
    node7859_name [shape=none, label=<<font color="black">Call[7859]</font>>]
    node7859_name -> node7859 [arrowhead=none, color="black", style=dashed]
    node7859 [shape=cds, label=<<font color="black">%3 = clo&lt;Await&gt;(exprValue)</font>> color="black" fillcolor="white", style=filled]
    node7859 -> node7860 [color="black"]
    node7861_name [shape=none, label=<<font color="black">Block[7861]</font>>]
    node7861_name -> node7861 [arrowhead=none, color="black", style=dashed]
    node7861 [shape=box, label=<<font color="black">[0] return comp[~return~/~empty~](exprValue)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7861 -> cluster1471_exit [color="black"]
    node7860_name [shape=none, label=<<font color="black">Block[7860]</font>>]
    node7860_name -> node7860 [arrowhead=none, color="black", style=dashed]
    node7860 [shape=box, label=<<font color="black">[0] exprValue = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7860 -> node7861 [color="black"]
  }
}