digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1984 {
    label = "def EvalDeclarationInstantiation(body: Unknown, varEnv: Unknown, lexEnv: Unknown, privateEnv: Unknown, strict: Unknown): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1984_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1984_entry_name -> cluster1984_entry [arrowhead=none, color="black", style=dashed]
    cluster1984_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1984_entry -> node10789 [color="black"]
    cluster1984_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1984_exit_name -> cluster1984_exit [arrowhead=none, color="black", style=dashed]
    cluster1984_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10789_name [shape=none, label=<<font color="black">Call[10789]</font>>]
    node10789_name -> node10789 [arrowhead=none, color="black", style=dashed]
    node10789 [shape=cds, label=<<font color="black">%0 = body-&gt;VarDeclaredNames()</font>> color="black" fillcolor="white", style=filled]
    node10789 -> node10790 [color="black"]
    node10790_name [shape=none, label=<<font color="black">Block[10790]</font>>]
    node10790_name -> node10790 [arrowhead=none, color="black", style=dashed]
    node10790 [shape=box, label=<<font color="black">[0] let varNames = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10790 -> node10791 [color="black"]
    node10791_name [shape=none, label=<<font color="black">Call[10791]</font>>]
    node10791_name -> node10791 [arrowhead=none, color="black", style=dashed]
    node10791 [shape=cds, label=<<font color="black">%1 = body-&gt;VarScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node10791 -> node10792 [color="black"]
    node10792_name [shape=none, label=<<font color="black">Block[10792]</font>>]
    node10792_name -> node10792 [arrowhead=none, color="black", style=dashed]
    node10792 [shape=box, label=<<font color="black">[0] let varDeclarations = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10792 -> node10793 [color="black"]
    node10793_name [shape=none, label=<<font color="black">Branch[10793]</font>>]
    node10793_name -> node10793 [arrowhead=none, color="black", style=dashed]
    node10793 [shape=diamond, label=<<font color="black">(= strict false)</font>> color="black" fillcolor="white", style=filled]
    node10793 -> node10794 [label=<<font color="black">true</font>> color="black"]
    node10793 -> node10813 [label=<<font color="black">false</font>> color="black"]
    node10794_name [shape=none, label=<<font color="black">Branch[10794]</font>>]
    node10794_name -> node10794 [arrowhead=none, color="black", style=dashed]
    node10794 [shape=diamond, label=<<font color="black">(? varEnv: &quot;GlobalEnvironmentRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10794 -> node10795 [label=<<font color="black">true</font>> color="black"]
    node10794 -> node10802 [label=<<font color="black">false</font>> color="black"]
    node10813_name [shape=none, label=<<font color="black">Block[10813]</font>>]
    node10813_name -> node10813 [arrowhead=none, color="black", style=dashed]
    node10813 [shape=box, label=<<font color="black">[0] let privateIdentifiers = (new [])[#876]<BR ALIGN="LEFT"/>[1] let pointer = privateEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10813 -> node10814 [color="black"]
    node10795_name [shape=none, label=<<font color="black">Block[10795]</font>>]
    node10795_name -> node10795 [arrowhead=none, color="black", style=dashed]
    node10795 [shape=box, label=<<font color="black">[0] %3 = varNames<BR ALIGN="LEFT"/>[1] %2 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10795 -> node10796 [color="black"]
    node10802_name [shape=none, label=<<font color="black">Block[10802]</font>>]
    node10802_name -> node10802 [arrowhead=none, color="black", style=dashed]
    node10802 [shape=box, label=<<font color="black">[0] let thisEnv = lexEnv<BR ALIGN="LEFT"/>[1] assert (yet &quot;The following loop will terminate.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10802 -> node10803 [color="black"]
    node10814_name [shape=none, label=<<font color="black">Branch[10814]</font>>]
    node10814_name -> node10814 [arrowhead=none, color="black", style=dashed]
    node10814 [shape=diamond, label=<<font color="black">(! (= pointer null))</font>> color="black" fillcolor="white", style=filled]
    node10814 -> node10815 [label=<<font color="black">true</font>> color="black"]
    node10814 -> node10822 [label=<<font color="black">false</font>> color="black"]
    node10796_name [shape=none, label=<<font color="black">Branch[10796]</font>>]
    node10796_name -> node10796 [arrowhead=none, color="black", style=dashed]
    node10796 [shape=diamond, label=<<font color="black">(&lt; %2 %3.length)</font>> color="black" fillcolor="white", style=filled]
    node10796 -> node10797 [label=<<font color="black">true</font>> color="black"]
    node10796 -> node10802 [label=<<font color="black">false</font>> color="black"]
    node10803_name [shape=none, label=<<font color="black">Branch[10803]</font>>]
    node10803_name -> node10803 [arrowhead=none, color="black", style=dashed]
    node10803 [shape=diamond, label=<<font color="black">(! (= thisEnv varEnv))</font>> color="black" fillcolor="white", style=filled]
    node10803 -> node10804 [label=<<font color="black">true</font>> color="black"]
    node10803 -> node10813 [label=<<font color="black">false</font>> color="black"]
    node10815_name [shape=none, label=<<font color="black">Block[10815]</font>>]
    node10815_name -> node10815 [arrowhead=none, color="black", style=dashed]
    node10815 [shape=box, label=<<font color="black">[0] %9 = pointer.Names<BR ALIGN="LEFT"/>[1] %8 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10815 -> node10816 [color="black"]
    node10822_name [shape=none, label=<<font color="black">Call[10822]</font>>]
    node10822_name -> node10822 [arrowhead=none, color="black", style=dashed]
    node10822 [shape=cds, label=<<font color="black">%10 = body-&gt;AllPrivateIdentifiersValid(privateIdentifiers)</font>> color="black" fillcolor="white", style=filled]
    node10822 -> node10823 [color="black"]
    node10797_name [shape=none, label=<<font color="black">Block[10797]</font>>]
    node10797_name -> node10797 [arrowhead=none, color="black", style=dashed]
    node10797 [shape=box, label=<<font color="black">[0] let name = %3[%2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10797 -> node10798 [color="black"]
    node10804_name [shape=none, label=<<font color="black">Branch[10804]</font>>]
    node10804_name -> node10804 [arrowhead=none, color="black", style=dashed]
    node10804 [shape=diamond, label=<<font color="black">(! (? thisEnv: &quot;ObjectEnvironmentRecord&quot;))</font>> color="black" fillcolor="white", style=filled]
    node10804 -> node10805 [label=<<font color="black">true</font>> color="black"]
    node10804 -> node10812 [label=<<font color="black">false</font>> color="black"]
    node10816_name [shape=none, label=<<font color="black">Branch[10816]</font>>]
    node10816_name -> node10816 [arrowhead=none, color="black", style=dashed]
    node10816 [shape=diamond, label=<<font color="black">(&lt; %8 %9.length)</font>> color="black" fillcolor="white", style=filled]
    node10816 -> node10817 [label=<<font color="black">true</font>> color="black"]
    node10816 -> node10821 [label=<<font color="black">false</font>> color="black"]
    node10823_name [shape=none, label=<<font color="black">Branch[10823]</font>>]
    node10823_name -> node10823 [arrowhead=none, color="black", style=dashed]
    node10823 [shape=diamond, label=<<font color="black">(= %10 false)</font>> color="black" fillcolor="white", style=filled]
    node10823 -> node10824 [label=<<font color="black">true</font>> color="black"]
    node10823 -> node10825 [label=<<font color="black">false</font>> color="black"]
    node10798_name [shape=none, label=<<font color="black">Call[10798]</font>>]
    node10798_name -> node10798 [arrowhead=none, color="black", style=dashed]
    node10798 [shape=cds, label=<<font color="black">%4 = varEnv-&gt;HasLexicalDeclaration(name)</font>> color="black" fillcolor="white", style=filled]
    node10798 -> node10799 [color="black"]
    node10805_name [shape=none, label=<<font color="black">Block[10805]</font>>]
    node10805_name -> node10805 [arrowhead=none, color="black", style=dashed]
    node10805 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] %6 = varNames<BR ALIGN="LEFT"/>[2] %5 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10805 -> node10806 [color="black"]
    node10812_name [shape=none, label=<<font color="black">Block[10812]</font>>]
    node10812_name -> node10812 [arrowhead=none, color="black", style=dashed]
    node10812 [shape=box, label=<<font color="black">[0] thisEnv = thisEnv.OuterEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10812 -> node10803 [color="black"]
    node10817_name [shape=none, label=<<font color="black">Block[10817]</font>>]
    node10817_name -> node10817 [arrowhead=none, color="black", style=dashed]
    node10817 [shape=box, label=<<font color="black">[0] let binding = %9[%8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10817 -> node10818 [color="black"]
    node10821_name [shape=none, label=<<font color="black">Block[10821]</font>>]
    node10821_name -> node10821 [arrowhead=none, color="black", style=dashed]
    node10821 [shape=box, label=<<font color="black">[0] pointer = pointer.OuterPrivateEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10821 -> node10814 [color="black"]
    node10824_name [shape=none, label=<<font color="black">Block[10824]</font>>]
    node10824_name -> node10824 [arrowhead=none, color="black", style=dashed]
    node10824 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#877])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10824 -> cluster1984_exit [color="black"]
    node10825_name [shape=none, label=<<font color="black">Block[10825]</font>>]
    node10825_name -> node10825 [arrowhead=none, color="black", style=dashed]
    node10825 [shape=box, label=<<font color="black">[0] let functionsToInitialize = (new [])[#878]<BR ALIGN="LEFT"/>[1] let declaredFunctionNames = (new [])[#879]<BR ALIGN="LEFT"/>[2] %12 = varDeclarations<BR ALIGN="LEFT"/>[3] %11 = %12.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10825 -> node10826 [color="black"]
    node10799_name [shape=none, label=<<font color="black">Branch[10799]</font>>]
    node10799_name -> node10799 [arrowhead=none, color="black", style=dashed]
    node10799 [shape=diamond, label=<<font color="black">(= %4 true)</font>> color="black" fillcolor="white", style=filled]
    node10799 -> node10800 [label=<<font color="black">true</font>> color="black"]
    node10799 -> node10801 [label=<<font color="black">false</font>> color="black"]
    node10806_name [shape=none, label=<<font color="black">Branch[10806]</font>>]
    node10806_name -> node10806 [arrowhead=none, color="black", style=dashed]
    node10806 [shape=diamond, label=<<font color="black">(&lt; %5 %6.length)</font>> color="black" fillcolor="white", style=filled]
    node10806 -> node10807 [label=<<font color="black">true</font>> color="black"]
    node10806 -> node10812 [label=<<font color="black">false</font>> color="black"]
    node10818_name [shape=none, label=<<font color="black">Branch[10818]</font>>]
    node10818_name -> node10818 [arrowhead=none, color="black", style=dashed]
    node10818 [shape=diamond, label=<<font color="black">(! (contains privateIdentifiers binding.Description))</font>> color="black" fillcolor="white", style=filled]
    node10818 -> node10819 [label=<<font color="black">true</font>> color="black"]
    node10818 -> node10820 [label=<<font color="black">false</font>> color="black"]
    node10826_name [shape=none, label=<<font color="black">Branch[10826]</font>>]
    node10826_name -> node10826 [arrowhead=none, color="black", style=dashed]
    node10826 [shape=diamond, label=<<font color="black">(&lt; 0 %11)</font>> color="black" fillcolor="white", style=filled]
    node10826 -> node10827 [label=<<font color="black">true</font>> color="black"]
    node10826 -> node10839 [label=<<font color="black">false</font>> color="black"]
    node10800_name [shape=none, label=<<font color="black">Block[10800]</font>>]
    node10800_name -> node10800 [arrowhead=none, color="black", style=dashed]
    node10800 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#874])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10800 -> cluster1984_exit [color="black"]
    node10801_name [shape=none, label=<<font color="black">Block[10801]</font>>]
    node10801_name -> node10801 [arrowhead=none, color="black", style=dashed]
    node10801 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] %2 = (+ %2 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10801 -> node10796 [color="black"]
    node10807_name [shape=none, label=<<font color="black">Block[10807]</font>>]
    node10807_name -> node10807 [arrowhead=none, color="black", style=dashed]
    node10807 [shape=box, label=<<font color="black">[0] let name = %6[%5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10807 -> node10808 [color="black"]
    node10819_name [shape=none, label=<<font color="black">Block[10819]</font>>]
    node10819_name -> node10819 [arrowhead=none, color="black", style=dashed]
    node10819 [shape=box, label=<<font color="black">[0] push privateIdentifiers &lt; binding.Description<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10819 -> node10820 [color="black"]
    node10820_name [shape=none, label=<<font color="black">Block[10820]</font>>]
    node10820_name -> node10820 [arrowhead=none, color="black", style=dashed]
    node10820 [shape=box, label=<<font color="black">[0] %8 = (+ %8 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10820 -> node10816 [color="black"]
    node10827_name [shape=none, label=<<font color="black">Block[10827]</font>>]
    node10827_name -> node10827 [arrowhead=none, color="black", style=dashed]
    node10827 [shape=box, label=<<font color="black">[0] %11 = (- %11 1)<BR ALIGN="LEFT"/>[1] let d = %12[%11]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10827 -> node10828 [color="black"]
    node10839_name [shape=none, label=<<font color="black">Block[10839]</font>>]
    node10839_name -> node10839 [arrowhead=none, color="black", style=dashed]
    node10839 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] let declaredVarNames = (new [])[#881]<BR ALIGN="LEFT"/>[2] %16 = varDeclarations<BR ALIGN="LEFT"/>[3] %15 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10839 -> node10840 [color="black"]
    node10808_name [shape=none, label=<<font color="black">Call[10808]</font>>]
    node10808_name -> node10808 [arrowhead=none, color="black", style=dashed]
    node10808 [shape=cds, label=<<font color="black">%7 = thisEnv-&gt;HasBinding(name)</font>> color="black" fillcolor="white", style=filled]
    node10808 -> node10809 [color="black"]
    node10828_name [shape=none, label=<<font color="black">Branch[10828]</font>>]
    node10828_name -> node10828 [arrowhead=none, color="black", style=dashed]
    node10828 [shape=diamond, label=<<font color="black">(! (|| (|| (? d: &quot;VariableDeclaration&quot;) (? d: &quot;ForBinding&quot;)) (? d: &quot;BindingIdentifier&quot;)))</font>> color="black" fillcolor="white", style=filled]
    node10828 -> node10829 [label=<<font color="black">true</font>> color="black"]
    node10828 -> node10826 [label=<<font color="black">false</font>> color="black"]
    node10840_name [shape=none, label=<<font color="black">Branch[10840]</font>>]
    node10840_name -> node10840 [arrowhead=none, color="black", style=dashed]
    node10840 [shape=diamond, label=<<font color="black">(&lt; %15 %16.length)</font>> color="black" fillcolor="white", style=filled]
    node10840 -> node10841 [label=<<font color="black">true</font>> color="black"]
    node10840 -> node10857 [label=<<font color="black">false</font>> color="black"]
    node10809_name [shape=none, label=<<font color="black">Branch[10809]</font>>]
    node10809_name -> node10809 [arrowhead=none, color="black", style=dashed]
    node10809 [shape=diamond, label=<<font color="black">(= [! %7] true)</font>> color="black" fillcolor="white", style=filled]
    node10809 -> node10810 [label=<<font color="black">true</font>> color="black"]
    node10809 -> node10811 [label=<<font color="black">false</font>> color="black"]
    node10829_name [shape=none, label=<<font color="black">Block[10829]</font>>]
    node10829_name -> node10829 [arrowhead=none, color="black", style=dashed]
    node10829 [shape=box, label=<<font color="black">[0] assert (|| (|| (|| (? d: &quot;FunctionDeclaration&quot;) (? d: &quot;GeneratorDeclaration&quot;)) (? d: &quot;AsyncFunctionDeclaration&quot;)) (? d: &quot;AsyncGeneratorDeclaration&quot;))<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10829 -> node10830 [color="black"]
    node10841_name [shape=none, label=<<font color="black">Block[10841]</font>>]
    node10841_name -> node10841 [arrowhead=none, color="black", style=dashed]
    node10841 [shape=box, label=<<font color="black">[0] let d = %16[%15]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10841 -> node10842 [color="black"]
    node10857_name [shape=none, label=<<font color="black">Block[10857]</font>>]
    node10857_name -> node10857 [arrowhead=none, color="black", style=dashed]
    node10857 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10857 -> node10858 [color="black"]
    node10810_name [shape=none, label=<<font color="black">Block[10810]</font>>]
    node10810_name -> node10810 [arrowhead=none, color="black", style=dashed]
    node10810 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#875])<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10810 -> node10811 [color="black"]
    node10811_name [shape=none, label=<<font color="black">Block[10811]</font>>]
    node10811_name -> node10811 [arrowhead=none, color="black", style=dashed]
    node10811 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] %5 = (+ %5 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10811 -> node10806 [color="black"]
    node10830_name [shape=none, label=<<font color="black">Call[10830]</font>>]
    node10830_name -> node10830 [arrowhead=none, color="black", style=dashed]
    node10830 [shape=cds, label=<<font color="black">%13 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10830 -> node10831 [color="black"]
    node10842_name [shape=none, label=<<font color="black">Branch[10842]</font>>]
    node10842_name -> node10842 [arrowhead=none, color="black", style=dashed]
    node10842 [shape=diamond, label=<<font color="black">(|| (|| (? d: &quot;VariableDeclaration&quot;) (? d: &quot;ForBinding&quot;)) (? d: &quot;BindingIdentifier&quot;))</font>> color="black" fillcolor="white", style=filled]
    node10842 -> node10843 [label=<<font color="black">true</font>> color="black"]
    node10842 -> node10856 [label=<<font color="black">false</font>> color="black"]
    node10858_name [shape=none, label=<<font color="black">Call[10858]</font>>]
    node10858_name -> node10858 [arrowhead=none, color="black", style=dashed]
    node10858 [shape=cds, label=<<font color="black">%21 = body-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node10858 -> node10859 [color="black"]
    node10831_name [shape=none, label=<<font color="black">Block[10831]</font>>]
    node10831_name -> node10831 [arrowhead=none, color="black", style=dashed]
    node10831 [shape=box, label=<<font color="black">[0] let fn = %13[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10831 -> node10832 [color="black"]
    node10843_name [shape=none, label=<<font color="black">Call[10843]</font>>]
    node10843_name -> node10843 [arrowhead=none, color="black", style=dashed]
    node10843 [shape=cds, label=<<font color="black">%19 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10843 -> node10844 [color="black"]
    node10856_name [shape=none, label=<<font color="black">Block[10856]</font>>]
    node10856_name -> node10856 [arrowhead=none, color="black", style=dashed]
    node10856 [shape=box, label=<<font color="black">[0] %15 = (+ %15 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10856 -> node10840 [color="black"]
    node10859_name [shape=none, label=<<font color="black">Block[10859]</font>>]
    node10859_name -> node10859 [arrowhead=none, color="black", style=dashed]
    node10859 [shape=box, label=<<font color="black">[0] let lexDeclarations = %21<BR ALIGN="LEFT"/>[1] %23 = lexDeclarations<BR ALIGN="LEFT"/>[2] %22 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10859 -> node10860 [color="black"]
    node10832_name [shape=none, label=<<font color="black">Branch[10832]</font>>]
    node10832_name -> node10832 [arrowhead=none, color="black", style=dashed]
    node10832 [shape=diamond, label=<<font color="black">(! (contains declaredFunctionNames fn))</font>> color="black" fillcolor="white", style=filled]
    node10832 -> node10833 [label=<<font color="black">true</font>> color="black"]
    node10832 -> node10826 [label=<<font color="black">false</font>> color="black"]
    node10844_name [shape=none, label=<<font color="black">Block[10844]</font>>]
    node10844_name -> node10844 [arrowhead=none, color="black", style=dashed]
    node10844 [shape=box, label=<<font color="black">[0] %18 = %19<BR ALIGN="LEFT"/>[1] %17 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10844 -> node10845 [color="black"]
    node10860_name [shape=none, label=<<font color="black">Branch[10860]</font>>]
    node10860_name -> node10860 [arrowhead=none, color="black", style=dashed]
    node10860 [shape=diamond, label=<<font color="black">(&lt; %22 %23.length)</font>> color="black" fillcolor="white", style=filled]
    node10860 -> node10861 [label=<<font color="black">true</font>> color="black"]
    node10860 -> node10874 [label=<<font color="black">false</font>> color="black"]
    node10833_name [shape=none, label=<<font color="black">Branch[10833]</font>>]
    node10833_name -> node10833 [arrowhead=none, color="black", style=dashed]
    node10833 [shape=diamond, label=<<font color="black">(? varEnv: &quot;GlobalEnvironmentRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10833 -> node10834 [label=<<font color="black">true</font>> color="black"]
    node10833 -> node10838 [label=<<font color="black">false</font>> color="black"]
    node10845_name [shape=none, label=<<font color="black">Branch[10845]</font>>]
    node10845_name -> node10845 [arrowhead=none, color="black", style=dashed]
    node10845 [shape=diamond, label=<<font color="black">(&lt; %17 %18.length)</font>> color="black" fillcolor="white", style=filled]
    node10845 -> node10846 [label=<<font color="black">true</font>> color="black"]
    node10845 -> node10856 [label=<<font color="black">false</font>> color="black"]
    node10861_name [shape=none, label=<<font color="black">Block[10861]</font>>]
    node10861_name -> node10861 [arrowhead=none, color="black", style=dashed]
    node10861 [shape=box, label=<<font color="black">[0] let d = %23[%22]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10861 -> node10862 [color="black"]
    node10874_name [shape=none, label=<<font color="black">Block[10874]</font>>]
    node10874_name -> node10874 [arrowhead=none, color="black", style=dashed]
    node10874 [shape=box, label=<<font color="black">[0] %31 = functionsToInitialize<BR ALIGN="LEFT"/>[1] %30 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10874 -> node10875 [color="black"]
    node10834_name [shape=none, label=<<font color="black">Call[10834]</font>>]
    node10834_name -> node10834 [arrowhead=none, color="black", style=dashed]
    node10834 [shape=cds, label=<<font color="black">%14 = varEnv-&gt;CanDeclareGlobalFunction(fn)</font>> color="black" fillcolor="white", style=filled]
    node10834 -> node10835 [color="black"]
    node10838_name [shape=none, label=<<font color="black">Block[10838]</font>>]
    node10838_name -> node10838 [arrowhead=none, color="black", style=dashed]
    node10838 [shape=box, label=<<font color="black">[0] push declaredFunctionNames &lt; fn<BR ALIGN="LEFT"/>[1] push d &gt; functionsToInitialize<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10838 -> node10826 [color="black"]
    node10846_name [shape=none, label=<<font color="black">Block[10846]</font>>]
    node10846_name -> node10846 [arrowhead=none, color="black", style=dashed]
    node10846 [shape=box, label=<<font color="black">[0] let vn = %18[%17]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10846 -> node10847 [color="black"]
    node10862_name [shape=none, label=<<font color="black">Call[10862]</font>>]
    node10862_name -> node10862 [arrowhead=none, color="black", style=dashed]
    node10862 [shape=cds, label=<<font color="black">%26 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10862 -> node10863 [color="black"]
    node10875_name [shape=none, label=<<font color="black">Branch[10875]</font>>]
    node10875_name -> node10875 [arrowhead=none, color="black", style=dashed]
    node10875 [shape=diamond, label=<<font color="black">(&lt; %30 %31.length)</font>> color="black" fillcolor="white", style=filled]
    node10875 -> node10876 [label=<<font color="black">true</font>> color="black"]
    node10875 -> node10895 [label=<<font color="black">false</font>> color="black"]
    node10835_name [shape=none, label=<<font color="black">Block[10835]</font>>]
    node10835_name -> node10835 [arrowhead=none, color="black", style=dashed]
    node10835 [shape=box, label=<<font color="black">[0] let fnDefinable = [? %14]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10835 -> node10836 [color="black"]
    node10847_name [shape=none, label=<<font color="black">Branch[10847]</font>>]
    node10847_name -> node10847 [arrowhead=none, color="black", style=dashed]
    node10847 [shape=diamond, label=<<font color="black">(! (contains declaredFunctionNames vn))</font>> color="black" fillcolor="white", style=filled]
    node10847 -> node10848 [label=<<font color="black">true</font>> color="black"]
    node10847 -> node10855 [label=<<font color="black">false</font>> color="black"]
    node10863_name [shape=none, label=<<font color="black">Block[10863]</font>>]
    node10863_name -> node10863 [arrowhead=none, color="black", style=dashed]
    node10863 [shape=box, label=<<font color="black">[0] %25 = %26<BR ALIGN="LEFT"/>[1] %24 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10863 -> node10864 [color="black"]
    node10876_name [shape=none, label=<<font color="black">Block[10876]</font>>]
    node10876_name -> node10876 [arrowhead=none, color="black", style=dashed]
    node10876 [shape=box, label=<<font color="black">[0] let f = %31[%30]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10876 -> node10877 [color="black"]
    node10895_name [shape=none, label=<<font color="black">Block[10895]</font>>]
    node10895_name -> node10895 [arrowhead=none, color="black", style=dashed]
    node10895 [shape=box, label=<<font color="black">[0] %40 = declaredVarNames<BR ALIGN="LEFT"/>[1] %39 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10895 -> node10896 [color="black"]
    node10836_name [shape=none, label=<<font color="black">Branch[10836]</font>>]
    node10836_name -> node10836 [arrowhead=none, color="black", style=dashed]
    node10836 [shape=diamond, label=<<font color="black">(= fnDefinable false)</font>> color="black" fillcolor="white", style=filled]
    node10836 -> node10837 [label=<<font color="black">true</font>> color="black"]
    node10836 -> node10838 [label=<<font color="black">false</font>> color="black"]
    node10848_name [shape=none, label=<<font color="black">Branch[10848]</font>>]
    node10848_name -> node10848 [arrowhead=none, color="black", style=dashed]
    node10848 [shape=diamond, label=<<font color="black">(? varEnv: &quot;GlobalEnvironmentRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10848 -> node10849 [label=<<font color="black">true</font>> color="black"]
    node10848 -> node10853 [label=<<font color="black">false</font>> color="black"]
    node10855_name [shape=none, label=<<font color="black">Block[10855]</font>>]
    node10855_name -> node10855 [arrowhead=none, color="black", style=dashed]
    node10855 [shape=box, label=<<font color="black">[0] %17 = (+ %17 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10855 -> node10845 [color="black"]
    node10864_name [shape=none, label=<<font color="black">Branch[10864]</font>>]
    node10864_name -> node10864 [arrowhead=none, color="black", style=dashed]
    node10864 [shape=diamond, label=<<font color="black">(&lt; %24 %25.length)</font>> color="black" fillcolor="white", style=filled]
    node10864 -> node10865 [label=<<font color="black">true</font>> color="black"]
    node10864 -> node10873 [label=<<font color="black">false</font>> color="black"]
    node10877_name [shape=none, label=<<font color="black">Call[10877]</font>>]
    node10877_name -> node10877 [arrowhead=none, color="black", style=dashed]
    node10877 [shape=cds, label=<<font color="black">%32 = f-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10877 -> node10878 [color="black"]
    node10896_name [shape=none, label=<<font color="black">Branch[10896]</font>>]
    node10896_name -> node10896 [arrowhead=none, color="black", style=dashed]
    node10896 [shape=diamond, label=<<font color="black">(&lt; %39 %40.length)</font>> color="black" fillcolor="white", style=filled]
    node10896 -> node10897 [label=<<font color="black">true</font>> color="black"]
    node10896 -> node10910 [label=<<font color="black">false</font>> color="black"]
    node10837_name [shape=none, label=<<font color="black">Block[10837]</font>>]
    node10837_name -> node10837 [arrowhead=none, color="black", style=dashed]
    node10837 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#880])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10837 -> cluster1984_exit [color="black"]
    node10849_name [shape=none, label=<<font color="black">Call[10849]</font>>]
    node10849_name -> node10849 [arrowhead=none, color="black", style=dashed]
    node10849 [shape=cds, label=<<font color="black">%20 = varEnv-&gt;CanDeclareGlobalVar(vn)</font>> color="black" fillcolor="white", style=filled]
    node10849 -> node10850 [color="black"]
    node10853_name [shape=none, label=<<font color="black">Branch[10853]</font>>]
    node10853_name -> node10853 [arrowhead=none, color="black", style=dashed]
    node10853 [shape=diamond, label=<<font color="black">(! (contains declaredVarNames vn))</font>> color="black" fillcolor="white", style=filled]
    node10853 -> node10854 [label=<<font color="black">true</font>> color="black"]
    node10853 -> node10855 [label=<<font color="black">false</font>> color="black"]
    node10865_name [shape=none, label=<<font color="black">Block[10865]</font>>]
    node10865_name -> node10865 [arrowhead=none, color="black", style=dashed]
    node10865 [shape=box, label=<<font color="black">[0] let dn = %25[%24]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10865 -> node10866 [color="black"]
    node10873_name [shape=none, label=<<font color="black">Block[10873]</font>>]
    node10873_name -> node10873 [arrowhead=none, color="black", style=dashed]
    node10873 [shape=box, label=<<font color="black">[0] %22 = (+ %22 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10873 -> node10860 [color="black"]
    node10878_name [shape=none, label=<<font color="black">Block[10878]</font>>]
    node10878_name -> node10878 [arrowhead=none, color="black", style=dashed]
    node10878 [shape=box, label=<<font color="black">[0] let fn = %32[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10878 -> node10879 [color="black"]
    node10897_name [shape=none, label=<<font color="black">Block[10897]</font>>]
    node10897_name -> node10897 [arrowhead=none, color="black", style=dashed]
    node10897 [shape=box, label=<<font color="black">[0] let vn = %40[%39]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10897 -> node10898 [color="black"]
    node10910_name [shape=none, label=<<font color="black">Block[10910]</font>>]
    node10910_name -> node10910 [arrowhead=none, color="black", style=dashed]
    node10910 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10910 -> cluster1984_exit [color="black"]
    node10850_name [shape=none, label=<<font color="black">Block[10850]</font>>]
    node10850_name -> node10850 [arrowhead=none, color="black", style=dashed]
    node10850 [shape=box, label=<<font color="black">[0] let vnDefinable = [? %20]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10850 -> node10851 [color="black"]
    node10854_name [shape=none, label=<<font color="black">Block[10854]</font>>]
    node10854_name -> node10854 [arrowhead=none, color="black", style=dashed]
    node10854 [shape=box, label=<<font color="black">[0] push declaredVarNames &lt; vn<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10854 -> node10855 [color="black"]
    node10866_name [shape=none, label=<<font color="black">Call[10866]</font>>]
    node10866_name -> node10866 [arrowhead=none, color="black", style=dashed]
    node10866 [shape=cds, label=<<font color="black">%27 = d-&gt;IsConstantDeclaration()</font>> color="black" fillcolor="white", style=filled]
    node10866 -> node10867 [color="black"]
    node10879_name [shape=none, label=<<font color="black">Call[10879]</font>>]
    node10879_name -> node10879 [arrowhead=none, color="black", style=dashed]
    node10879 [shape=cds, label=<<font color="black">%33 = f-&gt;InstantiateFunctionObject(lexEnv, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node10879 -> node10880 [color="black"]
    node10898_name [shape=none, label=<<font color="black">Branch[10898]</font>>]
    node10898_name -> node10898 [arrowhead=none, color="black", style=dashed]
    node10898 [shape=diamond, label=<<font color="black">(? varEnv: &quot;GlobalEnvironmentRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10898 -> node10899 [label=<<font color="black">true</font>> color="black"]
    node10898 -> node10901 [label=<<font color="black">false</font>> color="black"]
    node10851_name [shape=none, label=<<font color="black">Branch[10851]</font>>]
    node10851_name -> node10851 [arrowhead=none, color="black", style=dashed]
    node10851 [shape=diamond, label=<<font color="black">(= vnDefinable false)</font>> color="black" fillcolor="white", style=filled]
    node10851 -> node10852 [label=<<font color="black">true</font>> color="black"]
    node10851 -> node10853 [label=<<font color="black">false</font>> color="black"]
    node10867_name [shape=none, label=<<font color="black">Branch[10867]</font>>]
    node10867_name -> node10867 [arrowhead=none, color="black", style=dashed]
    node10867 [shape=diamond, label=<<font color="black">(= %27 true)</font>> color="black" fillcolor="white", style=filled]
    node10867 -> node10868 [label=<<font color="black">true</font>> color="black"]
    node10867 -> node10870 [label=<<font color="black">false</font>> color="black"]
    node10880_name [shape=none, label=<<font color="black">Block[10880]</font>>]
    node10880_name -> node10880 [arrowhead=none, color="black", style=dashed]
    node10880 [shape=box, label=<<font color="black">[0] let fo = %33<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10880 -> node10881 [color="black"]
    node10899_name [shape=none, label=<<font color="black">Call[10899]</font>>]
    node10899_name -> node10899 [arrowhead=none, color="black", style=dashed]
    node10899 [shape=cds, label=<<font color="black">%41 = varEnv-&gt;CreateGlobalVarBinding(vn, true)</font>> color="black" fillcolor="white", style=filled]
    node10899 -> node10900 [color="black"]
    node10901_name [shape=none, label=<<font color="black">Call[10901]</font>>]
    node10901_name -> node10901 [arrowhead=none, color="black", style=dashed]
    node10901 [shape=cds, label=<<font color="black">%42 = varEnv-&gt;HasBinding(vn)</font>> color="black" fillcolor="white", style=filled]
    node10901 -> node10902 [color="black"]
    node10852_name [shape=none, label=<<font color="black">Block[10852]</font>>]
    node10852_name -> node10852 [arrowhead=none, color="black", style=dashed]
    node10852 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#882])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10852 -> cluster1984_exit [color="black"]
    node10868_name [shape=none, label=<<font color="black">Call[10868]</font>>]
    node10868_name -> node10868 [arrowhead=none, color="black", style=dashed]
    node10868 [shape=cds, label=<<font color="black">%28 = lexEnv-&gt;CreateImmutableBinding(dn, true)</font>> color="black" fillcolor="white", style=filled]
    node10868 -> node10869 [color="black"]
    node10870_name [shape=none, label=<<font color="black">Call[10870]</font>>]
    node10870_name -> node10870 [arrowhead=none, color="black", style=dashed]
    node10870 [shape=cds, label=<<font color="black">%29 = lexEnv-&gt;CreateMutableBinding(dn, false)</font>> color="black" fillcolor="white", style=filled]
    node10870 -> node10871 [color="black"]
    node10881_name [shape=none, label=<<font color="black">Branch[10881]</font>>]
    node10881_name -> node10881 [arrowhead=none, color="black", style=dashed]
    node10881 [shape=diamond, label=<<font color="black">(? varEnv: &quot;GlobalEnvironmentRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10881 -> node10882 [label=<<font color="black">true</font>> color="black"]
    node10881 -> node10884 [label=<<font color="black">false</font>> color="black"]
    node10900_name [shape=none, label=<<font color="black">Block[10900]</font>>]
    node10900_name -> node10900 [arrowhead=none, color="black", style=dashed]
    node10900 [shape=box, label=<<font color="black">[0] [? %41]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10900 -> node10909 [color="black"]
    node10902_name [shape=none, label=<<font color="black">Block[10902]</font>>]
    node10902_name -> node10902 [arrowhead=none, color="black", style=dashed]
    node10902 [shape=box, label=<<font color="black">[0] let bindingExists = [! %42]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10902 -> node10903 [color="black"]
    node10869_name [shape=none, label=<<font color="black">Block[10869]</font>>]
    node10869_name -> node10869 [arrowhead=none, color="black", style=dashed]
    node10869 [shape=box, label=<<font color="black">[0] [? %28]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10869 -> node10872 [color="black"]
    node10871_name [shape=none, label=<<font color="black">Block[10871]</font>>]
    node10871_name -> node10871 [arrowhead=none, color="black", style=dashed]
    node10871 [shape=box, label=<<font color="black">[0] [? %29]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10871 -> node10872 [color="black"]
    node10882_name [shape=none, label=<<font color="black">Call[10882]</font>>]
    node10882_name -> node10882 [arrowhead=none, color="black", style=dashed]
    node10882 [shape=cds, label=<<font color="black">%34 = varEnv-&gt;CreateGlobalFunctionBinding(fn, fo, true)</font>> color="black" fillcolor="white", style=filled]
    node10882 -> node10883 [color="black"]
    node10884_name [shape=none, label=<<font color="black">Call[10884]</font>>]
    node10884_name -> node10884 [arrowhead=none, color="black", style=dashed]
    node10884 [shape=cds, label=<<font color="black">%35 = varEnv-&gt;HasBinding(fn)</font>> color="black" fillcolor="white", style=filled]
    node10884 -> node10885 [color="black"]
    node10909_name [shape=none, label=<<font color="black">Block[10909]</font>>]
    node10909_name -> node10909 [arrowhead=none, color="black", style=dashed]
    node10909 [shape=box, label=<<font color="black">[0] %39 = (+ %39 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10909 -> node10896 [color="black"]
    node10903_name [shape=none, label=<<font color="black">Branch[10903]</font>>]
    node10903_name -> node10903 [arrowhead=none, color="black", style=dashed]
    node10903 [shape=diamond, label=<<font color="black">(= bindingExists false)</font>> color="black" fillcolor="white", style=filled]
    node10903 -> node10904 [label=<<font color="black">true</font>> color="black"]
    node10903 -> node10909 [label=<<font color="black">false</font>> color="black"]
    node10872_name [shape=none, label=<<font color="black">Block[10872]</font>>]
    node10872_name -> node10872 [arrowhead=none, color="black", style=dashed]
    node10872 [shape=box, label=<<font color="black">[0] %24 = (+ %24 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10872 -> node10864 [color="black"]
    node10883_name [shape=none, label=<<font color="black">Block[10883]</font>>]
    node10883_name -> node10883 [arrowhead=none, color="black", style=dashed]
    node10883 [shape=box, label=<<font color="black">[0] [? %34]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10883 -> node10894 [color="black"]
    node10885_name [shape=none, label=<<font color="black">Block[10885]</font>>]
    node10885_name -> node10885 [arrowhead=none, color="black", style=dashed]
    node10885 [shape=box, label=<<font color="black">[0] let bindingExists = [! %35]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10885 -> node10886 [color="black"]
    node10904_name [shape=none, label=<<font color="black">Block[10904]</font>>]
    node10904_name -> node10904 [arrowhead=none, color="black", style=dashed]
    node10904 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10904 -> node10905 [color="black"]
    node10894_name [shape=none, label=<<font color="black">Block[10894]</font>>]
    node10894_name -> node10894 [arrowhead=none, color="black", style=dashed]
    node10894 [shape=box, label=<<font color="black">[0] %30 = (+ %30 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10894 -> node10875 [color="black"]
    node10886_name [shape=none, label=<<font color="black">Branch[10886]</font>>]
    node10886_name -> node10886 [arrowhead=none, color="black", style=dashed]
    node10886 [shape=diamond, label=<<font color="black">(= bindingExists false)</font>> color="black" fillcolor="white", style=filled]
    node10886 -> node10887 [label=<<font color="black">true</font>> color="black"]
    node10886 -> node10892 [label=<<font color="black">false</font>> color="black"]
    node10905_name [shape=none, label=<<font color="black">Call[10905]</font>>]
    node10905_name -> node10905 [arrowhead=none, color="black", style=dashed]
    node10905 [shape=cds, label=<<font color="black">%43 = varEnv-&gt;CreateMutableBinding(vn, true)</font>> color="black" fillcolor="white", style=filled]
    node10905 -> node10906 [color="black"]
    node10887_name [shape=none, label=<<font color="black">Block[10887]</font>>]
    node10887_name -> node10887 [arrowhead=none, color="black", style=dashed]
    node10887 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10887 -> node10888 [color="black"]
    node10892_name [shape=none, label=<<font color="black">Call[10892]</font>>]
    node10892_name -> node10892 [arrowhead=none, color="black", style=dashed]
    node10892 [shape=cds, label=<<font color="black">%38 = varEnv-&gt;SetMutableBinding(fn, fo, false)</font>> color="black" fillcolor="white", style=filled]
    node10892 -> node10893 [color="black"]
    node10906_name [shape=none, label=<<font color="black">Block[10906]</font>>]
    node10906_name -> node10906 [arrowhead=none, color="black", style=dashed]
    node10906 [shape=box, label=<<font color="black">[0] [! %43]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10906 -> node10907 [color="black"]
    node10888_name [shape=none, label=<<font color="black">Call[10888]</font>>]
    node10888_name -> node10888 [arrowhead=none, color="black", style=dashed]
    node10888 [shape=cds, label=<<font color="black">%36 = varEnv-&gt;CreateMutableBinding(fn, true)</font>> color="black" fillcolor="white", style=filled]
    node10888 -> node10889 [color="black"]
    node10893_name [shape=none, label=<<font color="black">Block[10893]</font>>]
    node10893_name -> node10893 [arrowhead=none, color="black", style=dashed]
    node10893 [shape=box, label=<<font color="black">[0] [! %38]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10893 -> node10894 [color="black"]
    node10907_name [shape=none, label=<<font color="black">Call[10907]</font>>]
    node10907_name -> node10907 [arrowhead=none, color="black", style=dashed]
    node10907 [shape=cds, label=<<font color="black">%44 = varEnv-&gt;InitializeBinding(vn, undefined)</font>> color="black" fillcolor="white", style=filled]
    node10907 -> node10908 [color="black"]
    node10889_name [shape=none, label=<<font color="black">Block[10889]</font>>]
    node10889_name -> node10889 [arrowhead=none, color="black", style=dashed]
    node10889 [shape=box, label=<<font color="black">[0] [! %36]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10889 -> node10890 [color="black"]
    node10908_name [shape=none, label=<<font color="black">Block[10908]</font>>]
    node10908_name -> node10908 [arrowhead=none, color="black", style=dashed]
    node10908 [shape=box, label=<<font color="black">[0] [! %44]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10908 -> node10909 [color="black"]
    node10890_name [shape=none, label=<<font color="black">Call[10890]</font>>]
    node10890_name -> node10890 [arrowhead=none, color="black", style=dashed]
    node10890 [shape=cds, label=<<font color="black">%37 = varEnv-&gt;InitializeBinding(fn, fo)</font>> color="black" fillcolor="white", style=filled]
    node10890 -> node10891 [color="black"]
    node10891_name [shape=none, label=<<font color="black">Block[10891]</font>>]
    node10891_name -> node10891 [arrowhead=none, color="black", style=dashed]
    node10891 [shape=box, label=<<font color="black">[0] [! %37]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10891 -> node10894 [color="black"]
  }
}