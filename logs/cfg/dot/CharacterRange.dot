digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2301 {
    label = "def CharacterRange(A: Unknown["CharSet"], B: Unknown["CharSet"]): Unknown["CharSet"]"
    style = rounded
    cluster2301_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2301_entry_name -> cluster2301_entry [arrowhead=none, color="black", style=dashed]
    cluster2301_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2301_entry -> node14082 [color="black"]
    cluster2301_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2301_exit_name -> cluster2301_exit [arrowhead=none, color="black", style=dashed]
    cluster2301_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14082_name [shape=none, label=<<font color="black">Block[14082]</font>>]
    node14082_name -> node14082 [arrowhead=none, color="black", style=dashed]
    node14082 [shape=box, label=<<font color="black">[0] assert (yet &quot;_A_ and _B_ each contain exactly one character.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _a_ be the one character in CharSet _A_.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _b_ be the one character in CharSet _B_.&quot;)<BR ALIGN="LEFT"/>[3] (yet &quot;Let _i_ be the character value of character _a_.&quot;)<BR ALIGN="LEFT"/>[4] (yet &quot;Let _j_ be the character value of character _b_.&quot;)<BR ALIGN="LEFT"/>[5] assert (! (&lt; j i))<BR ALIGN="LEFT"/>[6] (yet &quot;Return the CharSet containing all characters with a character value greater than or equal to _i_ and less than or equal to _j_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14082 -> cluster2301_exit [color="black"]
  }
}