digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster152 {
    label = "def EnumerableOwnPropertyNames(O: Object, kind: Const[~key+value~, ~key~, ~value~]): Unknown["EitherANormalCompletionContainingAListOrAnAbruptCompletion"]"
    style = rounded
    cluster152_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster152_entry_name -> cluster152_entry [arrowhead=none, color="black", style=dashed]
    cluster152_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster152_entry -> node1273 [color="black"]
    cluster152_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster152_exit_name -> cluster152_exit [arrowhead=none, color="black", style=dashed]
    cluster152_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1273_name [shape=none, label=<<font color="black">Call[1273]</font>>]
    node1273_name -> node1273 [arrowhead=none, color="black", style=dashed]
    node1273 [shape=cds, label=<<font color="black">%0 = O-&gt;OwnPropertyKeys()</font>> color="black" fillcolor="white", style=filled]
    node1273 -> node1274 [color="black"]
    node1274_name [shape=none, label=<<font color="black">Block[1274]</font>>]
    node1274_name -> node1274 [arrowhead=none, color="black", style=dashed]
    node1274 [shape=box, label=<<font color="black">[0] let ownKeys = [? %0]<BR ALIGN="LEFT"/>[1] let properties = (new [])[#62]<BR ALIGN="LEFT"/>[2] %2 = ownKeys<BR ALIGN="LEFT"/>[3] %1 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1274 -> node1275 [color="black"]
    node1275_name [shape=none, label=<<font color="black">Branch[1275]</font>>]
    node1275_name -> node1275 [arrowhead=none, color="black", style=dashed]
    node1275 [shape=diamond, label=<<font color="black">(&lt; %1 %2.length)</font>> color="black" fillcolor="white", style=filled]
    node1275 -> node1276 [label=<<font color="black">true</font>> color="black"]
    node1275 -> node1291 [label=<<font color="black">false</font>> color="black"]
    node1276_name [shape=none, label=<<font color="black">Block[1276]</font>>]
    node1276_name -> node1276 [arrowhead=none, color="black", style=dashed]
    node1276 [shape=box, label=<<font color="black">[0] let key = %2[%1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1276 -> node1277 [color="black"]
    node1291_name [shape=none, label=<<font color="black">Block[1291]</font>>]
    node1291_name -> node1291 [arrowhead=none, color="black", style=dashed]
    node1291 [shape=box, label=<<font color="black">[0] return properties<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1291 -> cluster152_exit [color="black"]
    node1277_name [shape=none, label=<<font color="black">Branch[1277]</font>>]
    node1277_name -> node1277 [arrowhead=none, color="black", style=dashed]
    node1277 [shape=diamond, label=<<font color="black">(= (typeof key) @String)</font>> color="black" fillcolor="white", style=filled]
    node1277 -> node1278 [label=<<font color="black">true</font>> color="black"]
    node1277 -> node1290 [label=<<font color="black">false</font>> color="black"]
    node1278_name [shape=none, label=<<font color="black">Call[1278]</font>>]
    node1278_name -> node1278 [arrowhead=none, color="black", style=dashed]
    node1278 [shape=cds, label=<<font color="black">%3 = O-&gt;GetOwnProperty(key)</font>> color="black" fillcolor="white", style=filled]
    node1278 -> node1279 [color="black"]
    node1290_name [shape=none, label=<<font color="black">Block[1290]</font>>]
    node1290_name -> node1290 [arrowhead=none, color="black", style=dashed]
    node1290 [shape=box, label=<<font color="black">[0] %1 = (+ %1 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1290 -> node1275 [color="black"]
    node1279_name [shape=none, label=<<font color="black">Block[1279]</font>>]
    node1279_name -> node1279 [arrowhead=none, color="black", style=dashed]
    node1279 [shape=box, label=<<font color="black">[0] let desc = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1279 -> node1280 [color="black"]
    node1280_name [shape=none, label=<<font color="black">Branch[1280]</font>>]
    node1280_name -> node1280 [arrowhead=none, color="black", style=dashed]
    node1280 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= desc undefined)) (= desc.Enumerable true))</font>> color="black" fillcolor="white", style=filled]
    node1280 -> node1281 [label=<<font color="black">true</font>> color="black"]
    node1280 -> node1290 [label=<<font color="black">false</font>> color="black"]
    node1281_name [shape=none, label=<<font color="black">Branch[1281]</font>>]
    node1281_name -> node1281 [arrowhead=none, color="black", style=dashed]
    node1281 [shape=diamond, label=<<font color="black">(= kind ~key~)</font>> color="black" fillcolor="white", style=filled]
    node1281 -> node1282 [label=<<font color="black">true</font>> color="black"]
    node1281 -> node1283 [label=<<font color="black">false</font>> color="black"]
    node1282_name [shape=none, label=<<font color="black">Block[1282]</font>>]
    node1282_name -> node1282 [arrowhead=none, color="black", style=dashed]
    node1282 [shape=box, label=<<font color="black">[0] push properties &lt; key<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1282 -> node1290 [color="black"]
    node1283_name [shape=none, label=<<font color="black">Call[1283]</font>>]
    node1283_name -> node1283 [arrowhead=none, color="black", style=dashed]
    node1283 [shape=cds, label=<<font color="black">%4 = clo&lt;Get&gt;(O, key)</font>> color="black" fillcolor="white", style=filled]
    node1283 -> node1284 [color="black"]
    node1284_name [shape=none, label=<<font color="black">Block[1284]</font>>]
    node1284_name -> node1284 [arrowhead=none, color="black", style=dashed]
    node1284 [shape=box, label=<<font color="black">[0] let value = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1284 -> node1285 [color="black"]
    node1285_name [shape=none, label=<<font color="black">Branch[1285]</font>>]
    node1285_name -> node1285 [arrowhead=none, color="black", style=dashed]
    node1285 [shape=diamond, label=<<font color="black">(= kind ~value~)</font>> color="black" fillcolor="white", style=filled]
    node1285 -> node1286 [label=<<font color="black">true</font>> color="black"]
    node1285 -> node1287 [label=<<font color="black">false</font>> color="black"]
    node1286_name [shape=none, label=<<font color="black">Block[1286]</font>>]
    node1286_name -> node1286 [arrowhead=none, color="black", style=dashed]
    node1286 [shape=box, label=<<font color="black">[0] push properties &lt; value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1286 -> node1290 [color="black"]
    node1287_name [shape=none, label=<<font color="black">Block[1287]</font>>]
    node1287_name -> node1287 [arrowhead=none, color="black", style=dashed]
    node1287 [shape=box, label=<<font color="black">[0] assert (= kind ~key+value~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1287 -> node1288 [color="black"]
    node1288_name [shape=none, label=<<font color="black">Call[1288]</font>>]
    node1288_name -> node1288 [arrowhead=none, color="black", style=dashed]
    node1288 [shape=cds, label=<<font color="black">%5 = clo&lt;CreateArrayFromList&gt;((new [key, value])[#63])</font>> color="black" fillcolor="white", style=filled]
    node1288 -> node1289 [color="black"]
    node1289_name [shape=none, label=<<font color="black">Block[1289]</font>>]
    node1289_name -> node1289 [arrowhead=none, color="black", style=dashed]
    node1289 [shape=box, label=<<font color="black">[0] let entry = %5<BR ALIGN="LEFT"/>[1] push properties &lt; entry<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1289 -> node1290 [color="black"]
  }
}