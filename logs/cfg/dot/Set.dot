digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster132 {
    label = "def Set(O: Object, P: Symbol | String, V: ESValue, Throw: Boolean): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster132_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster132_entry_name -> cluster132_entry [arrowhead=none, color="black", style=dashed]
    cluster132_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster132_entry -> node1100 [color="black"]
    cluster132_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster132_exit_name -> cluster132_exit [arrowhead=none, color="black", style=dashed]
    cluster132_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1100_name [shape=none, label=<<font color="black">Call[1100]</font>>]
    node1100_name -> node1100 [arrowhead=none, color="black", style=dashed]
    node1100 [shape=cds, label=<<font color="black">%0 = O-&gt;Set(P, V, O)</font>> color="black" fillcolor="white", style=filled]
    node1100 -> node1101 [color="black"]
    node1101_name [shape=none, label=<<font color="black">Block[1101]</font>>]
    node1101_name -> node1101 [arrowhead=none, color="black", style=dashed]
    node1101 [shape=box, label=<<font color="black">[0] let success = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1101 -> node1102 [color="black"]
    node1102_name [shape=none, label=<<font color="black">Branch[1102]</font>>]
    node1102_name -> node1102 [arrowhead=none, color="black", style=dashed]
    node1102 [shape=diamond, label=<<font color="black">(&amp;&amp; (= success false) (= Throw true))</font>> color="black" fillcolor="white", style=filled]
    node1102 -> node1103 [label=<<font color="black">true</font>> color="black"]
    node1102 -> node1104 [label=<<font color="black">false</font>> color="black"]
    node1103_name [shape=none, label=<<font color="black">Block[1103]</font>>]
    node1103_name -> node1103 [arrowhead=none, color="black", style=dashed]
    node1103 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#40])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1103 -> cluster132_exit [color="black"]
    node1104_name [shape=none, label=<<font color="black">Block[1104]</font>>]
    node1104_name -> node1104 [arrowhead=none, color="black", style=dashed]
    node1104 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1104 -> cluster132_exit [color="black"]
  }
}