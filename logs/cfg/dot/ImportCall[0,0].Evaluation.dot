digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1296 {
    label = "def <SYNTAX>:ImportCall[0,0].Evaluation(this: Ast:ImportCall[0,0]): Unknown"
    style = rounded
    cluster1296_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1296_entry_name -> cluster1296_entry [arrowhead=none, color="black", style=dashed]
    cluster1296_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1296_entry -> node6101 [color="black"]
    cluster1296_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1296_exit_name -> cluster1296_exit [arrowhead=none, color="black", style=dashed]
    cluster1296_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6101_name [shape=none, label=<<font color="black">Call[6101]</font>>]
    node6101_name -> node6101 [arrowhead=none, color="black", style=dashed]
    node6101 [shape=cds, label=<<font color="black">%0 = clo&lt;GetActiveScriptOrModule&gt;()</font>> color="black" fillcolor="white", style=filled]
    node6101 -> node6102 [color="black"]
    node6102_name [shape=none, label=<<font color="black">Block[6102]</font>>]
    node6102_name -> node6102 [arrowhead=none, color="black", style=dashed]
    node6102 [shape=box, label=<<font color="black">[0] let referencingScriptOrModule = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6102 -> node6103 [color="black"]
    node6103_name [shape=none, label=<<font color="black">Call[6103]</font>>]
    node6103_name -> node6103 [arrowhead=none, color="black", style=dashed]
    node6103 [shape=cds, label=<<font color="black">%1 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6103 -> node6104 [color="black"]
    node6104_name [shape=none, label=<<font color="black">Block[6104]</font>>]
    node6104_name -> node6104 [arrowhead=none, color="black", style=dashed]
    node6104 [shape=box, label=<<font color="black">[0] let argRef = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6104 -> node6105 [color="black"]
    node6105_name [shape=none, label=<<font color="black">Call[6105]</font>>]
    node6105_name -> node6105 [arrowhead=none, color="black", style=dashed]
    node6105 [shape=cds, label=<<font color="black">%2 = clo&lt;GetValue&gt;(argRef)</font>> color="black" fillcolor="white", style=filled]
    node6105 -> node6106 [color="black"]
    node6106_name [shape=none, label=<<font color="black">Block[6106]</font>>]
    node6106_name -> node6106 [arrowhead=none, color="black", style=dashed]
    node6106 [shape=box, label=<<font color="black">[0] let specifier = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6106 -> node6107 [color="black"]
    node6107_name [shape=none, label=<<font color="black">Call[6107]</font>>]
    node6107_name -> node6107 [arrowhead=none, color="black", style=dashed]
    node6107 [shape=cds, label=<<font color="black">%3 = clo&lt;NewPromiseCapability&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node6107 -> node6108 [color="black"]
    node6108_name [shape=none, label=<<font color="black">Block[6108]</font>>]
    node6108_name -> node6108 [arrowhead=none, color="black", style=dashed]
    node6108 [shape=box, label=<<font color="black">[0] let promiseCapability = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6108 -> node6109 [color="black"]
    node6109_name [shape=none, label=<<font color="black">Call[6109]</font>>]
    node6109_name -> node6109 [arrowhead=none, color="black", style=dashed]
    node6109 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(specifier)</font>> color="black" fillcolor="white", style=filled]
    node6109 -> node6110 [color="black"]
    node6110_name [shape=none, label=<<font color="black">Call[6110]</font>>]
    node6110_name -> node6110 [arrowhead=none, color="black", style=dashed]
    node6110 [shape=cds, label=<<font color="black">%5 = clo&lt;Completion&gt;(%4)</font>> color="black" fillcolor="white", style=filled]
    node6110 -> node6111 [color="black"]
    node6111_name [shape=none, label=<<font color="black">Block[6111]</font>>]
    node6111_name -> node6111 [arrowhead=none, color="black", style=dashed]
    node6111 [shape=box, label=<<font color="black">[0] let specifierString = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6111 -> node6112 [color="black"]
    node6112_name [shape=none, label=<<font color="black">Branch[6112]</font>>]
    node6112_name -> node6112 [arrowhead=none, color="black", style=dashed]
    node6112 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? specifierString) (! (= specifierString.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node6112 -> node6113 [label=<<font color="black">true</font>> color="black"]
    node6112 -> node6115 [label=<<font color="black">false</font>> color="black"]
    node6113_name [shape=none, label=<<font color="black">Call[6113]</font>>]
    node6113_name -> node6113 [arrowhead=none, color="black", style=dashed]
    node6113 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [specifierString.Value])[#585])</font>> color="black" fillcolor="white", style=filled]
    node6113 -> node6114 [color="black"]
    node6115_name [shape=none, label=<<font color="black">Branch[6115]</font>>]
    node6115_name -> node6115 [arrowhead=none, color="black", style=dashed]
    node6115 [shape=diamond, label=<<font color="black">(? specifierString: &quot;CompletionRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node6115 -> node6116 [label=<<font color="black">true</font>> color="black"]
    node6115 -> node6117 [label=<<font color="black">false</font>> color="black"]
    node6114_name [shape=none, label=<<font color="black">Block[6114]</font>>]
    node6114_name -> node6114 [arrowhead=none, color="black", style=dashed]
    node6114 [shape=box, label=<<font color="black">[0] [? %6]<BR ALIGN="LEFT"/>[1] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6114 -> cluster1296_exit [color="black"]
    node6116_name [shape=none, label=<<font color="black">Block[6116]</font>>]
    node6116_name -> node6116 [arrowhead=none, color="black", style=dashed]
    node6116 [shape=box, label=<<font color="black">[0] specifierString = specifierString.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6116 -> node6117 [color="black"]
    node6117_name [shape=none, label=<<font color="black">Call[6117]</font>>]
    node6117_name -> node6117 [arrowhead=none, color="black", style=dashed]
    node6117 [shape=cds, label=<<font color="black">%7 = clo&lt;HostImportModuleDynamically&gt;(referencingScriptOrModule, specifierString, promiseCapability)</font>> color="black" fillcolor="white", style=filled]
    node6117 -> node6118 [color="black"]
    node6118_name [shape=none, label=<<font color="black">Block[6118]</font>>]
    node6118_name -> node6118 [arrowhead=none, color="black", style=dashed]
    node6118 [shape=box, label=<<font color="black">[0] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6118 -> cluster1296_exit [color="black"]
  }
}