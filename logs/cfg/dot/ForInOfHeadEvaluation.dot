digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1458 {
    label = "def ForIn/OfHeadEvaluation(uninitializedBoundNames: Unknown, expr: Unknown, iterationKind: Const[~async-iterate~, ~enumerate~, ~iterate~]): Normal[IteratorRecord] | Abrupt"
    style = rounded
    cluster1458_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1458_entry_name -> cluster1458_entry [arrowhead=none, color="black", style=dashed]
    cluster1458_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1458_entry -> node7688 [color="black"]
    cluster1458_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1458_exit_name -> cluster1458_exit [arrowhead=none, color="black", style=dashed]
    cluster1458_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node7688_name [shape=none, label=<<font color="black">Block[7688]</font>>]
    node7688_name -> node7688 [arrowhead=none, color="black", style=dashed]
    node7688 [shape=box, label=<<font color="black">[0] let oldEnv = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7688 -> node7689 [color="black"]
    node7689_name [shape=none, label=<<font color="black">Branch[7689]</font>>]
    node7689_name -> node7689 [arrowhead=none, color="black", style=dashed]
    node7689 [shape=diamond, label=<<font color="black">(! (= uninitializedBoundNames.length 0))</font>> color="black" fillcolor="white", style=filled]
    node7689 -> node7690 [label=<<font color="black">true</font>> color="black"]
    node7689 -> node7698 [label=<<font color="black">false</font>> color="black"]
    node7690_name [shape=none, label=<<font color="black">Block[7690]</font>>]
    node7690_name -> node7690 [arrowhead=none, color="black", style=dashed]
    node7690 [shape=box, label=<<font color="black">[0] assert (! (duplicated uninitializedBoundNames))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7690 -> node7691 [color="black"]
    node7698_name [shape=none, label=<<font color="black">Call[7698]</font>>]
    node7698_name -> node7698 [arrowhead=none, color="black", style=dashed]
    node7698 [shape=cds, label=<<font color="black">%4 = expr-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node7698 -> node7699 [color="black"]
    node7691_name [shape=none, label=<<font color="black">Call[7691]</font>>]
    node7691_name -> node7691 [arrowhead=none, color="black", style=dashed]
    node7691 [shape=cds, label=<<font color="black">%0 = clo&lt;NewDeclarativeEnvironment&gt;(oldEnv)</font>> color="black" fillcolor="white", style=filled]
    node7691 -> node7692 [color="black"]
    node7699_name [shape=none, label=<<font color="black">Block[7699]</font>>]
    node7699_name -> node7699 [arrowhead=none, color="black", style=dashed]
    node7699 [shape=box, label=<<font color="black">[0] let exprRef = %4<BR ALIGN="LEFT"/>[1] @EXECUTION_STACK[0].LexicalEnvironment = oldEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7699 -> node7700 [color="black"]
    node7692_name [shape=none, label=<<font color="black">Block[7692]</font>>]
    node7692_name -> node7692 [arrowhead=none, color="black", style=dashed]
    node7692 [shape=box, label=<<font color="black">[0] let newEnv = %0<BR ALIGN="LEFT"/>[1] %2 = uninitializedBoundNames<BR ALIGN="LEFT"/>[2] %1 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7692 -> node7693 [color="black"]
    node7700_name [shape=none, label=<<font color="black">Call[7700]</font>>]
    node7700_name -> node7700 [arrowhead=none, color="black", style=dashed]
    node7700 [shape=cds, label=<<font color="black">%5 = clo&lt;GetValue&gt;(exprRef)</font>> color="black" fillcolor="white", style=filled]
    node7700 -> node7701 [color="black"]
    node7693_name [shape=none, label=<<font color="black">Branch[7693]</font>>]
    node7693_name -> node7693 [arrowhead=none, color="black", style=dashed]
    node7693 [shape=diamond, label=<<font color="black">(&lt; %1 %2.length)</font>> color="black" fillcolor="white", style=filled]
    node7693 -> node7694 [label=<<font color="black">true</font>> color="black"]
    node7693 -> node7697 [label=<<font color="black">false</font>> color="black"]
    node7701_name [shape=none, label=<<font color="black">Block[7701]</font>>]
    node7701_name -> node7701 [arrowhead=none, color="black", style=dashed]
    node7701 [shape=box, label=<<font color="black">[0] let exprValue = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7701 -> node7702 [color="black"]
    node7694_name [shape=none, label=<<font color="black">Block[7694]</font>>]
    node7694_name -> node7694 [arrowhead=none, color="black", style=dashed]
    node7694 [shape=box, label=<<font color="black">[0] let name = %2[%1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7694 -> node7695 [color="black"]
    node7697_name [shape=none, label=<<font color="black">Block[7697]</font>>]
    node7697_name -> node7697 [arrowhead=none, color="black", style=dashed]
    node7697 [shape=box, label=<<font color="black">[0] @EXECUTION_STACK[0].LexicalEnvironment = newEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7697 -> node7698 [color="black"]
    node7702_name [shape=none, label=<<font color="black">Branch[7702]</font>>]
    node7702_name -> node7702 [arrowhead=none, color="black", style=dashed]
    node7702 [shape=diamond, label=<<font color="black">(= iterationKind ~enumerate~)</font>> color="black" fillcolor="white", style=filled]
    node7702 -> node7703 [label=<<font color="black">true</font>> color="black"]
    node7702 -> node7711 [label=<<font color="black">false</font>> color="black"]
    node7695_name [shape=none, label=<<font color="black">Call[7695]</font>>]
    node7695_name -> node7695 [arrowhead=none, color="black", style=dashed]
    node7695 [shape=cds, label=<<font color="black">%3 = newEnv-&gt;CreateMutableBinding(name, false)</font>> color="black" fillcolor="white", style=filled]
    node7695 -> node7696 [color="black"]
    node7703_name [shape=none, label=<<font color="black">Branch[7703]</font>>]
    node7703_name -> node7703 [arrowhead=none, color="black", style=dashed]
    node7703 [shape=diamond, label=<<font color="black">(|| (= exprValue undefined) (= exprValue null))</font>> color="black" fillcolor="white", style=filled]
    node7703 -> node7704 [label=<<font color="black">true</font>> color="black"]
    node7703 -> node7705 [label=<<font color="black">false</font>> color="black"]
    node7711_name [shape=none, label=<<font color="black">Block[7711]</font>>]
    node7711_name -> node7711 [arrowhead=none, color="black", style=dashed]
    node7711 [shape=box, label=<<font color="black">[0] assert (|| (= iterationKind ~iterate~) (= iterationKind ~async-iterate~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7711 -> node7712 [color="black"]
    node7696_name [shape=none, label=<<font color="black">Block[7696]</font>>]
    node7696_name -> node7696 [arrowhead=none, color="black", style=dashed]
    node7696 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/>[1] %1 = (+ %1 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7696 -> node7693 [color="black"]
    node7704_name [shape=none, label=<<font color="black">Block[7704]</font>>]
    node7704_name -> node7704 [arrowhead=none, color="black", style=dashed]
    node7704 [shape=box, label=<<font color="black">[0] return comp[~break~/~empty~](~empty~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7704 -> cluster1458_exit [color="black"]
    node7705_name [shape=none, label=<<font color="black">Call[7705]</font>>]
    node7705_name -> node7705 [arrowhead=none, color="black", style=dashed]
    node7705 [shape=cds, label=<<font color="black">%6 = clo&lt;ToObject&gt;(exprValue)</font>> color="black" fillcolor="white", style=filled]
    node7705 -> node7706 [color="black"]
    node7712_name [shape=none, label=<<font color="black">Branch[7712]</font>>]
    node7712_name -> node7712 [arrowhead=none, color="black", style=dashed]
    node7712 [shape=diamond, label=<<font color="black">(= iterationKind ~async-iterate~)</font>> color="black" fillcolor="white", style=filled]
    node7712 -> node7713 [label=<<font color="black">true</font>> color="black"]
    node7712 -> node7714 [label=<<font color="black">false</font>> color="black"]
    node7706_name [shape=none, label=<<font color="black">Block[7706]</font>>]
    node7706_name -> node7706 [arrowhead=none, color="black", style=dashed]
    node7706 [shape=box, label=<<font color="black">[0] let obj = [! %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7706 -> node7707 [color="black"]
    node7713_name [shape=none, label=<<font color="black">Block[7713]</font>>]
    node7713_name -> node7713 [arrowhead=none, color="black", style=dashed]
    node7713 [shape=box, label=<<font color="black">[0] let iteratorHint = ~async~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7713 -> node7715 [color="black"]
    node7714_name [shape=none, label=<<font color="black">Block[7714]</font>>]
    node7714_name -> node7714 [arrowhead=none, color="black", style=dashed]
    node7714 [shape=box, label=<<font color="black">[0] let iteratorHint = ~sync~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7714 -> node7715 [color="black"]
    node7707_name [shape=none, label=<<font color="black">Call[7707]</font>>]
    node7707_name -> node7707 [arrowhead=none, color="black", style=dashed]
    node7707 [shape=cds, label=<<font color="black">%7 = clo&lt;EnumerateObjectProperties&gt;(obj)</font>> color="black" fillcolor="white", style=filled]
    node7707 -> node7708 [color="black"]
    node7715_name [shape=none, label=<<font color="black">Call[7715]</font>>]
    node7715_name -> node7715 [arrowhead=none, color="black", style=dashed]
    node7715 [shape=cds, label=<<font color="black">%9 = clo&lt;GetIterator&gt;(exprValue, iteratorHint)</font>> color="black" fillcolor="white", style=filled]
    node7715 -> node7716 [color="black"]
    node7708_name [shape=none, label=<<font color="black">Block[7708]</font>>]
    node7708_name -> node7708 [arrowhead=none, color="black", style=dashed]
    node7708 [shape=box, label=<<font color="black">[0] let iterator = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7708 -> node7709 [color="black"]
    node7716_name [shape=none, label=<<font color="black">Block[7716]</font>>]
    node7716_name -> node7716 [arrowhead=none, color="black", style=dashed]
    node7716 [shape=box, label=<<font color="black">[0] return [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7716 -> cluster1458_exit [color="black"]
    node7709_name [shape=none, label=<<font color="black">Call[7709]</font>>]
    node7709_name -> node7709 [arrowhead=none, color="black", style=dashed]
    node7709 [shape=cds, label=<<font color="black">%8 = clo&lt;GetV&gt;(iterator, &quot;next&quot;)</font>> color="black" fillcolor="white", style=filled]
    node7709 -> node7710 [color="black"]
    node7710_name [shape=none, label=<<font color="black">Block[7710]</font>>]
    node7710_name -> node7710 [arrowhead=none, color="black", style=dashed]
    node7710 [shape=box, label=<<font color="black">[0] let nextMethod = [! %8]<BR ALIGN="LEFT"/>[1] return (new IteratorRecord(&quot;Iterator&quot; -&gt; iterator, &quot;NextMethod&quot; -&gt; nextMethod, &quot;Done&quot; -&gt; false))[#626]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7710 -> cluster1458_exit [color="black"]
  }
}