digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2496 {
    label = "def <BUILTIN>:INTRINSICS.DataView(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2496_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2496_entry_name -> cluster2496_entry [arrowhead=none, color="black", style=dashed]
    cluster2496_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2496_entry -> node17658 [color="black"]
    cluster2496_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2496_exit_name -> cluster2496_exit [arrowhead=none, color="black", style=dashed]
    cluster2496_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17658_name [shape=none, label=<<font color="black">Branch[17658]</font>>]
    node17658_name -> node17658 [arrowhead=none, color="black", style=dashed]
    node17658 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17658 -> node17659 [label=<<font color="black">true</font>> color="black"]
    node17658 -> node17660 [label=<<font color="black">false</font>> color="black"]
    node17659_name [shape=none, label=<<font color="black">Block[17659]</font>>]
    node17659_name -> node17659 [arrowhead=none, color="black", style=dashed]
    node17659 [shape=box, label=<<font color="black">[0] let buffer = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17659 -> node17661 [color="black"]
    node17660_name [shape=none, label=<<font color="black">Block[17660]</font>>]
    node17660_name -> node17660 [arrowhead=none, color="black", style=dashed]
    node17660 [shape=box, label=<<font color="black">[0] let buffer = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17660 -> node17661 [color="black"]
    node17661_name [shape=none, label=<<font color="black">Branch[17661]</font>>]
    node17661_name -> node17661 [arrowhead=none, color="black", style=dashed]
    node17661 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17661 -> node17662 [label=<<font color="black">true</font>> color="black"]
    node17661 -> node17663 [label=<<font color="black">false</font>> color="black"]
    node17662_name [shape=none, label=<<font color="black">Block[17662]</font>>]
    node17662_name -> node17662 [arrowhead=none, color="black", style=dashed]
    node17662 [shape=box, label=<<font color="black">[0] let byteOffset = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17662 -> node17664 [color="black"]
    node17663_name [shape=none, label=<<font color="black">Block[17663]</font>>]
    node17663_name -> node17663 [arrowhead=none, color="black", style=dashed]
    node17663 [shape=box, label=<<font color="black">[0] let byteOffset = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17663 -> node17664 [color="black"]
    node17664_name [shape=none, label=<<font color="black">Branch[17664]</font>>]
    node17664_name -> node17664 [arrowhead=none, color="black", style=dashed]
    node17664 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17664 -> node17665 [label=<<font color="black">true</font>> color="black"]
    node17664 -> node17666 [label=<<font color="black">false</font>> color="black"]
    node17665_name [shape=none, label=<<font color="black">Block[17665]</font>>]
    node17665_name -> node17665 [arrowhead=none, color="black", style=dashed]
    node17665 [shape=box, label=<<font color="black">[0] let byteLength = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17665 -> node17667 [color="black"]
    node17666_name [shape=none, label=<<font color="black">Block[17666]</font>>]
    node17666_name -> node17666 [arrowhead=none, color="black", style=dashed]
    node17666 [shape=box, label=<<font color="black">[0] let byteLength = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17666 -> node17667 [color="black"]
    node17667_name [shape=none, label=<<font color="black">Branch[17667]</font>>]
    node17667_name -> node17667 [arrowhead=none, color="black", style=dashed]
    node17667 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node17667 -> node17668 [label=<<font color="black">true</font>> color="black"]
    node17667 -> node17669 [label=<<font color="black">false</font>> color="black"]
    node17668_name [shape=none, label=<<font color="black">Block[17668]</font>>]
    node17668_name -> node17668 [arrowhead=none, color="black", style=dashed]
    node17668 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1171])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17668 -> cluster2496_exit [color="black"]
    node17669_name [shape=none, label=<<font color="black">Call[17669]</font>>]
    node17669_name -> node17669 [arrowhead=none, color="black", style=dashed]
    node17669 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(buffer, &quot;ArrayBufferData&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17669 -> node17670 [color="black"]
    node17670_name [shape=none, label=<<font color="black">Block[17670]</font>>]
    node17670_name -> node17670 [arrowhead=none, color="black", style=dashed]
    node17670 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17670 -> node17671 [color="black"]
    node17671_name [shape=none, label=<<font color="black">Call[17671]</font>>]
    node17671_name -> node17671 [arrowhead=none, color="black", style=dashed]
    node17671 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIndex&gt;(byteOffset)</font>> color="black" fillcolor="white", style=filled]
    node17671 -> node17672 [color="black"]
    node17672_name [shape=none, label=<<font color="black">Block[17672]</font>>]
    node17672_name -> node17672 [arrowhead=none, color="black", style=dashed]
    node17672 [shape=box, label=<<font color="black">[0] let offset = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17672 -> node17673 [color="black"]
    node17673_name [shape=none, label=<<font color="black">Call[17673]</font>>]
    node17673_name -> node17673 [arrowhead=none, color="black", style=dashed]
    node17673 [shape=cds, label=<<font color="black">%2 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node17673 -> node17674 [color="black"]
    node17674_name [shape=none, label=<<font color="black">Branch[17674]</font>>]
    node17674_name -> node17674 [arrowhead=none, color="black", style=dashed]
    node17674 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node17674 -> node17675 [label=<<font color="black">true</font>> color="black"]
    node17674 -> node17676 [label=<<font color="black">false</font>> color="black"]
    node17675_name [shape=none, label=<<font color="black">Block[17675]</font>>]
    node17675_name -> node17675 [arrowhead=none, color="black", style=dashed]
    node17675 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1172])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17675 -> cluster2496_exit [color="black"]
    node17676_name [shape=none, label=<<font color="black">Block[17676]</font>>]
    node17676_name -> node17676 [arrowhead=none, color="black", style=dashed]
    node17676 [shape=box, label=<<font color="black">[0] let bufferByteLength = buffer.ArrayBufferByteLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17676 -> node17677 [color="black"]
    node17677_name [shape=none, label=<<font color="black">Branch[17677]</font>>]
    node17677_name -> node17677 [arrowhead=none, color="black", style=dashed]
    node17677 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength offset)</font>> color="black" fillcolor="white", style=filled]
    node17677 -> node17678 [label=<<font color="black">true</font>> color="black"]
    node17677 -> node17679 [label=<<font color="black">false</font>> color="black"]
    node17678_name [shape=none, label=<<font color="black">Block[17678]</font>>]
    node17678_name -> node17678 [arrowhead=none, color="black", style=dashed]
    node17678 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1173])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17678 -> cluster2496_exit [color="black"]
    node17679_name [shape=none, label=<<font color="black">Branch[17679]</font>>]
    node17679_name -> node17679 [arrowhead=none, color="black", style=dashed]
    node17679 [shape=diamond, label=<<font color="black">(= byteLength undefined)</font>> color="black" fillcolor="white", style=filled]
    node17679 -> node17680 [label=<<font color="black">true</font>> color="black"]
    node17679 -> node17681 [label=<<font color="black">false</font>> color="black"]
    node17680_name [shape=none, label=<<font color="black">Block[17680]</font>>]
    node17680_name -> node17680 [arrowhead=none, color="black", style=dashed]
    node17680 [shape=box, label=<<font color="black">[0] let viewByteLength = (- bufferByteLength offset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17680 -> node17685 [color="black"]
    node17681_name [shape=none, label=<<font color="black">Call[17681]</font>>]
    node17681_name -> node17681 [arrowhead=none, color="black", style=dashed]
    node17681 [shape=cds, label=<<font color="black">%3 = clo&lt;ToIndex&gt;(byteLength)</font>> color="black" fillcolor="white", style=filled]
    node17681 -> node17682 [color="black"]
    node17685_name [shape=none, label=<<font color="black">Call[17685]</font>>]
    node17685_name -> node17685 [arrowhead=none, color="black", style=dashed]
    node17685 [shape=cds, label=<<font color="black">%4 = clo&lt;OrdinaryCreateFromConstructor&gt;(NewTarget, &quot;%DataView.prototype%&quot;, (new [&quot;DataView&quot;, &quot;ViewedArrayBuffer&quot;, &quot;ByteLength&quot;, &quot;ByteOffset&quot;])[#1175])</font>> color="black" fillcolor="white", style=filled]
    node17685 -> node17686 [color="black"]
    node17682_name [shape=none, label=<<font color="black">Block[17682]</font>>]
    node17682_name -> node17682 [arrowhead=none, color="black", style=dashed]
    node17682 [shape=box, label=<<font color="black">[0] let viewByteLength = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17682 -> node17683 [color="black"]
    node17686_name [shape=none, label=<<font color="black">Block[17686]</font>>]
    node17686_name -> node17686 [arrowhead=none, color="black", style=dashed]
    node17686 [shape=box, label=<<font color="black">[0] let O = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17686 -> node17687 [color="black"]
    node17683_name [shape=none, label=<<font color="black">Branch[17683]</font>>]
    node17683_name -> node17683 [arrowhead=none, color="black", style=dashed]
    node17683 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset viewByteLength))</font>> color="black" fillcolor="white", style=filled]
    node17683 -> node17684 [label=<<font color="black">true</font>> color="black"]
    node17683 -> node17685 [label=<<font color="black">false</font>> color="black"]
    node17687_name [shape=none, label=<<font color="black">Call[17687]</font>>]
    node17687_name -> node17687 [arrowhead=none, color="black", style=dashed]
    node17687 [shape=cds, label=<<font color="black">%5 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node17687 -> node17688 [color="black"]
    node17684_name [shape=none, label=<<font color="black">Block[17684]</font>>]
    node17684_name -> node17684 [arrowhead=none, color="black", style=dashed]
    node17684 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1174])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17684 -> cluster2496_exit [color="black"]
    node17688_name [shape=none, label=<<font color="black">Branch[17688]</font>>]
    node17688_name -> node17688 [arrowhead=none, color="black", style=dashed]
    node17688 [shape=diamond, label=<<font color="black">(= %5 true)</font>> color="black" fillcolor="white", style=filled]
    node17688 -> node17689 [label=<<font color="black">true</font>> color="black"]
    node17688 -> node17690 [label=<<font color="black">false</font>> color="black"]
    node17689_name [shape=none, label=<<font color="black">Block[17689]</font>>]
    node17689_name -> node17689 [arrowhead=none, color="black", style=dashed]
    node17689 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1176])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17689 -> cluster2496_exit [color="black"]
    node17690_name [shape=none, label=<<font color="black">Block[17690]</font>>]
    node17690_name -> node17690 [arrowhead=none, color="black", style=dashed]
    node17690 [shape=box, label=<<font color="black">[0] O.ViewedArrayBuffer = buffer<BR ALIGN="LEFT"/>[1] O.ByteLength = viewByteLength<BR ALIGN="LEFT"/>[2] O.ByteOffset = offset<BR ALIGN="LEFT"/>[3] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17690 -> cluster2496_exit [color="black"]
  }
}