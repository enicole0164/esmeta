digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2652 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.getPrototypeOf(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2652_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2652_entry_name -> cluster2652_entry [arrowhead=none, color="black", style=dashed]
    cluster2652_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2652_entry -> node19733 [color="black"]
    cluster2652_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2652_exit_name -> cluster2652_exit [arrowhead=none, color="black", style=dashed]
    cluster2652_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19733_name [shape=none, label=<<font color="black">Branch[19733]</font>>]
    node19733_name -> node19733 [arrowhead=none, color="black", style=dashed]
    node19733 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19733 -> node19734 [label=<<font color="black">true</font>> color="black"]
    node19733 -> node19735 [label=<<font color="black">false</font>> color="black"]
    node19734_name [shape=none, label=<<font color="black">Block[19734]</font>>]
    node19734_name -> node19734 [arrowhead=none, color="black", style=dashed]
    node19734 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19734 -> node19736 [color="black"]
    node19735_name [shape=none, label=<<font color="black">Block[19735]</font>>]
    node19735_name -> node19735 [arrowhead=none, color="black", style=dashed]
    node19735 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19735 -> node19736 [color="black"]
    node19736_name [shape=none, label=<<font color="black">Branch[19736]</font>>]
    node19736_name -> node19736 [arrowhead=none, color="black", style=dashed]
    node19736 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19736 -> node19737 [label=<<font color="black">true</font>> color="black"]
    node19736 -> node19738 [label=<<font color="black">false</font>> color="black"]
    node19737_name [shape=none, label=<<font color="black">Block[19737]</font>>]
    node19737_name -> node19737 [arrowhead=none, color="black", style=dashed]
    node19737 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1350])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19737 -> cluster2652_exit [color="black"]
    node19738_name [shape=none, label=<<font color="black">Call[19738]</font>>]
    node19738_name -> node19738 [arrowhead=none, color="black", style=dashed]
    node19738 [shape=cds, label=<<font color="black">%0 = target-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node19738 -> node19739 [color="black"]
    node19739_name [shape=none, label=<<font color="black">Block[19739]</font>>]
    node19739_name -> node19739 [arrowhead=none, color="black", style=dashed]
    node19739 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19739 -> cluster2652_exit [color="black"]
  }
}