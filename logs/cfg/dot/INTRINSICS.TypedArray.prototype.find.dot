digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2397 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.find(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2397_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2397_entry_name -> cluster2397_entry [arrowhead=none, color="black", style=dashed]
    cluster2397_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2397_entry -> node16131 [color="black"]
    cluster2397_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2397_exit_name -> cluster2397_exit [arrowhead=none, color="black", style=dashed]
    cluster2397_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16131_name [shape=none, label=<<font color="black">Branch[16131]</font>>]
    node16131_name -> node16131 [arrowhead=none, color="black", style=dashed]
    node16131 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16131 -> node16132 [label=<<font color="black">true</font>> color="black"]
    node16131 -> node16133 [label=<<font color="black">false</font>> color="black"]
    node16132_name [shape=none, label=<<font color="black">Block[16132]</font>>]
    node16132_name -> node16132 [arrowhead=none, color="black", style=dashed]
    node16132 [shape=box, label=<<font color="black">[0] let predicate = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16132 -> node16134 [color="black"]
    node16133_name [shape=none, label=<<font color="black">Block[16133]</font>>]
    node16133_name -> node16133 [arrowhead=none, color="black", style=dashed]
    node16133 [shape=box, label=<<font color="black">[0] let predicate = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16133 -> node16134 [color="black"]
    node16134_name [shape=none, label=<<font color="black">Branch[16134]</font>>]
    node16134_name -> node16134 [arrowhead=none, color="black", style=dashed]
    node16134 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16134 -> node16135 [label=<<font color="black">true</font>> color="black"]
    node16134 -> node16136 [label=<<font color="black">false</font>> color="black"]
    node16135_name [shape=none, label=<<font color="black">Block[16135]</font>>]
    node16135_name -> node16135 [arrowhead=none, color="black", style=dashed]
    node16135 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16135 -> node16137 [color="black"]
    node16136_name [shape=none, label=<<font color="black">Block[16136]</font>>]
    node16136_name -> node16136 [arrowhead=none, color="black", style=dashed]
    node16136 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16136 -> node16137 [color="black"]
    node16137_name [shape=none, label=<<font color="black">Block[16137]</font>>]
    node16137_name -> node16137 [arrowhead=none, color="black", style=dashed]
    node16137 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16137 -> node16138 [color="black"]
    node16138_name [shape=none, label=<<font color="black">Call[16138]</font>>]
    node16138_name -> node16138 [arrowhead=none, color="black", style=dashed]
    node16138 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateTypedArray&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16138 -> node16139 [color="black"]
    node16139_name [shape=none, label=<<font color="black">Block[16139]</font>>]
    node16139_name -> node16139 [arrowhead=none, color="black", style=dashed]
    node16139 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let len = O.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16139 -> node16140 [color="black"]
    node16140_name [shape=none, label=<<font color="black">Call[16140]</font>>]
    node16140_name -> node16140 [arrowhead=none, color="black", style=dashed]
    node16140 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(predicate)</font>> color="black" fillcolor="white", style=filled]
    node16140 -> node16141 [color="black"]
    node16141_name [shape=none, label=<<font color="black">Branch[16141]</font>>]
    node16141_name -> node16141 [arrowhead=none, color="black", style=dashed]
    node16141 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node16141 -> node16142 [label=<<font color="black">true</font>> color="black"]
    node16141 -> node16143 [label=<<font color="black">false</font>> color="black"]
    node16142_name [shape=none, label=<<font color="black">Block[16142]</font>>]
    node16142_name -> node16142 [arrowhead=none, color="black", style=dashed]
    node16142 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1069])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16142 -> cluster2397_exit [color="black"]
    node16143_name [shape=none, label=<<font color="black">Block[16143]</font>>]
    node16143_name -> node16143 [arrowhead=none, color="black", style=dashed]
    node16143 [shape=box, label=<<font color="black">[0] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16143 -> node16144 [color="black"]
    node16144_name [shape=none, label=<<font color="black">Branch[16144]</font>>]
    node16144_name -> node16144 [arrowhead=none, color="black", style=dashed]
    node16144 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node16144 -> node16145 [label=<<font color="black">true</font>> color="black"]
    node16144 -> node16155 [label=<<font color="black">false</font>> color="black"]
    node16145_name [shape=none, label=<<font color="black">Call[16145]</font>>]
    node16145_name -> node16145 [arrowhead=none, color="black", style=dashed]
    node16145 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16145 -> node16146 [color="black"]
    node16155_name [shape=none, label=<<font color="black">Block[16155]</font>>]
    node16155_name -> node16155 [arrowhead=none, color="black", style=dashed]
    node16155 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16155 -> cluster2397_exit [color="black"]
    node16146_name [shape=none, label=<<font color="black">Block[16146]</font>>]
    node16146_name -> node16146 [arrowhead=none, color="black", style=dashed]
    node16146 [shape=box, label=<<font color="black">[0] let Pk = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16146 -> node16147 [color="black"]
    node16147_name [shape=none, label=<<font color="black">Call[16147]</font>>]
    node16147_name -> node16147 [arrowhead=none, color="black", style=dashed]
    node16147 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16147 -> node16148 [color="black"]
    node16148_name [shape=none, label=<<font color="black">Block[16148]</font>>]
    node16148_name -> node16148 [arrowhead=none, color="black", style=dashed]
    node16148 [shape=box, label=<<font color="black">[0] let kValue = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16148 -> node16149 [color="black"]
    node16149_name [shape=none, label=<<font color="black">Call[16149]</font>>]
    node16149_name -> node16149 [arrowhead=none, color="black", style=dashed]
    node16149 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(predicate, thisArg, (new [kValue, ([number] k), O])[#1070])</font>> color="black" fillcolor="white", style=filled]
    node16149 -> node16150 [color="black"]
    node16150_name [shape=none, label=<<font color="black">Call[16150]</font>>]
    node16150_name -> node16150 [arrowhead=none, color="black", style=dashed]
    node16150 [shape=cds, label=<<font color="black">%5 = clo&lt;ToBoolean&gt;([? %4])</font>> color="black" fillcolor="white", style=filled]
    node16150 -> node16151 [color="black"]
    node16151_name [shape=none, label=<<font color="black">Block[16151]</font>>]
    node16151_name -> node16151 [arrowhead=none, color="black", style=dashed]
    node16151 [shape=box, label=<<font color="black">[0] let testResult = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16151 -> node16152 [color="black"]
    node16152_name [shape=none, label=<<font color="black">Branch[16152]</font>>]
    node16152_name -> node16152 [arrowhead=none, color="black", style=dashed]
    node16152 [shape=diamond, label=<<font color="black">(= testResult true)</font>> color="black" fillcolor="white", style=filled]
    node16152 -> node16153 [label=<<font color="black">true</font>> color="black"]
    node16152 -> node16154 [label=<<font color="black">false</font>> color="black"]
    node16153_name [shape=none, label=<<font color="black">Block[16153]</font>>]
    node16153_name -> node16153 [arrowhead=none, color="black", style=dashed]
    node16153 [shape=box, label=<<font color="black">[0] return kValue<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16153 -> cluster2397_exit [color="black"]
    node16154_name [shape=none, label=<<font color="black">Block[16154]</font>>]
    node16154_name -> node16154 [arrowhead=none, color="black", style=dashed]
    node16154 [shape=box, label=<<font color="black">[0] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16154 -> node16144 [color="black"]
  }
}