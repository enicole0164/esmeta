digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2643 {
    label = "def <CONT>:AsyncBlockStart:cont0(): Const[~unused~]"
    style = rounded
    cluster2643_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2643_entry_name -> cluster2643_entry [arrowhead=none, color="black", style=dashed]
    cluster2643_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2643_entry -> node19616 [color="black"]
    cluster2643_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2643_exit_name -> cluster2643_exit [arrowhead=none, color="black", style=dashed]
    cluster2643_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19616_name [shape=none, label=<<font color="black">Call[19616]</font>>]
    node19616_name -> node19616 [arrowhead=none, color="black", style=dashed]
    node19616 [shape=cds, label=<<font color="black">%0 = asyncBody-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node19616 -> node19617 [color="black"]
    node19617_name [shape=none, label=<<font color="black">Block[19617]</font>>]
    node19617_name -> node19617 [arrowhead=none, color="black", style=dashed]
    node19617 [shape=box, label=<<font color="black">[0] let result = %0<BR ALIGN="LEFT"/>[1] assert (yet &quot;If we return here, the async function either threw an exception or performed an implicit or explicit return; all awaiting is done.&quot;)<BR ALIGN="LEFT"/>[2] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19617 -> node19618 [color="black"]
    node19618_name [shape=none, label=<<font color="black">Branch[19618]</font>>]
    node19618_name -> node19618 [arrowhead=none, color="black", style=dashed]
    node19618 [shape=diamond, label=<<font color="black">(= result.Type ~normal~)</font>> color="black" fillcolor="white", style=filled]
    node19618 -> node19619 [label=<<font color="black">true</font>> color="black"]
    node19618 -> node19621 [label=<<font color="black">false</font>> color="black"]
    node19619_name [shape=none, label=<<font color="black">Call[19619]</font>>]
    node19619_name -> node19619 [arrowhead=none, color="black", style=dashed]
    node19619 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(promiseCapability.Resolve, undefined, (new [undefined])[#1339])</font>> color="black" fillcolor="white", style=filled]
    node19619 -> node19620 [color="black"]
    node19621_name [shape=none, label=<<font color="black">Branch[19621]</font>>]
    node19621_name -> node19621 [arrowhead=none, color="black", style=dashed]
    node19621 [shape=diamond, label=<<font color="black">(= result.Type ~return~)</font>> color="black" fillcolor="white", style=filled]
    node19621 -> node19622 [label=<<font color="black">true</font>> color="black"]
    node19621 -> node19624 [label=<<font color="black">false</font>> color="black"]
    node19620_name [shape=none, label=<<font color="black">Block[19620]</font>>]
    node19620_name -> node19620 [arrowhead=none, color="black", style=dashed]
    node19620 [shape=box, label=<<font color="black">[0] [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19620 -> node19627 [color="black"]
    node19622_name [shape=none, label=<<font color="black">Call[19622]</font>>]
    node19622_name -> node19622 [arrowhead=none, color="black", style=dashed]
    node19622 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(promiseCapability.Resolve, undefined, (new [result.Value])[#1340])</font>> color="black" fillcolor="white", style=filled]
    node19622 -> node19623 [color="black"]
    node19624_name [shape=none, label=<<font color="black">Block[19624]</font>>]
    node19624_name -> node19624 [arrowhead=none, color="black", style=dashed]
    node19624 [shape=box, label=<<font color="black">[0] assert (= result.Type ~throw~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19624 -> node19625 [color="black"]
    node19627_name [shape=none, label=<<font color="black">Call[19627]</font>>]
    node19627_name -> node19627 [arrowhead=none, color="black", style=dashed]
    node19627 [shape=cds, label=<<font color="black">%4 = clo&lt;NormalCompletion&gt;(~unused~)</font>> color="black" fillcolor="white", style=filled]
    node19627 -> node19628 [color="black"]
    node19623_name [shape=none, label=<<font color="black">Block[19623]</font>>]
    node19623_name -> node19623 [arrowhead=none, color="black", style=dashed]
    node19623 [shape=box, label=<<font color="black">[0] [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19623 -> node19627 [color="black"]
    node19625_name [shape=none, label=<<font color="black">Call[19625]</font>>]
    node19625_name -> node19625 [arrowhead=none, color="black", style=dashed]
    node19625 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [result.Value])[#1341])</font>> color="black" fillcolor="white", style=filled]
    node19625 -> node19626 [color="black"]
    node19628_name [shape=none, label=<<font color="black">Call[19628]</font>>]
    node19628_name -> node19628 [arrowhead=none, color="black", style=dashed]
    node19628 [shape=cds, label=<<font color="black">%5 = (pop &lt; asyncContext.ReturnCont)(%4)</font>> color="black" fillcolor="white", style=filled]
    node19628 -> cluster2643_exit [color="black"]
    node19626_name [shape=none, label=<<font color="black">Block[19626]</font>>]
    node19626_name -> node19626 [arrowhead=none, color="black", style=dashed]
    node19626 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19626 -> node19627 [color="black"]
  }
}