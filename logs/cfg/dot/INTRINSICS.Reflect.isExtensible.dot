digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2654 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.isExtensible(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2654_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2654_entry_name -> cluster2654_entry [arrowhead=none, color="black", style=dashed]
    cluster2654_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2654_entry -> node19752 [color="black"]
    cluster2654_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2654_exit_name -> cluster2654_exit [arrowhead=none, color="black", style=dashed]
    cluster2654_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19752_name [shape=none, label=<<font color="black">Branch[19752]</font>>]
    node19752_name -> node19752 [arrowhead=none, color="black", style=dashed]
    node19752 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19752 -> node19753 [label=<<font color="black">true</font>> color="black"]
    node19752 -> node19754 [label=<<font color="black">false</font>> color="black"]
    node19753_name [shape=none, label=<<font color="black">Block[19753]</font>>]
    node19753_name -> node19753 [arrowhead=none, color="black", style=dashed]
    node19753 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19753 -> node19755 [color="black"]
    node19754_name [shape=none, label=<<font color="black">Block[19754]</font>>]
    node19754_name -> node19754 [arrowhead=none, color="black", style=dashed]
    node19754 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19754 -> node19755 [color="black"]
    node19755_name [shape=none, label=<<font color="black">Branch[19755]</font>>]
    node19755_name -> node19755 [arrowhead=none, color="black", style=dashed]
    node19755 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19755 -> node19756 [label=<<font color="black">true</font>> color="black"]
    node19755 -> node19757 [label=<<font color="black">false</font>> color="black"]
    node19756_name [shape=none, label=<<font color="black">Block[19756]</font>>]
    node19756_name -> node19756 [arrowhead=none, color="black", style=dashed]
    node19756 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1352])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19756 -> cluster2654_exit [color="black"]
    node19757_name [shape=none, label=<<font color="black">Call[19757]</font>>]
    node19757_name -> node19757 [arrowhead=none, color="black", style=dashed]
    node19757 [shape=cds, label=<<font color="black">%0 = target-&gt;IsExtensible()</font>> color="black" fillcolor="white", style=filled]
    node19757 -> node19758 [color="black"]
    node19758_name [shape=none, label=<<font color="black">Block[19758]</font>>]
    node19758_name -> node19758 [arrowhead=none, color="black", style=dashed]
    node19758 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19758 -> cluster2654_exit [color="black"]
  }
}