digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2481 {
    label = "def SetValueInBuffer(arrayBuffer: Unknown["ArrayBufferOrSharedArrayBuffer"], byteIndex: Unknown["NonnegativeInteger"], type: Unknown["TypedArrayElementType"], value: Number | BigInt, isTypedArray: Boolean, order: Const[~Init~, ~SeqCst~, ~Unordered~], isLittleEndian?: Boolean): Const[~unused~]"
    style = rounded
    cluster2481_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2481_entry_name -> cluster2481_entry [arrowhead=none, color="black", style=dashed]
    cluster2481_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2481_entry -> node17433 [color="black"]
    cluster2481_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2481_exit_name -> cluster2481_exit [arrowhead=none, color="black", style=dashed]
    cluster2481_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17433_name [shape=none, label=<<font color="black">Call[17433]</font>>]
    node17433_name -> node17433 [arrowhead=none, color="black", style=dashed]
    node17433 [shape=cds, label=<<font color="black">%0 = clo&lt;IsDetachedBuffer&gt;(arrayBuffer)</font>> color="black" fillcolor="white", style=filled]
    node17433 -> node17434 [color="black"]
    node17434_name [shape=none, label=<<font color="black">Block[17434]</font>>]
    node17434_name -> node17434 [arrowhead=none, color="black", style=dashed]
    node17434 [shape=box, label=<<font color="black">[0] assert (= %0 false)<BR ALIGN="LEFT"/>[1] assert (yet &quot;There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.&quot;)<BR ALIGN="LEFT"/>[2] assert (yet &quot;Type(_value_) is BigInt if IsBigIntElementType(_type_) is *true*; otherwise, Type(_value_) is Number.&quot;)<BR ALIGN="LEFT"/>[3] let block = arrayBuffer.ArrayBufferData<BR ALIGN="LEFT"/>[4] (yet &quot;Let _elementSize_ be the Element Size value specified in &lt;emu-xref href=\&quot;#table-the-typedarray-constructors\&quot;&gt;&lt;/emu-xref&gt; for Element Type _type_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17434 -> node17435 [color="black"]
    node17435_name [shape=none, label=<<font color="black">Branch[17435]</font>>]
    node17435_name -> node17435 [arrowhead=none, color="black", style=dashed]
    node17435 [shape=diamond, label=<<font color="black">(= isLittleEndian absent)</font>> color="black" fillcolor="white", style=filled]
    node17435 -> node17436 [label=<<font color="black">true</font>> color="black"]
    node17435 -> node17437 [label=<<font color="black">false</font>> color="black"]
    node17436_name [shape=none, label=<<font color="black">Block[17436]</font>>]
    node17436_name -> node17436 [arrowhead=none, color="black", style=dashed]
    node17436 [shape=box, label=<<font color="black">[0] (yet &quot;set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17436 -> node17437 [color="black"]
    node17437_name [shape=none, label=<<font color="black">Call[17437]</font>>]
    node17437_name -> node17437 [arrowhead=none, color="black", style=dashed]
    node17437 [shape=cds, label=<<font color="black">%1 = clo&lt;NumericToRawBytes&gt;(type, value, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17437 -> node17438 [color="black"]
    node17438_name [shape=none, label=<<font color="black">Block[17438]</font>>]
    node17438_name -> node17438 [arrowhead=none, color="black", style=dashed]
    node17438 [shape=box, label=<<font color="black">[0] let rawBytes = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17438 -> node17439 [color="black"]
    node17439_name [shape=none, label=<<font color="black">Call[17439]</font>>]
    node17439_name -> node17439 [arrowhead=none, color="black", style=dashed]
    node17439 [shape=cds, label=<<font color="black">%2 = clo&lt;IsSharedArrayBuffer&gt;(arrayBuffer)</font>> color="black" fillcolor="white", style=filled]
    node17439 -> node17440 [color="black"]
    node17440_name [shape=none, label=<<font color="black">Branch[17440]</font>>]
    node17440_name -> node17440 [arrowhead=none, color="black", style=dashed]
    node17440 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node17440 -> node17441 [label=<<font color="black">true</font>> color="black"]
    node17440 -> node17449 [label=<<font color="black">false</font>> color="black"]
    node17441_name [shape=none, label=<<font color="black">Block[17441]</font>>]
    node17441_name -> node17441 [arrowhead=none, color="black", style=dashed]
    node17441 [shape=box, label=<<font color="black">[0] (yet &quot;Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().&quot;)<BR ALIGN="LEFT"/>[2] %3 = (= isTypedArray true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17441 -> node17442 [color="black"]
    node17449_name [shape=none, label=<<font color="black">Block[17449]</font>>]
    node17449_name -> node17449 [arrowhead=none, color="black", style=dashed]
    node17449 [shape=box, label=<<font color="black">[0] (yet &quot;store the individual bytes of _rawBytes_ into _block_, starting at _block_[_byteIndex_].&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17449 -> node17450 [color="black"]
    node17442_name [shape=none, label=<<font color="black">Branch[17442]</font>>]
    node17442_name -> node17442 [arrowhead=none, color="black", style=dashed]
    node17442 [shape=diamond, label=<<font color="black">%3</font>> color="black" fillcolor="white", style=filled]
    node17442 -> node17443 [label=<<font color="black">true</font>> color="black"]
    node17442 -> node17445 [label=<<font color="black">false</font>> color="black"]
    node17450_name [shape=none, label=<<font color="black">Block[17450]</font>>]
    node17450_name -> node17450 [arrowhead=none, color="black", style=dashed]
    node17450 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17450 -> cluster2481_exit [color="black"]
    node17443_name [shape=none, label=<<font color="black">Call[17443]</font>>]
    node17443_name -> node17443 [arrowhead=none, color="black", style=dashed]
    node17443 [shape=cds, label=<<font color="black">%4 = clo&lt;IsNoTearConfiguration&gt;(type, order)</font>> color="black" fillcolor="white", style=filled]
    node17443 -> node17444 [color="black"]
    node17445_name [shape=none, label=<<font color="black">Branch[17445]</font>>]
    node17445_name -> node17445 [arrowhead=none, color="black", style=dashed]
    node17445 [shape=diamond, label=<<font color="black">%3</font>> color="black" fillcolor="white", style=filled]
    node17445 -> node17446 [label=<<font color="black">true</font>> color="black"]
    node17445 -> node17447 [label=<<font color="black">false</font>> color="black"]
    node17444_name [shape=none, label=<<font color="black">Block[17444]</font>>]
    node17444_name -> node17444 [arrowhead=none, color="black", style=dashed]
    node17444 [shape=box, label=<<font color="black">[0] %3 = (= %4 true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17444 -> node17445 [color="black"]
    node17446_name [shape=none, label=<<font color="black">Block[17446]</font>>]
    node17446_name -> node17446 [arrowhead=none, color="black", style=dashed]
    node17446 [shape=box, label=<<font color="black">[0] let noTear = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17446 -> node17448 [color="black"]
    node17447_name [shape=none, label=<<font color="black">Block[17447]</font>>]
    node17447_name -> node17447 [arrowhead=none, color="black", style=dashed]
    node17447 [shape=box, label=<<font color="black">[0] let noTear = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17447 -> node17448 [color="black"]
    node17448_name [shape=none, label=<<font color="black">Block[17448]</font>>]
    node17448_name -> node17448 [arrowhead=none, color="black", style=dashed]
    node17448 [shape=box, label=<<font color="black">[0] push eventList &lt; (new WriteSharedMemory(&quot;Order&quot; -&gt; order, &quot;NoTear&quot; -&gt; noTear, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; byteIndex, &quot;ElementSize&quot; -&gt; elementSize, &quot;Payload&quot; -&gt; rawBytes))[#1147]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17448 -> node17450 [color="black"]
  }
}