digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2553 {
    label = "def <BUILTIN>:INTRINSICS.WeakRef(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2553_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2553_entry_name -> cluster2553_entry [arrowhead=none, color="black", style=dashed]
    cluster2553_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2553_entry -> node18486 [color="black"]
    cluster2553_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2553_exit_name -> cluster2553_exit [arrowhead=none, color="black", style=dashed]
    cluster2553_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18486_name [shape=none, label=<<font color="black">Branch[18486]</font>>]
    node18486_name -> node18486 [arrowhead=none, color="black", style=dashed]
    node18486 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18486 -> node18487 [label=<<font color="black">true</font>> color="black"]
    node18486 -> node18488 [label=<<font color="black">false</font>> color="black"]
    node18487_name [shape=none, label=<<font color="black">Block[18487]</font>>]
    node18487_name -> node18487 [arrowhead=none, color="black", style=dashed]
    node18487 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18487 -> node18489 [color="black"]
    node18488_name [shape=none, label=<<font color="black">Block[18488]</font>>]
    node18488_name -> node18488 [arrowhead=none, color="black", style=dashed]
    node18488 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18488 -> node18489 [color="black"]
    node18489_name [shape=none, label=<<font color="black">Branch[18489]</font>>]
    node18489_name -> node18489 [arrowhead=none, color="black", style=dashed]
    node18489 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node18489 -> node18490 [label=<<font color="black">true</font>> color="black"]
    node18489 -> node18491 [label=<<font color="black">false</font>> color="black"]
    node18490_name [shape=none, label=<<font color="black">Block[18490]</font>>]
    node18490_name -> node18490 [arrowhead=none, color="black", style=dashed]
    node18490 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1202])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18490 -> cluster2553_exit [color="black"]
    node18491_name [shape=none, label=<<font color="black">Branch[18491]</font>>]
    node18491_name -> node18491 [arrowhead=none, color="black", style=dashed]
    node18491 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node18491 -> node18492 [label=<<font color="black">true</font>> color="black"]
    node18491 -> node18493 [label=<<font color="black">false</font>> color="black"]
    node18492_name [shape=none, label=<<font color="black">Block[18492]</font>>]
    node18492_name -> node18492 [arrowhead=none, color="black", style=dashed]
    node18492 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1203])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18492 -> cluster2553_exit [color="black"]
    node18493_name [shape=none, label=<<font color="black">Call[18493]</font>>]
    node18493_name -> node18493 [arrowhead=none, color="black", style=dashed]
    node18493 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryCreateFromConstructor&gt;(NewTarget, &quot;%WeakRef.prototype%&quot;, (new [&quot;WeakRefTarget&quot;])[#1204])</font>> color="black" fillcolor="white", style=filled]
    node18493 -> node18494 [color="black"]
    node18494_name [shape=none, label=<<font color="black">Block[18494]</font>>]
    node18494_name -> node18494 [arrowhead=none, color="black", style=dashed]
    node18494 [shape=box, label=<<font color="black">[0] let weakRef = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18494 -> node18495 [color="black"]
    node18495_name [shape=none, label=<<font color="black">Call[18495]</font>>]
    node18495_name -> node18495 [arrowhead=none, color="black", style=dashed]
    node18495 [shape=cds, label=<<font color="black">%1 = clo&lt;AddToKeptObjects&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node18495 -> node18496 [color="black"]
    node18496_name [shape=none, label=<<font color="black">Block[18496]</font>>]
    node18496_name -> node18496 [arrowhead=none, color="black", style=dashed]
    node18496 [shape=box, label=<<font color="black">[0] weakRef.WeakRefTarget = target<BR ALIGN="LEFT"/>[1] return weakRef<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18496 -> cluster2553_exit [color="black"]
  }
}