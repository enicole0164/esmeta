digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2014 {
    label = "def <BUILTIN>:INTRINSICS.Object.isFrozen(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2014_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2014_entry_name -> cluster2014_entry [arrowhead=none, color="black", style=dashed]
    cluster2014_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2014_entry -> node11257 [color="black"]
    cluster2014_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2014_exit_name -> cluster2014_exit [arrowhead=none, color="black", style=dashed]
    cluster2014_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11257_name [shape=none, label=<<font color="black">Branch[11257]</font>>]
    node11257_name -> node11257 [arrowhead=none, color="black", style=dashed]
    node11257 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11257 -> node11258 [label=<<font color="black">true</font>> color="black"]
    node11257 -> node11259 [label=<<font color="black">false</font>> color="black"]
    node11258_name [shape=none, label=<<font color="black">Block[11258]</font>>]
    node11258_name -> node11258 [arrowhead=none, color="black", style=dashed]
    node11258 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11258 -> node11260 [color="black"]
    node11259_name [shape=none, label=<<font color="black">Block[11259]</font>>]
    node11259_name -> node11259 [arrowhead=none, color="black", style=dashed]
    node11259 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11259 -> node11260 [color="black"]
    node11260_name [shape=none, label=<<font color="black">Branch[11260]</font>>]
    node11260_name -> node11260 [arrowhead=none, color="black", style=dashed]
    node11260 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node11260 -> node11261 [label=<<font color="black">true</font>> color="black"]
    node11260 -> node11262 [label=<<font color="black">false</font>> color="black"]
    node11261_name [shape=none, label=<<font color="black">Block[11261]</font>>]
    node11261_name -> node11261 [arrowhead=none, color="black", style=dashed]
    node11261 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11261 -> cluster2014_exit [color="black"]
    node11262_name [shape=none, label=<<font color="black">Call[11262]</font>>]
    node11262_name -> node11262 [arrowhead=none, color="black", style=dashed]
    node11262 [shape=cds, label=<<font color="black">%0 = clo&lt;TestIntegrityLevel&gt;(O, ~frozen~)</font>> color="black" fillcolor="white", style=filled]
    node11262 -> node11263 [color="black"]
    node11263_name [shape=none, label=<<font color="black">Block[11263]</font>>]
    node11263_name -> node11263 [arrowhead=none, color="black", style=dashed]
    node11263 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11263 -> cluster2014_exit [color="black"]
  }
}