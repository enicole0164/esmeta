digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1983 {
    label = "def PerformEval(x: Unknown, callerRealm: Unknown, strictCaller: Unknown, direct: Unknown): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1983_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1983_entry_name -> cluster1983_entry [arrowhead=none, color="black", style=dashed]
    cluster1983_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1983_entry -> node10717 [color="black"]
    cluster1983_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1983_exit_name -> cluster1983_exit [arrowhead=none, color="black", style=dashed]
    cluster1983_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10717_name [shape=none, label=<<font color="black">Block[10717]</font>>]
    node10717_name -> node10717 [arrowhead=none, color="black", style=dashed]
    node10717 [shape=box, label=<<font color="black">[0] assert (yet &quot;If _direct_ is *false*, then _strictCaller_ is also *false*.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10717 -> node10718 [color="black"]
    node10718_name [shape=none, label=<<font color="black">Branch[10718]</font>>]
    node10718_name -> node10718 [arrowhead=none, color="black", style=dashed]
    node10718 [shape=diamond, label=<<font color="black">(! (= (typeof x) @String))</font>> color="black" fillcolor="white", style=filled]
    node10718 -> node10719 [label=<<font color="black">true</font>> color="black"]
    node10718 -> node10720 [label=<<font color="black">false</font>> color="black"]
    node10719_name [shape=none, label=<<font color="black">Block[10719]</font>>]
    node10719_name -> node10719 [arrowhead=none, color="black", style=dashed]
    node10719 [shape=box, label=<<font color="black">[0] return x<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10719 -> cluster1983_exit [color="black"]
    node10720_name [shape=none, label=<<font color="black">Block[10720]</font>>]
    node10720_name -> node10720 [arrowhead=none, color="black", style=dashed]
    node10720 [shape=box, label=<<font color="black">[0] let evalRealm = @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10720 -> node10721 [color="black"]
    node10721_name [shape=none, label=<<font color="black">Call[10721]</font>>]
    node10721_name -> node10721 [arrowhead=none, color="black", style=dashed]
    node10721 [shape=cds, label=<<font color="black">%0 = clo&lt;HostEnsureCanCompileStrings&gt;(callerRealm, evalRealm)</font>> color="black" fillcolor="white", style=filled]
    node10721 -> node10722 [color="black"]
    node10722_name [shape=none, label=<<font color="black">Block[10722]</font>>]
    node10722_name -> node10722 [arrowhead=none, color="black", style=dashed]
    node10722 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let inFunction = false<BR ALIGN="LEFT"/>[2] let inMethod = false<BR ALIGN="LEFT"/>[3] let inDerivedConstructor = false<BR ALIGN="LEFT"/>[4] let inClassFieldInitializer = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10722 -> node10723 [color="black"]
    node10723_name [shape=none, label=<<font color="black">Branch[10723]</font>>]
    node10723_name -> node10723 [arrowhead=none, color="black", style=dashed]
    node10723 [shape=diamond, label=<<font color="black">(= direct true)</font>> color="black" fillcolor="white", style=filled]
    node10723 -> node10724 [label=<<font color="black">true</font>> color="black"]
    node10723 -> node10735 [label=<<font color="black">false</font>> color="black"]
    node10724_name [shape=none, label=<<font color="black">Call[10724]</font>>]
    node10724_name -> node10724 [arrowhead=none, color="black", style=dashed]
    node10724 [shape=cds, label=<<font color="black">%1 = clo&lt;GetThisEnvironment&gt;()</font>> color="black" fillcolor="white", style=filled]
    node10724 -> node10725 [color="black"]
    node10735_name [shape=none, label=<<font color="black">Call[10735]</font>>]
    node10735_name -> node10735 [arrowhead=none, color="black", style=dashed]
    node10735 [shape=cds, label=<<font color="black">%3 = clo&lt;StringToCodePoints&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node10735 -> node10736 [color="black"]
    node10725_name [shape=none, label=<<font color="black">Block[10725]</font>>]
    node10725_name -> node10725 [arrowhead=none, color="black", style=dashed]
    node10725 [shape=box, label=<<font color="black">[0] let thisEnvRec = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10725 -> node10726 [color="black"]
    node10736_name [shape=none, label=<<font color="black">Block[10736]</font>>]
    node10736_name -> node10736 [arrowhead=none, color="black", style=dashed]
    node10736 [shape=box, label=<<font color="black">[0] let script = (parse %3 (nt |Script|[]))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10736 -> node10737 [color="black"]
    node10726_name [shape=none, label=<<font color="black">Branch[10726]</font>>]
    node10726_name -> node10726 [arrowhead=none, color="black", style=dashed]
    node10726 [shape=diamond, label=<<font color="black">(? thisEnvRec: &quot;FunctionEnvironmentRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10726 -> node10727 [label=<<font color="black">true</font>> color="black"]
    node10726 -> node10735 [label=<<font color="black">false</font>> color="black"]
    node10737_name [shape=none, label=<<font color="black">Branch[10737]</font>>]
    node10737_name -> node10737 [arrowhead=none, color="black", style=dashed]
    node10737 [shape=diamond, label=<<font color="black">(? script: &quot;ListOfErrors&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10737 -> node10738 [label=<<font color="black">true</font>> color="black"]
    node10737 -> node10739 [label=<<font color="black">false</font>> color="black"]
    node10727_name [shape=none, label=<<font color="black">Block[10727]</font>>]
    node10727_name -> node10727 [arrowhead=none, color="black", style=dashed]
    node10727 [shape=box, label=<<font color="black">[0] let F = thisEnvRec.FunctionObject<BR ALIGN="LEFT"/>[1] inFunction = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10727 -> node10728 [color="black"]
    node10738_name [shape=none, label=<<font color="black">Block[10738]</font>>]
    node10738_name -> node10738 [arrowhead=none, color="black", style=dashed]
    node10738 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#868])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10738 -> cluster1983_exit [color="black"]
    node10739_name [shape=none, label=<<font color="black">Call[10739]</font>>]
    node10739_name -> node10739 [arrowhead=none, color="black", style=dashed]
    node10739 [shape=cds, label=<<font color="black">%4 = script-&gt;Contains((nt |ScriptBody|[]))</font>> color="black" fillcolor="white", style=filled]
    node10739 -> node10740 [color="black"]
    node10728_name [shape=none, label=<<font color="black">Call[10728]</font>>]
    node10728_name -> node10728 [arrowhead=none, color="black", style=dashed]
    node10728 [shape=cds, label=<<font color="black">%2 = thisEnvRec-&gt;HasSuperBinding()</font>> color="black" fillcolor="white", style=filled]
    node10728 -> node10729 [color="black"]
    node10740_name [shape=none, label=<<font color="black">Branch[10740]</font>>]
    node10740_name -> node10740 [arrowhead=none, color="black", style=dashed]
    node10740 [shape=diamond, label=<<font color="black">(= %4 false)</font>> color="black" fillcolor="white", style=filled]
    node10740 -> node10741 [label=<<font color="black">true</font>> color="black"]
    node10740 -> node10742 [label=<<font color="black">false</font>> color="black"]
    node10729_name [shape=none, label=<<font color="black">Block[10729]</font>>]
    node10729_name -> node10729 [arrowhead=none, color="black", style=dashed]
    node10729 [shape=box, label=<<font color="black">[0] inMethod = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10729 -> node10730 [color="black"]
    node10741_name [shape=none, label=<<font color="black">Block[10741]</font>>]
    node10741_name -> node10741 [arrowhead=none, color="black", style=dashed]
    node10741 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10741 -> cluster1983_exit [color="black"]
    node10742_name [shape=none, label=<<font color="black">Block[10742]</font>>]
    node10742_name -> node10742 [arrowhead=none, color="black", style=dashed]
    node10742 [shape=box, label=<<font color="black">[0] let body = script.ScriptBody<BR ALIGN="LEFT"/>[1] %5 = (= inFunction false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10742 -> node10743 [color="black"]
    node10730_name [shape=none, label=<<font color="black">Branch[10730]</font>>]
    node10730_name -> node10730 [arrowhead=none, color="black", style=dashed]
    node10730 [shape=diamond, label=<<font color="black">(= F.ConstructorKind ~derived~)</font>> color="black" fillcolor="white", style=filled]
    node10730 -> node10731 [label=<<font color="black">true</font>> color="black"]
    node10730 -> node10732 [label=<<font color="black">false</font>> color="black"]
    node10743_name [shape=none, label=<<font color="black">Branch[10743]</font>>]
    node10743_name -> node10743 [arrowhead=none, color="black", style=dashed]
    node10743 [shape=diamond, label=<<font color="black">%5</font>> color="black" fillcolor="white", style=filled]
    node10743 -> node10744 [label=<<font color="black">true</font>> color="black"]
    node10743 -> node10746 [label=<<font color="black">false</font>> color="black"]
    node10731_name [shape=none, label=<<font color="black">Block[10731]</font>>]
    node10731_name -> node10731 [arrowhead=none, color="black", style=dashed]
    node10731 [shape=box, label=<<font color="black">[0] inDerivedConstructor = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10731 -> node10732 [color="black"]
    node10732_name [shape=none, label=<<font color="black">Block[10732]</font>>]
    node10732_name -> node10732 [arrowhead=none, color="black", style=dashed]
    node10732 [shape=box, label=<<font color="black">[0] let classFieldIntializerName = F.ClassFieldInitializerName<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10732 -> node10733 [color="black"]
    node10744_name [shape=none, label=<<font color="black">Call[10744]</font>>]
    node10744_name -> node10744 [arrowhead=none, color="black", style=dashed]
    node10744 [shape=cds, label=<<font color="black">%6 = body-&gt;Contains((nt |NewTarget|[]))</font>> color="black" fillcolor="white", style=filled]
    node10744 -> node10745 [color="black"]
    node10746_name [shape=none, label=<<font color="black">Branch[10746]</font>>]
    node10746_name -> node10746 [arrowhead=none, color="black", style=dashed]
    node10746 [shape=diamond, label=<<font color="black">%5</font>> color="black" fillcolor="white", style=filled]
    node10746 -> node10747 [label=<<font color="black">true</font>> color="black"]
    node10746 -> node10748 [label=<<font color="black">false</font>> color="black"]
    node10733_name [shape=none, label=<<font color="black">Branch[10733]</font>>]
    node10733_name -> node10733 [arrowhead=none, color="black", style=dashed]
    node10733 [shape=diamond, label=<<font color="black">(! (= classFieldIntializerName ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10733 -> node10734 [label=<<font color="black">true</font>> color="black"]
    node10733 -> node10735 [label=<<font color="black">false</font>> color="black"]
    node10745_name [shape=none, label=<<font color="black">Block[10745]</font>>]
    node10745_name -> node10745 [arrowhead=none, color="black", style=dashed]
    node10745 [shape=box, label=<<font color="black">[0] %5 = %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10745 -> node10746 [color="black"]
    node10747_name [shape=none, label=<<font color="black">Block[10747]</font>>]
    node10747_name -> node10747 [arrowhead=none, color="black", style=dashed]
    node10747 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#869])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10747 -> cluster1983_exit [color="black"]
    node10748_name [shape=none, label=<<font color="black">Block[10748]</font>>]
    node10748_name -> node10748 [arrowhead=none, color="black", style=dashed]
    node10748 [shape=box, label=<<font color="black">[0] %7 = (= inMethod false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10748 -> node10749 [color="black"]
    node10734_name [shape=none, label=<<font color="black">Block[10734]</font>>]
    node10734_name -> node10734 [arrowhead=none, color="black", style=dashed]
    node10734 [shape=box, label=<<font color="black">[0] inClassFieldInitializer = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10734 -> node10735 [color="black"]
    node10749_name [shape=none, label=<<font color="black">Branch[10749]</font>>]
    node10749_name -> node10749 [arrowhead=none, color="black", style=dashed]
    node10749 [shape=diamond, label=<<font color="black">%7</font>> color="black" fillcolor="white", style=filled]
    node10749 -> node10750 [label=<<font color="black">true</font>> color="black"]
    node10749 -> node10752 [label=<<font color="black">false</font>> color="black"]
    node10750_name [shape=none, label=<<font color="black">Call[10750]</font>>]
    node10750_name -> node10750 [arrowhead=none, color="black", style=dashed]
    node10750 [shape=cds, label=<<font color="black">%8 = body-&gt;Contains((nt |SuperProperty|[]))</font>> color="black" fillcolor="white", style=filled]
    node10750 -> node10751 [color="black"]
    node10752_name [shape=none, label=<<font color="black">Branch[10752]</font>>]
    node10752_name -> node10752 [arrowhead=none, color="black", style=dashed]
    node10752 [shape=diamond, label=<<font color="black">%7</font>> color="black" fillcolor="white", style=filled]
    node10752 -> node10753 [label=<<font color="black">true</font>> color="black"]
    node10752 -> node10754 [label=<<font color="black">false</font>> color="black"]
    node10751_name [shape=none, label=<<font color="black">Block[10751]</font>>]
    node10751_name -> node10751 [arrowhead=none, color="black", style=dashed]
    node10751 [shape=box, label=<<font color="black">[0] %7 = %8<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10751 -> node10752 [color="black"]
    node10753_name [shape=none, label=<<font color="black">Block[10753]</font>>]
    node10753_name -> node10753 [arrowhead=none, color="black", style=dashed]
    node10753 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#870])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10753 -> cluster1983_exit [color="black"]
    node10754_name [shape=none, label=<<font color="black">Block[10754]</font>>]
    node10754_name -> node10754 [arrowhead=none, color="black", style=dashed]
    node10754 [shape=box, label=<<font color="black">[0] %9 = (= inDerivedConstructor false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10754 -> node10755 [color="black"]
    node10755_name [shape=none, label=<<font color="black">Branch[10755]</font>>]
    node10755_name -> node10755 [arrowhead=none, color="black", style=dashed]
    node10755 [shape=diamond, label=<<font color="black">%9</font>> color="black" fillcolor="white", style=filled]
    node10755 -> node10756 [label=<<font color="black">true</font>> color="black"]
    node10755 -> node10758 [label=<<font color="black">false</font>> color="black"]
    node10756_name [shape=none, label=<<font color="black">Call[10756]</font>>]
    node10756_name -> node10756 [arrowhead=none, color="black", style=dashed]
    node10756 [shape=cds, label=<<font color="black">%10 = body-&gt;Contains((nt |SuperCall|[]))</font>> color="black" fillcolor="white", style=filled]
    node10756 -> node10757 [color="black"]
    node10758_name [shape=none, label=<<font color="black">Branch[10758]</font>>]
    node10758_name -> node10758 [arrowhead=none, color="black", style=dashed]
    node10758 [shape=diamond, label=<<font color="black">%9</font>> color="black" fillcolor="white", style=filled]
    node10758 -> node10759 [label=<<font color="black">true</font>> color="black"]
    node10758 -> node10760 [label=<<font color="black">false</font>> color="black"]
    node10757_name [shape=none, label=<<font color="black">Block[10757]</font>>]
    node10757_name -> node10757 [arrowhead=none, color="black", style=dashed]
    node10757 [shape=box, label=<<font color="black">[0] %9 = %10<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10757 -> node10758 [color="black"]
    node10759_name [shape=none, label=<<font color="black">Block[10759]</font>>]
    node10759_name -> node10759 [arrowhead=none, color="black", style=dashed]
    node10759 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#871])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10759 -> cluster1983_exit [color="black"]
    node10760_name [shape=none, label=<<font color="black">Block[10760]</font>>]
    node10760_name -> node10760 [arrowhead=none, color="black", style=dashed]
    node10760 [shape=box, label=<<font color="black">[0] %11 = (= inClassFieldInitializer true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10760 -> node10761 [color="black"]
    node10761_name [shape=none, label=<<font color="black">Branch[10761]</font>>]
    node10761_name -> node10761 [arrowhead=none, color="black", style=dashed]
    node10761 [shape=diamond, label=<<font color="black">%11</font>> color="black" fillcolor="white", style=filled]
    node10761 -> node10762 [label=<<font color="black">true</font>> color="black"]
    node10761 -> node10764 [label=<<font color="black">false</font>> color="black"]
    node10762_name [shape=none, label=<<font color="black">Call[10762]</font>>]
    node10762_name -> node10762 [arrowhead=none, color="black", style=dashed]
    node10762 [shape=cds, label=<<font color="black">%12 = body-&gt;ContainsArguments()</font>> color="black" fillcolor="white", style=filled]
    node10762 -> node10763 [color="black"]
    node10764_name [shape=none, label=<<font color="black">Branch[10764]</font>>]
    node10764_name -> node10764 [arrowhead=none, color="black", style=dashed]
    node10764 [shape=diamond, label=<<font color="black">%11</font>> color="black" fillcolor="white", style=filled]
    node10764 -> node10765 [label=<<font color="black">true</font>> color="black"]
    node10764 -> node10766 [label=<<font color="black">false</font>> color="black"]
    node10763_name [shape=none, label=<<font color="black">Block[10763]</font>>]
    node10763_name -> node10763 [arrowhead=none, color="black", style=dashed]
    node10763 [shape=box, label=<<font color="black">[0] %11 = (= %12 true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10763 -> node10764 [color="black"]
    node10765_name [shape=none, label=<<font color="black">Block[10765]</font>>]
    node10765_name -> node10765 [arrowhead=none, color="black", style=dashed]
    node10765 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#872])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10765 -> cluster1983_exit [color="black"]
    node10766_name [shape=none, label=<<font color="black">Branch[10766]</font>>]
    node10766_name -> node10766 [arrowhead=none, color="black", style=dashed]
    node10766 [shape=diamond, label=<<font color="black">(= strictCaller true)</font>> color="black" fillcolor="white", style=filled]
    node10766 -> node10767 [label=<<font color="black">true</font>> color="black"]
    node10766 -> node10768 [label=<<font color="black">false</font>> color="black"]
    node10767_name [shape=none, label=<<font color="black">Block[10767]</font>>]
    node10767_name -> node10767 [arrowhead=none, color="black", style=dashed]
    node10767 [shape=box, label=<<font color="black">[0] let strictEval = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10767 -> node10770 [color="black"]
    node10768_name [shape=none, label=<<font color="black">Call[10768]</font>>]
    node10768_name -> node10768 [arrowhead=none, color="black", style=dashed]
    node10768 [shape=cds, label=<<font color="black">%13 = script-&gt;IsStrict()</font>> color="black" fillcolor="white", style=filled]
    node10768 -> node10769 [color="black"]
    node10770_name [shape=none, label=<<font color="black">Block[10770]</font>>]
    node10770_name -> node10770 [arrowhead=none, color="black", style=dashed]
    node10770 [shape=box, label=<<font color="black">[0] let runningContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10770 -> node10771 [color="black"]
    node10769_name [shape=none, label=<<font color="black">Block[10769]</font>>]
    node10769_name -> node10769 [arrowhead=none, color="black", style=dashed]
    node10769 [shape=box, label=<<font color="black">[0] let strictEval = %13<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10769 -> node10770 [color="black"]
    node10771_name [shape=none, label=<<font color="black">Branch[10771]</font>>]
    node10771_name -> node10771 [arrowhead=none, color="black", style=dashed]
    node10771 [shape=diamond, label=<<font color="black">(= direct true)</font>> color="black" fillcolor="white", style=filled]
    node10771 -> node10772 [label=<<font color="black">true</font>> color="black"]
    node10771 -> node10774 [label=<<font color="black">false</font>> color="black"]
    node10772_name [shape=none, label=<<font color="black">Call[10772]</font>>]
    node10772_name -> node10772 [arrowhead=none, color="black", style=dashed]
    node10772 [shape=cds, label=<<font color="black">%14 = clo&lt;NewDeclarativeEnvironment&gt;(runningContext.LexicalEnvironment)</font>> color="black" fillcolor="white", style=filled]
    node10772 -> node10773 [color="black"]
    node10774_name [shape=none, label=<<font color="black">Call[10774]</font>>]
    node10774_name -> node10774 [arrowhead=none, color="black", style=dashed]
    node10774 [shape=cds, label=<<font color="black">%15 = clo&lt;NewDeclarativeEnvironment&gt;(evalRealm.GlobalEnv)</font>> color="black" fillcolor="white", style=filled]
    node10774 -> node10775 [color="black"]
    node10773_name [shape=none, label=<<font color="black">Block[10773]</font>>]
    node10773_name -> node10773 [arrowhead=none, color="black", style=dashed]
    node10773 [shape=box, label=<<font color="black">[0] let lexEnv = %14<BR ALIGN="LEFT"/>[1] let varEnv = runningContext.VariableEnvironment<BR ALIGN="LEFT"/>[2] let privateEnv = runningContext.PrivateEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10773 -> node10776 [color="black"]
    node10775_name [shape=none, label=<<font color="black">Block[10775]</font>>]
    node10775_name -> node10775 [arrowhead=none, color="black", style=dashed]
    node10775 [shape=box, label=<<font color="black">[0] let lexEnv = %15<BR ALIGN="LEFT"/>[1] let varEnv = evalRealm.GlobalEnv<BR ALIGN="LEFT"/>[2] let privateEnv = null<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10775 -> node10776 [color="black"]
    node10776_name [shape=none, label=<<font color="black">Branch[10776]</font>>]
    node10776_name -> node10776 [arrowhead=none, color="black", style=dashed]
    node10776 [shape=diamond, label=<<font color="black">(= strictEval true)</font>> color="black" fillcolor="white", style=filled]
    node10776 -> node10777 [label=<<font color="black">true</font>> color="black"]
    node10776 -> node10778 [label=<<font color="black">false</font>> color="black"]
    node10777_name [shape=none, label=<<font color="black">Block[10777]</font>>]
    node10777_name -> node10777 [arrowhead=none, color="black", style=dashed]
    node10777 [shape=box, label=<<font color="black">[0] varEnv = lexEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10777 -> node10778 [color="black"]
    node10778_name [shape=none, label=<<font color="black">Block[10778]</font>>]
    node10778_name -> node10778 [arrowhead=none, color="black", style=dashed]
    node10778 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] let evalContext = (new ExecutionContext())[#873]<BR ALIGN="LEFT"/>[2] evalContext.Function = null<BR ALIGN="LEFT"/>[3] evalContext.Realm = evalRealm<BR ALIGN="LEFT"/>[4] evalContext.ScriptOrModule = runningContext.ScriptOrModule<BR ALIGN="LEFT"/>[5] evalContext.VariableEnvironment = varEnv<BR ALIGN="LEFT"/>[6] evalContext.LexicalEnvironment = lexEnv<BR ALIGN="LEFT"/>[7] evalContext.PrivateEnvironment = privateEnv<BR ALIGN="LEFT"/>[8] push evalContext &gt; @EXECUTION_STACK<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10778 -> node10779 [color="black"]
    node10779_name [shape=none, label=<<font color="black">Call[10779]</font>>]
    node10779_name -> node10779 [arrowhead=none, color="black", style=dashed]
    node10779 [shape=cds, label=<<font color="black">%16 = clo&lt;EvalDeclarationInstantiation&gt;(body, varEnv, lexEnv, privateEnv, strictEval)</font>> color="black" fillcolor="white", style=filled]
    node10779 -> node10780 [color="black"]
    node10780_name [shape=none, label=<<font color="black">Call[10780]</font>>]
    node10780_name -> node10780 [arrowhead=none, color="black", style=dashed]
    node10780 [shape=cds, label=<<font color="black">%17 = clo&lt;Completion&gt;(%16)</font>> color="black" fillcolor="white", style=filled]
    node10780 -> node10781 [color="black"]
    node10781_name [shape=none, label=<<font color="black">Block[10781]</font>>]
    node10781_name -> node10781 [arrowhead=none, color="black", style=dashed]
    node10781 [shape=box, label=<<font color="black">[0] let result = %17<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10781 -> node10782 [color="black"]
    node10782_name [shape=none, label=<<font color="black">Branch[10782]</font>>]
    node10782_name -> node10782 [arrowhead=none, color="black", style=dashed]
    node10782 [shape=diamond, label=<<font color="black">(= result.Type ~normal~)</font>> color="black" fillcolor="white", style=filled]
    node10782 -> node10783 [label=<<font color="black">true</font>> color="black"]
    node10782 -> node10785 [label=<<font color="black">false</font>> color="black"]
    node10783_name [shape=none, label=<<font color="black">Call[10783]</font>>]
    node10783_name -> node10783 [arrowhead=none, color="black", style=dashed]
    node10783 [shape=cds, label=<<font color="black">%18 = body-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node10783 -> node10784 [color="black"]
    node10785_name [shape=none, label=<<font color="black">Branch[10785]</font>>]
    node10785_name -> node10785 [arrowhead=none, color="black", style=dashed]
    node10785 [shape=diamond, label=<<font color="black">(&amp;&amp; (= result.Type ~normal~) (= result.Value ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10785 -> node10786 [label=<<font color="black">true</font>> color="black"]
    node10785 -> node10788 [label=<<font color="black">false</font>> color="black"]
    node10784_name [shape=none, label=<<font color="black">Block[10784]</font>>]
    node10784_name -> node10784 [arrowhead=none, color="black", style=dashed]
    node10784 [shape=box, label=<<font color="black">[0] result = %18<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10784 -> node10785 [color="black"]
    node10786_name [shape=none, label=<<font color="black">Call[10786]</font>>]
    node10786_name -> node10786 [arrowhead=none, color="black", style=dashed]
    node10786 [shape=cds, label=<<font color="black">%19 = clo&lt;NormalCompletion&gt;(undefined)</font>> color="black" fillcolor="white", style=filled]
    node10786 -> node10787 [color="black"]
    node10788_name [shape=none, label=<<font color="black">Block[10788]</font>>]
    node10788_name -> node10788 [arrowhead=none, color="black", style=dashed]
    node10788 [shape=box, label=<<font color="black">[0] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] return [? result]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10788 -> cluster1983_exit [color="black"]
    node10787_name [shape=none, label=<<font color="black">Block[10787]</font>>]
    node10787_name -> node10787 [arrowhead=none, color="black", style=dashed]
    node10787 [shape=box, label=<<font color="black">[0] result = %19<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10787 -> node10788 [color="black"]
  }
}