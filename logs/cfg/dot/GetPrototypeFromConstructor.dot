digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1074 {
    label = "def GetPrototypeFromConstructor(constructor: FunctionObject, intrinsicDefaultProto: String): Normal[Object] | Abrupt"
    style = rounded
    cluster1074_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1074_entry_name -> cluster1074_entry [arrowhead=none, color="black", style=dashed]
    cluster1074_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1074_entry -> node4215 [color="black"]
    cluster1074_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1074_exit_name -> cluster1074_exit [arrowhead=none, color="black", style=dashed]
    cluster1074_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4215_name [shape=none, label=<<font color="black">Block[4215]</font>>]
    node4215_name -> node4215 [arrowhead=none, color="black", style=dashed]
    node4215 [shape=box, label=<<font color="black">[0] assert (yet &quot;_intrinsicDefaultProto_ is this specification's name of an intrinsic object. The corresponding object must be an intrinsic that is intended to be used as the [[Prototype]] value of an object.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4215 -> node4216 [color="black"]
    node4216_name [shape=none, label=<<font color="black">Call[4216]</font>>]
    node4216_name -> node4216 [arrowhead=none, color="black", style=dashed]
    node4216 [shape=cds, label=<<font color="black">%0 = clo&lt;Get&gt;(constructor, &quot;prototype&quot;)</font>> color="black" fillcolor="white", style=filled]
    node4216 -> node4217 [color="black"]
    node4217_name [shape=none, label=<<font color="black">Block[4217]</font>>]
    node4217_name -> node4217 [arrowhead=none, color="black", style=dashed]
    node4217 [shape=box, label=<<font color="black">[0] let proto = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4217 -> node4218 [color="black"]
    node4218_name [shape=none, label=<<font color="black">Branch[4218]</font>>]
    node4218_name -> node4218 [arrowhead=none, color="black", style=dashed]
    node4218 [shape=diamond, label=<<font color="black">(! (= (typeof proto) @Object))</font>> color="black" fillcolor="white", style=filled]
    node4218 -> node4219 [label=<<font color="black">true</font>> color="black"]
    node4218 -> node4221 [label=<<font color="black">false</font>> color="black"]
    node4219_name [shape=none, label=<<font color="black">Call[4219]</font>>]
    node4219_name -> node4219 [arrowhead=none, color="black", style=dashed]
    node4219 [shape=cds, label=<<font color="black">%1 = clo&lt;GetFunctionRealm&gt;(constructor)</font>> color="black" fillcolor="white", style=filled]
    node4219 -> node4220 [color="black"]
    node4221_name [shape=none, label=<<font color="black">Block[4221]</font>>]
    node4221_name -> node4221 [arrowhead=none, color="black", style=dashed]
    node4221 [shape=box, label=<<font color="black">[0] return proto<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4221 -> cluster1074_exit [color="black"]
    node4220_name [shape=none, label=<<font color="black">Block[4220]</font>>]
    node4220_name -> node4220 [arrowhead=none, color="black", style=dashed]
    node4220 [shape=box, label=<<font color="black">[0] let realm = [? %1]<BR ALIGN="LEFT"/>[1] proto = realm.Intrinsics[intrinsicDefaultProto]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4220 -> node4221 [color="black"]
  }
}