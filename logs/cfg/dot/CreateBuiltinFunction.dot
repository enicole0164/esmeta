digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1101 {
    label = "def CreateBuiltinFunction(behaviour: Unknown["AbstractClosure,ASetOfAlgorithmSteps,OrSomeOtherDefinitionOfAFunction'sBehaviourProvidedInThisSpecification"], length: Unknown["NonnegativeIntegerOr+âˆž"], name: Symbol | String, additionalInternalSlotsList: Unknown["ListOfNamesOfInternalSlots"], realm?: RealmRecord, prototype?: Object | Null, prefix?: String): FunctionObject"
    style = rounded
    cluster1101_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1101_entry_name -> cluster1101_entry [arrowhead=none, color="black", style=dashed]
    cluster1101_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1101_entry -> node4514 [color="black"]
    cluster1101_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1101_exit_name -> cluster1101_exit [arrowhead=none, color="black", style=dashed]
    cluster1101_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4514_name [shape=none, label=<<font color="black">Branch[4514]</font>>]
    node4514_name -> node4514 [arrowhead=none, color="black", style=dashed]
    node4514 [shape=diamond, label=<<font color="black">(= realm absent)</font>> color="black" fillcolor="white", style=filled]
    node4514 -> node4515 [label=<<font color="black">true</font>> color="black"]
    node4514 -> node4516 [label=<<font color="black">false</font>> color="black"]
    node4515_name [shape=none, label=<<font color="black">Block[4515]</font>>]
    node4515_name -> node4515 [arrowhead=none, color="black", style=dashed]
    node4515 [shape=box, label=<<font color="black">[0] realm = @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4515 -> node4516 [color="black"]
    node4516_name [shape=none, label=<<font color="black">Branch[4516]</font>>]
    node4516_name -> node4516 [arrowhead=none, color="black", style=dashed]
    node4516 [shape=diamond, label=<<font color="black">(= prototype absent)</font>> color="black" fillcolor="white", style=filled]
    node4516 -> node4517 [label=<<font color="black">true</font>> color="black"]
    node4516 -> node4518 [label=<<font color="black">false</font>> color="black"]
    node4517_name [shape=none, label=<<font color="black">Block[4517]</font>>]
    node4517_name -> node4517 [arrowhead=none, color="black", style=dashed]
    node4517 [shape=box, label=<<font color="black">[0] prototype = realm.Intrinsics[&quot;%Function.prototype%&quot;]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4517 -> node4518 [color="black"]
    node4518_name [shape=none, label=<<font color="black">Block[4518]</font>>]
    node4518_name -> node4518 [arrowhead=none, color="black", style=dashed]
    node4518 [shape=box, label=<<font color="black">[0] let internalSlotsList = (new [&quot;Prototype&quot;, &quot;Extensible&quot;, &quot;Realm&quot;, &quot;InitialName&quot;])[#440]<BR ALIGN="LEFT"/>[1] internalSlotsList = (list-concat internalSlotsList additionalInternalSlotsList)[#441]<BR ALIGN="LEFT"/>[2] let func = (new BuiltinFunctionObject())[#442]<BR ALIGN="LEFT"/>[3] func.Code = behaviour<BR ALIGN="LEFT"/>[4] func.Prototype = prototype<BR ALIGN="LEFT"/>[5] func.Extensible = true<BR ALIGN="LEFT"/>[6] func.Realm = realm<BR ALIGN="LEFT"/>[7] func.InitialName = null<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4518 -> node4519 [color="black"]
    node4519_name [shape=none, label=<<font color="black">Call[4519]</font>>]
    node4519_name -> node4519 [arrowhead=none, color="black", style=dashed]
    node4519 [shape=cds, label=<<font color="black">%0 = clo&lt;SetFunctionLength&gt;(func, length)</font>> color="black" fillcolor="white", style=filled]
    node4519 -> node4520 [color="black"]
    node4520_name [shape=none, label=<<font color="black">Branch[4520]</font>>]
    node4520_name -> node4520 [arrowhead=none, color="black", style=dashed]
    node4520 [shape=diamond, label=<<font color="black">(= prefix absent)</font>> color="black" fillcolor="white", style=filled]
    node4520 -> node4521 [label=<<font color="black">true</font>> color="black"]
    node4520 -> node4522 [label=<<font color="black">false</font>> color="black"]
    node4521_name [shape=none, label=<<font color="black">Call[4521]</font>>]
    node4521_name -> node4521 [arrowhead=none, color="black", style=dashed]
    node4521 [shape=cds, label=<<font color="black">%1 = clo&lt;SetFunctionName&gt;(func, name)</font>> color="black" fillcolor="white", style=filled]
    node4521 -> node4523 [color="black"]
    node4522_name [shape=none, label=<<font color="black">Call[4522]</font>>]
    node4522_name -> node4522 [arrowhead=none, color="black", style=dashed]
    node4522 [shape=cds, label=<<font color="black">%2 = clo&lt;SetFunctionName&gt;(func, name, prefix)</font>> color="black" fillcolor="white", style=filled]
    node4522 -> node4523 [color="black"]
    node4523_name [shape=none, label=<<font color="black">Block[4523]</font>>]
    node4523_name -> node4523 [arrowhead=none, color="black", style=dashed]
    node4523 [shape=box, label=<<font color="black">[0] return func<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4523 -> cluster1101_exit [color="black"]
  }
}