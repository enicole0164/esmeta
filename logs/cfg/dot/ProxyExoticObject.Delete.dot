digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1159 {
    label = "def <INTERNAL>:ProxyExoticObject.Delete(O: ProxyExoticObject, P: Symbol | String): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1159_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1159_entry_name -> cluster1159_entry [arrowhead=none, color="black", style=dashed]
    cluster1159_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1159_entry -> node5240 [color="black"]
    cluster1159_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1159_exit_name -> cluster1159_exit [arrowhead=none, color="black", style=dashed]
    cluster1159_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5240_name [shape=none, label=<<font color="black">Block[5240]</font>>]
    node5240_name -> node5240 [arrowhead=none, color="black", style=dashed]
    node5240 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5240 -> node5241 [color="black"]
    node5241_name [shape=none, label=<<font color="black">Branch[5241]</font>>]
    node5241_name -> node5241 [arrowhead=none, color="black", style=dashed]
    node5241 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5241 -> node5242 [label=<<font color="black">true</font>> color="black"]
    node5241 -> node5243 [label=<<font color="black">false</font>> color="black"]
    node5242_name [shape=none, label=<<font color="black">Block[5242]</font>>]
    node5242_name -> node5242 [arrowhead=none, color="black", style=dashed]
    node5242 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#520])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5242 -> cluster1159_exit [color="black"]
    node5243_name [shape=none, label=<<font color="black">Block[5243]</font>>]
    node5243_name -> node5243 [arrowhead=none, color="black", style=dashed]
    node5243 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5243 -> node5244 [color="black"]
    node5244_name [shape=none, label=<<font color="black">Call[5244]</font>>]
    node5244_name -> node5244 [arrowhead=none, color="black", style=dashed]
    node5244 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;deleteProperty&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5244 -> node5245 [color="black"]
    node5245_name [shape=none, label=<<font color="black">Block[5245]</font>>]
    node5245_name -> node5245 [arrowhead=none, color="black", style=dashed]
    node5245 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5245 -> node5246 [color="black"]
    node5246_name [shape=none, label=<<font color="black">Branch[5246]</font>>]
    node5246_name -> node5246 [arrowhead=none, color="black", style=dashed]
    node5246 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5246 -> node5247 [label=<<font color="black">true</font>> color="black"]
    node5246 -> node5249 [label=<<font color="black">false</font>> color="black"]
    node5247_name [shape=none, label=<<font color="black">Call[5247]</font>>]
    node5247_name -> node5247 [arrowhead=none, color="black", style=dashed]
    node5247 [shape=cds, label=<<font color="black">%1 = target-&gt;Delete(P)</font>> color="black" fillcolor="white", style=filled]
    node5247 -> node5248 [color="black"]
    node5249_name [shape=none, label=<<font color="black">Call[5249]</font>>]
    node5249_name -> node5249 [arrowhead=none, color="black", style=dashed]
    node5249 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target, P])[#521])</font>> color="black" fillcolor="white", style=filled]
    node5249 -> node5250 [color="black"]
    node5248_name [shape=none, label=<<font color="black">Block[5248]</font>>]
    node5248_name -> node5248 [arrowhead=none, color="black", style=dashed]
    node5248 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5248 -> cluster1159_exit [color="black"]
    node5250_name [shape=none, label=<<font color="black">Call[5250]</font>>]
    node5250_name -> node5250 [arrowhead=none, color="black", style=dashed]
    node5250 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBoolean&gt;([? %2])</font>> color="black" fillcolor="white", style=filled]
    node5250 -> node5251 [color="black"]
    node5251_name [shape=none, label=<<font color="black">Block[5251]</font>>]
    node5251_name -> node5251 [arrowhead=none, color="black", style=dashed]
    node5251 [shape=box, label=<<font color="black">[0] let booleanTrapResult = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5251 -> node5252 [color="black"]
    node5252_name [shape=none, label=<<font color="black">Branch[5252]</font>>]
    node5252_name -> node5252 [arrowhead=none, color="black", style=dashed]
    node5252 [shape=diamond, label=<<font color="black">(= booleanTrapResult false)</font>> color="black" fillcolor="white", style=filled]
    node5252 -> node5253 [label=<<font color="black">true</font>> color="black"]
    node5252 -> node5254 [label=<<font color="black">false</font>> color="black"]
    node5253_name [shape=none, label=<<font color="black">Block[5253]</font>>]
    node5253_name -> node5253 [arrowhead=none, color="black", style=dashed]
    node5253 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5253 -> cluster1159_exit [color="black"]
    node5254_name [shape=none, label=<<font color="black">Call[5254]</font>>]
    node5254_name -> node5254 [arrowhead=none, color="black", style=dashed]
    node5254 [shape=cds, label=<<font color="black">%4 = target-&gt;GetOwnProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5254 -> node5255 [color="black"]
    node5255_name [shape=none, label=<<font color="black">Block[5255]</font>>]
    node5255_name -> node5255 [arrowhead=none, color="black", style=dashed]
    node5255 [shape=box, label=<<font color="black">[0] let targetDesc = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5255 -> node5256 [color="black"]
    node5256_name [shape=none, label=<<font color="black">Branch[5256]</font>>]
    node5256_name -> node5256 [arrowhead=none, color="black", style=dashed]
    node5256 [shape=diamond, label=<<font color="black">(= targetDesc undefined)</font>> color="black" fillcolor="white", style=filled]
    node5256 -> node5257 [label=<<font color="black">true</font>> color="black"]
    node5256 -> node5258 [label=<<font color="black">false</font>> color="black"]
    node5257_name [shape=none, label=<<font color="black">Block[5257]</font>>]
    node5257_name -> node5257 [arrowhead=none, color="black", style=dashed]
    node5257 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5257 -> cluster1159_exit [color="black"]
    node5258_name [shape=none, label=<<font color="black">Branch[5258]</font>>]
    node5258_name -> node5258 [arrowhead=none, color="black", style=dashed]
    node5258 [shape=diamond, label=<<font color="black">(= targetDesc.Configurable false)</font>> color="black" fillcolor="white", style=filled]
    node5258 -> node5259 [label=<<font color="black">true</font>> color="black"]
    node5258 -> node5260 [label=<<font color="black">false</font>> color="black"]
    node5259_name [shape=none, label=<<font color="black">Block[5259]</font>>]
    node5259_name -> node5259 [arrowhead=none, color="black", style=dashed]
    node5259 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#522])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5259 -> cluster1159_exit [color="black"]
    node5260_name [shape=none, label=<<font color="black">Call[5260]</font>>]
    node5260_name -> node5260 [arrowhead=none, color="black", style=dashed]
    node5260 [shape=cds, label=<<font color="black">%5 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5260 -> node5261 [color="black"]
    node5261_name [shape=none, label=<<font color="black">Block[5261]</font>>]
    node5261_name -> node5261 [arrowhead=none, color="black", style=dashed]
    node5261 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5261 -> node5262 [color="black"]
    node5262_name [shape=none, label=<<font color="black">Branch[5262]</font>>]
    node5262_name -> node5262 [arrowhead=none, color="black", style=dashed]
    node5262 [shape=diamond, label=<<font color="black">(= extensibleTarget false)</font>> color="black" fillcolor="white", style=filled]
    node5262 -> node5263 [label=<<font color="black">true</font>> color="black"]
    node5262 -> node5264 [label=<<font color="black">false</font>> color="black"]
    node5263_name [shape=none, label=<<font color="black">Block[5263]</font>>]
    node5263_name -> node5263 [arrowhead=none, color="black", style=dashed]
    node5263 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#523])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5263 -> cluster1159_exit [color="black"]
    node5264_name [shape=none, label=<<font color="black">Block[5264]</font>>]
    node5264_name -> node5264 [arrowhead=none, color="black", style=dashed]
    node5264 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5264 -> cluster1159_exit [color="black"]
  }
}