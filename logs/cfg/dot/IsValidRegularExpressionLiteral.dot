digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1237 {
    label = "def IsValidRegularExpressionLiteral(literal: Ast[RegularExpressionLiteral]): Boolean"
    style = rounded
    cluster1237_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1237_entry_name -> cluster1237_entry [arrowhead=none, color="black", style=dashed]
    cluster1237_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1237_entry -> node5635 [color="black"]
    cluster1237_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1237_exit_name -> cluster1237_exit [arrowhead=none, color="black", style=dashed]
    cluster1237_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5635_name [shape=none, label=<<font color="black">Block[5635]</font>>]
    node5635_name -> node5635 [arrowhead=none, color="black", style=dashed]
    node5635 [shape=box, label=<<font color="black">[0] (yet &quot;If FlagText of _literal_ contains any code points other than `g`, `i`, `m`, `s`, `u`, or `y`, or if it contains the same code point more than once, return *false*.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5635 -> node5636 [color="black"]
    node5636_name [shape=none, label=<<font color="black">Call[5636]</font>>]
    node5636_name -> node5636 [arrowhead=none, color="black", style=dashed]
    node5636 [shape=cds, label=<<font color="black">%0 = literal-&gt;BodyText()</font>> color="black" fillcolor="white", style=filled]
    node5636 -> node5637 [color="black"]
    node5637_name [shape=none, label=<<font color="black">Block[5637]</font>>]
    node5637_name -> node5637 [arrowhead=none, color="black", style=dashed]
    node5637 [shape=box, label=<<font color="black">[0] let patternText = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5637 -> node5638 [color="black"]
    node5638_name [shape=none, label=<<font color="black">Call[5638]</font>>]
    node5638_name -> node5638 [arrowhead=none, color="black", style=dashed]
    node5638 [shape=cds, label=<<font color="black">%1 = literal-&gt;FlagText()</font>> color="black" fillcolor="white", style=filled]
    node5638 -> node5639 [color="black"]
    node5639_name [shape=none, label=<<font color="black">Branch[5639]</font>>]
    node5639_name -> node5639 [arrowhead=none, color="black", style=dashed]
    node5639 [shape=diamond, label=<<font color="black">(contains %1 &quot;u&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5639 -> node5640 [label=<<font color="black">true</font>> color="black"]
    node5639 -> node5641 [label=<<font color="black">false</font>> color="black"]
    node5640_name [shape=none, label=<<font color="black">Block[5640]</font>>]
    node5640_name -> node5640 [arrowhead=none, color="black", style=dashed]
    node5640 [shape=box, label=<<font color="black">[0] let u = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5640 -> node5642 [color="black"]
    node5641_name [shape=none, label=<<font color="black">Block[5641]</font>>]
    node5641_name -> node5641 [arrowhead=none, color="black", style=dashed]
    node5641 [shape=box, label=<<font color="black">[0] let u = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5641 -> node5642 [color="black"]
    node5642_name [shape=none, label=<<font color="black">Branch[5642]</font>>]
    node5642_name -> node5642 [arrowhead=none, color="black", style=dashed]
    node5642 [shape=diamond, label=<<font color="black">(= u false)</font>> color="black" fillcolor="white", style=filled]
    node5642 -> node5643 [label=<<font color="black">true</font>> color="black"]
    node5642 -> node5645 [label=<<font color="black">false</font>> color="black"]
    node5643_name [shape=none, label=<<font color="black">Call[5643]</font>>]
    node5643_name -> node5643 [arrowhead=none, color="black", style=dashed]
    node5643 [shape=cds, label=<<font color="black">%2 = clo&lt;CodePointsToString&gt;(patternText)</font>> color="black" fillcolor="white", style=filled]
    node5643 -> node5644 [color="black"]
    node5645_name [shape=none, label=<<font color="black">Call[5645]</font>>]
    node5645_name -> node5645 [arrowhead=none, color="black", style=dashed]
    node5645 [shape=cds, label=<<font color="black">%3 = clo&lt;ParsePattern&gt;(patternText, u)</font>> color="black" fillcolor="white", style=filled]
    node5645 -> node5646 [color="black"]
    node5644_name [shape=none, label=<<font color="black">Block[5644]</font>>]
    node5644_name -> node5644 [arrowhead=none, color="black", style=dashed]
    node5644 [shape=box, label=<<font color="black">[0] let stringValue = %2<BR ALIGN="LEFT"/>[1] (yet &quot;Set _patternText_ to the sequence of code points resulting from interpreting each of the 16-bit elements of _stringValue_ as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5644 -> node5645 [color="black"]
    node5646_name [shape=none, label=<<font color="black">Block[5646]</font>>]
    node5646_name -> node5646 [arrowhead=none, color="black", style=dashed]
    node5646 [shape=box, label=<<font color="black">[0] let parseResult = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5646 -> node5647 [color="black"]
    node5647_name [shape=none, label=<<font color="black">Branch[5647]</font>>]
    node5647_name -> node5647 [arrowhead=none, color="black", style=dashed]
    node5647 [shape=diamond, label=<<font color="black">(? parseResult: &quot;ParseNode&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5647 -> node5648 [label=<<font color="black">true</font>> color="black"]
    node5647 -> node5649 [label=<<font color="black">false</font>> color="black"]
    node5648_name [shape=none, label=<<font color="black">Block[5648]</font>>]
    node5648_name -> node5648 [arrowhead=none, color="black", style=dashed]
    node5648 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5648 -> cluster1237_exit [color="black"]
    node5649_name [shape=none, label=<<font color="black">Block[5649]</font>>]
    node5649_name -> node5649 [arrowhead=none, color="black", style=dashed]
    node5649 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5649 -> cluster1237_exit [color="black"]
  }
}