digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2611 {
    label = "def <CONT>:GeneratorStart:cont0(): Const[~unused~]"
    style = rounded
    cluster2611_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2611_entry_name -> cluster2611_entry [arrowhead=none, color="black", style=dashed]
    cluster2611_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2611_entry -> node19323 [color="black"]
    cluster2611_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2611_exit_name -> cluster2611_exit [arrowhead=none, color="black", style=dashed]
    cluster2611_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19323_name [shape=none, label=<<font color="black">Branch[19323]</font>>]
    node19323_name -> node19323 [arrowhead=none, color="black", style=dashed]
    node19323 [shape=diamond, label=<<font color="black">(? generatorBody: &quot;ParseNode&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19323 -> node19324 [label=<<font color="black">true</font>> color="black"]
    node19323 -> node19326 [label=<<font color="black">false</font>> color="black"]
    node19324_name [shape=none, label=<<font color="black">Call[19324]</font>>]
    node19324_name -> node19324 [arrowhead=none, color="black", style=dashed]
    node19324 [shape=cds, label=<<font color="black">%0 = generatorBody-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node19324 -> node19325 [color="black"]
    node19326_name [shape=none, label=<<font color="black">Block[19326]</font>>]
    node19326_name -> node19326 [arrowhead=none, color="black", style=dashed]
    node19326 [shape=box, label=<<font color="black">[0] assert (yet &quot;_generatorBody_ is an Abstract Closure with no parameters.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19326 -> node19327 [color="black"]
    node19325_name [shape=none, label=<<font color="black">Block[19325]</font>>]
    node19325_name -> node19325 [arrowhead=none, color="black", style=dashed]
    node19325 [shape=box, label=<<font color="black">[0] let result = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19325 -> node19329 [color="black"]
    node19327_name [shape=none, label=<<font color="black">Call[19327]</font>>]
    node19327_name -> node19327 [arrowhead=none, color="black", style=dashed]
    node19327 [shape=cds, label=<<font color="black">%1 = generatorBody()</font>> color="black" fillcolor="white", style=filled]
    node19327 -> node19328 [color="black"]
    node19329_name [shape=none, label=<<font color="black">Block[19329]</font>>]
    node19329_name -> node19329 [arrowhead=none, color="black", style=dashed]
    node19329 [shape=box, label=<<font color="black">[0] assert (yet &quot;If we return here, the generator either threw an exception or performed either an implicit or explicit return.&quot;)<BR ALIGN="LEFT"/>[1] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/>[2] generator.GeneratorState = ~completed~<BR ALIGN="LEFT"/>[3] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19329 -> node19330 [color="black"]
    node19328_name [shape=none, label=<<font color="black">Block[19328]</font>>]
    node19328_name -> node19328 [arrowhead=none, color="black", style=dashed]
    node19328 [shape=box, label=<<font color="black">[0] let result = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19328 -> node19329 [color="black"]
    node19330_name [shape=none, label=<<font color="black">Branch[19330]</font>>]
    node19330_name -> node19330 [arrowhead=none, color="black", style=dashed]
    node19330 [shape=diamond, label=<<font color="black">(= result.Type ~normal~)</font>> color="black" fillcolor="white", style=filled]
    node19330 -> node19331 [label=<<font color="black">true</font>> color="black"]
    node19330 -> node19332 [label=<<font color="black">false</font>> color="black"]
    node19331_name [shape=none, label=<<font color="black">Block[19331]</font>>]
    node19331_name -> node19331 [arrowhead=none, color="black", style=dashed]
    node19331 [shape=box, label=<<font color="black">[0] let resultValue = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19331 -> node19336 [color="black"]
    node19332_name [shape=none, label=<<font color="black">Branch[19332]</font>>]
    node19332_name -> node19332 [arrowhead=none, color="black", style=dashed]
    node19332 [shape=diamond, label=<<font color="black">(= result.Type ~return~)</font>> color="black" fillcolor="white", style=filled]
    node19332 -> node19333 [label=<<font color="black">true</font>> color="black"]
    node19332 -> node19334 [label=<<font color="black">false</font>> color="black"]
    node19336_name [shape=none, label=<<font color="black">Call[19336]</font>>]
    node19336_name -> node19336 [arrowhead=none, color="black", style=dashed]
    node19336 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateIterResultObject&gt;(resultValue, true)</font>> color="black" fillcolor="white", style=filled]
    node19336 -> node19337 [color="black"]
    node19333_name [shape=none, label=<<font color="black">Block[19333]</font>>]
    node19333_name -> node19333 [arrowhead=none, color="black", style=dashed]
    node19333 [shape=box, label=<<font color="black">[0] let resultValue = result.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19333 -> node19336 [color="black"]
    node19334_name [shape=none, label=<<font color="black">Block[19334]</font>>]
    node19334_name -> node19334 [arrowhead=none, color="black", style=dashed]
    node19334 [shape=box, label=<<font color="black">[0] assert (= result.Type ~throw~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19334 -> node19335 [color="black"]
    node19337_name [shape=none, label=<<font color="black">Call[19337]</font>>]
    node19337_name -> node19337 [arrowhead=none, color="black", style=dashed]
    node19337 [shape=cds, label=<<font color="black">%4 = clo&lt;NormalCompletion&gt;(%3)</font>> color="black" fillcolor="white", style=filled]
    node19337 -> node19338 [color="black"]
    node19335_name [shape=none, label=<<font color="black">Call[19335]</font>>]
    node19335_name -> node19335 [arrowhead=none, color="black", style=dashed]
    node19335 [shape=cds, label=<<font color="black">%2 = (pop &lt; genContext.ReturnCont)(result)</font>> color="black" fillcolor="white", style=filled]
    node19335 -> node19336 [color="black"]
    node19338_name [shape=none, label=<<font color="black">Call[19338]</font>>]
    node19338_name -> node19338 [arrowhead=none, color="black", style=dashed]
    node19338 [shape=cds, label=<<font color="black">%5 = (pop &lt; genContext.ReturnCont)(%4)</font>> color="black" fillcolor="white", style=filled]
    node19338 -> cluster2611_exit [color="black"]
  }
}