digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster292 {
    label = "def <SYNTAX>:CaseBlock[1,3].LexicallyScopedDeclarations(this: Ast:CaseBlock[1,3]): List[Ast]"
    style = rounded
    cluster292_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster292_entry_name -> cluster292_entry [arrowhead=none, color="black", style=dashed]
    cluster292_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster292_entry -> node1813 [color="black"]
    cluster292_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster292_exit_name -> cluster292_exit [arrowhead=none, color="black", style=dashed]
    cluster292_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1813_name [shape=none, label=<<font color="black">Branch[1813]</font>>]
    node1813_name -> node1813 [arrowhead=none, color="black", style=dashed]
    node1813 [shape=diamond, label=<<font color="black">(! (= this[0] absent))</font>> color="black" fillcolor="white", style=filled]
    node1813 -> node1814 [label=<<font color="black">true</font>> color="black"]
    node1813 -> node1816 [label=<<font color="black">false</font>> color="black"]
    node1814_name [shape=none, label=<<font color="black">Call[1814]</font>>]
    node1814_name -> node1814 [arrowhead=none, color="black", style=dashed]
    node1814 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node1814 -> node1815 [color="black"]
    node1816_name [shape=none, label=<<font color="black">Block[1816]</font>>]
    node1816_name -> node1816 [arrowhead=none, color="black", style=dashed]
    node1816 [shape=box, label=<<font color="black">[0] let declarations1 = (new [])[#152]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1816 -> node1817 [color="black"]
    node1815_name [shape=none, label=<<font color="black">Block[1815]</font>>]
    node1815_name -> node1815 [arrowhead=none, color="black", style=dashed]
    node1815 [shape=box, label=<<font color="black">[0] let declarations1 = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1815 -> node1817 [color="black"]
    node1817_name [shape=none, label=<<font color="black">Call[1817]</font>>]
    node1817_name -> node1817 [arrowhead=none, color="black", style=dashed]
    node1817 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node1817 -> node1818 [color="black"]
    node1818_name [shape=none, label=<<font color="black">Block[1818]</font>>]
    node1818_name -> node1818 [arrowhead=none, color="black", style=dashed]
    node1818 [shape=box, label=<<font color="black">[0] let declarations2 = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1818 -> node1819 [color="black"]
    node1819_name [shape=none, label=<<font color="black">Branch[1819]</font>>]
    node1819_name -> node1819 [arrowhead=none, color="black", style=dashed]
    node1819 [shape=diamond, label=<<font color="black">(! (= this[2] absent))</font>> color="black" fillcolor="white", style=filled]
    node1819 -> node1820 [label=<<font color="black">true</font>> color="black"]
    node1819 -> node1822 [label=<<font color="black">false</font>> color="black"]
    node1820_name [shape=none, label=<<font color="black">Call[1820]</font>>]
    node1820_name -> node1820 [arrowhead=none, color="black", style=dashed]
    node1820 [shape=cds, label=<<font color="black">%2 = this[2]-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node1820 -> node1821 [color="black"]
    node1822_name [shape=none, label=<<font color="black">Block[1822]</font>>]
    node1822_name -> node1822 [arrowhead=none, color="black", style=dashed]
    node1822 [shape=box, label=<<font color="black">[0] let declarations3 = (new [])[#153]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1822 -> node1823 [color="black"]
    node1821_name [shape=none, label=<<font color="black">Block[1821]</font>>]
    node1821_name -> node1821 [arrowhead=none, color="black", style=dashed]
    node1821 [shape=box, label=<<font color="black">[0] let declarations3 = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1821 -> node1823 [color="black"]
    node1823_name [shape=none, label=<<font color="black">Block[1823]</font>>]
    node1823_name -> node1823 [arrowhead=none, color="black", style=dashed]
    node1823 [shape=box, label=<<font color="black">[0] return (list-concat declarations1 declarations2 declarations3)[#154]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1823 -> cluster292_exit [color="black"]
  }
}