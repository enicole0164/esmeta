digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2386 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.of(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2386_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2386_entry_name -> cluster2386_entry [arrowhead=none, color="black", style=dashed]
    cluster2386_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2386_entry -> node15928 [color="black"]
    cluster2386_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2386_exit_name -> cluster2386_exit [arrowhead=none, color="black", style=dashed]
    cluster2386_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15928_name [shape=none, label=<<font color="black">Block[15928]</font>>]
    node15928_name -> node15928 [arrowhead=none, color="black", style=dashed]
    node15928 [shape=box, label=<<font color="black">[0] let items = argumentsList<BR ALIGN="LEFT"/>[1] let len = items.length<BR ALIGN="LEFT"/>[2] let C = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15928 -> node15929 [color="black"]
    node15929_name [shape=none, label=<<font color="black">Call[15929]</font>>]
    node15929_name -> node15929 [arrowhead=none, color="black", style=dashed]
    node15929 [shape=cds, label=<<font color="black">%0 = clo&lt;IsConstructor&gt;(C)</font>> color="black" fillcolor="white", style=filled]
    node15929 -> node15930 [color="black"]
    node15930_name [shape=none, label=<<font color="black">Branch[15930]</font>>]
    node15930_name -> node15930 [arrowhead=none, color="black", style=dashed]
    node15930 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node15930 -> node15931 [label=<<font color="black">true</font>> color="black"]
    node15930 -> node15932 [label=<<font color="black">false</font>> color="black"]
    node15931_name [shape=none, label=<<font color="black">Block[15931]</font>>]
    node15931_name -> node15931 [arrowhead=none, color="black", style=dashed]
    node15931 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1059])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15931 -> cluster2386_exit [color="black"]
    node15932_name [shape=none, label=<<font color="black">Call[15932]</font>>]
    node15932_name -> node15932 [arrowhead=none, color="black", style=dashed]
    node15932 [shape=cds, label=<<font color="black">%1 = clo&lt;TypedArrayCreate&gt;(C, (new [([number] len)])[#1060])</font>> color="black" fillcolor="white", style=filled]
    node15932 -> node15933 [color="black"]
    node15933_name [shape=none, label=<<font color="black">Block[15933]</font>>]
    node15933_name -> node15933 [arrowhead=none, color="black", style=dashed]
    node15933 [shape=box, label=<<font color="black">[0] let newObj = [? %1]<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15933 -> node15934 [color="black"]
    node15934_name [shape=none, label=<<font color="black">Branch[15934]</font>>]
    node15934_name -> node15934 [arrowhead=none, color="black", style=dashed]
    node15934 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node15934 -> node15935 [label=<<font color="black">true</font>> color="black"]
    node15934 -> node15940 [label=<<font color="black">false</font>> color="black"]
    node15935_name [shape=none, label=<<font color="black">Block[15935]</font>>]
    node15935_name -> node15935 [arrowhead=none, color="black", style=dashed]
    node15935 [shape=box, label=<<font color="black">[0] let kValue = items[k]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15935 -> node15936 [color="black"]
    node15940_name [shape=none, label=<<font color="black">Block[15940]</font>>]
    node15940_name -> node15940 [arrowhead=none, color="black", style=dashed]
    node15940 [shape=box, label=<<font color="black">[0] return newObj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15940 -> cluster2386_exit [color="black"]
    node15936_name [shape=none, label=<<font color="black">Call[15936]</font>>]
    node15936_name -> node15936 [arrowhead=none, color="black", style=dashed]
    node15936 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15936 -> node15937 [color="black"]
    node15937_name [shape=none, label=<<font color="black">Block[15937]</font>>]
    node15937_name -> node15937 [arrowhead=none, color="black", style=dashed]
    node15937 [shape=box, label=<<font color="black">[0] let Pk = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15937 -> node15938 [color="black"]
    node15938_name [shape=none, label=<<font color="black">Call[15938]</font>>]
    node15938_name -> node15938 [arrowhead=none, color="black", style=dashed]
    node15938 [shape=cds, label=<<font color="black">%3 = clo&lt;Set&gt;(newObj, Pk, kValue, true)</font>> color="black" fillcolor="white", style=filled]
    node15938 -> node15939 [color="black"]
    node15939_name [shape=none, label=<<font color="black">Block[15939]</font>>]
    node15939_name -> node15939 [arrowhead=none, color="black", style=dashed]
    node15939 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15939 -> node15934 [color="black"]
  }
}