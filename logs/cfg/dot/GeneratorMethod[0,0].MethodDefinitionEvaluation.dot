digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1597 {
    label = "def <SYNTAX>:GeneratorMethod[0,0].MethodDefinitionEvaluation(this: Ast:GeneratorMethod[0,0], object: Unknown, enumerable: Unknown): Normal[PrivateElement | Const[~unused~]] | Abrupt"
    style = rounded
    cluster1597_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1597_entry_name -> cluster1597_entry [arrowhead=none, color="black", style=dashed]
    cluster1597_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1597_entry -> node8542 [color="black"]
    cluster1597_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1597_exit_name -> cluster1597_exit [arrowhead=none, color="black", style=dashed]
    cluster1597_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8542_name [shape=none, label=<<font color="black">Call[8542]</font>>]
    node8542_name -> node8542 [arrowhead=none, color="black", style=dashed]
    node8542 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node8542 -> node8543 [color="black"]
    node8543_name [shape=none, label=<<font color="black">Block[8543]</font>>]
    node8543_name -> node8543 [arrowhead=none, color="black", style=dashed]
    node8543 [shape=box, label=<<font color="black">[0] let propKey = %0<BR ALIGN="LEFT"/>[1] [? propKey]<BR ALIGN="LEFT"/>[2] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[3] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[4] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8543 -> node8544 [color="black"]
    node8544_name [shape=none, label=<<font color="black">Call[8544]</font>>]
    node8544_name -> node8544 [arrowhead=none, color="black", style=dashed]
    node8544 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%GeneratorFunction.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8544 -> node8545 [color="black"]
    node8545_name [shape=none, label=<<font color="black">Block[8545]</font>>]
    node8545_name -> node8545 [arrowhead=none, color="black", style=dashed]
    node8545 [shape=box, label=<<font color="black">[0] let closure = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8545 -> node8546 [color="black"]
    node8546_name [shape=none, label=<<font color="black">Call[8546]</font>>]
    node8546_name -> node8546 [arrowhead=none, color="black", style=dashed]
    node8546 [shape=cds, label=<<font color="black">%2 = clo&lt;MakeMethod&gt;(closure, object)</font>> color="black" fillcolor="white", style=filled]
    node8546 -> node8547 [color="black"]
    node8547_name [shape=none, label=<<font color="black">Call[8547]</font>>]
    node8547_name -> node8547 [arrowhead=none, color="black", style=dashed]
    node8547 [shape=cds, label=<<font color="black">%3 = clo&lt;SetFunctionName&gt;(closure, propKey)</font>> color="black" fillcolor="white", style=filled]
    node8547 -> node8548 [color="black"]
    node8548_name [shape=none, label=<<font color="black">Call[8548]</font>>]
    node8548_name -> node8548 [arrowhead=none, color="black", style=dashed]
    node8548 [shape=cds, label=<<font color="black">%4 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%GeneratorFunction.prototype.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node8548 -> node8549 [color="black"]
    node8549_name [shape=none, label=<<font color="black">Block[8549]</font>>]
    node8549_name -> node8549 [arrowhead=none, color="black", style=dashed]
    node8549 [shape=box, label=<<font color="black">[0] let prototype = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8549 -> node8550 [color="black"]
    node8550_name [shape=none, label=<<font color="black">Call[8550]</font>>]
    node8550_name -> node8550 [arrowhead=none, color="black", style=dashed]
    node8550 [shape=cds, label=<<font color="black">%5 = clo&lt;DefinePropertyOrThrow&gt;(closure, &quot;prototype&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false))[#656])</font>> color="black" fillcolor="white", style=filled]
    node8550 -> node8551 [color="black"]
    node8551_name [shape=none, label=<<font color="black">Block[8551]</font>>]
    node8551_name -> node8551 [arrowhead=none, color="black", style=dashed]
    node8551 [shape=box, label=<<font color="black">[0] [! %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8551 -> node8552 [color="black"]
    node8552_name [shape=none, label=<<font color="black">Call[8552]</font>>]
    node8552_name -> node8552 [arrowhead=none, color="black", style=dashed]
    node8552 [shape=cds, label=<<font color="black">%6 = clo&lt;DefineMethodProperty&gt;(object, propKey, closure, enumerable)</font>> color="black" fillcolor="white", style=filled]
    node8552 -> node8553 [color="black"]
    node8553_name [shape=none, label=<<font color="black">Block[8553]</font>>]
    node8553_name -> node8553 [arrowhead=none, color="black", style=dashed]
    node8553 [shape=box, label=<<font color="black">[0] return %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8553 -> cluster1597_exit [color="black"]
  }
}