digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster139 {
    label = "def GetMethod(V: ESValue, P: Symbol | String): Normal[FunctionObject | Undefined] | Abrupt"
    style = rounded
    cluster139_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster139_entry_name -> cluster139_entry [arrowhead=none, color="black", style=dashed]
    cluster139_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster139_entry -> node1129 [color="black"]
    cluster139_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster139_exit_name -> cluster139_exit [arrowhead=none, color="black", style=dashed]
    cluster139_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1129_name [shape=none, label=<<font color="black">Call[1129]</font>>]
    node1129_name -> node1129 [arrowhead=none, color="black", style=dashed]
    node1129 [shape=cds, label=<<font color="black">%0 = clo&lt;GetV&gt;(V, P)</font>> color="black" fillcolor="white", style=filled]
    node1129 -> node1130 [color="black"]
    node1130_name [shape=none, label=<<font color="black">Block[1130]</font>>]
    node1130_name -> node1130 [arrowhead=none, color="black", style=dashed]
    node1130 [shape=box, label=<<font color="black">[0] let func = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1130 -> node1131 [color="black"]
    node1131_name [shape=none, label=<<font color="black">Branch[1131]</font>>]
    node1131_name -> node1131 [arrowhead=none, color="black", style=dashed]
    node1131 [shape=diamond, label=<<font color="black">(|| (= func undefined) (= func null))</font>> color="black" fillcolor="white", style=filled]
    node1131 -> node1132 [label=<<font color="black">true</font>> color="black"]
    node1131 -> node1133 [label=<<font color="black">false</font>> color="black"]
    node1132_name [shape=none, label=<<font color="black">Block[1132]</font>>]
    node1132_name -> node1132 [arrowhead=none, color="black", style=dashed]
    node1132 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1132 -> cluster139_exit [color="black"]
    node1133_name [shape=none, label=<<font color="black">Call[1133]</font>>]
    node1133_name -> node1133 [arrowhead=none, color="black", style=dashed]
    node1133 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(func)</font>> color="black" fillcolor="white", style=filled]
    node1133 -> node1134 [color="black"]
    node1134_name [shape=none, label=<<font color="black">Branch[1134]</font>>]
    node1134_name -> node1134 [arrowhead=none, color="black", style=dashed]
    node1134 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node1134 -> node1135 [label=<<font color="black">true</font>> color="black"]
    node1134 -> node1136 [label=<<font color="black">false</font>> color="black"]
    node1135_name [shape=none, label=<<font color="black">Block[1135]</font>>]
    node1135_name -> node1135 [arrowhead=none, color="black", style=dashed]
    node1135 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#47])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1135 -> cluster139_exit [color="black"]
    node1136_name [shape=none, label=<<font color="black">Block[1136]</font>>]
    node1136_name -> node1136 [arrowhead=none, color="black", style=dashed]
    node1136 [shape=box, label=<<font color="black">[0] return func<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1136 -> cluster139_exit [color="black"]
  }
}