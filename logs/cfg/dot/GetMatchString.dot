digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2316 {
    label = "def GetMatchString(S: String, match: MatchRecord): String"
    style = rounded
    cluster2316_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2316_entry_name -> cluster2316_entry [arrowhead=none, color="black", style=dashed]
    cluster2316_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2316_entry -> node14257 [color="black"]
    cluster2316_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2316_exit_name -> cluster2316_exit [arrowhead=none, color="black", style=dashed]
    cluster2316_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14257_name [shape=none, label=<<font color="black">Block[14257]</font>>]
    node14257_name -> node14257 [arrowhead=none, color="black", style=dashed]
    node14257 [shape=box, label=<<font color="black">[0] assert (yet &quot;_match_.[[StartIndex]] is a non-negative integer less than or equal to the length of _S_.&quot;)<BR ALIGN="LEFT"/>[1] assert (yet &quot;_match_.[[EndIndex]] is an integer between _match_.[[StartIndex]] and the length of _S_, inclusive.&quot;)<BR ALIGN="LEFT"/>[2] return (substring S match.StartIndex match.EndIndex)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14257 -> cluster2316_exit [color="black"]
  }
}