digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2253 {
    label = "def <SYNTAX>:Assertion[3,0].CompileAssertion(this: Ast:Assertion[3,0]): Unknown["Matcher"]"
    style = rounded
    cluster2253_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2253_entry_name -> cluster2253_entry [arrowhead=none, color="black", style=dashed]
    cluster2253_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2253_entry -> node13955 [color="black"]
    cluster2253_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2253_exit_name -> cluster2253_exit [arrowhead=none, color="black", style=dashed]
    cluster2253_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13955_name [shape=none, label=<<font color="black">Block[13955]</font>>]
    node13955_name -> node13955 [arrowhead=none, color="black", style=dashed]
    node13955 [shape=box, label=<<font color="black">[0] (yet &quot;Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _e_ be _x_'s _endIndex_.\n  1. Let _a_ be IsWordChar(_e_ - 1).\n  1. Let _b_ be IsWordChar(_e_).\n  1. If _a_ is *true* and _b_ is *true* or _a_ is *false* and _b_ is *false*, return _c_(_x_).\n  1. Return ~failure~.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13955 -> cluster2253_exit [color="black"]
  }
}