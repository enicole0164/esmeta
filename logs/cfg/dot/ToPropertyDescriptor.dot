digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster71 {
    label = "def ToPropertyDescriptor(Obj: Unknown): Normal[PropertyDescriptor] | Abrupt"
    style = rounded
    cluster71_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster71_entry_name -> cluster71_entry [arrowhead=none, color="black", style=dashed]
    cluster71_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster71_entry -> node507 [color="black"]
    cluster71_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster71_exit_name -> cluster71_exit [arrowhead=none, color="black", style=dashed]
    cluster71_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node507_name [shape=none, label=<<font color="black">Branch[507]</font>>]
    node507_name -> node507 [arrowhead=none, color="black", style=dashed]
    node507 [shape=diamond, label=<<font color="black">(! (= (typeof Obj) @Object))</font>> color="black" fillcolor="white", style=filled]
    node507 -> node508 [label=<<font color="black">true</font>> color="black"]
    node507 -> node509 [label=<<font color="black">false</font>> color="black"]
    node508_name [shape=none, label=<<font color="black">Block[508]</font>>]
    node508_name -> node508 [arrowhead=none, color="black", style=dashed]
    node508 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#17])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node508 -> cluster71_exit [color="black"]
    node509_name [shape=none, label=<<font color="black">Block[509]</font>>]
    node509_name -> node509 [arrowhead=none, color="black", style=dashed]
    node509 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor())[#18]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node509 -> node510 [color="black"]
    node510_name [shape=none, label=<<font color="black">Call[510]</font>>]
    node510_name -> node510 [arrowhead=none, color="black", style=dashed]
    node510 [shape=cds, label=<<font color="black">%0 = clo&lt;HasProperty&gt;(Obj, &quot;enumerable&quot;)</font>> color="black" fillcolor="white", style=filled]
    node510 -> node511 [color="black"]
    node511_name [shape=none, label=<<font color="black">Block[511]</font>>]
    node511_name -> node511 [arrowhead=none, color="black", style=dashed]
    node511 [shape=box, label=<<font color="black">[0] let hasEnumerable = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node511 -> node512 [color="black"]
    node512_name [shape=none, label=<<font color="black">Branch[512]</font>>]
    node512_name -> node512 [arrowhead=none, color="black", style=dashed]
    node512 [shape=diamond, label=<<font color="black">(= hasEnumerable true)</font>> color="black" fillcolor="white", style=filled]
    node512 -> node513 [label=<<font color="black">true</font>> color="black"]
    node512 -> node516 [label=<<font color="black">false</font>> color="black"]
    node513_name [shape=none, label=<<font color="black">Call[513]</font>>]
    node513_name -> node513 [arrowhead=none, color="black", style=dashed]
    node513 [shape=cds, label=<<font color="black">%1 = clo&lt;Get&gt;(Obj, &quot;enumerable&quot;)</font>> color="black" fillcolor="white", style=filled]
    node513 -> node514 [color="black"]
    node516_name [shape=none, label=<<font color="black">Call[516]</font>>]
    node516_name -> node516 [arrowhead=none, color="black", style=dashed]
    node516 [shape=cds, label=<<font color="black">%3 = clo&lt;HasProperty&gt;(Obj, &quot;configurable&quot;)</font>> color="black" fillcolor="white", style=filled]
    node516 -> node517 [color="black"]
    node514_name [shape=none, label=<<font color="black">Call[514]</font>>]
    node514_name -> node514 [arrowhead=none, color="black", style=dashed]
    node514 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBoolean&gt;([? %1])</font>> color="black" fillcolor="white", style=filled]
    node514 -> node515 [color="black"]
    node517_name [shape=none, label=<<font color="black">Block[517]</font>>]
    node517_name -> node517 [arrowhead=none, color="black", style=dashed]
    node517 [shape=box, label=<<font color="black">[0] let hasConfigurable = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node517 -> node518 [color="black"]
    node515_name [shape=none, label=<<font color="black">Block[515]</font>>]
    node515_name -> node515 [arrowhead=none, color="black", style=dashed]
    node515 [shape=box, label=<<font color="black">[0] let enumerable = %2<BR ALIGN="LEFT"/>[1] desc.Enumerable = enumerable<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node515 -> node516 [color="black"]
    node518_name [shape=none, label=<<font color="black">Branch[518]</font>>]
    node518_name -> node518 [arrowhead=none, color="black", style=dashed]
    node518 [shape=diamond, label=<<font color="black">(= hasConfigurable true)</font>> color="black" fillcolor="white", style=filled]
    node518 -> node519 [label=<<font color="black">true</font>> color="black"]
    node518 -> node522 [label=<<font color="black">false</font>> color="black"]
    node519_name [shape=none, label=<<font color="black">Call[519]</font>>]
    node519_name -> node519 [arrowhead=none, color="black", style=dashed]
    node519 [shape=cds, label=<<font color="black">%4 = clo&lt;Get&gt;(Obj, &quot;configurable&quot;)</font>> color="black" fillcolor="white", style=filled]
    node519 -> node520 [color="black"]
    node522_name [shape=none, label=<<font color="black">Call[522]</font>>]
    node522_name -> node522 [arrowhead=none, color="black", style=dashed]
    node522 [shape=cds, label=<<font color="black">%6 = clo&lt;HasProperty&gt;(Obj, &quot;value&quot;)</font>> color="black" fillcolor="white", style=filled]
    node522 -> node523 [color="black"]
    node520_name [shape=none, label=<<font color="black">Call[520]</font>>]
    node520_name -> node520 [arrowhead=none, color="black", style=dashed]
    node520 [shape=cds, label=<<font color="black">%5 = clo&lt;ToBoolean&gt;([? %4])</font>> color="black" fillcolor="white", style=filled]
    node520 -> node521 [color="black"]
    node523_name [shape=none, label=<<font color="black">Block[523]</font>>]
    node523_name -> node523 [arrowhead=none, color="black", style=dashed]
    node523 [shape=box, label=<<font color="black">[0] let hasValue = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node523 -> node524 [color="black"]
    node521_name [shape=none, label=<<font color="black">Block[521]</font>>]
    node521_name -> node521 [arrowhead=none, color="black", style=dashed]
    node521 [shape=box, label=<<font color="black">[0] let configurable = %5<BR ALIGN="LEFT"/>[1] desc.Configurable = configurable<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node521 -> node522 [color="black"]
    node524_name [shape=none, label=<<font color="black">Branch[524]</font>>]
    node524_name -> node524 [arrowhead=none, color="black", style=dashed]
    node524 [shape=diamond, label=<<font color="black">(= hasValue true)</font>> color="black" fillcolor="white", style=filled]
    node524 -> node525 [label=<<font color="black">true</font>> color="black"]
    node524 -> node527 [label=<<font color="black">false</font>> color="black"]
    node525_name [shape=none, label=<<font color="black">Call[525]</font>>]
    node525_name -> node525 [arrowhead=none, color="black", style=dashed]
    node525 [shape=cds, label=<<font color="black">%7 = clo&lt;Get&gt;(Obj, &quot;value&quot;)</font>> color="black" fillcolor="white", style=filled]
    node525 -> node526 [color="black"]
    node527_name [shape=none, label=<<font color="black">Call[527]</font>>]
    node527_name -> node527 [arrowhead=none, color="black", style=dashed]
    node527 [shape=cds, label=<<font color="black">%8 = clo&lt;HasProperty&gt;(Obj, &quot;writable&quot;)</font>> color="black" fillcolor="white", style=filled]
    node527 -> node528 [color="black"]
    node526_name [shape=none, label=<<font color="black">Block[526]</font>>]
    node526_name -> node526 [arrowhead=none, color="black", style=dashed]
    node526 [shape=box, label=<<font color="black">[0] let value = [? %7]<BR ALIGN="LEFT"/>[1] desc.Value = value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node526 -> node527 [color="black"]
    node528_name [shape=none, label=<<font color="black">Block[528]</font>>]
    node528_name -> node528 [arrowhead=none, color="black", style=dashed]
    node528 [shape=box, label=<<font color="black">[0] let hasWritable = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node528 -> node529 [color="black"]
    node529_name [shape=none, label=<<font color="black">Branch[529]</font>>]
    node529_name -> node529 [arrowhead=none, color="black", style=dashed]
    node529 [shape=diamond, label=<<font color="black">(= hasWritable true)</font>> color="black" fillcolor="white", style=filled]
    node529 -> node530 [label=<<font color="black">true</font>> color="black"]
    node529 -> node533 [label=<<font color="black">false</font>> color="black"]
    node530_name [shape=none, label=<<font color="black">Call[530]</font>>]
    node530_name -> node530 [arrowhead=none, color="black", style=dashed]
    node530 [shape=cds, label=<<font color="black">%9 = clo&lt;Get&gt;(Obj, &quot;writable&quot;)</font>> color="black" fillcolor="white", style=filled]
    node530 -> node531 [color="black"]
    node533_name [shape=none, label=<<font color="black">Call[533]</font>>]
    node533_name -> node533 [arrowhead=none, color="black", style=dashed]
    node533 [shape=cds, label=<<font color="black">%11 = clo&lt;HasProperty&gt;(Obj, &quot;get&quot;)</font>> color="black" fillcolor="white", style=filled]
    node533 -> node534 [color="black"]
    node531_name [shape=none, label=<<font color="black">Call[531]</font>>]
    node531_name -> node531 [arrowhead=none, color="black", style=dashed]
    node531 [shape=cds, label=<<font color="black">%10 = clo&lt;ToBoolean&gt;([? %9])</font>> color="black" fillcolor="white", style=filled]
    node531 -> node532 [color="black"]
    node534_name [shape=none, label=<<font color="black">Block[534]</font>>]
    node534_name -> node534 [arrowhead=none, color="black", style=dashed]
    node534 [shape=box, label=<<font color="black">[0] let hasGet = [? %11]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node534 -> node535 [color="black"]
    node532_name [shape=none, label=<<font color="black">Block[532]</font>>]
    node532_name -> node532 [arrowhead=none, color="black", style=dashed]
    node532 [shape=box, label=<<font color="black">[0] let writable = %10<BR ALIGN="LEFT"/>[1] desc.Writable = writable<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node532 -> node533 [color="black"]
    node535_name [shape=none, label=<<font color="black">Branch[535]</font>>]
    node535_name -> node535 [arrowhead=none, color="black", style=dashed]
    node535 [shape=diamond, label=<<font color="black">(= hasGet true)</font>> color="black" fillcolor="white", style=filled]
    node535 -> node536 [label=<<font color="black">true</font>> color="black"]
    node535 -> node542 [label=<<font color="black">false</font>> color="black"]
    node536_name [shape=none, label=<<font color="black">Call[536]</font>>]
    node536_name -> node536 [arrowhead=none, color="black", style=dashed]
    node536 [shape=cds, label=<<font color="black">%12 = clo&lt;Get&gt;(Obj, &quot;get&quot;)</font>> color="black" fillcolor="white", style=filled]
    node536 -> node537 [color="black"]
    node542_name [shape=none, label=<<font color="black">Call[542]</font>>]
    node542_name -> node542 [arrowhead=none, color="black", style=dashed]
    node542 [shape=cds, label=<<font color="black">%14 = clo&lt;HasProperty&gt;(Obj, &quot;set&quot;)</font>> color="black" fillcolor="white", style=filled]
    node542 -> node543 [color="black"]
    node537_name [shape=none, label=<<font color="black">Block[537]</font>>]
    node537_name -> node537 [arrowhead=none, color="black", style=dashed]
    node537 [shape=box, label=<<font color="black">[0] let getter = [? %12]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node537 -> node538 [color="black"]
    node543_name [shape=none, label=<<font color="black">Block[543]</font>>]
    node543_name -> node543 [arrowhead=none, color="black", style=dashed]
    node543 [shape=box, label=<<font color="black">[0] let hasSet = [? %14]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node543 -> node544 [color="black"]
    node538_name [shape=none, label=<<font color="black">Call[538]</font>>]
    node538_name -> node538 [arrowhead=none, color="black", style=dashed]
    node538 [shape=cds, label=<<font color="black">%13 = clo&lt;IsCallable&gt;(getter)</font>> color="black" fillcolor="white", style=filled]
    node538 -> node539 [color="black"]
    node544_name [shape=none, label=<<font color="black">Branch[544]</font>>]
    node544_name -> node544 [arrowhead=none, color="black", style=dashed]
    node544 [shape=diamond, label=<<font color="black">(= hasSet true)</font>> color="black" fillcolor="white", style=filled]
    node544 -> node545 [label=<<font color="black">true</font>> color="black"]
    node544 -> node551 [label=<<font color="black">false</font>> color="black"]
    node539_name [shape=none, label=<<font color="black">Branch[539]</font>>]
    node539_name -> node539 [arrowhead=none, color="black", style=dashed]
    node539 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %13 false) (! (= getter undefined)))</font>> color="black" fillcolor="white", style=filled]
    node539 -> node540 [label=<<font color="black">true</font>> color="black"]
    node539 -> node541 [label=<<font color="black">false</font>> color="black"]
    node545_name [shape=none, label=<<font color="black">Call[545]</font>>]
    node545_name -> node545 [arrowhead=none, color="black", style=dashed]
    node545 [shape=cds, label=<<font color="black">%15 = clo&lt;Get&gt;(Obj, &quot;set&quot;)</font>> color="black" fillcolor="white", style=filled]
    node545 -> node546 [color="black"]
    node551_name [shape=none, label=<<font color="black">Branch[551]</font>>]
    node551_name -> node551 [arrowhead=none, color="black", style=dashed]
    node551 [shape=diamond, label=<<font color="black">(|| (! (= desc.Get absent)) (! (= desc.Set absent)))</font>> color="black" fillcolor="white", style=filled]
    node551 -> node552 [label=<<font color="black">true</font>> color="black"]
    node551 -> node554 [label=<<font color="black">false</font>> color="black"]
    node540_name [shape=none, label=<<font color="black">Block[540]</font>>]
    node540_name -> node540 [arrowhead=none, color="black", style=dashed]
    node540 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#19])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node540 -> cluster71_exit [color="black"]
    node541_name [shape=none, label=<<font color="black">Block[541]</font>>]
    node541_name -> node541 [arrowhead=none, color="black", style=dashed]
    node541 [shape=box, label=<<font color="black">[0] desc.Get = getter<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node541 -> node542 [color="black"]
    node546_name [shape=none, label=<<font color="black">Block[546]</font>>]
    node546_name -> node546 [arrowhead=none, color="black", style=dashed]
    node546 [shape=box, label=<<font color="black">[0] let setter = [? %15]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node546 -> node547 [color="black"]
    node552_name [shape=none, label=<<font color="black">Branch[552]</font>>]
    node552_name -> node552 [arrowhead=none, color="black", style=dashed]
    node552 [shape=diamond, label=<<font color="black">(|| (! (= desc.Value absent)) (! (= desc.Writable absent)))</font>> color="black" fillcolor="white", style=filled]
    node552 -> node553 [label=<<font color="black">true</font>> color="black"]
    node552 -> node554 [label=<<font color="black">false</font>> color="black"]
    node554_name [shape=none, label=<<font color="black">Block[554]</font>>]
    node554_name -> node554 [arrowhead=none, color="black", style=dashed]
    node554 [shape=box, label=<<font color="black">[0] return desc<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node554 -> cluster71_exit [color="black"]
    node547_name [shape=none, label=<<font color="black">Call[547]</font>>]
    node547_name -> node547 [arrowhead=none, color="black", style=dashed]
    node547 [shape=cds, label=<<font color="black">%16 = clo&lt;IsCallable&gt;(setter)</font>> color="black" fillcolor="white", style=filled]
    node547 -> node548 [color="black"]
    node553_name [shape=none, label=<<font color="black">Block[553]</font>>]
    node553_name -> node553 [arrowhead=none, color="black", style=dashed]
    node553 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#21])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node553 -> cluster71_exit [color="black"]
    node548_name [shape=none, label=<<font color="black">Branch[548]</font>>]
    node548_name -> node548 [arrowhead=none, color="black", style=dashed]
    node548 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %16 false) (! (= setter undefined)))</font>> color="black" fillcolor="white", style=filled]
    node548 -> node549 [label=<<font color="black">true</font>> color="black"]
    node548 -> node550 [label=<<font color="black">false</font>> color="black"]
    node549_name [shape=none, label=<<font color="black">Block[549]</font>>]
    node549_name -> node549 [arrowhead=none, color="black", style=dashed]
    node549 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#20])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node549 -> cluster71_exit [color="black"]
    node550_name [shape=none, label=<<font color="black">Block[550]</font>>]
    node550_name -> node550 [arrowhead=none, color="black", style=dashed]
    node550 [shape=box, label=<<font color="black">[0] desc.Set = setter<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node550 -> node551 [color="black"]
  }
}