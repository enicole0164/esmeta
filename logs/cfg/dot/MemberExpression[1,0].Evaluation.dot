digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1258 {
    label = "def <SYNTAX>:MemberExpression[1,0].Evaluation(this: Ast:MemberExpression[1,0]): Unknown"
    style = rounded
    cluster1258_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1258_entry_name -> cluster1258_entry [arrowhead=none, color="black", style=dashed]
    cluster1258_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1258_entry -> node5780 [color="black"]
    cluster1258_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1258_exit_name -> cluster1258_exit [arrowhead=none, color="black", style=dashed]
    cluster1258_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5780_name [shape=none, label=<<font color="black">Call[5780]</font>>]
    node5780_name -> node5780 [arrowhead=none, color="black", style=dashed]
    node5780 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5780 -> node5781 [color="black"]
    node5781_name [shape=none, label=<<font color="black">Block[5781]</font>>]
    node5781_name -> node5781 [arrowhead=none, color="black", style=dashed]
    node5781 [shape=box, label=<<font color="black">[0] let baseReference = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5781 -> node5782 [color="black"]
    node5782_name [shape=none, label=<<font color="black">Call[5782]</font>>]
    node5782_name -> node5782 [arrowhead=none, color="black", style=dashed]
    node5782 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(baseReference)</font>> color="black" fillcolor="white", style=filled]
    node5782 -> node5783 [color="black"]
    node5783_name [shape=none, label=<<font color="black">Block[5783]</font>>]
    node5783_name -> node5783 [arrowhead=none, color="black", style=dashed]
    node5783 [shape=box, label=<<font color="black">[0] let baseValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5783 -> node5784 [color="black"]
    node5784_name [shape=none, label=<<font color="black">Branch[5784]</font>>]
    node5784_name -> node5784 [arrowhead=none, color="black", style=dashed]
    node5784 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node5784 -> node5785 [label=<<font color="black">true</font>> color="black"]
    node5784 -> node5786 [label=<<font color="black">false</font>> color="black"]
    node5785_name [shape=none, label=<<font color="black">Block[5785]</font>>]
    node5785_name -> node5785 [arrowhead=none, color="black", style=dashed]
    node5785 [shape=box, label=<<font color="black">[0] let strict = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5785 -> node5787 [color="black"]
    node5786_name [shape=none, label=<<font color="black">Block[5786]</font>>]
    node5786_name -> node5786 [arrowhead=none, color="black", style=dashed]
    node5786 [shape=box, label=<<font color="black">[0] let strict = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5786 -> node5787 [color="black"]
    node5787_name [shape=none, label=<<font color="black">Call[5787]</font>>]
    node5787_name -> node5787 [arrowhead=none, color="black", style=dashed]
    node5787 [shape=cds, label=<<font color="black">%2 = clo&lt;EvaluatePropertyAccessWithExpressionKey&gt;(baseValue, this[1], strict)</font>> color="black" fillcolor="white", style=filled]
    node5787 -> node5788 [color="black"]
    node5788_name [shape=none, label=<<font color="black">Block[5788]</font>>]
    node5788_name -> node5788 [arrowhead=none, color="black", style=dashed]
    node5788 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5788 -> cluster1258_exit [color="black"]
  }
}