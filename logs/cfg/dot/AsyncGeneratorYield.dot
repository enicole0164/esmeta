digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2635 {
    label = "def AsyncGeneratorYield(value: Unknown): Normal[ESValue] | Abrupt"
    style = rounded
    cluster2635_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2635_entry_name -> cluster2635_entry [arrowhead=none, color="black", style=dashed]
    cluster2635_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2635_entry -> node19540 [color="black"]
    cluster2635_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2635_exit_name -> cluster2635_exit [arrowhead=none, color="black", style=dashed]
    cluster2635_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19540_name [shape=none, label=<<font color="black">Block[19540]</font>>]
    node19540_name -> node19540 [arrowhead=none, color="black", style=dashed]
    node19540 [shape=box, label=<<font color="black">[0] let genContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/>[1] assert (? genContext: &quot;ExecutionContext&quot;)<BR ALIGN="LEFT"/>[2] let generator = genContext.Generator<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19540 -> node19541 [color="black"]
    node19541_name [shape=none, label=<<font color="black">Call[19541]</font>>]
    node19541_name -> node19541 [arrowhead=none, color="black", style=dashed]
    node19541 [shape=cds, label=<<font color="black">%0 = clo&lt;GetGeneratorKind&gt;()</font>> color="black" fillcolor="white", style=filled]
    node19541 -> node19542 [color="black"]
    node19542_name [shape=none, label=<<font color="black">Block[19542]</font>>]
    node19542_name -> node19542 [arrowhead=none, color="black", style=dashed]
    node19542 [shape=box, label=<<font color="black">[0] assert (= %0 ~async~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19542 -> node19543 [color="black"]
    node19543_name [shape=none, label=<<font color="black">Call[19543]</font>>]
    node19543_name -> node19543 [arrowhead=none, color="black", style=dashed]
    node19543 [shape=cds, label=<<font color="black">%1 = clo&lt;Await&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node19543 -> node19544 [color="black"]
    node19544_name [shape=none, label=<<font color="black">Block[19544]</font>>]
    node19544_name -> node19544 [arrowhead=none, color="black", style=dashed]
    node19544 [shape=box, label=<<font color="black">[0] value = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19544 -> node19545 [color="black"]
    node19545_name [shape=none, label=<<font color="black">Call[19545]</font>>]
    node19545_name -> node19545 [arrowhead=none, color="black", style=dashed]
    node19545 [shape=cds, label=<<font color="black">%2 = clo&lt;NormalCompletion&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node19545 -> node19546 [color="black"]
    node19546_name [shape=none, label=<<font color="black">Block[19546]</font>>]
    node19546_name -> node19546 [arrowhead=none, color="black", style=dashed]
    node19546 [shape=box, label=<<font color="black">[0] let completion = %2<BR ALIGN="LEFT"/>[1] assert (&lt; 1 @EXECUTION_STACK.length)<BR ALIGN="LEFT"/>[2] let previousContext = @EXECUTION_STACK[1]<BR ALIGN="LEFT"/>[3] let previousRealm = previousContext.Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19546 -> node19547 [color="black"]
    node19547_name [shape=none, label=<<font color="black">Call[19547]</font>>]
    node19547_name -> node19547 [arrowhead=none, color="black", style=dashed]
    node19547 [shape=cds, label=<<font color="black">%3 = clo&lt;AsyncGeneratorCompleteStep&gt;(generator, completion, false, previousRealm)</font>> color="black" fillcolor="white", style=filled]
    node19547 -> node19548 [color="black"]
    node19548_name [shape=none, label=<<font color="black">Block[19548]</font>>]
    node19548_name -> node19548 [arrowhead=none, color="black", style=dashed]
    node19548 [shape=box, label=<<font color="black">[0] let queue = generator.AsyncGeneratorQueue<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19548 -> node19549 [color="black"]
    node19549_name [shape=none, label=<<font color="black">Branch[19549]</font>>]
    node19549_name -> node19549 [arrowhead=none, color="black", style=dashed]
    node19549 [shape=diamond, label=<<font color="black">(! (= queue.length 0))</font>> color="black" fillcolor="white", style=filled]
    node19549 -> node19550 [label=<<font color="black">true</font>> color="black"]
    node19549 -> node19555 [label=<<font color="black">false</font>> color="black"]
    node19550_name [shape=none, label=<<font color="black">Block[19550]</font>>]
    node19550_name -> node19550 [arrowhead=none, color="black", style=dashed]
    node19550 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] let toYield = queue[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19550 -> node19551 [color="black"]
    node19555_name [shape=none, label=<<font color="black">Block[19555]</font>>]
    node19555_name -> node19555 [arrowhead=none, color="black", style=dashed]
    node19555 [shape=box, label=<<font color="black">[0] generator.AsyncGeneratorState = ~suspendedYield~<BR ALIGN="LEFT"/>[1] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/>[2] genContext.ResumeCont = cont&lt;AsyncGeneratorYield:cont0&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19555 -> node19556 [color="black"]
    node19551_name [shape=none, label=<<font color="black">Call[19551]</font>>]
    node19551_name -> node19551 [arrowhead=none, color="black", style=dashed]
    node19551 [shape=cds, label=<<font color="black">%4 = clo&lt;Completion&gt;(toYield.Completion)</font>> color="black" fillcolor="white", style=filled]
    node19551 -> node19552 [color="black"]
    node19556_name [shape=none, label=<<font color="black">Call[19556]</font>>]
    node19556_name -> node19556 [arrowhead=none, color="black", style=dashed]
    node19556 [shape=cds, label=<<font color="black">%6 = (pop &lt; genContext.ReturnCont)(undefined)</font>> color="black" fillcolor="white", style=filled]
    node19556 -> cluster2635_exit [color="black"]
    node19552_name [shape=none, label=<<font color="black">Block[19552]</font>>]
    node19552_name -> node19552 [arrowhead=none, color="black", style=dashed]
    node19552 [shape=box, label=<<font color="black">[0] let resumptionValue = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19552 -> node19553 [color="black"]
    node19553_name [shape=none, label=<<font color="black">Call[19553]</font>>]
    node19553_name -> node19553 [arrowhead=none, color="black", style=dashed]
    node19553 [shape=cds, label=<<font color="black">%5 = clo&lt;AsyncGeneratorUnwrapYieldResumption&gt;(resumptionValue)</font>> color="black" fillcolor="white", style=filled]
    node19553 -> node19554 [color="black"]
    node19554_name [shape=none, label=<<font color="black">Block[19554]</font>>]
    node19554_name -> node19554 [arrowhead=none, color="black", style=dashed]
    node19554 [shape=box, label=<<font color="black">[0] return [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19554 -> cluster2635_exit [color="black"]
  }
}