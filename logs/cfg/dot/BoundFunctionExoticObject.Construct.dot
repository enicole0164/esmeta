digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1103 {
    label = "def <INTERNAL>:BoundFunctionExoticObject.Construct(F: BoundFunctionExoticObject, argumentsList: List[ESValue], newTarget: Unknown["Constructor"]): Normal[Object] | Abrupt"
    style = rounded
    cluster1103_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1103_entry_name -> cluster1103_entry [arrowhead=none, color="black", style=dashed]
    cluster1103_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1103_entry -> node4527 [color="black"]
    cluster1103_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1103_exit_name -> cluster1103_exit [arrowhead=none, color="black", style=dashed]
    cluster1103_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4527_name [shape=none, label=<<font color="black">Block[4527]</font>>]
    node4527_name -> node4527 [arrowhead=none, color="black", style=dashed]
    node4527 [shape=box, label=<<font color="black">[0] let target = F.BoundTargetFunction<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4527 -> node4528 [color="black"]
    node4528_name [shape=none, label=<<font color="black">Call[4528]</font>>]
    node4528_name -> node4528 [arrowhead=none, color="black", style=dashed]
    node4528 [shape=cds, label=<<font color="black">%0 = clo&lt;IsConstructor&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node4528 -> node4529 [color="black"]
    node4529_name [shape=none, label=<<font color="black">Block[4529]</font>>]
    node4529_name -> node4529 [arrowhead=none, color="black", style=dashed]
    node4529 [shape=box, label=<<font color="black">[0] assert (= %0 true)<BR ALIGN="LEFT"/>[1] let boundArgs = F.BoundArguments<BR ALIGN="LEFT"/>[2] let args = (list-concat boundArgs argumentsList)[#444]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4529 -> node4530 [color="black"]
    node4530_name [shape=none, label=<<font color="black">Call[4530]</font>>]
    node4530_name -> node4530 [arrowhead=none, color="black", style=dashed]
    node4530 [shape=cds, label=<<font color="black">%1 = clo&lt;SameValue&gt;(F, newTarget)</font>> color="black" fillcolor="white", style=filled]
    node4530 -> node4531 [color="black"]
    node4531_name [shape=none, label=<<font color="black">Branch[4531]</font>>]
    node4531_name -> node4531 [arrowhead=none, color="black", style=dashed]
    node4531 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node4531 -> node4532 [label=<<font color="black">true</font>> color="black"]
    node4531 -> node4533 [label=<<font color="black">false</font>> color="black"]
    node4532_name [shape=none, label=<<font color="black">Block[4532]</font>>]
    node4532_name -> node4532 [arrowhead=none, color="black", style=dashed]
    node4532 [shape=box, label=<<font color="black">[0] newTarget = target<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4532 -> node4533 [color="black"]
    node4533_name [shape=none, label=<<font color="black">Call[4533]</font>>]
    node4533_name -> node4533 [arrowhead=none, color="black", style=dashed]
    node4533 [shape=cds, label=<<font color="black">%2 = clo&lt;Construct&gt;(target, args, newTarget)</font>> color="black" fillcolor="white", style=filled]
    node4533 -> node4534 [color="black"]
    node4534_name [shape=none, label=<<font color="black">Block[4534]</font>>]
    node4534_name -> node4534 [arrowhead=none, color="black", style=dashed]
    node4534 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4534 -> cluster1103_exit [color="black"]
  }
}