digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2186 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.replace(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2186_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2186_entry_name -> cluster2186_entry [arrowhead=none, color="black", style=dashed]
    cluster2186_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2186_entry -> node13560 [color="black"]
    cluster2186_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2186_exit_name -> cluster2186_exit [arrowhead=none, color="black", style=dashed]
    cluster2186_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13560_name [shape=none, label=<<font color="black">Branch[13560]</font>>]
    node13560_name -> node13560 [arrowhead=none, color="black", style=dashed]
    node13560 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13560 -> node13561 [label=<<font color="black">true</font>> color="black"]
    node13560 -> node13562 [label=<<font color="black">false</font>> color="black"]
    node13561_name [shape=none, label=<<font color="black">Block[13561]</font>>]
    node13561_name -> node13561 [arrowhead=none, color="black", style=dashed]
    node13561 [shape=box, label=<<font color="black">[0] let searchValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13561 -> node13563 [color="black"]
    node13562_name [shape=none, label=<<font color="black">Block[13562]</font>>]
    node13562_name -> node13562 [arrowhead=none, color="black", style=dashed]
    node13562 [shape=box, label=<<font color="black">[0] let searchValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13562 -> node13563 [color="black"]
    node13563_name [shape=none, label=<<font color="black">Branch[13563]</font>>]
    node13563_name -> node13563 [arrowhead=none, color="black", style=dashed]
    node13563 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13563 -> node13564 [label=<<font color="black">true</font>> color="black"]
    node13563 -> node13565 [label=<<font color="black">false</font>> color="black"]
    node13564_name [shape=none, label=<<font color="black">Block[13564]</font>>]
    node13564_name -> node13564 [arrowhead=none, color="black", style=dashed]
    node13564 [shape=box, label=<<font color="black">[0] let replaceValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13564 -> node13566 [color="black"]
    node13565_name [shape=none, label=<<font color="black">Block[13565]</font>>]
    node13565_name -> node13565 [arrowhead=none, color="black", style=dashed]
    node13565 [shape=box, label=<<font color="black">[0] let replaceValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13565 -> node13566 [color="black"]
    node13566_name [shape=none, label=<<font color="black">Call[13566]</font>>]
    node13566_name -> node13566 [arrowhead=none, color="black", style=dashed]
    node13566 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13566 -> node13567 [color="black"]
    node13567_name [shape=none, label=<<font color="black">Block[13567]</font>>]
    node13567_name -> node13567 [arrowhead=none, color="black", style=dashed]
    node13567 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13567 -> node13568 [color="black"]
    node13568_name [shape=none, label=<<font color="black">Branch[13568]</font>>]
    node13568_name -> node13568 [arrowhead=none, color="black", style=dashed]
    node13568 [shape=diamond, label=<<font color="black">(! (|| (= searchValue undefined) (= searchValue null)))</font>> color="black" fillcolor="white", style=filled]
    node13568 -> node13569 [label=<<font color="black">true</font>> color="black"]
    node13568 -> node13574 [label=<<font color="black">false</font>> color="black"]
    node13569_name [shape=none, label=<<font color="black">Call[13569]</font>>]
    node13569_name -> node13569 [arrowhead=none, color="black", style=dashed]
    node13569 [shape=cds, label=<<font color="black">%1 = clo&lt;GetMethod&gt;(searchValue, @SYMBOL.replace)</font>> color="black" fillcolor="white", style=filled]
    node13569 -> node13570 [color="black"]
    node13574_name [shape=none, label=<<font color="black">Call[13574]</font>>]
    node13574_name -> node13574 [arrowhead=none, color="black", style=dashed]
    node13574 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13574 -> node13575 [color="black"]
    node13570_name [shape=none, label=<<font color="black">Block[13570]</font>>]
    node13570_name -> node13570 [arrowhead=none, color="black", style=dashed]
    node13570 [shape=box, label=<<font color="black">[0] let replacer = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13570 -> node13571 [color="black"]
    node13575_name [shape=none, label=<<font color="black">Block[13575]</font>>]
    node13575_name -> node13575 [arrowhead=none, color="black", style=dashed]
    node13575 [shape=box, label=<<font color="black">[0] let string = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13575 -> node13576 [color="black"]
    node13571_name [shape=none, label=<<font color="black">Branch[13571]</font>>]
    node13571_name -> node13571 [arrowhead=none, color="black", style=dashed]
    node13571 [shape=diamond, label=<<font color="black">(! (= replacer undefined))</font>> color="black" fillcolor="white", style=filled]
    node13571 -> node13572 [label=<<font color="black">true</font>> color="black"]
    node13571 -> node13574 [label=<<font color="black">false</font>> color="black"]
    node13576_name [shape=none, label=<<font color="black">Call[13576]</font>>]
    node13576_name -> node13576 [arrowhead=none, color="black", style=dashed]
    node13576 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(searchValue)</font>> color="black" fillcolor="white", style=filled]
    node13576 -> node13577 [color="black"]
    node13572_name [shape=none, label=<<font color="black">Call[13572]</font>>]
    node13572_name -> node13572 [arrowhead=none, color="black", style=dashed]
    node13572 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(replacer, searchValue, (new [O, replaceValue])[#956])</font>> color="black" fillcolor="white", style=filled]
    node13572 -> node13573 [color="black"]
    node13577_name [shape=none, label=<<font color="black">Block[13577]</font>>]
    node13577_name -> node13577 [arrowhead=none, color="black", style=dashed]
    node13577 [shape=box, label=<<font color="black">[0] let searchString = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13577 -> node13578 [color="black"]
    node13573_name [shape=none, label=<<font color="black">Block[13573]</font>>]
    node13573_name -> node13573 [arrowhead=none, color="black", style=dashed]
    node13573 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13573 -> cluster2186_exit [color="black"]
    node13578_name [shape=none, label=<<font color="black">Call[13578]</font>>]
    node13578_name -> node13578 [arrowhead=none, color="black", style=dashed]
    node13578 [shape=cds, label=<<font color="black">%5 = clo&lt;IsCallable&gt;(replaceValue)</font>> color="black" fillcolor="white", style=filled]
    node13578 -> node13579 [color="black"]
    node13579_name [shape=none, label=<<font color="black">Block[13579]</font>>]
    node13579_name -> node13579 [arrowhead=none, color="black", style=dashed]
    node13579 [shape=box, label=<<font color="black">[0] let functionalReplace = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13579 -> node13580 [color="black"]
    node13580_name [shape=none, label=<<font color="black">Branch[13580]</font>>]
    node13580_name -> node13580 [arrowhead=none, color="black", style=dashed]
    node13580 [shape=diamond, label=<<font color="black">(= functionalReplace false)</font>> color="black" fillcolor="white", style=filled]
    node13580 -> node13581 [label=<<font color="black">true</font>> color="black"]
    node13580 -> node13583 [label=<<font color="black">false</font>> color="black"]
    node13581_name [shape=none, label=<<font color="black">Call[13581]</font>>]
    node13581_name -> node13581 [arrowhead=none, color="black", style=dashed]
    node13581 [shape=cds, label=<<font color="black">%6 = clo&lt;ToString&gt;(replaceValue)</font>> color="black" fillcolor="white", style=filled]
    node13581 -> node13582 [color="black"]
    node13583_name [shape=none, label=<<font color="black">Block[13583]</font>>]
    node13583_name -> node13583 [arrowhead=none, color="black", style=dashed]
    node13583 [shape=box, label=<<font color="black">[0] let searchLength = searchString.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13583 -> node13584 [color="black"]
    node13582_name [shape=none, label=<<font color="black">Block[13582]</font>>]
    node13582_name -> node13582 [arrowhead=none, color="black", style=dashed]
    node13582 [shape=box, label=<<font color="black">[0] replaceValue = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13582 -> node13583 [color="black"]
    node13584_name [shape=none, label=<<font color="black">Call[13584]</font>>]
    node13584_name -> node13584 [arrowhead=none, color="black", style=dashed]
    node13584 [shape=cds, label=<<font color="black">%7 = clo&lt;StringIndexOf&gt;(string, searchString, 0)</font>> color="black" fillcolor="white", style=filled]
    node13584 -> node13585 [color="black"]
    node13585_name [shape=none, label=<<font color="black">Block[13585]</font>>]
    node13585_name -> node13585 [arrowhead=none, color="black", style=dashed]
    node13585 [shape=box, label=<<font color="black">[0] let position = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13585 -> node13586 [color="black"]
    node13586_name [shape=none, label=<<font color="black">Branch[13586]</font>>]
    node13586_name -> node13586 [arrowhead=none, color="black", style=dashed]
    node13586 [shape=diamond, label=<<font color="black">(= position (- 1))</font>> color="black" fillcolor="white", style=filled]
    node13586 -> node13587 [label=<<font color="black">true</font>> color="black"]
    node13586 -> node13588 [label=<<font color="black">false</font>> color="black"]
    node13587_name [shape=none, label=<<font color="black">Block[13587]</font>>]
    node13587_name -> node13587 [arrowhead=none, color="black", style=dashed]
    node13587 [shape=box, label=<<font color="black">[0] return string<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13587 -> cluster2186_exit [color="black"]
    node13588_name [shape=none, label=<<font color="black">Block[13588]</font>>]
    node13588_name -> node13588 [arrowhead=none, color="black", style=dashed]
    node13588 [shape=box, label=<<font color="black">[0] let preceding = (substring string 0 position)<BR ALIGN="LEFT"/>[1] let following = (substring string (+ position searchLength))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13588 -> node13589 [color="black"]
    node13589_name [shape=none, label=<<font color="black">Branch[13589]</font>>]
    node13589_name -> node13589 [arrowhead=none, color="black", style=dashed]
    node13589 [shape=diamond, label=<<font color="black">(= functionalReplace true)</font>> color="black" fillcolor="white", style=filled]
    node13589 -> node13590 [label=<<font color="black">true</font>> color="black"]
    node13589 -> node13593 [label=<<font color="black">false</font>> color="black"]
    node13590_name [shape=none, label=<<font color="black">Call[13590]</font>>]
    node13590_name -> node13590 [arrowhead=none, color="black", style=dashed]
    node13590 [shape=cds, label=<<font color="black">%8 = clo&lt;Call&gt;(replaceValue, undefined, (new [searchString, ([number] position), string])[#957])</font>> color="black" fillcolor="white", style=filled]
    node13590 -> node13591 [color="black"]
    node13593_name [shape=none, label=<<font color="black">Block[13593]</font>>]
    node13593_name -> node13593 [arrowhead=none, color="black", style=dashed]
    node13593 [shape=box, label=<<font color="black">[0] assert (= (typeof replaceValue) @String)<BR ALIGN="LEFT"/>[1] let captures = (new [])[#958]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13593 -> node13594 [color="black"]
    node13591_name [shape=none, label=<<font color="black">Call[13591]</font>>]
    node13591_name -> node13591 [arrowhead=none, color="black", style=dashed]
    node13591 [shape=cds, label=<<font color="black">%9 = clo&lt;ToString&gt;([? %8])</font>> color="black" fillcolor="white", style=filled]
    node13591 -> node13592 [color="black"]
    node13594_name [shape=none, label=<<font color="black">Call[13594]</font>>]
    node13594_name -> node13594 [arrowhead=none, color="black", style=dashed]
    node13594 [shape=cds, label=<<font color="black">%10 = clo&lt;GetSubstitution&gt;(searchString, string, position, captures, undefined, replaceValue)</font>> color="black" fillcolor="white", style=filled]
    node13594 -> node13595 [color="black"]
    node13592_name [shape=none, label=<<font color="black">Block[13592]</font>>]
    node13592_name -> node13592 [arrowhead=none, color="black", style=dashed]
    node13592 [shape=box, label=<<font color="black">[0] let replacement = [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13592 -> node13596 [color="black"]
    node13595_name [shape=none, label=<<font color="black">Block[13595]</font>>]
    node13595_name -> node13595 [arrowhead=none, color="black", style=dashed]
    node13595 [shape=box, label=<<font color="black">[0] let replacement = [! %10]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13595 -> node13596 [color="black"]
    node13596_name [shape=none, label=<<font color="black">Block[13596]</font>>]
    node13596_name -> node13596 [arrowhead=none, color="black", style=dashed]
    node13596 [shape=box, label=<<font color="black">[0] return (concat preceding replacement following)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13596 -> cluster2186_exit [color="black"]
  }
}