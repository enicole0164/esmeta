digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1286 {
    label = "def <SYNTAX>:OptionalExpression[1,0].Evaluation(this: Ast:OptionalExpression[1,0]): Unknown"
    style = rounded
    cluster1286_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1286_entry_name -> cluster1286_entry [arrowhead=none, color="black", style=dashed]
    cluster1286_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1286_entry -> node6028 [color="black"]
    cluster1286_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1286_exit_name -> cluster1286_exit [arrowhead=none, color="black", style=dashed]
    cluster1286_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6028_name [shape=none, label=<<font color="black">Call[6028]</font>>]
    node6028_name -> node6028 [arrowhead=none, color="black", style=dashed]
    node6028 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6028 -> node6029 [color="black"]
    node6029_name [shape=none, label=<<font color="black">Block[6029]</font>>]
    node6029_name -> node6029 [arrowhead=none, color="black", style=dashed]
    node6029 [shape=box, label=<<font color="black">[0] let baseReference = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6029 -> node6030 [color="black"]
    node6030_name [shape=none, label=<<font color="black">Call[6030]</font>>]
    node6030_name -> node6030 [arrowhead=none, color="black", style=dashed]
    node6030 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(baseReference)</font>> color="black" fillcolor="white", style=filled]
    node6030 -> node6031 [color="black"]
    node6031_name [shape=none, label=<<font color="black">Block[6031]</font>>]
    node6031_name -> node6031 [arrowhead=none, color="black", style=dashed]
    node6031 [shape=box, label=<<font color="black">[0] let baseValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6031 -> node6032 [color="black"]
    node6032_name [shape=none, label=<<font color="black">Branch[6032]</font>>]
    node6032_name -> node6032 [arrowhead=none, color="black", style=dashed]
    node6032 [shape=diamond, label=<<font color="black">(|| (= baseValue undefined) (= baseValue null))</font>> color="black" fillcolor="white", style=filled]
    node6032 -> node6033 [label=<<font color="black">true</font>> color="black"]
    node6032 -> node6034 [label=<<font color="black">false</font>> color="black"]
    node6033_name [shape=none, label=<<font color="black">Block[6033]</font>>]
    node6033_name -> node6033 [arrowhead=none, color="black", style=dashed]
    node6033 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6033 -> cluster1286_exit [color="black"]
    node6034_name [shape=none, label=<<font color="black">Call[6034]</font>>]
    node6034_name -> node6034 [arrowhead=none, color="black", style=dashed]
    node6034 [shape=cds, label=<<font color="black">%2 = this[1]-&gt;ChainEvaluation(baseValue, baseReference)</font>> color="black" fillcolor="white", style=filled]
    node6034 -> node6035 [color="black"]
    node6035_name [shape=none, label=<<font color="black">Block[6035]</font>>]
    node6035_name -> node6035 [arrowhead=none, color="black", style=dashed]
    node6035 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6035 -> cluster1286_exit [color="black"]
  }
}