digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1152 {
    label = "def <INTERNAL>:ProxyExoticObject.IsExtensible(O: ProxyExoticObject): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1152_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1152_entry_name -> cluster1152_entry [arrowhead=none, color="black", style=dashed]
    cluster1152_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1152_entry -> node5050 [color="black"]
    cluster1152_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1152_exit_name -> cluster1152_exit [arrowhead=none, color="black", style=dashed]
    cluster1152_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5050_name [shape=none, label=<<font color="black">Block[5050]</font>>]
    node5050_name -> node5050 [arrowhead=none, color="black", style=dashed]
    node5050 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5050 -> node5051 [color="black"]
    node5051_name [shape=none, label=<<font color="black">Branch[5051]</font>>]
    node5051_name -> node5051 [arrowhead=none, color="black", style=dashed]
    node5051 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5051 -> node5052 [label=<<font color="black">true</font>> color="black"]
    node5051 -> node5053 [label=<<font color="black">false</font>> color="black"]
    node5052_name [shape=none, label=<<font color="black">Block[5052]</font>>]
    node5052_name -> node5052 [arrowhead=none, color="black", style=dashed]
    node5052 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#487])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5052 -> cluster1152_exit [color="black"]
    node5053_name [shape=none, label=<<font color="black">Block[5053]</font>>]
    node5053_name -> node5053 [arrowhead=none, color="black", style=dashed]
    node5053 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5053 -> node5054 [color="black"]
    node5054_name [shape=none, label=<<font color="black">Call[5054]</font>>]
    node5054_name -> node5054 [arrowhead=none, color="black", style=dashed]
    node5054 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;isExtensible&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5054 -> node5055 [color="black"]
    node5055_name [shape=none, label=<<font color="black">Block[5055]</font>>]
    node5055_name -> node5055 [arrowhead=none, color="black", style=dashed]
    node5055 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5055 -> node5056 [color="black"]
    node5056_name [shape=none, label=<<font color="black">Branch[5056]</font>>]
    node5056_name -> node5056 [arrowhead=none, color="black", style=dashed]
    node5056 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5056 -> node5057 [label=<<font color="black">true</font>> color="black"]
    node5056 -> node5059 [label=<<font color="black">false</font>> color="black"]
    node5057_name [shape=none, label=<<font color="black">Call[5057]</font>>]
    node5057_name -> node5057 [arrowhead=none, color="black", style=dashed]
    node5057 [shape=cds, label=<<font color="black">%1 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5057 -> node5058 [color="black"]
    node5059_name [shape=none, label=<<font color="black">Call[5059]</font>>]
    node5059_name -> node5059 [arrowhead=none, color="black", style=dashed]
    node5059 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target])[#488])</font>> color="black" fillcolor="white", style=filled]
    node5059 -> node5060 [color="black"]
    node5058_name [shape=none, label=<<font color="black">Block[5058]</font>>]
    node5058_name -> node5058 [arrowhead=none, color="black", style=dashed]
    node5058 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5058 -> cluster1152_exit [color="black"]
    node5060_name [shape=none, label=<<font color="black">Call[5060]</font>>]
    node5060_name -> node5060 [arrowhead=none, color="black", style=dashed]
    node5060 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBoolean&gt;([? %2])</font>> color="black" fillcolor="white", style=filled]
    node5060 -> node5061 [color="black"]
    node5061_name [shape=none, label=<<font color="black">Block[5061]</font>>]
    node5061_name -> node5061 [arrowhead=none, color="black", style=dashed]
    node5061 [shape=box, label=<<font color="black">[0] let booleanTrapResult = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5061 -> node5062 [color="black"]
    node5062_name [shape=none, label=<<font color="black">Call[5062]</font>>]
    node5062_name -> node5062 [arrowhead=none, color="black", style=dashed]
    node5062 [shape=cds, label=<<font color="black">%4 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5062 -> node5063 [color="black"]
    node5063_name [shape=none, label=<<font color="black">Block[5063]</font>>]
    node5063_name -> node5063 [arrowhead=none, color="black", style=dashed]
    node5063 [shape=box, label=<<font color="black">[0] let targetResult = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5063 -> node5064 [color="black"]
    node5064_name [shape=none, label=<<font color="black">Call[5064]</font>>]
    node5064_name -> node5064 [arrowhead=none, color="black", style=dashed]
    node5064 [shape=cds, label=<<font color="black">%5 = clo&lt;SameValue&gt;(booleanTrapResult, targetResult)</font>> color="black" fillcolor="white", style=filled]
    node5064 -> node5065 [color="black"]
    node5065_name [shape=none, label=<<font color="black">Branch[5065]</font>>]
    node5065_name -> node5065 [arrowhead=none, color="black", style=dashed]
    node5065 [shape=diamond, label=<<font color="black">(= %5 false)</font>> color="black" fillcolor="white", style=filled]
    node5065 -> node5066 [label=<<font color="black">true</font>> color="black"]
    node5065 -> node5067 [label=<<font color="black">false</font>> color="black"]
    node5066_name [shape=none, label=<<font color="black">Block[5066]</font>>]
    node5066_name -> node5066 [arrowhead=none, color="black", style=dashed]
    node5066 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#489])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5066 -> cluster1152_exit [color="black"]
    node5067_name [shape=none, label=<<font color="black">Block[5067]</font>>]
    node5067_name -> node5067 [arrowhead=none, color="black", style=dashed]
    node5067 [shape=box, label=<<font color="black">[0] return booleanTrapResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5067 -> cluster1152_exit [color="black"]
  }
}