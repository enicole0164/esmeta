digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2647 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.construct(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2647_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2647_entry_name -> cluster2647_entry [arrowhead=none, color="black", style=dashed]
    cluster2647_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2647_entry -> node19652 [color="black"]
    cluster2647_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2647_exit_name -> cluster2647_exit [arrowhead=none, color="black", style=dashed]
    cluster2647_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19652_name [shape=none, label=<<font color="black">Branch[19652]</font>>]
    node19652_name -> node19652 [arrowhead=none, color="black", style=dashed]
    node19652 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19652 -> node19653 [label=<<font color="black">true</font>> color="black"]
    node19652 -> node19654 [label=<<font color="black">false</font>> color="black"]
    node19653_name [shape=none, label=<<font color="black">Block[19653]</font>>]
    node19653_name -> node19653 [arrowhead=none, color="black", style=dashed]
    node19653 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19653 -> node19655 [color="black"]
    node19654_name [shape=none, label=<<font color="black">Block[19654]</font>>]
    node19654_name -> node19654 [arrowhead=none, color="black", style=dashed]
    node19654 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19654 -> node19655 [color="black"]
    node19655_name [shape=none, label=<<font color="black">Branch[19655]</font>>]
    node19655_name -> node19655 [arrowhead=none, color="black", style=dashed]
    node19655 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19655 -> node19656 [label=<<font color="black">true</font>> color="black"]
    node19655 -> node19657 [label=<<font color="black">false</font>> color="black"]
    node19656_name [shape=none, label=<<font color="black">Block[19656]</font>>]
    node19656_name -> node19656 [arrowhead=none, color="black", style=dashed]
    node19656 [shape=box, label=<<font color="black">[0] let argumentsList = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19656 -> node19658 [color="black"]
    node19657_name [shape=none, label=<<font color="black">Block[19657]</font>>]
    node19657_name -> node19657 [arrowhead=none, color="black", style=dashed]
    node19657 [shape=box, label=<<font color="black">[0] let argumentsList = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19657 -> node19658 [color="black"]
    node19658_name [shape=none, label=<<font color="black">Branch[19658]</font>>]
    node19658_name -> node19658 [arrowhead=none, color="black", style=dashed]
    node19658 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19658 -> node19659 [label=<<font color="black">true</font>> color="black"]
    node19658 -> node19660 [label=<<font color="black">false</font>> color="black"]
    node19659_name [shape=none, label=<<font color="black">Block[19659]</font>>]
    node19659_name -> node19659 [arrowhead=none, color="black", style=dashed]
    node19659 [shape=box, label=<<font color="black">[0] let newTarget = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19659 -> node19661 [color="black"]
    node19660_name [shape=none, label=<<font color="black">Block[19660]</font>>]
    node19660_name -> node19660 [arrowhead=none, color="black", style=dashed]
    node19660 [shape=box, label=<<font color="black">[0] let newTarget = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19660 -> node19661 [color="black"]
    node19661_name [shape=none, label=<<font color="black">Call[19661]</font>>]
    node19661_name -> node19661 [arrowhead=none, color="black", style=dashed]
    node19661 [shape=cds, label=<<font color="black">%0 = clo&lt;IsConstructor&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node19661 -> node19662 [color="black"]
    node19662_name [shape=none, label=<<font color="black">Branch[19662]</font>>]
    node19662_name -> node19662 [arrowhead=none, color="black", style=dashed]
    node19662 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node19662 -> node19663 [label=<<font color="black">true</font>> color="black"]
    node19662 -> node19664 [label=<<font color="black">false</font>> color="black"]
    node19663_name [shape=none, label=<<font color="black">Block[19663]</font>>]
    node19663_name -> node19663 [arrowhead=none, color="black", style=dashed]
    node19663 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1344])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19663 -> cluster2647_exit [color="black"]
    node19664_name [shape=none, label=<<font color="black">Branch[19664]</font>>]
    node19664_name -> node19664 [arrowhead=none, color="black", style=dashed]
    node19664 [shape=diamond, label=<<font color="black">(= newTarget absent)</font>> color="black" fillcolor="white", style=filled]
    node19664 -> node19665 [label=<<font color="black">true</font>> color="black"]
    node19664 -> node19666 [label=<<font color="black">false</font>> color="black"]
    node19665_name [shape=none, label=<<font color="black">Block[19665]</font>>]
    node19665_name -> node19665 [arrowhead=none, color="black", style=dashed]
    node19665 [shape=box, label=<<font color="black">[0] newTarget = target<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19665 -> node19669 [color="black"]
    node19666_name [shape=none, label=<<font color="black">Call[19666]</font>>]
    node19666_name -> node19666 [arrowhead=none, color="black", style=dashed]
    node19666 [shape=cds, label=<<font color="black">%1 = clo&lt;IsConstructor&gt;(newTarget)</font>> color="black" fillcolor="white", style=filled]
    node19666 -> node19667 [color="black"]
    node19669_name [shape=none, label=<<font color="black">Call[19669]</font>>]
    node19669_name -> node19669 [arrowhead=none, color="black", style=dashed]
    node19669 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateListFromArrayLike&gt;(argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node19669 -> node19670 [color="black"]
    node19667_name [shape=none, label=<<font color="black">Branch[19667]</font>>]
    node19667_name -> node19667 [arrowhead=none, color="black", style=dashed]
    node19667 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node19667 -> node19668 [label=<<font color="black">true</font>> color="black"]
    node19667 -> node19669 [label=<<font color="black">false</font>> color="black"]
    node19670_name [shape=none, label=<<font color="black">Block[19670]</font>>]
    node19670_name -> node19670 [arrowhead=none, color="black", style=dashed]
    node19670 [shape=box, label=<<font color="black">[0] let args = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19670 -> node19671 [color="black"]
    node19668_name [shape=none, label=<<font color="black">Block[19668]</font>>]
    node19668_name -> node19668 [arrowhead=none, color="black", style=dashed]
    node19668 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1345])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19668 -> cluster2647_exit [color="black"]
    node19671_name [shape=none, label=<<font color="black">Call[19671]</font>>]
    node19671_name -> node19671 [arrowhead=none, color="black", style=dashed]
    node19671 [shape=cds, label=<<font color="black">%3 = clo&lt;Construct&gt;(target, args, newTarget)</font>> color="black" fillcolor="white", style=filled]
    node19671 -> node19672 [color="black"]
    node19672_name [shape=none, label=<<font color="black">Block[19672]</font>>]
    node19672_name -> node19672 [arrowhead=none, color="black", style=dashed]
    node19672 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19672 -> cluster2647_exit [color="black"]
  }
}