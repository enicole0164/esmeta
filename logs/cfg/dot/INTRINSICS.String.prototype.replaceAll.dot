digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2188 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.replaceAll(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2188_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2188_entry_name -> cluster2188_entry [arrowhead=none, color="black", style=dashed]
    cluster2188_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2188_entry -> node13601 [color="black"]
    cluster2188_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2188_exit_name -> cluster2188_exit [arrowhead=none, color="black", style=dashed]
    cluster2188_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13601_name [shape=none, label=<<font color="black">Branch[13601]</font>>]
    node13601_name -> node13601 [arrowhead=none, color="black", style=dashed]
    node13601 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13601 -> node13602 [label=<<font color="black">true</font>> color="black"]
    node13601 -> node13603 [label=<<font color="black">false</font>> color="black"]
    node13602_name [shape=none, label=<<font color="black">Block[13602]</font>>]
    node13602_name -> node13602 [arrowhead=none, color="black", style=dashed]
    node13602 [shape=box, label=<<font color="black">[0] let searchValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13602 -> node13604 [color="black"]
    node13603_name [shape=none, label=<<font color="black">Block[13603]</font>>]
    node13603_name -> node13603 [arrowhead=none, color="black", style=dashed]
    node13603 [shape=box, label=<<font color="black">[0] let searchValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13603 -> node13604 [color="black"]
    node13604_name [shape=none, label=<<font color="black">Branch[13604]</font>>]
    node13604_name -> node13604 [arrowhead=none, color="black", style=dashed]
    node13604 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13604 -> node13605 [label=<<font color="black">true</font>> color="black"]
    node13604 -> node13606 [label=<<font color="black">false</font>> color="black"]
    node13605_name [shape=none, label=<<font color="black">Block[13605]</font>>]
    node13605_name -> node13605 [arrowhead=none, color="black", style=dashed]
    node13605 [shape=box, label=<<font color="black">[0] let replaceValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13605 -> node13607 [color="black"]
    node13606_name [shape=none, label=<<font color="black">Block[13606]</font>>]
    node13606_name -> node13606 [arrowhead=none, color="black", style=dashed]
    node13606 [shape=box, label=<<font color="black">[0] let replaceValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13606 -> node13607 [color="black"]
    node13607_name [shape=none, label=<<font color="black">Call[13607]</font>>]
    node13607_name -> node13607 [arrowhead=none, color="black", style=dashed]
    node13607 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13607 -> node13608 [color="black"]
    node13608_name [shape=none, label=<<font color="black">Block[13608]</font>>]
    node13608_name -> node13608 [arrowhead=none, color="black", style=dashed]
    node13608 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13608 -> node13609 [color="black"]
    node13609_name [shape=none, label=<<font color="black">Branch[13609]</font>>]
    node13609_name -> node13609 [arrowhead=none, color="black", style=dashed]
    node13609 [shape=diamond, label=<<font color="black">(! (|| (= searchValue undefined) (= searchValue null)))</font>> color="black" fillcolor="white", style=filled]
    node13609 -> node13610 [label=<<font color="black">true</font>> color="black"]
    node13609 -> node13625 [label=<<font color="black">false</font>> color="black"]
    node13610_name [shape=none, label=<<font color="black">Call[13610]</font>>]
    node13610_name -> node13610 [arrowhead=none, color="black", style=dashed]
    node13610 [shape=cds, label=<<font color="black">%1 = clo&lt;IsRegExp&gt;(searchValue)</font>> color="black" fillcolor="white", style=filled]
    node13610 -> node13611 [color="black"]
    node13625_name [shape=none, label=<<font color="black">Call[13625]</font>>]
    node13625_name -> node13625 [arrowhead=none, color="black", style=dashed]
    node13625 [shape=cds, label=<<font color="black">%7 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13625 -> node13626 [color="black"]
    node13611_name [shape=none, label=<<font color="black">Block[13611]</font>>]
    node13611_name -> node13611 [arrowhead=none, color="black", style=dashed]
    node13611 [shape=box, label=<<font color="black">[0] let isRegExp = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13611 -> node13612 [color="black"]
    node13626_name [shape=none, label=<<font color="black">Block[13626]</font>>]
    node13626_name -> node13626 [arrowhead=none, color="black", style=dashed]
    node13626 [shape=box, label=<<font color="black">[0] let string = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13626 -> node13627 [color="black"]
    node13612_name [shape=none, label=<<font color="black">Branch[13612]</font>>]
    node13612_name -> node13612 [arrowhead=none, color="black", style=dashed]
    node13612 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white", style=filled]
    node13612 -> node13613 [label=<<font color="black">true</font>> color="black"]
    node13612 -> node13620 [label=<<font color="black">false</font>> color="black"]
    node13627_name [shape=none, label=<<font color="black">Call[13627]</font>>]
    node13627_name -> node13627 [arrowhead=none, color="black", style=dashed]
    node13627 [shape=cds, label=<<font color="black">%8 = clo&lt;ToString&gt;(searchValue)</font>> color="black" fillcolor="white", style=filled]
    node13627 -> node13628 [color="black"]
    node13613_name [shape=none, label=<<font color="black">Call[13613]</font>>]
    node13613_name -> node13613 [arrowhead=none, color="black", style=dashed]
    node13613 [shape=cds, label=<<font color="black">%2 = clo&lt;Get&gt;(searchValue, &quot;flags&quot;)</font>> color="black" fillcolor="white", style=filled]
    node13613 -> node13614 [color="black"]
    node13620_name [shape=none, label=<<font color="black">Call[13620]</font>>]
    node13620_name -> node13620 [arrowhead=none, color="black", style=dashed]
    node13620 [shape=cds, label=<<font color="black">%5 = clo&lt;GetMethod&gt;(searchValue, @SYMBOL.replace)</font>> color="black" fillcolor="white", style=filled]
    node13620 -> node13621 [color="black"]
    node13628_name [shape=none, label=<<font color="black">Block[13628]</font>>]
    node13628_name -> node13628 [arrowhead=none, color="black", style=dashed]
    node13628 [shape=box, label=<<font color="black">[0] let searchString = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13628 -> node13629 [color="black"]
    node13614_name [shape=none, label=<<font color="black">Block[13614]</font>>]
    node13614_name -> node13614 [arrowhead=none, color="black", style=dashed]
    node13614 [shape=box, label=<<font color="black">[0] let flags = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13614 -> node13615 [color="black"]
    node13621_name [shape=none, label=<<font color="black">Block[13621]</font>>]
    node13621_name -> node13621 [arrowhead=none, color="black", style=dashed]
    node13621 [shape=box, label=<<font color="black">[0] let replacer = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13621 -> node13622 [color="black"]
    node13629_name [shape=none, label=<<font color="black">Call[13629]</font>>]
    node13629_name -> node13629 [arrowhead=none, color="black", style=dashed]
    node13629 [shape=cds, label=<<font color="black">%9 = clo&lt;IsCallable&gt;(replaceValue)</font>> color="black" fillcolor="white", style=filled]
    node13629 -> node13630 [color="black"]
    node13615_name [shape=none, label=<<font color="black">Call[13615]</font>>]
    node13615_name -> node13615 [arrowhead=none, color="black", style=dashed]
    node13615 [shape=cds, label=<<font color="black">%3 = clo&lt;RequireObjectCoercible&gt;(flags)</font>> color="black" fillcolor="white", style=filled]
    node13615 -> node13616 [color="black"]
    node13622_name [shape=none, label=<<font color="black">Branch[13622]</font>>]
    node13622_name -> node13622 [arrowhead=none, color="black", style=dashed]
    node13622 [shape=diamond, label=<<font color="black">(! (= replacer undefined))</font>> color="black" fillcolor="white", style=filled]
    node13622 -> node13623 [label=<<font color="black">true</font>> color="black"]
    node13622 -> node13625 [label=<<font color="black">false</font>> color="black"]
    node13630_name [shape=none, label=<<font color="black">Block[13630]</font>>]
    node13630_name -> node13630 [arrowhead=none, color="black", style=dashed]
    node13630 [shape=box, label=<<font color="black">[0] let functionalReplace = %9<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13630 -> node13631 [color="black"]
    node13616_name [shape=none, label=<<font color="black">Block[13616]</font>>]
    node13616_name -> node13616 [arrowhead=none, color="black", style=dashed]
    node13616 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13616 -> node13617 [color="black"]
    node13623_name [shape=none, label=<<font color="black">Call[13623]</font>>]
    node13623_name -> node13623 [arrowhead=none, color="black", style=dashed]
    node13623 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(replacer, searchValue, (new [O, replaceValue])[#960])</font>> color="black" fillcolor="white", style=filled]
    node13623 -> node13624 [color="black"]
    node13631_name [shape=none, label=<<font color="black">Branch[13631]</font>>]
    node13631_name -> node13631 [arrowhead=none, color="black", style=dashed]
    node13631 [shape=diamond, label=<<font color="black">(= functionalReplace false)</font>> color="black" fillcolor="white", style=filled]
    node13631 -> node13632 [label=<<font color="black">true</font>> color="black"]
    node13631 -> node13634 [label=<<font color="black">false</font>> color="black"]
    node13617_name [shape=none, label=<<font color="black">Call[13617]</font>>]
    node13617_name -> node13617 [arrowhead=none, color="black", style=dashed]
    node13617 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(flags)</font>> color="black" fillcolor="white", style=filled]
    node13617 -> node13618 [color="black"]
    node13624_name [shape=none, label=<<font color="black">Block[13624]</font>>]
    node13624_name -> node13624 [arrowhead=none, color="black", style=dashed]
    node13624 [shape=box, label=<<font color="black">[0] return [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13624 -> cluster2188_exit [color="black"]
    node13632_name [shape=none, label=<<font color="black">Call[13632]</font>>]
    node13632_name -> node13632 [arrowhead=none, color="black", style=dashed]
    node13632 [shape=cds, label=<<font color="black">%10 = clo&lt;ToString&gt;(replaceValue)</font>> color="black" fillcolor="white", style=filled]
    node13632 -> node13633 [color="black"]
    node13634_name [shape=none, label=<<font color="black">Block[13634]</font>>]
    node13634_name -> node13634 [arrowhead=none, color="black", style=dashed]
    node13634 [shape=box, label=<<font color="black">[0] let searchLength = searchString.length<BR ALIGN="LEFT"/>[1] let advanceBy = (max 1 searchLength)<BR ALIGN="LEFT"/>[2] let matchPositions = (new [])[#961]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13634 -> node13635 [color="black"]
    node13618_name [shape=none, label=<<font color="black">Branch[13618]</font>>]
    node13618_name -> node13618 [arrowhead=none, color="black", style=dashed]
    node13618 [shape=diamond, label=<<font color="black">(! (contains [? %4] &quot;g&quot;))</font>> color="black" fillcolor="white", style=filled]
    node13618 -> node13619 [label=<<font color="black">true</font>> color="black"]
    node13618 -> node13620 [label=<<font color="black">false</font>> color="black"]
    node13633_name [shape=none, label=<<font color="black">Block[13633]</font>>]
    node13633_name -> node13633 [arrowhead=none, color="black", style=dashed]
    node13633 [shape=box, label=<<font color="black">[0] replaceValue = [? %10]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13633 -> node13634 [color="black"]
    node13635_name [shape=none, label=<<font color="black">Call[13635]</font>>]
    node13635_name -> node13635 [arrowhead=none, color="black", style=dashed]
    node13635 [shape=cds, label=<<font color="black">%11 = clo&lt;StringIndexOf&gt;(string, searchString, 0)</font>> color="black" fillcolor="white", style=filled]
    node13635 -> node13636 [color="black"]
    node13619_name [shape=none, label=<<font color="black">Block[13619]</font>>]
    node13619_name -> node13619 [arrowhead=none, color="black", style=dashed]
    node13619 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#959])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13619 -> cluster2188_exit [color="black"]
    node13636_name [shape=none, label=<<font color="black">Block[13636]</font>>]
    node13636_name -> node13636 [arrowhead=none, color="black", style=dashed]
    node13636 [shape=box, label=<<font color="black">[0] let position = %11<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13636 -> node13637 [color="black"]
    node13637_name [shape=none, label=<<font color="black">Branch[13637]</font>>]
    node13637_name -> node13637 [arrowhead=none, color="black", style=dashed]
    node13637 [shape=diamond, label=<<font color="black">(! (= position (- 1)))</font>> color="black" fillcolor="white", style=filled]
    node13637 -> node13638 [label=<<font color="black">true</font>> color="black"]
    node13637 -> node13641 [label=<<font color="black">false</font>> color="black"]
    node13638_name [shape=none, label=<<font color="black">Block[13638]</font>>]
    node13638_name -> node13638 [arrowhead=none, color="black", style=dashed]
    node13638 [shape=box, label=<<font color="black">[0] push matchPositions &lt; position<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13638 -> node13639 [color="black"]
    node13641_name [shape=none, label=<<font color="black">Block[13641]</font>>]
    node13641_name -> node13641 [arrowhead=none, color="black", style=dashed]
    node13641 [shape=box, label=<<font color="black">[0] let endOfLastMatch = 0<BR ALIGN="LEFT"/>[1] let result = &quot;&quot;<BR ALIGN="LEFT"/>[2] %14 = matchPositions<BR ALIGN="LEFT"/>[3] %13 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13641 -> node13642 [color="black"]
    node13639_name [shape=none, label=<<font color="black">Call[13639]</font>>]
    node13639_name -> node13639 [arrowhead=none, color="black", style=dashed]
    node13639 [shape=cds, label=<<font color="black">%12 = clo&lt;StringIndexOf&gt;(string, searchString, (+ position advanceBy))</font>> color="black" fillcolor="white", style=filled]
    node13639 -> node13640 [color="black"]
    node13642_name [shape=none, label=<<font color="black">Branch[13642]</font>>]
    node13642_name -> node13642 [arrowhead=none, color="black", style=dashed]
    node13642 [shape=diamond, label=<<font color="black">(&lt; %13 %14.length)</font>> color="black" fillcolor="white", style=filled]
    node13642 -> node13643 [label=<<font color="black">true</font>> color="black"]
    node13642 -> node13652 [label=<<font color="black">false</font>> color="black"]
    node13640_name [shape=none, label=<<font color="black">Block[13640]</font>>]
    node13640_name -> node13640 [arrowhead=none, color="black", style=dashed]
    node13640 [shape=box, label=<<font color="black">[0] position = %12<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13640 -> node13637 [color="black"]
    node13643_name [shape=none, label=<<font color="black">Block[13643]</font>>]
    node13643_name -> node13643 [arrowhead=none, color="black", style=dashed]
    node13643 [shape=box, label=<<font color="black">[0] let p = %14[%13]<BR ALIGN="LEFT"/>[1] let preserved = (substring string endOfLastMatch p)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13643 -> node13644 [color="black"]
    node13652_name [shape=none, label=<<font color="black">Branch[13652]</font>>]
    node13652_name -> node13652 [arrowhead=none, color="black", style=dashed]
    node13652 [shape=diamond, label=<<font color="black">(&lt; endOfLastMatch string.length)</font>> color="black" fillcolor="white", style=filled]
    node13652 -> node13653 [label=<<font color="black">true</font>> color="black"]
    node13652 -> node13654 [label=<<font color="black">false</font>> color="black"]
    node13644_name [shape=none, label=<<font color="black">Branch[13644]</font>>]
    node13644_name -> node13644 [arrowhead=none, color="black", style=dashed]
    node13644 [shape=diamond, label=<<font color="black">(= functionalReplace true)</font>> color="black" fillcolor="white", style=filled]
    node13644 -> node13645 [label=<<font color="black">true</font>> color="black"]
    node13644 -> node13648 [label=<<font color="black">false</font>> color="black"]
    node13653_name [shape=none, label=<<font color="black">Block[13653]</font>>]
    node13653_name -> node13653 [arrowhead=none, color="black", style=dashed]
    node13653 [shape=box, label=<<font color="black">[0] result = (concat result (substring string endOfLastMatch))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13653 -> node13654 [color="black"]
    node13654_name [shape=none, label=<<font color="black">Block[13654]</font>>]
    node13654_name -> node13654 [arrowhead=none, color="black", style=dashed]
    node13654 [shape=box, label=<<font color="black">[0] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13654 -> cluster2188_exit [color="black"]
    node13645_name [shape=none, label=<<font color="black">Call[13645]</font>>]
    node13645_name -> node13645 [arrowhead=none, color="black", style=dashed]
    node13645 [shape=cds, label=<<font color="black">%15 = clo&lt;Call&gt;(replaceValue, undefined, (new [searchString, ([number] p), string])[#962])</font>> color="black" fillcolor="white", style=filled]
    node13645 -> node13646 [color="black"]
    node13648_name [shape=none, label=<<font color="black">Block[13648]</font>>]
    node13648_name -> node13648 [arrowhead=none, color="black", style=dashed]
    node13648 [shape=box, label=<<font color="black">[0] assert (= (typeof replaceValue) @String)<BR ALIGN="LEFT"/>[1] let captures = (new [])[#963]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13648 -> node13649 [color="black"]
    node13646_name [shape=none, label=<<font color="black">Call[13646]</font>>]
    node13646_name -> node13646 [arrowhead=none, color="black", style=dashed]
    node13646 [shape=cds, label=<<font color="black">%16 = clo&lt;ToString&gt;([? %15])</font>> color="black" fillcolor="white", style=filled]
    node13646 -> node13647 [color="black"]
    node13649_name [shape=none, label=<<font color="black">Call[13649]</font>>]
    node13649_name -> node13649 [arrowhead=none, color="black", style=dashed]
    node13649 [shape=cds, label=<<font color="black">%17 = clo&lt;GetSubstitution&gt;(searchString, string, p, captures, undefined, replaceValue)</font>> color="black" fillcolor="white", style=filled]
    node13649 -> node13650 [color="black"]
    node13647_name [shape=none, label=<<font color="black">Block[13647]</font>>]
    node13647_name -> node13647 [arrowhead=none, color="black", style=dashed]
    node13647 [shape=box, label=<<font color="black">[0] let replacement = [? %16]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13647 -> node13651 [color="black"]
    node13650_name [shape=none, label=<<font color="black">Block[13650]</font>>]
    node13650_name -> node13650 [arrowhead=none, color="black", style=dashed]
    node13650 [shape=box, label=<<font color="black">[0] let replacement = [! %17]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13650 -> node13651 [color="black"]
    node13651_name [shape=none, label=<<font color="black">Block[13651]</font>>]
    node13651_name -> node13651 [arrowhead=none, color="black", style=dashed]
    node13651 [shape=box, label=<<font color="black">[0] result = (concat result preserved replacement)<BR ALIGN="LEFT"/>[1] endOfLastMatch = (+ p searchLength)<BR ALIGN="LEFT"/>[2] %13 = (+ %13 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13651 -> node13642 [color="black"]
  }
}