digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2498 {
    label = "def <BUILTIN>:INTRINSICS.get DataView.prototype.byteLength(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2498_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2498_entry_name -> cluster2498_entry [arrowhead=none, color="black", style=dashed]
    cluster2498_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2498_entry -> node17694 [color="black"]
    cluster2498_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2498_exit_name -> cluster2498_exit [arrowhead=none, color="black", style=dashed]
    cluster2498_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17694_name [shape=none, label=<<font color="black">Block[17694]</font>>]
    node17694_name -> node17694 [arrowhead=none, color="black", style=dashed]
    node17694 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17694 -> node17695 [color="black"]
    node17695_name [shape=none, label=<<font color="black">Call[17695]</font>>]
    node17695_name -> node17695 [arrowhead=none, color="black", style=dashed]
    node17695 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;DataView&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17695 -> node17696 [color="black"]
    node17696_name [shape=none, label=<<font color="black">Block[17696]</font>>]
    node17696_name -> node17696 [arrowhead=none, color="black", style=dashed]
    node17696 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= O.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/>[2] let buffer = O.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17696 -> node17697 [color="black"]
    node17697_name [shape=none, label=<<font color="black">Call[17697]</font>>]
    node17697_name -> node17697 [arrowhead=none, color="black", style=dashed]
    node17697 [shape=cds, label=<<font color="black">%1 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node17697 -> node17698 [color="black"]
    node17698_name [shape=none, label=<<font color="black">Branch[17698]</font>>]
    node17698_name -> node17698 [arrowhead=none, color="black", style=dashed]
    node17698 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node17698 -> node17699 [label=<<font color="black">true</font>> color="black"]
    node17698 -> node17700 [label=<<font color="black">false</font>> color="black"]
    node17699_name [shape=none, label=<<font color="black">Block[17699]</font>>]
    node17699_name -> node17699 [arrowhead=none, color="black", style=dashed]
    node17699 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1177])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17699 -> cluster2498_exit [color="black"]
    node17700_name [shape=none, label=<<font color="black">Block[17700]</font>>]
    node17700_name -> node17700 [arrowhead=none, color="black", style=dashed]
    node17700 [shape=box, label=<<font color="black">[0] let size = O.ByteLength<BR ALIGN="LEFT"/>[1] return ([number] size)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17700 -> cluster2498_exit [color="black"]
  }
}