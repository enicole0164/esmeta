digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2164 {
    label = "def <BUILTIN>:INTRINSICS.String.fromCharCode(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2164_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2164_entry_name -> cluster2164_entry [arrowhead=none, color="black", style=dashed]
    cluster2164_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2164_entry -> node13225 [color="black"]
    cluster2164_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2164_exit_name -> cluster2164_exit [arrowhead=none, color="black", style=dashed]
    cluster2164_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13225_name [shape=none, label=<<font color="black">Block[13225]</font>>]
    node13225_name -> node13225 [arrowhead=none, color="black", style=dashed]
    node13225 [shape=box, label=<<font color="black">[0] let codeUnits = argumentsList<BR ALIGN="LEFT"/>[1] let length = codeUnits.length<BR ALIGN="LEFT"/>[2] let elements = (new [])[#942]<BR ALIGN="LEFT"/>[3] %1 = codeUnits<BR ALIGN="LEFT"/>[4] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13225 -> node13226 [color="black"]
    node13226_name [shape=none, label=<<font color="black">Branch[13226]</font>>]
    node13226_name -> node13226 [arrowhead=none, color="black", style=dashed]
    node13226 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node13226 -> node13227 [label=<<font color="black">true</font>> color="black"]
    node13226 -> node13230 [label=<<font color="black">false</font>> color="black"]
    node13227_name [shape=none, label=<<font color="black">Block[13227]</font>>]
    node13227_name -> node13227 [arrowhead=none, color="black", style=dashed]
    node13227 [shape=box, label=<<font color="black">[0] let next = %1[%0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13227 -> node13228 [color="black"]
    node13230_name [shape=none, label=<<font color="black">Block[13230]</font>>]
    node13230_name -> node13230 [arrowhead=none, color="black", style=dashed]
    node13230 [shape=box, label=<<font color="black">[0] (yet &quot;Return the String value whose code units are the elements in the List _elements_. If _codeUnits_ is empty, the empty String is returned.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13230 -> cluster2164_exit [color="black"]
    node13228_name [shape=none, label=<<font color="black">Call[13228]</font>>]
    node13228_name -> node13228 [arrowhead=none, color="black", style=dashed]
    node13228 [shape=cds, label=<<font color="black">%2 = clo&lt;ToUint16&gt;(next)</font>> color="black" fillcolor="white", style=filled]
    node13228 -> node13229 [color="black"]
    node13229_name [shape=none, label=<<font color="black">Block[13229]</font>>]
    node13229_name -> node13229 [arrowhead=none, color="black", style=dashed]
    node13229 [shape=box, label=<<font color="black">[0] let nextCU = ([math] [? %2])<BR ALIGN="LEFT"/>[1] push elements &lt; nextCU<BR ALIGN="LEFT"/>[2] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13229 -> node13226 [color="black"]
  }
}