digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2536 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.exchange(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2536_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2536_entry_name -> cluster2536_entry [arrowhead=none, color="black", style=dashed]
    cluster2536_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2536_entry -> node18081 [color="black"]
    cluster2536_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2536_exit_name -> cluster2536_exit [arrowhead=none, color="black", style=dashed]
    cluster2536_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18081_name [shape=none, label=<<font color="black">Branch[18081]</font>>]
    node18081_name -> node18081 [arrowhead=none, color="black", style=dashed]
    node18081 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18081 -> node18082 [label=<<font color="black">true</font>> color="black"]
    node18081 -> node18083 [label=<<font color="black">false</font>> color="black"]
    node18082_name [shape=none, label=<<font color="black">Block[18082]</font>>]
    node18082_name -> node18082 [arrowhead=none, color="black", style=dashed]
    node18082 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18082 -> node18084 [color="black"]
    node18083_name [shape=none, label=<<font color="black">Block[18083]</font>>]
    node18083_name -> node18083 [arrowhead=none, color="black", style=dashed]
    node18083 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18083 -> node18084 [color="black"]
    node18084_name [shape=none, label=<<font color="black">Branch[18084]</font>>]
    node18084_name -> node18084 [arrowhead=none, color="black", style=dashed]
    node18084 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18084 -> node18085 [label=<<font color="black">true</font>> color="black"]
    node18084 -> node18086 [label=<<font color="black">false</font>> color="black"]
    node18085_name [shape=none, label=<<font color="black">Block[18085]</font>>]
    node18085_name -> node18085 [arrowhead=none, color="black", style=dashed]
    node18085 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18085 -> node18087 [color="black"]
    node18086_name [shape=none, label=<<font color="black">Block[18086]</font>>]
    node18086_name -> node18086 [arrowhead=none, color="black", style=dashed]
    node18086 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18086 -> node18087 [color="black"]
    node18087_name [shape=none, label=<<font color="black">Branch[18087]</font>>]
    node18087_name -> node18087 [arrowhead=none, color="black", style=dashed]
    node18087 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18087 -> node18088 [label=<<font color="black">true</font>> color="black"]
    node18087 -> node18089 [label=<<font color="black">false</font>> color="black"]
    node18088_name [shape=none, label=<<font color="black">Block[18088]</font>>]
    node18088_name -> node18088 [arrowhead=none, color="black", style=dashed]
    node18088 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18088 -> node18090 [color="black"]
    node18089_name [shape=none, label=<<font color="black">Block[18089]</font>>]
    node18089_name -> node18089 [arrowhead=none, color="black", style=dashed]
    node18089 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18089 -> node18090 [color="black"]
    node18090_name [shape=none, label=<<font color="black">Block[18090]</font>>]
    node18090_name -> node18090 [arrowhead=none, color="black", style=dashed]
    node18090 [shape=box, label=<<font color="black">[0] (yet &quot;Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return _newBytes_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18090 -> node18091 [color="black"]
    node18091_name [shape=none, label=<<font color="black">Call[18091]</font>>]
    node18091_name -> node18091 [arrowhead=none, color="black", style=dashed]
    node18091 [shape=cds, label=<<font color="black">%0 = clo&lt;AtomicReadModifyWrite&gt;(typedArray, index, value, second)</font>> color="black" fillcolor="white", style=filled]
    node18091 -> node18092 [color="black"]
    node18092_name [shape=none, label=<<font color="black">Block[18092]</font>>]
    node18092_name -> node18092 [arrowhead=none, color="black", style=dashed]
    node18092 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18092 -> cluster2536_exit [color="black"]
  }
}