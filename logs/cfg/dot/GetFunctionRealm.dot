digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster153 {
    label = "def GetFunctionRealm(obj: FunctionObject): Normal[RealmRecord] | Abrupt"
    style = rounded
    cluster153_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster153_entry_name -> cluster153_entry [arrowhead=none, color="black", style=dashed]
    cluster153_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster153_entry -> node1292 [color="black"]
    cluster153_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster153_exit_name -> cluster153_exit [arrowhead=none, color="black", style=dashed]
    cluster153_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1292_name [shape=none, label=<<font color="black">Branch[1292]</font>>]
    node1292_name -> node1292 [arrowhead=none, color="black", style=dashed]
    node1292 [shape=diamond, label=<<font color="black">(! (= obj.Realm absent))</font>> color="black" fillcolor="white", style=filled]
    node1292 -> node1293 [label=<<font color="black">true</font>> color="black"]
    node1292 -> node1294 [label=<<font color="black">false</font>> color="black"]
    node1293_name [shape=none, label=<<font color="black">Block[1293]</font>>]
    node1293_name -> node1293 [arrowhead=none, color="black", style=dashed]
    node1293 [shape=box, label=<<font color="black">[0] return obj.Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1293 -> cluster153_exit [color="black"]
    node1294_name [shape=none, label=<<font color="black">Branch[1294]</font>>]
    node1294_name -> node1294 [arrowhead=none, color="black", style=dashed]
    node1294 [shape=diamond, label=<<font color="black">(? obj: &quot;BoundFunctionExoticObject&quot;)</font>> color="black" fillcolor="white", style=filled]
    node1294 -> node1295 [label=<<font color="black">true</font>> color="black"]
    node1294 -> node1298 [label=<<font color="black">false</font>> color="black"]
    node1295_name [shape=none, label=<<font color="black">Block[1295]</font>>]
    node1295_name -> node1295 [arrowhead=none, color="black", style=dashed]
    node1295 [shape=box, label=<<font color="black">[0] let target = obj.BoundTargetFunction<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1295 -> node1296 [color="black"]
    node1298_name [shape=none, label=<<font color="black">Branch[1298]</font>>]
    node1298_name -> node1298 [arrowhead=none, color="black", style=dashed]
    node1298 [shape=diamond, label=<<font color="black">(? obj: &quot;ProxyExoticObject&quot;)</font>> color="black" fillcolor="white", style=filled]
    node1298 -> node1299 [label=<<font color="black">true</font>> color="black"]
    node1298 -> node1304 [label=<<font color="black">false</font>> color="black"]
    node1296_name [shape=none, label=<<font color="black">Call[1296]</font>>]
    node1296_name -> node1296 [arrowhead=none, color="black", style=dashed]
    node1296 [shape=cds, label=<<font color="black">%0 = clo&lt;GetFunctionRealm&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node1296 -> node1297 [color="black"]
    node1299_name [shape=none, label=<<font color="black">Branch[1299]</font>>]
    node1299_name -> node1299 [arrowhead=none, color="black", style=dashed]
    node1299 [shape=diamond, label=<<font color="black">(= obj.ProxyHandler null)</font>> color="black" fillcolor="white", style=filled]
    node1299 -> node1300 [label=<<font color="black">true</font>> color="black"]
    node1299 -> node1301 [label=<<font color="black">false</font>> color="black"]
    node1304_name [shape=none, label=<<font color="black">Block[1304]</font>>]
    node1304_name -> node1304 [arrowhead=none, color="black", style=dashed]
    node1304 [shape=box, label=<<font color="black">[0] return @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1304 -> cluster153_exit [color="black"]
    node1297_name [shape=none, label=<<font color="black">Block[1297]</font>>]
    node1297_name -> node1297 [arrowhead=none, color="black", style=dashed]
    node1297 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1297 -> cluster153_exit [color="black"]
    node1300_name [shape=none, label=<<font color="black">Block[1300]</font>>]
    node1300_name -> node1300 [arrowhead=none, color="black", style=dashed]
    node1300 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#64])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1300 -> cluster153_exit [color="black"]
    node1301_name [shape=none, label=<<font color="black">Block[1301]</font>>]
    node1301_name -> node1301 [arrowhead=none, color="black", style=dashed]
    node1301 [shape=box, label=<<font color="black">[0] let proxyTarget = obj.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1301 -> node1302 [color="black"]
    node1302_name [shape=none, label=<<font color="black">Call[1302]</font>>]
    node1302_name -> node1302 [arrowhead=none, color="black", style=dashed]
    node1302 [shape=cds, label=<<font color="black">%1 = clo&lt;GetFunctionRealm&gt;(proxyTarget)</font>> color="black" fillcolor="white", style=filled]
    node1302 -> node1303 [color="black"]
    node1303_name [shape=none, label=<<font color="black">Block[1303]</font>>]
    node1303_name -> node1303 [arrowhead=none, color="black", style=dashed]
    node1303 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1303 -> cluster153_exit [color="black"]
  }
}