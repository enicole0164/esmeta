digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2686 {
    label = "def ToObject(argument: Unknown): Unknown"
    style = rounded
    cluster2686_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2686_entry_name -> cluster2686_entry [arrowhead=none, color="black", style=dashed]
    cluster2686_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2686_entry -> node20017 [color="black"]
    cluster2686_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2686_exit_name -> cluster2686_exit [arrowhead=none, color="black", style=dashed]
    cluster2686_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node20017_name [shape=none, label=<<font color="black">Branch[20017]</font>>]
    node20017_name -> node20017 [arrowhead=none, color="black", style=dashed]
    node20017 [shape=diamond, label=<<font color="black">(= (typeof argument) @Undefined)</font>> color="black" fillcolor="white", style=filled]
    node20017 -> node20018 [label=<<font color="black">true</font>> color="black"]
    node20017 -> node20019 [label=<<font color="black">false</font>> color="black"]
    node20018_name [shape=none, label=<<font color="black">Block[20018]</font>>]
    node20018_name -> node20018 [arrowhead=none, color="black", style=dashed]
    node20018 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1371])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20018 -> cluster2686_exit [color="black"]
    node20019_name [shape=none, label=<<font color="black">Branch[20019]</font>>]
    node20019_name -> node20019 [arrowhead=none, color="black", style=dashed]
    node20019 [shape=diamond, label=<<font color="black">(= (typeof argument) @Null)</font>> color="black" fillcolor="white", style=filled]
    node20019 -> node20020 [label=<<font color="black">true</font>> color="black"]
    node20019 -> node20021 [label=<<font color="black">false</font>> color="black"]
    node20020_name [shape=none, label=<<font color="black">Block[20020]</font>>]
    node20020_name -> node20020 [arrowhead=none, color="black", style=dashed]
    node20020 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1372])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20020 -> cluster2686_exit [color="black"]
    node20021_name [shape=none, label=<<font color="black">Branch[20021]</font>>]
    node20021_name -> node20021 [arrowhead=none, color="black", style=dashed]
    node20021 [shape=diamond, label=<<font color="black">(= (typeof argument) @Boolean)</font>> color="black" fillcolor="white", style=filled]
    node20021 -> node20022 [label=<<font color="black">true</font>> color="black"]
    node20021 -> node20023 [label=<<font color="black">false</font>> color="black"]
    node20022_name [shape=none, label=<<font color="black">Block[20022]</font>>]
    node20022_name -> node20022 [arrowhead=none, color="black", style=dashed]
    node20022 [shape=box, label=<<font color="black">[0] return (new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Boolean.prototype%&quot;], &quot;BooleanData&quot; -&gt; argument, &quot;Extensible&quot; -&gt; true))[#1373]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20022 -> cluster2686_exit [color="black"]
    node20023_name [shape=none, label=<<font color="black">Branch[20023]</font>>]
    node20023_name -> node20023 [arrowhead=none, color="black", style=dashed]
    node20023 [shape=diamond, label=<<font color="black">(= (typeof argument) @Number)</font>> color="black" fillcolor="white", style=filled]
    node20023 -> node20024 [label=<<font color="black">true</font>> color="black"]
    node20023 -> node20025 [label=<<font color="black">false</font>> color="black"]
    node20024_name [shape=none, label=<<font color="black">Block[20024]</font>>]
    node20024_name -> node20024 [arrowhead=none, color="black", style=dashed]
    node20024 [shape=box, label=<<font color="black">[0] return (new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Number.prototype%&quot;], &quot;NumberData&quot; -&gt; argument, &quot;Extensible&quot; -&gt; true))[#1374]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20024 -> cluster2686_exit [color="black"]
    node20025_name [shape=none, label=<<font color="black">Branch[20025]</font>>]
    node20025_name -> node20025 [arrowhead=none, color="black", style=dashed]
    node20025 [shape=diamond, label=<<font color="black">(= (typeof argument) @String)</font>> color="black" fillcolor="white", style=filled]
    node20025 -> node20026 [label=<<font color="black">true</font>> color="black"]
    node20025 -> node20027 [label=<<font color="black">false</font>> color="black"]
    node20026_name [shape=none, label=<<font color="black">Block[20026]</font>>]
    node20026_name -> node20026 [arrowhead=none, color="black", style=dashed]
    node20026 [shape=box, label=<<font color="black">[0] let obj = (new StringExoticObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%String.prototype%&quot;], &quot;StringData&quot; -&gt; argument, &quot;Extensible&quot; -&gt; true))[#1375]<BR ALIGN="LEFT"/>[1] obj.SubMap.length = (new PropertyDescriptor(&quot;Value&quot; -&gt; ([number] argument.length), &quot;Writable&quot; -&gt; false, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false))[#1376]<BR ALIGN="LEFT"/>[2] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20026 -> cluster2686_exit [color="black"]
    node20027_name [shape=none, label=<<font color="black">Branch[20027]</font>>]
    node20027_name -> node20027 [arrowhead=none, color="black", style=dashed]
    node20027 [shape=diamond, label=<<font color="black">(= (typeof argument) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node20027 -> node20028 [label=<<font color="black">true</font>> color="black"]
    node20027 -> node20029 [label=<<font color="black">false</font>> color="black"]
    node20028_name [shape=none, label=<<font color="black">Block[20028]</font>>]
    node20028_name -> node20028 [arrowhead=none, color="black", style=dashed]
    node20028 [shape=box, label=<<font color="black">[0] let obj = (new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Symbol.prototype%&quot;], &quot;SymbolData&quot; -&gt; argument, &quot;Extensible&quot; -&gt; true))[#1377]<BR ALIGN="LEFT"/>[1] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20028 -> cluster2686_exit [color="black"]
    node20029_name [shape=none, label=<<font color="black">Branch[20029]</font>>]
    node20029_name -> node20029 [arrowhead=none, color="black", style=dashed]
    node20029 [shape=diamond, label=<<font color="black">(= (typeof argument) @BigInt)</font>> color="black" fillcolor="white", style=filled]
    node20029 -> node20030 [label=<<font color="black">true</font>> color="black"]
    node20029 -> node20031 [label=<<font color="black">false</font>> color="black"]
    node20030_name [shape=none, label=<<font color="black">Block[20030]</font>>]
    node20030_name -> node20030 [arrowhead=none, color="black", style=dashed]
    node20030 [shape=box, label=<<font color="black">[0] let obj = (new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%BigInt.prototype%&quot;], &quot;BigIntData&quot; -&gt; argument, &quot;Extensible&quot; -&gt; true))[#1378]<BR ALIGN="LEFT"/>[1] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20030 -> cluster2686_exit [color="black"]
    node20031_name [shape=none, label=<<font color="black">Block[20031]</font>>]
    node20031_name -> node20031 [arrowhead=none, color="black", style=dashed]
    node20031 [shape=box, label=<<font color="black">[0] assert (= (typeof argument) @Object)<BR ALIGN="LEFT"/>[1] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node20031 -> cluster2686_exit [color="black"]
  }
}