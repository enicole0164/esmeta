digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster8 {
    label = "def ToNumber(argument: ESValue): Normal[ESValue] | Abrupt"
    style = rounded
    cluster8_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster8_entry_name -> cluster8_entry [arrowhead=none, color="black", style=dashed]
    cluster8_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster8_entry -> node47 [color="black"]
    cluster8_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster8_exit_name -> cluster8_exit [arrowhead=none, color="black", style=dashed]
    cluster8_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node47_name [shape=none, label=<<font color="black">Branch[47]</font>>]
    node47_name -> node47 [arrowhead=none, color="black", style=dashed]
    node47 [shape=diamond, label=<<font color="black">(= (typeof argument) @Undefined)</font>> color="black" fillcolor="white", style=filled]
    node47 -> node48 [label=<<font color="black">true</font>> color="black"]
    node47 -> node49 [label=<<font color="black">false</font>> color="black"]
    node48_name [shape=none, label=<<font color="black">Block[48]</font>>]
    node48_name -> node48 [arrowhead=none, color="black", style=dashed]
    node48 [shape=box, label=<<font color="black">[0] return NaN<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node48 -> cluster8_exit [color="black"]
    node49_name [shape=none, label=<<font color="black">Branch[49]</font>>]
    node49_name -> node49 [arrowhead=none, color="black", style=dashed]
    node49 [shape=diamond, label=<<font color="black">(= (typeof argument) @Null)</font>> color="black" fillcolor="white", style=filled]
    node49 -> node50 [label=<<font color="black">true</font>> color="black"]
    node49 -> node51 [label=<<font color="black">false</font>> color="black"]
    node50_name [shape=none, label=<<font color="black">Block[50]</font>>]
    node50_name -> node50 [arrowhead=none, color="black", style=dashed]
    node50 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node50 -> cluster8_exit [color="black"]
    node51_name [shape=none, label=<<font color="black">Branch[51]</font>>]
    node51_name -> node51 [arrowhead=none, color="black", style=dashed]
    node51 [shape=diamond, label=<<font color="black">(= (typeof argument) @Boolean)</font>> color="black" fillcolor="white", style=filled]
    node51 -> node52 [label=<<font color="black">true</font>> color="black"]
    node51 -> node55 [label=<<font color="black">false</font>> color="black"]
    node52_name [shape=none, label=<<font color="black">Branch[52]</font>>]
    node52_name -> node52 [arrowhead=none, color="black", style=dashed]
    node52 [shape=diamond, label=<<font color="black">(= argument true)</font>> color="black" fillcolor="white", style=filled]
    node52 -> node53 [label=<<font color="black">true</font>> color="black"]
    node52 -> node54 [label=<<font color="black">false</font>> color="black"]
    node55_name [shape=none, label=<<font color="black">Branch[55]</font>>]
    node55_name -> node55 [arrowhead=none, color="black", style=dashed]
    node55 [shape=diamond, label=<<font color="black">(= (typeof argument) @Number)</font>> color="black" fillcolor="white", style=filled]
    node55 -> node56 [label=<<font color="black">true</font>> color="black"]
    node55 -> node57 [label=<<font color="black">false</font>> color="black"]
    node53_name [shape=none, label=<<font color="black">Block[53]</font>>]
    node53_name -> node53 [arrowhead=none, color="black", style=dashed]
    node53 [shape=box, label=<<font color="black">[0] return 1.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node53 -> cluster8_exit [color="black"]
    node54_name [shape=none, label=<<font color="black">Block[54]</font>>]
    node54_name -> node54 [arrowhead=none, color="black", style=dashed]
    node54 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node54 -> cluster8_exit [color="black"]
    node56_name [shape=none, label=<<font color="black">Block[56]</font>>]
    node56_name -> node56 [arrowhead=none, color="black", style=dashed]
    node56 [shape=box, label=<<font color="black">[0] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node56 -> cluster8_exit [color="black"]
    node57_name [shape=none, label=<<font color="black">Branch[57]</font>>]
    node57_name -> node57 [arrowhead=none, color="black", style=dashed]
    node57 [shape=diamond, label=<<font color="black">(= (typeof argument) @String)</font>> color="black" fillcolor="white", style=filled]
    node57 -> node58 [label=<<font color="black">true</font>> color="black"]
    node57 -> node60 [label=<<font color="black">false</font>> color="black"]
    node58_name [shape=none, label=<<font color="black">Call[58]</font>>]
    node58_name -> node58 [arrowhead=none, color="black", style=dashed]
    node58 [shape=cds, label=<<font color="black">%0 = clo&lt;StringToNumber&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node58 -> node59 [color="black"]
    node60_name [shape=none, label=<<font color="black">Branch[60]</font>>]
    node60_name -> node60 [arrowhead=none, color="black", style=dashed]
    node60 [shape=diamond, label=<<font color="black">(= (typeof argument) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node60 -> node61 [label=<<font color="black">true</font>> color="black"]
    node60 -> node62 [label=<<font color="black">false</font>> color="black"]
    node59_name [shape=none, label=<<font color="black">Block[59]</font>>]
    node59_name -> node59 [arrowhead=none, color="black", style=dashed]
    node59 [shape=box, label=<<font color="black">[0] return [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node59 -> cluster8_exit [color="black"]
    node61_name [shape=none, label=<<font color="black">Block[61]</font>>]
    node61_name -> node61 [arrowhead=none, color="black", style=dashed]
    node61 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#5])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node61 -> cluster8_exit [color="black"]
    node62_name [shape=none, label=<<font color="black">Branch[62]</font>>]
    node62_name -> node62 [arrowhead=none, color="black", style=dashed]
    node62 [shape=diamond, label=<<font color="black">(= (typeof argument) @BigInt)</font>> color="black" fillcolor="white", style=filled]
    node62 -> node63 [label=<<font color="black">true</font>> color="black"]
    node62 -> node64 [label=<<font color="black">false</font>> color="black"]
    node63_name [shape=none, label=<<font color="black">Block[63]</font>>]
    node63_name -> node63 [arrowhead=none, color="black", style=dashed]
    node63 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#6])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node63 -> cluster8_exit [color="black"]
    node64_name [shape=none, label=<<font color="black">Block[64]</font>>]
    node64_name -> node64 [arrowhead=none, color="black", style=dashed]
    node64 [shape=box, label=<<font color="black">[0] assert (= (typeof argument) @Object)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node64 -> node65 [color="black"]
    node65_name [shape=none, label=<<font color="black">Call[65]</font>>]
    node65_name -> node65 [arrowhead=none, color="black", style=dashed]
    node65 [shape=cds, label=<<font color="black">%1 = clo&lt;ToPrimitive&gt;(argument, ~number~)</font>> color="black" fillcolor="white", style=filled]
    node65 -> node66 [color="black"]
    node66_name [shape=none, label=<<font color="black">Block[66]</font>>]
    node66_name -> node66 [arrowhead=none, color="black", style=dashed]
    node66 [shape=box, label=<<font color="black">[0] let primValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node66 -> node67 [color="black"]
    node67_name [shape=none, label=<<font color="black">Call[67]</font>>]
    node67_name -> node67 [arrowhead=none, color="black", style=dashed]
    node67 [shape=cds, label=<<font color="black">%2 = clo&lt;ToNumber&gt;(primValue)</font>> color="black" fillcolor="white", style=filled]
    node67 -> node68 [color="black"]
    node68_name [shape=none, label=<<font color="black">Block[68]</font>>]
    node68_name -> node68 [arrowhead=none, color="black", style=dashed]
    node68 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node68 -> cluster8_exit [color="black"]
  }
}