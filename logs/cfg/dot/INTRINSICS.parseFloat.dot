digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1987 {
    label = "def <BUILTIN>:INTRINSICS.parseFloat(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster1987_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1987_entry_name -> cluster1987_entry [arrowhead=none, color="black", style=dashed]
    cluster1987_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1987_entry -> node10927 [color="black"]
    cluster1987_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1987_exit_name -> cluster1987_exit [arrowhead=none, color="black", style=dashed]
    cluster1987_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10927_name [shape=none, label=<<font color="black">Branch[10927]</font>>]
    node10927_name -> node10927 [arrowhead=none, color="black", style=dashed]
    node10927 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node10927 -> node10928 [label=<<font color="black">true</font>> color="black"]
    node10927 -> node10929 [label=<<font color="black">false</font>> color="black"]
    node10928_name [shape=none, label=<<font color="black">Block[10928]</font>>]
    node10928_name -> node10928 [arrowhead=none, color="black", style=dashed]
    node10928 [shape=box, label=<<font color="black">[0] let string = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10928 -> node10930 [color="black"]
    node10929_name [shape=none, label=<<font color="black">Block[10929]</font>>]
    node10929_name -> node10929 [arrowhead=none, color="black", style=dashed]
    node10929 [shape=box, label=<<font color="black">[0] let string = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10929 -> node10930 [color="black"]
    node10930_name [shape=none, label=<<font color="black">Call[10930]</font>>]
    node10930_name -> node10930 [arrowhead=none, color="black", style=dashed]
    node10930 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(string)</font>> color="black" fillcolor="white", style=filled]
    node10930 -> node10931 [color="black"]
    node10931_name [shape=none, label=<<font color="black">Block[10931]</font>>]
    node10931_name -> node10931 [arrowhead=none, color="black", style=dashed]
    node10931 [shape=box, label=<<font color="black">[0] let inputString = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10931 -> node10932 [color="black"]
    node10932_name [shape=none, label=<<font color="black">Call[10932]</font>>]
    node10932_name -> node10932 [arrowhead=none, color="black", style=dashed]
    node10932 [shape=cds, label=<<font color="black">%1 = clo&lt;TrimString&gt;(inputString, ~start~)</font>> color="black" fillcolor="white", style=filled]
    node10932 -> node10933 [color="black"]
    node10933_name [shape=none, label=<<font color="black">Block[10933]</font>>]
    node10933_name -> node10933 [arrowhead=none, color="black", style=dashed]
    node10933 [shape=box, label=<<font color="black">[0] let trimmedString = [! %1]<BR ALIGN="LEFT"/>[1] (yet &quot;If neither _trimmedString_ nor any prefix of _trimmedString_ satisfies the syntax of a |StrDecimalLiteral| (see &lt;emu-xref href=\&quot;#sec-tonumber-applied-to-the-string-type\&quot;&gt;&lt;/emu-xref&gt;), return *NaN*.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _numberString_ be the longest prefix of _trimmedString_, which might be _trimmedString_ itself, that satisfies the syntax of a |StrDecimalLiteral|.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10933 -> node10934 [color="black"]
    node10934_name [shape=none, label=<<font color="black">Call[10934]</font>>]
    node10934_name -> node10934 [arrowhead=none, color="black", style=dashed]
    node10934 [shape=cds, label=<<font color="black">%2 = clo&lt;StringToCodePoints&gt;(numberString)</font>> color="black" fillcolor="white", style=filled]
    node10934 -> node10935 [color="black"]
    node10935_name [shape=none, label=<<font color="black">Block[10935]</font>>]
    node10935_name -> node10935 [arrowhead=none, color="black", style=dashed]
    node10935 [shape=box, label=<<font color="black">[0] let parsedNumber = (parse %2 (nt |StrDecimalLiteral|[]))<BR ALIGN="LEFT"/>[1] assert (? parsedNumber: &quot;ParseNode&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10935 -> node10936 [color="black"]
    node10936_name [shape=none, label=<<font color="black">Call[10936]</font>>]
    node10936_name -> node10936 [arrowhead=none, color="black", style=dashed]
    node10936 [shape=cds, label=<<font color="black">%3 = parsedNumber-&gt;StringNumericValue()</font>> color="black" fillcolor="white", style=filled]
    node10936 -> node10937 [color="black"]
    node10937_name [shape=none, label=<<font color="black">Block[10937]</font>>]
    node10937_name -> node10937 [arrowhead=none, color="black", style=dashed]
    node10937 [shape=box, label=<<font color="black">[0] return %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10937 -> cluster1987_exit [color="black"]
  }
}