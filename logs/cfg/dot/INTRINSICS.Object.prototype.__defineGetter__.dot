digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2029 {
    label = "def <BUILTIN>:INTRINSICS.Object.prototype.__defineGetter__(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2029_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2029_entry_name -> cluster2029_entry [arrowhead=none, color="black", style=dashed]
    cluster2029_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2029_entry -> node11423 [color="black"]
    cluster2029_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2029_exit_name -> cluster2029_exit [arrowhead=none, color="black", style=dashed]
    cluster2029_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11423_name [shape=none, label=<<font color="black">Branch[11423]</font>>]
    node11423_name -> node11423 [arrowhead=none, color="black", style=dashed]
    node11423 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11423 -> node11424 [label=<<font color="black">true</font>> color="black"]
    node11423 -> node11425 [label=<<font color="black">false</font>> color="black"]
    node11424_name [shape=none, label=<<font color="black">Block[11424]</font>>]
    node11424_name -> node11424 [arrowhead=none, color="black", style=dashed]
    node11424 [shape=box, label=<<font color="black">[0] let P = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11424 -> node11426 [color="black"]
    node11425_name [shape=none, label=<<font color="black">Block[11425]</font>>]
    node11425_name -> node11425 [arrowhead=none, color="black", style=dashed]
    node11425 [shape=box, label=<<font color="black">[0] let P = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11425 -> node11426 [color="black"]
    node11426_name [shape=none, label=<<font color="black">Branch[11426]</font>>]
    node11426_name -> node11426 [arrowhead=none, color="black", style=dashed]
    node11426 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11426 -> node11427 [label=<<font color="black">true</font>> color="black"]
    node11426 -> node11428 [label=<<font color="black">false</font>> color="black"]
    node11427_name [shape=none, label=<<font color="black">Block[11427]</font>>]
    node11427_name -> node11427 [arrowhead=none, color="black", style=dashed]
    node11427 [shape=box, label=<<font color="black">[0] let getter = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11427 -> node11429 [color="black"]
    node11428_name [shape=none, label=<<font color="black">Block[11428]</font>>]
    node11428_name -> node11428 [arrowhead=none, color="black", style=dashed]
    node11428 [shape=box, label=<<font color="black">[0] let getter = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11428 -> node11429 [color="black"]
    node11429_name [shape=none, label=<<font color="black">Call[11429]</font>>]
    node11429_name -> node11429 [arrowhead=none, color="black", style=dashed]
    node11429 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node11429 -> node11430 [color="black"]
    node11430_name [shape=none, label=<<font color="black">Block[11430]</font>>]
    node11430_name -> node11430 [arrowhead=none, color="black", style=dashed]
    node11430 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11430 -> node11431 [color="black"]
    node11431_name [shape=none, label=<<font color="black">Call[11431]</font>>]
    node11431_name -> node11431 [arrowhead=none, color="black", style=dashed]
    node11431 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(getter)</font>> color="black" fillcolor="white", style=filled]
    node11431 -> node11432 [color="black"]
    node11432_name [shape=none, label=<<font color="black">Branch[11432]</font>>]
    node11432_name -> node11432 [arrowhead=none, color="black", style=dashed]
    node11432 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node11432 -> node11433 [label=<<font color="black">true</font>> color="black"]
    node11432 -> node11434 [label=<<font color="black">false</font>> color="black"]
    node11433_name [shape=none, label=<<font color="black">Block[11433]</font>>]
    node11433_name -> node11433 [arrowhead=none, color="black", style=dashed]
    node11433 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#901])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11433 -> cluster2029_exit [color="black"]
    node11434_name [shape=none, label=<<font color="black">Block[11434]</font>>]
    node11434_name -> node11434 [arrowhead=none, color="black", style=dashed]
    node11434 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor(&quot;Get&quot; -&gt; getter, &quot;Enumerable&quot; -&gt; true, &quot;Configurable&quot; -&gt; true))[#902]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11434 -> node11435 [color="black"]
    node11435_name [shape=none, label=<<font color="black">Call[11435]</font>>]
    node11435_name -> node11435 [arrowhead=none, color="black", style=dashed]
    node11435 [shape=cds, label=<<font color="black">%2 = clo&lt;ToPropertyKey&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node11435 -> node11436 [color="black"]
    node11436_name [shape=none, label=<<font color="black">Block[11436]</font>>]
    node11436_name -> node11436 [arrowhead=none, color="black", style=dashed]
    node11436 [shape=box, label=<<font color="black">[0] let key = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11436 -> node11437 [color="black"]
    node11437_name [shape=none, label=<<font color="black">Call[11437]</font>>]
    node11437_name -> node11437 [arrowhead=none, color="black", style=dashed]
    node11437 [shape=cds, label=<<font color="black">%3 = clo&lt;DefinePropertyOrThrow&gt;(O, key, desc)</font>> color="black" fillcolor="white", style=filled]
    node11437 -> node11438 [color="black"]
    node11438_name [shape=none, label=<<font color="black">Block[11438]</font>>]
    node11438_name -> node11438 [arrowhead=none, color="black", style=dashed]
    node11438 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/>[1] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11438 -> cluster2029_exit [color="black"]
  }
}