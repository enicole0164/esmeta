digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1156 {
    label = "def <INTERNAL>:ProxyExoticObject.HasProperty(O: ProxyExoticObject, P: Symbol | String): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1156_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1156_entry_name -> cluster1156_entry [arrowhead=none, color="black", style=dashed]
    cluster1156_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1156_entry -> node5166 [color="black"]
    cluster1156_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1156_exit_name -> cluster1156_exit [arrowhead=none, color="black", style=dashed]
    cluster1156_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5166_name [shape=none, label=<<font color="black">Block[5166]</font>>]
    node5166_name -> node5166 [arrowhead=none, color="black", style=dashed]
    node5166 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5166 -> node5167 [color="black"]
    node5167_name [shape=none, label=<<font color="black">Branch[5167]</font>>]
    node5167_name -> node5167 [arrowhead=none, color="black", style=dashed]
    node5167 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5167 -> node5168 [label=<<font color="black">true</font>> color="black"]
    node5167 -> node5169 [label=<<font color="black">false</font>> color="black"]
    node5168_name [shape=none, label=<<font color="black">Block[5168]</font>>]
    node5168_name -> node5168 [arrowhead=none, color="black", style=dashed]
    node5168 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#508])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5168 -> cluster1156_exit [color="black"]
    node5169_name [shape=none, label=<<font color="black">Block[5169]</font>>]
    node5169_name -> node5169 [arrowhead=none, color="black", style=dashed]
    node5169 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5169 -> node5170 [color="black"]
    node5170_name [shape=none, label=<<font color="black">Call[5170]</font>>]
    node5170_name -> node5170 [arrowhead=none, color="black", style=dashed]
    node5170 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;has&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5170 -> node5171 [color="black"]
    node5171_name [shape=none, label=<<font color="black">Block[5171]</font>>]
    node5171_name -> node5171 [arrowhead=none, color="black", style=dashed]
    node5171 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5171 -> node5172 [color="black"]
    node5172_name [shape=none, label=<<font color="black">Branch[5172]</font>>]
    node5172_name -> node5172 [arrowhead=none, color="black", style=dashed]
    node5172 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5172 -> node5173 [label=<<font color="black">true</font>> color="black"]
    node5172 -> node5175 [label=<<font color="black">false</font>> color="black"]
    node5173_name [shape=none, label=<<font color="black">Call[5173]</font>>]
    node5173_name -> node5173 [arrowhead=none, color="black", style=dashed]
    node5173 [shape=cds, label=<<font color="black">%1 = target-&gt;HasProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5173 -> node5174 [color="black"]
    node5175_name [shape=none, label=<<font color="black">Call[5175]</font>>]
    node5175_name -> node5175 [arrowhead=none, color="black", style=dashed]
    node5175 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target, P])[#509])</font>> color="black" fillcolor="white", style=filled]
    node5175 -> node5176 [color="black"]
    node5174_name [shape=none, label=<<font color="black">Block[5174]</font>>]
    node5174_name -> node5174 [arrowhead=none, color="black", style=dashed]
    node5174 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5174 -> cluster1156_exit [color="black"]
    node5176_name [shape=none, label=<<font color="black">Call[5176]</font>>]
    node5176_name -> node5176 [arrowhead=none, color="black", style=dashed]
    node5176 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBoolean&gt;([? %2])</font>> color="black" fillcolor="white", style=filled]
    node5176 -> node5177 [color="black"]
    node5177_name [shape=none, label=<<font color="black">Block[5177]</font>>]
    node5177_name -> node5177 [arrowhead=none, color="black", style=dashed]
    node5177 [shape=box, label=<<font color="black">[0] let booleanTrapResult = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5177 -> node5178 [color="black"]
    node5178_name [shape=none, label=<<font color="black">Branch[5178]</font>>]
    node5178_name -> node5178 [arrowhead=none, color="black", style=dashed]
    node5178 [shape=diamond, label=<<font color="black">(= booleanTrapResult false)</font>> color="black" fillcolor="white", style=filled]
    node5178 -> node5179 [label=<<font color="black">true</font>> color="black"]
    node5178 -> node5188 [label=<<font color="black">false</font>> color="black"]
    node5179_name [shape=none, label=<<font color="black">Call[5179]</font>>]
    node5179_name -> node5179 [arrowhead=none, color="black", style=dashed]
    node5179 [shape=cds, label=<<font color="black">%4 = target-&gt;GetOwnProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5179 -> node5180 [color="black"]
    node5188_name [shape=none, label=<<font color="black">Block[5188]</font>>]
    node5188_name -> node5188 [arrowhead=none, color="black", style=dashed]
    node5188 [shape=box, label=<<font color="black">[0] return booleanTrapResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5188 -> cluster1156_exit [color="black"]
    node5180_name [shape=none, label=<<font color="black">Block[5180]</font>>]
    node5180_name -> node5180 [arrowhead=none, color="black", style=dashed]
    node5180 [shape=box, label=<<font color="black">[0] let targetDesc = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5180 -> node5181 [color="black"]
    node5181_name [shape=none, label=<<font color="black">Branch[5181]</font>>]
    node5181_name -> node5181 [arrowhead=none, color="black", style=dashed]
    node5181 [shape=diamond, label=<<font color="black">(! (= targetDesc undefined))</font>> color="black" fillcolor="white", style=filled]
    node5181 -> node5182 [label=<<font color="black">true</font>> color="black"]
    node5181 -> node5188 [label=<<font color="black">false</font>> color="black"]
    node5182_name [shape=none, label=<<font color="black">Branch[5182]</font>>]
    node5182_name -> node5182 [arrowhead=none, color="black", style=dashed]
    node5182 [shape=diamond, label=<<font color="black">(= targetDesc.Configurable false)</font>> color="black" fillcolor="white", style=filled]
    node5182 -> node5183 [label=<<font color="black">true</font>> color="black"]
    node5182 -> node5184 [label=<<font color="black">false</font>> color="black"]
    node5183_name [shape=none, label=<<font color="black">Block[5183]</font>>]
    node5183_name -> node5183 [arrowhead=none, color="black", style=dashed]
    node5183 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#510])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5183 -> cluster1156_exit [color="black"]
    node5184_name [shape=none, label=<<font color="black">Call[5184]</font>>]
    node5184_name -> node5184 [arrowhead=none, color="black", style=dashed]
    node5184 [shape=cds, label=<<font color="black">%5 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5184 -> node5185 [color="black"]
    node5185_name [shape=none, label=<<font color="black">Block[5185]</font>>]
    node5185_name -> node5185 [arrowhead=none, color="black", style=dashed]
    node5185 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5185 -> node5186 [color="black"]
    node5186_name [shape=none, label=<<font color="black">Branch[5186]</font>>]
    node5186_name -> node5186 [arrowhead=none, color="black", style=dashed]
    node5186 [shape=diamond, label=<<font color="black">(= extensibleTarget false)</font>> color="black" fillcolor="white", style=filled]
    node5186 -> node5187 [label=<<font color="black">true</font>> color="black"]
    node5186 -> node5188 [label=<<font color="black">false</font>> color="black"]
    node5187_name [shape=none, label=<<font color="black">Block[5187]</font>>]
    node5187_name -> node5187 [arrowhead=none, color="black", style=dashed]
    node5187 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#511])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5187 -> cluster1156_exit [color="black"]
  }
}