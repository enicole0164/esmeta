digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2650 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.get(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2650_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2650_entry_name -> cluster2650_entry [arrowhead=none, color="black", style=dashed]
    cluster2650_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2650_entry -> node19702 [color="black"]
    cluster2650_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2650_exit_name -> cluster2650_exit [arrowhead=none, color="black", style=dashed]
    cluster2650_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19702_name [shape=none, label=<<font color="black">Branch[19702]</font>>]
    node19702_name -> node19702 [arrowhead=none, color="black", style=dashed]
    node19702 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19702 -> node19703 [label=<<font color="black">true</font>> color="black"]
    node19702 -> node19704 [label=<<font color="black">false</font>> color="black"]
    node19703_name [shape=none, label=<<font color="black">Block[19703]</font>>]
    node19703_name -> node19703 [arrowhead=none, color="black", style=dashed]
    node19703 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19703 -> node19705 [color="black"]
    node19704_name [shape=none, label=<<font color="black">Block[19704]</font>>]
    node19704_name -> node19704 [arrowhead=none, color="black", style=dashed]
    node19704 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19704 -> node19705 [color="black"]
    node19705_name [shape=none, label=<<font color="black">Branch[19705]</font>>]
    node19705_name -> node19705 [arrowhead=none, color="black", style=dashed]
    node19705 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19705 -> node19706 [label=<<font color="black">true</font>> color="black"]
    node19705 -> node19707 [label=<<font color="black">false</font>> color="black"]
    node19706_name [shape=none, label=<<font color="black">Block[19706]</font>>]
    node19706_name -> node19706 [arrowhead=none, color="black", style=dashed]
    node19706 [shape=box, label=<<font color="black">[0] let propertyKey = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19706 -> node19708 [color="black"]
    node19707_name [shape=none, label=<<font color="black">Block[19707]</font>>]
    node19707_name -> node19707 [arrowhead=none, color="black", style=dashed]
    node19707 [shape=box, label=<<font color="black">[0] let propertyKey = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19707 -> node19708 [color="black"]
    node19708_name [shape=none, label=<<font color="black">Branch[19708]</font>>]
    node19708_name -> node19708 [arrowhead=none, color="black", style=dashed]
    node19708 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19708 -> node19709 [label=<<font color="black">true</font>> color="black"]
    node19708 -> node19710 [label=<<font color="black">false</font>> color="black"]
    node19709_name [shape=none, label=<<font color="black">Block[19709]</font>>]
    node19709_name -> node19709 [arrowhead=none, color="black", style=dashed]
    node19709 [shape=box, label=<<font color="black">[0] let receiver = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19709 -> node19711 [color="black"]
    node19710_name [shape=none, label=<<font color="black">Block[19710]</font>>]
    node19710_name -> node19710 [arrowhead=none, color="black", style=dashed]
    node19710 [shape=box, label=<<font color="black">[0] let receiver = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19710 -> node19711 [color="black"]
    node19711_name [shape=none, label=<<font color="black">Branch[19711]</font>>]
    node19711_name -> node19711 [arrowhead=none, color="black", style=dashed]
    node19711 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19711 -> node19712 [label=<<font color="black">true</font>> color="black"]
    node19711 -> node19713 [label=<<font color="black">false</font>> color="black"]
    node19712_name [shape=none, label=<<font color="black">Block[19712]</font>>]
    node19712_name -> node19712 [arrowhead=none, color="black", style=dashed]
    node19712 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1348])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19712 -> cluster2650_exit [color="black"]
    node19713_name [shape=none, label=<<font color="black">Call[19713]</font>>]
    node19713_name -> node19713 [arrowhead=none, color="black", style=dashed]
    node19713 [shape=cds, label=<<font color="black">%0 = clo&lt;ToPropertyKey&gt;(propertyKey)</font>> color="black" fillcolor="white", style=filled]
    node19713 -> node19714 [color="black"]
    node19714_name [shape=none, label=<<font color="black">Block[19714]</font>>]
    node19714_name -> node19714 [arrowhead=none, color="black", style=dashed]
    node19714 [shape=box, label=<<font color="black">[0] let key = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19714 -> node19715 [color="black"]
    node19715_name [shape=none, label=<<font color="black">Branch[19715]</font>>]
    node19715_name -> node19715 [arrowhead=none, color="black", style=dashed]
    node19715 [shape=diamond, label=<<font color="black">(= receiver absent)</font>> color="black" fillcolor="white", style=filled]
    node19715 -> node19716 [label=<<font color="black">true</font>> color="black"]
    node19715 -> node19717 [label=<<font color="black">false</font>> color="black"]
    node19716_name [shape=none, label=<<font color="black">Block[19716]</font>>]
    node19716_name -> node19716 [arrowhead=none, color="black", style=dashed]
    node19716 [shape=box, label=<<font color="black">[0] receiver = target<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19716 -> node19717 [color="black"]
    node19717_name [shape=none, label=<<font color="black">Call[19717]</font>>]
    node19717_name -> node19717 [arrowhead=none, color="black", style=dashed]
    node19717 [shape=cds, label=<<font color="black">%1 = target-&gt;Get(key, receiver)</font>> color="black" fillcolor="white", style=filled]
    node19717 -> node19718 [color="black"]
    node19718_name [shape=none, label=<<font color="black">Block[19718]</font>>]
    node19718_name -> node19718 [arrowhead=none, color="black", style=dashed]
    node19718 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19718 -> cluster2650_exit [color="black"]
  }
}