digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1706 {
    label = "def <SYNTAX>:AsyncFunctionExpression[0,0].InstantiateAsyncFunctionExpression(this: Ast:AsyncFunctionExpression[0,0], name?: Unknown): FunctionObject"
    style = rounded
    cluster1706_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1706_entry_name -> cluster1706_entry [arrowhead=none, color="black", style=dashed]
    cluster1706_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1706_entry -> node9594 [color="black"]
    cluster1706_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1706_exit_name -> cluster1706_exit [arrowhead=none, color="black", style=dashed]
    cluster1706_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node9594_name [shape=none, label=<<font color="black">Branch[9594]</font>>]
    node9594_name -> node9594 [arrowhead=none, color="black", style=dashed]
    node9594 [shape=diamond, label=<<font color="black">(= name absent)</font>> color="black" fillcolor="white", style=filled]
    node9594 -> node9595 [label=<<font color="black">true</font>> color="black"]
    node9594 -> node9596 [label=<<font color="black">false</font>> color="black"]
    node9595_name [shape=none, label=<<font color="black">Block[9595]</font>>]
    node9595_name -> node9595 [arrowhead=none, color="black", style=dashed]
    node9595 [shape=box, label=<<font color="black">[0] name = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9595 -> node9596 [color="black"]
    node9596_name [shape=none, label=<<font color="black">Block[9596]</font>>]
    node9596_name -> node9596 [arrowhead=none, color="black", style=dashed]
    node9596 [shape=box, label=<<font color="black">[0] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[1] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[2] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9596 -> node9597 [color="black"]
    node9597_name [shape=none, label=<<font color="black">Call[9597]</font>>]
    node9597_name -> node9597 [arrowhead=none, color="black", style=dashed]
    node9597 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%AsyncFunction.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node9597 -> node9598 [color="black"]
    node9598_name [shape=none, label=<<font color="black">Block[9598]</font>>]
    node9598_name -> node9598 [arrowhead=none, color="black", style=dashed]
    node9598 [shape=box, label=<<font color="black">[0] let closure = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9598 -> node9599 [color="black"]
    node9599_name [shape=none, label=<<font color="black">Call[9599]</font>>]
    node9599_name -> node9599 [arrowhead=none, color="black", style=dashed]
    node9599 [shape=cds, label=<<font color="black">%1 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node9599 -> node9600 [color="black"]
    node9600_name [shape=none, label=<<font color="black">Block[9600]</font>>]
    node9600_name -> node9600 [arrowhead=none, color="black", style=dashed]
    node9600 [shape=box, label=<<font color="black">[0] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9600 -> cluster1706_exit [color="black"]
  }
}