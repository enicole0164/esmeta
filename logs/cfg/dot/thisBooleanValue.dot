digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2041 {
    label = "def thisBooleanValue(value: Unknown): Unknown"
    style = rounded
    cluster2041_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2041_entry_name -> cluster2041_entry [arrowhead=none, color="black", style=dashed]
    cluster2041_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2041_entry -> node11635 [color="black"]
    cluster2041_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2041_exit_name -> cluster2041_exit [arrowhead=none, color="black", style=dashed]
    cluster2041_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11635_name [shape=none, label=<<font color="black">Branch[11635]</font>>]
    node11635_name -> node11635 [arrowhead=none, color="black", style=dashed]
    node11635 [shape=diamond, label=<<font color="black">(= (typeof value) @Boolean)</font>> color="black" fillcolor="white", style=filled]
    node11635 -> node11636 [label=<<font color="black">true</font>> color="black"]
    node11635 -> node11637 [label=<<font color="black">false</font>> color="black"]
    node11636_name [shape=none, label=<<font color="black">Block[11636]</font>>]
    node11636_name -> node11636 [arrowhead=none, color="black", style=dashed]
    node11636 [shape=box, label=<<font color="black">[0] return value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11636 -> cluster2041_exit [color="black"]
    node11637_name [shape=none, label=<<font color="black">Branch[11637]</font>>]
    node11637_name -> node11637 [arrowhead=none, color="black", style=dashed]
    node11637 [shape=diamond, label=<<font color="black">(&amp;&amp; (= (typeof value) @Object) (! (= value.BooleanData absent)))</font>> color="black" fillcolor="white", style=filled]
    node11637 -> node11638 [label=<<font color="black">true</font>> color="black"]
    node11637 -> node11639 [label=<<font color="black">false</font>> color="black"]
    node11638_name [shape=none, label=<<font color="black">Block[11638]</font>>]
    node11638_name -> node11638 [arrowhead=none, color="black", style=dashed]
    node11638 [shape=box, label=<<font color="black">[0] let b = value.BooleanData<BR ALIGN="LEFT"/>[1] assert (= (typeof b) @Boolean)<BR ALIGN="LEFT"/>[2] return b<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11638 -> cluster2041_exit [color="black"]
    node11639_name [shape=none, label=<<font color="black">Block[11639]</font>>]
    node11639_name -> node11639 [arrowhead=none, color="black", style=dashed]
    node11639 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#915])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11639 -> cluster2041_exit [color="black"]
  }
}