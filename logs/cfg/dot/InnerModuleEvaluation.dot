digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1888 {
    label = "def InnerModuleEvaluation(module: ModuleRecord, stack: Unknown, index: Unknown["NonnegativeInteger"]): Unknown["EitherANormalCompletionContainingANonnegativeIntegerOrAnAbruptCompletion"]"
    style = rounded
    cluster1888_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1888_entry_name -> cluster1888_entry [arrowhead=none, color="black", style=dashed]
    cluster1888_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1888_entry -> node10160 [color="black"]
    cluster1888_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1888_exit_name -> cluster1888_exit [arrowhead=none, color="black", style=dashed]
    cluster1888_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10160_name [shape=none, label=<<font color="black">Branch[10160]</font>>]
    node10160_name -> node10160 [arrowhead=none, color="black", style=dashed]
    node10160 [shape=diamond, label=<<font color="black">(! (? module: &quot;CyclicModuleRecord&quot;))</font>> color="black" fillcolor="white", style=filled]
    node10160 -> node10161 [label=<<font color="black">true</font>> color="black"]
    node10160 -> node10167 [label=<<font color="black">false</font>> color="black"]
    node10161_name [shape=none, label=<<font color="black">Call[10161]</font>>]
    node10161_name -> node10161 [arrowhead=none, color="black", style=dashed]
    node10161 [shape=cds, label=<<font color="black">%0 = module-&gt;Evaluate()</font>> color="black" fillcolor="white", style=filled]
    node10161 -> node10162 [color="black"]
    node10167_name [shape=none, label=<<font color="black">Branch[10167]</font>>]
    node10167_name -> node10167 [arrowhead=none, color="black", style=dashed]
    node10167 [shape=diamond, label=<<font color="black">(|| (= module.Status ~evaluating-async~) (= module.Status ~evaluated~))</font>> color="black" fillcolor="white", style=filled]
    node10167 -> node10168 [label=<<font color="black">true</font>> color="black"]
    node10167 -> node10171 [label=<<font color="black">false</font>> color="black"]
    node10162_name [shape=none, label=<<font color="black">Block[10162]</font>>]
    node10162_name -> node10162 [arrowhead=none, color="black", style=dashed]
    node10162 [shape=box, label=<<font color="black">[0] let promise = [! %0]<BR ALIGN="LEFT"/>[1] assert (! (= promise.PromiseState ~pending~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10162 -> node10163 [color="black"]
    node10168_name [shape=none, label=<<font color="black">Branch[10168]</font>>]
    node10168_name -> node10168 [arrowhead=none, color="black", style=dashed]
    node10168 [shape=diamond, label=<<font color="black">(= module.EvaluationError ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node10168 -> node10169 [label=<<font color="black">true</font>> color="black"]
    node10168 -> node10170 [label=<<font color="black">false</font>> color="black"]
    node10171_name [shape=none, label=<<font color="black">Branch[10171]</font>>]
    node10171_name -> node10171 [arrowhead=none, color="black", style=dashed]
    node10171 [shape=diamond, label=<<font color="black">(= module.Status ~evaluating~)</font>> color="black" fillcolor="white", style=filled]
    node10171 -> node10172 [label=<<font color="black">true</font>> color="black"]
    node10171 -> node10173 [label=<<font color="black">false</font>> color="black"]
    node10163_name [shape=none, label=<<font color="black">Branch[10163]</font>>]
    node10163_name -> node10163 [arrowhead=none, color="black", style=dashed]
    node10163 [shape=diamond, label=<<font color="black">(= promise.PromiseState ~rejected~)</font>> color="black" fillcolor="white", style=filled]
    node10163 -> node10164 [label=<<font color="black">true</font>> color="black"]
    node10163 -> node10166 [label=<<font color="black">false</font>> color="black"]
    node10169_name [shape=none, label=<<font color="black">Block[10169]</font>>]
    node10169_name -> node10169 [arrowhead=none, color="black", style=dashed]
    node10169 [shape=box, label=<<font color="black">[0] return index<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10169 -> cluster1888_exit [color="black"]
    node10170_name [shape=none, label=<<font color="black">Block[10170]</font>>]
    node10170_name -> node10170 [arrowhead=none, color="black", style=dashed]
    node10170 [shape=box, label=<<font color="black">[0] return [? module.EvaluationError]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10170 -> cluster1888_exit [color="black"]
    node10172_name [shape=none, label=<<font color="black">Block[10172]</font>>]
    node10172_name -> node10172 [arrowhead=none, color="black", style=dashed]
    node10172 [shape=box, label=<<font color="black">[0] return index<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10172 -> cluster1888_exit [color="black"]
    node10173_name [shape=none, label=<<font color="black">Block[10173]</font>>]
    node10173_name -> node10173 [arrowhead=none, color="black", style=dashed]
    node10173 [shape=box, label=<<font color="black">[0] assert (= module.Status ~linked~)<BR ALIGN="LEFT"/>[1] module.Status = ~evaluating~<BR ALIGN="LEFT"/>[2] module.DFSIndex = index<BR ALIGN="LEFT"/>[3] module.DFSAncestorIndex = index<BR ALIGN="LEFT"/>[4] module.PendingAsyncDependencies = 0<BR ALIGN="LEFT"/>[5] index = (+ index 1)<BR ALIGN="LEFT"/>[6] push stack &lt; module<BR ALIGN="LEFT"/>[7] %3 = module.RequestedModules<BR ALIGN="LEFT"/>[8] %2 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10173 -> node10174 [color="black"]
    node10164_name [shape=none, label=<<font color="black">Call[10164]</font>>]
    node10164_name -> node10164 [arrowhead=none, color="black", style=dashed]
    node10164 [shape=cds, label=<<font color="black">%1 = clo&lt;ThrowCompletion&gt;(promise.PromiseResult)</font>> color="black" fillcolor="white", style=filled]
    node10164 -> node10165 [color="black"]
    node10166_name [shape=none, label=<<font color="black">Block[10166]</font>>]
    node10166_name -> node10166 [arrowhead=none, color="black", style=dashed]
    node10166 [shape=box, label=<<font color="black">[0] return index<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10166 -> cluster1888_exit [color="black"]
    node10174_name [shape=none, label=<<font color="black">Branch[10174]</font>>]
    node10174_name -> node10174 [arrowhead=none, color="black", style=dashed]
    node10174 [shape=diamond, label=<<font color="black">(&lt; %2 %3.length)</font>> color="black" fillcolor="white", style=filled]
    node10174 -> node10175 [label=<<font color="black">true</font>> color="black"]
    node10174 -> node10190 [label=<<font color="black">false</font>> color="black"]
    node10165_name [shape=none, label=<<font color="black">Block[10165]</font>>]
    node10165_name -> node10165 [arrowhead=none, color="black", style=dashed]
    node10165 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10165 -> cluster1888_exit [color="black"]
    node10175_name [shape=none, label=<<font color="black">Block[10175]</font>>]
    node10175_name -> node10175 [arrowhead=none, color="black", style=dashed]
    node10175 [shape=box, label=<<font color="black">[0] let required = %3[%2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10175 -> node10176 [color="black"]
    node10190_name [shape=none, label=<<font color="black">Branch[10190]</font>>]
    node10190_name -> node10190 [arrowhead=none, color="black", style=dashed]
    node10190 [shape=diamond, label=<<font color="black">(|| (&lt; 0 module.PendingAsyncDependencies) (= module.HasTLA true))</font>> color="black" fillcolor="white", style=filled]
    node10190 -> node10191 [label=<<font color="black">true</font>> color="black"]
    node10190 -> node10194 [label=<<font color="black">false</font>> color="black"]
    node10176_name [shape=none, label=<<font color="black">Call[10176]</font>>]
    node10176_name -> node10176 [arrowhead=none, color="black", style=dashed]
    node10176 [shape=cds, label=<<font color="black">%4 = clo&lt;HostResolveImportedModule&gt;(module, required)</font>> color="black" fillcolor="white", style=filled]
    node10176 -> node10177 [color="black"]
    node10191_name [shape=none, label=<<font color="black">Block[10191]</font>>]
    node10191_name -> node10191 [arrowhead=none, color="black", style=dashed]
    node10191 [shape=box, label=<<font color="black">[0] assert (yet &quot;_module_.[[AsyncEvaluation]] is *false* and was never previously set to *true*.&quot;)<BR ALIGN="LEFT"/>[1] module.AsyncEvaluation = true<BR ALIGN="LEFT"/>[2] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10191 -> node10192 [color="black"]
    node10194_name [shape=none, label=<<font color="black">Call[10194]</font>>]
    node10194_name -> node10194 [arrowhead=none, color="black", style=dashed]
    node10194 [shape=cds, label=<<font color="black">%7 = module-&gt;ExecuteModule()</font>> color="black" fillcolor="white", style=filled]
    node10194 -> node10195 [color="black"]
    node10177_name [shape=none, label=<<font color="black">Block[10177]</font>>]
    node10177_name -> node10177 [arrowhead=none, color="black", style=dashed]
    node10177 [shape=box, label=<<font color="black">[0] let requiredModule = [! %4]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10177 -> node10178 [color="black"]
    node10192_name [shape=none, label=<<font color="black">Branch[10192]</font>>]
    node10192_name -> node10192 [arrowhead=none, color="black", style=dashed]
    node10192 [shape=diamond, label=<<font color="black">(= module.PendingAsyncDependencies 0)</font>> color="black" fillcolor="white", style=filled]
    node10192 -> node10193 [label=<<font color="black">true</font>> color="black"]
    node10192 -> node10196 [label=<<font color="black">false</font>> color="black"]
    node10195_name [shape=none, label=<<font color="black">Block[10195]</font>>]
    node10195_name -> node10195 [arrowhead=none, color="black", style=dashed]
    node10195 [shape=box, label=<<font color="black">[0] [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10195 -> node10196 [color="black"]
    node10178_name [shape=none, label=<<font color="black">Call[10178]</font>>]
    node10178_name -> node10178 [arrowhead=none, color="black", style=dashed]
    node10178 [shape=cds, label=<<font color="black">%5 = clo&lt;InnerModuleEvaluation&gt;(requiredModule, stack, index)</font>> color="black" fillcolor="white", style=filled]
    node10178 -> node10179 [color="black"]
    node10193_name [shape=none, label=<<font color="black">Call[10193]</font>>]
    node10193_name -> node10193 [arrowhead=none, color="black", style=dashed]
    node10193 [shape=cds, label=<<font color="black">%6 = clo&lt;ExecuteAsyncModule&gt;(module)</font>> color="black" fillcolor="white", style=filled]
    node10193 -> node10196 [color="black"]
    node10196_name [shape=none, label=<<font color="black">Block[10196]</font>>]
    node10196_name -> node10196 [arrowhead=none, color="black", style=dashed]
    node10196 [shape=box, label=<<font color="black">[0] assert (yet &quot;_module_ occurs exactly once in _stack_.&quot;)<BR ALIGN="LEFT"/>[1] assert (! (&lt; module.DFSIndex module.DFSAncestorIndex))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10196 -> node10197 [color="black"]
    node10179_name [shape=none, label=<<font color="black">Block[10179]</font>>]
    node10179_name -> node10179 [arrowhead=none, color="black", style=dashed]
    node10179 [shape=box, label=<<font color="black">[0] index = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10179 -> node10180 [color="black"]
    node10197_name [shape=none, label=<<font color="black">Branch[10197]</font>>]
    node10197_name -> node10197 [arrowhead=none, color="black", style=dashed]
    node10197 [shape=diamond, label=<<font color="black">(== module.DFSAncestorIndex module.DFSIndex)</font>> color="black" fillcolor="white", style=filled]
    node10197 -> node10198 [label=<<font color="black">true</font>> color="black"]
    node10197 -> node10207 [label=<<font color="black">false</font>> color="black"]
    node10180_name [shape=none, label=<<font color="black">Branch[10180]</font>>]
    node10180_name -> node10180 [arrowhead=none, color="black", style=dashed]
    node10180 [shape=diamond, label=<<font color="black">(? requiredModule: &quot;CyclicModuleRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10180 -> node10181 [label=<<font color="black">true</font>> color="black"]
    node10180 -> node10189 [label=<<font color="black">false</font>> color="black"]
    node10198_name [shape=none, label=<<font color="black">Block[10198]</font>>]
    node10198_name -> node10198 [arrowhead=none, color="black", style=dashed]
    node10198 [shape=box, label=<<font color="black">[0] let done = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10198 -> node10199 [color="black"]
    node10207_name [shape=none, label=<<font color="black">Block[10207]</font>>]
    node10207_name -> node10207 [arrowhead=none, color="black", style=dashed]
    node10207 [shape=box, label=<<font color="black">[0] return index<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10207 -> cluster1888_exit [color="black"]
    node10181_name [shape=none, label=<<font color="black">Block[10181]</font>>]
    node10181_name -> node10181 [arrowhead=none, color="black", style=dashed]
    node10181 [shape=box, label=<<font color="black">[0] assert (|| (|| (= requiredModule.Status ~evaluating~) (= requiredModule.Status ~evaluating-async~)) (= requiredModule.Status ~evaluated~))<BR ALIGN="LEFT"/>[1] assert (yet &quot;_requiredModule_.[[Status]] is ~evaluating~ if and only if _requiredModule_ is in _stack_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10181 -> node10182 [color="black"]
    node10189_name [shape=none, label=<<font color="black">Block[10189]</font>>]
    node10189_name -> node10189 [arrowhead=none, color="black", style=dashed]
    node10189 [shape=box, label=<<font color="black">[0] %2 = (+ %2 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10189 -> node10174 [color="black"]
    node10199_name [shape=none, label=<<font color="black">Branch[10199]</font>>]
    node10199_name -> node10199 [arrowhead=none, color="black", style=dashed]
    node10199 [shape=diamond, label=<<font color="black">(= done false)</font>> color="black" fillcolor="white", style=filled]
    node10199 -> node10200 [label=<<font color="black">true</font>> color="black"]
    node10199 -> node10207 [label=<<font color="black">false</font>> color="black"]
    node10182_name [shape=none, label=<<font color="black">Branch[10182]</font>>]
    node10182_name -> node10182 [arrowhead=none, color="black", style=dashed]
    node10182 [shape=diamond, label=<<font color="black">(= requiredModule.Status ~evaluating~)</font>> color="black" fillcolor="white", style=filled]
    node10182 -> node10183 [label=<<font color="black">true</font>> color="black"]
    node10182 -> node10184 [label=<<font color="black">false</font>> color="black"]
    node10200_name [shape=none, label=<<font color="black">Block[10200]</font>>]
    node10200_name -> node10200 [arrowhead=none, color="black", style=dashed]
    node10200 [shape=box, label=<<font color="black">[0] (yet &quot;Let _requiredModule_ be the last element in _stack_.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Remove the last element of _stack_.&quot;)<BR ALIGN="LEFT"/>[2] assert (? requiredModule: &quot;CyclicModuleRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10200 -> node10201 [color="black"]
    node10183_name [shape=none, label=<<font color="black">Block[10183]</font>>]
    node10183_name -> node10183 [arrowhead=none, color="black", style=dashed]
    node10183 [shape=box, label=<<font color="black">[0] module.DFSAncestorIndex = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10183 -> node10187 [color="black"]
    node10184_name [shape=none, label=<<font color="black">Block[10184]</font>>]
    node10184_name -> node10184 [arrowhead=none, color="black", style=dashed]
    node10184 [shape=box, label=<<font color="black">[0] requiredModule = requiredModule.CycleRoot<BR ALIGN="LEFT"/>[1] assert (|| (= requiredModule.Status ~evaluating-async~) (= requiredModule.Status ~evaluated~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10184 -> node10185 [color="black"]
    node10201_name [shape=none, label=<<font color="black">Branch[10201]</font>>]
    node10201_name -> node10201 [arrowhead=none, color="black", style=dashed]
    node10201 [shape=diamond, label=<<font color="black">(= requiredModule.AsyncEvaluation false)</font>> color="black" fillcolor="white", style=filled]
    node10201 -> node10202 [label=<<font color="black">true</font>> color="black"]
    node10201 -> node10203 [label=<<font color="black">false</font>> color="black"]
    node10187_name [shape=none, label=<<font color="black">Branch[10187]</font>>]
    node10187_name -> node10187 [arrowhead=none, color="black", style=dashed]
    node10187 [shape=diamond, label=<<font color="black">(= requiredModule.AsyncEvaluation true)</font>> color="black" fillcolor="white", style=filled]
    node10187 -> node10188 [label=<<font color="black">true</font>> color="black"]
    node10187 -> node10189 [label=<<font color="black">false</font>> color="black"]
    node10185_name [shape=none, label=<<font color="black">Branch[10185]</font>>]
    node10185_name -> node10185 [arrowhead=none, color="black", style=dashed]
    node10185 [shape=diamond, label=<<font color="black">(! (= requiredModule.EvaluationError ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10185 -> node10186 [label=<<font color="black">true</font>> color="black"]
    node10185 -> node10187 [label=<<font color="black">false</font>> color="black"]
    node10202_name [shape=none, label=<<font color="black">Block[10202]</font>>]
    node10202_name -> node10202 [arrowhead=none, color="black", style=dashed]
    node10202 [shape=box, label=<<font color="black">[0] requiredModule.Status = ~evaluated~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10202 -> node10204 [color="black"]
    node10203_name [shape=none, label=<<font color="black">Block[10203]</font>>]
    node10203_name -> node10203 [arrowhead=none, color="black", style=dashed]
    node10203 [shape=box, label=<<font color="black">[0] requiredModule.Status = ~evaluating-async~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10203 -> node10204 [color="black"]
    node10188_name [shape=none, label=<<font color="black">Block[10188]</font>>]
    node10188_name -> node10188 [arrowhead=none, color="black", style=dashed]
    node10188 [shape=box, label=<<font color="black">[0] module.PendingAsyncDependencies = (+ module.PendingAsyncDependencies 1)<BR ALIGN="LEFT"/>[1] push requiredModule.AsyncParentModules &lt; module<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10188 -> node10189 [color="black"]
    node10186_name [shape=none, label=<<font color="black">Block[10186]</font>>]
    node10186_name -> node10186 [arrowhead=none, color="black", style=dashed]
    node10186 [shape=box, label=<<font color="black">[0] return [? requiredModule.EvaluationError]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10186 -> cluster1888_exit [color="black"]
    node10204_name [shape=none, label=<<font color="black">Branch[10204]</font>>]
    node10204_name -> node10204 [arrowhead=none, color="black", style=dashed]
    node10204 [shape=diamond, label=<<font color="black">(= requiredModule module)</font>> color="black" fillcolor="white", style=filled]
    node10204 -> node10205 [label=<<font color="black">true</font>> color="black"]
    node10204 -> node10206 [label=<<font color="black">false</font>> color="black"]
    node10205_name [shape=none, label=<<font color="black">Block[10205]</font>>]
    node10205_name -> node10205 [arrowhead=none, color="black", style=dashed]
    node10205 [shape=box, label=<<font color="black">[0] done = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10205 -> node10206 [color="black"]
    node10206_name [shape=none, label=<<font color="black">Block[10206]</font>>]
    node10206_name -> node10206 [arrowhead=none, color="black", style=dashed]
    node10206 [shape=box, label=<<font color="black">[0] requiredModule.CycleRoot = module<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10206 -> node10199 [color="black"]
  }
}