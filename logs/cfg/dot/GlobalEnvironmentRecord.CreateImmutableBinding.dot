digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1000 {
    label = "def <CONC>:GlobalEnvironmentRecord.CreateImmutableBinding(envRec: GlobalEnvironmentRecord, N: String, S: Boolean): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1000_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1000_entry_name -> cluster1000_entry [arrowhead=none, color="black", style=dashed]
    cluster1000_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1000_entry -> node3706 [color="black"]
    cluster1000_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1000_exit_name -> cluster1000_exit [arrowhead=none, color="black", style=dashed]
    cluster1000_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3706_name [shape=none, label=<<font color="black">Block[3706]</font>>]
    node3706_name -> node3706 [arrowhead=none, color="black", style=dashed]
    node3706 [shape=box, label=<<font color="black">[0] let DclRec = envRec.DeclarativeRecord<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3706 -> node3707 [color="black"]
    node3707_name [shape=none, label=<<font color="black">Call[3707]</font>>]
    node3707_name -> node3707 [arrowhead=none, color="black", style=dashed]
    node3707 [shape=cds, label=<<font color="black">%0 = DclRec-&gt;HasBinding(N)</font>> color="black" fillcolor="white", style=filled]
    node3707 -> node3708 [color="black"]
    node3708_name [shape=none, label=<<font color="black">Branch[3708]</font>>]
    node3708_name -> node3708 [arrowhead=none, color="black", style=dashed]
    node3708 [shape=diamond, label=<<font color="black">(= [! %0] true)</font>> color="black" fillcolor="white", style=filled]
    node3708 -> node3709 [label=<<font color="black">true</font>> color="black"]
    node3708 -> node3710 [label=<<font color="black">false</font>> color="black"]
    node3709_name [shape=none, label=<<font color="black">Block[3709]</font>>]
    node3709_name -> node3709 [arrowhead=none, color="black", style=dashed]
    node3709 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#378])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3709 -> cluster1000_exit [color="black"]
    node3710_name [shape=none, label=<<font color="black">Call[3710]</font>>]
    node3710_name -> node3710 [arrowhead=none, color="black", style=dashed]
    node3710 [shape=cds, label=<<font color="black">%1 = DclRec-&gt;CreateImmutableBinding(N, S)</font>> color="black" fillcolor="white", style=filled]
    node3710 -> node3711 [color="black"]
    node3711_name [shape=none, label=<<font color="black">Block[3711]</font>>]
    node3711_name -> node3711 [arrowhead=none, color="black", style=dashed]
    node3711 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3711 -> cluster1000_exit [color="black"]
  }
}