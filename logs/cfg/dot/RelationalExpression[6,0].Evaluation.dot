digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1324 {
    label = "def <SYNTAX>:RelationalExpression[6,0].Evaluation(this: Ast:RelationalExpression[6,0]): Unknown"
    style = rounded
    cluster1324_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1324_entry_name -> cluster1324_entry [arrowhead=none, color="black", style=dashed]
    cluster1324_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1324_entry -> node6369 [color="black"]
    cluster1324_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1324_exit_name -> cluster1324_exit [arrowhead=none, color="black", style=dashed]
    cluster1324_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6369_name [shape=none, label=<<font color="black">Call[6369]</font>>]
    node6369_name -> node6369 [arrowhead=none, color="black", style=dashed]
    node6369 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6369 -> node6370 [color="black"]
    node6370_name [shape=none, label=<<font color="black">Block[6370]</font>>]
    node6370_name -> node6370 [arrowhead=none, color="black", style=dashed]
    node6370 [shape=box, label=<<font color="black">[0] let lref = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6370 -> node6371 [color="black"]
    node6371_name [shape=none, label=<<font color="black">Call[6371]</font>>]
    node6371_name -> node6371 [arrowhead=none, color="black", style=dashed]
    node6371 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(lref)</font>> color="black" fillcolor="white", style=filled]
    node6371 -> node6372 [color="black"]
    node6372_name [shape=none, label=<<font color="black">Block[6372]</font>>]
    node6372_name -> node6372 [arrowhead=none, color="black", style=dashed]
    node6372 [shape=box, label=<<font color="black">[0] let lval = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6372 -> node6373 [color="black"]
    node6373_name [shape=none, label=<<font color="black">Call[6373]</font>>]
    node6373_name -> node6373 [arrowhead=none, color="black", style=dashed]
    node6373 [shape=cds, label=<<font color="black">%2 = this[1]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6373 -> node6374 [color="black"]
    node6374_name [shape=none, label=<<font color="black">Block[6374]</font>>]
    node6374_name -> node6374 [arrowhead=none, color="black", style=dashed]
    node6374 [shape=box, label=<<font color="black">[0] let rref = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6374 -> node6375 [color="black"]
    node6375_name [shape=none, label=<<font color="black">Call[6375]</font>>]
    node6375_name -> node6375 [arrowhead=none, color="black", style=dashed]
    node6375 [shape=cds, label=<<font color="black">%3 = clo&lt;GetValue&gt;(rref)</font>> color="black" fillcolor="white", style=filled]
    node6375 -> node6376 [color="black"]
    node6376_name [shape=none, label=<<font color="black">Block[6376]</font>>]
    node6376_name -> node6376 [arrowhead=none, color="black", style=dashed]
    node6376 [shape=box, label=<<font color="black">[0] let rval = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6376 -> node6377 [color="black"]
    node6377_name [shape=none, label=<<font color="black">Branch[6377]</font>>]
    node6377_name -> node6377 [arrowhead=none, color="black", style=dashed]
    node6377 [shape=diamond, label=<<font color="black">(! (= (typeof rval) @Object))</font>> color="black" fillcolor="white", style=filled]
    node6377 -> node6378 [label=<<font color="black">true</font>> color="black"]
    node6377 -> node6379 [label=<<font color="black">false</font>> color="black"]
    node6378_name [shape=none, label=<<font color="black">Block[6378]</font>>]
    node6378_name -> node6378 [arrowhead=none, color="black", style=dashed]
    node6378 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#588])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6378 -> cluster1324_exit [color="black"]
    node6379_name [shape=none, label=<<font color="black">Call[6379]</font>>]
    node6379_name -> node6379 [arrowhead=none, color="black", style=dashed]
    node6379 [shape=cds, label=<<font color="black">%4 = clo&lt;ToPropertyKey&gt;(lval)</font>> color="black" fillcolor="white", style=filled]
    node6379 -> node6380 [color="black"]
    node6380_name [shape=none, label=<<font color="black">Call[6380]</font>>]
    node6380_name -> node6380 [arrowhead=none, color="black", style=dashed]
    node6380 [shape=cds, label=<<font color="black">%5 = clo&lt;HasProperty&gt;(rval, [? %4])</font>> color="black" fillcolor="white", style=filled]
    node6380 -> node6381 [color="black"]
    node6381_name [shape=none, label=<<font color="black">Block[6381]</font>>]
    node6381_name -> node6381 [arrowhead=none, color="black", style=dashed]
    node6381 [shape=box, label=<<font color="black">[0] return [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6381 -> cluster1324_exit [color="black"]
  }
}