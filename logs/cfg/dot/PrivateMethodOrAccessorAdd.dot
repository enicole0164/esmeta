digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster157 {
    label = "def PrivateMethodOrAccessorAdd(O: Object, method: PrivateElement): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster157_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster157_entry_name -> cluster157_entry [arrowhead=none, color="black", style=dashed]
    cluster157_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster157_entry -> node1343 [color="black"]
    cluster157_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster157_exit_name -> cluster157_exit [arrowhead=none, color="black", style=dashed]
    cluster157_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1343_name [shape=none, label=<<font color="black">Block[1343]</font>>]
    node1343_name -> node1343 [arrowhead=none, color="black", style=dashed]
    node1343 [shape=box, label=<<font color="black">[0] assert (|| (= method.Kind ~method~) (= method.Kind ~accessor~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1343 -> node1344 [color="black"]
    node1344_name [shape=none, label=<<font color="black">Call[1344]</font>>]
    node1344_name -> node1344 [arrowhead=none, color="black", style=dashed]
    node1344 [shape=cds, label=<<font color="black">%0 = clo&lt;PrivateElementFind&gt;(O, method.Key)</font>> color="black" fillcolor="white", style=filled]
    node1344 -> node1345 [color="black"]
    node1345_name [shape=none, label=<<font color="black">Block[1345]</font>>]
    node1345_name -> node1345 [arrowhead=none, color="black", style=dashed]
    node1345 [shape=box, label=<<font color="black">[0] let entry = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1345 -> node1346 [color="black"]
    node1346_name [shape=none, label=<<font color="black">Branch[1346]</font>>]
    node1346_name -> node1346 [arrowhead=none, color="black", style=dashed]
    node1346 [shape=diamond, label=<<font color="black">(! (= entry ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node1346 -> node1347 [label=<<font color="black">true</font>> color="black"]
    node1346 -> node1348 [label=<<font color="black">false</font>> color="black"]
    node1347_name [shape=none, label=<<font color="black">Block[1347]</font>>]
    node1347_name -> node1347 [arrowhead=none, color="black", style=dashed]
    node1347 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#67])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1347 -> cluster157_exit [color="black"]
    node1348_name [shape=none, label=<<font color="black">Block[1348]</font>>]
    node1348_name -> node1348 [arrowhead=none, color="black", style=dashed]
    node1348 [shape=box, label=<<font color="black">[0] push O.PrivateElements &lt; method<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1348 -> cluster157_exit [color="black"]
  }
}