digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1131 {
    label = "def <INTERNAL>:IntegerIndexedExoticObject.OwnPropertyKeys(O: IntegerIndexedExoticObject): Normal[List[Symbol | String]]"
    style = rounded
    cluster1131_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1131_entry_name -> cluster1131_entry [arrowhead=none, color="black", style=dashed]
    cluster1131_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1131_entry -> node4878 [color="black"]
    cluster1131_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1131_exit_name -> cluster1131_exit [arrowhead=none, color="black", style=dashed]
    cluster1131_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4878_name [shape=none, label=<<font color="black">Block[4878]</font>>]
    node4878_name -> node4878 [arrowhead=none, color="black", style=dashed]
    node4878 [shape=box, label=<<font color="black">[0] let keys = (new [])[#474]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4878 -> node4879 [color="black"]
    node4879_name [shape=none, label=<<font color="black">Call[4879]</font>>]
    node4879_name -> node4879 [arrowhead=none, color="black", style=dashed]
    node4879 [shape=cds, label=<<font color="black">%0 = clo&lt;IsDetachedBuffer&gt;(O.ViewedArrayBuffer)</font>> color="black" fillcolor="white", style=filled]
    node4879 -> node4880 [color="black"]
    node4880_name [shape=none, label=<<font color="black">Branch[4880]</font>>]
    node4880_name -> node4880 [arrowhead=none, color="black", style=dashed]
    node4880 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node4880 -> node4881 [label=<<font color="black">true</font>> color="black"]
    node4880 -> node4885 [label=<<font color="black">false</font>> color="black"]
    node4881_name [shape=none, label=<<font color="black">Block[4881]</font>>]
    node4881_name -> node4881 [arrowhead=none, color="black", style=dashed]
    node4881 [shape=box, label=<<font color="black">[0] let i = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4881 -> node4882 [color="black"]
    node4885_name [shape=none, label=<<font color="black">Block[4885]</font>>]
    node4885_name -> node4885 [arrowhead=none, color="black", style=dashed]
    node4885 [shape=box, label=<<font color="black">[0] (yet &quot;For each own property key _P_ of _O_ such that Type(_P_) is String and _P_ is not an integer index, in ascending chronological order of property creation, do\n  1. Append _P_ to _keys_.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;For each own property key _P_ of _O_ such that Type(_P_) is Symbol, in ascending chronological order of property creation, do\n  1. Append _P_ to _keys_.&quot;)<BR ALIGN="LEFT"/>[2] return keys<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4885 -> cluster1131_exit [color="black"]
    node4882_name [shape=none, label=<<font color="black">Branch[4882]</font>>]
    node4882_name -> node4882 [arrowhead=none, color="black", style=dashed]
    node4882 [shape=diamond, label=<<font color="black">(&lt; i O.ArrayLength)</font>> color="black" fillcolor="white", style=filled]
    node4882 -> node4883 [label=<<font color="black">true</font>> color="black"]
    node4882 -> node4885 [label=<<font color="black">false</font>> color="black"]
    node4883_name [shape=none, label=<<font color="black">Call[4883]</font>>]
    node4883_name -> node4883 [arrowhead=none, color="black", style=dashed]
    node4883 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(([number] i))</font>> color="black" fillcolor="white", style=filled]
    node4883 -> node4884 [color="black"]
    node4884_name [shape=none, label=<<font color="black">Block[4884]</font>>]
    node4884_name -> node4884 [arrowhead=none, color="black", style=dashed]
    node4884 [shape=box, label=<<font color="black">[0] push keys &lt; [! %1]<BR ALIGN="LEFT"/>[1] i = (+ i 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4884 -> node4882 [color="black"]
  }
}