digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1596 {
    label = "def <SYNTAX>:MethodDefinition[5,0].MethodDefinitionEvaluation(this: Ast:MethodDefinition[5,0], object: Unknown, enumerable: Unknown): Normal[PrivateElement | Const[~unused~]] | Abrupt"
    style = rounded
    cluster1596_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1596_entry_name -> cluster1596_entry [arrowhead=none, color="black", style=dashed]
    cluster1596_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1596_entry -> node8531 [color="black"]
    cluster1596_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1596_exit_name -> cluster1596_exit [arrowhead=none, color="black", style=dashed]
    cluster1596_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8531_name [shape=none, label=<<font color="black">Call[8531]</font>>]
    node8531_name -> node8531 [arrowhead=none, color="black", style=dashed]
    node8531 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node8531 -> node8532 [color="black"]
    node8532_name [shape=none, label=<<font color="black">Block[8532]</font>>]
    node8532_name -> node8532 [arrowhead=none, color="black", style=dashed]
    node8532 [shape=box, label=<<font color="black">[0] let propKey = %0<BR ALIGN="LEFT"/>[1] [? propKey]<BR ALIGN="LEFT"/>[2] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[3] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[4] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8532 -> node8533 [color="black"]
    node8533_name [shape=none, label=<<font color="black">Call[8533]</font>>]
    node8533_name -> node8533 [arrowhead=none, color="black", style=dashed]
    node8533 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Function.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8533 -> node8534 [color="black"]
    node8534_name [shape=none, label=<<font color="black">Block[8534]</font>>]
    node8534_name -> node8534 [arrowhead=none, color="black", style=dashed]
    node8534 [shape=box, label=<<font color="black">[0] let closure = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8534 -> node8535 [color="black"]
    node8535_name [shape=none, label=<<font color="black">Call[8535]</font>>]
    node8535_name -> node8535 [arrowhead=none, color="black", style=dashed]
    node8535 [shape=cds, label=<<font color="black">%2 = clo&lt;MakeMethod&gt;(closure, object)</font>> color="black" fillcolor="white", style=filled]
    node8535 -> node8536 [color="black"]
    node8536_name [shape=none, label=<<font color="black">Call[8536]</font>>]
    node8536_name -> node8536 [arrowhead=none, color="black", style=dashed]
    node8536 [shape=cds, label=<<font color="black">%3 = clo&lt;SetFunctionName&gt;(closure, propKey, &quot;set&quot;)</font>> color="black" fillcolor="white", style=filled]
    node8536 -> node8537 [color="black"]
    node8537_name [shape=none, label=<<font color="black">Branch[8537]</font>>]
    node8537_name -> node8537 [arrowhead=none, color="black", style=dashed]
    node8537 [shape=diamond, label=<<font color="black">(? propKey: &quot;PrivateName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node8537 -> node8538 [label=<<font color="black">true</font>> color="black"]
    node8537 -> node8539 [label=<<font color="black">false</font>> color="black"]
    node8538_name [shape=none, label=<<font color="black">Block[8538]</font>>]
    node8538_name -> node8538 [arrowhead=none, color="black", style=dashed]
    node8538 [shape=box, label=<<font color="black">[0] return (new PrivateElement(&quot;Key&quot; -&gt; propKey, &quot;Kind&quot; -&gt; ~accessor~, &quot;Get&quot; -&gt; undefined, &quot;Set&quot; -&gt; closure))[#654]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8538 -> cluster1596_exit [color="black"]
    node8539_name [shape=none, label=<<font color="black">Block[8539]</font>>]
    node8539_name -> node8539 [arrowhead=none, color="black", style=dashed]
    node8539 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor(&quot;Set&quot; -&gt; closure, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))[#655]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8539 -> node8540 [color="black"]
    node8540_name [shape=none, label=<<font color="black">Call[8540]</font>>]
    node8540_name -> node8540 [arrowhead=none, color="black", style=dashed]
    node8540 [shape=cds, label=<<font color="black">%4 = clo&lt;DefinePropertyOrThrow&gt;(object, propKey, desc)</font>> color="black" fillcolor="white", style=filled]
    node8540 -> node8541 [color="black"]
    node8541_name [shape=none, label=<<font color="black">Block[8541]</font>>]
    node8541_name -> node8541 [arrowhead=none, color="black", style=dashed]
    node8541 [shape=box, label=<<font color="black">[0] [? %4]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8541 -> cluster1596_exit [color="black"]
  }
}