digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2080 {
    label = "def <BUILTIN>:INTRINSICS.Math.asinh(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2080_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2080_entry_name -> cluster2080_entry [arrowhead=none, color="black", style=dashed]
    cluster2080_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2080_entry -> node12045 [color="black"]
    cluster2080_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2080_exit_name -> cluster2080_exit [arrowhead=none, color="black", style=dashed]
    cluster2080_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12045_name [shape=none, label=<<font color="black">Branch[12045]</font>>]
    node12045_name -> node12045 [arrowhead=none, color="black", style=dashed]
    node12045 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12045 -> node12046 [label=<<font color="black">true</font>> color="black"]
    node12045 -> node12047 [label=<<font color="black">false</font>> color="black"]
    node12046_name [shape=none, label=<<font color="black">Block[12046]</font>>]
    node12046_name -> node12046 [arrowhead=none, color="black", style=dashed]
    node12046 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12046 -> node12048 [color="black"]
    node12047_name [shape=none, label=<<font color="black">Block[12047]</font>>]
    node12047_name -> node12047 [arrowhead=none, color="black", style=dashed]
    node12047 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12047 -> node12048 [color="black"]
    node12048_name [shape=none, label=<<font color="black">Call[12048]</font>>]
    node12048_name -> node12048 [arrowhead=none, color="black", style=dashed]
    node12048 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12048 -> node12049 [color="black"]
    node12049_name [shape=none, label=<<font color="black">Block[12049]</font>>]
    node12049_name -> node12049 [arrowhead=none, color="black", style=dashed]
    node12049 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12049 -> node12050 [color="black"]
    node12050_name [shape=none, label=<<font color="black">Branch[12050]</font>>]
    node12050_name -> node12050 [arrowhead=none, color="black", style=dashed]
    node12050 [shape=diamond, label=<<font color="black">(|| (= n NaN) (|| (= n 0.0f) (|| (= n -0.0f) (|| (= n +INF) (= n -INF)))))</font>> color="black" fillcolor="white", style=filled]
    node12050 -> node12051 [label=<<font color="black">true</font>> color="black"]
    node12050 -> node12052 [label=<<font color="black">false</font>> color="black"]
    node12051_name [shape=none, label=<<font color="black">Block[12051]</font>>]
    node12051_name -> node12051 [arrowhead=none, color="black", style=dashed]
    node12051 [shape=box, label=<<font color="black">[0] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12051 -> cluster2080_exit [color="black"]
    node12052_name [shape=none, label=<<font color="black">Block[12052]</font>>]
    node12052_name -> node12052 [arrowhead=none, color="black", style=dashed]
    node12052 [shape=box, label=<<font color="black">[0] return ([approx-number] ([math:asinh] ([math] n)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12052 -> cluster2080_exit [color="black"]
  }
}