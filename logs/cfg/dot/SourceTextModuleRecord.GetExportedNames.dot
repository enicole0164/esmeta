digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1896 {
    label = "def <CONC>:SourceTextModuleRecord.GetExportedNames(module: SourceTextModuleRecord, exportStarSet?: Unknown["ListOfSourceTextModuleRecords"]): Normal[List[String | Null]] | Abrupt"
    style = rounded
    cluster1896_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1896_entry_name -> cluster1896_entry [arrowhead=none, color="black", style=dashed]
    cluster1896_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1896_entry -> node10303 [color="black"]
    cluster1896_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1896_exit_name -> cluster1896_exit [arrowhead=none, color="black", style=dashed]
    cluster1896_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10303_name [shape=none, label=<<font color="black">Branch[10303]</font>>]
    node10303_name -> node10303 [arrowhead=none, color="black", style=dashed]
    node10303 [shape=diamond, label=<<font color="black">(= exportStarSet absent)</font>> color="black" fillcolor="white", style=filled]
    node10303 -> node10304 [label=<<font color="black">true</font>> color="black"]
    node10303 -> node10305 [label=<<font color="black">false</font>> color="black"]
    node10304_name [shape=none, label=<<font color="black">Block[10304]</font>>]
    node10304_name -> node10304 [arrowhead=none, color="black", style=dashed]
    node10304 [shape=box, label=<<font color="black">[0] exportStarSet = (new [])[#785]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10304 -> node10305 [color="black"]
    node10305_name [shape=none, label=<<font color="black">Branch[10305]</font>>]
    node10305_name -> node10305 [arrowhead=none, color="black", style=dashed]
    node10305 [shape=diamond, label=<<font color="black">(contains exportStarSet module)</font>> color="black" fillcolor="white", style=filled]
    node10305 -> node10306 [label=<<font color="black">true</font>> color="black"]
    node10305 -> node10307 [label=<<font color="black">false</font>> color="black"]
    node10306_name [shape=none, label=<<font color="black">Block[10306]</font>>]
    node10306_name -> node10306 [arrowhead=none, color="black", style=dashed]
    node10306 [shape=box, label=<<font color="black">[0] assert (yet &quot;We've reached the starting point of an `export *` circularity.&quot;)<BR ALIGN="LEFT"/>[1] return (new [])[#786]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10306 -> cluster1896_exit [color="black"]
    node10307_name [shape=none, label=<<font color="black">Block[10307]</font>>]
    node10307_name -> node10307 [arrowhead=none, color="black", style=dashed]
    node10307 [shape=box, label=<<font color="black">[0] push exportStarSet &lt; module<BR ALIGN="LEFT"/>[1] let exportedNames = (new [])[#787]<BR ALIGN="LEFT"/>[2] %1 = module.LocalExportEntries<BR ALIGN="LEFT"/>[3] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10307 -> node10308 [color="black"]
    node10308_name [shape=none, label=<<font color="black">Branch[10308]</font>>]
    node10308_name -> node10308 [arrowhead=none, color="black", style=dashed]
    node10308 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node10308 -> node10309 [label=<<font color="black">true</font>> color="black"]
    node10308 -> node10310 [label=<<font color="black">false</font>> color="black"]
    node10309_name [shape=none, label=<<font color="black">Block[10309]</font>>]
    node10309_name -> node10309 [arrowhead=none, color="black", style=dashed]
    node10309 [shape=box, label=<<font color="black">[0] let e = %1[%0]<BR ALIGN="LEFT"/>[1] assert (yet &quot;_module_ provides the direct binding for this export.&quot;)<BR ALIGN="LEFT"/>[2] push exportedNames &lt; e.ExportName<BR ALIGN="LEFT"/>[3] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10309 -> node10308 [color="black"]
    node10310_name [shape=none, label=<<font color="black">Block[10310]</font>>]
    node10310_name -> node10310 [arrowhead=none, color="black", style=dashed]
    node10310 [shape=box, label=<<font color="black">[0] %3 = module.IndirectExportEntries<BR ALIGN="LEFT"/>[1] %2 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10310 -> node10311 [color="black"]
    node10311_name [shape=none, label=<<font color="black">Branch[10311]</font>>]
    node10311_name -> node10311 [arrowhead=none, color="black", style=dashed]
    node10311 [shape=diamond, label=<<font color="black">(&lt; %2 %3.length)</font>> color="black" fillcolor="white", style=filled]
    node10311 -> node10312 [label=<<font color="black">true</font>> color="black"]
    node10311 -> node10313 [label=<<font color="black">false</font>> color="black"]
    node10312_name [shape=none, label=<<font color="black">Block[10312]</font>>]
    node10312_name -> node10312 [arrowhead=none, color="black", style=dashed]
    node10312 [shape=box, label=<<font color="black">[0] let e = %3[%2]<BR ALIGN="LEFT"/>[1] assert (yet &quot;_module_ imports a specific binding for this export.&quot;)<BR ALIGN="LEFT"/>[2] push exportedNames &lt; e.ExportName<BR ALIGN="LEFT"/>[3] %2 = (+ %2 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10312 -> node10311 [color="black"]
    node10313_name [shape=none, label=<<font color="black">Block[10313]</font>>]
    node10313_name -> node10313 [arrowhead=none, color="black", style=dashed]
    node10313 [shape=box, label=<<font color="black">[0] %5 = module.StarExportEntries<BR ALIGN="LEFT"/>[1] %4 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10313 -> node10314 [color="black"]
    node10314_name [shape=none, label=<<font color="black">Branch[10314]</font>>]
    node10314_name -> node10314 [arrowhead=none, color="black", style=dashed]
    node10314 [shape=diamond, label=<<font color="black">(&lt; %4 %5.length)</font>> color="black" fillcolor="white", style=filled]
    node10314 -> node10315 [label=<<font color="black">true</font>> color="black"]
    node10314 -> node10328 [label=<<font color="black">false</font>> color="black"]
    node10315_name [shape=none, label=<<font color="black">Block[10315]</font>>]
    node10315_name -> node10315 [arrowhead=none, color="black", style=dashed]
    node10315 [shape=box, label=<<font color="black">[0] let e = %5[%4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10315 -> node10316 [color="black"]
    node10328_name [shape=none, label=<<font color="black">Block[10328]</font>>]
    node10328_name -> node10328 [arrowhead=none, color="black", style=dashed]
    node10328 [shape=box, label=<<font color="black">[0] return exportedNames<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10328 -> cluster1896_exit [color="black"]
    node10316_name [shape=none, label=<<font color="black">Call[10316]</font>>]
    node10316_name -> node10316 [arrowhead=none, color="black", style=dashed]
    node10316 [shape=cds, label=<<font color="black">%6 = clo&lt;HostResolveImportedModule&gt;(module, e.ModuleRequest)</font>> color="black" fillcolor="white", style=filled]
    node10316 -> node10317 [color="black"]
    node10317_name [shape=none, label=<<font color="black">Block[10317]</font>>]
    node10317_name -> node10317 [arrowhead=none, color="black", style=dashed]
    node10317 [shape=box, label=<<font color="black">[0] let requestedModule = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10317 -> node10318 [color="black"]
    node10318_name [shape=none, label=<<font color="black">Call[10318]</font>>]
    node10318_name -> node10318 [arrowhead=none, color="black", style=dashed]
    node10318 [shape=cds, label=<<font color="black">%7 = requestedModule-&gt;GetExportedNames(exportStarSet)</font>> color="black" fillcolor="white", style=filled]
    node10318 -> node10319 [color="black"]
    node10319_name [shape=none, label=<<font color="black">Block[10319]</font>>]
    node10319_name -> node10319 [arrowhead=none, color="black", style=dashed]
    node10319 [shape=box, label=<<font color="black">[0] let starNames = [? %7]<BR ALIGN="LEFT"/>[1] %9 = starNames<BR ALIGN="LEFT"/>[2] %8 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10319 -> node10320 [color="black"]
    node10320_name [shape=none, label=<<font color="black">Branch[10320]</font>>]
    node10320_name -> node10320 [arrowhead=none, color="black", style=dashed]
    node10320 [shape=diamond, label=<<font color="black">(&lt; %8 %9.length)</font>> color="black" fillcolor="white", style=filled]
    node10320 -> node10321 [label=<<font color="black">true</font>> color="black"]
    node10320 -> node10327 [label=<<font color="black">false</font>> color="black"]
    node10321_name [shape=none, label=<<font color="black">Block[10321]</font>>]
    node10321_name -> node10321 [arrowhead=none, color="black", style=dashed]
    node10321 [shape=box, label=<<font color="black">[0] let n = %9[%8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10321 -> node10322 [color="black"]
    node10327_name [shape=none, label=<<font color="black">Block[10327]</font>>]
    node10327_name -> node10327 [arrowhead=none, color="black", style=dashed]
    node10327 [shape=box, label=<<font color="black">[0] %4 = (+ %4 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10327 -> node10314 [color="black"]
    node10322_name [shape=none, label=<<font color="black">Call[10322]</font>>]
    node10322_name -> node10322 [arrowhead=none, color="black", style=dashed]
    node10322 [shape=cds, label=<<font color="black">%10 = clo&lt;SameValue&gt;(n, &quot;default&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10322 -> node10323 [color="black"]
    node10323_name [shape=none, label=<<font color="black">Branch[10323]</font>>]
    node10323_name -> node10323 [arrowhead=none, color="black", style=dashed]
    node10323 [shape=diamond, label=<<font color="black">(= %10 false)</font>> color="black" fillcolor="white", style=filled]
    node10323 -> node10324 [label=<<font color="black">true</font>> color="black"]
    node10323 -> node10326 [label=<<font color="black">false</font>> color="black"]
    node10324_name [shape=none, label=<<font color="black">Branch[10324]</font>>]
    node10324_name -> node10324 [arrowhead=none, color="black", style=dashed]
    node10324 [shape=diamond, label=<<font color="black">(! (contains exportedNames n))</font>> color="black" fillcolor="white", style=filled]
    node10324 -> node10325 [label=<<font color="black">true</font>> color="black"]
    node10324 -> node10326 [label=<<font color="black">false</font>> color="black"]
    node10326_name [shape=none, label=<<font color="black">Block[10326]</font>>]
    node10326_name -> node10326 [arrowhead=none, color="black", style=dashed]
    node10326 [shape=box, label=<<font color="black">[0] %8 = (+ %8 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10326 -> node10320 [color="black"]
    node10325_name [shape=none, label=<<font color="black">Block[10325]</font>>]
    node10325_name -> node10325 [arrowhead=none, color="black", style=dashed]
    node10325 [shape=box, label=<<font color="black">[0] push exportedNames &lt; n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10325 -> node10326 [color="black"]
  }
}