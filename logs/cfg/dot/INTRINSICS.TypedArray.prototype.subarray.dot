digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2417 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.subarray(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2417_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2417_entry_name -> cluster2417_entry [arrowhead=none, color="black", style=dashed]
    cluster2417_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2417_entry -> node16653 [color="black"]
    cluster2417_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2417_exit_name -> cluster2417_exit [arrowhead=none, color="black", style=dashed]
    cluster2417_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16653_name [shape=none, label=<<font color="black">Branch[16653]</font>>]
    node16653_name -> node16653 [arrowhead=none, color="black", style=dashed]
    node16653 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16653 -> node16654 [label=<<font color="black">true</font>> color="black"]
    node16653 -> node16655 [label=<<font color="black">false</font>> color="black"]
    node16654_name [shape=none, label=<<font color="black">Block[16654]</font>>]
    node16654_name -> node16654 [arrowhead=none, color="black", style=dashed]
    node16654 [shape=box, label=<<font color="black">[0] let begin = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16654 -> node16656 [color="black"]
    node16655_name [shape=none, label=<<font color="black">Block[16655]</font>>]
    node16655_name -> node16655 [arrowhead=none, color="black", style=dashed]
    node16655 [shape=box, label=<<font color="black">[0] let begin = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16655 -> node16656 [color="black"]
    node16656_name [shape=none, label=<<font color="black">Branch[16656]</font>>]
    node16656_name -> node16656 [arrowhead=none, color="black", style=dashed]
    node16656 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16656 -> node16657 [label=<<font color="black">true</font>> color="black"]
    node16656 -> node16658 [label=<<font color="black">false</font>> color="black"]
    node16657_name [shape=none, label=<<font color="black">Block[16657]</font>>]
    node16657_name -> node16657 [arrowhead=none, color="black", style=dashed]
    node16657 [shape=box, label=<<font color="black">[0] let end = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16657 -> node16659 [color="black"]
    node16658_name [shape=none, label=<<font color="black">Block[16658]</font>>]
    node16658_name -> node16658 [arrowhead=none, color="black", style=dashed]
    node16658 [shape=box, label=<<font color="black">[0] let end = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16658 -> node16659 [color="black"]
    node16659_name [shape=none, label=<<font color="black">Block[16659]</font>>]
    node16659_name -> node16659 [arrowhead=none, color="black", style=dashed]
    node16659 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16659 -> node16660 [color="black"]
    node16660_name [shape=none, label=<<font color="black">Call[16660]</font>>]
    node16660_name -> node16660 [arrowhead=none, color="black", style=dashed]
    node16660 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;TypedArrayName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node16660 -> node16661 [color="black"]
    node16661_name [shape=none, label=<<font color="black">Block[16661]</font>>]
    node16661_name -> node16661 [arrowhead=none, color="black", style=dashed]
    node16661 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= O.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/>[2] let buffer = O.ViewedArrayBuffer<BR ALIGN="LEFT"/>[3] let srcLength = O.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16661 -> node16662 [color="black"]
    node16662_name [shape=none, label=<<font color="black">Call[16662]</font>>]
    node16662_name -> node16662 [arrowhead=none, color="black", style=dashed]
    node16662 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIntegerOrInfinity&gt;(begin)</font>> color="black" fillcolor="white", style=filled]
    node16662 -> node16663 [color="black"]
    node16663_name [shape=none, label=<<font color="black">Block[16663]</font>>]
    node16663_name -> node16663 [arrowhead=none, color="black", style=dashed]
    node16663 [shape=box, label=<<font color="black">[0] let relativeBegin = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16663 -> node16664 [color="black"]
    node16664_name [shape=none, label=<<font color="black">Branch[16664]</font>>]
    node16664_name -> node16664 [arrowhead=none, color="black", style=dashed]
    node16664 [shape=diamond, label=<<font color="black">(= relativeBegin -INF)</font>> color="black" fillcolor="white", style=filled]
    node16664 -> node16665 [label=<<font color="black">true</font>> color="black"]
    node16664 -> node16666 [label=<<font color="black">false</font>> color="black"]
    node16665_name [shape=none, label=<<font color="black">Block[16665]</font>>]
    node16665_name -> node16665 [arrowhead=none, color="black", style=dashed]
    node16665 [shape=box, label=<<font color="black">[0] let beginIndex = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16665 -> node16669 [color="black"]
    node16666_name [shape=none, label=<<font color="black">Branch[16666]</font>>]
    node16666_name -> node16666 [arrowhead=none, color="black", style=dashed]
    node16666 [shape=diamond, label=<<font color="black">(&lt; relativeBegin 0)</font>> color="black" fillcolor="white", style=filled]
    node16666 -> node16667 [label=<<font color="black">true</font>> color="black"]
    node16666 -> node16668 [label=<<font color="black">false</font>> color="black"]
    node16669_name [shape=none, label=<<font color="black">Branch[16669]</font>>]
    node16669_name -> node16669 [arrowhead=none, color="black", style=dashed]
    node16669 [shape=diamond, label=<<font color="black">(= end undefined)</font>> color="black" fillcolor="white", style=filled]
    node16669 -> node16670 [label=<<font color="black">true</font>> color="black"]
    node16669 -> node16671 [label=<<font color="black">false</font>> color="black"]
    node16667_name [shape=none, label=<<font color="black">Block[16667]</font>>]
    node16667_name -> node16667 [arrowhead=none, color="black", style=dashed]
    node16667 [shape=box, label=<<font color="black">[0] let beginIndex = (max (+ srcLength relativeBegin) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16667 -> node16669 [color="black"]
    node16668_name [shape=none, label=<<font color="black">Block[16668]</font>>]
    node16668_name -> node16668 [arrowhead=none, color="black", style=dashed]
    node16668 [shape=box, label=<<font color="black">[0] let beginIndex = (min relativeBegin srcLength)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16668 -> node16669 [color="black"]
    node16670_name [shape=none, label=<<font color="black">Block[16670]</font>>]
    node16670_name -> node16670 [arrowhead=none, color="black", style=dashed]
    node16670 [shape=box, label=<<font color="black">[0] let relativeEnd = srcLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16670 -> node16673 [color="black"]
    node16671_name [shape=none, label=<<font color="black">Call[16671]</font>>]
    node16671_name -> node16671 [arrowhead=none, color="black", style=dashed]
    node16671 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(end)</font>> color="black" fillcolor="white", style=filled]
    node16671 -> node16672 [color="black"]
    node16673_name [shape=none, label=<<font color="black">Branch[16673]</font>>]
    node16673_name -> node16673 [arrowhead=none, color="black", style=dashed]
    node16673 [shape=diamond, label=<<font color="black">(= relativeEnd -INF)</font>> color="black" fillcolor="white", style=filled]
    node16673 -> node16674 [label=<<font color="black">true</font>> color="black"]
    node16673 -> node16675 [label=<<font color="black">false</font>> color="black"]
    node16672_name [shape=none, label=<<font color="black">Block[16672]</font>>]
    node16672_name -> node16672 [arrowhead=none, color="black", style=dashed]
    node16672 [shape=box, label=<<font color="black">[0] let relativeEnd = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16672 -> node16673 [color="black"]
    node16674_name [shape=none, label=<<font color="black">Block[16674]</font>>]
    node16674_name -> node16674 [arrowhead=none, color="black", style=dashed]
    node16674 [shape=box, label=<<font color="black">[0] let endIndex = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16674 -> node16678 [color="black"]
    node16675_name [shape=none, label=<<font color="black">Branch[16675]</font>>]
    node16675_name -> node16675 [arrowhead=none, color="black", style=dashed]
    node16675 [shape=diamond, label=<<font color="black">(&lt; relativeEnd 0)</font>> color="black" fillcolor="white", style=filled]
    node16675 -> node16676 [label=<<font color="black">true</font>> color="black"]
    node16675 -> node16677 [label=<<font color="black">false</font>> color="black"]
    node16678_name [shape=none, label=<<font color="black">Block[16678]</font>>]
    node16678_name -> node16678 [arrowhead=none, color="black", style=dashed]
    node16678 [shape=box, label=<<font color="black">[0] let newLength = (max (- endIndex beginIndex) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16678 -> node16679 [color="black"]
    node16676_name [shape=none, label=<<font color="black">Block[16676]</font>>]
    node16676_name -> node16676 [arrowhead=none, color="black", style=dashed]
    node16676 [shape=box, label=<<font color="black">[0] let endIndex = (max (+ srcLength relativeEnd) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16676 -> node16678 [color="black"]
    node16677_name [shape=none, label=<<font color="black">Block[16677]</font>>]
    node16677_name -> node16677 [arrowhead=none, color="black", style=dashed]
    node16677 [shape=box, label=<<font color="black">[0] let endIndex = (min relativeEnd srcLength)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16677 -> node16678 [color="black"]
    node16679_name [shape=none, label=<<font color="black">Call[16679]</font>>]
    node16679_name -> node16679 [arrowhead=none, color="black", style=dashed]
    node16679 [shape=cds, label=<<font color="black">%3 = clo&lt;TypedArrayElementSize&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16679 -> node16680 [color="black"]
    node16680_name [shape=none, label=<<font color="black">Block[16680]</font>>]
    node16680_name -> node16680 [arrowhead=none, color="black", style=dashed]
    node16680 [shape=box, label=<<font color="black">[0] let elementSize = %3<BR ALIGN="LEFT"/>[1] let srcByteOffset = O.ByteOffset<BR ALIGN="LEFT"/>[2] let beginByteOffset = (+ srcByteOffset (* beginIndex elementSize))<BR ALIGN="LEFT"/>[3] let argumentsList = (new [buffer, ([number] beginByteOffset), ([number] newLength)])[#1101]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16680 -> node16681 [color="black"]
    node16681_name [shape=none, label=<<font color="black">Call[16681]</font>>]
    node16681_name -> node16681 [arrowhead=none, color="black", style=dashed]
    node16681 [shape=cds, label=<<font color="black">%4 = clo&lt;TypedArraySpeciesCreate&gt;(O, argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node16681 -> node16682 [color="black"]
    node16682_name [shape=none, label=<<font color="black">Block[16682]</font>>]
    node16682_name -> node16682 [arrowhead=none, color="black", style=dashed]
    node16682 [shape=box, label=<<font color="black">[0] return [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16682 -> cluster2417_exit [color="black"]
  }
}