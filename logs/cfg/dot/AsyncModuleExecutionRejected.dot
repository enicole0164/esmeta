digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1894 {
    label = "def AsyncModuleExecutionRejected(module: CyclicModuleRecord, error: ESValue): Const[~unused~]"
    style = rounded
    cluster1894_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1894_entry_name -> cluster1894_entry [arrowhead=none, color="black", style=dashed]
    cluster1894_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1894_entry -> node10263 [color="black"]
    cluster1894_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1894_exit_name -> cluster1894_exit [arrowhead=none, color="black", style=dashed]
    cluster1894_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10263_name [shape=none, label=<<font color="black">Branch[10263]</font>>]
    node10263_name -> node10263 [arrowhead=none, color="black", style=dashed]
    node10263 [shape=diamond, label=<<font color="black">(= module.Status ~evaluated~)</font>> color="black" fillcolor="white", style=filled]
    node10263 -> node10264 [label=<<font color="black">true</font>> color="black"]
    node10263 -> node10265 [label=<<font color="black">false</font>> color="black"]
    node10264_name [shape=none, label=<<font color="black">Block[10264]</font>>]
    node10264_name -> node10264 [arrowhead=none, color="black", style=dashed]
    node10264 [shape=box, label=<<font color="black">[0] assert (! (= module.EvaluationError ~empty~))<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10264 -> cluster1894_exit [color="black"]
    node10265_name [shape=none, label=<<font color="black">Block[10265]</font>>]
    node10265_name -> node10265 [arrowhead=none, color="black", style=dashed]
    node10265 [shape=box, label=<<font color="black">[0] assert (= module.Status ~evaluating-async~)<BR ALIGN="LEFT"/>[1] assert (= module.AsyncEvaluation true)<BR ALIGN="LEFT"/>[2] assert (= module.EvaluationError ~empty~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10265 -> node10266 [color="black"]
    node10266_name [shape=none, label=<<font color="black">Call[10266]</font>>]
    node10266_name -> node10266 [arrowhead=none, color="black", style=dashed]
    node10266 [shape=cds, label=<<font color="black">%0 = clo&lt;ThrowCompletion&gt;(error)</font>> color="black" fillcolor="white", style=filled]
    node10266 -> node10267 [color="black"]
    node10267_name [shape=none, label=<<font color="black">Block[10267]</font>>]
    node10267_name -> node10267 [arrowhead=none, color="black", style=dashed]
    node10267 [shape=box, label=<<font color="black">[0] module.EvaluationError = %0<BR ALIGN="LEFT"/>[1] module.Status = ~evaluated~<BR ALIGN="LEFT"/>[2] %2 = module.AsyncParentModules<BR ALIGN="LEFT"/>[3] %1 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10267 -> node10268 [color="black"]
    node10268_name [shape=none, label=<<font color="black">Branch[10268]</font>>]
    node10268_name -> node10268 [arrowhead=none, color="black", style=dashed]
    node10268 [shape=diamond, label=<<font color="black">(&lt; %1 %2.length)</font>> color="black" fillcolor="white", style=filled]
    node10268 -> node10269 [label=<<font color="black">true</font>> color="black"]
    node10268 -> node10272 [label=<<font color="black">false</font>> color="black"]
    node10269_name [shape=none, label=<<font color="black">Block[10269]</font>>]
    node10269_name -> node10269 [arrowhead=none, color="black", style=dashed]
    node10269 [shape=box, label=<<font color="black">[0] let m = %2[%1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10269 -> node10270 [color="black"]
    node10272_name [shape=none, label=<<font color="black">Branch[10272]</font>>]
    node10272_name -> node10272 [arrowhead=none, color="black", style=dashed]
    node10272 [shape=diamond, label=<<font color="black">(! (= module.TopLevelCapability ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10272 -> node10273 [label=<<font color="black">true</font>> color="black"]
    node10272 -> node10276 [label=<<font color="black">false</font>> color="black"]
    node10270_name [shape=none, label=<<font color="black">Call[10270]</font>>]
    node10270_name -> node10270 [arrowhead=none, color="black", style=dashed]
    node10270 [shape=cds, label=<<font color="black">%3 = clo&lt;AsyncModuleExecutionRejected&gt;(m, error)</font>> color="black" fillcolor="white", style=filled]
    node10270 -> node10271 [color="black"]
    node10273_name [shape=none, label=<<font color="black">Block[10273]</font>>]
    node10273_name -> node10273 [arrowhead=none, color="black", style=dashed]
    node10273 [shape=box, label=<<font color="black">[0] assert (= module.CycleRoot module)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10273 -> node10274 [color="black"]
    node10276_name [shape=none, label=<<font color="black">Block[10276]</font>>]
    node10276_name -> node10276 [arrowhead=none, color="black", style=dashed]
    node10276 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10276 -> cluster1894_exit [color="black"]
    node10271_name [shape=none, label=<<font color="black">Block[10271]</font>>]
    node10271_name -> node10271 [arrowhead=none, color="black", style=dashed]
    node10271 [shape=box, label=<<font color="black">[0] %1 = (+ %1 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10271 -> node10268 [color="black"]
    node10274_name [shape=none, label=<<font color="black">Call[10274]</font>>]
    node10274_name -> node10274 [arrowhead=none, color="black", style=dashed]
    node10274 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(module.TopLevelCapability.Reject, undefined, (new [error])[#778])</font>> color="black" fillcolor="white", style=filled]
    node10274 -> node10275 [color="black"]
    node10275_name [shape=none, label=<<font color="black">Block[10275]</font>>]
    node10275_name -> node10275 [arrowhead=none, color="black", style=dashed]
    node10275 [shape=box, label=<<font color="black">[0] [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10275 -> node10276 [color="black"]
  }
}