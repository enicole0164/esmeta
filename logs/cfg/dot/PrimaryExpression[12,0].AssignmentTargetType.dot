digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster887 {
    label = "def <SYNTAX>:PrimaryExpression[12,0].AssignmentTargetType(this: Ast:PrimaryExpression[12,0]): Const[~invalid~, ~simple~]"
    style = rounded
    cluster887_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster887_entry_name -> cluster887_entry [arrowhead=none, color="black", style=dashed]
    cluster887_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster887_entry -> node3482 [color="black"]
    cluster887_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster887_exit_name -> cluster887_exit [arrowhead=none, color="black", style=dashed]
    cluster887_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3482_name [shape=none, label=<<font color="black">Block[3482]</font>>]
    node3482_name -> node3482 [arrowhead=none, color="black", style=dashed]
    node3482 [shape=box, label=<<font color="black">[0] let expr = (parse this[0] (nt |ParenthesizedExpression|[]))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3482 -> node3483 [color="black"]
    node3483_name [shape=none, label=<<font color="black">Call[3483]</font>>]
    node3483_name -> node3483 [arrowhead=none, color="black", style=dashed]
    node3483 [shape=cds, label=<<font color="black">%0 = expr-&gt;AssignmentTargetType()</font>> color="black" fillcolor="white", style=filled]
    node3483 -> node3484 [color="black"]
    node3484_name [shape=none, label=<<font color="black">Block[3484]</font>>]
    node3484_name -> node3484 [arrowhead=none, color="black", style=dashed]
    node3484 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3484 -> cluster887_exit [color="black"]
  }
}