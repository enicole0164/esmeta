digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2426 {
    label = "def AllocateTypedArray(constructorName: Unknown["StringWhichIsTheNameOfATypedArrayConstructorIn<emuxrefHref="#tablethetypedarrayconstructors"></emuxref>"], newTarget: Unknown, defaultProto: Unknown, length?: Unknown["NonnegativeInteger"]): Unknown["EitherANormalCompletionContainingATypedArrayOrAnAbruptCompletion"]"
    style = rounded
    cluster2426_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2426_entry_name -> cluster2426_entry [arrowhead=none, color="black", style=dashed]
    cluster2426_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2426_entry -> node16754 [color="black"]
    cluster2426_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2426_exit_name -> cluster2426_exit [arrowhead=none, color="black", style=dashed]
    cluster2426_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16754_name [shape=none, label=<<font color="black">Call[16754]</font>>]
    node16754_name -> node16754 [arrowhead=none, color="black", style=dashed]
    node16754 [shape=cds, label=<<font color="black">%0 = clo&lt;GetPrototypeFromConstructor&gt;(newTarget, defaultProto)</font>> color="black" fillcolor="white", style=filled]
    node16754 -> node16755 [color="black"]
    node16755_name [shape=none, label=<<font color="black">Block[16755]</font>>]
    node16755_name -> node16755 [arrowhead=none, color="black", style=dashed]
    node16755 [shape=box, label=<<font color="black">[0] let proto = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16755 -> node16756 [color="black"]
    node16756_name [shape=none, label=<<font color="black">Call[16756]</font>>]
    node16756_name -> node16756 [arrowhead=none, color="black", style=dashed]
    node16756 [shape=cds, label=<<font color="black">%1 = clo&lt;IntegerIndexedObjectCreate&gt;(proto)</font>> color="black" fillcolor="white", style=filled]
    node16756 -> node16757 [color="black"]
    node16757_name [shape=none, label=<<font color="black">Block[16757]</font>>]
    node16757_name -> node16757 [arrowhead=none, color="black", style=dashed]
    node16757 [shape=box, label=<<font color="black">[0] let obj = %1<BR ALIGN="LEFT"/>[1] assert (= obj.ViewedArrayBuffer undefined)<BR ALIGN="LEFT"/>[2] obj.TypedArrayName = constructorName<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16757 -> node16758 [color="black"]
    node16758_name [shape=none, label=<<font color="black">Branch[16758]</font>>]
    node16758_name -> node16758 [arrowhead=none, color="black", style=dashed]
    node16758 [shape=diamond, label=<<font color="black">(|| (= constructorName &quot;BigInt64Array&quot;) (= constructorName &quot;BigUint64Array&quot;))</font>> color="black" fillcolor="white", style=filled]
    node16758 -> node16759 [label=<<font color="black">true</font>> color="black"]
    node16758 -> node16760 [label=<<font color="black">false</font>> color="black"]
    node16759_name [shape=none, label=<<font color="black">Block[16759]</font>>]
    node16759_name -> node16759 [arrowhead=none, color="black", style=dashed]
    node16759 [shape=box, label=<<font color="black">[0] obj.ContentType = ~BigInt~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16759 -> node16761 [color="black"]
    node16760_name [shape=none, label=<<font color="black">Block[16760]</font>>]
    node16760_name -> node16760 [arrowhead=none, color="black", style=dashed]
    node16760 [shape=box, label=<<font color="black">[0] obj.ContentType = ~Number~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16760 -> node16761 [color="black"]
    node16761_name [shape=none, label=<<font color="black">Branch[16761]</font>>]
    node16761_name -> node16761 [arrowhead=none, color="black", style=dashed]
    node16761 [shape=diamond, label=<<font color="black">(= length absent)</font>> color="black" fillcolor="white", style=filled]
    node16761 -> node16762 [label=<<font color="black">true</font>> color="black"]
    node16761 -> node16763 [label=<<font color="black">false</font>> color="black"]
    node16762_name [shape=none, label=<<font color="black">Block[16762]</font>>]
    node16762_name -> node16762 [arrowhead=none, color="black", style=dashed]
    node16762 [shape=box, label=<<font color="black">[0] obj.ByteLength = 0<BR ALIGN="LEFT"/>[1] obj.ByteOffset = 0<BR ALIGN="LEFT"/>[2] obj.ArrayLength = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16762 -> node16765 [color="black"]
    node16763_name [shape=none, label=<<font color="black">Call[16763]</font>>]
    node16763_name -> node16763 [arrowhead=none, color="black", style=dashed]
    node16763 [shape=cds, label=<<font color="black">%2 = clo&lt;AllocateTypedArrayBuffer&gt;(obj, length)</font>> color="black" fillcolor="white", style=filled]
    node16763 -> node16764 [color="black"]
    node16765_name [shape=none, label=<<font color="black">Block[16765]</font>>]
    node16765_name -> node16765 [arrowhead=none, color="black", style=dashed]
    node16765 [shape=box, label=<<font color="black">[0] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16765 -> cluster2426_exit [color="black"]
    node16764_name [shape=none, label=<<font color="black">Block[16764]</font>>]
    node16764_name -> node16764 [arrowhead=none, color="black", style=dashed]
    node16764 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16764 -> node16765 [color="black"]
  }
}