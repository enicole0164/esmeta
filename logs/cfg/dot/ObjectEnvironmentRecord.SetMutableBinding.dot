digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster987 {
    label = "def <CONC>:ObjectEnvironmentRecord.SetMutableBinding(envRec: ObjectEnvironmentRecord, N: String, V: ESValue, S: Boolean): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster987_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster987_entry_name -> cluster987_entry [arrowhead=none, color="black", style=dashed]
    cluster987_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster987_entry -> node3647 [color="black"]
    cluster987_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster987_exit_name -> cluster987_exit [arrowhead=none, color="black", style=dashed]
    cluster987_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3647_name [shape=none, label=<<font color="black">Block[3647]</font>>]
    node3647_name -> node3647 [arrowhead=none, color="black", style=dashed]
    node3647 [shape=box, label=<<font color="black">[0] let bindingObject = envRec.BindingObject<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3647 -> node3648 [color="black"]
    node3648_name [shape=none, label=<<font color="black">Call[3648]</font>>]
    node3648_name -> node3648 [arrowhead=none, color="black", style=dashed]
    node3648 [shape=cds, label=<<font color="black">%0 = clo&lt;HasProperty&gt;(bindingObject, N)</font>> color="black" fillcolor="white", style=filled]
    node3648 -> node3649 [color="black"]
    node3649_name [shape=none, label=<<font color="black">Block[3649]</font>>]
    node3649_name -> node3649 [arrowhead=none, color="black", style=dashed]
    node3649 [shape=box, label=<<font color="black">[0] let stillExists = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3649 -> node3650 [color="black"]
    node3650_name [shape=none, label=<<font color="black">Branch[3650]</font>>]
    node3650_name -> node3650 [arrowhead=none, color="black", style=dashed]
    node3650 [shape=diamond, label=<<font color="black">(&amp;&amp; (= stillExists false) (= S true))</font>> color="black" fillcolor="white", style=filled]
    node3650 -> node3651 [label=<<font color="black">true</font>> color="black"]
    node3650 -> node3652 [label=<<font color="black">false</font>> color="black"]
    node3651_name [shape=none, label=<<font color="black">Block[3651]</font>>]
    node3651_name -> node3651 [arrowhead=none, color="black", style=dashed]
    node3651 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#373])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3651 -> cluster987_exit [color="black"]
    node3652_name [shape=none, label=<<font color="black">Call[3652]</font>>]
    node3652_name -> node3652 [arrowhead=none, color="black", style=dashed]
    node3652 [shape=cds, label=<<font color="black">%1 = clo&lt;Set&gt;(bindingObject, N, V, S)</font>> color="black" fillcolor="white", style=filled]
    node3652 -> node3653 [color="black"]
    node3653_name [shape=none, label=<<font color="black">Block[3653]</font>>]
    node3653_name -> node3653 [arrowhead=none, color="black", style=dashed]
    node3653 [shape=box, label=<<font color="black">[0] [? %1]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3653 -> cluster987_exit [color="black"]
  }
}