digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster150 {
    label = "def OrdinaryHasInstance(C: ESValue, O: Unknown): Normal[Boolean] | Abrupt"
    style = rounded
    cluster150_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster150_entry_name -> cluster150_entry [arrowhead=none, color="black", style=dashed]
    cluster150_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster150_entry -> node1238 [color="black"]
    cluster150_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster150_exit_name -> cluster150_exit [arrowhead=none, color="black", style=dashed]
    cluster150_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1238_name [shape=none, label=<<font color="black">Call[1238]</font>>]
    node1238_name -> node1238 [arrowhead=none, color="black", style=dashed]
    node1238 [shape=cds, label=<<font color="black">%0 = clo&lt;IsCallable&gt;(C)</font>> color="black" fillcolor="white", style=filled]
    node1238 -> node1239 [color="black"]
    node1239_name [shape=none, label=<<font color="black">Branch[1239]</font>>]
    node1239_name -> node1239 [arrowhead=none, color="black", style=dashed]
    node1239 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node1239 -> node1240 [label=<<font color="black">true</font>> color="black"]
    node1239 -> node1241 [label=<<font color="black">false</font>> color="black"]
    node1240_name [shape=none, label=<<font color="black">Block[1240]</font>>]
    node1240_name -> node1240 [arrowhead=none, color="black", style=dashed]
    node1240 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1240 -> cluster150_exit [color="black"]
    node1241_name [shape=none, label=<<font color="black">Branch[1241]</font>>]
    node1241_name -> node1241 [arrowhead=none, color="black", style=dashed]
    node1241 [shape=diamond, label=<<font color="black">(! (= C.BoundTargetFunction absent))</font>> color="black" fillcolor="white", style=filled]
    node1241 -> node1242 [label=<<font color="black">true</font>> color="black"]
    node1241 -> node1245 [label=<<font color="black">false</font>> color="black"]
    node1242_name [shape=none, label=<<font color="black">Block[1242]</font>>]
    node1242_name -> node1242 [arrowhead=none, color="black", style=dashed]
    node1242 [shape=box, label=<<font color="black">[0] let BC = C.BoundTargetFunction<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1242 -> node1243 [color="black"]
    node1245_name [shape=none, label=<<font color="black">Branch[1245]</font>>]
    node1245_name -> node1245 [arrowhead=none, color="black", style=dashed]
    node1245 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node1245 -> node1246 [label=<<font color="black">true</font>> color="black"]
    node1245 -> node1247 [label=<<font color="black">false</font>> color="black"]
    node1243_name [shape=none, label=<<font color="black">Call[1243]</font>>]
    node1243_name -> node1243 [arrowhead=none, color="black", style=dashed]
    node1243 [shape=cds, label=<<font color="black">%1 = clo&lt;InstanceofOperator&gt;(O, BC)</font>> color="black" fillcolor="white", style=filled]
    node1243 -> node1244 [color="black"]
    node1246_name [shape=none, label=<<font color="black">Block[1246]</font>>]
    node1246_name -> node1246 [arrowhead=none, color="black", style=dashed]
    node1246 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1246 -> cluster150_exit [color="black"]
    node1247_name [shape=none, label=<<font color="black">Call[1247]</font>>]
    node1247_name -> node1247 [arrowhead=none, color="black", style=dashed]
    node1247 [shape=cds, label=<<font color="black">%2 = clo&lt;Get&gt;(C, &quot;prototype&quot;)</font>> color="black" fillcolor="white", style=filled]
    node1247 -> node1248 [color="black"]
    node1244_name [shape=none, label=<<font color="black">Block[1244]</font>>]
    node1244_name -> node1244 [arrowhead=none, color="black", style=dashed]
    node1244 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1244 -> cluster150_exit [color="black"]
    node1248_name [shape=none, label=<<font color="black">Block[1248]</font>>]
    node1248_name -> node1248 [arrowhead=none, color="black", style=dashed]
    node1248 [shape=box, label=<<font color="black">[0] let P = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1248 -> node1249 [color="black"]
    node1249_name [shape=none, label=<<font color="black">Branch[1249]</font>>]
    node1249_name -> node1249 [arrowhead=none, color="black", style=dashed]
    node1249 [shape=diamond, label=<<font color="black">(! (= (typeof P) @Object))</font>> color="black" fillcolor="white", style=filled]
    node1249 -> node1250 [label=<<font color="black">true</font>> color="black"]
    node1249 -> node1251 [label=<<font color="black">false</font>> color="black"]
    node1250_name [shape=none, label=<<font color="black">Block[1250]</font>>]
    node1250_name -> node1250 [arrowhead=none, color="black", style=dashed]
    node1250 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#59])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1250 -> cluster150_exit [color="black"]
    node1251_name [shape=none, label=<<font color="black">Branch[1251]</font>>]
    node1251_name -> node1251 [arrowhead=none, color="black", style=dashed]
    node1251 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node1251 -> node1252 [label=<<font color="black">true</font>> color="black"]
    node1252_name [shape=none, label=<<font color="black">Call[1252]</font>>]
    node1252_name -> node1252 [arrowhead=none, color="black", style=dashed]
    node1252 [shape=cds, label=<<font color="black">%3 = O-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node1252 -> node1253 [color="black"]
    node1253_name [shape=none, label=<<font color="black">Block[1253]</font>>]
    node1253_name -> node1253 [arrowhead=none, color="black", style=dashed]
    node1253 [shape=box, label=<<font color="black">[0] O = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1253 -> node1254 [color="black"]
    node1254_name [shape=none, label=<<font color="black">Branch[1254]</font>>]
    node1254_name -> node1254 [arrowhead=none, color="black", style=dashed]
    node1254 [shape=diamond, label=<<font color="black">(= O null)</font>> color="black" fillcolor="white", style=filled]
    node1254 -> node1255 [label=<<font color="black">true</font>> color="black"]
    node1254 -> node1256 [label=<<font color="black">false</font>> color="black"]
    node1255_name [shape=none, label=<<font color="black">Block[1255]</font>>]
    node1255_name -> node1255 [arrowhead=none, color="black", style=dashed]
    node1255 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1255 -> cluster150_exit [color="black"]
    node1256_name [shape=none, label=<<font color="black">Call[1256]</font>>]
    node1256_name -> node1256 [arrowhead=none, color="black", style=dashed]
    node1256 [shape=cds, label=<<font color="black">%4 = clo&lt;SameValue&gt;(P, O)</font>> color="black" fillcolor="white", style=filled]
    node1256 -> node1257 [color="black"]
    node1257_name [shape=none, label=<<font color="black">Branch[1257]</font>>]
    node1257_name -> node1257 [arrowhead=none, color="black", style=dashed]
    node1257 [shape=diamond, label=<<font color="black">(= %4 true)</font>> color="black" fillcolor="white", style=filled]
    node1257 -> node1258 [label=<<font color="black">true</font>> color="black"]
    node1257 -> node1251 [label=<<font color="black">false</font>> color="black"]
    node1258_name [shape=none, label=<<font color="black">Block[1258]</font>>]
    node1258_name -> node1258 [arrowhead=none, color="black", style=dashed]
    node1258 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1258 -> cluster150_exit [color="black"]
  }
}