digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1716 {
    label = "def <SYNTAX>:AsyncArrowFunction[1,0].InstantiateAsyncArrowFunctionExpression(this: Ast:AsyncArrowFunction[1,0], name?: Unknown): FunctionObject"
    style = rounded
    cluster1716_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1716_entry_name -> cluster1716_entry [arrowhead=none, color="black", style=dashed]
    cluster1716_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1716_entry -> node9652 [color="black"]
    cluster1716_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1716_exit_name -> cluster1716_exit [arrowhead=none, color="black", style=dashed]
    cluster1716_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node9652_name [shape=none, label=<<font color="black">Branch[9652]</font>>]
    node9652_name -> node9652 [arrowhead=none, color="black", style=dashed]
    node9652 [shape=diamond, label=<<font color="black">(= name absent)</font>> color="black" fillcolor="white", style=filled]
    node9652 -> node9653 [label=<<font color="black">true</font>> color="black"]
    node9652 -> node9654 [label=<<font color="black">false</font>> color="black"]
    node9653_name [shape=none, label=<<font color="black">Block[9653]</font>>]
    node9653_name -> node9653 [arrowhead=none, color="black", style=dashed]
    node9653 [shape=box, label=<<font color="black">[0] name = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9653 -> node9654 [color="black"]
    node9654_name [shape=none, label=<<font color="black">Block[9654]</font>>]
    node9654_name -> node9654 [arrowhead=none, color="black", style=dashed]
    node9654 [shape=box, label=<<font color="black">[0] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[1] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[2] let sourceText = (source-text this)<BR ALIGN="LEFT"/>[3] let head = (parse this[0] (nt |AsyncArrowHead|[]))<BR ALIGN="LEFT"/>[4] let parameters = head.ArrowFormalParameters<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9654 -> node9655 [color="black"]
    node9655_name [shape=none, label=<<font color="black">Call[9655]</font>>]
    node9655_name -> node9655 [arrowhead=none, color="black", style=dashed]
    node9655 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%AsyncFunction.prototype%&quot;], sourceText, parameters, this[1], ~lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node9655 -> node9656 [color="black"]
    node9656_name [shape=none, label=<<font color="black">Block[9656]</font>>]
    node9656_name -> node9656 [arrowhead=none, color="black", style=dashed]
    node9656 [shape=box, label=<<font color="black">[0] let closure = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9656 -> node9657 [color="black"]
    node9657_name [shape=none, label=<<font color="black">Call[9657]</font>>]
    node9657_name -> node9657 [arrowhead=none, color="black", style=dashed]
    node9657 [shape=cds, label=<<font color="black">%1 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node9657 -> node9658 [color="black"]
    node9658_name [shape=none, label=<<font color="black">Block[9658]</font>>]
    node9658_name -> node9658 [arrowhead=none, color="black", style=dashed]
    node9658 [shape=box, label=<<font color="black">[0] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9658 -> cluster1716_exit [color="black"]
  }
}