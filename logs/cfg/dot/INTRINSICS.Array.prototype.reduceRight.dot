digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2367 {
    label = "def <BUILTIN>:INTRINSICS.Array.prototype.reduceRight(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2367_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2367_entry_name -> cluster2367_entry [arrowhead=none, color="black", style=dashed]
    cluster2367_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2367_entry -> node15414 [color="black"]
    cluster2367_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2367_exit_name -> cluster2367_exit [arrowhead=none, color="black", style=dashed]
    cluster2367_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15414_name [shape=none, label=<<font color="black">Branch[15414]</font>>]
    node15414_name -> node15414 [arrowhead=none, color="black", style=dashed]
    node15414 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15414 -> node15415 [label=<<font color="black">true</font>> color="black"]
    node15414 -> node15416 [label=<<font color="black">false</font>> color="black"]
    node15415_name [shape=none, label=<<font color="black">Block[15415]</font>>]
    node15415_name -> node15415 [arrowhead=none, color="black", style=dashed]
    node15415 [shape=box, label=<<font color="black">[0] let callbackfn = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15415 -> node15417 [color="black"]
    node15416_name [shape=none, label=<<font color="black">Block[15416]</font>>]
    node15416_name -> node15416 [arrowhead=none, color="black", style=dashed]
    node15416 [shape=box, label=<<font color="black">[0] let callbackfn = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15416 -> node15417 [color="black"]
    node15417_name [shape=none, label=<<font color="black">Branch[15417]</font>>]
    node15417_name -> node15417 [arrowhead=none, color="black", style=dashed]
    node15417 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15417 -> node15418 [label=<<font color="black">true</font>> color="black"]
    node15417 -> node15419 [label=<<font color="black">false</font>> color="black"]
    node15418_name [shape=none, label=<<font color="black">Block[15418]</font>>]
    node15418_name -> node15418 [arrowhead=none, color="black", style=dashed]
    node15418 [shape=box, label=<<font color="black">[0] let initialValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15418 -> node15420 [color="black"]
    node15419_name [shape=none, label=<<font color="black">Block[15419]</font>>]
    node15419_name -> node15419 [arrowhead=none, color="black", style=dashed]
    node15419 [shape=box, label=<<font color="black">[0] let initialValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15419 -> node15420 [color="black"]
    node15420_name [shape=none, label=<<font color="black">Call[15420]</font>>]
    node15420_name -> node15420 [arrowhead=none, color="black", style=dashed]
    node15420 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node15420 -> node15421 [color="black"]
    node15421_name [shape=none, label=<<font color="black">Block[15421]</font>>]
    node15421_name -> node15421 [arrowhead=none, color="black", style=dashed]
    node15421 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15421 -> node15422 [color="black"]
    node15422_name [shape=none, label=<<font color="black">Call[15422]</font>>]
    node15422_name -> node15422 [arrowhead=none, color="black", style=dashed]
    node15422 [shape=cds, label=<<font color="black">%1 = clo&lt;LengthOfArrayLike&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node15422 -> node15423 [color="black"]
    node15423_name [shape=none, label=<<font color="black">Block[15423]</font>>]
    node15423_name -> node15423 [arrowhead=none, color="black", style=dashed]
    node15423 [shape=box, label=<<font color="black">[0] let len = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15423 -> node15424 [color="black"]
    node15424_name [shape=none, label=<<font color="black">Call[15424]</font>>]
    node15424_name -> node15424 [arrowhead=none, color="black", style=dashed]
    node15424 [shape=cds, label=<<font color="black">%2 = clo&lt;IsCallable&gt;(callbackfn)</font>> color="black" fillcolor="white", style=filled]
    node15424 -> node15425 [color="black"]
    node15425_name [shape=none, label=<<font color="black">Branch[15425]</font>>]
    node15425_name -> node15425 [arrowhead=none, color="black", style=dashed]
    node15425 [shape=diamond, label=<<font color="black">(= %2 false)</font>> color="black" fillcolor="white", style=filled]
    node15425 -> node15426 [label=<<font color="black">true</font>> color="black"]
    node15425 -> node15427 [label=<<font color="black">false</font>> color="black"]
    node15426_name [shape=none, label=<<font color="black">Block[15426]</font>>]
    node15426_name -> node15426 [arrowhead=none, color="black", style=dashed]
    node15426 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1039])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15426 -> cluster2367_exit [color="black"]
    node15427_name [shape=none, label=<<font color="black">Branch[15427]</font>>]
    node15427_name -> node15427 [arrowhead=none, color="black", style=dashed]
    node15427 [shape=diamond, label=<<font color="black">(&amp;&amp; (= len 0) (= initialValue absent))</font>> color="black" fillcolor="white", style=filled]
    node15427 -> node15428 [label=<<font color="black">true</font>> color="black"]
    node15427 -> node15429 [label=<<font color="black">false</font>> color="black"]
    node15428_name [shape=none, label=<<font color="black">Block[15428]</font>>]
    node15428_name -> node15428 [arrowhead=none, color="black", style=dashed]
    node15428 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1040])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15428 -> cluster2367_exit [color="black"]
    node15429_name [shape=none, label=<<font color="black">Block[15429]</font>>]
    node15429_name -> node15429 [arrowhead=none, color="black", style=dashed]
    node15429 [shape=box, label=<<font color="black">[0] let k = (- len 1)<BR ALIGN="LEFT"/>[1] let accumulator = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15429 -> node15430 [color="black"]
    node15430_name [shape=none, label=<<font color="black">Branch[15430]</font>>]
    node15430_name -> node15430 [arrowhead=none, color="black", style=dashed]
    node15430 [shape=diamond, label=<<font color="black">(! (= initialValue absent))</font>> color="black" fillcolor="white", style=filled]
    node15430 -> node15431 [label=<<font color="black">true</font>> color="black"]
    node15430 -> node15432 [label=<<font color="black">false</font>> color="black"]
    node15431_name [shape=none, label=<<font color="black">Block[15431]</font>>]
    node15431_name -> node15431 [arrowhead=none, color="black", style=dashed]
    node15431 [shape=box, label=<<font color="black">[0] accumulator = initialValue<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15431 -> node15444 [color="black"]
    node15432_name [shape=none, label=<<font color="black">Block[15432]</font>>]
    node15432_name -> node15432 [arrowhead=none, color="black", style=dashed]
    node15432 [shape=box, label=<<font color="black">[0] let kPresent = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15432 -> node15433 [color="black"]
    node15444_name [shape=none, label=<<font color="black">Branch[15444]</font>>]
    node15444_name -> node15444 [arrowhead=none, color="black", style=dashed]
    node15444 [shape=diamond, label=<<font color="black">(! (&lt; k 0))</font>> color="black" fillcolor="white", style=filled]
    node15444 -> node15445 [label=<<font color="black">true</font>> color="black"]
    node15444 -> node15455 [label=<<font color="black">false</font>> color="black"]
    node15433_name [shape=none, label=<<font color="black">Branch[15433]</font>>]
    node15433_name -> node15433 [arrowhead=none, color="black", style=dashed]
    node15433 [shape=diamond, label=<<font color="black">(&amp;&amp; (= kPresent false) (! (&lt; k 0)))</font>> color="black" fillcolor="white", style=filled]
    node15433 -> node15434 [label=<<font color="black">true</font>> color="black"]
    node15433 -> node15442 [label=<<font color="black">false</font>> color="black"]
    node15445_name [shape=none, label=<<font color="black">Call[15445]</font>>]
    node15445_name -> node15445 [arrowhead=none, color="black", style=dashed]
    node15445 [shape=cds, label=<<font color="black">%6 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15445 -> node15446 [color="black"]
    node15455_name [shape=none, label=<<font color="black">Block[15455]</font>>]
    node15455_name -> node15455 [arrowhead=none, color="black", style=dashed]
    node15455 [shape=box, label=<<font color="black">[0] return accumulator<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15455 -> cluster2367_exit [color="black"]
    node15434_name [shape=none, label=<<font color="black">Call[15434]</font>>]
    node15434_name -> node15434 [arrowhead=none, color="black", style=dashed]
    node15434 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15434 -> node15435 [color="black"]
    node15442_name [shape=none, label=<<font color="black">Branch[15442]</font>>]
    node15442_name -> node15442 [arrowhead=none, color="black", style=dashed]
    node15442 [shape=diamond, label=<<font color="black">(= kPresent false)</font>> color="black" fillcolor="white", style=filled]
    node15442 -> node15443 [label=<<font color="black">true</font>> color="black"]
    node15442 -> node15444 [label=<<font color="black">false</font>> color="black"]
    node15446_name [shape=none, label=<<font color="black">Block[15446]</font>>]
    node15446_name -> node15446 [arrowhead=none, color="black", style=dashed]
    node15446 [shape=box, label=<<font color="black">[0] let Pk = [! %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15446 -> node15447 [color="black"]
    node15435_name [shape=none, label=<<font color="black">Block[15435]</font>>]
    node15435_name -> node15435 [arrowhead=none, color="black", style=dashed]
    node15435 [shape=box, label=<<font color="black">[0] let Pk = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15435 -> node15436 [color="black"]
    node15443_name [shape=none, label=<<font color="black">Block[15443]</font>>]
    node15443_name -> node15443 [arrowhead=none, color="black", style=dashed]
    node15443 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1041])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15443 -> cluster2367_exit [color="black"]
    node15447_name [shape=none, label=<<font color="black">Call[15447]</font>>]
    node15447_name -> node15447 [arrowhead=none, color="black", style=dashed]
    node15447 [shape=cds, label=<<font color="black">%7 = clo&lt;HasProperty&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node15447 -> node15448 [color="black"]
    node15436_name [shape=none, label=<<font color="black">Call[15436]</font>>]
    node15436_name -> node15436 [arrowhead=none, color="black", style=dashed]
    node15436 [shape=cds, label=<<font color="black">%4 = clo&lt;HasProperty&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node15436 -> node15437 [color="black"]
    node15448_name [shape=none, label=<<font color="black">Block[15448]</font>>]
    node15448_name -> node15448 [arrowhead=none, color="black", style=dashed]
    node15448 [shape=box, label=<<font color="black">[0] let kPresent = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15448 -> node15449 [color="black"]
    node15437_name [shape=none, label=<<font color="black">Block[15437]</font>>]
    node15437_name -> node15437 [arrowhead=none, color="black", style=dashed]
    node15437 [shape=box, label=<<font color="black">[0] kPresent = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15437 -> node15438 [color="black"]
    node15449_name [shape=none, label=<<font color="black">Branch[15449]</font>>]
    node15449_name -> node15449 [arrowhead=none, color="black", style=dashed]
    node15449 [shape=diamond, label=<<font color="black">(= kPresent true)</font>> color="black" fillcolor="white", style=filled]
    node15449 -> node15450 [label=<<font color="black">true</font>> color="black"]
    node15449 -> node15454 [label=<<font color="black">false</font>> color="black"]
    node15438_name [shape=none, label=<<font color="black">Branch[15438]</font>>]
    node15438_name -> node15438 [arrowhead=none, color="black", style=dashed]
    node15438 [shape=diamond, label=<<font color="black">(= kPresent true)</font>> color="black" fillcolor="white", style=filled]
    node15438 -> node15439 [label=<<font color="black">true</font>> color="black"]
    node15438 -> node15441 [label=<<font color="black">false</font>> color="black"]
    node15450_name [shape=none, label=<<font color="black">Call[15450]</font>>]
    node15450_name -> node15450 [arrowhead=none, color="black", style=dashed]
    node15450 [shape=cds, label=<<font color="black">%8 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node15450 -> node15451 [color="black"]
    node15454_name [shape=none, label=<<font color="black">Block[15454]</font>>]
    node15454_name -> node15454 [arrowhead=none, color="black", style=dashed]
    node15454 [shape=box, label=<<font color="black">[0] k = (- k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15454 -> node15444 [color="black"]
    node15439_name [shape=none, label=<<font color="black">Call[15439]</font>>]
    node15439_name -> node15439 [arrowhead=none, color="black", style=dashed]
    node15439 [shape=cds, label=<<font color="black">%5 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node15439 -> node15440 [color="black"]
    node15441_name [shape=none, label=<<font color="black">Block[15441]</font>>]
    node15441_name -> node15441 [arrowhead=none, color="black", style=dashed]
    node15441 [shape=box, label=<<font color="black">[0] k = (- k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15441 -> node15433 [color="black"]
    node15451_name [shape=none, label=<<font color="black">Block[15451]</font>>]
    node15451_name -> node15451 [arrowhead=none, color="black", style=dashed]
    node15451 [shape=box, label=<<font color="black">[0] let kValue = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15451 -> node15452 [color="black"]
    node15440_name [shape=none, label=<<font color="black">Block[15440]</font>>]
    node15440_name -> node15440 [arrowhead=none, color="black", style=dashed]
    node15440 [shape=box, label=<<font color="black">[0] accumulator = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15440 -> node15441 [color="black"]
    node15452_name [shape=none, label=<<font color="black">Call[15452]</font>>]
    node15452_name -> node15452 [arrowhead=none, color="black", style=dashed]
    node15452 [shape=cds, label=<<font color="black">%9 = clo&lt;Call&gt;(callbackfn, undefined, (new [accumulator, kValue, ([number] k), O])[#1042])</font>> color="black" fillcolor="white", style=filled]
    node15452 -> node15453 [color="black"]
    node15453_name [shape=none, label=<<font color="black">Block[15453]</font>>]
    node15453_name -> node15453 [arrowhead=none, color="black", style=dashed]
    node15453 [shape=box, label=<<font color="black">[0] accumulator = [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15453 -> node15454 [color="black"]
  }
}