digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2535 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.compareExchange(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2535_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2535_entry_name -> cluster2535_entry [arrowhead=none, color="black", style=dashed]
    cluster2535_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2535_entry -> node18030 [color="black"]
    cluster2535_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2535_exit_name -> cluster2535_exit [arrowhead=none, color="black", style=dashed]
    cluster2535_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18030_name [shape=none, label=<<font color="black">Branch[18030]</font>>]
    node18030_name -> node18030 [arrowhead=none, color="black", style=dashed]
    node18030 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18030 -> node18031 [label=<<font color="black">true</font>> color="black"]
    node18030 -> node18032 [label=<<font color="black">false</font>> color="black"]
    node18031_name [shape=none, label=<<font color="black">Block[18031]</font>>]
    node18031_name -> node18031 [arrowhead=none, color="black", style=dashed]
    node18031 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18031 -> node18033 [color="black"]
    node18032_name [shape=none, label=<<font color="black">Block[18032]</font>>]
    node18032_name -> node18032 [arrowhead=none, color="black", style=dashed]
    node18032 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18032 -> node18033 [color="black"]
    node18033_name [shape=none, label=<<font color="black">Branch[18033]</font>>]
    node18033_name -> node18033 [arrowhead=none, color="black", style=dashed]
    node18033 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18033 -> node18034 [label=<<font color="black">true</font>> color="black"]
    node18033 -> node18035 [label=<<font color="black">false</font>> color="black"]
    node18034_name [shape=none, label=<<font color="black">Block[18034]</font>>]
    node18034_name -> node18034 [arrowhead=none, color="black", style=dashed]
    node18034 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18034 -> node18036 [color="black"]
    node18035_name [shape=none, label=<<font color="black">Block[18035]</font>>]
    node18035_name -> node18035 [arrowhead=none, color="black", style=dashed]
    node18035 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18035 -> node18036 [color="black"]
    node18036_name [shape=none, label=<<font color="black">Branch[18036]</font>>]
    node18036_name -> node18036 [arrowhead=none, color="black", style=dashed]
    node18036 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18036 -> node18037 [label=<<font color="black">true</font>> color="black"]
    node18036 -> node18038 [label=<<font color="black">false</font>> color="black"]
    node18037_name [shape=none, label=<<font color="black">Block[18037]</font>>]
    node18037_name -> node18037 [arrowhead=none, color="black", style=dashed]
    node18037 [shape=box, label=<<font color="black">[0] let expectedValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18037 -> node18039 [color="black"]
    node18038_name [shape=none, label=<<font color="black">Block[18038]</font>>]
    node18038_name -> node18038 [arrowhead=none, color="black", style=dashed]
    node18038 [shape=box, label=<<font color="black">[0] let expectedValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18038 -> node18039 [color="black"]
    node18039_name [shape=none, label=<<font color="black">Branch[18039]</font>>]
    node18039_name -> node18039 [arrowhead=none, color="black", style=dashed]
    node18039 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18039 -> node18040 [label=<<font color="black">true</font>> color="black"]
    node18039 -> node18041 [label=<<font color="black">false</font>> color="black"]
    node18040_name [shape=none, label=<<font color="black">Block[18040]</font>>]
    node18040_name -> node18040 [arrowhead=none, color="black", style=dashed]
    node18040 [shape=box, label=<<font color="black">[0] let replacementValue = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18040 -> node18042 [color="black"]
    node18041_name [shape=none, label=<<font color="black">Block[18041]</font>>]
    node18041_name -> node18041 [arrowhead=none, color="black", style=dashed]
    node18041 [shape=box, label=<<font color="black">[0] let replacementValue = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18041 -> node18042 [color="black"]
    node18042_name [shape=none, label=<<font color="black">Call[18042]</font>>]
    node18042_name -> node18042 [arrowhead=none, color="black", style=dashed]
    node18042 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateIntegerTypedArray&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18042 -> node18043 [color="black"]
    node18043_name [shape=none, label=<<font color="black">Block[18043]</font>>]
    node18043_name -> node18043 [arrowhead=none, color="black", style=dashed]
    node18043 [shape=box, label=<<font color="black">[0] let buffer = [? %0]<BR ALIGN="LEFT"/>[1] let block = buffer.ArrayBufferData<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18043 -> node18044 [color="black"]
    node18044_name [shape=none, label=<<font color="black">Call[18044]</font>>]
    node18044_name -> node18044 [arrowhead=none, color="black", style=dashed]
    node18044 [shape=cds, label=<<font color="black">%1 = clo&lt;ValidateAtomicAccess&gt;(typedArray, index)</font>> color="black" fillcolor="white", style=filled]
    node18044 -> node18045 [color="black"]
    node18045_name [shape=none, label=<<font color="black">Block[18045]</font>>]
    node18045_name -> node18045 [arrowhead=none, color="black", style=dashed]
    node18045 [shape=box, label=<<font color="black">[0] let indexedPosition = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18045 -> node18046 [color="black"]
    node18046_name [shape=none, label=<<font color="black">Branch[18046]</font>>]
    node18046_name -> node18046 [arrowhead=none, color="black", style=dashed]
    node18046 [shape=diamond, label=<<font color="black">(= typedArray.ContentType ~BigInt~)</font>> color="black" fillcolor="white", style=filled]
    node18046 -> node18047 [label=<<font color="black">true</font>> color="black"]
    node18046 -> node18051 [label=<<font color="black">false</font>> color="black"]
    node18047_name [shape=none, label=<<font color="black">Call[18047]</font>>]
    node18047_name -> node18047 [arrowhead=none, color="black", style=dashed]
    node18047 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBigInt&gt;(expectedValue)</font>> color="black" fillcolor="white", style=filled]
    node18047 -> node18048 [color="black"]
    node18051_name [shape=none, label=<<font color="black">Call[18051]</font>>]
    node18051_name -> node18051 [arrowhead=none, color="black", style=dashed]
    node18051 [shape=cds, label=<<font color="black">%4 = clo&lt;ToIntegerOrInfinity&gt;(expectedValue)</font>> color="black" fillcolor="white", style=filled]
    node18051 -> node18052 [color="black"]
    node18048_name [shape=none, label=<<font color="black">Block[18048]</font>>]
    node18048_name -> node18048 [arrowhead=none, color="black", style=dashed]
    node18048 [shape=box, label=<<font color="black">[0] let expected = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18048 -> node18049 [color="black"]
    node18052_name [shape=none, label=<<font color="black">Block[18052]</font>>]
    node18052_name -> node18052 [arrowhead=none, color="black", style=dashed]
    node18052 [shape=box, label=<<font color="black">[0] let expected = ([number] [? %4])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18052 -> node18053 [color="black"]
    node18049_name [shape=none, label=<<font color="black">Call[18049]</font>>]
    node18049_name -> node18049 [arrowhead=none, color="black", style=dashed]
    node18049 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBigInt&gt;(replacementValue)</font>> color="black" fillcolor="white", style=filled]
    node18049 -> node18050 [color="black"]
    node18053_name [shape=none, label=<<font color="black">Call[18053]</font>>]
    node18053_name -> node18053 [arrowhead=none, color="black", style=dashed]
    node18053 [shape=cds, label=<<font color="black">%5 = clo&lt;ToIntegerOrInfinity&gt;(replacementValue)</font>> color="black" fillcolor="white", style=filled]
    node18053 -> node18054 [color="black"]
    node18050_name [shape=none, label=<<font color="black">Block[18050]</font>>]
    node18050_name -> node18050 [arrowhead=none, color="black", style=dashed]
    node18050 [shape=box, label=<<font color="black">[0] let replacement = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18050 -> node18055 [color="black"]
    node18054_name [shape=none, label=<<font color="black">Block[18054]</font>>]
    node18054_name -> node18054 [arrowhead=none, color="black", style=dashed]
    node18054 [shape=box, label=<<font color="black">[0] let replacement = ([number] [? %5])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18054 -> node18055 [color="black"]
    node18055_name [shape=none, label=<<font color="black">Call[18055]</font>>]
    node18055_name -> node18055 [arrowhead=none, color="black", style=dashed]
    node18055 [shape=cds, label=<<font color="black">%6 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node18055 -> node18056 [color="black"]
    node18056_name [shape=none, label=<<font color="black">Branch[18056]</font>>]
    node18056_name -> node18056 [arrowhead=none, color="black", style=dashed]
    node18056 [shape=diamond, label=<<font color="black">(= %6 true)</font>> color="black" fillcolor="white", style=filled]
    node18056 -> node18057 [label=<<font color="black">true</font>> color="black"]
    node18056 -> node18058 [label=<<font color="black">false</font>> color="black"]
    node18057_name [shape=none, label=<<font color="black">Block[18057]</font>>]
    node18057_name -> node18057 [arrowhead=none, color="black", style=dashed]
    node18057 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1185])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18057 -> cluster2535_exit [color="black"]
    node18058_name [shape=none, label=<<font color="black">Block[18058]</font>>]
    node18058_name -> node18058 [arrowhead=none, color="black", style=dashed]
    node18058 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18058 -> node18059 [color="black"]
    node18059_name [shape=none, label=<<font color="black">Call[18059]</font>>]
    node18059_name -> node18059 [arrowhead=none, color="black", style=dashed]
    node18059 [shape=cds, label=<<font color="black">%7 = clo&lt;TypedArrayElementType&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18059 -> node18060 [color="black"]
    node18060_name [shape=none, label=<<font color="black">Block[18060]</font>>]
    node18060_name -> node18060 [arrowhead=none, color="black", style=dashed]
    node18060 [shape=box, label=<<font color="black">[0] let elementType = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18060 -> node18061 [color="black"]
    node18061_name [shape=none, label=<<font color="black">Call[18061]</font>>]
    node18061_name -> node18061 [arrowhead=none, color="black", style=dashed]
    node18061 [shape=cds, label=<<font color="black">%8 = clo&lt;TypedArrayElementSize&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18061 -> node18062 [color="black"]
    node18062_name [shape=none, label=<<font color="black">Block[18062]</font>>]
    node18062_name -> node18062 [arrowhead=none, color="black", style=dashed]
    node18062 [shape=box, label=<<font color="black">[0] let elementSize = %8<BR ALIGN="LEFT"/>[1] (yet &quot;Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18062 -> node18063 [color="black"]
    node18063_name [shape=none, label=<<font color="black">Call[18063]</font>>]
    node18063_name -> node18063 [arrowhead=none, color="black", style=dashed]
    node18063 [shape=cds, label=<<font color="black">%9 = clo&lt;NumericToRawBytes&gt;(elementType, expected, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node18063 -> node18064 [color="black"]
    node18064_name [shape=none, label=<<font color="black">Block[18064]</font>>]
    node18064_name -> node18064 [arrowhead=none, color="black", style=dashed]
    node18064 [shape=box, label=<<font color="black">[0] let expectedBytes = %9<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18064 -> node18065 [color="black"]
    node18065_name [shape=none, label=<<font color="black">Call[18065]</font>>]
    node18065_name -> node18065 [arrowhead=none, color="black", style=dashed]
    node18065 [shape=cds, label=<<font color="black">%10 = clo&lt;NumericToRawBytes&gt;(elementType, replacement, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node18065 -> node18066 [color="black"]
    node18066_name [shape=none, label=<<font color="black">Block[18066]</font>>]
    node18066_name -> node18066 [arrowhead=none, color="black", style=dashed]
    node18066 [shape=box, label=<<font color="black">[0] let replacementBytes = %10<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18066 -> node18067 [color="black"]
    node18067_name [shape=none, label=<<font color="black">Call[18067]</font>>]
    node18067_name -> node18067 [arrowhead=none, color="black", style=dashed]
    node18067 [shape=cds, label=<<font color="black">%11 = clo&lt;IsSharedArrayBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node18067 -> node18068 [color="black"]
    node18068_name [shape=none, label=<<font color="black">Branch[18068]</font>>]
    node18068_name -> node18068 [arrowhead=none, color="black", style=dashed]
    node18068 [shape=diamond, label=<<font color="black">(= %11 true)</font>> color="black" fillcolor="white", style=filled]
    node18068 -> node18069 [label=<<font color="black">true</font>> color="black"]
    node18068 -> node18075 [label=<<font color="black">false</font>> color="black"]
    node18069_name [shape=none, label=<<font color="black">Block[18069]</font>>]
    node18069_name -> node18069 [arrowhead=none, color="black", style=dashed]
    node18069 [shape=box, label=<<font color="black">[0] (yet &quot;Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.&quot;)<BR ALIGN="LEFT"/>[3] nop<BR ALIGN="LEFT"/>[4] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18069 -> node18070 [color="black"]
    node18075_name [shape=none, label=<<font color="black">Block[18075]</font>>]
    node18075_name -> node18075 [arrowhead=none, color="black", style=dashed]
    node18075 [shape=box, label=<<font color="black">[0] (yet &quot;Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_indexedPosition_].&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18075 -> node18076 [color="black"]
    node18070_name [shape=none, label=<<font color="black">Call[18070]</font>>]
    node18070_name -> node18070 [arrowhead=none, color="black", style=dashed]
    node18070 [shape=cds, label=<<font color="black">%12 = clo&lt;ByteListEqual&gt;(rawBytesRead, expectedBytes)</font>> color="black" fillcolor="white", style=filled]
    node18070 -> node18071 [color="black"]
    node18076_name [shape=none, label=<<font color="black">Call[18076]</font>>]
    node18076_name -> node18076 [arrowhead=none, color="black", style=dashed]
    node18076 [shape=cds, label=<<font color="black">%13 = clo&lt;ByteListEqual&gt;(rawBytesRead, expectedBytes)</font>> color="black" fillcolor="white", style=filled]
    node18076 -> node18077 [color="black"]
    node18071_name [shape=none, label=<<font color="black">Branch[18071]</font>>]
    node18071_name -> node18071 [arrowhead=none, color="black", style=dashed]
    node18071 [shape=diamond, label=<<font color="black">(= %12 true)</font>> color="black" fillcolor="white", style=filled]
    node18071 -> node18072 [label=<<font color="black">true</font>> color="black"]
    node18071 -> node18073 [label=<<font color="black">false</font>> color="black"]
    node18077_name [shape=none, label=<<font color="black">Branch[18077]</font>>]
    node18077_name -> node18077 [arrowhead=none, color="black", style=dashed]
    node18077 [shape=diamond, label=<<font color="black">(= %13 true)</font>> color="black" fillcolor="white", style=filled]
    node18077 -> node18078 [label=<<font color="black">true</font>> color="black"]
    node18077 -> node18079 [label=<<font color="black">false</font>> color="black"]
    node18072_name [shape=none, label=<<font color="black">Block[18072]</font>>]
    node18072_name -> node18072 [arrowhead=none, color="black", style=dashed]
    node18072 [shape=box, label=<<font color="black">[0] (yet &quot;Let _second_ be a new read-modify-write modification function with parameters (_oldBytes_, _newBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return _newBytes_.&quot;)<BR ALIGN="LEFT"/>[1] let event = (new ReadModifyWriteSharedMemory(&quot;Order&quot; -&gt; ~SeqCst~, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize, &quot;Payload&quot; -&gt; replacementBytes, &quot;ModifyOp&quot; -&gt; second))[#1186]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18072 -> node18074 [color="black"]
    node18073_name [shape=none, label=<<font color="black">Block[18073]</font>>]
    node18073_name -> node18073 [arrowhead=none, color="black", style=dashed]
    node18073 [shape=box, label=<<font color="black">[0] let event = (new ReadSharedMemory(&quot;Order&quot; -&gt; ~SeqCst~, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; indexedPosition, &quot;ElementSize&quot; -&gt; elementSize))[#1187]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18073 -> node18074 [color="black"]
    node18078_name [shape=none, label=<<font color="black">Block[18078]</font>>]
    node18078_name -> node18078 [arrowhead=none, color="black", style=dashed]
    node18078 [shape=box, label=<<font color="black">[0] (yet &quot;Store the individual bytes of _replacementBytes_ into _block_, starting at _block_[_indexedPosition_].&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18078 -> node18079 [color="black"]
    node18079_name [shape=none, label=<<font color="black">Call[18079]</font>>]
    node18079_name -> node18079 [arrowhead=none, color="black", style=dashed]
    node18079 [shape=cds, label=<<font color="black">%14 = clo&lt;RawBytesToNumeric&gt;(elementType, rawBytesRead, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node18079 -> node18080 [color="black"]
    node18074_name [shape=none, label=<<font color="black">Block[18074]</font>>]
    node18074_name -> node18074 [arrowhead=none, color="black", style=dashed]
    node18074 [shape=box, label=<<font color="black">[0] push eventList &lt; event<BR ALIGN="LEFT"/>[1] push execution.ChosenValues &lt; (new ChosenValueRecord(&quot;Event&quot; -&gt; event, &quot;ChosenValue&quot; -&gt; rawBytesRead))[#1188]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18074 -> node18079 [color="black"]
    node18080_name [shape=none, label=<<font color="black">Block[18080]</font>>]
    node18080_name -> node18080 [arrowhead=none, color="black", style=dashed]
    node18080 [shape=box, label=<<font color="black">[0] return %14<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18080 -> cluster2535_exit [color="black"]
  }
}