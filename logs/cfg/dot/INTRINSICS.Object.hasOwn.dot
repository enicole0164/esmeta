digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2011 {
    label = "def <BUILTIN>:INTRINSICS.Object.hasOwn(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2011_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2011_entry_name -> cluster2011_entry [arrowhead=none, color="black", style=dashed]
    cluster2011_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2011_entry -> node11230 [color="black"]
    cluster2011_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2011_exit_name -> cluster2011_exit [arrowhead=none, color="black", style=dashed]
    cluster2011_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11230_name [shape=none, label=<<font color="black">Branch[11230]</font>>]
    node11230_name -> node11230 [arrowhead=none, color="black", style=dashed]
    node11230 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11230 -> node11231 [label=<<font color="black">true</font>> color="black"]
    node11230 -> node11232 [label=<<font color="black">false</font>> color="black"]
    node11231_name [shape=none, label=<<font color="black">Block[11231]</font>>]
    node11231_name -> node11231 [arrowhead=none, color="black", style=dashed]
    node11231 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11231 -> node11233 [color="black"]
    node11232_name [shape=none, label=<<font color="black">Block[11232]</font>>]
    node11232_name -> node11232 [arrowhead=none, color="black", style=dashed]
    node11232 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11232 -> node11233 [color="black"]
    node11233_name [shape=none, label=<<font color="black">Branch[11233]</font>>]
    node11233_name -> node11233 [arrowhead=none, color="black", style=dashed]
    node11233 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11233 -> node11234 [label=<<font color="black">true</font>> color="black"]
    node11233 -> node11235 [label=<<font color="black">false</font>> color="black"]
    node11234_name [shape=none, label=<<font color="black">Block[11234]</font>>]
    node11234_name -> node11234 [arrowhead=none, color="black", style=dashed]
    node11234 [shape=box, label=<<font color="black">[0] let P = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11234 -> node11236 [color="black"]
    node11235_name [shape=none, label=<<font color="black">Block[11235]</font>>]
    node11235_name -> node11235 [arrowhead=none, color="black", style=dashed]
    node11235 [shape=box, label=<<font color="black">[0] let P = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11235 -> node11236 [color="black"]
    node11236_name [shape=none, label=<<font color="black">Call[11236]</font>>]
    node11236_name -> node11236 [arrowhead=none, color="black", style=dashed]
    node11236 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node11236 -> node11237 [color="black"]
    node11237_name [shape=none, label=<<font color="black">Block[11237]</font>>]
    node11237_name -> node11237 [arrowhead=none, color="black", style=dashed]
    node11237 [shape=box, label=<<font color="black">[0] let obj = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11237 -> node11238 [color="black"]
    node11238_name [shape=none, label=<<font color="black">Call[11238]</font>>]
    node11238_name -> node11238 [arrowhead=none, color="black", style=dashed]
    node11238 [shape=cds, label=<<font color="black">%1 = clo&lt;ToPropertyKey&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node11238 -> node11239 [color="black"]
    node11239_name [shape=none, label=<<font color="black">Block[11239]</font>>]
    node11239_name -> node11239 [arrowhead=none, color="black", style=dashed]
    node11239 [shape=box, label=<<font color="black">[0] let key = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11239 -> node11240 [color="black"]
    node11240_name [shape=none, label=<<font color="black">Call[11240]</font>>]
    node11240_name -> node11240 [arrowhead=none, color="black", style=dashed]
    node11240 [shape=cds, label=<<font color="black">%2 = clo&lt;HasOwnProperty&gt;(obj, key)</font>> color="black" fillcolor="white", style=filled]
    node11240 -> node11241 [color="black"]
    node11241_name [shape=none, label=<<font color="black">Block[11241]</font>>]
    node11241_name -> node11241 [arrowhead=none, color="black", style=dashed]
    node11241 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11241 -> cluster2011_exit [color="black"]
  }
}