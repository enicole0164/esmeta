digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2655 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.ownKeys(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2655_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2655_entry_name -> cluster2655_entry [arrowhead=none, color="black", style=dashed]
    cluster2655_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2655_entry -> node19759 [color="black"]
    cluster2655_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2655_exit_name -> cluster2655_exit [arrowhead=none, color="black", style=dashed]
    cluster2655_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19759_name [shape=none, label=<<font color="black">Branch[19759]</font>>]
    node19759_name -> node19759 [arrowhead=none, color="black", style=dashed]
    node19759 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19759 -> node19760 [label=<<font color="black">true</font>> color="black"]
    node19759 -> node19761 [label=<<font color="black">false</font>> color="black"]
    node19760_name [shape=none, label=<<font color="black">Block[19760]</font>>]
    node19760_name -> node19760 [arrowhead=none, color="black", style=dashed]
    node19760 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19760 -> node19762 [color="black"]
    node19761_name [shape=none, label=<<font color="black">Block[19761]</font>>]
    node19761_name -> node19761 [arrowhead=none, color="black", style=dashed]
    node19761 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19761 -> node19762 [color="black"]
    node19762_name [shape=none, label=<<font color="black">Branch[19762]</font>>]
    node19762_name -> node19762 [arrowhead=none, color="black", style=dashed]
    node19762 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19762 -> node19763 [label=<<font color="black">true</font>> color="black"]
    node19762 -> node19764 [label=<<font color="black">false</font>> color="black"]
    node19763_name [shape=none, label=<<font color="black">Block[19763]</font>>]
    node19763_name -> node19763 [arrowhead=none, color="black", style=dashed]
    node19763 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1353])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19763 -> cluster2655_exit [color="black"]
    node19764_name [shape=none, label=<<font color="black">Call[19764]</font>>]
    node19764_name -> node19764 [arrowhead=none, color="black", style=dashed]
    node19764 [shape=cds, label=<<font color="black">%0 = target-&gt;OwnPropertyKeys()</font>> color="black" fillcolor="white", style=filled]
    node19764 -> node19765 [color="black"]
    node19765_name [shape=none, label=<<font color="black">Block[19765]</font>>]
    node19765_name -> node19765 [arrowhead=none, color="black", style=dashed]
    node19765 [shape=box, label=<<font color="black">[0] let keys = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19765 -> node19766 [color="black"]
    node19766_name [shape=none, label=<<font color="black">Call[19766]</font>>]
    node19766_name -> node19766 [arrowhead=none, color="black", style=dashed]
    node19766 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateArrayFromList&gt;(keys)</font>> color="black" fillcolor="white", style=filled]
    node19766 -> node19767 [color="black"]
    node19767_name [shape=none, label=<<font color="black">Block[19767]</font>>]
    node19767_name -> node19767 [arrowhead=none, color="black", style=dashed]
    node19767 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19767 -> cluster2655_exit [color="black"]
  }
}