digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1027 {
    label = "def ResolvePrivateIdentifier(privEnv: PrivateEnvironmentRecord, identifier: String): PrivateName"
    style = rounded
    cluster1027_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1027_entry_name -> cluster1027_entry [arrowhead=none, color="black", style=dashed]
    cluster1027_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1027_entry -> node3842 [color="black"]
    cluster1027_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1027_exit_name -> cluster1027_exit [arrowhead=none, color="black", style=dashed]
    cluster1027_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3842_name [shape=none, label=<<font color="black">Block[3842]</font>>]
    node3842_name -> node3842 [arrowhead=none, color="black", style=dashed]
    node3842 [shape=box, label=<<font color="black">[0] let names = privEnv.Names<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3842 -> node3843 [color="black"]
    node3843_name [shape=none, label=<<font color="black">Branch[3843]</font>>]
    node3843_name -> node3843 [arrowhead=none, color="black", style=dashed]
    node3843 [shape=diamond, label=<<font color="black">(contains names identifier: Unknown[&quot;PrivateName&quot;] Description)</font>> color="black" fillcolor="white", style=filled]
    node3843 -> node3844 [label=<<font color="black">true</font>> color="black"]
    node3843 -> node3851 [label=<<font color="black">false</font>> color="black"]
    node3844_name [shape=none, label=<<font color="black">Block[3844]</font>>]
    node3844_name -> node3844 [arrowhead=none, color="black", style=dashed]
    node3844 [shape=box, label=<<font color="black">[0] let idx = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3844 -> node3845 [color="black"]
    node3851_name [shape=none, label=<<font color="black">Block[3851]</font>>]
    node3851_name -> node3851 [arrowhead=none, color="black", style=dashed]
    node3851 [shape=box, label=<<font color="black">[0] let outerPrivEnv = privEnv.OuterPrivateEnvironment<BR ALIGN="LEFT"/>[1] assert (! (= outerPrivEnv null))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3851 -> node3852 [color="black"]
    node3845_name [shape=none, label=<<font color="black">Branch[3845]</font>>]
    node3845_name -> node3845 [arrowhead=none, color="black", style=dashed]
    node3845 [shape=diamond, label=<<font color="black">(&lt; idx names.length)</font>> color="black" fillcolor="white", style=filled]
    node3845 -> node3846 [label=<<font color="black">true</font>> color="black"]
    node3845 -> node3850 [label=<<font color="black">false</font>> color="black"]
    node3852_name [shape=none, label=<<font color="black">Call[3852]</font>>]
    node3852_name -> node3852 [arrowhead=none, color="black", style=dashed]
    node3852 [shape=cds, label=<<font color="black">%0 = clo&lt;ResolvePrivateIdentifier&gt;(outerPrivEnv, identifier)</font>> color="black" fillcolor="white", style=filled]
    node3852 -> node3853 [color="black"]
    node3846_name [shape=none, label=<<font color="black">Block[3846]</font>>]
    node3846_name -> node3846 [arrowhead=none, color="black", style=dashed]
    node3846 [shape=box, label=<<font color="black">[0] let elem = names[idx]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3846 -> node3847 [color="black"]
    node3850_name [shape=none, label=<<font color="black">Block[3850]</font>>]
    node3850_name -> node3850 [arrowhead=none, color="black", style=dashed]
    node3850 [shape=box, label=<<font color="black">[0] return name<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3850 -> cluster1027_exit [color="black"]
    node3853_name [shape=none, label=<<font color="black">Block[3853]</font>>]
    node3853_name -> node3853 [arrowhead=none, color="black", style=dashed]
    node3853 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3853 -> cluster1027_exit [color="black"]
    node3847_name [shape=none, label=<<font color="black">Branch[3847]</font>>]
    node3847_name -> node3847 [arrowhead=none, color="black", style=dashed]
    node3847 [shape=diamond, label=<<font color="black">(= elem.Description identifier)</font>> color="black" fillcolor="white", style=filled]
    node3847 -> node3848 [label=<<font color="black">true</font>> color="black"]
    node3847 -> node3849 [label=<<font color="black">false</font>> color="black"]
    node3848_name [shape=none, label=<<font color="black">Block[3848]</font>>]
    node3848_name -> node3848 [arrowhead=none, color="black", style=dashed]
    node3848 [shape=box, label=<<font color="black">[0] let name = elem<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3848 -> node3849 [color="black"]
    node3849_name [shape=none, label=<<font color="black">Block[3849]</font>>]
    node3849_name -> node3849 [arrowhead=none, color="black", style=dashed]
    node3849 [shape=box, label=<<font color="black">[0] idx = (+ idx 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3849 -> node3845 [color="black"]
  }
}