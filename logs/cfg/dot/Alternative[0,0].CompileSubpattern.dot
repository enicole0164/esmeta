digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2244 {
    label = "def <SYNTAX>:Alternative[0,0].CompileSubpattern(this: Ast:Alternative[0,0], direction: Const[~backward~, ~forward~]): Unknown["Matcher"]"
    style = rounded
    cluster2244_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2244_entry_name -> cluster2244_entry [arrowhead=none, color="black", style=dashed]
    cluster2244_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2244_entry -> node13916 [color="black"]
    cluster2244_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2244_exit_name -> cluster2244_exit [arrowhead=none, color="black", style=dashed]
    cluster2244_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13916_name [shape=none, label=<<font color="black">Block[13916]</font>>]
    node13916_name -> node13916 [arrowhead=none, color="black", style=dashed]
    node13916 [shape=box, label=<<font color="black">[0] (yet &quot;Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Return _c_(_x_).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13916 -> cluster2244_exit [color="black"]
  }
}