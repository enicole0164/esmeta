digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2630 {
    label = "def AsyncGeneratorCompleteStep(generator: Unknown["AsyncGenerator"], completion: Normal, done: Boolean, realm?: RealmRecord): Const[~unused~]"
    style = rounded
    cluster2630_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2630_entry_name -> cluster2630_entry [arrowhead=none, color="black", style=dashed]
    cluster2630_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2630_entry -> node19510 [color="black"]
    cluster2630_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2630_exit_name -> cluster2630_exit [arrowhead=none, color="black", style=dashed]
    cluster2630_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19510_name [shape=none, label=<<font color="black">Block[19510]</font>>]
    node19510_name -> node19510 [arrowhead=none, color="black", style=dashed]
    node19510 [shape=box, label=<<font color="black">[0] let queue = generator.AsyncGeneratorQueue<BR ALIGN="LEFT"/>[1] assert (! (= queue.length 0))<BR ALIGN="LEFT"/>[2] let next = queue[0]<BR ALIGN="LEFT"/>[3] (pop &lt; queue)<BR ALIGN="LEFT"/>[4] let promiseCapability = next.Capability<BR ALIGN="LEFT"/>[5] let value = completion.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19510 -> node19511 [color="black"]
    node19511_name [shape=none, label=<<font color="black">Branch[19511]</font>>]
    node19511_name -> node19511 [arrowhead=none, color="black", style=dashed]
    node19511 [shape=diamond, label=<<font color="black">(= completion.Type ~throw~)</font>> color="black" fillcolor="white", style=filled]
    node19511 -> node19512 [label=<<font color="black">true</font>> color="black"]
    node19511 -> node19514 [label=<<font color="black">false</font>> color="black"]
    node19512_name [shape=none, label=<<font color="black">Call[19512]</font>>]
    node19512_name -> node19512 [arrowhead=none, color="black", style=dashed]
    node19512 [shape=cds, label=<<font color="black">%0 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [value])[#1331])</font>> color="black" fillcolor="white", style=filled]
    node19512 -> node19513 [color="black"]
    node19514_name [shape=none, label=<<font color="black">Block[19514]</font>>]
    node19514_name -> node19514 [arrowhead=none, color="black", style=dashed]
    node19514 [shape=box, label=<<font color="black">[0] assert (= completion.Type ~normal~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19514 -> node19515 [color="black"]
    node19513_name [shape=none, label=<<font color="black">Block[19513]</font>>]
    node19513_name -> node19513 [arrowhead=none, color="black", style=dashed]
    node19513 [shape=box, label=<<font color="black">[0] [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19513 -> node19523 [color="black"]
    node19515_name [shape=none, label=<<font color="black">Branch[19515]</font>>]
    node19515_name -> node19515 [arrowhead=none, color="black", style=dashed]
    node19515 [shape=diamond, label=<<font color="black">(! (= realm absent))</font>> color="black" fillcolor="white", style=filled]
    node19515 -> node19516 [label=<<font color="black">true</font>> color="black"]
    node19515 -> node19519 [label=<<font color="black">false</font>> color="black"]
    node19523_name [shape=none, label=<<font color="black">Block[19523]</font>>]
    node19523_name -> node19523 [arrowhead=none, color="black", style=dashed]
    node19523 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19523 -> cluster2630_exit [color="black"]
    node19516_name [shape=none, label=<<font color="black">Block[19516]</font>>]
    node19516_name -> node19516 [arrowhead=none, color="black", style=dashed]
    node19516 [shape=box, label=<<font color="black">[0] let oldRealm = @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/>[1] @EXECUTION_STACK[0].Realm = realm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19516 -> node19517 [color="black"]
    node19519_name [shape=none, label=<<font color="black">Call[19519]</font>>]
    node19519_name -> node19519 [arrowhead=none, color="black", style=dashed]
    node19519 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateIterResultObject&gt;(value, done)</font>> color="black" fillcolor="white", style=filled]
    node19519 -> node19520 [color="black"]
    node19517_name [shape=none, label=<<font color="black">Call[19517]</font>>]
    node19517_name -> node19517 [arrowhead=none, color="black", style=dashed]
    node19517 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateIterResultObject&gt;(value, done)</font>> color="black" fillcolor="white", style=filled]
    node19517 -> node19518 [color="black"]
    node19520_name [shape=none, label=<<font color="black">Block[19520]</font>>]
    node19520_name -> node19520 [arrowhead=none, color="black", style=dashed]
    node19520 [shape=box, label=<<font color="black">[0] let iteratorResult = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19520 -> node19521 [color="black"]
    node19518_name [shape=none, label=<<font color="black">Block[19518]</font>>]
    node19518_name -> node19518 [arrowhead=none, color="black", style=dashed]
    node19518 [shape=box, label=<<font color="black">[0] let iteratorResult = %1<BR ALIGN="LEFT"/>[1] @EXECUTION_STACK[0].Realm = oldRealm<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19518 -> node19521 [color="black"]
    node19521_name [shape=none, label=<<font color="black">Call[19521]</font>>]
    node19521_name -> node19521 [arrowhead=none, color="black", style=dashed]
    node19521 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(promiseCapability.Resolve, undefined, (new [iteratorResult])[#1332])</font>> color="black" fillcolor="white", style=filled]
    node19521 -> node19522 [color="black"]
    node19522_name [shape=none, label=<<font color="black">Block[19522]</font>>]
    node19522_name -> node19522 [arrowhead=none, color="black", style=dashed]
    node19522 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19522 -> node19523 [color="black"]
  }
}