digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2105 {
    label = "def <BUILTIN>:INTRINSICS.Math.sinh(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2105_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2105_entry_name -> cluster2105_entry [arrowhead=none, color="black", style=dashed]
    cluster2105_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2105_entry -> node12383 [color="black"]
    cluster2105_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2105_exit_name -> cluster2105_exit [arrowhead=none, color="black", style=dashed]
    cluster2105_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12383_name [shape=none, label=<<font color="black">Branch[12383]</font>>]
    node12383_name -> node12383 [arrowhead=none, color="black", style=dashed]
    node12383 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12383 -> node12384 [label=<<font color="black">true</font>> color="black"]
    node12383 -> node12385 [label=<<font color="black">false</font>> color="black"]
    node12384_name [shape=none, label=<<font color="black">Block[12384]</font>>]
    node12384_name -> node12384 [arrowhead=none, color="black", style=dashed]
    node12384 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12384 -> node12386 [color="black"]
    node12385_name [shape=none, label=<<font color="black">Block[12385]</font>>]
    node12385_name -> node12385 [arrowhead=none, color="black", style=dashed]
    node12385 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12385 -> node12386 [color="black"]
    node12386_name [shape=none, label=<<font color="black">Call[12386]</font>>]
    node12386_name -> node12386 [arrowhead=none, color="black", style=dashed]
    node12386 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12386 -> node12387 [color="black"]
    node12387_name [shape=none, label=<<font color="black">Block[12387]</font>>]
    node12387_name -> node12387 [arrowhead=none, color="black", style=dashed]
    node12387 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12387 -> node12388 [color="black"]
    node12388_name [shape=none, label=<<font color="black">Branch[12388]</font>>]
    node12388_name -> node12388 [arrowhead=none, color="black", style=dashed]
    node12388 [shape=diamond, label=<<font color="black">(|| (= n NaN) (|| (= n 0.0f) (|| (= n -0.0f) (|| (= n +INF) (= n -INF)))))</font>> color="black" fillcolor="white", style=filled]
    node12388 -> node12389 [label=<<font color="black">true</font>> color="black"]
    node12388 -> node12390 [label=<<font color="black">false</font>> color="black"]
    node12389_name [shape=none, label=<<font color="black">Block[12389]</font>>]
    node12389_name -> node12389 [arrowhead=none, color="black", style=dashed]
    node12389 [shape=box, label=<<font color="black">[0] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12389 -> cluster2105_exit [color="black"]
    node12390_name [shape=none, label=<<font color="black">Block[12390]</font>>]
    node12390_name -> node12390 [arrowhead=none, color="black", style=dashed]
    node12390 [shape=box, label=<<font color="black">[0] return ([approx-number] ([math:sinh] ([math] n)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12390 -> cluster2105_exit [color="black"]
  }
}