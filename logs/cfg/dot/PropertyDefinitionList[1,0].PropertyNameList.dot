digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1224 {
    label = "def <SYNTAX>:PropertyDefinitionList[1,0].PropertyNameList(this: Ast:PropertyDefinitionList[1,0]): List[String]"
    style = rounded
    cluster1224_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1224_entry_name -> cluster1224_entry [arrowhead=none, color="black", style=dashed]
    cluster1224_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1224_entry -> node5557 [color="black"]
    cluster1224_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1224_exit_name -> cluster1224_exit [arrowhead=none, color="black", style=dashed]
    cluster1224_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5557_name [shape=none, label=<<font color="black">Call[5557]</font>>]
    node5557_name -> node5557 [arrowhead=none, color="black", style=dashed]
    node5557 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;PropertyNameList()</font>> color="black" fillcolor="white", style=filled]
    node5557 -> node5558 [color="black"]
    node5558_name [shape=none, label=<<font color="black">Block[5558]</font>>]
    node5558_name -> node5558 [arrowhead=none, color="black", style=dashed]
    node5558 [shape=box, label=<<font color="black">[0] let list = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5558 -> node5559 [color="black"]
    node5559_name [shape=none, label=<<font color="black">Call[5559]</font>>]
    node5559_name -> node5559 [arrowhead=none, color="black", style=dashed]
    node5559 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;PropName()</font>> color="black" fillcolor="white", style=filled]
    node5559 -> node5560 [color="black"]
    node5560_name [shape=none, label=<<font color="black">Block[5560]</font>>]
    node5560_name -> node5560 [arrowhead=none, color="black", style=dashed]
    node5560 [shape=box, label=<<font color="black">[0] let propName = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5560 -> node5561 [color="black"]
    node5561_name [shape=none, label=<<font color="black">Branch[5561]</font>>]
    node5561_name -> node5561 [arrowhead=none, color="black", style=dashed]
    node5561 [shape=diamond, label=<<font color="black">(= propName ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node5561 -> node5562 [label=<<font color="black">true</font>> color="black"]
    node5561 -> node5563 [label=<<font color="black">false</font>> color="black"]
    node5562_name [shape=none, label=<<font color="black">Block[5562]</font>>]
    node5562_name -> node5562 [arrowhead=none, color="black", style=dashed]
    node5562 [shape=box, label=<<font color="black">[0] return list<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5562 -> cluster1224_exit [color="black"]
    node5563_name [shape=none, label=<<font color="black">Block[5563]</font>>]
    node5563_name -> node5563 [arrowhead=none, color="black", style=dashed]
    node5563 [shape=box, label=<<font color="black">[0] return (list-concat list (new [propName])[#548])[#547]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5563 -> cluster1224_exit [color="black"]
  }
}