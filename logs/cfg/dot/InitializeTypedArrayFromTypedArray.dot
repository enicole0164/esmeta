digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2427 {
    label = "def InitializeTypedArrayFromTypedArray(O: Unknown["TypedArray"], srcArray: Unknown["TypedArray"]): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2427_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2427_entry_name -> cluster2427_entry [arrowhead=none, color="black", style=dashed]
    cluster2427_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2427_entry -> node16766 [color="black"]
    cluster2427_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2427_exit_name -> cluster2427_exit [arrowhead=none, color="black", style=dashed]
    cluster2427_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16766_name [shape=none, label=<<font color="black">Block[16766]</font>>]
    node16766_name -> node16766 [arrowhead=none, color="black", style=dashed]
    node16766 [shape=box, label=<<font color="black">[0] let srcData = srcArray.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16766 -> node16767 [color="black"]
    node16767_name [shape=none, label=<<font color="black">Call[16767]</font>>]
    node16767_name -> node16767 [arrowhead=none, color="black", style=dashed]
    node16767 [shape=cds, label=<<font color="black">%0 = clo&lt;IsDetachedBuffer&gt;(srcData)</font>> color="black" fillcolor="white", style=filled]
    node16767 -> node16768 [color="black"]
    node16768_name [shape=none, label=<<font color="black">Branch[16768]</font>>]
    node16768_name -> node16768 [arrowhead=none, color="black", style=dashed]
    node16768 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node16768 -> node16769 [label=<<font color="black">true</font>> color="black"]
    node16768 -> node16770 [label=<<font color="black">false</font>> color="black"]
    node16769_name [shape=none, label=<<font color="black">Block[16769]</font>>]
    node16769_name -> node16769 [arrowhead=none, color="black", style=dashed]
    node16769 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1105])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16769 -> cluster2427_exit [color="black"]
    node16770_name [shape=none, label=<<font color="black">Call[16770]</font>>]
    node16770_name -> node16770 [arrowhead=none, color="black", style=dashed]
    node16770 [shape=cds, label=<<font color="black">%1 = clo&lt;TypedArrayElementType&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16770 -> node16771 [color="black"]
    node16771_name [shape=none, label=<<font color="black">Block[16771]</font>>]
    node16771_name -> node16771 [arrowhead=none, color="black", style=dashed]
    node16771 [shape=box, label=<<font color="black">[0] let elementType = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16771 -> node16772 [color="black"]
    node16772_name [shape=none, label=<<font color="black">Call[16772]</font>>]
    node16772_name -> node16772 [arrowhead=none, color="black", style=dashed]
    node16772 [shape=cds, label=<<font color="black">%2 = clo&lt;TypedArrayElementSize&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16772 -> node16773 [color="black"]
    node16773_name [shape=none, label=<<font color="black">Block[16773]</font>>]
    node16773_name -> node16773 [arrowhead=none, color="black", style=dashed]
    node16773 [shape=box, label=<<font color="black">[0] let elementSize = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16773 -> node16774 [color="black"]
    node16774_name [shape=none, label=<<font color="black">Call[16774]</font>>]
    node16774_name -> node16774 [arrowhead=none, color="black", style=dashed]
    node16774 [shape=cds, label=<<font color="black">%3 = clo&lt;TypedArrayElementType&gt;(srcArray)</font>> color="black" fillcolor="white", style=filled]
    node16774 -> node16775 [color="black"]
    node16775_name [shape=none, label=<<font color="black">Block[16775]</font>>]
    node16775_name -> node16775 [arrowhead=none, color="black", style=dashed]
    node16775 [shape=box, label=<<font color="black">[0] let srcType = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16775 -> node16776 [color="black"]
    node16776_name [shape=none, label=<<font color="black">Call[16776]</font>>]
    node16776_name -> node16776 [arrowhead=none, color="black", style=dashed]
    node16776 [shape=cds, label=<<font color="black">%4 = clo&lt;TypedArrayElementSize&gt;(srcArray)</font>> color="black" fillcolor="white", style=filled]
    node16776 -> node16777 [color="black"]
    node16777_name [shape=none, label=<<font color="black">Block[16777]</font>>]
    node16777_name -> node16777 [arrowhead=none, color="black", style=dashed]
    node16777 [shape=box, label=<<font color="black">[0] let srcElementSize = %4<BR ALIGN="LEFT"/>[1] let srcByteOffset = srcArray.ByteOffset<BR ALIGN="LEFT"/>[2] let elementLength = srcArray.ArrayLength<BR ALIGN="LEFT"/>[3] let byteLength = (* elementSize elementLength)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16777 -> node16778 [color="black"]
    node16778_name [shape=none, label=<<font color="black">Call[16778]</font>>]
    node16778_name -> node16778 [arrowhead=none, color="black", style=dashed]
    node16778 [shape=cds, label=<<font color="black">%5 = clo&lt;IsSharedArrayBuffer&gt;(srcData)</font>> color="black" fillcolor="white", style=filled]
    node16778 -> node16779 [color="black"]
    node16779_name [shape=none, label=<<font color="black">Branch[16779]</font>>]
    node16779_name -> node16779 [arrowhead=none, color="black", style=dashed]
    node16779 [shape=diamond, label=<<font color="black">(= %5 false)</font>> color="black" fillcolor="white", style=filled]
    node16779 -> node16780 [label=<<font color="black">true</font>> color="black"]
    node16779 -> node16782 [label=<<font color="black">false</font>> color="black"]
    node16780_name [shape=none, label=<<font color="black">Call[16780]</font>>]
    node16780_name -> node16780 [arrowhead=none, color="black", style=dashed]
    node16780 [shape=cds, label=<<font color="black">%6 = clo&lt;SpeciesConstructor&gt;(srcData, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ArrayBuffer%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node16780 -> node16781 [color="black"]
    node16782_name [shape=none, label=<<font color="black">Block[16782]</font>>]
    node16782_name -> node16782 [arrowhead=none, color="black", style=dashed]
    node16782 [shape=box, label=<<font color="black">[0] let bufferConstructor = @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ArrayBuffer%&quot;]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16782 -> node16783 [color="black"]
    node16781_name [shape=none, label=<<font color="black">Block[16781]</font>>]
    node16781_name -> node16781 [arrowhead=none, color="black", style=dashed]
    node16781 [shape=box, label=<<font color="black">[0] let bufferConstructor = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16781 -> node16783 [color="black"]
    node16783_name [shape=none, label=<<font color="black">Branch[16783]</font>>]
    node16783_name -> node16783 [arrowhead=none, color="black", style=dashed]
    node16783 [shape=diamond, label=<<font color="black">(= elementType srcType)</font>> color="black" fillcolor="white", style=filled]
    node16783 -> node16784 [label=<<font color="black">true</font>> color="black"]
    node16783 -> node16786 [label=<<font color="black">false</font>> color="black"]
    node16784_name [shape=none, label=<<font color="black">Call[16784]</font>>]
    node16784_name -> node16784 [arrowhead=none, color="black", style=dashed]
    node16784 [shape=cds, label=<<font color="black">%7 = clo&lt;CloneArrayBuffer&gt;(srcData, srcByteOffset, byteLength, bufferConstructor)</font>> color="black" fillcolor="white", style=filled]
    node16784 -> node16785 [color="black"]
    node16786_name [shape=none, label=<<font color="black">Call[16786]</font>>]
    node16786_name -> node16786 [arrowhead=none, color="black", style=dashed]
    node16786 [shape=cds, label=<<font color="black">%8 = clo&lt;AllocateArrayBuffer&gt;(bufferConstructor, byteLength)</font>> color="black" fillcolor="white", style=filled]
    node16786 -> node16787 [color="black"]
    node16785_name [shape=none, label=<<font color="black">Block[16785]</font>>]
    node16785_name -> node16785 [arrowhead=none, color="black", style=dashed]
    node16785 [shape=box, label=<<font color="black">[0] let data = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16785 -> node16799 [color="black"]
    node16787_name [shape=none, label=<<font color="black">Block[16787]</font>>]
    node16787_name -> node16787 [arrowhead=none, color="black", style=dashed]
    node16787 [shape=box, label=<<font color="black">[0] let data = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16787 -> node16788 [color="black"]
    node16799_name [shape=none, label=<<font color="black">Block[16799]</font>>]
    node16799_name -> node16799 [arrowhead=none, color="black", style=dashed]
    node16799 [shape=box, label=<<font color="black">[0] O.ViewedArrayBuffer = data<BR ALIGN="LEFT"/>[1] O.ByteLength = byteLength<BR ALIGN="LEFT"/>[2] O.ByteOffset = 0<BR ALIGN="LEFT"/>[3] O.ArrayLength = elementLength<BR ALIGN="LEFT"/>[4] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16799 -> cluster2427_exit [color="black"]
    node16788_name [shape=none, label=<<font color="black">Call[16788]</font>>]
    node16788_name -> node16788 [arrowhead=none, color="black", style=dashed]
    node16788 [shape=cds, label=<<font color="black">%9 = clo&lt;IsDetachedBuffer&gt;(srcData)</font>> color="black" fillcolor="white", style=filled]
    node16788 -> node16789 [color="black"]
    node16789_name [shape=none, label=<<font color="black">Branch[16789]</font>>]
    node16789_name -> node16789 [arrowhead=none, color="black", style=dashed]
    node16789 [shape=diamond, label=<<font color="black">(= %9 true)</font>> color="black" fillcolor="white", style=filled]
    node16789 -> node16790 [label=<<font color="black">true</font>> color="black"]
    node16789 -> node16791 [label=<<font color="black">false</font>> color="black"]
    node16790_name [shape=none, label=<<font color="black">Block[16790]</font>>]
    node16790_name -> node16790 [arrowhead=none, color="black", style=dashed]
    node16790 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1106])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16790 -> cluster2427_exit [color="black"]
    node16791_name [shape=none, label=<<font color="black">Branch[16791]</font>>]
    node16791_name -> node16791 [arrowhead=none, color="black", style=dashed]
    node16791 [shape=diamond, label=<<font color="black">(! (== srcArray.ContentType O.ContentType))</font>> color="black" fillcolor="white", style=filled]
    node16791 -> node16792 [label=<<font color="black">true</font>> color="black"]
    node16791 -> node16793 [label=<<font color="black">false</font>> color="black"]
    node16792_name [shape=none, label=<<font color="black">Block[16792]</font>>]
    node16792_name -> node16792 [arrowhead=none, color="black", style=dashed]
    node16792 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1107])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16792 -> cluster2427_exit [color="black"]
    node16793_name [shape=none, label=<<font color="black">Block[16793]</font>>]
    node16793_name -> node16793 [arrowhead=none, color="black", style=dashed]
    node16793 [shape=box, label=<<font color="black">[0] let srcByteIndex = srcByteOffset<BR ALIGN="LEFT"/>[1] let targetByteIndex = 0<BR ALIGN="LEFT"/>[2] let count = elementLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16793 -> node16794 [color="black"]
    node16794_name [shape=none, label=<<font color="black">Branch[16794]</font>>]
    node16794_name -> node16794 [arrowhead=none, color="black", style=dashed]
    node16794 [shape=diamond, label=<<font color="black">(&lt; 0 count)</font>> color="black" fillcolor="white", style=filled]
    node16794 -> node16795 [label=<<font color="black">true</font>> color="black"]
    node16794 -> node16799 [label=<<font color="black">false</font>> color="black"]
    node16795_name [shape=none, label=<<font color="black">Call[16795]</font>>]
    node16795_name -> node16795 [arrowhead=none, color="black", style=dashed]
    node16795 [shape=cds, label=<<font color="black">%10 = clo&lt;GetValueFromBuffer&gt;(srcData, srcByteIndex, srcType, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node16795 -> node16796 [color="black"]
    node16796_name [shape=none, label=<<font color="black">Block[16796]</font>>]
    node16796_name -> node16796 [arrowhead=none, color="black", style=dashed]
    node16796 [shape=box, label=<<font color="black">[0] let value = %10<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16796 -> node16797 [color="black"]
    node16797_name [shape=none, label=<<font color="black">Call[16797]</font>>]
    node16797_name -> node16797 [arrowhead=none, color="black", style=dashed]
    node16797 [shape=cds, label=<<font color="black">%11 = clo&lt;SetValueInBuffer&gt;(data, targetByteIndex, elementType, value, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node16797 -> node16798 [color="black"]
    node16798_name [shape=none, label=<<font color="black">Block[16798]</font>>]
    node16798_name -> node16798 [arrowhead=none, color="black", style=dashed]
    node16798 [shape=box, label=<<font color="black">[0] srcByteIndex = (+ srcByteIndex srcElementSize)<BR ALIGN="LEFT"/>[1] targetByteIndex = (+ targetByteIndex elementSize)<BR ALIGN="LEFT"/>[2] count = (- count 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16798 -> node16794 [color="black"]
  }
}