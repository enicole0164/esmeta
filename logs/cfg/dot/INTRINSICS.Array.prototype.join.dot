digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2360 {
    label = "def <BUILTIN>:INTRINSICS.Array.prototype.join(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2360_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2360_entry_name -> cluster2360_entry [arrowhead=none, color="black", style=dashed]
    cluster2360_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2360_entry -> node15249 [color="black"]
    cluster2360_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2360_exit_name -> cluster2360_exit [arrowhead=none, color="black", style=dashed]
    cluster2360_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15249_name [shape=none, label=<<font color="black">Branch[15249]</font>>]
    node15249_name -> node15249 [arrowhead=none, color="black", style=dashed]
    node15249 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15249 -> node15250 [label=<<font color="black">true</font>> color="black"]
    node15249 -> node15251 [label=<<font color="black">false</font>> color="black"]
    node15250_name [shape=none, label=<<font color="black">Block[15250]</font>>]
    node15250_name -> node15250 [arrowhead=none, color="black", style=dashed]
    node15250 [shape=box, label=<<font color="black">[0] let separator = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15250 -> node15252 [color="black"]
    node15251_name [shape=none, label=<<font color="black">Block[15251]</font>>]
    node15251_name -> node15251 [arrowhead=none, color="black", style=dashed]
    node15251 [shape=box, label=<<font color="black">[0] let separator = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15251 -> node15252 [color="black"]
    node15252_name [shape=none, label=<<font color="black">Call[15252]</font>>]
    node15252_name -> node15252 [arrowhead=none, color="black", style=dashed]
    node15252 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node15252 -> node15253 [color="black"]
    node15253_name [shape=none, label=<<font color="black">Block[15253]</font>>]
    node15253_name -> node15253 [arrowhead=none, color="black", style=dashed]
    node15253 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15253 -> node15254 [color="black"]
    node15254_name [shape=none, label=<<font color="black">Call[15254]</font>>]
    node15254_name -> node15254 [arrowhead=none, color="black", style=dashed]
    node15254 [shape=cds, label=<<font color="black">%1 = clo&lt;LengthOfArrayLike&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node15254 -> node15255 [color="black"]
    node15255_name [shape=none, label=<<font color="black">Block[15255]</font>>]
    node15255_name -> node15255 [arrowhead=none, color="black", style=dashed]
    node15255 [shape=box, label=<<font color="black">[0] let len = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15255 -> node15256 [color="black"]
    node15256_name [shape=none, label=<<font color="black">Branch[15256]</font>>]
    node15256_name -> node15256 [arrowhead=none, color="black", style=dashed]
    node15256 [shape=diamond, label=<<font color="black">(= separator undefined)</font>> color="black" fillcolor="white", style=filled]
    node15256 -> node15257 [label=<<font color="black">true</font>> color="black"]
    node15256 -> node15258 [label=<<font color="black">false</font>> color="black"]
    node15257_name [shape=none, label=<<font color="black">Block[15257]</font>>]
    node15257_name -> node15257 [arrowhead=none, color="black", style=dashed]
    node15257 [shape=box, label=<<font color="black">[0] let sep = &quot;,&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15257 -> node15260 [color="black"]
    node15258_name [shape=none, label=<<font color="black">Call[15258]</font>>]
    node15258_name -> node15258 [arrowhead=none, color="black", style=dashed]
    node15258 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(separator)</font>> color="black" fillcolor="white", style=filled]
    node15258 -> node15259 [color="black"]
    node15260_name [shape=none, label=<<font color="black">Block[15260]</font>>]
    node15260_name -> node15260 [arrowhead=none, color="black", style=dashed]
    node15260 [shape=box, label=<<font color="black">[0] let R = &quot;&quot;<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15260 -> node15261 [color="black"]
    node15259_name [shape=none, label=<<font color="black">Block[15259]</font>>]
    node15259_name -> node15259 [arrowhead=none, color="black", style=dashed]
    node15259 [shape=box, label=<<font color="black">[0] let sep = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15259 -> node15260 [color="black"]
    node15261_name [shape=none, label=<<font color="black">Branch[15261]</font>>]
    node15261_name -> node15261 [arrowhead=none, color="black", style=dashed]
    node15261 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node15261 -> node15262 [label=<<font color="black">true</font>> color="black"]
    node15261 -> node15272 [label=<<font color="black">false</font>> color="black"]
    node15262_name [shape=none, label=<<font color="black">Branch[15262]</font>>]
    node15262_name -> node15262 [arrowhead=none, color="black", style=dashed]
    node15262 [shape=diamond, label=<<font color="black">(&lt; 0 k)</font>> color="black" fillcolor="white", style=filled]
    node15262 -> node15263 [label=<<font color="black">true</font>> color="black"]
    node15262 -> node15264 [label=<<font color="black">false</font>> color="black"]
    node15272_name [shape=none, label=<<font color="black">Block[15272]</font>>]
    node15272_name -> node15272 [arrowhead=none, color="black", style=dashed]
    node15272 [shape=box, label=<<font color="black">[0] return R<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15272 -> cluster2360_exit [color="black"]
    node15263_name [shape=none, label=<<font color="black">Block[15263]</font>>]
    node15263_name -> node15263 [arrowhead=none, color="black", style=dashed]
    node15263 [shape=box, label=<<font color="black">[0] R = (concat R sep)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15263 -> node15264 [color="black"]
    node15264_name [shape=none, label=<<font color="black">Call[15264]</font>>]
    node15264_name -> node15264 [arrowhead=none, color="black", style=dashed]
    node15264 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15264 -> node15265 [color="black"]
    node15265_name [shape=none, label=<<font color="black">Call[15265]</font>>]
    node15265_name -> node15265 [arrowhead=none, color="black", style=dashed]
    node15265 [shape=cds, label=<<font color="black">%4 = clo&lt;Get&gt;(O, [! %3])</font>> color="black" fillcolor="white", style=filled]
    node15265 -> node15266 [color="black"]
    node15266_name [shape=none, label=<<font color="black">Block[15266]</font>>]
    node15266_name -> node15266 [arrowhead=none, color="black", style=dashed]
    node15266 [shape=box, label=<<font color="black">[0] let element = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15266 -> node15267 [color="black"]
    node15267_name [shape=none, label=<<font color="black">Branch[15267]</font>>]
    node15267_name -> node15267 [arrowhead=none, color="black", style=dashed]
    node15267 [shape=diamond, label=<<font color="black">(|| (= element undefined) (= element null))</font>> color="black" fillcolor="white", style=filled]
    node15267 -> node15268 [label=<<font color="black">true</font>> color="black"]
    node15267 -> node15269 [label=<<font color="black">false</font>> color="black"]
    node15268_name [shape=none, label=<<font color="black">Block[15268]</font>>]
    node15268_name -> node15268 [arrowhead=none, color="black", style=dashed]
    node15268 [shape=box, label=<<font color="black">[0] let next = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15268 -> node15271 [color="black"]
    node15269_name [shape=none, label=<<font color="black">Call[15269]</font>>]
    node15269_name -> node15269 [arrowhead=none, color="black", style=dashed]
    node15269 [shape=cds, label=<<font color="black">%5 = clo&lt;ToString&gt;(element)</font>> color="black" fillcolor="white", style=filled]
    node15269 -> node15270 [color="black"]
    node15271_name [shape=none, label=<<font color="black">Block[15271]</font>>]
    node15271_name -> node15271 [arrowhead=none, color="black", style=dashed]
    node15271 [shape=box, label=<<font color="black">[0] R = (concat R next)<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15271 -> node15261 [color="black"]
    node15270_name [shape=none, label=<<font color="black">Block[15270]</font>>]
    node15270_name -> node15270 [arrowhead=none, color="black", style=dashed]
    node15270 [shape=box, label=<<font color="black">[0] let next = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15270 -> node15271 [color="black"]
  }
}