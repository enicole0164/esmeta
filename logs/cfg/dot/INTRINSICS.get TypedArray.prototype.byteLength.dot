digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2390 {
    label = "def <BUILTIN>:INTRINSICS.get TypedArray.prototype.byteLength(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2390_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2390_entry_name -> cluster2390_entry [arrowhead=none, color="black", style=dashed]
    cluster2390_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2390_entry -> node15961 [color="black"]
    cluster2390_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2390_exit_name -> cluster2390_exit [arrowhead=none, color="black", style=dashed]
    cluster2390_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15961_name [shape=none, label=<<font color="black">Block[15961]</font>>]
    node15961_name -> node15961 [arrowhead=none, color="black", style=dashed]
    node15961 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15961 -> node15962 [color="black"]
    node15962_name [shape=none, label=<<font color="black">Call[15962]</font>>]
    node15962_name -> node15962 [arrowhead=none, color="black", style=dashed]
    node15962 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;TypedArrayName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node15962 -> node15963 [color="black"]
    node15963_name [shape=none, label=<<font color="black">Block[15963]</font>>]
    node15963_name -> node15963 [arrowhead=none, color="black", style=dashed]
    node15963 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= O.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/>[2] let buffer = O.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15963 -> node15964 [color="black"]
    node15964_name [shape=none, label=<<font color="black">Call[15964]</font>>]
    node15964_name -> node15964 [arrowhead=none, color="black", style=dashed]
    node15964 [shape=cds, label=<<font color="black">%1 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node15964 -> node15965 [color="black"]
    node15965_name [shape=none, label=<<font color="black">Branch[15965]</font>>]
    node15965_name -> node15965 [arrowhead=none, color="black", style=dashed]
    node15965 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node15965 -> node15966 [label=<<font color="black">true</font>> color="black"]
    node15965 -> node15967 [label=<<font color="black">false</font>> color="black"]
    node15966_name [shape=none, label=<<font color="black">Block[15966]</font>>]
    node15966_name -> node15966 [arrowhead=none, color="black", style=dashed]
    node15966 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15966 -> cluster2390_exit [color="black"]
    node15967_name [shape=none, label=<<font color="black">Block[15967]</font>>]
    node15967_name -> node15967 [arrowhead=none, color="black", style=dashed]
    node15967 [shape=box, label=<<font color="black">[0] let size = O.ByteLength<BR ALIGN="LEFT"/>[1] return ([number] size)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15967 -> cluster2390_exit [color="black"]
  }
}