digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster997 {
    label = "def <CONC>:FunctionEnvironmentRecord.GetSuperBase(envRec: FunctionEnvironmentRecord): Normal[Object | Undefined | Null] | Abrupt"
    style = rounded
    cluster997_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster997_entry_name -> cluster997_entry [arrowhead=none, color="black", style=dashed]
    cluster997_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster997_entry -> node3687 [color="black"]
    cluster997_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster997_exit_name -> cluster997_exit [arrowhead=none, color="black", style=dashed]
    cluster997_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3687_name [shape=none, label=<<font color="black">Block[3687]</font>>]
    node3687_name -> node3687 [arrowhead=none, color="black", style=dashed]
    node3687 [shape=box, label=<<font color="black">[0] let home = envRec.FunctionObject.HomeObject<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3687 -> node3688 [color="black"]
    node3688_name [shape=none, label=<<font color="black">Branch[3688]</font>>]
    node3688_name -> node3688 [arrowhead=none, color="black", style=dashed]
    node3688 [shape=diamond, label=<<font color="black">(= home undefined)</font>> color="black" fillcolor="white", style=filled]
    node3688 -> node3689 [label=<<font color="black">true</font>> color="black"]
    node3688 -> node3690 [label=<<font color="black">false</font>> color="black"]
    node3689_name [shape=none, label=<<font color="black">Block[3689]</font>>]
    node3689_name -> node3689 [arrowhead=none, color="black", style=dashed]
    node3689 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3689 -> cluster997_exit [color="black"]
    node3690_name [shape=none, label=<<font color="black">Block[3690]</font>>]
    node3690_name -> node3690 [arrowhead=none, color="black", style=dashed]
    node3690 [shape=box, label=<<font color="black">[0] assert (= (typeof home) @Object)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3690 -> node3691 [color="black"]
    node3691_name [shape=none, label=<<font color="black">Call[3691]</font>>]
    node3691_name -> node3691 [arrowhead=none, color="black", style=dashed]
    node3691 [shape=cds, label=<<font color="black">%0 = home-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node3691 -> node3692 [color="black"]
    node3692_name [shape=none, label=<<font color="black">Block[3692]</font>>]
    node3692_name -> node3692 [arrowhead=none, color="black", style=dashed]
    node3692 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3692 -> cluster997_exit [color="black"]
  }
}