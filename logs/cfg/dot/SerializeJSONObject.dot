digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2551 {
    label = "def SerializeJSONObject(state: Unknown, value: Object): Normal[String] | Abrupt"
    style = rounded
    cluster2551_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2551_entry_name -> cluster2551_entry [arrowhead=none, color="black", style=dashed]
    cluster2551_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2551_entry -> node18442 [color="black"]
    cluster2551_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2551_exit_name -> cluster2551_exit [arrowhead=none, color="black", style=dashed]
    cluster2551_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18442_name [shape=none, label=<<font color="black">Branch[18442]</font>>]
    node18442_name -> node18442 [arrowhead=none, color="black", style=dashed]
    node18442 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white", style=filled]
    node18442 -> node18443 [label=<<font color="black">true</font>> color="black"]
    node18442 -> node18444 [label=<<font color="black">false</font>> color="black"]
    node18443_name [shape=none, label=<<font color="black">Block[18443]</font>>]
    node18443_name -> node18443 [arrowhead=none, color="black", style=dashed]
    node18443 [shape=box, label=<<font color="black">[0] (yet &quot;throw a *TypeError* exception because the structure is cyclical.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18443 -> node18444 [color="black"]
    node18444_name [shape=none, label=<<font color="black">Block[18444]</font>>]
    node18444_name -> node18444 [arrowhead=none, color="black", style=dashed]
    node18444 [shape=box, label=<<font color="black">[0] push state.Stack &lt; value<BR ALIGN="LEFT"/>[1] let stepback = state.Indent<BR ALIGN="LEFT"/>[2] state.Indent = (concat state.Indent state.Gap)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18444 -> node18445 [color="black"]
    node18445_name [shape=none, label=<<font color="black">Branch[18445]</font>>]
    node18445_name -> node18445 [arrowhead=none, color="black", style=dashed]
    node18445 [shape=diamond, label=<<font color="black">(! (= state.PropertyList undefined))</font>> color="black" fillcolor="white", style=filled]
    node18445 -> node18446 [label=<<font color="black">true</font>> color="black"]
    node18445 -> node18447 [label=<<font color="black">false</font>> color="black"]
    node18446_name [shape=none, label=<<font color="black">Block[18446]</font>>]
    node18446_name -> node18446 [arrowhead=none, color="black", style=dashed]
    node18446 [shape=box, label=<<font color="black">[0] let K = state.PropertyList<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18446 -> node18449 [color="black"]
    node18447_name [shape=none, label=<<font color="black">Call[18447]</font>>]
    node18447_name -> node18447 [arrowhead=none, color="black", style=dashed]
    node18447 [shape=cds, label=<<font color="black">%0 = clo&lt;EnumerableOwnPropertyNames&gt;(value, ~key~)</font>> color="black" fillcolor="white", style=filled]
    node18447 -> node18448 [color="black"]
    node18449_name [shape=none, label=<<font color="black">Block[18449]</font>>]
    node18449_name -> node18449 [arrowhead=none, color="black", style=dashed]
    node18449 [shape=box, label=<<font color="black">[0] let partial = (new [])[#1200]<BR ALIGN="LEFT"/>[1] %2 = K<BR ALIGN="LEFT"/>[2] %1 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18449 -> node18450 [color="black"]
    node18448_name [shape=none, label=<<font color="black">Block[18448]</font>>]
    node18448_name -> node18448 [arrowhead=none, color="black", style=dashed]
    node18448 [shape=box, label=<<font color="black">[0] let K = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18448 -> node18449 [color="black"]
    node18450_name [shape=none, label=<<font color="black">Branch[18450]</font>>]
    node18450_name -> node18450 [arrowhead=none, color="black", style=dashed]
    node18450 [shape=diamond, label=<<font color="black">(&lt; %1 %2.length)</font>> color="black" fillcolor="white", style=filled]
    node18450 -> node18451 [label=<<font color="black">true</font>> color="black"]
    node18450 -> node18461 [label=<<font color="black">false</font>> color="black"]
    node18451_name [shape=none, label=<<font color="black">Block[18451]</font>>]
    node18451_name -> node18451 [arrowhead=none, color="black", style=dashed]
    node18451 [shape=box, label=<<font color="black">[0] let P = %2[%1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18451 -> node18452 [color="black"]
    node18461_name [shape=none, label=<<font color="black">Branch[18461]</font>>]
    node18461_name -> node18461 [arrowhead=none, color="black", style=dashed]
    node18461 [shape=diamond, label=<<font color="black">(= partial.length 0)</font>> color="black" fillcolor="white", style=filled]
    node18461 -> node18462 [label=<<font color="black">true</font>> color="black"]
    node18461 -> node18463 [label=<<font color="black">false</font>> color="black"]
    node18452_name [shape=none, label=<<font color="black">Call[18452]</font>>]
    node18452_name -> node18452 [arrowhead=none, color="black", style=dashed]
    node18452 [shape=cds, label=<<font color="black">%3 = clo&lt;SerializeJSONProperty&gt;(state, P, value)</font>> color="black" fillcolor="white", style=filled]
    node18452 -> node18453 [color="black"]
    node18462_name [shape=none, label=<<font color="black">Block[18462]</font>>]
    node18462_name -> node18462 [arrowhead=none, color="black", style=dashed]
    node18462 [shape=box, label=<<font color="black">[0] let final = &quot;{}&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18462 -> node18466 [color="black"]
    node18463_name [shape=none, label=<<font color="black">Branch[18463]</font>>]
    node18463_name -> node18463 [arrowhead=none, color="black", style=dashed]
    node18463 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white", style=filled]
    node18463 -> node18464 [label=<<font color="black">true</font>> color="black"]
    node18463 -> node18465 [label=<<font color="black">false</font>> color="black"]
    node18453_name [shape=none, label=<<font color="black">Block[18453]</font>>]
    node18453_name -> node18453 [arrowhead=none, color="black", style=dashed]
    node18453 [shape=box, label=<<font color="black">[0] let strP = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18453 -> node18454 [color="black"]
    node18466_name [shape=none, label=<<font color="black">Block[18466]</font>>]
    node18466_name -> node18466 [arrowhead=none, color="black", style=dashed]
    node18466 [shape=box, label=<<font color="black">[0] (yet &quot;Remove the last element of _state_.[[Stack]].&quot;)<BR ALIGN="LEFT"/>[1] state.Indent = stepback<BR ALIGN="LEFT"/>[2] return final<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18466 -> cluster2551_exit [color="black"]
    node18464_name [shape=none, label=<<font color="black">Block[18464]</font>>]
    node18464_name -> node18464 [arrowhead=none, color="black", style=dashed]
    node18464 [shape=box, label=<<font color="black">[0] (yet &quot;Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.&quot;)<BR ALIGN="LEFT"/>[1] let final = (concat &quot;{&quot; properties &quot;}&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18464 -> node18466 [color="black"]
    node18465_name [shape=none, label=<<font color="black">Block[18465]</font>>]
    node18465_name -> node18465 [arrowhead=none, color="black", style=dashed]
    node18465 [shape=box, label=<<font color="black">[0] let separator = (concat 44cu 10cu state.Indent)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.&quot;)<BR ALIGN="LEFT"/>[2] let final = (concat &quot;{&quot; 10cu state.Indent properties 10cu stepback &quot;}&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18465 -> node18466 [color="black"]
    node18454_name [shape=none, label=<<font color="black">Branch[18454]</font>>]
    node18454_name -> node18454 [arrowhead=none, color="black", style=dashed]
    node18454 [shape=diamond, label=<<font color="black">(! (= strP undefined))</font>> color="black" fillcolor="white", style=filled]
    node18454 -> node18455 [label=<<font color="black">true</font>> color="black"]
    node18454 -> node18460 [label=<<font color="black">false</font>> color="black"]
    node18455_name [shape=none, label=<<font color="black">Call[18455]</font>>]
    node18455_name -> node18455 [arrowhead=none, color="black", style=dashed]
    node18455 [shape=cds, label=<<font color="black">%4 = clo&lt;QuoteJSONString&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node18455 -> node18456 [color="black"]
    node18460_name [shape=none, label=<<font color="black">Block[18460]</font>>]
    node18460_name -> node18460 [arrowhead=none, color="black", style=dashed]
    node18460 [shape=box, label=<<font color="black">[0] %1 = (+ %1 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18460 -> node18450 [color="black"]
    node18456_name [shape=none, label=<<font color="black">Block[18456]</font>>]
    node18456_name -> node18456 [arrowhead=none, color="black", style=dashed]
    node18456 [shape=box, label=<<font color="black">[0] let member = %4<BR ALIGN="LEFT"/>[1] member = (concat member &quot;:&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18456 -> node18457 [color="black"]
    node18457_name [shape=none, label=<<font color="black">Branch[18457]</font>>]
    node18457_name -> node18457 [arrowhead=none, color="black", style=dashed]
    node18457 [shape=diamond, label=<<font color="black">(! (= state.Gap &quot;&quot;))</font>> color="black" fillcolor="white", style=filled]
    node18457 -> node18458 [label=<<font color="black">true</font>> color="black"]
    node18457 -> node18459 [label=<<font color="black">false</font>> color="black"]
    node18458_name [shape=none, label=<<font color="black">Block[18458]</font>>]
    node18458_name -> node18458 [arrowhead=none, color="black", style=dashed]
    node18458 [shape=box, label=<<font color="black">[0] member = (concat member 32cu)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18458 -> node18459 [color="black"]
    node18459_name [shape=none, label=<<font color="black">Block[18459]</font>>]
    node18459_name -> node18459 [arrowhead=none, color="black", style=dashed]
    node18459 [shape=box, label=<<font color="black">[0] member = (concat member strP)<BR ALIGN="LEFT"/>[1] push partial &lt; member<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18459 -> node18460 [color="black"]
  }
}