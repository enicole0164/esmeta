digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2320 {
    label = "def RegExpHasFlag(R: ESValue, codeUnit: Unknown["CodeUnit"]): Normal[Boolean | Undefined] | Abrupt"
    style = rounded
    cluster2320_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2320_entry_name -> cluster2320_entry [arrowhead=none, color="black", style=dashed]
    cluster2320_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2320_entry -> node14288 [color="black"]
    cluster2320_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2320_exit_name -> cluster2320_exit [arrowhead=none, color="black", style=dashed]
    cluster2320_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14288_name [shape=none, label=<<font color="black">Branch[14288]</font>>]
    node14288_name -> node14288 [arrowhead=none, color="black", style=dashed]
    node14288 [shape=diamond, label=<<font color="black">(! (= (typeof R) @Object))</font>> color="black" fillcolor="white", style=filled]
    node14288 -> node14289 [label=<<font color="black">true</font>> color="black"]
    node14288 -> node14290 [label=<<font color="black">false</font>> color="black"]
    node14289_name [shape=none, label=<<font color="black">Block[14289]</font>>]
    node14289_name -> node14289 [arrowhead=none, color="black", style=dashed]
    node14289 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#993])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14289 -> cluster2320_exit [color="black"]
    node14290_name [shape=none, label=<<font color="black">Branch[14290]</font>>]
    node14290_name -> node14290 [arrowhead=none, color="black", style=dashed]
    node14290 [shape=diamond, label=<<font color="black">(= R.OriginalFlags absent)</font>> color="black" fillcolor="white", style=filled]
    node14290 -> node14291 [label=<<font color="black">true</font>> color="black"]
    node14290 -> node14295 [label=<<font color="black">false</font>> color="black"]
    node14291_name [shape=none, label=<<font color="black">Call[14291]</font>>]
    node14291_name -> node14291 [arrowhead=none, color="black", style=dashed]
    node14291 [shape=cds, label=<<font color="black">%0 = clo&lt;SameValue&gt;(R, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RegExp.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node14291 -> node14292 [color="black"]
    node14295_name [shape=none, label=<<font color="black">Block[14295]</font>>]
    node14295_name -> node14295 [arrowhead=none, color="black", style=dashed]
    node14295 [shape=box, label=<<font color="black">[0] let flags = R.OriginalFlags<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14295 -> node14296 [color="black"]
    node14292_name [shape=none, label=<<font color="black">Branch[14292]</font>>]
    node14292_name -> node14292 [arrowhead=none, color="black", style=dashed]
    node14292 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node14292 -> node14293 [label=<<font color="black">true</font>> color="black"]
    node14292 -> node14294 [label=<<font color="black">false</font>> color="black"]
    node14296_name [shape=none, label=<<font color="black">Branch[14296]</font>>]
    node14296_name -> node14296 [arrowhead=none, color="black", style=dashed]
    node14296 [shape=diamond, label=<<font color="black">(contains flags codeUnit)</font>> color="black" fillcolor="white", style=filled]
    node14296 -> node14297 [label=<<font color="black">true</font>> color="black"]
    node14296 -> node14298 [label=<<font color="black">false</font>> color="black"]
    node14293_name [shape=none, label=<<font color="black">Block[14293]</font>>]
    node14293_name -> node14293 [arrowhead=none, color="black", style=dashed]
    node14293 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14293 -> cluster2320_exit [color="black"]
    node14294_name [shape=none, label=<<font color="black">Block[14294]</font>>]
    node14294_name -> node14294 [arrowhead=none, color="black", style=dashed]
    node14294 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#994])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14294 -> cluster2320_exit [color="black"]
    node14297_name [shape=none, label=<<font color="black">Block[14297]</font>>]
    node14297_name -> node14297 [arrowhead=none, color="black", style=dashed]
    node14297 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14297 -> cluster2320_exit [color="black"]
    node14298_name [shape=none, label=<<font color="black">Block[14298]</font>>]
    node14298_name -> node14298 [arrowhead=none, color="black", style=dashed]
    node14298 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14298 -> cluster2320_exit [color="black"]
  }
}