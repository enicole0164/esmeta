digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2600 {
    label = "def <BUILTIN-CLO>:INTRINSICS.Promise.prototype.finally:clo0(this: Unknown, argumentsList: Unknown, NewTarget: Unknown): Unknown"
    style = rounded
    cluster2600_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2600_entry_name -> cluster2600_entry [arrowhead=none, color="black", style=dashed]
    cluster2600_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2600_entry -> node19206 [color="black"]
    cluster2600_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2600_exit_name -> cluster2600_exit [arrowhead=none, color="black", style=dashed]
    cluster2600_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19206_name [shape=none, label=<<font color="black">Branch[19206]</font>>]
    node19206_name -> node19206 [arrowhead=none, color="black", style=dashed]
    node19206 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19206 -> node19207 [label=<<font color="black">true</font>> color="black"]
    node19206 -> node19208 [label=<<font color="black">false</font>> color="black"]
    node19207_name [shape=none, label=<<font color="black">Block[19207]</font>>]
    node19207_name -> node19207 [arrowhead=none, color="black", style=dashed]
    node19207 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19207 -> node19209 [color="black"]
    node19208_name [shape=none, label=<<font color="black">Block[19208]</font>>]
    node19208_name -> node19208 [arrowhead=none, color="black", style=dashed]
    node19208 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19208 -> node19209 [color="black"]
    node19209_name [shape=none, label=<<font color="black">Call[19209]</font>>]
    node19209_name -> node19209 [arrowhead=none, color="black", style=dashed]
    node19209 [shape=cds, label=<<font color="black">%0 = clo&lt;Call&gt;(onFinally, undefined)</font>> color="black" fillcolor="white", style=filled]
    node19209 -> node19210 [color="black"]
    node19210_name [shape=none, label=<<font color="black">Block[19210]</font>>]
    node19210_name -> node19210 [arrowhead=none, color="black", style=dashed]
    node19210 [shape=box, label=<<font color="black">[0] let result = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19210 -> node19211 [color="black"]
    node19211_name [shape=none, label=<<font color="black">Call[19211]</font>>]
    node19211_name -> node19211 [arrowhead=none, color="black", style=dashed]
    node19211 [shape=cds, label=<<font color="black">%1 = clo&lt;PromiseResolve&gt;(C, result)</font>> color="black" fillcolor="white", style=filled]
    node19211 -> node19212 [color="black"]
    node19212_name [shape=none, label=<<font color="black">Block[19212]</font>>]
    node19212_name -> node19212 [arrowhead=none, color="black", style=dashed]
    node19212 [shape=box, label=<<font color="black">[0] let promise = [? %1]<BR ALIGN="LEFT"/>[1] let returnValue = clo&lt;INTRINSICS.Promise.prototype.finally:clo0:clo0, [value]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19212 -> node19213 [color="black"]
    node19213_name [shape=none, label=<<font color="black">Call[19213]</font>>]
    node19213_name -> node19213 [arrowhead=none, color="black", style=dashed]
    node19213 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateBuiltinFunction&gt;(returnValue, 0, &quot;&quot;, (new [])[#1306])</font>> color="black" fillcolor="white", style=filled]
    node19213 -> node19214 [color="black"]
    node19214_name [shape=none, label=<<font color="black">Block[19214]</font>>]
    node19214_name -> node19214 [arrowhead=none, color="black", style=dashed]
    node19214 [shape=box, label=<<font color="black">[0] let valueThunk = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19214 -> node19215 [color="black"]
    node19215_name [shape=none, label=<<font color="black">Call[19215]</font>>]
    node19215_name -> node19215 [arrowhead=none, color="black", style=dashed]
    node19215 [shape=cds, label=<<font color="black">%3 = clo&lt;Invoke&gt;(promise, &quot;then&quot;, (new [valueThunk])[#1307])</font>> color="black" fillcolor="white", style=filled]
    node19215 -> node19216 [color="black"]
    node19216_name [shape=none, label=<<font color="black">Block[19216]</font>>]
    node19216_name -> node19216 [arrowhead=none, color="black", style=dashed]
    node19216 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19216 -> cluster2600_exit [color="black"]
  }
}