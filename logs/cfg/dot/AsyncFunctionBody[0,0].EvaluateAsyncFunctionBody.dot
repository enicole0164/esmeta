digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1708 {
    label = "def <SYNTAX>:AsyncFunctionBody[0,0].EvaluateAsyncFunctionBody(this: Ast:AsyncFunctionBody[0,0], functionObject: Unknown, argumentsList: Unknown["List"]): Abrupt[return]"
    style = rounded
    cluster1708_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1708_entry_name -> cluster1708_entry [arrowhead=none, color="black", style=dashed]
    cluster1708_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1708_entry -> node9613 [color="black"]
    cluster1708_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1708_exit_name -> cluster1708_exit [arrowhead=none, color="black", style=dashed]
    cluster1708_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node9613_name [shape=none, label=<<font color="black">Call[9613]</font>>]
    node9613_name -> node9613 [arrowhead=none, color="black", style=dashed]
    node9613 [shape=cds, label=<<font color="black">%0 = clo&lt;NewPromiseCapability&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node9613 -> node9614 [color="black"]
    node9614_name [shape=none, label=<<font color="black">Block[9614]</font>>]
    node9614_name -> node9614 [arrowhead=none, color="black", style=dashed]
    node9614 [shape=box, label=<<font color="black">[0] let promiseCapability = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9614 -> node9615 [color="black"]
    node9615_name [shape=none, label=<<font color="black">Call[9615]</font>>]
    node9615_name -> node9615 [arrowhead=none, color="black", style=dashed]
    node9615 [shape=cds, label=<<font color="black">%1 = clo&lt;FunctionDeclarationInstantiation&gt;(functionObject, argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node9615 -> node9616 [color="black"]
    node9616_name [shape=none, label=<<font color="black">Call[9616]</font>>]
    node9616_name -> node9616 [arrowhead=none, color="black", style=dashed]
    node9616 [shape=cds, label=<<font color="black">%2 = clo&lt;Completion&gt;(%1)</font>> color="black" fillcolor="white", style=filled]
    node9616 -> node9617 [color="black"]
    node9617_name [shape=none, label=<<font color="black">Block[9617]</font>>]
    node9617_name -> node9617 [arrowhead=none, color="black", style=dashed]
    node9617 [shape=box, label=<<font color="black">[0] let declResult = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9617 -> node9618 [color="black"]
    node9618_name [shape=none, label=<<font color="black">Branch[9618]</font>>]
    node9618_name -> node9618 [arrowhead=none, color="black", style=dashed]
    node9618 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? declResult) (! (= declResult.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node9618 -> node9619 [label=<<font color="black">true</font>> color="black"]
    node9618 -> node9621 [label=<<font color="black">false</font>> color="black"]
    node9619_name [shape=none, label=<<font color="black">Call[9619]</font>>]
    node9619_name -> node9619 [arrowhead=none, color="black", style=dashed]
    node9619 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [declResult.Value])[#746])</font>> color="black" fillcolor="white", style=filled]
    node9619 -> node9620 [color="black"]
    node9621_name [shape=none, label=<<font color="black">Call[9621]</font>>]
    node9621_name -> node9621 [arrowhead=none, color="black", style=dashed]
    node9621 [shape=cds, label=<<font color="black">%4 = clo&lt;AsyncFunctionStart&gt;(promiseCapability, this[0])</font>> color="black" fillcolor="white", style=filled]
    node9621 -> node9622 [color="black"]
    node9620_name [shape=none, label=<<font color="black">Block[9620]</font>>]
    node9620_name -> node9620 [arrowhead=none, color="black", style=dashed]
    node9620 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9620 -> node9622 [color="black"]
    node9622_name [shape=none, label=<<font color="black">Block[9622]</font>>]
    node9622_name -> node9622 [arrowhead=none, color="black", style=dashed]
    node9622 [shape=box, label=<<font color="black">[0] return comp[~return~/~empty~](promiseCapability.Promise)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9622 -> cluster1708_exit [color="black"]
  }
}