digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2445 {
    label = "def <CLO>:CreateMapIterator:clo0(): Unknown"
    style = rounded
    cluster2445_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2445_entry_name -> cluster2445_entry [arrowhead=none, color="black", style=dashed]
    cluster2445_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2445_entry -> node17013 [color="black"]
    cluster2445_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2445_exit_name -> cluster2445_exit [arrowhead=none, color="black", style=dashed]
    cluster2445_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17013_name [shape=none, label=<<font color="black">Block[17013]</font>>]
    node17013_name -> node17013 [arrowhead=none, color="black", style=dashed]
    node17013 [shape=box, label=<<font color="black">[0] let entries = map.MapData<BR ALIGN="LEFT"/>[1] let index = 0<BR ALIGN="LEFT"/>[2] let numEntries = entries.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17013 -> node17014 [color="black"]
    node17014_name [shape=none, label=<<font color="black">Branch[17014]</font>>]
    node17014_name -> node17014 [arrowhead=none, color="black", style=dashed]
    node17014 [shape=diamond, label=<<font color="black">(&lt; index numEntries)</font>> color="black" fillcolor="white", style=filled]
    node17014 -> node17015 [label=<<font color="black">true</font>> color="black"]
    node17014 -> node17027 [label=<<font color="black">false</font>> color="black"]
    node17015_name [shape=none, label=<<font color="black">Block[17015]</font>>]
    node17015_name -> node17015 [arrowhead=none, color="black", style=dashed]
    node17015 [shape=box, label=<<font color="black">[0] let e = entries[index]<BR ALIGN="LEFT"/>[1] index = (+ index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17015 -> node17016 [color="black"]
    node17027_name [shape=none, label=<<font color="black">Call[17027]</font>>]
    node17027_name -> node17027 [arrowhead=none, color="black", style=dashed]
    node17027 [shape=cds, label=<<font color="black">%3 = clo&lt;NormalCompletion&gt;(undefined)</font>> color="black" fillcolor="white", style=filled]
    node17027 -> node17028 [color="black"]
    node17016_name [shape=none, label=<<font color="black">Branch[17016]</font>>]
    node17016_name -> node17016 [arrowhead=none, color="black", style=dashed]
    node17016 [shape=diamond, label=<<font color="black">(! (= e.Key ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node17016 -> node17017 [label=<<font color="black">true</font>> color="black"]
    node17016 -> node17014 [label=<<font color="black">false</font>> color="black"]
    node17028_name [shape=none, label=<<font color="black">Block[17028]</font>>]
    node17028_name -> node17028 [arrowhead=none, color="black", style=dashed]
    node17028 [shape=box, label=<<font color="black">[0] return %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17028 -> cluster2445_exit [color="black"]
    node17017_name [shape=none, label=<<font color="black">Branch[17017]</font>>]
    node17017_name -> node17017 [arrowhead=none, color="black", style=dashed]
    node17017 [shape=diamond, label=<<font color="black">(= kind ~key~)</font>> color="black" fillcolor="white", style=filled]
    node17017 -> node17018 [label=<<font color="black">true</font>> color="black"]
    node17017 -> node17019 [label=<<font color="black">false</font>> color="black"]
    node17018_name [shape=none, label=<<font color="black">Block[17018]</font>>]
    node17018_name -> node17018 [arrowhead=none, color="black", style=dashed]
    node17018 [shape=box, label=<<font color="black">[0] let result = e.Key<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17018 -> node17024 [color="black"]
    node17019_name [shape=none, label=<<font color="black">Branch[17019]</font>>]
    node17019_name -> node17019 [arrowhead=none, color="black", style=dashed]
    node17019 [shape=diamond, label=<<font color="black">(= kind ~value~)</font>> color="black" fillcolor="white", style=filled]
    node17019 -> node17020 [label=<<font color="black">true</font>> color="black"]
    node17019 -> node17021 [label=<<font color="black">false</font>> color="black"]
    node17024_name [shape=none, label=<<font color="black">Call[17024]</font>>]
    node17024_name -> node17024 [arrowhead=none, color="black", style=dashed]
    node17024 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateIterResultObject&gt;(result, false)</font>> color="black" fillcolor="white", style=filled]
    node17024 -> node17025 [color="black"]
    node17020_name [shape=none, label=<<font color="black">Block[17020]</font>>]
    node17020_name -> node17020 [arrowhead=none, color="black", style=dashed]
    node17020 [shape=box, label=<<font color="black">[0] let result = e.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17020 -> node17024 [color="black"]
    node17021_name [shape=none, label=<<font color="black">Block[17021]</font>>]
    node17021_name -> node17021 [arrowhead=none, color="black", style=dashed]
    node17021 [shape=box, label=<<font color="black">[0] assert (= kind ~key+value~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17021 -> node17022 [color="black"]
    node17025_name [shape=none, label=<<font color="black">Call[17025]</font>>]
    node17025_name -> node17025 [arrowhead=none, color="black", style=dashed]
    node17025 [shape=cds, label=<<font color="black">%2 = clo&lt;GeneratorYield&gt;(%1)</font>> color="black" fillcolor="white", style=filled]
    node17025 -> node17026 [color="black"]
    node17022_name [shape=none, label=<<font color="black">Call[17022]</font>>]
    node17022_name -> node17022 [arrowhead=none, color="black", style=dashed]
    node17022 [shape=cds, label=<<font color="black">%0 = clo&lt;CreateArrayFromList&gt;((new [e.Key, e.Value])[#1122])</font>> color="black" fillcolor="white", style=filled]
    node17022 -> node17023 [color="black"]
    node17026_name [shape=none, label=<<font color="black">Block[17026]</font>>]
    node17026_name -> node17026 [arrowhead=none, color="black", style=dashed]
    node17026 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] numEntries = entries.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17026 -> node17014 [color="black"]
    node17023_name [shape=none, label=<<font color="black">Block[17023]</font>>]
    node17023_name -> node17023 [arrowhead=none, color="black", style=dashed]
    node17023 [shape=box, label=<<font color="black">[0] let result = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17023 -> node17024 [color="black"]
  }
}