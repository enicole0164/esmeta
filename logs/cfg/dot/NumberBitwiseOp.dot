digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster27 {
    label = "def NumberBitwiseOp(op: Unknown["`&`,`^`,Or``"], x: Number, y: Number): Unknown["IntegralNumber"]"
    style = rounded
    cluster27_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster27_entry_name -> cluster27_entry [arrowhead=none, color="black", style=dashed]
    cluster27_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster27_entry -> node295 [color="black"]
    cluster27_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster27_exit_name -> cluster27_exit [arrowhead=none, color="black", style=dashed]
    cluster27_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node295_name [shape=none, label=<<font color="black">Call[295]</font>>]
    node295_name -> node295 [arrowhead=none, color="black", style=dashed]
    node295 [shape=cds, label=<<font color="black">%0 = clo&lt;ToInt32&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node295 -> node296 [color="black"]
    node296_name [shape=none, label=<<font color="black">Block[296]</font>>]
    node296_name -> node296 [arrowhead=none, color="black", style=dashed]
    node296 [shape=box, label=<<font color="black">[0] let lnum = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node296 -> node297 [color="black"]
    node297_name [shape=none, label=<<font color="black">Call[297]</font>>]
    node297_name -> node297 [arrowhead=none, color="black", style=dashed]
    node297 [shape=cds, label=<<font color="black">%1 = clo&lt;ToInt32&gt;(y)</font>> color="black" fillcolor="white", style=filled]
    node297 -> node298 [color="black"]
    node298_name [shape=none, label=<<font color="black">Block[298]</font>>]
    node298_name -> node298 [arrowhead=none, color="black", style=dashed]
    node298 [shape=box, label=<<font color="black">[0] let rnum = [! %1]<BR ALIGN="LEFT"/>[1] let lbits = ([math] lnum)<BR ALIGN="LEFT"/>[2] let rbits = ([math] rnum)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node298 -> node299 [color="black"]
    node299_name [shape=none, label=<<font color="black">Branch[299]</font>>]
    node299_name -> node299 [arrowhead=none, color="black", style=dashed]
    node299 [shape=diamond, label=<<font color="black">(= op &quot;&amp;&quot;)</font>> color="black" fillcolor="white", style=filled]
    node299 -> node300 [label=<<font color="black">true</font>> color="black"]
    node299 -> node301 [label=<<font color="black">false</font>> color="black"]
    node300_name [shape=none, label=<<font color="black">Block[300]</font>>]
    node300_name -> node300 [arrowhead=none, color="black", style=dashed]
    node300 [shape=box, label=<<font color="black">[0] let result = (&amp; lbits rbits)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node300 -> node304 [color="black"]
    node301_name [shape=none, label=<<font color="black">Branch[301]</font>>]
    node301_name -> node301 [arrowhead=none, color="black", style=dashed]
    node301 [shape=diamond, label=<<font color="black">(= op &quot;^&quot;)</font>> color="black" fillcolor="white", style=filled]
    node301 -> node302 [label=<<font color="black">true</font>> color="black"]
    node301 -> node303 [label=<<font color="black">false</font>> color="black"]
    node304_name [shape=none, label=<<font color="black">Block[304]</font>>]
    node304_name -> node304 [arrowhead=none, color="black", style=dashed]
    node304 [shape=box, label=<<font color="black">[0] return ([number] result)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node304 -> cluster27_exit [color="black"]
    node302_name [shape=none, label=<<font color="black">Block[302]</font>>]
    node302_name -> node302 [arrowhead=none, color="black", style=dashed]
    node302 [shape=box, label=<<font color="black">[0] let result = (^ lbits rbits)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node302 -> node304 [color="black"]
    node303_name [shape=none, label=<<font color="black">Block[303]</font>>]
    node303_name -> node303 [arrowhead=none, color="black", style=dashed]
    node303 [shape=box, label=<<font color="black">[0] let result = (| lbits rbits)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node303 -> node304 [color="black"]
  }
}