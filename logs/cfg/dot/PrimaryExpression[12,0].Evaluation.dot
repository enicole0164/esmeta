digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1256 {
    label = "def <SYNTAX>:PrimaryExpression[12,0].Evaluation(this: Ast:PrimaryExpression[12,0]): Unknown"
    style = rounded
    cluster1256_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1256_entry_name -> cluster1256_entry [arrowhead=none, color="black", style=dashed]
    cluster1256_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1256_entry -> node5775 [color="black"]
    cluster1256_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1256_exit_name -> cluster1256_exit [arrowhead=none, color="black", style=dashed]
    cluster1256_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5775_name [shape=none, label=<<font color="black">Block[5775]</font>>]
    node5775_name -> node5775 [arrowhead=none, color="black", style=dashed]
    node5775 [shape=box, label=<<font color="black">[0] let expr = (parse this[0] (nt |ParenthesizedExpression|[]))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5775 -> node5776 [color="black"]
    node5776_name [shape=none, label=<<font color="black">Call[5776]</font>>]
    node5776_name -> node5776 [arrowhead=none, color="black", style=dashed]
    node5776 [shape=cds, label=<<font color="black">%0 = expr-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5776 -> node5777 [color="black"]
    node5777_name [shape=none, label=<<font color="black">Block[5777]</font>>]
    node5777_name -> node5777 [arrowhead=none, color="black", style=dashed]
    node5777 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5777 -> cluster1256_exit [color="black"]
  }
}