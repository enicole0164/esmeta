digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1151 {
    label = "def <INTERNAL>:ProxyExoticObject.SetPrototypeOf(O: ProxyExoticObject, V: Object | Null): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1151_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1151_entry_name -> cluster1151_entry [arrowhead=none, color="black", style=dashed]
    cluster1151_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1151_entry -> node5026 [color="black"]
    cluster1151_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1151_exit_name -> cluster1151_exit [arrowhead=none, color="black", style=dashed]
    cluster1151_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5026_name [shape=none, label=<<font color="black">Block[5026]</font>>]
    node5026_name -> node5026 [arrowhead=none, color="black", style=dashed]
    node5026 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5026 -> node5027 [color="black"]
    node5027_name [shape=none, label=<<font color="black">Branch[5027]</font>>]
    node5027_name -> node5027 [arrowhead=none, color="black", style=dashed]
    node5027 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5027 -> node5028 [label=<<font color="black">true</font>> color="black"]
    node5027 -> node5029 [label=<<font color="black">false</font>> color="black"]
    node5028_name [shape=none, label=<<font color="black">Block[5028]</font>>]
    node5028_name -> node5028 [arrowhead=none, color="black", style=dashed]
    node5028 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#484])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5028 -> cluster1151_exit [color="black"]
    node5029_name [shape=none, label=<<font color="black">Block[5029]</font>>]
    node5029_name -> node5029 [arrowhead=none, color="black", style=dashed]
    node5029 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5029 -> node5030 [color="black"]
    node5030_name [shape=none, label=<<font color="black">Call[5030]</font>>]
    node5030_name -> node5030 [arrowhead=none, color="black", style=dashed]
    node5030 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;setPrototypeOf&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5030 -> node5031 [color="black"]
    node5031_name [shape=none, label=<<font color="black">Block[5031]</font>>]
    node5031_name -> node5031 [arrowhead=none, color="black", style=dashed]
    node5031 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5031 -> node5032 [color="black"]
    node5032_name [shape=none, label=<<font color="black">Branch[5032]</font>>]
    node5032_name -> node5032 [arrowhead=none, color="black", style=dashed]
    node5032 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5032 -> node5033 [label=<<font color="black">true</font>> color="black"]
    node5032 -> node5035 [label=<<font color="black">false</font>> color="black"]
    node5033_name [shape=none, label=<<font color="black">Call[5033]</font>>]
    node5033_name -> node5033 [arrowhead=none, color="black", style=dashed]
    node5033 [shape=cds, label=<<font color="black">%1 = target-&gt;SetPrototypeOf(V)</font>> color="black" fillcolor="white", style=filled]
    node5033 -> node5034 [color="black"]
    node5035_name [shape=none, label=<<font color="black">Call[5035]</font>>]
    node5035_name -> node5035 [arrowhead=none, color="black", style=dashed]
    node5035 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target, V])[#485])</font>> color="black" fillcolor="white", style=filled]
    node5035 -> node5036 [color="black"]
    node5034_name [shape=none, label=<<font color="black">Block[5034]</font>>]
    node5034_name -> node5034 [arrowhead=none, color="black", style=dashed]
    node5034 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5034 -> cluster1151_exit [color="black"]
    node5036_name [shape=none, label=<<font color="black">Call[5036]</font>>]
    node5036_name -> node5036 [arrowhead=none, color="black", style=dashed]
    node5036 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBoolean&gt;([? %2])</font>> color="black" fillcolor="white", style=filled]
    node5036 -> node5037 [color="black"]
    node5037_name [shape=none, label=<<font color="black">Block[5037]</font>>]
    node5037_name -> node5037 [arrowhead=none, color="black", style=dashed]
    node5037 [shape=box, label=<<font color="black">[0] let booleanTrapResult = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5037 -> node5038 [color="black"]
    node5038_name [shape=none, label=<<font color="black">Branch[5038]</font>>]
    node5038_name -> node5038 [arrowhead=none, color="black", style=dashed]
    node5038 [shape=diamond, label=<<font color="black">(= booleanTrapResult false)</font>> color="black" fillcolor="white", style=filled]
    node5038 -> node5039 [label=<<font color="black">true</font>> color="black"]
    node5038 -> node5040 [label=<<font color="black">false</font>> color="black"]
    node5039_name [shape=none, label=<<font color="black">Block[5039]</font>>]
    node5039_name -> node5039 [arrowhead=none, color="black", style=dashed]
    node5039 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5039 -> cluster1151_exit [color="black"]
    node5040_name [shape=none, label=<<font color="black">Call[5040]</font>>]
    node5040_name -> node5040 [arrowhead=none, color="black", style=dashed]
    node5040 [shape=cds, label=<<font color="black">%4 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5040 -> node5041 [color="black"]
    node5041_name [shape=none, label=<<font color="black">Block[5041]</font>>]
    node5041_name -> node5041 [arrowhead=none, color="black", style=dashed]
    node5041 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5041 -> node5042 [color="black"]
    node5042_name [shape=none, label=<<font color="black">Branch[5042]</font>>]
    node5042_name -> node5042 [arrowhead=none, color="black", style=dashed]
    node5042 [shape=diamond, label=<<font color="black">(= extensibleTarget true)</font>> color="black" fillcolor="white", style=filled]
    node5042 -> node5043 [label=<<font color="black">true</font>> color="black"]
    node5042 -> node5044 [label=<<font color="black">false</font>> color="black"]
    node5043_name [shape=none, label=<<font color="black">Block[5043]</font>>]
    node5043_name -> node5043 [arrowhead=none, color="black", style=dashed]
    node5043 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5043 -> cluster1151_exit [color="black"]
    node5044_name [shape=none, label=<<font color="black">Call[5044]</font>>]
    node5044_name -> node5044 [arrowhead=none, color="black", style=dashed]
    node5044 [shape=cds, label=<<font color="black">%5 = target-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node5044 -> node5045 [color="black"]
    node5045_name [shape=none, label=<<font color="black">Block[5045]</font>>]
    node5045_name -> node5045 [arrowhead=none, color="black", style=dashed]
    node5045 [shape=box, label=<<font color="black">[0] let targetProto = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5045 -> node5046 [color="black"]
    node5046_name [shape=none, label=<<font color="black">Call[5046]</font>>]
    node5046_name -> node5046 [arrowhead=none, color="black", style=dashed]
    node5046 [shape=cds, label=<<font color="black">%6 = clo&lt;SameValue&gt;(V, targetProto)</font>> color="black" fillcolor="white", style=filled]
    node5046 -> node5047 [color="black"]
    node5047_name [shape=none, label=<<font color="black">Branch[5047]</font>>]
    node5047_name -> node5047 [arrowhead=none, color="black", style=dashed]
    node5047 [shape=diamond, label=<<font color="black">(= %6 false)</font>> color="black" fillcolor="white", style=filled]
    node5047 -> node5048 [label=<<font color="black">true</font>> color="black"]
    node5047 -> node5049 [label=<<font color="black">false</font>> color="black"]
    node5048_name [shape=none, label=<<font color="black">Block[5048]</font>>]
    node5048_name -> node5048 [arrowhead=none, color="black", style=dashed]
    node5048 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#486])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5048 -> cluster1151_exit [color="black"]
    node5049_name [shape=none, label=<<font color="black">Block[5049]</font>>]
    node5049_name -> node5049 [arrowhead=none, color="black", style=dashed]
    node5049 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5049 -> cluster1151_exit [color="black"]
  }
}