digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster758 {
    label = "def IsAnonymousFunctionDefinition(expr: Ast[AssignmentExpression, Initializer]): Boolean"
    style = rounded
    cluster758_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster758_entry_name -> cluster758_entry [arrowhead=none, color="black", style=dashed]
    cluster758_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster758_entry -> node2990 [color="black"]
    cluster758_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster758_exit_name -> cluster758_exit [arrowhead=none, color="black", style=dashed]
    cluster758_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node2990_name [shape=none, label=<<font color="black">Call[2990]</font>>]
    node2990_name -> node2990 [arrowhead=none, color="black", style=dashed]
    node2990 [shape=cds, label=<<font color="black">%0 = expr-&gt;IsFunctionDefinition()</font>> color="black" fillcolor="white", style=filled]
    node2990 -> node2991 [color="black"]
    node2991_name [shape=none, label=<<font color="black">Branch[2991]</font>>]
    node2991_name -> node2991 [arrowhead=none, color="black", style=dashed]
    node2991 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node2991 -> node2992 [label=<<font color="black">true</font>> color="black"]
    node2991 -> node2993 [label=<<font color="black">false</font>> color="black"]
    node2992_name [shape=none, label=<<font color="black">Block[2992]</font>>]
    node2992_name -> node2992 [arrowhead=none, color="black", style=dashed]
    node2992 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2992 -> cluster758_exit [color="black"]
    node2993_name [shape=none, label=<<font color="black">Call[2993]</font>>]
    node2993_name -> node2993 [arrowhead=none, color="black", style=dashed]
    node2993 [shape=cds, label=<<font color="black">%1 = expr-&gt;HasName()</font>> color="black" fillcolor="white", style=filled]
    node2993 -> node2994 [color="black"]
    node2994_name [shape=none, label=<<font color="black">Block[2994]</font>>]
    node2994_name -> node2994 [arrowhead=none, color="black", style=dashed]
    node2994 [shape=box, label=<<font color="black">[0] let hasName = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2994 -> node2995 [color="black"]
    node2995_name [shape=none, label=<<font color="black">Branch[2995]</font>>]
    node2995_name -> node2995 [arrowhead=none, color="black", style=dashed]
    node2995 [shape=diamond, label=<<font color="black">(= hasName true)</font>> color="black" fillcolor="white", style=filled]
    node2995 -> node2996 [label=<<font color="black">true</font>> color="black"]
    node2995 -> node2997 [label=<<font color="black">false</font>> color="black"]
    node2996_name [shape=none, label=<<font color="black">Block[2996]</font>>]
    node2996_name -> node2996 [arrowhead=none, color="black", style=dashed]
    node2996 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2996 -> cluster758_exit [color="black"]
    node2997_name [shape=none, label=<<font color="black">Block[2997]</font>>]
    node2997_name -> node2997 [arrowhead=none, color="black", style=dashed]
    node2997 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2997 -> cluster758_exit [color="black"]
  }
}