digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1046 {
    label = "def CleanupFinalizationRegistry(finalizationRegistry: Unknown["FinalizationRegistry"]): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1046_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1046_entry_name -> cluster1046_entry [arrowhead=none, color="black", style=dashed]
    cluster1046_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1046_entry -> node3926 [color="black"]
    cluster1046_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1046_exit_name -> cluster1046_exit [arrowhead=none, color="black", style=dashed]
    cluster1046_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3926_name [shape=none, label=<<font color="black">Block[3926]</font>>]
    node3926_name -> node3926 [arrowhead=none, color="black", style=dashed]
    node3926 [shape=box, label=<<font color="black">[0] assert (yet &quot;_finalizationRegistry_ has [[Cells]] and [[CleanupCallback]] internal slots.&quot;)<BR ALIGN="LEFT"/>[1] let callback = finalizationRegistry.CleanupCallback<BR ALIGN="LEFT"/>[2] (yet &quot;While _finalizationRegistry_.[[Cells]] contains a Record _cell_ such that _cell_.[[WeakRefTarget]] is ~empty~, an implementation may perform the following steps:\n  1. Choose any such _cell_.\n  1. Remove _cell_ from _finalizationRegistry_.[[Cells]].\n  1. Perform ? HostCallJobCallback(_callback_, *undefined*, &laquo; _cell_.[[HeldValue]] &raquo;).&quot;)<BR ALIGN="LEFT"/>[3] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3926 -> cluster1046_exit [color="black"]
  }
}