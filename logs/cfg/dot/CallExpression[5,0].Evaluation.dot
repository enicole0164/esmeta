digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1262 {
    label = "def <SYNTAX>:CallExpression[5,0].Evaluation(this: Ast:CallExpression[5,0]): Unknown"
    style = rounded
    cluster1262_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1262_entry_name -> cluster1262_entry [arrowhead=none, color="black", style=dashed]
    cluster1262_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1262_entry -> node5815 [color="black"]
    cluster1262_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1262_exit_name -> cluster1262_exit [arrowhead=none, color="black", style=dashed]
    cluster1262_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5815_name [shape=none, label=<<font color="black">Call[5815]</font>>]
    node5815_name -> node5815 [arrowhead=none, color="black", style=dashed]
    node5815 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5815 -> node5816 [color="black"]
    node5816_name [shape=none, label=<<font color="black">Block[5816]</font>>]
    node5816_name -> node5816 [arrowhead=none, color="black", style=dashed]
    node5816 [shape=box, label=<<font color="black">[0] let baseReference = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5816 -> node5817 [color="black"]
    node5817_name [shape=none, label=<<font color="black">Call[5817]</font>>]
    node5817_name -> node5817 [arrowhead=none, color="black", style=dashed]
    node5817 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(baseReference)</font>> color="black" fillcolor="white", style=filled]
    node5817 -> node5818 [color="black"]
    node5818_name [shape=none, label=<<font color="black">Block[5818]</font>>]
    node5818_name -> node5818 [arrowhead=none, color="black", style=dashed]
    node5818 [shape=box, label=<<font color="black">[0] let baseValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5818 -> node5819 [color="black"]
    node5819_name [shape=none, label=<<font color="black">Branch[5819]</font>>]
    node5819_name -> node5819 [arrowhead=none, color="black", style=dashed]
    node5819 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node5819 -> node5820 [label=<<font color="black">true</font>> color="black"]
    node5819 -> node5821 [label=<<font color="black">false</font>> color="black"]
    node5820_name [shape=none, label=<<font color="black">Block[5820]</font>>]
    node5820_name -> node5820 [arrowhead=none, color="black", style=dashed]
    node5820 [shape=box, label=<<font color="black">[0] let strict = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5820 -> node5822 [color="black"]
    node5821_name [shape=none, label=<<font color="black">Block[5821]</font>>]
    node5821_name -> node5821 [arrowhead=none, color="black", style=dashed]
    node5821 [shape=box, label=<<font color="black">[0] let strict = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5821 -> node5822 [color="black"]
    node5822_name [shape=none, label=<<font color="black">Call[5822]</font>>]
    node5822_name -> node5822 [arrowhead=none, color="black", style=dashed]
    node5822 [shape=cds, label=<<font color="black">%2 = clo&lt;EvaluatePropertyAccessWithIdentifierKey&gt;(baseValue, this[1], strict)</font>> color="black" fillcolor="white", style=filled]
    node5822 -> node5823 [color="black"]
    node5823_name [shape=none, label=<<font color="black">Block[5823]</font>>]
    node5823_name -> node5823 [arrowhead=none, color="black", style=dashed]
    node5823 [shape=box, label=<<font color="black">[0] return %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5823 -> cluster1262_exit [color="black"]
  }
}