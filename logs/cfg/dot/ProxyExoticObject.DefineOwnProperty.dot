digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1155 {
    label = "def <INTERNAL>:ProxyExoticObject.DefineOwnProperty(O: ProxyExoticObject, P: Symbol | String, Desc: PropertyDescriptor): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1155_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1155_entry_name -> cluster1155_entry [arrowhead=none, color="black", style=dashed]
    cluster1155_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1155_entry -> node5128 [color="black"]
    cluster1155_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1155_exit_name -> cluster1155_exit [arrowhead=none, color="black", style=dashed]
    cluster1155_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5128_name [shape=none, label=<<font color="black">Block[5128]</font>>]
    node5128_name -> node5128 [arrowhead=none, color="black", style=dashed]
    node5128 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5128 -> node5129 [color="black"]
    node5129_name [shape=none, label=<<font color="black">Branch[5129]</font>>]
    node5129_name -> node5129 [arrowhead=none, color="black", style=dashed]
    node5129 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5129 -> node5130 [label=<<font color="black">true</font>> color="black"]
    node5129 -> node5131 [label=<<font color="black">false</font>> color="black"]
    node5130_name [shape=none, label=<<font color="black">Block[5130]</font>>]
    node5130_name -> node5130 [arrowhead=none, color="black", style=dashed]
    node5130 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#501])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5130 -> cluster1155_exit [color="black"]
    node5131_name [shape=none, label=<<font color="black">Block[5131]</font>>]
    node5131_name -> node5131 [arrowhead=none, color="black", style=dashed]
    node5131 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5131 -> node5132 [color="black"]
    node5132_name [shape=none, label=<<font color="black">Call[5132]</font>>]
    node5132_name -> node5132 [arrowhead=none, color="black", style=dashed]
    node5132 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;defineProperty&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5132 -> node5133 [color="black"]
    node5133_name [shape=none, label=<<font color="black">Block[5133]</font>>]
    node5133_name -> node5133 [arrowhead=none, color="black", style=dashed]
    node5133 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5133 -> node5134 [color="black"]
    node5134_name [shape=none, label=<<font color="black">Branch[5134]</font>>]
    node5134_name -> node5134 [arrowhead=none, color="black", style=dashed]
    node5134 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5134 -> node5135 [label=<<font color="black">true</font>> color="black"]
    node5134 -> node5137 [label=<<font color="black">false</font>> color="black"]
    node5135_name [shape=none, label=<<font color="black">Call[5135]</font>>]
    node5135_name -> node5135 [arrowhead=none, color="black", style=dashed]
    node5135 [shape=cds, label=<<font color="black">%1 = target-&gt;DefineOwnProperty(P, Desc)</font>> color="black" fillcolor="white", style=filled]
    node5135 -> node5136 [color="black"]
    node5137_name [shape=none, label=<<font color="black">Call[5137]</font>>]
    node5137_name -> node5137 [arrowhead=none, color="black", style=dashed]
    node5137 [shape=cds, label=<<font color="black">%2 = clo&lt;FromPropertyDescriptor&gt;(Desc)</font>> color="black" fillcolor="white", style=filled]
    node5137 -> node5138 [color="black"]
    node5136_name [shape=none, label=<<font color="black">Block[5136]</font>>]
    node5136_name -> node5136 [arrowhead=none, color="black", style=dashed]
    node5136 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5136 -> cluster1155_exit [color="black"]
    node5138_name [shape=none, label=<<font color="black">Block[5138]</font>>]
    node5138_name -> node5138 [arrowhead=none, color="black", style=dashed]
    node5138 [shape=box, label=<<font color="black">[0] let descObj = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5138 -> node5139 [color="black"]
    node5139_name [shape=none, label=<<font color="black">Call[5139]</font>>]
    node5139_name -> node5139 [arrowhead=none, color="black", style=dashed]
    node5139 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(trap, handler, (new [target, P, descObj])[#502])</font>> color="black" fillcolor="white", style=filled]
    node5139 -> node5140 [color="black"]
    node5140_name [shape=none, label=<<font color="black">Call[5140]</font>>]
    node5140_name -> node5140 [arrowhead=none, color="black", style=dashed]
    node5140 [shape=cds, label=<<font color="black">%4 = clo&lt;ToBoolean&gt;([? %3])</font>> color="black" fillcolor="white", style=filled]
    node5140 -> node5141 [color="black"]
    node5141_name [shape=none, label=<<font color="black">Block[5141]</font>>]
    node5141_name -> node5141 [arrowhead=none, color="black", style=dashed]
    node5141 [shape=box, label=<<font color="black">[0] let booleanTrapResult = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5141 -> node5142 [color="black"]
    node5142_name [shape=none, label=<<font color="black">Branch[5142]</font>>]
    node5142_name -> node5142 [arrowhead=none, color="black", style=dashed]
    node5142 [shape=diamond, label=<<font color="black">(= booleanTrapResult false)</font>> color="black" fillcolor="white", style=filled]
    node5142 -> node5143 [label=<<font color="black">true</font>> color="black"]
    node5142 -> node5144 [label=<<font color="black">false</font>> color="black"]
    node5143_name [shape=none, label=<<font color="black">Block[5143]</font>>]
    node5143_name -> node5143 [arrowhead=none, color="black", style=dashed]
    node5143 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5143 -> cluster1155_exit [color="black"]
    node5144_name [shape=none, label=<<font color="black">Call[5144]</font>>]
    node5144_name -> node5144 [arrowhead=none, color="black", style=dashed]
    node5144 [shape=cds, label=<<font color="black">%5 = target-&gt;GetOwnProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5144 -> node5145 [color="black"]
    node5145_name [shape=none, label=<<font color="black">Block[5145]</font>>]
    node5145_name -> node5145 [arrowhead=none, color="black", style=dashed]
    node5145 [shape=box, label=<<font color="black">[0] let targetDesc = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5145 -> node5146 [color="black"]
    node5146_name [shape=none, label=<<font color="black">Call[5146]</font>>]
    node5146_name -> node5146 [arrowhead=none, color="black", style=dashed]
    node5146 [shape=cds, label=<<font color="black">%6 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5146 -> node5147 [color="black"]
    node5147_name [shape=none, label=<<font color="black">Block[5147]</font>>]
    node5147_name -> node5147 [arrowhead=none, color="black", style=dashed]
    node5147 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5147 -> node5148 [color="black"]
    node5148_name [shape=none, label=<<font color="black">Branch[5148]</font>>]
    node5148_name -> node5148 [arrowhead=none, color="black", style=dashed]
    node5148 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= Desc.Configurable absent)) (= Desc.Configurable false))</font>> color="black" fillcolor="white", style=filled]
    node5148 -> node5149 [label=<<font color="black">true</font>> color="black"]
    node5148 -> node5150 [label=<<font color="black">false</font>> color="black"]
    node5149_name [shape=none, label=<<font color="black">Block[5149]</font>>]
    node5149_name -> node5149 [arrowhead=none, color="black", style=dashed]
    node5149 [shape=box, label=<<font color="black">[0] let settingConfigFalse = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5149 -> node5151 [color="black"]
    node5150_name [shape=none, label=<<font color="black">Block[5150]</font>>]
    node5150_name -> node5150 [arrowhead=none, color="black", style=dashed]
    node5150 [shape=box, label=<<font color="black">[0] let settingConfigFalse = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5150 -> node5151 [color="black"]
    node5151_name [shape=none, label=<<font color="black">Branch[5151]</font>>]
    node5151_name -> node5151 [arrowhead=none, color="black", style=dashed]
    node5151 [shape=diamond, label=<<font color="black">(= targetDesc undefined)</font>> color="black" fillcolor="white", style=filled]
    node5151 -> node5152 [label=<<font color="black">true</font>> color="black"]
    node5151 -> node5156 [label=<<font color="black">false</font>> color="black"]
    node5152_name [shape=none, label=<<font color="black">Branch[5152]</font>>]
    node5152_name -> node5152 [arrowhead=none, color="black", style=dashed]
    node5152 [shape=diamond, label=<<font color="black">(= extensibleTarget false)</font>> color="black" fillcolor="white", style=filled]
    node5152 -> node5153 [label=<<font color="black">true</font>> color="black"]
    node5152 -> node5154 [label=<<font color="black">false</font>> color="black"]
    node5156_name [shape=none, label=<<font color="black">Call[5156]</font>>]
    node5156_name -> node5156 [arrowhead=none, color="black", style=dashed]
    node5156 [shape=cds, label=<<font color="black">%7 = clo&lt;IsCompatiblePropertyDescriptor&gt;(extensibleTarget, Desc, targetDesc)</font>> color="black" fillcolor="white", style=filled]
    node5156 -> node5157 [color="black"]
    node5153_name [shape=none, label=<<font color="black">Block[5153]</font>>]
    node5153_name -> node5153 [arrowhead=none, color="black", style=dashed]
    node5153 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#503])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5153 -> cluster1155_exit [color="black"]
    node5154_name [shape=none, label=<<font color="black">Branch[5154]</font>>]
    node5154_name -> node5154 [arrowhead=none, color="black", style=dashed]
    node5154 [shape=diamond, label=<<font color="black">(= settingConfigFalse true)</font>> color="black" fillcolor="white", style=filled]
    node5154 -> node5155 [label=<<font color="black">true</font>> color="black"]
    node5154 -> node5165 [label=<<font color="black">false</font>> color="black"]
    node5157_name [shape=none, label=<<font color="black">Branch[5157]</font>>]
    node5157_name -> node5157 [arrowhead=none, color="black", style=dashed]
    node5157 [shape=diamond, label=<<font color="black">(= %7 false)</font>> color="black" fillcolor="white", style=filled]
    node5157 -> node5158 [label=<<font color="black">true</font>> color="black"]
    node5157 -> node5159 [label=<<font color="black">false</font>> color="black"]
    node5155_name [shape=none, label=<<font color="black">Block[5155]</font>>]
    node5155_name -> node5155 [arrowhead=none, color="black", style=dashed]
    node5155 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#504])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5155 -> cluster1155_exit [color="black"]
    node5165_name [shape=none, label=<<font color="black">Block[5165]</font>>]
    node5165_name -> node5165 [arrowhead=none, color="black", style=dashed]
    node5165 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5165 -> cluster1155_exit [color="black"]
    node5158_name [shape=none, label=<<font color="black">Block[5158]</font>>]
    node5158_name -> node5158 [arrowhead=none, color="black", style=dashed]
    node5158 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#505])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5158 -> cluster1155_exit [color="black"]
    node5159_name [shape=none, label=<<font color="black">Branch[5159]</font>>]
    node5159_name -> node5159 [arrowhead=none, color="black", style=dashed]
    node5159 [shape=diamond, label=<<font color="black">(&amp;&amp; (= settingConfigFalse true) (= targetDesc.Configurable true))</font>> color="black" fillcolor="white", style=filled]
    node5159 -> node5160 [label=<<font color="black">true</font>> color="black"]
    node5159 -> node5161 [label=<<font color="black">false</font>> color="black"]
    node5160_name [shape=none, label=<<font color="black">Block[5160]</font>>]
    node5160_name -> node5160 [arrowhead=none, color="black", style=dashed]
    node5160 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#506])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5160 -> cluster1155_exit [color="black"]
    node5161_name [shape=none, label=<<font color="black">Call[5161]</font>>]
    node5161_name -> node5161 [arrowhead=none, color="black", style=dashed]
    node5161 [shape=cds, label=<<font color="black">%8 = clo&lt;IsDataDescriptor&gt;(targetDesc)</font>> color="black" fillcolor="white", style=filled]
    node5161 -> node5162 [color="black"]
    node5162_name [shape=none, label=<<font color="black">Branch[5162]</font>>]
    node5162_name -> node5162 [arrowhead=none, color="black", style=dashed]
    node5162 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %8 true) (&amp;&amp; (= targetDesc.Configurable false) (= targetDesc.Writable true)))</font>> color="black" fillcolor="white", style=filled]
    node5162 -> node5163 [label=<<font color="black">true</font>> color="black"]
    node5162 -> node5165 [label=<<font color="black">false</font>> color="black"]
    node5163_name [shape=none, label=<<font color="black">Branch[5163]</font>>]
    node5163_name -> node5163 [arrowhead=none, color="black", style=dashed]
    node5163 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= Desc.Writable absent)) (= Desc.Writable false))</font>> color="black" fillcolor="white", style=filled]
    node5163 -> node5164 [label=<<font color="black">true</font>> color="black"]
    node5163 -> node5165 [label=<<font color="black">false</font>> color="black"]
    node5164_name [shape=none, label=<<font color="black">Block[5164]</font>>]
    node5164_name -> node5164 [arrowhead=none, color="black", style=dashed]
    node5164 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#507])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5164 -> cluster1155_exit [color="black"]
  }
}