digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1898 {
    label = "def <CONC>:SourceTextModuleRecord.InitializeEnvironment(module: SourceTextModuleRecord): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1898_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1898_entry_name -> cluster1898_entry [arrowhead=none, color="black", style=dashed]
    cluster1898_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1898_entry -> node10391 [color="black"]
    cluster1898_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1898_exit_name -> cluster1898_exit [arrowhead=none, color="black", style=dashed]
    cluster1898_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10391_name [shape=none, label=<<font color="black">Block[10391]</font>>]
    node10391_name -> node10391 [arrowhead=none, color="black", style=dashed]
    node10391 [shape=box, label=<<font color="black">[0] %1 = module.IndirectExportEntries<BR ALIGN="LEFT"/>[1] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10391 -> node10392 [color="black"]
    node10392_name [shape=none, label=<<font color="black">Branch[10392]</font>>]
    node10392_name -> node10392 [arrowhead=none, color="black", style=dashed]
    node10392 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node10392 -> node10393 [label=<<font color="black">true</font>> color="black"]
    node10392 -> node10399 [label=<<font color="black">false</font>> color="black"]
    node10393_name [shape=none, label=<<font color="black">Block[10393]</font>>]
    node10393_name -> node10393 [arrowhead=none, color="black", style=dashed]
    node10393 [shape=box, label=<<font color="black">[0] let e = %1[%0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10393 -> node10394 [color="black"]
    node10399_name [shape=none, label=<<font color="black">Block[10399]</font>>]
    node10399_name -> node10399 [arrowhead=none, color="black", style=dashed]
    node10399 [shape=box, label=<<font color="black">[0] assert (yet &quot;All named exports from _module_ are resolvable.&quot;)<BR ALIGN="LEFT"/>[1] let realm = module.Realm<BR ALIGN="LEFT"/>[2] assert (! (= realm undefined))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10399 -> node10400 [color="black"]
    node10394_name [shape=none, label=<<font color="black">Call[10394]</font>>]
    node10394_name -> node10394 [arrowhead=none, color="black", style=dashed]
    node10394 [shape=cds, label=<<font color="black">%2 = module-&gt;ResolveExport(e.ExportName)</font>> color="black" fillcolor="white", style=filled]
    node10394 -> node10395 [color="black"]
    node10400_name [shape=none, label=<<font color="black">Call[10400]</font>>]
    node10400_name -> node10400 [arrowhead=none, color="black", style=dashed]
    node10400 [shape=cds, label=<<font color="black">%3 = clo&lt;NewModuleEnvironment&gt;(realm.GlobalEnv)</font>> color="black" fillcolor="white", style=filled]
    node10400 -> node10401 [color="black"]
    node10395_name [shape=none, label=<<font color="black">Block[10395]</font>>]
    node10395_name -> node10395 [arrowhead=none, color="black", style=dashed]
    node10395 [shape=box, label=<<font color="black">[0] let resolution = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10395 -> node10396 [color="black"]
    node10401_name [shape=none, label=<<font color="black">Block[10401]</font>>]
    node10401_name -> node10401 [arrowhead=none, color="black", style=dashed]
    node10401 [shape=box, label=<<font color="black">[0] let env = %3<BR ALIGN="LEFT"/>[1] module.Environment = env<BR ALIGN="LEFT"/>[2] %5 = module.ImportEntries<BR ALIGN="LEFT"/>[3] %4 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10401 -> node10402 [color="black"]
    node10396_name [shape=none, label=<<font color="black">Branch[10396]</font>>]
    node10396_name -> node10396 [arrowhead=none, color="black", style=dashed]
    node10396 [shape=diamond, label=<<font color="black">(|| (= resolution null) (= resolution ~ambiguous~))</font>> color="black" fillcolor="white", style=filled]
    node10396 -> node10397 [label=<<font color="black">true</font>> color="black"]
    node10396 -> node10398 [label=<<font color="black">false</font>> color="black"]
    node10402_name [shape=none, label=<<font color="black">Branch[10402]</font>>]
    node10402_name -> node10402 [arrowhead=none, color="black", style=dashed]
    node10402 [shape=diamond, label=<<font color="black">(&lt; %4 %5.length)</font>> color="black" fillcolor="white", style=filled]
    node10402 -> node10403 [label=<<font color="black">true</font>> color="black"]
    node10402 -> node10426 [label=<<font color="black">false</font>> color="black"]
    node10397_name [shape=none, label=<<font color="black">Block[10397]</font>>]
    node10397_name -> node10397 [arrowhead=none, color="black", style=dashed]
    node10397 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#792])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10397 -> cluster1898_exit [color="black"]
    node10398_name [shape=none, label=<<font color="black">Block[10398]</font>>]
    node10398_name -> node10398 [arrowhead=none, color="black", style=dashed]
    node10398 [shape=box, label=<<font color="black">[0] assert (? resolution: &quot;ResolvedBindingRecord&quot;)<BR ALIGN="LEFT"/>[1] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10398 -> node10392 [color="black"]
    node10403_name [shape=none, label=<<font color="black">Block[10403]</font>>]
    node10403_name -> node10403 [arrowhead=none, color="black", style=dashed]
    node10403 [shape=box, label=<<font color="black">[0] let in = %5[%4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10403 -> node10404 [color="black"]
    node10426_name [shape=none, label=<<font color="black">Block[10426]</font>>]
    node10426_name -> node10426 [arrowhead=none, color="black", style=dashed]
    node10426 [shape=box, label=<<font color="black">[0] let moduleContext = (new ExecutionContext())[#794]<BR ALIGN="LEFT"/>[1] moduleContext.Function = null<BR ALIGN="LEFT"/>[2] assert (! (= module.Realm undefined))<BR ALIGN="LEFT"/>[3] moduleContext.Realm = module.Realm<BR ALIGN="LEFT"/>[4] moduleContext.ScriptOrModule = module<BR ALIGN="LEFT"/>[5] moduleContext.VariableEnvironment = module.Environment<BR ALIGN="LEFT"/>[6] moduleContext.LexicalEnvironment = module.Environment<BR ALIGN="LEFT"/>[7] moduleContext.PrivateEnvironment = null<BR ALIGN="LEFT"/>[8] module.Context = moduleContext<BR ALIGN="LEFT"/>[9] push moduleContext &gt; @EXECUTION_STACK<BR ALIGN="LEFT"/>[10] let code = module.ECMAScriptCode<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10426 -> node10427 [color="black"]
    node10404_name [shape=none, label=<<font color="black">Call[10404]</font>>]
    node10404_name -> node10404 [arrowhead=none, color="black", style=dashed]
    node10404 [shape=cds, label=<<font color="black">%6 = clo&lt;HostResolveImportedModule&gt;(module, in.ModuleRequest)</font>> color="black" fillcolor="white", style=filled]
    node10404 -> node10405 [color="black"]
    node10427_name [shape=none, label=<<font color="black">Call[10427]</font>>]
    node10427_name -> node10427 [arrowhead=none, color="black", style=dashed]
    node10427 [shape=cds, label=<<font color="black">%15 = code-&gt;VarScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node10427 -> node10428 [color="black"]
    node10405_name [shape=none, label=<<font color="black">Block[10405]</font>>]
    node10405_name -> node10405 [arrowhead=none, color="black", style=dashed]
    node10405 [shape=box, label=<<font color="black">[0] let importedModule = [! %6]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10405 -> node10406 [color="black"]
    node10428_name [shape=none, label=<<font color="black">Block[10428]</font>>]
    node10428_name -> node10428 [arrowhead=none, color="black", style=dashed]
    node10428 [shape=box, label=<<font color="black">[0] let varDeclarations = %15<BR ALIGN="LEFT"/>[1] let declaredVarNames = (new [])[#795]<BR ALIGN="LEFT"/>[2] %17 = varDeclarations<BR ALIGN="LEFT"/>[3] %16 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10428 -> node10429 [color="black"]
    node10406_name [shape=none, label=<<font color="black">Branch[10406]</font>>]
    node10406_name -> node10406 [arrowhead=none, color="black", style=dashed]
    node10406 [shape=diamond, label=<<font color="black">(= in.ImportName ~namespace-object~)</font>> color="black" fillcolor="white", style=filled]
    node10406 -> node10407 [label=<<font color="black">true</font>> color="black"]
    node10406 -> node10413 [label=<<font color="black">false</font>> color="black"]
    node10429_name [shape=none, label=<<font color="black">Branch[10429]</font>>]
    node10429_name -> node10429 [arrowhead=none, color="black", style=dashed]
    node10429 [shape=diamond, label=<<font color="black">(&lt; %16 %17.length)</font>> color="black" fillcolor="white", style=filled]
    node10429 -> node10430 [label=<<font color="black">true</font>> color="black"]
    node10429 -> node10442 [label=<<font color="black">false</font>> color="black"]
    node10407_name [shape=none, label=<<font color="black">Call[10407]</font>>]
    node10407_name -> node10407 [arrowhead=none, color="black", style=dashed]
    node10407 [shape=cds, label=<<font color="black">%7 = clo&lt;GetModuleNamespace&gt;(importedModule)</font>> color="black" fillcolor="white", style=filled]
    node10407 -> node10408 [color="black"]
    node10413_name [shape=none, label=<<font color="black">Call[10413]</font>>]
    node10413_name -> node10413 [arrowhead=none, color="black", style=dashed]
    node10413 [shape=cds, label=<<font color="black">%10 = importedModule-&gt;ResolveExport(in.ImportName)</font>> color="black" fillcolor="white", style=filled]
    node10413 -> node10414 [color="black"]
    node10430_name [shape=none, label=<<font color="black">Block[10430]</font>>]
    node10430_name -> node10430 [arrowhead=none, color="black", style=dashed]
    node10430 [shape=box, label=<<font color="black">[0] let d = %17[%16]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10430 -> node10431 [color="black"]
    node10442_name [shape=none, label=<<font color="black">Call[10442]</font>>]
    node10442_name -> node10442 [arrowhead=none, color="black", style=dashed]
    node10442 [shape=cds, label=<<font color="black">%23 = code-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node10442 -> node10443 [color="black"]
    node10408_name [shape=none, label=<<font color="black">Block[10408]</font>>]
    node10408_name -> node10408 [arrowhead=none, color="black", style=dashed]
    node10408 [shape=box, label=<<font color="black">[0] let namespace = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10408 -> node10409 [color="black"]
    node10414_name [shape=none, label=<<font color="black">Block[10414]</font>>]
    node10414_name -> node10414 [arrowhead=none, color="black", style=dashed]
    node10414 [shape=box, label=<<font color="black">[0] let resolution = [? %10]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10414 -> node10415 [color="black"]
    node10431_name [shape=none, label=<<font color="black">Call[10431]</font>>]
    node10431_name -> node10431 [arrowhead=none, color="black", style=dashed]
    node10431 [shape=cds, label=<<font color="black">%20 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10431 -> node10432 [color="black"]
    node10443_name [shape=none, label=<<font color="black">Block[10443]</font>>]
    node10443_name -> node10443 [arrowhead=none, color="black", style=dashed]
    node10443 [shape=box, label=<<font color="black">[0] let lexDeclarations = %23<BR ALIGN="LEFT"/>[1] let privateEnv = null<BR ALIGN="LEFT"/>[2] %25 = lexDeclarations<BR ALIGN="LEFT"/>[3] %24 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10443 -> node10444 [color="black"]
    node10409_name [shape=none, label=<<font color="black">Call[10409]</font>>]
    node10409_name -> node10409 [arrowhead=none, color="black", style=dashed]
    node10409 [shape=cds, label=<<font color="black">%8 = env-&gt;CreateImmutableBinding(in.LocalName, true)</font>> color="black" fillcolor="white", style=filled]
    node10409 -> node10410 [color="black"]
    node10415_name [shape=none, label=<<font color="black">Branch[10415]</font>>]
    node10415_name -> node10415 [arrowhead=none, color="black", style=dashed]
    node10415 [shape=diamond, label=<<font color="black">(|| (= resolution null) (= resolution ~ambiguous~))</font>> color="black" fillcolor="white", style=filled]
    node10415 -> node10416 [label=<<font color="black">true</font>> color="black"]
    node10415 -> node10417 [label=<<font color="black">false</font>> color="black"]
    node10432_name [shape=none, label=<<font color="black">Block[10432]</font>>]
    node10432_name -> node10432 [arrowhead=none, color="black", style=dashed]
    node10432 [shape=box, label=<<font color="black">[0] %19 = %20<BR ALIGN="LEFT"/>[1] %18 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10432 -> node10433 [color="black"]
    node10444_name [shape=none, label=<<font color="black">Branch[10444]</font>>]
    node10444_name -> node10444 [arrowhead=none, color="black", style=dashed]
    node10444 [shape=diamond, label=<<font color="black">(&lt; %24 %25.length)</font>> color="black" fillcolor="white", style=filled]
    node10444 -> node10445 [label=<<font color="black">true</font>> color="black"]
    node10444 -> node10463 [label=<<font color="black">false</font>> color="black"]
    node10410_name [shape=none, label=<<font color="black">Block[10410]</font>>]
    node10410_name -> node10410 [arrowhead=none, color="black", style=dashed]
    node10410 [shape=box, label=<<font color="black">[0] [! %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10410 -> node10411 [color="black"]
    node10416_name [shape=none, label=<<font color="black">Block[10416]</font>>]
    node10416_name -> node10416 [arrowhead=none, color="black", style=dashed]
    node10416 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#793])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10416 -> cluster1898_exit [color="black"]
    node10417_name [shape=none, label=<<font color="black">Branch[10417]</font>>]
    node10417_name -> node10417 [arrowhead=none, color="black", style=dashed]
    node10417 [shape=diamond, label=<<font color="black">(= resolution.BindingName ~namespace~)</font>> color="black" fillcolor="white", style=filled]
    node10417 -> node10418 [label=<<font color="black">true</font>> color="black"]
    node10417 -> node10424 [label=<<font color="black">false</font>> color="black"]
    node10433_name [shape=none, label=<<font color="black">Branch[10433]</font>>]
    node10433_name -> node10433 [arrowhead=none, color="black", style=dashed]
    node10433 [shape=diamond, label=<<font color="black">(&lt; %18 %19.length)</font>> color="black" fillcolor="white", style=filled]
    node10433 -> node10434 [label=<<font color="black">true</font>> color="black"]
    node10433 -> node10441 [label=<<font color="black">false</font>> color="black"]
    node10445_name [shape=none, label=<<font color="black">Block[10445]</font>>]
    node10445_name -> node10445 [arrowhead=none, color="black", style=dashed]
    node10445 [shape=box, label=<<font color="black">[0] let d = %25[%24]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10445 -> node10446 [color="black"]
    node10463_name [shape=none, label=<<font color="black">Block[10463]</font>>]
    node10463_name -> node10463 [arrowhead=none, color="black", style=dashed]
    node10463 [shape=box, label=<<font color="black">[0] (yet &quot;Remove _moduleContext_ from the execution context stack.&quot;)<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10463 -> cluster1898_exit [color="black"]
    node10411_name [shape=none, label=<<font color="black">Call[10411]</font>>]
    node10411_name -> node10411 [arrowhead=none, color="black", style=dashed]
    node10411 [shape=cds, label=<<font color="black">%9 = env-&gt;InitializeBinding(in.LocalName, namespace)</font>> color="black" fillcolor="white", style=filled]
    node10411 -> node10412 [color="black"]
    node10418_name [shape=none, label=<<font color="black">Call[10418]</font>>]
    node10418_name -> node10418 [arrowhead=none, color="black", style=dashed]
    node10418 [shape=cds, label=<<font color="black">%11 = clo&lt;GetModuleNamespace&gt;(resolution.Module)</font>> color="black" fillcolor="white", style=filled]
    node10418 -> node10419 [color="black"]
    node10424_name [shape=none, label=<<font color="black">Call[10424]</font>>]
    node10424_name -> node10424 [arrowhead=none, color="black", style=dashed]
    node10424 [shape=cds, label=<<font color="black">%14 = env-&gt;CreateImportBinding(in.LocalName, resolution.Module, resolution.BindingName)</font>> color="black" fillcolor="white", style=filled]
    node10424 -> node10425 [color="black"]
    node10434_name [shape=none, label=<<font color="black">Block[10434]</font>>]
    node10434_name -> node10434 [arrowhead=none, color="black", style=dashed]
    node10434 [shape=box, label=<<font color="black">[0] let dn = %19[%18]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10434 -> node10435 [color="black"]
    node10441_name [shape=none, label=<<font color="black">Block[10441]</font>>]
    node10441_name -> node10441 [arrowhead=none, color="black", style=dashed]
    node10441 [shape=box, label=<<font color="black">[0] %16 = (+ %16 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10441 -> node10429 [color="black"]
    node10446_name [shape=none, label=<<font color="black">Call[10446]</font>>]
    node10446_name -> node10446 [arrowhead=none, color="black", style=dashed]
    node10446 [shape=cds, label=<<font color="black">%28 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10446 -> node10447 [color="black"]
    node10412_name [shape=none, label=<<font color="black">Block[10412]</font>>]
    node10412_name -> node10412 [arrowhead=none, color="black", style=dashed]
    node10412 [shape=box, label=<<font color="black">[0] [! %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10412 -> node10425 [color="black"]
    node10419_name [shape=none, label=<<font color="black">Block[10419]</font>>]
    node10419_name -> node10419 [arrowhead=none, color="black", style=dashed]
    node10419 [shape=box, label=<<font color="black">[0] let namespace = [? %11]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10419 -> node10420 [color="black"]
    node10425_name [shape=none, label=<<font color="black">Block[10425]</font>>]
    node10425_name -> node10425 [arrowhead=none, color="black", style=dashed]
    node10425 [shape=box, label=<<font color="black">[0] %4 = (+ %4 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10425 -> node10402 [color="black"]
    node10435_name [shape=none, label=<<font color="black">Branch[10435]</font>>]
    node10435_name -> node10435 [arrowhead=none, color="black", style=dashed]
    node10435 [shape=diamond, label=<<font color="black">(! (contains declaredVarNames dn))</font>> color="black" fillcolor="white", style=filled]
    node10435 -> node10436 [label=<<font color="black">true</font>> color="black"]
    node10435 -> node10440 [label=<<font color="black">false</font>> color="black"]
    node10447_name [shape=none, label=<<font color="black">Block[10447]</font>>]
    node10447_name -> node10447 [arrowhead=none, color="black", style=dashed]
    node10447 [shape=box, label=<<font color="black">[0] %27 = %28<BR ALIGN="LEFT"/>[1] %26 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10447 -> node10448 [color="black"]
    node10420_name [shape=none, label=<<font color="black">Call[10420]</font>>]
    node10420_name -> node10420 [arrowhead=none, color="black", style=dashed]
    node10420 [shape=cds, label=<<font color="black">%12 = env-&gt;CreateImmutableBinding(in.LocalName, true)</font>> color="black" fillcolor="white", style=filled]
    node10420 -> node10421 [color="black"]
    node10436_name [shape=none, label=<<font color="black">Call[10436]</font>>]
    node10436_name -> node10436 [arrowhead=none, color="black", style=dashed]
    node10436 [shape=cds, label=<<font color="black">%21 = env-&gt;CreateMutableBinding(dn, false)</font>> color="black" fillcolor="white", style=filled]
    node10436 -> node10437 [color="black"]
    node10440_name [shape=none, label=<<font color="black">Block[10440]</font>>]
    node10440_name -> node10440 [arrowhead=none, color="black", style=dashed]
    node10440 [shape=box, label=<<font color="black">[0] %18 = (+ %18 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10440 -> node10433 [color="black"]
    node10448_name [shape=none, label=<<font color="black">Branch[10448]</font>>]
    node10448_name -> node10448 [arrowhead=none, color="black", style=dashed]
    node10448 [shape=diamond, label=<<font color="black">(&lt; %26 %27.length)</font>> color="black" fillcolor="white", style=filled]
    node10448 -> node10449 [label=<<font color="black">true</font>> color="black"]
    node10448 -> node10462 [label=<<font color="black">false</font>> color="black"]
    node10421_name [shape=none, label=<<font color="black">Block[10421]</font>>]
    node10421_name -> node10421 [arrowhead=none, color="black", style=dashed]
    node10421 [shape=box, label=<<font color="black">[0] [! %12]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10421 -> node10422 [color="black"]
    node10437_name [shape=none, label=<<font color="black">Block[10437]</font>>]
    node10437_name -> node10437 [arrowhead=none, color="black", style=dashed]
    node10437 [shape=box, label=<<font color="black">[0] [! %21]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10437 -> node10438 [color="black"]
    node10449_name [shape=none, label=<<font color="black">Block[10449]</font>>]
    node10449_name -> node10449 [arrowhead=none, color="black", style=dashed]
    node10449 [shape=box, label=<<font color="black">[0] let dn = %27[%26]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10449 -> node10450 [color="black"]
    node10462_name [shape=none, label=<<font color="black">Block[10462]</font>>]
    node10462_name -> node10462 [arrowhead=none, color="black", style=dashed]
    node10462 [shape=box, label=<<font color="black">[0] %24 = (+ %24 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10462 -> node10444 [color="black"]
    node10422_name [shape=none, label=<<font color="black">Call[10422]</font>>]
    node10422_name -> node10422 [arrowhead=none, color="black", style=dashed]
    node10422 [shape=cds, label=<<font color="black">%13 = env-&gt;InitializeBinding(in.LocalName, namespace)</font>> color="black" fillcolor="white", style=filled]
    node10422 -> node10423 [color="black"]
    node10438_name [shape=none, label=<<font color="black">Call[10438]</font>>]
    node10438_name -> node10438 [arrowhead=none, color="black", style=dashed]
    node10438 [shape=cds, label=<<font color="black">%22 = env-&gt;InitializeBinding(dn, undefined)</font>> color="black" fillcolor="white", style=filled]
    node10438 -> node10439 [color="black"]
    node10450_name [shape=none, label=<<font color="black">Call[10450]</font>>]
    node10450_name -> node10450 [arrowhead=none, color="black", style=dashed]
    node10450 [shape=cds, label=<<font color="black">%29 = d-&gt;IsConstantDeclaration()</font>> color="black" fillcolor="white", style=filled]
    node10450 -> node10451 [color="black"]
    node10423_name [shape=none, label=<<font color="black">Block[10423]</font>>]
    node10423_name -> node10423 [arrowhead=none, color="black", style=dashed]
    node10423 [shape=box, label=<<font color="black">[0] [! %13]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10423 -> node10425 [color="black"]
    node10439_name [shape=none, label=<<font color="black">Block[10439]</font>>]
    node10439_name -> node10439 [arrowhead=none, color="black", style=dashed]
    node10439 [shape=box, label=<<font color="black">[0] [! %22]<BR ALIGN="LEFT"/>[1] push declaredVarNames &lt; dn<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10439 -> node10440 [color="black"]
    node10451_name [shape=none, label=<<font color="black">Branch[10451]</font>>]
    node10451_name -> node10451 [arrowhead=none, color="black", style=dashed]
    node10451 [shape=diamond, label=<<font color="black">(= %29 true)</font>> color="black" fillcolor="white", style=filled]
    node10451 -> node10452 [label=<<font color="black">true</font>> color="black"]
    node10451 -> node10454 [label=<<font color="black">false</font>> color="black"]
    node10452_name [shape=none, label=<<font color="black">Call[10452]</font>>]
    node10452_name -> node10452 [arrowhead=none, color="black", style=dashed]
    node10452 [shape=cds, label=<<font color="black">%30 = env-&gt;CreateImmutableBinding(dn, true)</font>> color="black" fillcolor="white", style=filled]
    node10452 -> node10453 [color="black"]
    node10454_name [shape=none, label=<<font color="black">Call[10454]</font>>]
    node10454_name -> node10454 [arrowhead=none, color="black", style=dashed]
    node10454 [shape=cds, label=<<font color="black">%31 = env-&gt;CreateMutableBinding(dn, false)</font>> color="black" fillcolor="white", style=filled]
    node10454 -> node10455 [color="black"]
    node10453_name [shape=none, label=<<font color="black">Block[10453]</font>>]
    node10453_name -> node10453 [arrowhead=none, color="black", style=dashed]
    node10453 [shape=box, label=<<font color="black">[0] [! %30]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10453 -> node10456 [color="black"]
    node10455_name [shape=none, label=<<font color="black">Block[10455]</font>>]
    node10455_name -> node10455 [arrowhead=none, color="black", style=dashed]
    node10455 [shape=box, label=<<font color="black">[0] [! %31]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10455 -> node10456 [color="black"]
    node10456_name [shape=none, label=<<font color="black">Branch[10456]</font>>]
    node10456_name -> node10456 [arrowhead=none, color="black", style=dashed]
    node10456 [shape=diamond, label=<<font color="black">(|| (|| (|| (? d: &quot;FunctionDeclaration&quot;) (? d: &quot;GeneratorDeclaration&quot;)) (? d: &quot;AsyncFunctionDeclaration&quot;)) (? d: &quot;AsyncGeneratorDeclaration&quot;))</font>> color="black" fillcolor="white", style=filled]
    node10456 -> node10457 [label=<<font color="black">true</font>> color="black"]
    node10456 -> node10461 [label=<<font color="black">false</font>> color="black"]
    node10457_name [shape=none, label=<<font color="black">Call[10457]</font>>]
    node10457_name -> node10457 [arrowhead=none, color="black", style=dashed]
    node10457 [shape=cds, label=<<font color="black">%32 = d-&gt;InstantiateFunctionObject(env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node10457 -> node10458 [color="black"]
    node10461_name [shape=none, label=<<font color="black">Block[10461]</font>>]
    node10461_name -> node10461 [arrowhead=none, color="black", style=dashed]
    node10461 [shape=box, label=<<font color="black">[0] %26 = (+ %26 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10461 -> node10448 [color="black"]
    node10458_name [shape=none, label=<<font color="black">Block[10458]</font>>]
    node10458_name -> node10458 [arrowhead=none, color="black", style=dashed]
    node10458 [shape=box, label=<<font color="black">[0] let fo = %32<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10458 -> node10459 [color="black"]
    node10459_name [shape=none, label=<<font color="black">Call[10459]</font>>]
    node10459_name -> node10459 [arrowhead=none, color="black", style=dashed]
    node10459 [shape=cds, label=<<font color="black">%33 = env-&gt;InitializeBinding(dn, fo)</font>> color="black" fillcolor="white", style=filled]
    node10459 -> node10460 [color="black"]
    node10460_name [shape=none, label=<<font color="black">Block[10460]</font>>]
    node10460_name -> node10460 [arrowhead=none, color="black", style=dashed]
    node10460 [shape=box, label=<<font color="black">[0] [! %33]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10460 -> node10461 [color="black"]
  }
}