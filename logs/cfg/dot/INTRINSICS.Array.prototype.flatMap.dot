digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2356 {
    label = "def <BUILTIN>:INTRINSICS.Array.prototype.flatMap(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2356_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2356_entry_name -> cluster2356_entry [arrowhead=none, color="black", style=dashed]
    cluster2356_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2356_entry -> node15137 [color="black"]
    cluster2356_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2356_exit_name -> cluster2356_exit [arrowhead=none, color="black", style=dashed]
    cluster2356_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15137_name [shape=none, label=<<font color="black">Branch[15137]</font>>]
    node15137_name -> node15137 [arrowhead=none, color="black", style=dashed]
    node15137 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15137 -> node15138 [label=<<font color="black">true</font>> color="black"]
    node15137 -> node15139 [label=<<font color="black">false</font>> color="black"]
    node15138_name [shape=none, label=<<font color="black">Block[15138]</font>>]
    node15138_name -> node15138 [arrowhead=none, color="black", style=dashed]
    node15138 [shape=box, label=<<font color="black">[0] let mapperFunction = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15138 -> node15140 [color="black"]
    node15139_name [shape=none, label=<<font color="black">Block[15139]</font>>]
    node15139_name -> node15139 [arrowhead=none, color="black", style=dashed]
    node15139 [shape=box, label=<<font color="black">[0] let mapperFunction = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15139 -> node15140 [color="black"]
    node15140_name [shape=none, label=<<font color="black">Branch[15140]</font>>]
    node15140_name -> node15140 [arrowhead=none, color="black", style=dashed]
    node15140 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15140 -> node15141 [label=<<font color="black">true</font>> color="black"]
    node15140 -> node15142 [label=<<font color="black">false</font>> color="black"]
    node15141_name [shape=none, label=<<font color="black">Block[15141]</font>>]
    node15141_name -> node15141 [arrowhead=none, color="black", style=dashed]
    node15141 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15141 -> node15143 [color="black"]
    node15142_name [shape=none, label=<<font color="black">Block[15142]</font>>]
    node15142_name -> node15142 [arrowhead=none, color="black", style=dashed]
    node15142 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15142 -> node15143 [color="black"]
    node15143_name [shape=none, label=<<font color="black">Call[15143]</font>>]
    node15143_name -> node15143 [arrowhead=none, color="black", style=dashed]
    node15143 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node15143 -> node15144 [color="black"]
    node15144_name [shape=none, label=<<font color="black">Block[15144]</font>>]
    node15144_name -> node15144 [arrowhead=none, color="black", style=dashed]
    node15144 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15144 -> node15145 [color="black"]
    node15145_name [shape=none, label=<<font color="black">Call[15145]</font>>]
    node15145_name -> node15145 [arrowhead=none, color="black", style=dashed]
    node15145 [shape=cds, label=<<font color="black">%1 = clo&lt;LengthOfArrayLike&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node15145 -> node15146 [color="black"]
    node15146_name [shape=none, label=<<font color="black">Block[15146]</font>>]
    node15146_name -> node15146 [arrowhead=none, color="black", style=dashed]
    node15146 [shape=box, label=<<font color="black">[0] let sourceLen = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15146 -> node15147 [color="black"]
    node15147_name [shape=none, label=<<font color="black">Call[15147]</font>>]
    node15147_name -> node15147 [arrowhead=none, color="black", style=dashed]
    node15147 [shape=cds, label=<<font color="black">%2 = clo&lt;IsCallable&gt;(mapperFunction)</font>> color="black" fillcolor="white", style=filled]
    node15147 -> node15148 [color="black"]
    node15148_name [shape=none, label=<<font color="black">Branch[15148]</font>>]
    node15148_name -> node15148 [arrowhead=none, color="black", style=dashed]
    node15148 [shape=diamond, label=<<font color="black">(= %2 false)</font>> color="black" fillcolor="white", style=filled]
    node15148 -> node15149 [label=<<font color="black">true</font>> color="black"]
    node15148 -> node15150 [label=<<font color="black">false</font>> color="black"]
    node15149_name [shape=none, label=<<font color="black">Block[15149]</font>>]
    node15149_name -> node15149 [arrowhead=none, color="black", style=dashed]
    node15149 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1029])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15149 -> cluster2356_exit [color="black"]
    node15150_name [shape=none, label=<<font color="black">Call[15150]</font>>]
    node15150_name -> node15150 [arrowhead=none, color="black", style=dashed]
    node15150 [shape=cds, label=<<font color="black">%3 = clo&lt;ArraySpeciesCreate&gt;(O, 0)</font>> color="black" fillcolor="white", style=filled]
    node15150 -> node15151 [color="black"]
    node15151_name [shape=none, label=<<font color="black">Block[15151]</font>>]
    node15151_name -> node15151 [arrowhead=none, color="black", style=dashed]
    node15151 [shape=box, label=<<font color="black">[0] let A = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15151 -> node15152 [color="black"]
    node15152_name [shape=none, label=<<font color="black">Call[15152]</font>>]
    node15152_name -> node15152 [arrowhead=none, color="black", style=dashed]
    node15152 [shape=cds, label=<<font color="black">%4 = clo&lt;FlattenIntoArray&gt;(A, O, sourceLen, 0, 1, mapperFunction, thisArg)</font>> color="black" fillcolor="white", style=filled]
    node15152 -> node15153 [color="black"]
    node15153_name [shape=none, label=<<font color="black">Block[15153]</font>>]
    node15153_name -> node15153 [arrowhead=none, color="black", style=dashed]
    node15153 [shape=box, label=<<font color="black">[0] [? %4]<BR ALIGN="LEFT"/>[1] return A<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15153 -> cluster2356_exit [color="black"]
  }
}