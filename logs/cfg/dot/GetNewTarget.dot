digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1036 {
    label = "def GetNewTarget(): Object | Undefined"
    style = rounded
    cluster1036_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1036_entry_name -> cluster1036_entry [arrowhead=none, color="black", style=dashed]
    cluster1036_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1036_entry -> node3903 [color="black"]
    cluster1036_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1036_exit_name -> cluster1036_exit [arrowhead=none, color="black", style=dashed]
    cluster1036_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3903_name [shape=none, label=<<font color="black">Call[3903]</font>>]
    node3903_name -> node3903 [arrowhead=none, color="black", style=dashed]
    node3903 [shape=cds, label=<<font color="black">%0 = clo&lt;GetThisEnvironment&gt;()</font>> color="black" fillcolor="white", style=filled]
    node3903 -> node3904 [color="black"]
    node3904_name [shape=none, label=<<font color="black">Block[3904]</font>>]
    node3904_name -> node3904 [arrowhead=none, color="black", style=dashed]
    node3904 [shape=box, label=<<font color="black">[0] let envRec = %0<BR ALIGN="LEFT"/>[1] assert (! (= envRec.NewTarget absent))<BR ALIGN="LEFT"/>[2] return envRec.NewTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3904 -> cluster1036_exit [color="black"]
  }
}