digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2112 {
    label = "def MakeTime(hour: Number, min: Number, sec: Number, ms: Number): Number"
    style = rounded
    cluster2112_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2112_entry_name -> cluster2112_entry [arrowhead=none, color="black", style=dashed]
    cluster2112_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2112_entry -> node12437 [color="black"]
    cluster2112_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2112_exit_name -> cluster2112_exit [arrowhead=none, color="black", style=dashed]
    cluster2112_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12437_name [shape=none, label=<<font color="black">Block[12437]</font>>]
    node12437_name -> node12437 [arrowhead=none, color="black", style=dashed]
    node12437 [shape=box, label=<<font color="black">[0] (yet &quot;If _hour_ is not finite or _min_ is not finite or _sec_ is not finite or _ms_ is not finite, return *NaN*.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12437 -> node12438 [color="black"]
    node12438_name [shape=none, label=<<font color="black">Call[12438]</font>>]
    node12438_name -> node12438 [arrowhead=none, color="black", style=dashed]
    node12438 [shape=cds, label=<<font color="black">%0 = clo&lt;ToIntegerOrInfinity&gt;(hour)</font>> color="black" fillcolor="white", style=filled]
    node12438 -> node12439 [color="black"]
    node12439_name [shape=none, label=<<font color="black">Block[12439]</font>>]
    node12439_name -> node12439 [arrowhead=none, color="black", style=dashed]
    node12439 [shape=box, label=<<font color="black">[0] let h = ([number] [! %0])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12439 -> node12440 [color="black"]
    node12440_name [shape=none, label=<<font color="black">Call[12440]</font>>]
    node12440_name -> node12440 [arrowhead=none, color="black", style=dashed]
    node12440 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIntegerOrInfinity&gt;(min)</font>> color="black" fillcolor="white", style=filled]
    node12440 -> node12441 [color="black"]
    node12441_name [shape=none, label=<<font color="black">Block[12441]</font>>]
    node12441_name -> node12441 [arrowhead=none, color="black", style=dashed]
    node12441 [shape=box, label=<<font color="black">[0] let m = ([number] [! %1])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12441 -> node12442 [color="black"]
    node12442_name [shape=none, label=<<font color="black">Call[12442]</font>>]
    node12442_name -> node12442 [arrowhead=none, color="black", style=dashed]
    node12442 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(sec)</font>> color="black" fillcolor="white", style=filled]
    node12442 -> node12443 [color="black"]
    node12443_name [shape=none, label=<<font color="black">Block[12443]</font>>]
    node12443_name -> node12443 [arrowhead=none, color="black", style=dashed]
    node12443 [shape=box, label=<<font color="black">[0] let s = ([number] [! %2])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12443 -> node12444 [color="black"]
    node12444_name [shape=none, label=<<font color="black">Call[12444]</font>>]
    node12444_name -> node12444 [arrowhead=none, color="black", style=dashed]
    node12444 [shape=cds, label=<<font color="black">%3 = clo&lt;ToIntegerOrInfinity&gt;(ms)</font>> color="black" fillcolor="white", style=filled]
    node12444 -> node12445 [color="black"]
    node12445_name [shape=none, label=<<font color="black">Block[12445]</font>>]
    node12445_name -> node12445 [arrowhead=none, color="black", style=dashed]
    node12445 [shape=box, label=<<font color="black">[0] let milli = ([number] [! %3])<BR ALIGN="LEFT"/>[1] (yet &quot;Let _t_ be ((_h_ `*` msPerHour `+` _m_ `*` msPerMinute) `+` _s_ `*` msPerSecond) `+` _milli_, performing the arithmetic according to IEEE 754-2019 rules (that is, as if using the ECMAScript operators `*` and `+`).&quot;)<BR ALIGN="LEFT"/>[2] return t<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12445 -> cluster2112_exit [color="black"]
  }
}