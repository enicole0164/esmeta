digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2432 {
    label = "def <BUILTIN>:INTRINSICS.Map(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2432_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2432_entry_name -> cluster2432_entry [arrowhead=none, color="black", style=dashed]
    cluster2432_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2432_entry -> node16849 [color="black"]
    cluster2432_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2432_exit_name -> cluster2432_exit [arrowhead=none, color="black", style=dashed]
    cluster2432_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16849_name [shape=none, label=<<font color="black">Branch[16849]</font>>]
    node16849_name -> node16849 [arrowhead=none, color="black", style=dashed]
    node16849 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16849 -> node16850 [label=<<font color="black">true</font>> color="black"]
    node16849 -> node16851 [label=<<font color="black">false</font>> color="black"]
    node16850_name [shape=none, label=<<font color="black">Block[16850]</font>>]
    node16850_name -> node16850 [arrowhead=none, color="black", style=dashed]
    node16850 [shape=box, label=<<font color="black">[0] let iterable = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16850 -> node16852 [color="black"]
    node16851_name [shape=none, label=<<font color="black">Block[16851]</font>>]
    node16851_name -> node16851 [arrowhead=none, color="black", style=dashed]
    node16851 [shape=box, label=<<font color="black">[0] let iterable = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16851 -> node16852 [color="black"]
    node16852_name [shape=none, label=<<font color="black">Branch[16852]</font>>]
    node16852_name -> node16852 [arrowhead=none, color="black", style=dashed]
    node16852 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node16852 -> node16853 [label=<<font color="black">true</font>> color="black"]
    node16852 -> node16854 [label=<<font color="black">false</font>> color="black"]
    node16853_name [shape=none, label=<<font color="black">Block[16853]</font>>]
    node16853_name -> node16853 [arrowhead=none, color="black", style=dashed]
    node16853 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1113])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16853 -> cluster2432_exit [color="black"]
    node16854_name [shape=none, label=<<font color="black">Call[16854]</font>>]
    node16854_name -> node16854 [arrowhead=none, color="black", style=dashed]
    node16854 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryCreateFromConstructor&gt;(NewTarget, &quot;%Map.prototype%&quot;, (new [&quot;MapData&quot;])[#1114])</font>> color="black" fillcolor="white", style=filled]
    node16854 -> node16855 [color="black"]
    node16855_name [shape=none, label=<<font color="black">Block[16855]</font>>]
    node16855_name -> node16855 [arrowhead=none, color="black", style=dashed]
    node16855 [shape=box, label=<<font color="black">[0] let map = [? %0]<BR ALIGN="LEFT"/>[1] map.MapData = (new [])[#1115]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16855 -> node16856 [color="black"]
    node16856_name [shape=none, label=<<font color="black">Branch[16856]</font>>]
    node16856_name -> node16856 [arrowhead=none, color="black", style=dashed]
    node16856 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white", style=filled]
    node16856 -> node16857 [label=<<font color="black">true</font>> color="black"]
    node16856 -> node16858 [label=<<font color="black">false</font>> color="black"]
    node16857_name [shape=none, label=<<font color="black">Block[16857]</font>>]
    node16857_name -> node16857 [arrowhead=none, color="black", style=dashed]
    node16857 [shape=box, label=<<font color="black">[0] return map<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16857 -> cluster2432_exit [color="black"]
    node16858_name [shape=none, label=<<font color="black">Call[16858]</font>>]
    node16858_name -> node16858 [arrowhead=none, color="black", style=dashed]
    node16858 [shape=cds, label=<<font color="black">%1 = clo&lt;Get&gt;(map, &quot;set&quot;)</font>> color="black" fillcolor="white", style=filled]
    node16858 -> node16859 [color="black"]
    node16859_name [shape=none, label=<<font color="black">Block[16859]</font>>]
    node16859_name -> node16859 [arrowhead=none, color="black", style=dashed]
    node16859 [shape=box, label=<<font color="black">[0] let adder = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16859 -> node16860 [color="black"]
    node16860_name [shape=none, label=<<font color="black">Call[16860]</font>>]
    node16860_name -> node16860 [arrowhead=none, color="black", style=dashed]
    node16860 [shape=cds, label=<<font color="black">%2 = clo&lt;AddEntriesFromIterable&gt;(map, iterable, adder)</font>> color="black" fillcolor="white", style=filled]
    node16860 -> node16861 [color="black"]
    node16861_name [shape=none, label=<<font color="black">Block[16861]</font>>]
    node16861_name -> node16861 [arrowhead=none, color="black", style=dashed]
    node16861 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16861 -> cluster2432_exit [color="black"]
  }
}