digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1033 {
    label = "def ResolveBinding(name: String, env?: EnvironmentRecord | Undefined): Normal[ReferenceRecord] | Abrupt"
    style = rounded
    cluster1033_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1033_entry_name -> cluster1033_entry [arrowhead=none, color="black", style=dashed]
    cluster1033_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1033_entry -> node3884 [color="black"]
    cluster1033_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1033_exit_name -> cluster1033_exit [arrowhead=none, color="black", style=dashed]
    cluster1033_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3884_name [shape=none, label=<<font color="black">Branch[3884]</font>>]
    node3884_name -> node3884 [arrowhead=none, color="black", style=dashed]
    node3884 [shape=diamond, label=<<font color="black">(|| (= env absent) (= env undefined))</font>> color="black" fillcolor="white", style=filled]
    node3884 -> node3885 [label=<<font color="black">true</font>> color="black"]
    node3884 -> node3886 [label=<<font color="black">false</font>> color="black"]
    node3885_name [shape=none, label=<<font color="black">Block[3885]</font>>]
    node3885_name -> node3885 [arrowhead=none, color="black", style=dashed]
    node3885 [shape=box, label=<<font color="black">[0] env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3885 -> node3886 [color="black"]
    node3886_name [shape=none, label=<<font color="black">Block[3886]</font>>]
    node3886_name -> node3886 [arrowhead=none, color="black", style=dashed]
    node3886 [shape=box, label=<<font color="black">[0] assert (? env: &quot;EnvironmentRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3886 -> node3887 [color="black"]
    node3887_name [shape=none, label=<<font color="black">Branch[3887]</font>>]
    node3887_name -> node3887 [arrowhead=none, color="black", style=dashed]
    node3887 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node3887 -> node3888 [label=<<font color="black">true</font>> color="black"]
    node3887 -> node3889 [label=<<font color="black">false</font>> color="black"]
    node3888_name [shape=none, label=<<font color="black">Block[3888]</font>>]
    node3888_name -> node3888 [arrowhead=none, color="black", style=dashed]
    node3888 [shape=box, label=<<font color="black">[0] let strict = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3888 -> node3890 [color="black"]
    node3889_name [shape=none, label=<<font color="black">Block[3889]</font>>]
    node3889_name -> node3889 [arrowhead=none, color="black", style=dashed]
    node3889 [shape=box, label=<<font color="black">[0] let strict = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3889 -> node3890 [color="black"]
    node3890_name [shape=none, label=<<font color="black">Call[3890]</font>>]
    node3890_name -> node3890 [arrowhead=none, color="black", style=dashed]
    node3890 [shape=cds, label=<<font color="black">%0 = clo&lt;GetIdentifierReference&gt;(env, name, strict)</font>> color="black" fillcolor="white", style=filled]
    node3890 -> node3891 [color="black"]
    node3891_name [shape=none, label=<<font color="black">Block[3891]</font>>]
    node3891_name -> node3891 [arrowhead=none, color="black", style=dashed]
    node3891 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3891 -> cluster1033_exit [color="black"]
  }
}