digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2362 {
    label = "def <BUILTIN>:INTRINSICS.Array.prototype.lastIndexOf(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2362_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2362_entry_name -> cluster2362_entry [arrowhead=none, color="black", style=dashed]
    cluster2362_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2362_entry -> node15277 [color="black"]
    cluster2362_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2362_exit_name -> cluster2362_exit [arrowhead=none, color="black", style=dashed]
    cluster2362_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15277_name [shape=none, label=<<font color="black">Branch[15277]</font>>]
    node15277_name -> node15277 [arrowhead=none, color="black", style=dashed]
    node15277 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15277 -> node15278 [label=<<font color="black">true</font>> color="black"]
    node15277 -> node15279 [label=<<font color="black">false</font>> color="black"]
    node15278_name [shape=none, label=<<font color="black">Block[15278]</font>>]
    node15278_name -> node15278 [arrowhead=none, color="black", style=dashed]
    node15278 [shape=box, label=<<font color="black">[0] let searchElement = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15278 -> node15280 [color="black"]
    node15279_name [shape=none, label=<<font color="black">Block[15279]</font>>]
    node15279_name -> node15279 [arrowhead=none, color="black", style=dashed]
    node15279 [shape=box, label=<<font color="black">[0] let searchElement = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15279 -> node15280 [color="black"]
    node15280_name [shape=none, label=<<font color="black">Branch[15280]</font>>]
    node15280_name -> node15280 [arrowhead=none, color="black", style=dashed]
    node15280 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15280 -> node15281 [label=<<font color="black">true</font>> color="black"]
    node15280 -> node15282 [label=<<font color="black">false</font>> color="black"]
    node15281_name [shape=none, label=<<font color="black">Block[15281]</font>>]
    node15281_name -> node15281 [arrowhead=none, color="black", style=dashed]
    node15281 [shape=box, label=<<font color="black">[0] let fromIndex = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15281 -> node15283 [color="black"]
    node15282_name [shape=none, label=<<font color="black">Block[15282]</font>>]
    node15282_name -> node15282 [arrowhead=none, color="black", style=dashed]
    node15282 [shape=box, label=<<font color="black">[0] let fromIndex = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15282 -> node15283 [color="black"]
    node15283_name [shape=none, label=<<font color="black">Call[15283]</font>>]
    node15283_name -> node15283 [arrowhead=none, color="black", style=dashed]
    node15283 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node15283 -> node15284 [color="black"]
    node15284_name [shape=none, label=<<font color="black">Block[15284]</font>>]
    node15284_name -> node15284 [arrowhead=none, color="black", style=dashed]
    node15284 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15284 -> node15285 [color="black"]
    node15285_name [shape=none, label=<<font color="black">Call[15285]</font>>]
    node15285_name -> node15285 [arrowhead=none, color="black", style=dashed]
    node15285 [shape=cds, label=<<font color="black">%1 = clo&lt;LengthOfArrayLike&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node15285 -> node15286 [color="black"]
    node15286_name [shape=none, label=<<font color="black">Block[15286]</font>>]
    node15286_name -> node15286 [arrowhead=none, color="black", style=dashed]
    node15286 [shape=box, label=<<font color="black">[0] let len = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15286 -> node15287 [color="black"]
    node15287_name [shape=none, label=<<font color="black">Branch[15287]</font>>]
    node15287_name -> node15287 [arrowhead=none, color="black", style=dashed]
    node15287 [shape=diamond, label=<<font color="black">(= len 0)</font>> color="black" fillcolor="white", style=filled]
    node15287 -> node15288 [label=<<font color="black">true</font>> color="black"]
    node15287 -> node15289 [label=<<font color="black">false</font>> color="black"]
    node15288_name [shape=none, label=<<font color="black">Block[15288]</font>>]
    node15288_name -> node15288 [arrowhead=none, color="black", style=dashed]
    node15288 [shape=box, label=<<font color="black">[0] return -1.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15288 -> cluster2362_exit [color="black"]
    node15289_name [shape=none, label=<<font color="black">Branch[15289]</font>>]
    node15289_name -> node15289 [arrowhead=none, color="black", style=dashed]
    node15289 [shape=diamond, label=<<font color="black">(! (= fromIndex absent))</font>> color="black" fillcolor="white", style=filled]
    node15289 -> node15290 [label=<<font color="black">true</font>> color="black"]
    node15289 -> node15292 [label=<<font color="black">false</font>> color="black"]
    node15290_name [shape=none, label=<<font color="black">Call[15290]</font>>]
    node15290_name -> node15290 [arrowhead=none, color="black", style=dashed]
    node15290 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(fromIndex)</font>> color="black" fillcolor="white", style=filled]
    node15290 -> node15291 [color="black"]
    node15292_name [shape=none, label=<<font color="black">Block[15292]</font>>]
    node15292_name -> node15292 [arrowhead=none, color="black", style=dashed]
    node15292 [shape=box, label=<<font color="black">[0] let n = (- len 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15292 -> node15293 [color="black"]
    node15291_name [shape=none, label=<<font color="black">Block[15291]</font>>]
    node15291_name -> node15291 [arrowhead=none, color="black", style=dashed]
    node15291 [shape=box, label=<<font color="black">[0] let n = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15291 -> node15293 [color="black"]
    node15293_name [shape=none, label=<<font color="black">Branch[15293]</font>>]
    node15293_name -> node15293 [arrowhead=none, color="black", style=dashed]
    node15293 [shape=diamond, label=<<font color="black">(= n -INF)</font>> color="black" fillcolor="white", style=filled]
    node15293 -> node15294 [label=<<font color="black">true</font>> color="black"]
    node15293 -> node15295 [label=<<font color="black">false</font>> color="black"]
    node15294_name [shape=none, label=<<font color="black">Block[15294]</font>>]
    node15294_name -> node15294 [arrowhead=none, color="black", style=dashed]
    node15294 [shape=box, label=<<font color="black">[0] return -1.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15294 -> cluster2362_exit [color="black"]
    node15295_name [shape=none, label=<<font color="black">Branch[15295]</font>>]
    node15295_name -> node15295 [arrowhead=none, color="black", style=dashed]
    node15295 [shape=diamond, label=<<font color="black">(! (&lt; n 0))</font>> color="black" fillcolor="white", style=filled]
    node15295 -> node15296 [label=<<font color="black">true</font>> color="black"]
    node15295 -> node15297 [label=<<font color="black">false</font>> color="black"]
    node15296_name [shape=none, label=<<font color="black">Block[15296]</font>>]
    node15296_name -> node15296 [arrowhead=none, color="black", style=dashed]
    node15296 [shape=box, label=<<font color="black">[0] let k = (min n (- len 1))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15296 -> node15298 [color="black"]
    node15297_name [shape=none, label=<<font color="black">Block[15297]</font>>]
    node15297_name -> node15297 [arrowhead=none, color="black", style=dashed]
    node15297 [shape=box, label=<<font color="black">[0] let k = (+ len n)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15297 -> node15298 [color="black"]
    node15298_name [shape=none, label=<<font color="black">Branch[15298]</font>>]
    node15298_name -> node15298 [arrowhead=none, color="black", style=dashed]
    node15298 [shape=diamond, label=<<font color="black">(! (&lt; k 0))</font>> color="black" fillcolor="white", style=filled]
    node15298 -> node15299 [label=<<font color="black">true</font>> color="black"]
    node15298 -> node15311 [label=<<font color="black">false</font>> color="black"]
    node15299_name [shape=none, label=<<font color="black">Call[15299]</font>>]
    node15299_name -> node15299 [arrowhead=none, color="black", style=dashed]
    node15299 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15299 -> node15300 [color="black"]
    node15311_name [shape=none, label=<<font color="black">Block[15311]</font>>]
    node15311_name -> node15311 [arrowhead=none, color="black", style=dashed]
    node15311 [shape=box, label=<<font color="black">[0] return -1.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15311 -> cluster2362_exit [color="black"]
    node15300_name [shape=none, label=<<font color="black">Call[15300]</font>>]
    node15300_name -> node15300 [arrowhead=none, color="black", style=dashed]
    node15300 [shape=cds, label=<<font color="black">%4 = clo&lt;HasProperty&gt;(O, [! %3])</font>> color="black" fillcolor="white", style=filled]
    node15300 -> node15301 [color="black"]
    node15301_name [shape=none, label=<<font color="black">Block[15301]</font>>]
    node15301_name -> node15301 [arrowhead=none, color="black", style=dashed]
    node15301 [shape=box, label=<<font color="black">[0] let kPresent = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15301 -> node15302 [color="black"]
    node15302_name [shape=none, label=<<font color="black">Branch[15302]</font>>]
    node15302_name -> node15302 [arrowhead=none, color="black", style=dashed]
    node15302 [shape=diamond, label=<<font color="black">(= kPresent true)</font>> color="black" fillcolor="white", style=filled]
    node15302 -> node15303 [label=<<font color="black">true</font>> color="black"]
    node15302 -> node15310 [label=<<font color="black">false</font>> color="black"]
    node15303_name [shape=none, label=<<font color="black">Call[15303]</font>>]
    node15303_name -> node15303 [arrowhead=none, color="black", style=dashed]
    node15303 [shape=cds, label=<<font color="black">%5 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15303 -> node15304 [color="black"]
    node15310_name [shape=none, label=<<font color="black">Block[15310]</font>>]
    node15310_name -> node15310 [arrowhead=none, color="black", style=dashed]
    node15310 [shape=box, label=<<font color="black">[0] k = (- k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15310 -> node15298 [color="black"]
    node15304_name [shape=none, label=<<font color="black">Call[15304]</font>>]
    node15304_name -> node15304 [arrowhead=none, color="black", style=dashed]
    node15304 [shape=cds, label=<<font color="black">%6 = clo&lt;Get&gt;(O, [! %5])</font>> color="black" fillcolor="white", style=filled]
    node15304 -> node15305 [color="black"]
    node15305_name [shape=none, label=<<font color="black">Block[15305]</font>>]
    node15305_name -> node15305 [arrowhead=none, color="black", style=dashed]
    node15305 [shape=box, label=<<font color="black">[0] let elementK = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15305 -> node15306 [color="black"]
    node15306_name [shape=none, label=<<font color="black">Call[15306]</font>>]
    node15306_name -> node15306 [arrowhead=none, color="black", style=dashed]
    node15306 [shape=cds, label=<<font color="black">%7 = clo&lt;IsStrictlyEqual&gt;(searchElement, elementK)</font>> color="black" fillcolor="white", style=filled]
    node15306 -> node15307 [color="black"]
    node15307_name [shape=none, label=<<font color="black">Block[15307]</font>>]
    node15307_name -> node15307 [arrowhead=none, color="black", style=dashed]
    node15307 [shape=box, label=<<font color="black">[0] let same = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15307 -> node15308 [color="black"]
    node15308_name [shape=none, label=<<font color="black">Branch[15308]</font>>]
    node15308_name -> node15308 [arrowhead=none, color="black", style=dashed]
    node15308 [shape=diamond, label=<<font color="black">(= same true)</font>> color="black" fillcolor="white", style=filled]
    node15308 -> node15309 [label=<<font color="black">true</font>> color="black"]
    node15308 -> node15310 [label=<<font color="black">false</font>> color="black"]
    node15309_name [shape=none, label=<<font color="black">Block[15309]</font>>]
    node15309_name -> node15309 [arrowhead=none, color="black", style=dashed]
    node15309 [shape=box, label=<<font color="black">[0] return ([number] k)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15309 -> cluster2362_exit [color="black"]
  }
}