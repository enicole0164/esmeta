digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2002 {
    label = "def <BUILTIN>:INTRINSICS.Object.freeze(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2002_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2002_entry_name -> cluster2002_entry [arrowhead=none, color="black", style=dashed]
    cluster2002_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2002_entry -> node11136 [color="black"]
    cluster2002_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2002_exit_name -> cluster2002_exit [arrowhead=none, color="black", style=dashed]
    cluster2002_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11136_name [shape=none, label=<<font color="black">Branch[11136]</font>>]
    node11136_name -> node11136 [arrowhead=none, color="black", style=dashed]
    node11136 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11136 -> node11137 [label=<<font color="black">true</font>> color="black"]
    node11136 -> node11138 [label=<<font color="black">false</font>> color="black"]
    node11137_name [shape=none, label=<<font color="black">Block[11137]</font>>]
    node11137_name -> node11137 [arrowhead=none, color="black", style=dashed]
    node11137 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11137 -> node11139 [color="black"]
    node11138_name [shape=none, label=<<font color="black">Block[11138]</font>>]
    node11138_name -> node11138 [arrowhead=none, color="black", style=dashed]
    node11138 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11138 -> node11139 [color="black"]
    node11139_name [shape=none, label=<<font color="black">Branch[11139]</font>>]
    node11139_name -> node11139 [arrowhead=none, color="black", style=dashed]
    node11139 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node11139 -> node11140 [label=<<font color="black">true</font>> color="black"]
    node11139 -> node11141 [label=<<font color="black">false</font>> color="black"]
    node11140_name [shape=none, label=<<font color="black">Block[11140]</font>>]
    node11140_name -> node11140 [arrowhead=none, color="black", style=dashed]
    node11140 [shape=box, label=<<font color="black">[0] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11140 -> cluster2002_exit [color="black"]
    node11141_name [shape=none, label=<<font color="black">Call[11141]</font>>]
    node11141_name -> node11141 [arrowhead=none, color="black", style=dashed]
    node11141 [shape=cds, label=<<font color="black">%0 = clo&lt;SetIntegrityLevel&gt;(O, ~frozen~)</font>> color="black" fillcolor="white", style=filled]
    node11141 -> node11142 [color="black"]
    node11142_name [shape=none, label=<<font color="black">Block[11142]</font>>]
    node11142_name -> node11142 [arrowhead=none, color="black", style=dashed]
    node11142 [shape=box, label=<<font color="black">[0] let status = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11142 -> node11143 [color="black"]
    node11143_name [shape=none, label=<<font color="black">Branch[11143]</font>>]
    node11143_name -> node11143 [arrowhead=none, color="black", style=dashed]
    node11143 [shape=diamond, label=<<font color="black">(= status false)</font>> color="black" fillcolor="white", style=filled]
    node11143 -> node11144 [label=<<font color="black">true</font>> color="black"]
    node11143 -> node11145 [label=<<font color="black">false</font>> color="black"]
    node11144_name [shape=none, label=<<font color="black">Block[11144]</font>>]
    node11144_name -> node11144 [arrowhead=none, color="black", style=dashed]
    node11144 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#893])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11144 -> cluster2002_exit [color="black"]
    node11145_name [shape=none, label=<<font color="black">Block[11145]</font>>]
    node11145_name -> node11145 [arrowhead=none, color="black", style=dashed]
    node11145 [shape=box, label=<<font color="black">[0] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11145 -> cluster2002_exit [color="black"]
  }
}