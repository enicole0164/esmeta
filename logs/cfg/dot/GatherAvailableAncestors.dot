digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1892 {
    label = "def GatherAvailableAncestors(module: CyclicModuleRecord, execList: Unknown["ListOfCyclicModuleRecords"]): Const[~unused~]"
    style = rounded
    cluster1892_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1892_entry_name -> cluster1892_entry [arrowhead=none, color="black", style=dashed]
    cluster1892_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1892_entry -> node10225 [color="black"]
    cluster1892_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1892_exit_name -> cluster1892_exit [arrowhead=none, color="black", style=dashed]
    cluster1892_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10225_name [shape=none, label=<<font color="black">Block[10225]</font>>]
    node10225_name -> node10225 [arrowhead=none, color="black", style=dashed]
    node10225 [shape=box, label=<<font color="black">[0] %1 = module.AsyncParentModules<BR ALIGN="LEFT"/>[1] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10225 -> node10226 [color="black"]
    node10226_name [shape=none, label=<<font color="black">Branch[10226]</font>>]
    node10226_name -> node10226 [arrowhead=none, color="black", style=dashed]
    node10226 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node10226 -> node10227 [label=<<font color="black">true</font>> color="black"]
    node10226 -> node10235 [label=<<font color="black">false</font>> color="black"]
    node10227_name [shape=none, label=<<font color="black">Block[10227]</font>>]
    node10227_name -> node10227 [arrowhead=none, color="black", style=dashed]
    node10227 [shape=box, label=<<font color="black">[0] let m = %1[%0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10227 -> node10228 [color="black"]
    node10235_name [shape=none, label=<<font color="black">Block[10235]</font>>]
    node10235_name -> node10235 [arrowhead=none, color="black", style=dashed]
    node10235 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10235 -> cluster1892_exit [color="black"]
    node10228_name [shape=none, label=<<font color="black">Branch[10228]</font>>]
    node10228_name -> node10228 [arrowhead=none, color="black", style=dashed]
    node10228 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (contains execList m)) (= m.CycleRoot.EvaluationError ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10228 -> node10229 [label=<<font color="black">true</font>> color="black"]
    node10228 -> node10234 [label=<<font color="black">false</font>> color="black"]
    node10229_name [shape=none, label=<<font color="black">Block[10229]</font>>]
    node10229_name -> node10229 [arrowhead=none, color="black", style=dashed]
    node10229 [shape=box, label=<<font color="black">[0] assert (= m.Status ~evaluating-async~)<BR ALIGN="LEFT"/>[1] assert (= m.EvaluationError ~empty~)<BR ALIGN="LEFT"/>[2] assert (= m.AsyncEvaluation true)<BR ALIGN="LEFT"/>[3] assert (&lt; 0 m.PendingAsyncDependencies)<BR ALIGN="LEFT"/>[4] m.PendingAsyncDependencies = (- m.PendingAsyncDependencies 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10229 -> node10230 [color="black"]
    node10234_name [shape=none, label=<<font color="black">Block[10234]</font>>]
    node10234_name -> node10234 [arrowhead=none, color="black", style=dashed]
    node10234 [shape=box, label=<<font color="black">[0] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10234 -> node10226 [color="black"]
    node10230_name [shape=none, label=<<font color="black">Branch[10230]</font>>]
    node10230_name -> node10230 [arrowhead=none, color="black", style=dashed]
    node10230 [shape=diamond, label=<<font color="black">(== m.PendingAsyncDependencies 0)</font>> color="black" fillcolor="white", style=filled]
    node10230 -> node10231 [label=<<font color="black">true</font>> color="black"]
    node10230 -> node10234 [label=<<font color="black">false</font>> color="black"]
    node10231_name [shape=none, label=<<font color="black">Block[10231]</font>>]
    node10231_name -> node10231 [arrowhead=none, color="black", style=dashed]
    node10231 [shape=box, label=<<font color="black">[0] push execList &lt; m<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10231 -> node10232 [color="black"]
    node10232_name [shape=none, label=<<font color="black">Branch[10232]</font>>]
    node10232_name -> node10232 [arrowhead=none, color="black", style=dashed]
    node10232 [shape=diamond, label=<<font color="black">(= m.HasTLA false)</font>> color="black" fillcolor="white", style=filled]
    node10232 -> node10233 [label=<<font color="black">true</font>> color="black"]
    node10232 -> node10234 [label=<<font color="black">false</font>> color="black"]
    node10233_name [shape=none, label=<<font color="black">Call[10233]</font>>]
    node10233_name -> node10233 [arrowhead=none, color="black", style=dashed]
    node10233 [shape=cds, label=<<font color="black">%2 = clo&lt;GatherAvailableAncestors&gt;(m, execList)</font>> color="black" fillcolor="white", style=filled]
    node10233 -> node10234 [color="black"]
  }
}