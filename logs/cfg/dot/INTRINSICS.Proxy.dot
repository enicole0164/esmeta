digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2659 {
    label = "def <BUILTIN>:INTRINSICS.Proxy(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2659_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2659_entry_name -> cluster2659_entry [arrowhead=none, color="black", style=dashed]
    cluster2659_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2659_entry -> node19807 [color="black"]
    cluster2659_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2659_exit_name -> cluster2659_exit [arrowhead=none, color="black", style=dashed]
    cluster2659_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19807_name [shape=none, label=<<font color="black">Branch[19807]</font>>]
    node19807_name -> node19807 [arrowhead=none, color="black", style=dashed]
    node19807 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19807 -> node19808 [label=<<font color="black">true</font>> color="black"]
    node19807 -> node19809 [label=<<font color="black">false</font>> color="black"]
    node19808_name [shape=none, label=<<font color="black">Block[19808]</font>>]
    node19808_name -> node19808 [arrowhead=none, color="black", style=dashed]
    node19808 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19808 -> node19810 [color="black"]
    node19809_name [shape=none, label=<<font color="black">Block[19809]</font>>]
    node19809_name -> node19809 [arrowhead=none, color="black", style=dashed]
    node19809 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19809 -> node19810 [color="black"]
    node19810_name [shape=none, label=<<font color="black">Branch[19810]</font>>]
    node19810_name -> node19810 [arrowhead=none, color="black", style=dashed]
    node19810 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19810 -> node19811 [label=<<font color="black">true</font>> color="black"]
    node19810 -> node19812 [label=<<font color="black">false</font>> color="black"]
    node19811_name [shape=none, label=<<font color="black">Block[19811]</font>>]
    node19811_name -> node19811 [arrowhead=none, color="black", style=dashed]
    node19811 [shape=box, label=<<font color="black">[0] let handler = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19811 -> node19813 [color="black"]
    node19812_name [shape=none, label=<<font color="black">Block[19812]</font>>]
    node19812_name -> node19812 [arrowhead=none, color="black", style=dashed]
    node19812 [shape=box, label=<<font color="black">[0] let handler = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19812 -> node19813 [color="black"]
    node19813_name [shape=none, label=<<font color="black">Branch[19813]</font>>]
    node19813_name -> node19813 [arrowhead=none, color="black", style=dashed]
    node19813 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node19813 -> node19814 [label=<<font color="black">true</font>> color="black"]
    node19813 -> node19815 [label=<<font color="black">false</font>> color="black"]
    node19814_name [shape=none, label=<<font color="black">Block[19814]</font>>]
    node19814_name -> node19814 [arrowhead=none, color="black", style=dashed]
    node19814 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1358])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19814 -> cluster2659_exit [color="black"]
    node19815_name [shape=none, label=<<font color="black">Call[19815]</font>>]
    node19815_name -> node19815 [arrowhead=none, color="black", style=dashed]
    node19815 [shape=cds, label=<<font color="black">%0 = clo&lt;ProxyCreate&gt;(target, handler)</font>> color="black" fillcolor="white", style=filled]
    node19815 -> node19816 [color="black"]
    node19816_name [shape=none, label=<<font color="black">Block[19816]</font>>]
    node19816_name -> node19816 [arrowhead=none, color="black", style=dashed]
    node19816 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19816 -> cluster2659_exit [color="black"]
  }
}