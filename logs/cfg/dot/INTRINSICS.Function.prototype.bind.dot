digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2036 {
    label = "def <BUILTIN>:INTRINSICS.Function.prototype.bind(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2036_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2036_entry_name -> cluster2036_entry [arrowhead=none, color="black", style=dashed]
    cluster2036_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2036_entry -> node11573 [color="black"]
    cluster2036_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2036_exit_name -> cluster2036_exit [arrowhead=none, color="black", style=dashed]
    cluster2036_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11573_name [shape=none, label=<<font color="black">Branch[11573]</font>>]
    node11573_name -> node11573 [arrowhead=none, color="black", style=dashed]
    node11573 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11573 -> node11574 [label=<<font color="black">true</font>> color="black"]
    node11573 -> node11575 [label=<<font color="black">false</font>> color="black"]
    node11574_name [shape=none, label=<<font color="black">Block[11574]</font>>]
    node11574_name -> node11574 [arrowhead=none, color="black", style=dashed]
    node11574 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11574 -> node11576 [color="black"]
    node11575_name [shape=none, label=<<font color="black">Block[11575]</font>>]
    node11575_name -> node11575 [arrowhead=none, color="black", style=dashed]
    node11575 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11575 -> node11576 [color="black"]
    node11576_name [shape=none, label=<<font color="black">Block[11576]</font>>]
    node11576_name -> node11576 [arrowhead=none, color="black", style=dashed]
    node11576 [shape=box, label=<<font color="black">[0] let args = argumentsList<BR ALIGN="LEFT"/>[1] let Target = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11576 -> node11577 [color="black"]
    node11577_name [shape=none, label=<<font color="black">Call[11577]</font>>]
    node11577_name -> node11577 [arrowhead=none, color="black", style=dashed]
    node11577 [shape=cds, label=<<font color="black">%0 = clo&lt;IsCallable&gt;(Target)</font>> color="black" fillcolor="white", style=filled]
    node11577 -> node11578 [color="black"]
    node11578_name [shape=none, label=<<font color="black">Branch[11578]</font>>]
    node11578_name -> node11578 [arrowhead=none, color="black", style=dashed]
    node11578 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node11578 -> node11579 [label=<<font color="black">true</font>> color="black"]
    node11578 -> node11580 [label=<<font color="black">false</font>> color="black"]
    node11579_name [shape=none, label=<<font color="black">Block[11579]</font>>]
    node11579_name -> node11579 [arrowhead=none, color="black", style=dashed]
    node11579 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#911])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11579 -> cluster2036_exit [color="black"]
    node11580_name [shape=none, label=<<font color="black">Call[11580]</font>>]
    node11580_name -> node11580 [arrowhead=none, color="black", style=dashed]
    node11580 [shape=cds, label=<<font color="black">%1 = clo&lt;BoundFunctionCreate&gt;(Target, thisArg, args)</font>> color="black" fillcolor="white", style=filled]
    node11580 -> node11581 [color="black"]
    node11581_name [shape=none, label=<<font color="black">Block[11581]</font>>]
    node11581_name -> node11581 [arrowhead=none, color="black", style=dashed]
    node11581 [shape=box, label=<<font color="black">[0] let F = [? %1]<BR ALIGN="LEFT"/>[1] let L = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11581 -> node11582 [color="black"]
    node11582_name [shape=none, label=<<font color="black">Call[11582]</font>>]
    node11582_name -> node11582 [arrowhead=none, color="black", style=dashed]
    node11582 [shape=cds, label=<<font color="black">%2 = clo&lt;HasOwnProperty&gt;(Target, &quot;length&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11582 -> node11583 [color="black"]
    node11583_name [shape=none, label=<<font color="black">Block[11583]</font>>]
    node11583_name -> node11583 [arrowhead=none, color="black", style=dashed]
    node11583 [shape=box, label=<<font color="black">[0] let targetHasLength = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11583 -> node11584 [color="black"]
    node11584_name [shape=none, label=<<font color="black">Branch[11584]</font>>]
    node11584_name -> node11584 [arrowhead=none, color="black", style=dashed]
    node11584 [shape=diamond, label=<<font color="black">(= targetHasLength true)</font>> color="black" fillcolor="white", style=filled]
    node11584 -> node11585 [label=<<font color="black">true</font>> color="black"]
    node11584 -> node11594 [label=<<font color="black">false</font>> color="black"]
    node11585_name [shape=none, label=<<font color="black">Call[11585]</font>>]
    node11585_name -> node11585 [arrowhead=none, color="black", style=dashed]
    node11585 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(Target, &quot;length&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11585 -> node11586 [color="black"]
    node11594_name [shape=none, label=<<font color="black">Call[11594]</font>>]
    node11594_name -> node11594 [arrowhead=none, color="black", style=dashed]
    node11594 [shape=cds, label=<<font color="black">%5 = clo&lt;SetFunctionLength&gt;(F, L)</font>> color="black" fillcolor="white", style=filled]
    node11594 -> node11595 [color="black"]
    node11586_name [shape=none, label=<<font color="black">Block[11586]</font>>]
    node11586_name -> node11586 [arrowhead=none, color="black", style=dashed]
    node11586 [shape=box, label=<<font color="black">[0] let targetLen = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11586 -> node11587 [color="black"]
    node11595_name [shape=none, label=<<font color="black">Call[11595]</font>>]
    node11595_name -> node11595 [arrowhead=none, color="black", style=dashed]
    node11595 [shape=cds, label=<<font color="black">%6 = clo&lt;Get&gt;(Target, &quot;name&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11595 -> node11596 [color="black"]
    node11587_name [shape=none, label=<<font color="black">Branch[11587]</font>>]
    node11587_name -> node11587 [arrowhead=none, color="black", style=dashed]
    node11587 [shape=diamond, label=<<font color="black">(= (typeof targetLen) @Number)</font>> color="black" fillcolor="white", style=filled]
    node11587 -> node11588 [label=<<font color="black">true</font>> color="black"]
    node11587 -> node11594 [label=<<font color="black">false</font>> color="black"]
    node11596_name [shape=none, label=<<font color="black">Block[11596]</font>>]
    node11596_name -> node11596 [arrowhead=none, color="black", style=dashed]
    node11596 [shape=box, label=<<font color="black">[0] let targetName = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11596 -> node11597 [color="black"]
    node11588_name [shape=none, label=<<font color="black">Branch[11588]</font>>]
    node11588_name -> node11588 [arrowhead=none, color="black", style=dashed]
    node11588 [shape=diamond, label=<<font color="black">(= targetLen +INF)</font>> color="black" fillcolor="white", style=filled]
    node11588 -> node11589 [label=<<font color="black">true</font>> color="black"]
    node11588 -> node11590 [label=<<font color="black">false</font>> color="black"]
    node11597_name [shape=none, label=<<font color="black">Branch[11597]</font>>]
    node11597_name -> node11597 [arrowhead=none, color="black", style=dashed]
    node11597 [shape=diamond, label=<<font color="black">(! (= (typeof targetName) @String))</font>> color="black" fillcolor="white", style=filled]
    node11597 -> node11598 [label=<<font color="black">true</font>> color="black"]
    node11597 -> node11599 [label=<<font color="black">false</font>> color="black"]
    node11589_name [shape=none, label=<<font color="black">Block[11589]</font>>]
    node11589_name -> node11589 [arrowhead=none, color="black", style=dashed]
    node11589 [shape=box, label=<<font color="black">[0] L = +INF<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11589 -> node11594 [color="black"]
    node11590_name [shape=none, label=<<font color="black">Branch[11590]</font>>]
    node11590_name -> node11590 [arrowhead=none, color="black", style=dashed]
    node11590 [shape=diamond, label=<<font color="black">(= targetLen -INF)</font>> color="black" fillcolor="white", style=filled]
    node11590 -> node11591 [label=<<font color="black">true</font>> color="black"]
    node11590 -> node11592 [label=<<font color="black">false</font>> color="black"]
    node11598_name [shape=none, label=<<font color="black">Block[11598]</font>>]
    node11598_name -> node11598 [arrowhead=none, color="black", style=dashed]
    node11598 [shape=box, label=<<font color="black">[0] targetName = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11598 -> node11599 [color="black"]
    node11599_name [shape=none, label=<<font color="black">Call[11599]</font>>]
    node11599_name -> node11599 [arrowhead=none, color="black", style=dashed]
    node11599 [shape=cds, label=<<font color="black">%7 = clo&lt;SetFunctionName&gt;(F, targetName, &quot;bound&quot;)</font>> color="black" fillcolor="white", style=filled]
    node11599 -> node11600 [color="black"]
    node11591_name [shape=none, label=<<font color="black">Block[11591]</font>>]
    node11591_name -> node11591 [arrowhead=none, color="black", style=dashed]
    node11591 [shape=box, label=<<font color="black">[0] L = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11591 -> node11594 [color="black"]
    node11592_name [shape=none, label=<<font color="black">Call[11592]</font>>]
    node11592_name -> node11592 [arrowhead=none, color="black", style=dashed]
    node11592 [shape=cds, label=<<font color="black">%4 = clo&lt;ToIntegerOrInfinity&gt;(targetLen)</font>> color="black" fillcolor="white", style=filled]
    node11592 -> node11593 [color="black"]
    node11600_name [shape=none, label=<<font color="black">Block[11600]</font>>]
    node11600_name -> node11600 [arrowhead=none, color="black", style=dashed]
    node11600 [shape=box, label=<<font color="black">[0] return F<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11600 -> cluster2036_exit [color="black"]
    node11593_name [shape=none, label=<<font color="black">Block[11593]</font>>]
    node11593_name -> node11593 [arrowhead=none, color="black", style=dashed]
    node11593 [shape=box, label=<<font color="black">[0] let targetLenAsInt = [! %4]<BR ALIGN="LEFT"/>[1] assert (! (|| (= targetLenAsInt NaN) (|| (= targetLenAsInt +INF) (= targetLenAsInt -INF))))<BR ALIGN="LEFT"/>[2] let argCount = args.length<BR ALIGN="LEFT"/>[3] L = (max (- targetLenAsInt argCount) 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11593 -> node11594 [color="black"]
  }
}