digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2063 {
    label = "def thisNumberValue(value: Unknown): Unknown"
    style = rounded
    cluster2063_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2063_entry_name -> cluster2063_entry [arrowhead=none, color="black", style=dashed]
    cluster2063_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2063_entry -> node11821 [color="black"]
    cluster2063_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2063_exit_name -> cluster2063_exit [arrowhead=none, color="black", style=dashed]
    cluster2063_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11821_name [shape=none, label=<<font color="black">Branch[11821]</font>>]
    node11821_name -> node11821 [arrowhead=none, color="black", style=dashed]
    node11821 [shape=diamond, label=<<font color="black">(= (typeof value) @Number)</font>> color="black" fillcolor="white", style=filled]
    node11821 -> node11822 [label=<<font color="black">true</font>> color="black"]
    node11821 -> node11823 [label=<<font color="black">false</font>> color="black"]
    node11822_name [shape=none, label=<<font color="black">Block[11822]</font>>]
    node11822_name -> node11822 [arrowhead=none, color="black", style=dashed]
    node11822 [shape=box, label=<<font color="black">[0] return value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11822 -> cluster2063_exit [color="black"]
    node11823_name [shape=none, label=<<font color="black">Branch[11823]</font>>]
    node11823_name -> node11823 [arrowhead=none, color="black", style=dashed]
    node11823 [shape=diamond, label=<<font color="black">(&amp;&amp; (= (typeof value) @Object) (! (= value.NumberData absent)))</font>> color="black" fillcolor="white", style=filled]
    node11823 -> node11824 [label=<<font color="black">true</font>> color="black"]
    node11823 -> node11825 [label=<<font color="black">false</font>> color="black"]
    node11824_name [shape=none, label=<<font color="black">Block[11824]</font>>]
    node11824_name -> node11824 [arrowhead=none, color="black", style=dashed]
    node11824 [shape=box, label=<<font color="black">[0] let n = value.NumberData<BR ALIGN="LEFT"/>[1] assert (= (typeof n) @Number)<BR ALIGN="LEFT"/>[2] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11824 -> cluster2063_exit [color="black"]
    node11825_name [shape=none, label=<<font color="black">Block[11825]</font>>]
    node11825_name -> node11825 [arrowhead=none, color="black", style=dashed]
    node11825 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#925])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11825 -> cluster2063_exit [color="black"]
  }
}