digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2461 {
    label = "def <BUILTIN>:INTRINSICS.WeakMap(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2461_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2461_entry_name -> cluster2461_entry [arrowhead=none, color="black", style=dashed]
    cluster2461_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2461_entry -> node17177 [color="black"]
    cluster2461_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2461_exit_name -> cluster2461_exit [arrowhead=none, color="black", style=dashed]
    cluster2461_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17177_name [shape=none, label=<<font color="black">Branch[17177]</font>>]
    node17177_name -> node17177 [arrowhead=none, color="black", style=dashed]
    node17177 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17177 -> node17178 [label=<<font color="black">true</font>> color="black"]
    node17177 -> node17179 [label=<<font color="black">false</font>> color="black"]
    node17178_name [shape=none, label=<<font color="black">Block[17178]</font>>]
    node17178_name -> node17178 [arrowhead=none, color="black", style=dashed]
    node17178 [shape=box, label=<<font color="black">[0] let iterable = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17178 -> node17180 [color="black"]
    node17179_name [shape=none, label=<<font color="black">Block[17179]</font>>]
    node17179_name -> node17179 [arrowhead=none, color="black", style=dashed]
    node17179 [shape=box, label=<<font color="black">[0] let iterable = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17179 -> node17180 [color="black"]
    node17180_name [shape=none, label=<<font color="black">Branch[17180]</font>>]
    node17180_name -> node17180 [arrowhead=none, color="black", style=dashed]
    node17180 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node17180 -> node17181 [label=<<font color="black">true</font>> color="black"]
    node17180 -> node17182 [label=<<font color="black">false</font>> color="black"]
    node17181_name [shape=none, label=<<font color="black">Block[17181]</font>>]
    node17181_name -> node17181 [arrowhead=none, color="black", style=dashed]
    node17181 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1131])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17181 -> cluster2461_exit [color="black"]
    node17182_name [shape=none, label=<<font color="black">Call[17182]</font>>]
    node17182_name -> node17182 [arrowhead=none, color="black", style=dashed]
    node17182 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryCreateFromConstructor&gt;(NewTarget, &quot;%WeakMap.prototype%&quot;, (new [&quot;WeakMapData&quot;])[#1132])</font>> color="black" fillcolor="white", style=filled]
    node17182 -> node17183 [color="black"]
    node17183_name [shape=none, label=<<font color="black">Block[17183]</font>>]
    node17183_name -> node17183 [arrowhead=none, color="black", style=dashed]
    node17183 [shape=box, label=<<font color="black">[0] let map = [? %0]<BR ALIGN="LEFT"/>[1] map.WeakMapData = (new [])[#1133]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17183 -> node17184 [color="black"]
    node17184_name [shape=none, label=<<font color="black">Branch[17184]</font>>]
    node17184_name -> node17184 [arrowhead=none, color="black", style=dashed]
    node17184 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white", style=filled]
    node17184 -> node17185 [label=<<font color="black">true</font>> color="black"]
    node17184 -> node17186 [label=<<font color="black">false</font>> color="black"]
    node17185_name [shape=none, label=<<font color="black">Block[17185]</font>>]
    node17185_name -> node17185 [arrowhead=none, color="black", style=dashed]
    node17185 [shape=box, label=<<font color="black">[0] return map<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17185 -> cluster2461_exit [color="black"]
    node17186_name [shape=none, label=<<font color="black">Call[17186]</font>>]
    node17186_name -> node17186 [arrowhead=none, color="black", style=dashed]
    node17186 [shape=cds, label=<<font color="black">%1 = clo&lt;Get&gt;(map, &quot;set&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17186 -> node17187 [color="black"]
    node17187_name [shape=none, label=<<font color="black">Block[17187]</font>>]
    node17187_name -> node17187 [arrowhead=none, color="black", style=dashed]
    node17187 [shape=box, label=<<font color="black">[0] let adder = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17187 -> node17188 [color="black"]
    node17188_name [shape=none, label=<<font color="black">Call[17188]</font>>]
    node17188_name -> node17188 [arrowhead=none, color="black", style=dashed]
    node17188 [shape=cds, label=<<font color="black">%2 = clo&lt;AddEntriesFromIterable&gt;(map, iterable, adder)</font>> color="black" fillcolor="white", style=filled]
    node17188 -> node17189 [color="black"]
    node17189_name [shape=none, label=<<font color="black">Block[17189]</font>>]
    node17189_name -> node17189 [arrowhead=none, color="black", style=dashed]
    node17189 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17189 -> cluster2461_exit [color="black"]
  }
}