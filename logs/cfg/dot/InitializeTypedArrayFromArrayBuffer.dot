digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2428 {
    label = "def InitializeTypedArrayFromArrayBuffer(O: Unknown["TypedArray"], buffer: Unknown["ArrayBufferOrASharedArrayBuffer"], byteOffset: ESValue, length: ESValue): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2428_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2428_entry_name -> cluster2428_entry [arrowhead=none, color="black", style=dashed]
    cluster2428_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2428_entry -> node16800 [color="black"]
    cluster2428_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2428_exit_name -> cluster2428_exit [arrowhead=none, color="black", style=dashed]
    cluster2428_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16800_name [shape=none, label=<<font color="black">Call[16800]</font>>]
    node16800_name -> node16800 [arrowhead=none, color="black", style=dashed]
    node16800 [shape=cds, label=<<font color="black">%0 = clo&lt;TypedArrayElementSize&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16800 -> node16801 [color="black"]
    node16801_name [shape=none, label=<<font color="black">Block[16801]</font>>]
    node16801_name -> node16801 [arrowhead=none, color="black", style=dashed]
    node16801 [shape=box, label=<<font color="black">[0] let elementSize = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16801 -> node16802 [color="black"]
    node16802_name [shape=none, label=<<font color="black">Call[16802]</font>>]
    node16802_name -> node16802 [arrowhead=none, color="black", style=dashed]
    node16802 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIndex&gt;(byteOffset)</font>> color="black" fillcolor="white", style=filled]
    node16802 -> node16803 [color="black"]
    node16803_name [shape=none, label=<<font color="black">Block[16803]</font>>]
    node16803_name -> node16803 [arrowhead=none, color="black", style=dashed]
    node16803 [shape=box, label=<<font color="black">[0] let offset = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16803 -> node16804 [color="black"]
    node16804_name [shape=none, label=<<font color="black">Branch[16804]</font>>]
    node16804_name -> node16804 [arrowhead=none, color="black", style=dashed]
    node16804 [shape=diamond, label=<<font color="black">(! (== (% offset elementSize) 0))</font>> color="black" fillcolor="white", style=filled]
    node16804 -> node16805 [label=<<font color="black">true</font>> color="black"]
    node16804 -> node16806 [label=<<font color="black">false</font>> color="black"]
    node16805_name [shape=none, label=<<font color="black">Block[16805]</font>>]
    node16805_name -> node16805 [arrowhead=none, color="black", style=dashed]
    node16805 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1108])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16805 -> cluster2428_exit [color="black"]
    node16806_name [shape=none, label=<<font color="black">Branch[16806]</font>>]
    node16806_name -> node16806 [arrowhead=none, color="black", style=dashed]
    node16806 [shape=diamond, label=<<font color="black">(! (= length undefined))</font>> color="black" fillcolor="white", style=filled]
    node16806 -> node16807 [label=<<font color="black">true</font>> color="black"]
    node16806 -> node16809 [label=<<font color="black">false</font>> color="black"]
    node16807_name [shape=none, label=<<font color="black">Call[16807]</font>>]
    node16807_name -> node16807 [arrowhead=none, color="black", style=dashed]
    node16807 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIndex&gt;(length)</font>> color="black" fillcolor="white", style=filled]
    node16807 -> node16808 [color="black"]
    node16809_name [shape=none, label=<<font color="black">Call[16809]</font>>]
    node16809_name -> node16809 [arrowhead=none, color="black", style=dashed]
    node16809 [shape=cds, label=<<font color="black">%3 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node16809 -> node16810 [color="black"]
    node16808_name [shape=none, label=<<font color="black">Block[16808]</font>>]
    node16808_name -> node16808 [arrowhead=none, color="black", style=dashed]
    node16808 [shape=box, label=<<font color="black">[0] let newLength = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16808 -> node16809 [color="black"]
    node16810_name [shape=none, label=<<font color="black">Branch[16810]</font>>]
    node16810_name -> node16810 [arrowhead=none, color="black", style=dashed]
    node16810 [shape=diamond, label=<<font color="black">(= %3 true)</font>> color="black" fillcolor="white", style=filled]
    node16810 -> node16811 [label=<<font color="black">true</font>> color="black"]
    node16810 -> node16812 [label=<<font color="black">false</font>> color="black"]
    node16811_name [shape=none, label=<<font color="black">Block[16811]</font>>]
    node16811_name -> node16811 [arrowhead=none, color="black", style=dashed]
    node16811 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1109])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16811 -> cluster2428_exit [color="black"]
    node16812_name [shape=none, label=<<font color="black">Block[16812]</font>>]
    node16812_name -> node16812 [arrowhead=none, color="black", style=dashed]
    node16812 [shape=box, label=<<font color="black">[0] let bufferByteLength = buffer.ArrayBufferByteLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16812 -> node16813 [color="black"]
    node16813_name [shape=none, label=<<font color="black">Branch[16813]</font>>]
    node16813_name -> node16813 [arrowhead=none, color="black", style=dashed]
    node16813 [shape=diamond, label=<<font color="black">(= length undefined)</font>> color="black" fillcolor="white", style=filled]
    node16813 -> node16814 [label=<<font color="black">true</font>> color="black"]
    node16813 -> node16819 [label=<<font color="black">false</font>> color="black"]
    node16814_name [shape=none, label=<<font color="black">Branch[16814]</font>>]
    node16814_name -> node16814 [arrowhead=none, color="black", style=dashed]
    node16814 [shape=diamond, label=<<font color="black">(! (== (% bufferByteLength elementSize) 0))</font>> color="black" fillcolor="white", style=filled]
    node16814 -> node16815 [label=<<font color="black">true</font>> color="black"]
    node16814 -> node16816 [label=<<font color="black">false</font>> color="black"]
    node16819_name [shape=none, label=<<font color="black">Block[16819]</font>>]
    node16819_name -> node16819 [arrowhead=none, color="black", style=dashed]
    node16819 [shape=box, label=<<font color="black">[0] let newByteLength = (* newLength elementSize)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16819 -> node16820 [color="black"]
    node16815_name [shape=none, label=<<font color="black">Block[16815]</font>>]
    node16815_name -> node16815 [arrowhead=none, color="black", style=dashed]
    node16815 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1110])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16815 -> cluster2428_exit [color="black"]
    node16816_name [shape=none, label=<<font color="black">Block[16816]</font>>]
    node16816_name -> node16816 [arrowhead=none, color="black", style=dashed]
    node16816 [shape=box, label=<<font color="black">[0] let newByteLength = (- bufferByteLength offset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16816 -> node16817 [color="black"]
    node16820_name [shape=none, label=<<font color="black">Branch[16820]</font>>]
    node16820_name -> node16820 [arrowhead=none, color="black", style=dashed]
    node16820 [shape=diamond, label=<<font color="black">(&lt; bufferByteLength (+ offset newByteLength))</font>> color="black" fillcolor="white", style=filled]
    node16820 -> node16821 [label=<<font color="black">true</font>> color="black"]
    node16820 -> node16822 [label=<<font color="black">false</font>> color="black"]
    node16817_name [shape=none, label=<<font color="black">Branch[16817]</font>>]
    node16817_name -> node16817 [arrowhead=none, color="black", style=dashed]
    node16817 [shape=diamond, label=<<font color="black">(&lt; newByteLength 0)</font>> color="black" fillcolor="white", style=filled]
    node16817 -> node16818 [label=<<font color="black">true</font>> color="black"]
    node16817 -> node16822 [label=<<font color="black">false</font>> color="black"]
    node16821_name [shape=none, label=<<font color="black">Block[16821]</font>>]
    node16821_name -> node16821 [arrowhead=none, color="black", style=dashed]
    node16821 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1112])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16821 -> cluster2428_exit [color="black"]
    node16822_name [shape=none, label=<<font color="black">Block[16822]</font>>]
    node16822_name -> node16822 [arrowhead=none, color="black", style=dashed]
    node16822 [shape=box, label=<<font color="black">[0] O.ViewedArrayBuffer = buffer<BR ALIGN="LEFT"/>[1] O.ByteLength = newByteLength<BR ALIGN="LEFT"/>[2] O.ByteOffset = offset<BR ALIGN="LEFT"/>[3] O.ArrayLength = (/ newByteLength elementSize)<BR ALIGN="LEFT"/>[4] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16822 -> cluster2428_exit [color="black"]
    node16818_name [shape=none, label=<<font color="black">Block[16818]</font>>]
    node16818_name -> node16818 [arrowhead=none, color="black", style=dashed]
    node16818 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1111])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16818 -> cluster2428_exit [color="black"]
  }
}