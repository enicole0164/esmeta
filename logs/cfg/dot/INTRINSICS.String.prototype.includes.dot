digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2174 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.includes(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2174_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2174_entry_name -> cluster2174_entry [arrowhead=none, color="black", style=dashed]
    cluster2174_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2174_entry -> node13367 [color="black"]
    cluster2174_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2174_exit_name -> cluster2174_exit [arrowhead=none, color="black", style=dashed]
    cluster2174_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13367_name [shape=none, label=<<font color="black">Branch[13367]</font>>]
    node13367_name -> node13367 [arrowhead=none, color="black", style=dashed]
    node13367 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13367 -> node13368 [label=<<font color="black">true</font>> color="black"]
    node13367 -> node13369 [label=<<font color="black">false</font>> color="black"]
    node13368_name [shape=none, label=<<font color="black">Block[13368]</font>>]
    node13368_name -> node13368 [arrowhead=none, color="black", style=dashed]
    node13368 [shape=box, label=<<font color="black">[0] let searchString = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13368 -> node13370 [color="black"]
    node13369_name [shape=none, label=<<font color="black">Block[13369]</font>>]
    node13369_name -> node13369 [arrowhead=none, color="black", style=dashed]
    node13369 [shape=box, label=<<font color="black">[0] let searchString = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13369 -> node13370 [color="black"]
    node13370_name [shape=none, label=<<font color="black">Branch[13370]</font>>]
    node13370_name -> node13370 [arrowhead=none, color="black", style=dashed]
    node13370 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13370 -> node13371 [label=<<font color="black">true</font>> color="black"]
    node13370 -> node13372 [label=<<font color="black">false</font>> color="black"]
    node13371_name [shape=none, label=<<font color="black">Block[13371]</font>>]
    node13371_name -> node13371 [arrowhead=none, color="black", style=dashed]
    node13371 [shape=box, label=<<font color="black">[0] let position = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13371 -> node13373 [color="black"]
    node13372_name [shape=none, label=<<font color="black">Block[13372]</font>>]
    node13372_name -> node13372 [arrowhead=none, color="black", style=dashed]
    node13372 [shape=box, label=<<font color="black">[0] let position = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13372 -> node13373 [color="black"]
    node13373_name [shape=none, label=<<font color="black">Call[13373]</font>>]
    node13373_name -> node13373 [arrowhead=none, color="black", style=dashed]
    node13373 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13373 -> node13374 [color="black"]
    node13374_name [shape=none, label=<<font color="black">Block[13374]</font>>]
    node13374_name -> node13374 [arrowhead=none, color="black", style=dashed]
    node13374 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13374 -> node13375 [color="black"]
    node13375_name [shape=none, label=<<font color="black">Call[13375]</font>>]
    node13375_name -> node13375 [arrowhead=none, color="black", style=dashed]
    node13375 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13375 -> node13376 [color="black"]
    node13376_name [shape=none, label=<<font color="black">Block[13376]</font>>]
    node13376_name -> node13376 [arrowhead=none, color="black", style=dashed]
    node13376 [shape=box, label=<<font color="black">[0] let S = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13376 -> node13377 [color="black"]
    node13377_name [shape=none, label=<<font color="black">Call[13377]</font>>]
    node13377_name -> node13377 [arrowhead=none, color="black", style=dashed]
    node13377 [shape=cds, label=<<font color="black">%2 = clo&lt;IsRegExp&gt;(searchString)</font>> color="black" fillcolor="white", style=filled]
    node13377 -> node13378 [color="black"]
    node13378_name [shape=none, label=<<font color="black">Block[13378]</font>>]
    node13378_name -> node13378 [arrowhead=none, color="black", style=dashed]
    node13378 [shape=box, label=<<font color="black">[0] let isRegExp = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13378 -> node13379 [color="black"]
    node13379_name [shape=none, label=<<font color="black">Branch[13379]</font>>]
    node13379_name -> node13379 [arrowhead=none, color="black", style=dashed]
    node13379 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white", style=filled]
    node13379 -> node13380 [label=<<font color="black">true</font>> color="black"]
    node13379 -> node13381 [label=<<font color="black">false</font>> color="black"]
    node13380_name [shape=none, label=<<font color="black">Block[13380]</font>>]
    node13380_name -> node13380 [arrowhead=none, color="black", style=dashed]
    node13380 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#948])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13380 -> cluster2174_exit [color="black"]
    node13381_name [shape=none, label=<<font color="black">Call[13381]</font>>]
    node13381_name -> node13381 [arrowhead=none, color="black", style=dashed]
    node13381 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(searchString)</font>> color="black" fillcolor="white", style=filled]
    node13381 -> node13382 [color="black"]
    node13382_name [shape=none, label=<<font color="black">Block[13382]</font>>]
    node13382_name -> node13382 [arrowhead=none, color="black", style=dashed]
    node13382 [shape=box, label=<<font color="black">[0] let searchStr = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13382 -> node13383 [color="black"]
    node13383_name [shape=none, label=<<font color="black">Call[13383]</font>>]
    node13383_name -> node13383 [arrowhead=none, color="black", style=dashed]
    node13383 [shape=cds, label=<<font color="black">%4 = clo&lt;ToIntegerOrInfinity&gt;(position)</font>> color="black" fillcolor="white", style=filled]
    node13383 -> node13384 [color="black"]
    node13384_name [shape=none, label=<<font color="black">Block[13384]</font>>]
    node13384_name -> node13384 [arrowhead=none, color="black", style=dashed]
    node13384 [shape=box, label=<<font color="black">[0] let pos = [? %4]<BR ALIGN="LEFT"/>[1] assert (|| (! (= position undefined)) (= pos 0))<BR ALIGN="LEFT"/>[2] let len = S.length<BR ALIGN="LEFT"/>[3] let start = (clamp pos 0 len)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13384 -> node13385 [color="black"]
    node13385_name [shape=none, label=<<font color="black">Call[13385]</font>>]
    node13385_name -> node13385 [arrowhead=none, color="black", style=dashed]
    node13385 [shape=cds, label=<<font color="black">%5 = clo&lt;StringIndexOf&gt;(S, searchStr, start)</font>> color="black" fillcolor="white", style=filled]
    node13385 -> node13386 [color="black"]
    node13386_name [shape=none, label=<<font color="black">Block[13386]</font>>]
    node13386_name -> node13386 [arrowhead=none, color="black", style=dashed]
    node13386 [shape=box, label=<<font color="black">[0] let index = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13386 -> node13387 [color="black"]
    node13387_name [shape=none, label=<<font color="black">Branch[13387]</font>>]
    node13387_name -> node13387 [arrowhead=none, color="black", style=dashed]
    node13387 [shape=diamond, label=<<font color="black">(! (= index (- 1)))</font>> color="black" fillcolor="white", style=filled]
    node13387 -> node13388 [label=<<font color="black">true</font>> color="black"]
    node13387 -> node13389 [label=<<font color="black">false</font>> color="black"]
    node13388_name [shape=none, label=<<font color="black">Block[13388]</font>>]
    node13388_name -> node13388 [arrowhead=none, color="black", style=dashed]
    node13388 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13388 -> cluster2174_exit [color="black"]
    node13389_name [shape=none, label=<<font color="black">Block[13389]</font>>]
    node13389_name -> node13389 [arrowhead=none, color="black", style=dashed]
    node13389 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13389 -> cluster2174_exit [color="black"]
  }
}