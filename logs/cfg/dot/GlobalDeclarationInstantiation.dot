digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1870 {
    label = "def GlobalDeclarationInstantiation(script: Ast[ScriptBody], env: GlobalEnvironmentRecord): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1870_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1870_entry_name -> cluster1870_entry [arrowhead=none, color="black", style=dashed]
    cluster1870_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1870_entry -> node9988 [color="black"]
    cluster1870_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1870_exit_name -> cluster1870_exit [arrowhead=none, color="black", style=dashed]
    cluster1870_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node9988_name [shape=none, label=<<font color="black">Call[9988]</font>>]
    node9988_name -> node9988 [arrowhead=none, color="black", style=dashed]
    node9988 [shape=cds, label=<<font color="black">%0 = script-&gt;LexicallyDeclaredNames()</font>> color="black" fillcolor="white", style=filled]
    node9988 -> node9989 [color="black"]
    node9989_name [shape=none, label=<<font color="black">Block[9989]</font>>]
    node9989_name -> node9989 [arrowhead=none, color="black", style=dashed]
    node9989 [shape=box, label=<<font color="black">[0] let lexNames = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9989 -> node9990 [color="black"]
    node9990_name [shape=none, label=<<font color="black">Call[9990]</font>>]
    node9990_name -> node9990 [arrowhead=none, color="black", style=dashed]
    node9990 [shape=cds, label=<<font color="black">%1 = script-&gt;VarDeclaredNames()</font>> color="black" fillcolor="white", style=filled]
    node9990 -> node9991 [color="black"]
    node9991_name [shape=none, label=<<font color="black">Block[9991]</font>>]
    node9991_name -> node9991 [arrowhead=none, color="black", style=dashed]
    node9991 [shape=box, label=<<font color="black">[0] let varNames = %1<BR ALIGN="LEFT"/>[1] %3 = lexNames<BR ALIGN="LEFT"/>[2] %2 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9991 -> node9992 [color="black"]
    node9992_name [shape=none, label=<<font color="black">Branch[9992]</font>>]
    node9992_name -> node9992 [arrowhead=none, color="black", style=dashed]
    node9992 [shape=diamond, label=<<font color="black">(&lt; %2 %3.length)</font>> color="black" fillcolor="white", style=filled]
    node9992 -> node9993 [label=<<font color="black">true</font>> color="black"]
    node9992 -> node10005 [label=<<font color="black">false</font>> color="black"]
    node9993_name [shape=none, label=<<font color="black">Block[9993]</font>>]
    node9993_name -> node9993 [arrowhead=none, color="black", style=dashed]
    node9993 [shape=box, label=<<font color="black">[0] let name = %3[%2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9993 -> node9994 [color="black"]
    node10005_name [shape=none, label=<<font color="black">Block[10005]</font>>]
    node10005_name -> node10005 [arrowhead=none, color="black", style=dashed]
    node10005 [shape=box, label=<<font color="black">[0] %8 = varNames<BR ALIGN="LEFT"/>[1] %7 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10005 -> node10006 [color="black"]
    node9994_name [shape=none, label=<<font color="black">Call[9994]</font>>]
    node9994_name -> node9994 [arrowhead=none, color="black", style=dashed]
    node9994 [shape=cds, label=<<font color="black">%4 = env-&gt;HasVarDeclaration(name)</font>> color="black" fillcolor="white", style=filled]
    node9994 -> node9995 [color="black"]
    node10006_name [shape=none, label=<<font color="black">Branch[10006]</font>>]
    node10006_name -> node10006 [arrowhead=none, color="black", style=dashed]
    node10006 [shape=diamond, label=<<font color="black">(&lt; %7 %8.length)</font>> color="black" fillcolor="white", style=filled]
    node10006 -> node10007 [label=<<font color="black">true</font>> color="black"]
    node10006 -> node10012 [label=<<font color="black">false</font>> color="black"]
    node9995_name [shape=none, label=<<font color="black">Branch[9995]</font>>]
    node9995_name -> node9995 [arrowhead=none, color="black", style=dashed]
    node9995 [shape=diamond, label=<<font color="black">(= %4 true)</font>> color="black" fillcolor="white", style=filled]
    node9995 -> node9996 [label=<<font color="black">true</font>> color="black"]
    node9995 -> node9997 [label=<<font color="black">false</font>> color="black"]
    node10007_name [shape=none, label=<<font color="black">Block[10007]</font>>]
    node10007_name -> node10007 [arrowhead=none, color="black", style=dashed]
    node10007 [shape=box, label=<<font color="black">[0] let name = %8[%7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10007 -> node10008 [color="black"]
    node10012_name [shape=none, label=<<font color="black">Call[10012]</font>>]
    node10012_name -> node10012 [arrowhead=none, color="black", style=dashed]
    node10012 [shape=cds, label=<<font color="black">%10 = script-&gt;VarScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node10012 -> node10013 [color="black"]
    node9996_name [shape=none, label=<<font color="black">Block[9996]</font>>]
    node9996_name -> node9996 [arrowhead=none, color="black", style=dashed]
    node9996 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#750])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9996 -> cluster1870_exit [color="black"]
    node9997_name [shape=none, label=<<font color="black">Call[9997]</font>>]
    node9997_name -> node9997 [arrowhead=none, color="black", style=dashed]
    node9997 [shape=cds, label=<<font color="black">%5 = env-&gt;HasLexicalDeclaration(name)</font>> color="black" fillcolor="white", style=filled]
    node9997 -> node9998 [color="black"]
    node10008_name [shape=none, label=<<font color="black">Call[10008]</font>>]
    node10008_name -> node10008 [arrowhead=none, color="black", style=dashed]
    node10008 [shape=cds, label=<<font color="black">%9 = env-&gt;HasLexicalDeclaration(name)</font>> color="black" fillcolor="white", style=filled]
    node10008 -> node10009 [color="black"]
    node10013_name [shape=none, label=<<font color="black">Block[10013]</font>>]
    node10013_name -> node10013 [arrowhead=none, color="black", style=dashed]
    node10013 [shape=box, label=<<font color="black">[0] let varDeclarations = %10<BR ALIGN="LEFT"/>[1] let functionsToInitialize = (new [])[#754]<BR ALIGN="LEFT"/>[2] let declaredFunctionNames = (new [])[#755]<BR ALIGN="LEFT"/>[3] %12 = varDeclarations<BR ALIGN="LEFT"/>[4] %11 = %12.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10013 -> node10014 [color="black"]
    node9998_name [shape=none, label=<<font color="black">Branch[9998]</font>>]
    node9998_name -> node9998 [arrowhead=none, color="black", style=dashed]
    node9998 [shape=diamond, label=<<font color="black">(= %5 true)</font>> color="black" fillcolor="white", style=filled]
    node9998 -> node9999 [label=<<font color="black">true</font>> color="black"]
    node9998 -> node10000 [label=<<font color="black">false</font>> color="black"]
    node10009_name [shape=none, label=<<font color="black">Branch[10009]</font>>]
    node10009_name -> node10009 [arrowhead=none, color="black", style=dashed]
    node10009 [shape=diamond, label=<<font color="black">(= %9 true)</font>> color="black" fillcolor="white", style=filled]
    node10009 -> node10010 [label=<<font color="black">true</font>> color="black"]
    node10009 -> node10011 [label=<<font color="black">false</font>> color="black"]
    node10014_name [shape=none, label=<<font color="black">Branch[10014]</font>>]
    node10014_name -> node10014 [arrowhead=none, color="black", style=dashed]
    node10014 [shape=diamond, label=<<font color="black">(&lt; 0 %11)</font>> color="black" fillcolor="white", style=filled]
    node10014 -> node10015 [label=<<font color="black">true</font>> color="black"]
    node10014 -> node10026 [label=<<font color="black">false</font>> color="black"]
    node9999_name [shape=none, label=<<font color="black">Block[9999]</font>>]
    node9999_name -> node9999 [arrowhead=none, color="black", style=dashed]
    node9999 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#751])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9999 -> cluster1870_exit [color="black"]
    node10000_name [shape=none, label=<<font color="black">Call[10000]</font>>]
    node10000_name -> node10000 [arrowhead=none, color="black", style=dashed]
    node10000 [shape=cds, label=<<font color="black">%6 = env-&gt;HasRestrictedGlobalProperty(name)</font>> color="black" fillcolor="white", style=filled]
    node10000 -> node10001 [color="black"]
    node10010_name [shape=none, label=<<font color="black">Block[10010]</font>>]
    node10010_name -> node10010 [arrowhead=none, color="black", style=dashed]
    node10010 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#753])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10010 -> cluster1870_exit [color="black"]
    node10011_name [shape=none, label=<<font color="black">Block[10011]</font>>]
    node10011_name -> node10011 [arrowhead=none, color="black", style=dashed]
    node10011 [shape=box, label=<<font color="black">[0] %7 = (+ %7 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10011 -> node10006 [color="black"]
    node10015_name [shape=none, label=<<font color="black">Block[10015]</font>>]
    node10015_name -> node10015 [arrowhead=none, color="black", style=dashed]
    node10015 [shape=box, label=<<font color="black">[0] %11 = (- %11 1)<BR ALIGN="LEFT"/>[1] let d = %12[%11]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10015 -> node10016 [color="black"]
    node10026_name [shape=none, label=<<font color="black">Block[10026]</font>>]
    node10026_name -> node10026 [arrowhead=none, color="black", style=dashed]
    node10026 [shape=box, label=<<font color="black">[0] let declaredVarNames = (new [])[#757]<BR ALIGN="LEFT"/>[1] %16 = varDeclarations<BR ALIGN="LEFT"/>[2] %15 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10026 -> node10027 [color="black"]
    node10001_name [shape=none, label=<<font color="black">Block[10001]</font>>]
    node10001_name -> node10001 [arrowhead=none, color="black", style=dashed]
    node10001 [shape=box, label=<<font color="black">[0] let hasRestrictedGlobal = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10001 -> node10002 [color="black"]
    node10016_name [shape=none, label=<<font color="black">Branch[10016]</font>>]
    node10016_name -> node10016 [arrowhead=none, color="black", style=dashed]
    node10016 [shape=diamond, label=<<font color="black">(! (|| (|| (? d: &quot;VariableDeclaration&quot;) (? d: &quot;ForBinding&quot;)) (? d: &quot;BindingIdentifier&quot;)))</font>> color="black" fillcolor="white", style=filled]
    node10016 -> node10017 [label=<<font color="black">true</font>> color="black"]
    node10016 -> node10014 [label=<<font color="black">false</font>> color="black"]
    node10027_name [shape=none, label=<<font color="black">Branch[10027]</font>>]
    node10027_name -> node10027 [arrowhead=none, color="black", style=dashed]
    node10027 [shape=diamond, label=<<font color="black">(&lt; %15 %16.length)</font>> color="black" fillcolor="white", style=filled]
    node10027 -> node10028 [label=<<font color="black">true</font>> color="black"]
    node10027 -> node10043 [label=<<font color="black">false</font>> color="black"]
    node10002_name [shape=none, label=<<font color="black">Branch[10002]</font>>]
    node10002_name -> node10002 [arrowhead=none, color="black", style=dashed]
    node10002 [shape=diamond, label=<<font color="black">(= hasRestrictedGlobal true)</font>> color="black" fillcolor="white", style=filled]
    node10002 -> node10003 [label=<<font color="black">true</font>> color="black"]
    node10002 -> node10004 [label=<<font color="black">false</font>> color="black"]
    node10017_name [shape=none, label=<<font color="black">Block[10017]</font>>]
    node10017_name -> node10017 [arrowhead=none, color="black", style=dashed]
    node10017 [shape=box, label=<<font color="black">[0] assert (|| (|| (|| (? d: &quot;FunctionDeclaration&quot;) (? d: &quot;GeneratorDeclaration&quot;)) (? d: &quot;AsyncFunctionDeclaration&quot;)) (? d: &quot;AsyncGeneratorDeclaration&quot;))<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10017 -> node10018 [color="black"]
    node10028_name [shape=none, label=<<font color="black">Block[10028]</font>>]
    node10028_name -> node10028 [arrowhead=none, color="black", style=dashed]
    node10028 [shape=box, label=<<font color="black">[0] let d = %16[%15]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10028 -> node10029 [color="black"]
    node10043_name [shape=none, label=<<font color="black">Block[10043]</font>>]
    node10043_name -> node10043 [arrowhead=none, color="black", style=dashed]
    node10043 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10043 -> node10044 [color="black"]
    node10003_name [shape=none, label=<<font color="black">Block[10003]</font>>]
    node10003_name -> node10003 [arrowhead=none, color="black", style=dashed]
    node10003 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#752])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10003 -> cluster1870_exit [color="black"]
    node10004_name [shape=none, label=<<font color="black">Block[10004]</font>>]
    node10004_name -> node10004 [arrowhead=none, color="black", style=dashed]
    node10004 [shape=box, label=<<font color="black">[0] %2 = (+ %2 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10004 -> node9992 [color="black"]
    node10018_name [shape=none, label=<<font color="black">Call[10018]</font>>]
    node10018_name -> node10018 [arrowhead=none, color="black", style=dashed]
    node10018 [shape=cds, label=<<font color="black">%13 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10018 -> node10019 [color="black"]
    node10029_name [shape=none, label=<<font color="black">Branch[10029]</font>>]
    node10029_name -> node10029 [arrowhead=none, color="black", style=dashed]
    node10029 [shape=diamond, label=<<font color="black">(|| (|| (? d: &quot;VariableDeclaration&quot;) (? d: &quot;ForBinding&quot;)) (? d: &quot;BindingIdentifier&quot;))</font>> color="black" fillcolor="white", style=filled]
    node10029 -> node10030 [label=<<font color="black">true</font>> color="black"]
    node10029 -> node10042 [label=<<font color="black">false</font>> color="black"]
    node10044_name [shape=none, label=<<font color="black">Call[10044]</font>>]
    node10044_name -> node10044 [arrowhead=none, color="black", style=dashed]
    node10044 [shape=cds, label=<<font color="black">%21 = script-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node10044 -> node10045 [color="black"]
    node10019_name [shape=none, label=<<font color="black">Block[10019]</font>>]
    node10019_name -> node10019 [arrowhead=none, color="black", style=dashed]
    node10019 [shape=box, label=<<font color="black">[0] let fn = %13[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10019 -> node10020 [color="black"]
    node10030_name [shape=none, label=<<font color="black">Call[10030]</font>>]
    node10030_name -> node10030 [arrowhead=none, color="black", style=dashed]
    node10030 [shape=cds, label=<<font color="black">%19 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10030 -> node10031 [color="black"]
    node10042_name [shape=none, label=<<font color="black">Block[10042]</font>>]
    node10042_name -> node10042 [arrowhead=none, color="black", style=dashed]
    node10042 [shape=box, label=<<font color="black">[0] %15 = (+ %15 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10042 -> node10027 [color="black"]
    node10045_name [shape=none, label=<<font color="black">Block[10045]</font>>]
    node10045_name -> node10045 [arrowhead=none, color="black", style=dashed]
    node10045 [shape=box, label=<<font color="black">[0] let lexDeclarations = %21<BR ALIGN="LEFT"/>[1] let privateEnv = null<BR ALIGN="LEFT"/>[2] %23 = lexDeclarations<BR ALIGN="LEFT"/>[3] %22 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10045 -> node10046 [color="black"]
    node10020_name [shape=none, label=<<font color="black">Branch[10020]</font>>]
    node10020_name -> node10020 [arrowhead=none, color="black", style=dashed]
    node10020 [shape=diamond, label=<<font color="black">(! (contains declaredFunctionNames fn))</font>> color="black" fillcolor="white", style=filled]
    node10020 -> node10021 [label=<<font color="black">true</font>> color="black"]
    node10020 -> node10014 [label=<<font color="black">false</font>> color="black"]
    node10031_name [shape=none, label=<<font color="black">Block[10031]</font>>]
    node10031_name -> node10031 [arrowhead=none, color="black", style=dashed]
    node10031 [shape=box, label=<<font color="black">[0] %18 = %19<BR ALIGN="LEFT"/>[1] %17 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10031 -> node10032 [color="black"]
    node10046_name [shape=none, label=<<font color="black">Branch[10046]</font>>]
    node10046_name -> node10046 [arrowhead=none, color="black", style=dashed]
    node10046 [shape=diamond, label=<<font color="black">(&lt; %22 %23.length)</font>> color="black" fillcolor="white", style=filled]
    node10046 -> node10047 [label=<<font color="black">true</font>> color="black"]
    node10046 -> node10060 [label=<<font color="black">false</font>> color="black"]
    node10021_name [shape=none, label=<<font color="black">Call[10021]</font>>]
    node10021_name -> node10021 [arrowhead=none, color="black", style=dashed]
    node10021 [shape=cds, label=<<font color="black">%14 = env-&gt;CanDeclareGlobalFunction(fn)</font>> color="black" fillcolor="white", style=filled]
    node10021 -> node10022 [color="black"]
    node10032_name [shape=none, label=<<font color="black">Branch[10032]</font>>]
    node10032_name -> node10032 [arrowhead=none, color="black", style=dashed]
    node10032 [shape=diamond, label=<<font color="black">(&lt; %17 %18.length)</font>> color="black" fillcolor="white", style=filled]
    node10032 -> node10033 [label=<<font color="black">true</font>> color="black"]
    node10032 -> node10042 [label=<<font color="black">false</font>> color="black"]
    node10047_name [shape=none, label=<<font color="black">Block[10047]</font>>]
    node10047_name -> node10047 [arrowhead=none, color="black", style=dashed]
    node10047 [shape=box, label=<<font color="black">[0] let d = %23[%22]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10047 -> node10048 [color="black"]
    node10060_name [shape=none, label=<<font color="black">Block[10060]</font>>]
    node10060_name -> node10060 [arrowhead=none, color="black", style=dashed]
    node10060 [shape=box, label=<<font color="black">[0] %31 = functionsToInitialize<BR ALIGN="LEFT"/>[1] %30 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10060 -> node10061 [color="black"]
    node10022_name [shape=none, label=<<font color="black">Block[10022]</font>>]
    node10022_name -> node10022 [arrowhead=none, color="black", style=dashed]
    node10022 [shape=box, label=<<font color="black">[0] let fnDefinable = [? %14]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10022 -> node10023 [color="black"]
    node10033_name [shape=none, label=<<font color="black">Block[10033]</font>>]
    node10033_name -> node10033 [arrowhead=none, color="black", style=dashed]
    node10033 [shape=box, label=<<font color="black">[0] let vn = %18[%17]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10033 -> node10034 [color="black"]
    node10048_name [shape=none, label=<<font color="black">Call[10048]</font>>]
    node10048_name -> node10048 [arrowhead=none, color="black", style=dashed]
    node10048 [shape=cds, label=<<font color="black">%26 = d-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10048 -> node10049 [color="black"]
    node10061_name [shape=none, label=<<font color="black">Branch[10061]</font>>]
    node10061_name -> node10061 [arrowhead=none, color="black", style=dashed]
    node10061 [shape=diamond, label=<<font color="black">(&lt; %30 %31.length)</font>> color="black" fillcolor="white", style=filled]
    node10061 -> node10062 [label=<<font color="black">true</font>> color="black"]
    node10061 -> node10069 [label=<<font color="black">false</font>> color="black"]
    node10023_name [shape=none, label=<<font color="black">Branch[10023]</font>>]
    node10023_name -> node10023 [arrowhead=none, color="black", style=dashed]
    node10023 [shape=diamond, label=<<font color="black">(= fnDefinable false)</font>> color="black" fillcolor="white", style=filled]
    node10023 -> node10024 [label=<<font color="black">true</font>> color="black"]
    node10023 -> node10025 [label=<<font color="black">false</font>> color="black"]
    node10034_name [shape=none, label=<<font color="black">Branch[10034]</font>>]
    node10034_name -> node10034 [arrowhead=none, color="black", style=dashed]
    node10034 [shape=diamond, label=<<font color="black">(! (contains declaredFunctionNames vn))</font>> color="black" fillcolor="white", style=filled]
    node10034 -> node10035 [label=<<font color="black">true</font>> color="black"]
    node10034 -> node10041 [label=<<font color="black">false</font>> color="black"]
    node10049_name [shape=none, label=<<font color="black">Block[10049]</font>>]
    node10049_name -> node10049 [arrowhead=none, color="black", style=dashed]
    node10049 [shape=box, label=<<font color="black">[0] %25 = %26<BR ALIGN="LEFT"/>[1] %24 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10049 -> node10050 [color="black"]
    node10062_name [shape=none, label=<<font color="black">Block[10062]</font>>]
    node10062_name -> node10062 [arrowhead=none, color="black", style=dashed]
    node10062 [shape=box, label=<<font color="black">[0] let f = %31[%30]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10062 -> node10063 [color="black"]
    node10069_name [shape=none, label=<<font color="black">Block[10069]</font>>]
    node10069_name -> node10069 [arrowhead=none, color="black", style=dashed]
    node10069 [shape=box, label=<<font color="black">[0] %36 = declaredVarNames<BR ALIGN="LEFT"/>[1] %35 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10069 -> node10070 [color="black"]
    node10024_name [shape=none, label=<<font color="black">Block[10024]</font>>]
    node10024_name -> node10024 [arrowhead=none, color="black", style=dashed]
    node10024 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#756])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10024 -> cluster1870_exit [color="black"]
    node10025_name [shape=none, label=<<font color="black">Block[10025]</font>>]
    node10025_name -> node10025 [arrowhead=none, color="black", style=dashed]
    node10025 [shape=box, label=<<font color="black">[0] push declaredFunctionNames &lt; fn<BR ALIGN="LEFT"/>[1] push d &gt; functionsToInitialize<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10025 -> node10014 [color="black"]
    node10035_name [shape=none, label=<<font color="black">Call[10035]</font>>]
    node10035_name -> node10035 [arrowhead=none, color="black", style=dashed]
    node10035 [shape=cds, label=<<font color="black">%20 = env-&gt;CanDeclareGlobalVar(vn)</font>> color="black" fillcolor="white", style=filled]
    node10035 -> node10036 [color="black"]
    node10041_name [shape=none, label=<<font color="black">Block[10041]</font>>]
    node10041_name -> node10041 [arrowhead=none, color="black", style=dashed]
    node10041 [shape=box, label=<<font color="black">[0] %17 = (+ %17 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10041 -> node10032 [color="black"]
    node10050_name [shape=none, label=<<font color="black">Branch[10050]</font>>]
    node10050_name -> node10050 [arrowhead=none, color="black", style=dashed]
    node10050 [shape=diamond, label=<<font color="black">(&lt; %24 %25.length)</font>> color="black" fillcolor="white", style=filled]
    node10050 -> node10051 [label=<<font color="black">true</font>> color="black"]
    node10050 -> node10059 [label=<<font color="black">false</font>> color="black"]
    node10063_name [shape=none, label=<<font color="black">Call[10063]</font>>]
    node10063_name -> node10063 [arrowhead=none, color="black", style=dashed]
    node10063 [shape=cds, label=<<font color="black">%32 = f-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node10063 -> node10064 [color="black"]
    node10070_name [shape=none, label=<<font color="black">Branch[10070]</font>>]
    node10070_name -> node10070 [arrowhead=none, color="black", style=dashed]
    node10070 [shape=diamond, label=<<font color="black">(&lt; %35 %36.length)</font>> color="black" fillcolor="white", style=filled]
    node10070 -> node10071 [label=<<font color="black">true</font>> color="black"]
    node10070 -> node10074 [label=<<font color="black">false</font>> color="black"]
    node10036_name [shape=none, label=<<font color="black">Block[10036]</font>>]
    node10036_name -> node10036 [arrowhead=none, color="black", style=dashed]
    node10036 [shape=box, label=<<font color="black">[0] let vnDefinable = [? %20]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10036 -> node10037 [color="black"]
    node10051_name [shape=none, label=<<font color="black">Block[10051]</font>>]
    node10051_name -> node10051 [arrowhead=none, color="black", style=dashed]
    node10051 [shape=box, label=<<font color="black">[0] let dn = %25[%24]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10051 -> node10052 [color="black"]
    node10059_name [shape=none, label=<<font color="black">Block[10059]</font>>]
    node10059_name -> node10059 [arrowhead=none, color="black", style=dashed]
    node10059 [shape=box, label=<<font color="black">[0] %22 = (+ %22 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10059 -> node10046 [color="black"]
    node10064_name [shape=none, label=<<font color="black">Block[10064]</font>>]
    node10064_name -> node10064 [arrowhead=none, color="black", style=dashed]
    node10064 [shape=box, label=<<font color="black">[0] let fn = %32[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10064 -> node10065 [color="black"]
    node10071_name [shape=none, label=<<font color="black">Block[10071]</font>>]
    node10071_name -> node10071 [arrowhead=none, color="black", style=dashed]
    node10071 [shape=box, label=<<font color="black">[0] let vn = %36[%35]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10071 -> node10072 [color="black"]
    node10074_name [shape=none, label=<<font color="black">Block[10074]</font>>]
    node10074_name -> node10074 [arrowhead=none, color="black", style=dashed]
    node10074 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10074 -> cluster1870_exit [color="black"]
    node10037_name [shape=none, label=<<font color="black">Branch[10037]</font>>]
    node10037_name -> node10037 [arrowhead=none, color="black", style=dashed]
    node10037 [shape=diamond, label=<<font color="black">(= vnDefinable false)</font>> color="black" fillcolor="white", style=filled]
    node10037 -> node10038 [label=<<font color="black">true</font>> color="black"]
    node10037 -> node10039 [label=<<font color="black">false</font>> color="black"]
    node10052_name [shape=none, label=<<font color="black">Call[10052]</font>>]
    node10052_name -> node10052 [arrowhead=none, color="black", style=dashed]
    node10052 [shape=cds, label=<<font color="black">%27 = d-&gt;IsConstantDeclaration()</font>> color="black" fillcolor="white", style=filled]
    node10052 -> node10053 [color="black"]
    node10065_name [shape=none, label=<<font color="black">Call[10065]</font>>]
    node10065_name -> node10065 [arrowhead=none, color="black", style=dashed]
    node10065 [shape=cds, label=<<font color="black">%33 = f-&gt;InstantiateFunctionObject(env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node10065 -> node10066 [color="black"]
    node10072_name [shape=none, label=<<font color="black">Call[10072]</font>>]
    node10072_name -> node10072 [arrowhead=none, color="black", style=dashed]
    node10072 [shape=cds, label=<<font color="black">%37 = env-&gt;CreateGlobalVarBinding(vn, false)</font>> color="black" fillcolor="white", style=filled]
    node10072 -> node10073 [color="black"]
    node10038_name [shape=none, label=<<font color="black">Block[10038]</font>>]
    node10038_name -> node10038 [arrowhead=none, color="black", style=dashed]
    node10038 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#758])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10038 -> cluster1870_exit [color="black"]
    node10039_name [shape=none, label=<<font color="black">Branch[10039]</font>>]
    node10039_name -> node10039 [arrowhead=none, color="black", style=dashed]
    node10039 [shape=diamond, label=<<font color="black">(! (contains declaredVarNames vn))</font>> color="black" fillcolor="white", style=filled]
    node10039 -> node10040 [label=<<font color="black">true</font>> color="black"]
    node10039 -> node10041 [label=<<font color="black">false</font>> color="black"]
    node10053_name [shape=none, label=<<font color="black">Branch[10053]</font>>]
    node10053_name -> node10053 [arrowhead=none, color="black", style=dashed]
    node10053 [shape=diamond, label=<<font color="black">(= %27 true)</font>> color="black" fillcolor="white", style=filled]
    node10053 -> node10054 [label=<<font color="black">true</font>> color="black"]
    node10053 -> node10056 [label=<<font color="black">false</font>> color="black"]
    node10066_name [shape=none, label=<<font color="black">Block[10066]</font>>]
    node10066_name -> node10066 [arrowhead=none, color="black", style=dashed]
    node10066 [shape=box, label=<<font color="black">[0] let fo = %33<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10066 -> node10067 [color="black"]
    node10073_name [shape=none, label=<<font color="black">Block[10073]</font>>]
    node10073_name -> node10073 [arrowhead=none, color="black", style=dashed]
    node10073 [shape=box, label=<<font color="black">[0] [? %37]<BR ALIGN="LEFT"/>[1] %35 = (+ %35 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10073 -> node10070 [color="black"]
    node10040_name [shape=none, label=<<font color="black">Block[10040]</font>>]
    node10040_name -> node10040 [arrowhead=none, color="black", style=dashed]
    node10040 [shape=box, label=<<font color="black">[0] push declaredVarNames &lt; vn<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10040 -> node10041 [color="black"]
    node10054_name [shape=none, label=<<font color="black">Call[10054]</font>>]
    node10054_name -> node10054 [arrowhead=none, color="black", style=dashed]
    node10054 [shape=cds, label=<<font color="black">%28 = env-&gt;CreateImmutableBinding(dn, true)</font>> color="black" fillcolor="white", style=filled]
    node10054 -> node10055 [color="black"]
    node10056_name [shape=none, label=<<font color="black">Call[10056]</font>>]
    node10056_name -> node10056 [arrowhead=none, color="black", style=dashed]
    node10056 [shape=cds, label=<<font color="black">%29 = env-&gt;CreateMutableBinding(dn, false)</font>> color="black" fillcolor="white", style=filled]
    node10056 -> node10057 [color="black"]
    node10067_name [shape=none, label=<<font color="black">Call[10067]</font>>]
    node10067_name -> node10067 [arrowhead=none, color="black", style=dashed]
    node10067 [shape=cds, label=<<font color="black">%34 = env-&gt;CreateGlobalFunctionBinding(fn, fo, false)</font>> color="black" fillcolor="white", style=filled]
    node10067 -> node10068 [color="black"]
    node10055_name [shape=none, label=<<font color="black">Block[10055]</font>>]
    node10055_name -> node10055 [arrowhead=none, color="black", style=dashed]
    node10055 [shape=box, label=<<font color="black">[0] [? %28]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10055 -> node10058 [color="black"]
    node10057_name [shape=none, label=<<font color="black">Block[10057]</font>>]
    node10057_name -> node10057 [arrowhead=none, color="black", style=dashed]
    node10057 [shape=box, label=<<font color="black">[0] [? %29]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10057 -> node10058 [color="black"]
    node10068_name [shape=none, label=<<font color="black">Block[10068]</font>>]
    node10068_name -> node10068 [arrowhead=none, color="black", style=dashed]
    node10068 [shape=box, label=<<font color="black">[0] [? %34]<BR ALIGN="LEFT"/>[1] %30 = (+ %30 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10068 -> node10061 [color="black"]
    node10058_name [shape=none, label=<<font color="black">Block[10058]</font>>]
    node10058_name -> node10058 [arrowhead=none, color="black", style=dashed]
    node10058 [shape=box, label=<<font color="black">[0] %24 = (+ %24 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10058 -> node10050 [color="black"]
  }
}