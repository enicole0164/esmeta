digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2069 {
    label = "def <BUILTIN>:INTRINSICS.BigInt(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2069_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2069_entry_name -> cluster2069_entry [arrowhead=none, color="black", style=dashed]
    cluster2069_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2069_entry -> node11938 [color="black"]
    cluster2069_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2069_exit_name -> cluster2069_exit [arrowhead=none, color="black", style=dashed]
    cluster2069_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11938_name [shape=none, label=<<font color="black">Branch[11938]</font>>]
    node11938_name -> node11938 [arrowhead=none, color="black", style=dashed]
    node11938 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11938 -> node11939 [label=<<font color="black">true</font>> color="black"]
    node11938 -> node11940 [label=<<font color="black">false</font>> color="black"]
    node11939_name [shape=none, label=<<font color="black">Block[11939]</font>>]
    node11939_name -> node11939 [arrowhead=none, color="black", style=dashed]
    node11939 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11939 -> node11941 [color="black"]
    node11940_name [shape=none, label=<<font color="black">Block[11940]</font>>]
    node11940_name -> node11940 [arrowhead=none, color="black", style=dashed]
    node11940 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11940 -> node11941 [color="black"]
    node11941_name [shape=none, label=<<font color="black">Branch[11941]</font>>]
    node11941_name -> node11941 [arrowhead=none, color="black", style=dashed]
    node11941 [shape=diamond, label=<<font color="black">(! (= NewTarget undefined))</font>> color="black" fillcolor="white", style=filled]
    node11941 -> node11942 [label=<<font color="black">true</font>> color="black"]
    node11941 -> node11943 [label=<<font color="black">false</font>> color="black"]
    node11942_name [shape=none, label=<<font color="black">Block[11942]</font>>]
    node11942_name -> node11942 [arrowhead=none, color="black", style=dashed]
    node11942 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#931])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11942 -> cluster2069_exit [color="black"]
    node11943_name [shape=none, label=<<font color="black">Call[11943]</font>>]
    node11943_name -> node11943 [arrowhead=none, color="black", style=dashed]
    node11943 [shape=cds, label=<<font color="black">%0 = clo&lt;ToPrimitive&gt;(value, ~number~)</font>> color="black" fillcolor="white", style=filled]
    node11943 -> node11944 [color="black"]
    node11944_name [shape=none, label=<<font color="black">Block[11944]</font>>]
    node11944_name -> node11944 [arrowhead=none, color="black", style=dashed]
    node11944 [shape=box, label=<<font color="black">[0] let prim = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11944 -> node11945 [color="black"]
    node11945_name [shape=none, label=<<font color="black">Branch[11945]</font>>]
    node11945_name -> node11945 [arrowhead=none, color="black", style=dashed]
    node11945 [shape=diamond, label=<<font color="black">(= (typeof prim) @Number)</font>> color="black" fillcolor="white", style=filled]
    node11945 -> node11946 [label=<<font color="black">true</font>> color="black"]
    node11945 -> node11948 [label=<<font color="black">false</font>> color="black"]
    node11946_name [shape=none, label=<<font color="black">Call[11946]</font>>]
    node11946_name -> node11946 [arrowhead=none, color="black", style=dashed]
    node11946 [shape=cds, label=<<font color="black">%1 = clo&lt;NumberToBigInt&gt;(prim)</font>> color="black" fillcolor="white", style=filled]
    node11946 -> node11947 [color="black"]
    node11948_name [shape=none, label=<<font color="black">Call[11948]</font>>]
    node11948_name -> node11948 [arrowhead=none, color="black", style=dashed]
    node11948 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBigInt&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node11948 -> node11949 [color="black"]
    node11947_name [shape=none, label=<<font color="black">Block[11947]</font>>]
    node11947_name -> node11947 [arrowhead=none, color="black", style=dashed]
    node11947 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11947 -> cluster2069_exit [color="black"]
    node11949_name [shape=none, label=<<font color="black">Block[11949]</font>>]
    node11949_name -> node11949 [arrowhead=none, color="black", style=dashed]
    node11949 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11949 -> cluster2069_exit [color="black"]
  }
}