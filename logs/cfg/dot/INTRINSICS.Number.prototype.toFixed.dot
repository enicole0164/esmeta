digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2065 {
    label = "def <BUILTIN>:INTRINSICS.Number.prototype.toFixed(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2065_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2065_entry_name -> cluster2065_entry [arrowhead=none, color="black", style=dashed]
    cluster2065_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2065_entry -> node11856 [color="black"]
    cluster2065_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2065_exit_name -> cluster2065_exit [arrowhead=none, color="black", style=dashed]
    cluster2065_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11856_name [shape=none, label=<<font color="black">Branch[11856]</font>>]
    node11856_name -> node11856 [arrowhead=none, color="black", style=dashed]
    node11856 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11856 -> node11857 [label=<<font color="black">true</font>> color="black"]
    node11856 -> node11858 [label=<<font color="black">false</font>> color="black"]
    node11857_name [shape=none, label=<<font color="black">Block[11857]</font>>]
    node11857_name -> node11857 [arrowhead=none, color="black", style=dashed]
    node11857 [shape=box, label=<<font color="black">[0] let fractionDigits = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11857 -> node11859 [color="black"]
    node11858_name [shape=none, label=<<font color="black">Block[11858]</font>>]
    node11858_name -> node11858 [arrowhead=none, color="black", style=dashed]
    node11858 [shape=box, label=<<font color="black">[0] let fractionDigits = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11858 -> node11859 [color="black"]
    node11859_name [shape=none, label=<<font color="black">Call[11859]</font>>]
    node11859_name -> node11859 [arrowhead=none, color="black", style=dashed]
    node11859 [shape=cds, label=<<font color="black">%0 = clo&lt;thisNumberValue&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node11859 -> node11860 [color="black"]
    node11860_name [shape=none, label=<<font color="black">Block[11860]</font>>]
    node11860_name -> node11860 [arrowhead=none, color="black", style=dashed]
    node11860 [shape=box, label=<<font color="black">[0] let x = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11860 -> node11861 [color="black"]
    node11861_name [shape=none, label=<<font color="black">Call[11861]</font>>]
    node11861_name -> node11861 [arrowhead=none, color="black", style=dashed]
    node11861 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIntegerOrInfinity&gt;(fractionDigits)</font>> color="black" fillcolor="white", style=filled]
    node11861 -> node11862 [color="black"]
    node11862_name [shape=none, label=<<font color="black">Block[11862]</font>>]
    node11862_name -> node11862 [arrowhead=none, color="black", style=dashed]
    node11862 [shape=box, label=<<font color="black">[0] let f = [? %1]<BR ALIGN="LEFT"/>[1] assert (|| (! (= fractionDigits undefined)) (= f 0))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11862 -> node11863 [color="black"]
    node11863_name [shape=none, label=<<font color="black">Branch[11863]</font>>]
    node11863_name -> node11863 [arrowhead=none, color="black", style=dashed]
    node11863 [shape=diamond, label=<<font color="black">(|| (= f NaN) (|| (= f +INF) (= f -INF)))</font>> color="black" fillcolor="white", style=filled]
    node11863 -> node11864 [label=<<font color="black">true</font>> color="black"]
    node11863 -> node11865 [label=<<font color="black">false</font>> color="black"]
    node11864_name [shape=none, label=<<font color="black">Block[11864]</font>>]
    node11864_name -> node11864 [arrowhead=none, color="black", style=dashed]
    node11864 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#927])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11864 -> cluster2065_exit [color="black"]
    node11865_name [shape=none, label=<<font color="black">Branch[11865]</font>>]
    node11865_name -> node11865 [arrowhead=none, color="black", style=dashed]
    node11865 [shape=diamond, label=<<font color="black">(|| (&lt; f 0) (&lt; 100 f))</font>> color="black" fillcolor="white", style=filled]
    node11865 -> node11866 [label=<<font color="black">true</font>> color="black"]
    node11865 -> node11867 [label=<<font color="black">false</font>> color="black"]
    node11866_name [shape=none, label=<<font color="black">Block[11866]</font>>]
    node11866_name -> node11866 [arrowhead=none, color="black", style=dashed]
    node11866 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#928])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11866 -> cluster2065_exit [color="black"]
    node11867_name [shape=none, label=<<font color="black">Branch[11867]</font>>]
    node11867_name -> node11867 [arrowhead=none, color="black", style=dashed]
    node11867 [shape=diamond, label=<<font color="black">(|| (= x NaN) (|| (= x +INF) (= x -INF)))</font>> color="black" fillcolor="white", style=filled]
    node11867 -> node11868 [label=<<font color="black">true</font>> color="black"]
    node11867 -> node11870 [label=<<font color="black">false</font>> color="black"]
    node11868_name [shape=none, label=<<font color="black">Call[11868]</font>>]
    node11868_name -> node11868 [arrowhead=none, color="black", style=dashed]
    node11868 [shape=cds, label=<<font color="black">%2 = clo&lt;Number::toString&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node11868 -> node11869 [color="black"]
    node11870_name [shape=none, label=<<font color="black">Block[11870]</font>>]
    node11870_name -> node11870 [arrowhead=none, color="black", style=dashed]
    node11870 [shape=box, label=<<font color="black">[0] x = ([math] x)<BR ALIGN="LEFT"/>[1] let s = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11870 -> node11871 [color="black"]
    node11869_name [shape=none, label=<<font color="black">Block[11869]</font>>]
    node11869_name -> node11869 [arrowhead=none, color="black", style=dashed]
    node11869 [shape=box, label=<<font color="black">[0] return %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11869 -> cluster2065_exit [color="black"]
    node11871_name [shape=none, label=<<font color="black">Branch[11871]</font>>]
    node11871_name -> node11871 [arrowhead=none, color="black", style=dashed]
    node11871 [shape=diamond, label=<<font color="black">(&lt; x 0)</font>> color="black" fillcolor="white", style=filled]
    node11871 -> node11872 [label=<<font color="black">true</font>> color="black"]
    node11871 -> node11873 [label=<<font color="black">false</font>> color="black"]
    node11872_name [shape=none, label=<<font color="black">Block[11872]</font>>]
    node11872_name -> node11872 [arrowhead=none, color="black", style=dashed]
    node11872 [shape=box, label=<<font color="black">[0] s = &quot;-&quot;<BR ALIGN="LEFT"/>[1] x = (- x)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11872 -> node11873 [color="black"]
    node11873_name [shape=none, label=<<font color="black">Branch[11873]</font>>]
    node11873_name -> node11873 [arrowhead=none, color="black", style=dashed]
    node11873 [shape=diamond, label=<<font color="black">(! (&lt; x (** 10 21)))</font>> color="black" fillcolor="white", style=filled]
    node11873 -> node11874 [label=<<font color="black">true</font>> color="black"]
    node11873 -> node11876 [label=<<font color="black">false</font>> color="black"]
    node11874_name [shape=none, label=<<font color="black">Call[11874]</font>>]
    node11874_name -> node11874 [arrowhead=none, color="black", style=dashed]
    node11874 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] x))</font>> color="black" fillcolor="white", style=filled]
    node11874 -> node11875 [color="black"]
    node11876_name [shape=none, label=<<font color="black">Block[11876]</font>>]
    node11876_name -> node11876 [arrowhead=none, color="black", style=dashed]
    node11876 [shape=box, label=<<font color="black">[0] (yet &quot;Let _n_ be an integer for which _n_ / 10&lt;sup&gt;_f_&lt;/sup&gt; - _x_ is as close to zero as possible. If there are two such _n_, pick the larger _n_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11876 -> node11877 [color="black"]
    node11875_name [shape=none, label=<<font color="black">Block[11875]</font>>]
    node11875_name -> node11875 [arrowhead=none, color="black", style=dashed]
    node11875 [shape=box, label=<<font color="black">[0] let m = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11875 -> node11885 [color="black"]
    node11877_name [shape=none, label=<<font color="black">Branch[11877]</font>>]
    node11877_name -> node11877 [arrowhead=none, color="black", style=dashed]
    node11877 [shape=diamond, label=<<font color="black">(== n 0)</font>> color="black" fillcolor="white", style=filled]
    node11877 -> node11878 [label=<<font color="black">true</font>> color="black"]
    node11877 -> node11879 [label=<<font color="black">false</font>> color="black"]
    node11885_name [shape=none, label=<<font color="black">Block[11885]</font>>]
    node11885_name -> node11885 [arrowhead=none, color="black", style=dashed]
    node11885 [shape=box, label=<<font color="black">[0] return (concat s m)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11885 -> cluster2065_exit [color="black"]
    node11878_name [shape=none, label=<<font color="black">Block[11878]</font>>]
    node11878_name -> node11878 [arrowhead=none, color="black", style=dashed]
    node11878 [shape=box, label=<<font color="black">[0] let m = &quot;0&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11878 -> node11880 [color="black"]
    node11879_name [shape=none, label=<<font color="black">Block[11879]</font>>]
    node11879_name -> node11879 [arrowhead=none, color="black", style=dashed]
    node11879 [shape=box, label=<<font color="black">[0] (yet &quot;let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11879 -> node11880 [color="black"]
    node11880_name [shape=none, label=<<font color="black">Branch[11880]</font>>]
    node11880_name -> node11880 [arrowhead=none, color="black", style=dashed]
    node11880 [shape=diamond, label=<<font color="black">(! (== f 0))</font>> color="black" fillcolor="white", style=filled]
    node11880 -> node11881 [label=<<font color="black">true</font>> color="black"]
    node11880 -> node11885 [label=<<font color="black">false</font>> color="black"]
    node11881_name [shape=none, label=<<font color="black">Block[11881]</font>>]
    node11881_name -> node11881 [arrowhead=none, color="black", style=dashed]
    node11881 [shape=box, label=<<font color="black">[0] let k = m.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11881 -> node11882 [color="black"]
    node11882_name [shape=none, label=<<font color="black">Branch[11882]</font>>]
    node11882_name -> node11882 [arrowhead=none, color="black", style=dashed]
    node11882 [shape=diamond, label=<<font color="black">(! (&lt; f k))</font>> color="black" fillcolor="white", style=filled]
    node11882 -> node11883 [label=<<font color="black">true</font>> color="black"]
    node11882 -> node11884 [label=<<font color="black">false</font>> color="black"]
    node11883_name [shape=none, label=<<font color="black">Block[11883]</font>>]
    node11883_name -> node11883 [arrowhead=none, color="black", style=dashed]
    node11883 [shape=box, label=<<font color="black">[0] (yet &quot;Let _z_ be the String value consisting of _f_ + 1 - _k_ occurrences of the code unit 0x0030 (DIGIT ZERO).&quot;)<BR ALIGN="LEFT"/>[1] m = (concat z m)<BR ALIGN="LEFT"/>[2] k = (+ f 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11883 -> node11884 [color="black"]
    node11884_name [shape=none, label=<<font color="black">Block[11884]</font>>]
    node11884_name -> node11884 [arrowhead=none, color="black", style=dashed]
    node11884 [shape=box, label=<<font color="black">[0] (yet &quot;Let _a_ be the first _k_ - _f_ code units of _m_.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _b_ be the other _f_ code units of _m_.&quot;)<BR ALIGN="LEFT"/>[2] m = (concat a &quot;.&quot; b)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11884 -> node11885 [color="black"]
  }
}