digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2613 {
    label = "def GeneratorValidate(generator: Unknown, generatorBrand: Unknown): Normal[Const[~completed~, ~suspendedStart~, ~suspendedYield~]] | Abrupt"
    style = rounded
    cluster2613_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2613_entry_name -> cluster2613_entry [arrowhead=none, color="black", style=dashed]
    cluster2613_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2613_entry -> node19340 [color="black"]
    cluster2613_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2613_exit_name -> cluster2613_exit [arrowhead=none, color="black", style=dashed]
    cluster2613_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19340_name [shape=none, label=<<font color="black">Call[19340]</font>>]
    node19340_name -> node19340 [arrowhead=none, color="black", style=dashed]
    node19340 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(generator, &quot;GeneratorState&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19340 -> node19341 [color="black"]
    node19341_name [shape=none, label=<<font color="black">Block[19341]</font>>]
    node19341_name -> node19341 [arrowhead=none, color="black", style=dashed]
    node19341 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19341 -> node19342 [color="black"]
    node19342_name [shape=none, label=<<font color="black">Call[19342]</font>>]
    node19342_name -> node19342 [arrowhead=none, color="black", style=dashed]
    node19342 [shape=cds, label=<<font color="black">%1 = clo&lt;RequireInternalSlot&gt;(generator, &quot;GeneratorBrand&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19342 -> node19343 [color="black"]
    node19343_name [shape=none, label=<<font color="black">Block[19343]</font>>]
    node19343_name -> node19343 [arrowhead=none, color="black", style=dashed]
    node19343 [shape=box, label=<<font color="black">[0] [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19343 -> node19344 [color="black"]
    node19344_name [shape=none, label=<<font color="black">Branch[19344]</font>>]
    node19344_name -> node19344 [arrowhead=none, color="black", style=dashed]
    node19344 [shape=diamond, label=<<font color="black">(! (= generator.GeneratorBrand generatorBrand))</font>> color="black" fillcolor="white", style=filled]
    node19344 -> node19345 [label=<<font color="black">true</font>> color="black"]
    node19344 -> node19346 [label=<<font color="black">false</font>> color="black"]
    node19345_name [shape=none, label=<<font color="black">Block[19345]</font>>]
    node19345_name -> node19345 [arrowhead=none, color="black", style=dashed]
    node19345 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1317])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19345 -> cluster2613_exit [color="black"]
    node19346_name [shape=none, label=<<font color="black">Block[19346]</font>>]
    node19346_name -> node19346 [arrowhead=none, color="black", style=dashed]
    node19346 [shape=box, label=<<font color="black">[0] assert (! (= generator.GeneratorContext absent))<BR ALIGN="LEFT"/>[1] let state = generator.GeneratorState<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19346 -> node19347 [color="black"]
    node19347_name [shape=none, label=<<font color="black">Branch[19347]</font>>]
    node19347_name -> node19347 [arrowhead=none, color="black", style=dashed]
    node19347 [shape=diamond, label=<<font color="black">(= state ~executing~)</font>> color="black" fillcolor="white", style=filled]
    node19347 -> node19348 [label=<<font color="black">true</font>> color="black"]
    node19347 -> node19349 [label=<<font color="black">false</font>> color="black"]
    node19348_name [shape=none, label=<<font color="black">Block[19348]</font>>]
    node19348_name -> node19348 [arrowhead=none, color="black", style=dashed]
    node19348 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1318])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19348 -> cluster2613_exit [color="black"]
    node19349_name [shape=none, label=<<font color="black">Block[19349]</font>>]
    node19349_name -> node19349 [arrowhead=none, color="black", style=dashed]
    node19349 [shape=box, label=<<font color="black">[0] return state<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19349 -> cluster2613_exit [color="black"]
  }
}