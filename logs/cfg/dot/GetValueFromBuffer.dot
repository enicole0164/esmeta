digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2479 {
    label = "def GetValueFromBuffer(arrayBuffer: Unknown["ArrayBufferOrSharedArrayBuffer"], byteIndex: Unknown["NonnegativeInteger"], type: Unknown["TypedArrayElementType"], isTypedArray: Boolean, order: Const[~SeqCst~, ~Unordered~], isLittleEndian?: Boolean): Number | BigInt"
    style = rounded
    cluster2479_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2479_entry_name -> cluster2479_entry [arrowhead=none, color="black", style=dashed]
    cluster2479_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2479_entry -> node17404 [color="black"]
    cluster2479_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2479_exit_name -> cluster2479_exit [arrowhead=none, color="black", style=dashed]
    cluster2479_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17404_name [shape=none, label=<<font color="black">Call[17404]</font>>]
    node17404_name -> node17404 [arrowhead=none, color="black", style=dashed]
    node17404 [shape=cds, label=<<font color="black">%0 = clo&lt;IsDetachedBuffer&gt;(arrayBuffer)</font>> color="black" fillcolor="white", style=filled]
    node17404 -> node17405 [color="black"]
    node17405_name [shape=none, label=<<font color="black">Block[17405]</font>>]
    node17405_name -> node17405 [arrowhead=none, color="black", style=dashed]
    node17405 [shape=box, label=<<font color="black">[0] assert (= %0 false)<BR ALIGN="LEFT"/>[1] assert (yet &quot;There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.&quot;)<BR ALIGN="LEFT"/>[2] let block = arrayBuffer.ArrayBufferData<BR ALIGN="LEFT"/>[3] (yet &quot;Let _elementSize_ be the Element Size value specified in &lt;emu-xref href=\&quot;#table-the-typedarray-constructors\&quot;&gt;&lt;/emu-xref&gt; for Element Type _type_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17405 -> node17406 [color="black"]
    node17406_name [shape=none, label=<<font color="black">Call[17406]</font>>]
    node17406_name -> node17406 [arrowhead=none, color="black", style=dashed]
    node17406 [shape=cds, label=<<font color="black">%1 = clo&lt;IsSharedArrayBuffer&gt;(arrayBuffer)</font>> color="black" fillcolor="white", style=filled]
    node17406 -> node17407 [color="black"]
    node17407_name [shape=none, label=<<font color="black">Branch[17407]</font>>]
    node17407_name -> node17407 [arrowhead=none, color="black", style=dashed]
    node17407 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node17407 -> node17408 [label=<<font color="black">true</font>> color="black"]
    node17407 -> node17416 [label=<<font color="black">false</font>> color="black"]
    node17408_name [shape=none, label=<<font color="black">Block[17408]</font>>]
    node17408_name -> node17408 [arrowhead=none, color="black", style=dashed]
    node17408 [shape=box, label=<<font color="black">[0] (yet &quot;Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().&quot;)<BR ALIGN="LEFT"/>[2] %2 = (= isTypedArray true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17408 -> node17409 [color="black"]
    node17416_name [shape=none, label=<<font color="black">Block[17416]</font>>]
    node17416_name -> node17416 [arrowhead=none, color="black", style=dashed]
    node17416 [shape=box, label=<<font color="black">[0] (yet &quot;let _rawValue_ be a List whose elements are bytes from _block_ at indices _byteIndex_ (inclusive) through _byteIndex_ + _elementSize_ (exclusive).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17416 -> node17417 [color="black"]
    node17409_name [shape=none, label=<<font color="black">Branch[17409]</font>>]
    node17409_name -> node17409 [arrowhead=none, color="black", style=dashed]
    node17409 [shape=diamond, label=<<font color="black">%2</font>> color="black" fillcolor="white", style=filled]
    node17409 -> node17410 [label=<<font color="black">true</font>> color="black"]
    node17409 -> node17412 [label=<<font color="black">false</font>> color="black"]
    node17417_name [shape=none, label=<<font color="black">Block[17417]</font>>]
    node17417_name -> node17417 [arrowhead=none, color="black", style=dashed]
    node17417 [shape=box, label=<<font color="black">[0] assert (= rawValue.length elementSize)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17417 -> node17418 [color="black"]
    node17410_name [shape=none, label=<<font color="black">Call[17410]</font>>]
    node17410_name -> node17410 [arrowhead=none, color="black", style=dashed]
    node17410 [shape=cds, label=<<font color="black">%3 = clo&lt;IsNoTearConfiguration&gt;(type, order)</font>> color="black" fillcolor="white", style=filled]
    node17410 -> node17411 [color="black"]
    node17412_name [shape=none, label=<<font color="black">Branch[17412]</font>>]
    node17412_name -> node17412 [arrowhead=none, color="black", style=dashed]
    node17412 [shape=diamond, label=<<font color="black">%2</font>> color="black" fillcolor="white", style=filled]
    node17412 -> node17413 [label=<<font color="black">true</font>> color="black"]
    node17412 -> node17414 [label=<<font color="black">false</font>> color="black"]
    node17418_name [shape=none, label=<<font color="black">Branch[17418]</font>>]
    node17418_name -> node17418 [arrowhead=none, color="black", style=dashed]
    node17418 [shape=diamond, label=<<font color="black">(= isLittleEndian absent)</font>> color="black" fillcolor="white", style=filled]
    node17418 -> node17419 [label=<<font color="black">true</font>> color="black"]
    node17418 -> node17420 [label=<<font color="black">false</font>> color="black"]
    node17411_name [shape=none, label=<<font color="black">Block[17411]</font>>]
    node17411_name -> node17411 [arrowhead=none, color="black", style=dashed]
    node17411 [shape=box, label=<<font color="black">[0] %2 = (= %3 true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17411 -> node17412 [color="black"]
    node17413_name [shape=none, label=<<font color="black">Block[17413]</font>>]
    node17413_name -> node17413 [arrowhead=none, color="black", style=dashed]
    node17413 [shape=box, label=<<font color="black">[0] let noTear = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17413 -> node17415 [color="black"]
    node17414_name [shape=none, label=<<font color="black">Block[17414]</font>>]
    node17414_name -> node17414 [arrowhead=none, color="black", style=dashed]
    node17414 [shape=box, label=<<font color="black">[0] let noTear = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17414 -> node17415 [color="black"]
    node17419_name [shape=none, label=<<font color="black">Block[17419]</font>>]
    node17419_name -> node17419 [arrowhead=none, color="black", style=dashed]
    node17419 [shape=box, label=<<font color="black">[0] (yet &quot;set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17419 -> node17420 [color="black"]
    node17420_name [shape=none, label=<<font color="black">Call[17420]</font>>]
    node17420_name -> node17420 [arrowhead=none, color="black", style=dashed]
    node17420 [shape=cds, label=<<font color="black">%4 = clo&lt;RawBytesToNumeric&gt;(type, rawValue, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17420 -> node17421 [color="black"]
    node17415_name [shape=none, label=<<font color="black">Block[17415]</font>>]
    node17415_name -> node17415 [arrowhead=none, color="black", style=dashed]
    node17415 [shape=box, label=<<font color="black">[0] (yet &quot;Let _rawValue_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.&quot;)<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] let readEvent = (new ReadSharedMemory(&quot;Order&quot; -&gt; order, &quot;NoTear&quot; -&gt; noTear, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; byteIndex, &quot;ElementSize&quot; -&gt; elementSize))[#1145]<BR ALIGN="LEFT"/>[3] push eventList &lt; readEvent<BR ALIGN="LEFT"/>[4] push execution.ChosenValues &lt; (new ChosenValueRecord(&quot;Event&quot; -&gt; readEvent, &quot;ChosenValue&quot; -&gt; rawValue))[#1146]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17415 -> node17417 [color="black"]
    node17421_name [shape=none, label=<<font color="black">Block[17421]</font>>]
    node17421_name -> node17421 [arrowhead=none, color="black", style=dashed]
    node17421 [shape=box, label=<<font color="black">[0] return %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17421 -> cluster2479_exit [color="black"]
  }
}