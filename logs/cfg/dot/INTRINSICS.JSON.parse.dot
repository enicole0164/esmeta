digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2545 {
    label = "def <BUILTIN>:INTRINSICS.JSON.parse(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2545_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2545_entry_name -> cluster2545_entry [arrowhead=none, color="black", style=dashed]
    cluster2545_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2545_entry -> node18278 [color="black"]
    cluster2545_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2545_exit_name -> cluster2545_exit [arrowhead=none, color="black", style=dashed]
    cluster2545_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18278_name [shape=none, label=<<font color="black">Branch[18278]</font>>]
    node18278_name -> node18278 [arrowhead=none, color="black", style=dashed]
    node18278 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18278 -> node18279 [label=<<font color="black">true</font>> color="black"]
    node18278 -> node18280 [label=<<font color="black">false</font>> color="black"]
    node18279_name [shape=none, label=<<font color="black">Block[18279]</font>>]
    node18279_name -> node18279 [arrowhead=none, color="black", style=dashed]
    node18279 [shape=box, label=<<font color="black">[0] let text = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18279 -> node18281 [color="black"]
    node18280_name [shape=none, label=<<font color="black">Block[18280]</font>>]
    node18280_name -> node18280 [arrowhead=none, color="black", style=dashed]
    node18280 [shape=box, label=<<font color="black">[0] let text = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18280 -> node18281 [color="black"]
    node18281_name [shape=none, label=<<font color="black">Branch[18281]</font>>]
    node18281_name -> node18281 [arrowhead=none, color="black", style=dashed]
    node18281 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18281 -> node18282 [label=<<font color="black">true</font>> color="black"]
    node18281 -> node18283 [label=<<font color="black">false</font>> color="black"]
    node18282_name [shape=none, label=<<font color="black">Block[18282]</font>>]
    node18282_name -> node18282 [arrowhead=none, color="black", style=dashed]
    node18282 [shape=box, label=<<font color="black">[0] let reviver = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18282 -> node18284 [color="black"]
    node18283_name [shape=none, label=<<font color="black">Block[18283]</font>>]
    node18283_name -> node18283 [arrowhead=none, color="black", style=dashed]
    node18283 [shape=box, label=<<font color="black">[0] let reviver = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18283 -> node18284 [color="black"]
    node18284_name [shape=none, label=<<font color="black">Call[18284]</font>>]
    node18284_name -> node18284 [arrowhead=none, color="black", style=dashed]
    node18284 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(text)</font>> color="black" fillcolor="white", style=filled]
    node18284 -> node18285 [color="black"]
    node18285_name [shape=none, label=<<font color="black">Block[18285]</font>>]
    node18285_name -> node18285 [arrowhead=none, color="black", style=dashed]
    node18285 [shape=box, label=<<font color="black">[0] let jsonString = [? %0]<BR ALIGN="LEFT"/>[1] (yet &quot;Parse StringToCodePoints(_jsonString_) as a JSON text as specified in ECMA-404. Throw a *SyntaxError* exception if it is not a valid JSON text as defined in that specification.&quot;)<BR ALIGN="LEFT"/>[2] let scriptString = (concat &quot;(&quot; jsonString &quot;);&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18285 -> node18286 [color="black"]
    node18286_name [shape=none, label=<<font color="black">Call[18286]</font>>]
    node18286_name -> node18286 [arrowhead=none, color="black", style=dashed]
    node18286 [shape=cds, label=<<font color="black">%1 = clo&lt;StringToCodePoints&gt;(scriptString)</font>> color="black" fillcolor="white", style=filled]
    node18286 -> node18287 [color="black"]
    node18287_name [shape=none, label=<<font color="black">Block[18287]</font>>]
    node18287_name -> node18287 [arrowhead=none, color="black", style=dashed]
    node18287 [shape=box, label=<<font color="black">[0] let script = (parse %1 (nt |Script|[]))<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] assert (? script: &quot;ParseNode&quot;)<BR ALIGN="LEFT"/>[3] (yet &quot;Let _completion_ be the result of &lt;emu-meta suppress-effects=\&quot;user-code\&quot;&gt;evaluating _script_&lt;/emu-meta&gt;.&quot;)<BR ALIGN="LEFT"/>[4] nop<BR ALIGN="LEFT"/>[5] let unfiltered = completion.Value<BR ALIGN="LEFT"/>[6] assert (yet &quot;_unfiltered_ is either a String, Number, Boolean, Null, or an Object that is defined by either an |ArrayLiteral| or an |ObjectLiteral|.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18287 -> node18288 [color="black"]
    node18288_name [shape=none, label=<<font color="black">Call[18288]</font>>]
    node18288_name -> node18288 [arrowhead=none, color="black", style=dashed]
    node18288 [shape=cds, label=<<font color="black">%2 = clo&lt;IsCallable&gt;(reviver)</font>> color="black" fillcolor="white", style=filled]
    node18288 -> node18289 [color="black"]
    node18289_name [shape=none, label=<<font color="black">Branch[18289]</font>>]
    node18289_name -> node18289 [arrowhead=none, color="black", style=dashed]
    node18289 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node18289 -> node18290 [label=<<font color="black">true</font>> color="black"]
    node18289 -> node18296 [label=<<font color="black">false</font>> color="black"]
    node18290_name [shape=none, label=<<font color="black">Call[18290]</font>>]
    node18290_name -> node18290 [arrowhead=none, color="black", style=dashed]
    node18290 [shape=cds, label=<<font color="black">%3 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Object.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node18290 -> node18291 [color="black"]
    node18296_name [shape=none, label=<<font color="black">Block[18296]</font>>]
    node18296_name -> node18296 [arrowhead=none, color="black", style=dashed]
    node18296 [shape=box, label=<<font color="black">[0] return unfiltered<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18296 -> cluster2545_exit [color="black"]
    node18291_name [shape=none, label=<<font color="black">Block[18291]</font>>]
    node18291_name -> node18291 [arrowhead=none, color="black", style=dashed]
    node18291 [shape=box, label=<<font color="black">[0] let root = %3<BR ALIGN="LEFT"/>[1] let rootName = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18291 -> node18292 [color="black"]
    node18292_name [shape=none, label=<<font color="black">Call[18292]</font>>]
    node18292_name -> node18292 [arrowhead=none, color="black", style=dashed]
    node18292 [shape=cds, label=<<font color="black">%4 = clo&lt;CreateDataPropertyOrThrow&gt;(root, rootName, unfiltered)</font>> color="black" fillcolor="white", style=filled]
    node18292 -> node18293 [color="black"]
    node18293_name [shape=none, label=<<font color="black">Block[18293]</font>>]
    node18293_name -> node18293 [arrowhead=none, color="black", style=dashed]
    node18293 [shape=box, label=<<font color="black">[0] [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18293 -> node18294 [color="black"]
    node18294_name [shape=none, label=<<font color="black">Call[18294]</font>>]
    node18294_name -> node18294 [arrowhead=none, color="black", style=dashed]
    node18294 [shape=cds, label=<<font color="black">%5 = clo&lt;InternalizeJSONProperty&gt;(root, rootName, reviver)</font>> color="black" fillcolor="white", style=filled]
    node18294 -> node18295 [color="black"]
    node18295_name [shape=none, label=<<font color="black">Block[18295]</font>>]
    node18295_name -> node18295 [arrowhead=none, color="black", style=dashed]
    node18295 [shape=box, label=<<font color="black">[0] return [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18295 -> cluster2545_exit [color="black"]
  }
}