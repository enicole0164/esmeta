digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1162 {
    label = "def <INTERNAL>:ProxyExoticObject.Construct(O: ProxyExoticObject, argumentsList: List[ESValue], newTarget: Unknown["Constructor"]): Normal[Object] | Abrupt"
    style = rounded
    cluster1162_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1162_entry_name -> cluster1162_entry [arrowhead=none, color="black", style=dashed]
    cluster1162_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1162_entry -> node5324 [color="black"]
    cluster1162_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1162_exit_name -> cluster1162_exit [arrowhead=none, color="black", style=dashed]
    cluster1162_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5324_name [shape=none, label=<<font color="black">Block[5324]</font>>]
    node5324_name -> node5324 [arrowhead=none, color="black", style=dashed]
    node5324 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5324 -> node5325 [color="black"]
    node5325_name [shape=none, label=<<font color="black">Branch[5325]</font>>]
    node5325_name -> node5325 [arrowhead=none, color="black", style=dashed]
    node5325 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5325 -> node5326 [label=<<font color="black">true</font>> color="black"]
    node5325 -> node5327 [label=<<font color="black">false</font>> color="black"]
    node5326_name [shape=none, label=<<font color="black">Block[5326]</font>>]
    node5326_name -> node5326 [arrowhead=none, color="black", style=dashed]
    node5326 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#535])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5326 -> cluster1162_exit [color="black"]
    node5327_name [shape=none, label=<<font color="black">Block[5327]</font>>]
    node5327_name -> node5327 [arrowhead=none, color="black", style=dashed]
    node5327 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5327 -> node5328 [color="black"]
    node5328_name [shape=none, label=<<font color="black">Call[5328]</font>>]
    node5328_name -> node5328 [arrowhead=none, color="black", style=dashed]
    node5328 [shape=cds, label=<<font color="black">%0 = clo&lt;IsConstructor&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5328 -> node5329 [color="black"]
    node5329_name [shape=none, label=<<font color="black">Block[5329]</font>>]
    node5329_name -> node5329 [arrowhead=none, color="black", style=dashed]
    node5329 [shape=box, label=<<font color="black">[0] assert (= %0 true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5329 -> node5330 [color="black"]
    node5330_name [shape=none, label=<<font color="black">Call[5330]</font>>]
    node5330_name -> node5330 [arrowhead=none, color="black", style=dashed]
    node5330 [shape=cds, label=<<font color="black">%1 = clo&lt;GetMethod&gt;(handler, &quot;construct&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5330 -> node5331 [color="black"]
    node5331_name [shape=none, label=<<font color="black">Block[5331]</font>>]
    node5331_name -> node5331 [arrowhead=none, color="black", style=dashed]
    node5331 [shape=box, label=<<font color="black">[0] let trap = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5331 -> node5332 [color="black"]
    node5332_name [shape=none, label=<<font color="black">Branch[5332]</font>>]
    node5332_name -> node5332 [arrowhead=none, color="black", style=dashed]
    node5332 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5332 -> node5333 [label=<<font color="black">true</font>> color="black"]
    node5332 -> node5335 [label=<<font color="black">false</font>> color="black"]
    node5333_name [shape=none, label=<<font color="black">Call[5333]</font>>]
    node5333_name -> node5333 [arrowhead=none, color="black", style=dashed]
    node5333 [shape=cds, label=<<font color="black">%2 = clo&lt;Construct&gt;(target, argumentsList, newTarget)</font>> color="black" fillcolor="white", style=filled]
    node5333 -> node5334 [color="black"]
    node5335_name [shape=none, label=<<font color="black">Call[5335]</font>>]
    node5335_name -> node5335 [arrowhead=none, color="black", style=dashed]
    node5335 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateArrayFromList&gt;(argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node5335 -> node5336 [color="black"]
    node5334_name [shape=none, label=<<font color="black">Block[5334]</font>>]
    node5334_name -> node5334 [arrowhead=none, color="black", style=dashed]
    node5334 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5334 -> cluster1162_exit [color="black"]
    node5336_name [shape=none, label=<<font color="black">Block[5336]</font>>]
    node5336_name -> node5336 [arrowhead=none, color="black", style=dashed]
    node5336 [shape=box, label=<<font color="black">[0] let argArray = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5336 -> node5337 [color="black"]
    node5337_name [shape=none, label=<<font color="black">Call[5337]</font>>]
    node5337_name -> node5337 [arrowhead=none, color="black", style=dashed]
    node5337 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(trap, handler, (new [target, argArray, newTarget])[#536])</font>> color="black" fillcolor="white", style=filled]
    node5337 -> node5338 [color="black"]
    node5338_name [shape=none, label=<<font color="black">Block[5338]</font>>]
    node5338_name -> node5338 [arrowhead=none, color="black", style=dashed]
    node5338 [shape=box, label=<<font color="black">[0] let newObj = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5338 -> node5339 [color="black"]
    node5339_name [shape=none, label=<<font color="black">Branch[5339]</font>>]
    node5339_name -> node5339 [arrowhead=none, color="black", style=dashed]
    node5339 [shape=diamond, label=<<font color="black">(! (= (typeof newObj) @Object))</font>> color="black" fillcolor="white", style=filled]
    node5339 -> node5340 [label=<<font color="black">true</font>> color="black"]
    node5339 -> node5341 [label=<<font color="black">false</font>> color="black"]
    node5340_name [shape=none, label=<<font color="black">Block[5340]</font>>]
    node5340_name -> node5340 [arrowhead=none, color="black", style=dashed]
    node5340 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#537])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5340 -> cluster1162_exit [color="black"]
    node5341_name [shape=none, label=<<font color="black">Block[5341]</font>>]
    node5341_name -> node5341 [arrowhead=none, color="black", style=dashed]
    node5341 [shape=box, label=<<font color="black">[0] return newObj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5341 -> cluster1162_exit [color="black"]
  }
}