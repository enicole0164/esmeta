digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1088 {
    label = "def <INTERNAL>:ECMAScriptFunctionObject.Construct(F: ECMAScriptFunctionObject, argumentsList: List[ESValue], newTarget: Unknown["Constructor"]): Normal[Object] | Abrupt"
    style = rounded
    cluster1088_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1088_entry_name -> cluster1088_entry [arrowhead=none, color="black", style=dashed]
    cluster1088_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1088_entry -> node4284 [color="black"]
    cluster1088_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1088_exit_name -> cluster1088_exit [arrowhead=none, color="black", style=dashed]
    cluster1088_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4284_name [shape=none, label=<<font color="black">Block[4284]</font>>]
    node4284_name -> node4284 [arrowhead=none, color="black", style=dashed]
    node4284 [shape=box, label=<<font color="black">[0] let callerContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/>[1] let kind = F.ConstructorKind<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4284 -> node4285 [color="black"]
    node4285_name [shape=none, label=<<font color="black">Branch[4285]</font>>]
    node4285_name -> node4285 [arrowhead=none, color="black", style=dashed]
    node4285 [shape=diamond, label=<<font color="black">(= kind ~base~)</font>> color="black" fillcolor="white", style=filled]
    node4285 -> node4286 [label=<<font color="black">true</font>> color="black"]
    node4285 -> node4288 [label=<<font color="black">false</font>> color="black"]
    node4286_name [shape=none, label=<<font color="black">Call[4286]</font>>]
    node4286_name -> node4286 [arrowhead=none, color="black", style=dashed]
    node4286 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryCreateFromConstructor&gt;(newTarget, &quot;%Object.prototype%&quot;)</font>> color="black" fillcolor="white", style=filled]
    node4286 -> node4287 [color="black"]
    node4288_name [shape=none, label=<<font color="black">Call[4288]</font>>]
    node4288_name -> node4288 [arrowhead=none, color="black", style=dashed]
    node4288 [shape=cds, label=<<font color="black">%1 = clo&lt;PrepareForOrdinaryCall&gt;(F, newTarget)</font>> color="black" fillcolor="white", style=filled]
    node4288 -> node4289 [color="black"]
    node4287_name [shape=none, label=<<font color="black">Block[4287]</font>>]
    node4287_name -> node4287 [arrowhead=none, color="black", style=dashed]
    node4287 [shape=box, label=<<font color="black">[0] let thisArgument = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4287 -> node4288 [color="black"]
    node4289_name [shape=none, label=<<font color="black">Block[4289]</font>>]
    node4289_name -> node4289 [arrowhead=none, color="black", style=dashed]
    node4289 [shape=box, label=<<font color="black">[0] let calleeContext = %1<BR ALIGN="LEFT"/>[1] assert (= calleeContext @EXECUTION_STACK[0])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4289 -> node4290 [color="black"]
    node4290_name [shape=none, label=<<font color="black">Branch[4290]</font>>]
    node4290_name -> node4290 [arrowhead=none, color="black", style=dashed]
    node4290 [shape=diamond, label=<<font color="black">(= kind ~base~)</font>> color="black" fillcolor="white", style=filled]
    node4290 -> node4291 [label=<<font color="black">true</font>> color="black"]
    node4290 -> node4297 [label=<<font color="black">false</font>> color="black"]
    node4291_name [shape=none, label=<<font color="black">Call[4291]</font>>]
    node4291_name -> node4291 [arrowhead=none, color="black", style=dashed]
    node4291 [shape=cds, label=<<font color="black">%2 = clo&lt;OrdinaryCallBindThis&gt;(F, calleeContext, thisArgument)</font>> color="black" fillcolor="white", style=filled]
    node4291 -> node4292 [color="black"]
    node4297_name [shape=none, label=<<font color="black">Block[4297]</font>>]
    node4297_name -> node4297 [arrowhead=none, color="black", style=dashed]
    node4297 [shape=box, label=<<font color="black">[0] let constructorEnv = calleeContext.LexicalEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4297 -> node4298 [color="black"]
    node4292_name [shape=none, label=<<font color="black">Call[4292]</font>>]
    node4292_name -> node4292 [arrowhead=none, color="black", style=dashed]
    node4292 [shape=cds, label=<<font color="black">%3 = clo&lt;InitializeInstanceElements&gt;(thisArgument, F)</font>> color="black" fillcolor="white", style=filled]
    node4292 -> node4293 [color="black"]
    node4298_name [shape=none, label=<<font color="black">Call[4298]</font>>]
    node4298_name -> node4298 [arrowhead=none, color="black", style=dashed]
    node4298 [shape=cds, label=<<font color="black">%5 = clo&lt;OrdinaryCallEvaluateBody&gt;(F, argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node4298 -> node4299 [color="black"]
    node4293_name [shape=none, label=<<font color="black">Call[4293]</font>>]
    node4293_name -> node4293 [arrowhead=none, color="black", style=dashed]
    node4293 [shape=cds, label=<<font color="black">%4 = clo&lt;Completion&gt;(%3)</font>> color="black" fillcolor="white", style=filled]
    node4293 -> node4294 [color="black"]
    node4299_name [shape=none, label=<<font color="black">Call[4299]</font>>]
    node4299_name -> node4299 [arrowhead=none, color="black", style=dashed]
    node4299 [shape=cds, label=<<font color="black">%6 = clo&lt;Completion&gt;(%5)</font>> color="black" fillcolor="white", style=filled]
    node4299 -> node4300 [color="black"]
    node4294_name [shape=none, label=<<font color="black">Block[4294]</font>>]
    node4294_name -> node4294 [arrowhead=none, color="black", style=dashed]
    node4294 [shape=box, label=<<font color="black">[0] let initializeResult = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4294 -> node4295 [color="black"]
    node4300_name [shape=none, label=<<font color="black">Block[4300]</font>>]
    node4300_name -> node4300 [arrowhead=none, color="black", style=dashed]
    node4300 [shape=box, label=<<font color="black">[0] let result = %6<BR ALIGN="LEFT"/>[1] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4300 -> node4301 [color="black"]
    node4295_name [shape=none, label=<<font color="black">Branch[4295]</font>>]
    node4295_name -> node4295 [arrowhead=none, color="black", style=dashed]
    node4295 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? initializeResult) (! (= initializeResult.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node4295 -> node4296 [label=<<font color="black">true</font>> color="black"]
    node4295 -> node4297 [label=<<font color="black">false</font>> color="black"]
    node4301_name [shape=none, label=<<font color="black">Branch[4301]</font>>]
    node4301_name -> node4301 [arrowhead=none, color="black", style=dashed]
    node4301 [shape=diamond, label=<<font color="black">(= result.Type ~return~)</font>> color="black" fillcolor="white", style=filled]
    node4301 -> node4302 [label=<<font color="black">true</font>> color="black"]
    node4301 -> node4308 [label=<<font color="black">false</font>> color="black"]
    node4296_name [shape=none, label=<<font color="black">Block[4296]</font>>]
    node4296_name -> node4296 [arrowhead=none, color="black", style=dashed]
    node4296 [shape=box, label=<<font color="black">[0] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/>[1] return [? initializeResult]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4296 -> cluster1088_exit [color="black"]
    node4302_name [shape=none, label=<<font color="black">Branch[4302]</font>>]
    node4302_name -> node4302 [arrowhead=none, color="black", style=dashed]
    node4302 [shape=diamond, label=<<font color="black">(= (typeof result.Value) @Object)</font>> color="black" fillcolor="white", style=filled]
    node4302 -> node4303 [label=<<font color="black">true</font>> color="black"]
    node4302 -> node4304 [label=<<font color="black">false</font>> color="black"]
    node4308_name [shape=none, label=<<font color="black">Block[4308]</font>>]
    node4308_name -> node4308 [arrowhead=none, color="black", style=dashed]
    node4308 [shape=box, label=<<font color="black">[0] [? result]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4308 -> node4309 [color="black"]
    node4303_name [shape=none, label=<<font color="black">Block[4303]</font>>]
    node4303_name -> node4303 [arrowhead=none, color="black", style=dashed]
    node4303 [shape=box, label=<<font color="black">[0] return result.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4303 -> cluster1088_exit [color="black"]
    node4304_name [shape=none, label=<<font color="black">Branch[4304]</font>>]
    node4304_name -> node4304 [arrowhead=none, color="black", style=dashed]
    node4304 [shape=diamond, label=<<font color="black">(= kind ~base~)</font>> color="black" fillcolor="white", style=filled]
    node4304 -> node4305 [label=<<font color="black">true</font>> color="black"]
    node4304 -> node4306 [label=<<font color="black">false</font>> color="black"]
    node4309_name [shape=none, label=<<font color="black">Call[4309]</font>>]
    node4309_name -> node4309 [arrowhead=none, color="black", style=dashed]
    node4309 [shape=cds, label=<<font color="black">%7 = constructorEnv-&gt;GetThisBinding()</font>> color="black" fillcolor="white", style=filled]
    node4309 -> node4310 [color="black"]
    node4305_name [shape=none, label=<<font color="black">Block[4305]</font>>]
    node4305_name -> node4305 [arrowhead=none, color="black", style=dashed]
    node4305 [shape=box, label=<<font color="black">[0] return thisArgument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4305 -> cluster1088_exit [color="black"]
    node4306_name [shape=none, label=<<font color="black">Branch[4306]</font>>]
    node4306_name -> node4306 [arrowhead=none, color="black", style=dashed]
    node4306 [shape=diamond, label=<<font color="black">(! (= result.Value undefined))</font>> color="black" fillcolor="white", style=filled]
    node4306 -> node4307 [label=<<font color="black">true</font>> color="black"]
    node4306 -> node4309 [label=<<font color="black">false</font>> color="black"]
    node4310_name [shape=none, label=<<font color="black">Block[4310]</font>>]
    node4310_name -> node4310 [arrowhead=none, color="black", style=dashed]
    node4310 [shape=box, label=<<font color="black">[0] let thisBinding = [? %7]<BR ALIGN="LEFT"/>[1] assert (= (typeof thisBinding) @Object)<BR ALIGN="LEFT"/>[2] return thisBinding<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4310 -> cluster1088_exit [color="black"]
    node4307_name [shape=none, label=<<font color="black">Block[4307]</font>>]
    node4307_name -> node4307 [arrowhead=none, color="black", style=dashed]
    node4307 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#419])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4307 -> cluster1088_exit [color="black"]
  }
}