digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1595 {
    label = "def <SYNTAX>:MethodDefinition[4,0].MethodDefinitionEvaluation(this: Ast:MethodDefinition[4,0], object: Unknown, enumerable: Unknown): Normal[PrivateElement | Const[~unused~]] | Abrupt"
    style = rounded
    cluster1595_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1595_entry_name -> cluster1595_entry [arrowhead=none, color="black", style=dashed]
    cluster1595_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1595_entry -> node8520 [color="black"]
    cluster1595_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1595_exit_name -> cluster1595_exit [arrowhead=none, color="black", style=dashed]
    cluster1595_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8520_name [shape=none, label=<<font color="black">Call[8520]</font>>]
    node8520_name -> node8520 [arrowhead=none, color="black", style=dashed]
    node8520 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node8520 -> node8521 [color="black"]
    node8521_name [shape=none, label=<<font color="black">Block[8521]</font>>]
    node8521_name -> node8521 [arrowhead=none, color="black", style=dashed]
    node8521 [shape=box, label=<<font color="black">[0] let propKey = %0<BR ALIGN="LEFT"/>[1] [? propKey]<BR ALIGN="LEFT"/>[2] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[3] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[4] let sourceText = (source-text this)<BR ALIGN="LEFT"/>[5] let formalParameterList = |FormalParameters|[TT]&lt;0&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8521 -> node8522 [color="black"]
    node8522_name [shape=none, label=<<font color="black">Call[8522]</font>>]
    node8522_name -> node8522 [arrowhead=none, color="black", style=dashed]
    node8522 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Function.prototype%&quot;], sourceText, formalParameterList, this[1], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8522 -> node8523 [color="black"]
    node8523_name [shape=none, label=<<font color="black">Block[8523]</font>>]
    node8523_name -> node8523 [arrowhead=none, color="black", style=dashed]
    node8523 [shape=box, label=<<font color="black">[0] let closure = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8523 -> node8524 [color="black"]
    node8524_name [shape=none, label=<<font color="black">Call[8524]</font>>]
    node8524_name -> node8524 [arrowhead=none, color="black", style=dashed]
    node8524 [shape=cds, label=<<font color="black">%2 = clo&lt;MakeMethod&gt;(closure, object)</font>> color="black" fillcolor="white", style=filled]
    node8524 -> node8525 [color="black"]
    node8525_name [shape=none, label=<<font color="black">Call[8525]</font>>]
    node8525_name -> node8525 [arrowhead=none, color="black", style=dashed]
    node8525 [shape=cds, label=<<font color="black">%3 = clo&lt;SetFunctionName&gt;(closure, propKey, &quot;get&quot;)</font>> color="black" fillcolor="white", style=filled]
    node8525 -> node8526 [color="black"]
    node8526_name [shape=none, label=<<font color="black">Branch[8526]</font>>]
    node8526_name -> node8526 [arrowhead=none, color="black", style=dashed]
    node8526 [shape=diamond, label=<<font color="black">(? propKey: &quot;PrivateName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node8526 -> node8527 [label=<<font color="black">true</font>> color="black"]
    node8526 -> node8528 [label=<<font color="black">false</font>> color="black"]
    node8527_name [shape=none, label=<<font color="black">Block[8527]</font>>]
    node8527_name -> node8527 [arrowhead=none, color="black", style=dashed]
    node8527 [shape=box, label=<<font color="black">[0] return (new PrivateElement(&quot;Key&quot; -&gt; propKey, &quot;Kind&quot; -&gt; ~accessor~, &quot;Get&quot; -&gt; closure, &quot;Set&quot; -&gt; undefined))[#652]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8527 -> cluster1595_exit [color="black"]
    node8528_name [shape=none, label=<<font color="black">Block[8528]</font>>]
    node8528_name -> node8528 [arrowhead=none, color="black", style=dashed]
    node8528 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor(&quot;Get&quot; -&gt; closure, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))[#653]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8528 -> node8529 [color="black"]
    node8529_name [shape=none, label=<<font color="black">Call[8529]</font>>]
    node8529_name -> node8529 [arrowhead=none, color="black", style=dashed]
    node8529 [shape=cds, label=<<font color="black">%4 = clo&lt;DefinePropertyOrThrow&gt;(object, propKey, desc)</font>> color="black" fillcolor="white", style=filled]
    node8529 -> node8530 [color="black"]
    node8530_name [shape=none, label=<<font color="black">Block[8530]</font>>]
    node8530_name -> node8530 [arrowhead=none, color="black", style=dashed]
    node8530 [shape=box, label=<<font color="black">[0] [? %4]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8530 -> cluster1595_exit [color="black"]
  }
}