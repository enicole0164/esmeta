digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2582 {
    label = "def GetPromiseResolve(promiseConstructor: Unknown["Constructor"]): Normal[FunctionObject] | Abrupt"
    style = rounded
    cluster2582_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2582_entry_name -> cluster2582_entry [arrowhead=none, color="black", style=dashed]
    cluster2582_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2582_entry -> node18884 [color="black"]
    cluster2582_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2582_exit_name -> cluster2582_exit [arrowhead=none, color="black", style=dashed]
    cluster2582_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18884_name [shape=none, label=<<font color="black">Call[18884]</font>>]
    node18884_name -> node18884 [arrowhead=none, color="black", style=dashed]
    node18884 [shape=cds, label=<<font color="black">%0 = clo&lt;Get&gt;(promiseConstructor, &quot;resolve&quot;)</font>> color="black" fillcolor="white", style=filled]
    node18884 -> node18885 [color="black"]
    node18885_name [shape=none, label=<<font color="black">Block[18885]</font>>]
    node18885_name -> node18885 [arrowhead=none, color="black", style=dashed]
    node18885 [shape=box, label=<<font color="black">[0] let promiseResolve = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18885 -> node18886 [color="black"]
    node18886_name [shape=none, label=<<font color="black">Call[18886]</font>>]
    node18886_name -> node18886 [arrowhead=none, color="black", style=dashed]
    node18886 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(promiseResolve)</font>> color="black" fillcolor="white", style=filled]
    node18886 -> node18887 [color="black"]
    node18887_name [shape=none, label=<<font color="black">Branch[18887]</font>>]
    node18887_name -> node18887 [arrowhead=none, color="black", style=dashed]
    node18887 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node18887 -> node18888 [label=<<font color="black">true</font>> color="black"]
    node18887 -> node18889 [label=<<font color="black">false</font>> color="black"]
    node18888_name [shape=none, label=<<font color="black">Block[18888]</font>>]
    node18888_name -> node18888 [arrowhead=none, color="black", style=dashed]
    node18888 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1263])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18888 -> cluster2582_exit [color="black"]
    node18889_name [shape=none, label=<<font color="black">Block[18889]</font>>]
    node18889_name -> node18889 [arrowhead=none, color="black", style=dashed]
    node18889 [shape=box, label=<<font color="black">[0] return promiseResolve<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18889 -> cluster2582_exit [color="black"]
  }
}