digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2598 {
    label = "def <BUILTIN>:INTRINSICS.Promise.prototype.catch(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2598_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2598_entry_name -> cluster2598_entry [arrowhead=none, color="black", style=dashed]
    cluster2598_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2598_entry -> node19199 [color="black"]
    cluster2598_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2598_exit_name -> cluster2598_exit [arrowhead=none, color="black", style=dashed]
    cluster2598_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19199_name [shape=none, label=<<font color="black">Branch[19199]</font>>]
    node19199_name -> node19199 [arrowhead=none, color="black", style=dashed]
    node19199 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19199 -> node19200 [label=<<font color="black">true</font>> color="black"]
    node19199 -> node19201 [label=<<font color="black">false</font>> color="black"]
    node19200_name [shape=none, label=<<font color="black">Block[19200]</font>>]
    node19200_name -> node19200 [arrowhead=none, color="black", style=dashed]
    node19200 [shape=box, label=<<font color="black">[0] let onRejected = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19200 -> node19202 [color="black"]
    node19201_name [shape=none, label=<<font color="black">Block[19201]</font>>]
    node19201_name -> node19201 [arrowhead=none, color="black", style=dashed]
    node19201 [shape=box, label=<<font color="black">[0] let onRejected = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19201 -> node19202 [color="black"]
    node19202_name [shape=none, label=<<font color="black">Block[19202]</font>>]
    node19202_name -> node19202 [arrowhead=none, color="black", style=dashed]
    node19202 [shape=box, label=<<font color="black">[0] let promise = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19202 -> node19203 [color="black"]
    node19203_name [shape=none, label=<<font color="black">Call[19203]</font>>]
    node19203_name -> node19203 [arrowhead=none, color="black", style=dashed]
    node19203 [shape=cds, label=<<font color="black">%0 = clo&lt;Invoke&gt;(promise, &quot;then&quot;, (new [undefined, onRejected])[#1305])</font>> color="black" fillcolor="white", style=filled]
    node19203 -> node19204 [color="black"]
    node19204_name [shape=none, label=<<font color="black">Block[19204]</font>>]
    node19204_name -> node19204 [arrowhead=none, color="black", style=dashed]
    node19204 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19204 -> cluster2598_exit [color="black"]
  }
}