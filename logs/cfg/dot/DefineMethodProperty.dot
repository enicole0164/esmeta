digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1095 {
    label = "def DefineMethodProperty(homeObject: Object, key: PrivateName | Symbol | String, closure: FunctionObject, enumerable: Boolean): PrivateElement | Const[~unused~]"
    style = rounded
    cluster1095_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1095_entry_name -> cluster1095_entry [arrowhead=none, color="black", style=dashed]
    cluster1095_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1095_entry -> node4352 [color="black"]
    cluster1095_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1095_exit_name -> cluster1095_exit [arrowhead=none, color="black", style=dashed]
    cluster1095_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4352_name [shape=none, label=<<font color="black">Block[4352]</font>>]
    node4352_name -> node4352 [arrowhead=none, color="black", style=dashed]
    node4352 [shape=box, label=<<font color="black">[0] assert (yet &quot;_homeObject_ is an ordinary, extensible object with no non-configurable properties.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4352 -> node4353 [color="black"]
    node4353_name [shape=none, label=<<font color="black">Branch[4353]</font>>]
    node4353_name -> node4353 [arrowhead=none, color="black", style=dashed]
    node4353 [shape=diamond, label=<<font color="black">(? key: &quot;PrivateName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node4353 -> node4354 [label=<<font color="black">true</font>> color="black"]
    node4353 -> node4355 [label=<<font color="black">false</font>> color="black"]
    node4354_name [shape=none, label=<<font color="black">Block[4354]</font>>]
    node4354_name -> node4354 [arrowhead=none, color="black", style=dashed]
    node4354 [shape=box, label=<<font color="black">[0] return (new PrivateElement(&quot;Key&quot; -&gt; key, &quot;Kind&quot; -&gt; ~method~, &quot;Value&quot; -&gt; closure))[#428]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4354 -> cluster1095_exit [color="black"]
    node4355_name [shape=none, label=<<font color="black">Block[4355]</font>>]
    node4355_name -> node4355 [arrowhead=none, color="black", style=dashed]
    node4355 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor(&quot;Value&quot; -&gt; closure, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; enumerable, &quot;Configurable&quot; -&gt; true))[#429]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4355 -> node4356 [color="black"]
    node4356_name [shape=none, label=<<font color="black">Call[4356]</font>>]
    node4356_name -> node4356 [arrowhead=none, color="black", style=dashed]
    node4356 [shape=cds, label=<<font color="black">%0 = clo&lt;DefinePropertyOrThrow&gt;(homeObject, key, desc)</font>> color="black" fillcolor="white", style=filled]
    node4356 -> node4357 [color="black"]
    node4357_name [shape=none, label=<<font color="black">Block[4357]</font>>]
    node4357_name -> node4357 [arrowhead=none, color="black", style=dashed]
    node4357 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4357 -> cluster1095_exit [color="black"]
  }
}