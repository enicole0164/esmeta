digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster978 {
    label = "def <CONC>:DeclarativeEnvironmentRecord.SetMutableBinding(envRec: DeclarativeEnvironmentRecord, N: String, V: ESValue, S: Boolean): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster978_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster978_entry_name -> cluster978_entry [arrowhead=none, color="black", style=dashed]
    cluster978_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster978_entry -> node3599 [color="black"]
    cluster978_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster978_exit_name -> cluster978_exit [arrowhead=none, color="black", style=dashed]
    cluster978_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3599_name [shape=none, label=<<font color="black">Block[3599]</font>>]
    node3599_name -> node3599 [arrowhead=none, color="black", style=dashed]
    node3599 [shape=box, label=<<font color="black">[0] let binding = envRec.SubMap[N]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3599 -> node3600 [color="black"]
    node3600_name [shape=none, label=<<font color="black">Branch[3600]</font>>]
    node3600_name -> node3600 [arrowhead=none, color="black", style=dashed]
    node3600 [shape=diamond, label=<<font color="black">(= binding absent)</font>> color="black" fillcolor="white", style=filled]
    node3600 -> node3601 [label=<<font color="black">true</font>> color="black"]
    node3600 -> node3607 [label=<<font color="black">false</font>> color="black"]
    node3601_name [shape=none, label=<<font color="black">Branch[3601]</font>>]
    node3601_name -> node3601 [arrowhead=none, color="black", style=dashed]
    node3601 [shape=diamond, label=<<font color="black">(= S true)</font>> color="black" fillcolor="white", style=filled]
    node3601 -> node3602 [label=<<font color="black">true</font>> color="black"]
    node3601 -> node3603 [label=<<font color="black">false</font>> color="black"]
    node3607_name [shape=none, label=<<font color="black">Branch[3607]</font>>]
    node3607_name -> node3607 [arrowhead=none, color="black", style=dashed]
    node3607 [shape=diamond, label=<<font color="black">(= binding.strict true)</font>> color="black" fillcolor="white", style=filled]
    node3607 -> node3608 [label=<<font color="black">true</font>> color="black"]
    node3607 -> node3609 [label=<<font color="black">false</font>> color="black"]
    node3602_name [shape=none, label=<<font color="black">Block[3602]</font>>]
    node3602_name -> node3602 [arrowhead=none, color="black", style=dashed]
    node3602 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#368])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3602 -> cluster978_exit [color="black"]
    node3603_name [shape=none, label=<<font color="black">Call[3603]</font>>]
    node3603_name -> node3603 [arrowhead=none, color="black", style=dashed]
    node3603 [shape=cds, label=<<font color="black">%0 = envRec-&gt;CreateMutableBinding(N, true)</font>> color="black" fillcolor="white", style=filled]
    node3603 -> node3604 [color="black"]
    node3608_name [shape=none, label=<<font color="black">Block[3608]</font>>]
    node3608_name -> node3608 [arrowhead=none, color="black", style=dashed]
    node3608 [shape=box, label=<<font color="black">[0] S = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3608 -> node3609 [color="black"]
    node3609_name [shape=none, label=<<font color="black">Branch[3609]</font>>]
    node3609_name -> node3609 [arrowhead=none, color="black", style=dashed]
    node3609 [shape=diamond, label=<<font color="black">(! binding.initialized)</font>> color="black" fillcolor="white", style=filled]
    node3609 -> node3610 [label=<<font color="black">true</font>> color="black"]
    node3609 -> node3611 [label=<<font color="black">false</font>> color="black"]
    node3604_name [shape=none, label=<<font color="black">Call[3604]</font>>]
    node3604_name -> node3604 [arrowhead=none, color="black", style=dashed]
    node3604 [shape=cds, label=<<font color="black">%1 = envRec-&gt;InitializeBinding(N, V)</font>> color="black" fillcolor="white", style=filled]
    node3604 -> node3605 [color="black"]
    node3610_name [shape=none, label=<<font color="black">Block[3610]</font>>]
    node3610_name -> node3610 [arrowhead=none, color="black", style=dashed]
    node3610 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#369])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3610 -> cluster978_exit [color="black"]
    node3611_name [shape=none, label=<<font color="black">Branch[3611]</font>>]
    node3611_name -> node3611 [arrowhead=none, color="black", style=dashed]
    node3611 [shape=diamond, label=<<font color="black">(? binding: &quot;MutableBinding&quot;)</font>> color="black" fillcolor="white", style=filled]
    node3611 -> node3612 [label=<<font color="black">true</font>> color="black"]
    node3611 -> node3613 [label=<<font color="black">false</font>> color="black"]
    node3605_name [shape=none, label=<<font color="black">Call[3605]</font>>]
    node3605_name -> node3605 [arrowhead=none, color="black", style=dashed]
    node3605 [shape=cds, label=<<font color="black">%2 = clo&lt;NormalCompletion&gt;(~unused~)</font>> color="black" fillcolor="white", style=filled]
    node3605 -> node3606 [color="black"]
    node3612_name [shape=none, label=<<font color="black">Block[3612]</font>>]
    node3612_name -> node3612 [arrowhead=none, color="black", style=dashed]
    node3612 [shape=box, label=<<font color="black">[0] binding.BoundValue = V<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3612 -> node3616 [color="black"]
    node3613_name [shape=none, label=<<font color="black">Block[3613]</font>>]
    node3613_name -> node3613 [arrowhead=none, color="black", style=dashed]
    node3613 [shape=box, label=<<font color="black">[0] assert (? binding: &quot;ImmutableBinding&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3613 -> node3614 [color="black"]
    node3606_name [shape=none, label=<<font color="black">Block[3606]</font>>]
    node3606_name -> node3606 [arrowhead=none, color="black", style=dashed]
    node3606 [shape=box, label=<<font color="black">[0] return %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3606 -> cluster978_exit [color="black"]
    node3616_name [shape=none, label=<<font color="black">Call[3616]</font>>]
    node3616_name -> node3616 [arrowhead=none, color="black", style=dashed]
    node3616 [shape=cds, label=<<font color="black">%3 = clo&lt;NormalCompletion&gt;(~unused~)</font>> color="black" fillcolor="white", style=filled]
    node3616 -> node3617 [color="black"]
    node3614_name [shape=none, label=<<font color="black">Branch[3614]</font>>]
    node3614_name -> node3614 [arrowhead=none, color="black", style=dashed]
    node3614 [shape=diamond, label=<<font color="black">(= S true)</font>> color="black" fillcolor="white", style=filled]
    node3614 -> node3615 [label=<<font color="black">true</font>> color="black"]
    node3614 -> node3616 [label=<<font color="black">false</font>> color="black"]
    node3617_name [shape=none, label=<<font color="black">Block[3617]</font>>]
    node3617_name -> node3617 [arrowhead=none, color="black", style=dashed]
    node3617 [shape=box, label=<<font color="black">[0] return %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3617 -> cluster978_exit [color="black"]
    node3615_name [shape=none, label=<<font color="black">Block[3615]</font>>]
    node3615_name -> node3615 [arrowhead=none, color="black", style=dashed]
    node3615 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#370])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3615 -> cluster978_exit [color="black"]
  }
}