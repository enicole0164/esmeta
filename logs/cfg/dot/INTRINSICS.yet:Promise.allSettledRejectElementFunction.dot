digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2588 {
    label = "def <BUILTIN>:INTRINSICS.yet:`Promise.allSettled`RejectElementFunction(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2588_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2588_entry_name -> cluster2588_entry [arrowhead=none, color="black", style=dashed]
    cluster2588_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2588_entry -> node19016 [color="black"]
    cluster2588_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2588_exit_name -> cluster2588_exit [arrowhead=none, color="black", style=dashed]
    cluster2588_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19016_name [shape=none, label=<<font color="black">Branch[19016]</font>>]
    node19016_name -> node19016 [arrowhead=none, color="black", style=dashed]
    node19016 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19016 -> node19017 [label=<<font color="black">true</font>> color="black"]
    node19016 -> node19018 [label=<<font color="black">false</font>> color="black"]
    node19017_name [shape=none, label=<<font color="black">Block[19017]</font>>]
    node19017_name -> node19017 [arrowhead=none, color="black", style=dashed]
    node19017 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19017 -> node19019 [color="black"]
    node19018_name [shape=none, label=<<font color="black">Block[19018]</font>>]
    node19018_name -> node19018 [arrowhead=none, color="black", style=dashed]
    node19018 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19018 -> node19019 [color="black"]
    node19019_name [shape=none, label=<<font color="black">Block[19019]</font>>]
    node19019_name -> node19019 [arrowhead=none, color="black", style=dashed]
    node19019 [shape=box, label=<<font color="black">[0] let F = @EXECUTION_STACK[0].Function<BR ALIGN="LEFT"/>[1] let alreadyCalled = F.AlreadyCalled<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19019 -> node19020 [color="black"]
    node19020_name [shape=none, label=<<font color="black">Branch[19020]</font>>]
    node19020_name -> node19020 [arrowhead=none, color="black", style=dashed]
    node19020 [shape=diamond, label=<<font color="black">(= alreadyCalled.Value true)</font>> color="black" fillcolor="white", style=filled]
    node19020 -> node19021 [label=<<font color="black">true</font>> color="black"]
    node19020 -> node19022 [label=<<font color="black">false</font>> color="black"]
    node19021_name [shape=none, label=<<font color="black">Block[19021]</font>>]
    node19021_name -> node19021 [arrowhead=none, color="black", style=dashed]
    node19021 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19021 -> cluster2588_exit [color="black"]
    node19022_name [shape=none, label=<<font color="black">Block[19022]</font>>]
    node19022_name -> node19022 [arrowhead=none, color="black", style=dashed]
    node19022 [shape=box, label=<<font color="black">[0] alreadyCalled.Value = true<BR ALIGN="LEFT"/>[1] let index = F.Index<BR ALIGN="LEFT"/>[2] let values = F.Values<BR ALIGN="LEFT"/>[3] let promiseCapability = F.Capability<BR ALIGN="LEFT"/>[4] let remainingElementsCount = F.RemainingElements<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19022 -> node19023 [color="black"]
    node19023_name [shape=none, label=<<font color="black">Call[19023]</font>>]
    node19023_name -> node19023 [arrowhead=none, color="black", style=dashed]
    node19023 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Object.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19023 -> node19024 [color="black"]
    node19024_name [shape=none, label=<<font color="black">Block[19024]</font>>]
    node19024_name -> node19024 [arrowhead=none, color="black", style=dashed]
    node19024 [shape=box, label=<<font color="black">[0] let obj = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19024 -> node19025 [color="black"]
    node19025_name [shape=none, label=<<font color="black">Call[19025]</font>>]
    node19025_name -> node19025 [arrowhead=none, color="black", style=dashed]
    node19025 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateDataPropertyOrThrow&gt;(obj, &quot;status&quot;, &quot;rejected&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19025 -> node19026 [color="black"]
    node19026_name [shape=none, label=<<font color="black">Block[19026]</font>>]
    node19026_name -> node19026 [arrowhead=none, color="black", style=dashed]
    node19026 [shape=box, label=<<font color="black">[0] [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19026 -> node19027 [color="black"]
    node19027_name [shape=none, label=<<font color="black">Call[19027]</font>>]
    node19027_name -> node19027 [arrowhead=none, color="black", style=dashed]
    node19027 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateDataPropertyOrThrow&gt;(obj, &quot;reason&quot;, x)</font>> color="black" fillcolor="white", style=filled]
    node19027 -> node19028 [color="black"]
    node19028_name [shape=none, label=<<font color="black">Block[19028]</font>>]
    node19028_name -> node19028 [arrowhead=none, color="black", style=dashed]
    node19028 [shape=box, label=<<font color="black">[0] [! %2]<BR ALIGN="LEFT"/>[1] values[index] = obj<BR ALIGN="LEFT"/>[2] remainingElementsCount.Value = (- remainingElementsCount.Value 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19028 -> node19029 [color="black"]
    node19029_name [shape=none, label=<<font color="black">Branch[19029]</font>>]
    node19029_name -> node19029 [arrowhead=none, color="black", style=dashed]
    node19029 [shape=diamond, label=<<font color="black">(= remainingElementsCount.Value 0)</font>> color="black" fillcolor="white", style=filled]
    node19029 -> node19030 [label=<<font color="black">true</font>> color="black"]
    node19029 -> node19034 [label=<<font color="black">false</font>> color="black"]
    node19030_name [shape=none, label=<<font color="black">Call[19030]</font>>]
    node19030_name -> node19030 [arrowhead=none, color="black", style=dashed]
    node19030 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateArrayFromList&gt;(values)</font>> color="black" fillcolor="white", style=filled]
    node19030 -> node19031 [color="black"]
    node19034_name [shape=none, label=<<font color="black">Block[19034]</font>>]
    node19034_name -> node19034 [arrowhead=none, color="black", style=dashed]
    node19034 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19034 -> cluster2588_exit [color="black"]
    node19031_name [shape=none, label=<<font color="black">Block[19031]</font>>]
    node19031_name -> node19031 [arrowhead=none, color="black", style=dashed]
    node19031 [shape=box, label=<<font color="black">[0] let valuesArray = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19031 -> node19032 [color="black"]
    node19032_name [shape=none, label=<<font color="black">Call[19032]</font>>]
    node19032_name -> node19032 [arrowhead=none, color="black", style=dashed]
    node19032 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(promiseCapability.Resolve, undefined, (new [valuesArray])[#1283])</font>> color="black" fillcolor="white", style=filled]
    node19032 -> node19033 [color="black"]
    node19033_name [shape=none, label=<<font color="black">Block[19033]</font>>]
    node19033_name -> node19033 [arrowhead=none, color="black", style=dashed]
    node19033 [shape=box, label=<<font color="black">[0] return [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19033 -> cluster2588_exit [color="black"]
  }
}