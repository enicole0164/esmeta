digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2318 {
    label = "def MakeMatchIndicesIndexPairArray(S: String, indices: Unknown["ListOfEitherMatchRecordsOr*undefined*"], groupNames: List[String | Undefined], hasGroups: Boolean): Unknown["Array"]"
    style = rounded
    cluster2318_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2318_entry_name -> cluster2318_entry [arrowhead=none, color="black", style=dashed]
    cluster2318_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2318_entry -> node14261 [color="black"]
    cluster2318_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2318_exit_name -> cluster2318_exit [arrowhead=none, color="black", style=dashed]
    cluster2318_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14261_name [shape=none, label=<<font color="black">Block[14261]</font>>]
    node14261_name -> node14261 [arrowhead=none, color="black", style=dashed]
    node14261 [shape=box, label=<<font color="black">[0] let n = indices.length<BR ALIGN="LEFT"/>[1] assert (&lt; n (- (** 2 32) 1))<BR ALIGN="LEFT"/>[2] assert (yet &quot;_groupNames_ has _n_ - 1 elements.&quot;)<BR ALIGN="LEFT"/>[3] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14261 -> node14262 [color="black"]
    node14262_name [shape=none, label=<<font color="black">Call[14262]</font>>]
    node14262_name -> node14262 [arrowhead=none, color="black", style=dashed]
    node14262 [shape=cds, label=<<font color="black">%0 = clo&lt;ArrayCreate&gt;(n)</font>> color="black" fillcolor="white", style=filled]
    node14262 -> node14263 [color="black"]
    node14263_name [shape=none, label=<<font color="black">Block[14263]</font>>]
    node14263_name -> node14263 [arrowhead=none, color="black", style=dashed]
    node14263 [shape=box, label=<<font color="black">[0] let A = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14263 -> node14264 [color="black"]
    node14264_name [shape=none, label=<<font color="black">Branch[14264]</font>>]
    node14264_name -> node14264 [arrowhead=none, color="black", style=dashed]
    node14264 [shape=diamond, label=<<font color="black">(= hasGroups true)</font>> color="black" fillcolor="white", style=filled]
    node14264 -> node14265 [label=<<font color="black">true</font>> color="black"]
    node14264 -> node14267 [label=<<font color="black">false</font>> color="black"]
    node14265_name [shape=none, label=<<font color="black">Call[14265]</font>>]
    node14265_name -> node14265 [arrowhead=none, color="black", style=dashed]
    node14265 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryObjectCreate&gt;(null)</font>> color="black" fillcolor="white", style=filled]
    node14265 -> node14266 [color="black"]
    node14267_name [shape=none, label=<<font color="black">Block[14267]</font>>]
    node14267_name -> node14267 [arrowhead=none, color="black", style=dashed]
    node14267 [shape=box, label=<<font color="black">[0] let groups = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14267 -> node14268 [color="black"]
    node14266_name [shape=none, label=<<font color="black">Block[14266]</font>>]
    node14266_name -> node14266 [arrowhead=none, color="black", style=dashed]
    node14266 [shape=box, label=<<font color="black">[0] let groups = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14266 -> node14268 [color="black"]
    node14268_name [shape=none, label=<<font color="black">Call[14268]</font>>]
    node14268_name -> node14268 [arrowhead=none, color="black", style=dashed]
    node14268 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateDataPropertyOrThrow&gt;(A, &quot;groups&quot;, groups)</font>> color="black" fillcolor="white", style=filled]
    node14268 -> node14269 [color="black"]
    node14269_name [shape=none, label=<<font color="black">Block[14269]</font>>]
    node14269_name -> node14269 [arrowhead=none, color="black", style=dashed]
    node14269 [shape=box, label=<<font color="black">[0] [! %2]<BR ALIGN="LEFT"/>[1] let i = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14269 -> node14270 [color="black"]
    node14270_name [shape=none, label=<<font color="black">Branch[14270]</font>>]
    node14270_name -> node14270 [arrowhead=none, color="black", style=dashed]
    node14270 [shape=diamond, label=<<font color="black">(&lt; i n)</font>> color="black" fillcolor="white", style=filled]
    node14270 -> node14271 [label=<<font color="black">true</font>> color="black"]
    node14270 -> node14284 [label=<<font color="black">false</font>> color="black"]
    node14271_name [shape=none, label=<<font color="black">Block[14271]</font>>]
    node14271_name -> node14271 [arrowhead=none, color="black", style=dashed]
    node14271 [shape=box, label=<<font color="black">[0] let matchIndices = indices[i]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14271 -> node14272 [color="black"]
    node14284_name [shape=none, label=<<font color="black">Block[14284]</font>>]
    node14284_name -> node14284 [arrowhead=none, color="black", style=dashed]
    node14284 [shape=box, label=<<font color="black">[0] return A<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14284 -> cluster2318_exit [color="black"]
    node14272_name [shape=none, label=<<font color="black">Branch[14272]</font>>]
    node14272_name -> node14272 [arrowhead=none, color="black", style=dashed]
    node14272 [shape=diamond, label=<<font color="black">(! (= matchIndices undefined))</font>> color="black" fillcolor="white", style=filled]
    node14272 -> node14273 [label=<<font color="black">true</font>> color="black"]
    node14272 -> node14275 [label=<<font color="black">false</font>> color="black"]
    node14273_name [shape=none, label=<<font color="black">Call[14273]</font>>]
    node14273_name -> node14273 [arrowhead=none, color="black", style=dashed]
    node14273 [shape=cds, label=<<font color="black">%3 = clo&lt;GetMatchIndexPair&gt;(S, matchIndices)</font>> color="black" fillcolor="white", style=filled]
    node14273 -> node14274 [color="black"]
    node14275_name [shape=none, label=<<font color="black">Block[14275]</font>>]
    node14275_name -> node14275 [arrowhead=none, color="black", style=dashed]
    node14275 [shape=box, label=<<font color="black">[0] let matchIndexPair = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14275 -> node14276 [color="black"]
    node14274_name [shape=none, label=<<font color="black">Block[14274]</font>>]
    node14274_name -> node14274 [arrowhead=none, color="black", style=dashed]
    node14274 [shape=box, label=<<font color="black">[0] let matchIndexPair = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14274 -> node14276 [color="black"]
    node14276_name [shape=none, label=<<font color="black">Call[14276]</font>>]
    node14276_name -> node14276 [arrowhead=none, color="black", style=dashed]
    node14276 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(([number] i))</font>> color="black" fillcolor="white", style=filled]
    node14276 -> node14277 [color="black"]
    node14277_name [shape=none, label=<<font color="black">Call[14277]</font>>]
    node14277_name -> node14277 [arrowhead=none, color="black", style=dashed]
    node14277 [shape=cds, label=<<font color="black">%5 = clo&lt;CreateDataPropertyOrThrow&gt;(A, [! %4], matchIndexPair)</font>> color="black" fillcolor="white", style=filled]
    node14277 -> node14278 [color="black"]
    node14278_name [shape=none, label=<<font color="black">Block[14278]</font>>]
    node14278_name -> node14278 [arrowhead=none, color="black", style=dashed]
    node14278 [shape=box, label=<<font color="black">[0] [! %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14278 -> node14279 [color="black"]
    node14279_name [shape=none, label=<<font color="black">Branch[14279]</font>>]
    node14279_name -> node14279 [arrowhead=none, color="black", style=dashed]
    node14279 [shape=diamond, label=<<font color="black">(&amp;&amp; (&lt; 0 i) (! (= groupNames[(- i 1)] undefined)))</font>> color="black" fillcolor="white", style=filled]
    node14279 -> node14280 [label=<<font color="black">true</font>> color="black"]
    node14279 -> node14283 [label=<<font color="black">false</font>> color="black"]
    node14280_name [shape=none, label=<<font color="black">Block[14280]</font>>]
    node14280_name -> node14280 [arrowhead=none, color="black", style=dashed]
    node14280 [shape=box, label=<<font color="black">[0] assert (! (= groups undefined))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14280 -> node14281 [color="black"]
    node14283_name [shape=none, label=<<font color="black">Block[14283]</font>>]
    node14283_name -> node14283 [arrowhead=none, color="black", style=dashed]
    node14283 [shape=box, label=<<font color="black">[0] i = (+ i 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14283 -> node14270 [color="black"]
    node14281_name [shape=none, label=<<font color="black">Call[14281]</font>>]
    node14281_name -> node14281 [arrowhead=none, color="black", style=dashed]
    node14281 [shape=cds, label=<<font color="black">%6 = clo&lt;CreateDataPropertyOrThrow&gt;(groups, groupNames[(- i 1)], matchIndexPair)</font>> color="black" fillcolor="white", style=filled]
    node14281 -> node14282 [color="black"]
    node14282_name [shape=none, label=<<font color="black">Block[14282]</font>>]
    node14282_name -> node14282 [arrowhead=none, color="black", style=dashed]
    node14282 [shape=box, label=<<font color="black">[0] [! %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14282 -> node14283 [color="black"]
  }
}