digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2193 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.substring(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2193_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2193_entry_name -> cluster2193_entry [arrowhead=none, color="black", style=dashed]
    cluster2193_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2193_entry -> node13780 [color="black"]
    cluster2193_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2193_exit_name -> cluster2193_exit [arrowhead=none, color="black", style=dashed]
    cluster2193_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13780_name [shape=none, label=<<font color="black">Branch[13780]</font>>]
    node13780_name -> node13780 [arrowhead=none, color="black", style=dashed]
    node13780 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13780 -> node13781 [label=<<font color="black">true</font>> color="black"]
    node13780 -> node13782 [label=<<font color="black">false</font>> color="black"]
    node13781_name [shape=none, label=<<font color="black">Block[13781]</font>>]
    node13781_name -> node13781 [arrowhead=none, color="black", style=dashed]
    node13781 [shape=box, label=<<font color="black">[0] let start = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13781 -> node13783 [color="black"]
    node13782_name [shape=none, label=<<font color="black">Block[13782]</font>>]
    node13782_name -> node13782 [arrowhead=none, color="black", style=dashed]
    node13782 [shape=box, label=<<font color="black">[0] let start = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13782 -> node13783 [color="black"]
    node13783_name [shape=none, label=<<font color="black">Branch[13783]</font>>]
    node13783_name -> node13783 [arrowhead=none, color="black", style=dashed]
    node13783 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13783 -> node13784 [label=<<font color="black">true</font>> color="black"]
    node13783 -> node13785 [label=<<font color="black">false</font>> color="black"]
    node13784_name [shape=none, label=<<font color="black">Block[13784]</font>>]
    node13784_name -> node13784 [arrowhead=none, color="black", style=dashed]
    node13784 [shape=box, label=<<font color="black">[0] let end = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13784 -> node13786 [color="black"]
    node13785_name [shape=none, label=<<font color="black">Block[13785]</font>>]
    node13785_name -> node13785 [arrowhead=none, color="black", style=dashed]
    node13785 [shape=box, label=<<font color="black">[0] let end = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13785 -> node13786 [color="black"]
    node13786_name [shape=none, label=<<font color="black">Call[13786]</font>>]
    node13786_name -> node13786 [arrowhead=none, color="black", style=dashed]
    node13786 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13786 -> node13787 [color="black"]
    node13787_name [shape=none, label=<<font color="black">Block[13787]</font>>]
    node13787_name -> node13787 [arrowhead=none, color="black", style=dashed]
    node13787 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13787 -> node13788 [color="black"]
    node13788_name [shape=none, label=<<font color="black">Call[13788]</font>>]
    node13788_name -> node13788 [arrowhead=none, color="black", style=dashed]
    node13788 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13788 -> node13789 [color="black"]
    node13789_name [shape=none, label=<<font color="black">Block[13789]</font>>]
    node13789_name -> node13789 [arrowhead=none, color="black", style=dashed]
    node13789 [shape=box, label=<<font color="black">[0] let S = [? %1]<BR ALIGN="LEFT"/>[1] let len = S.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13789 -> node13790 [color="black"]
    node13790_name [shape=none, label=<<font color="black">Call[13790]</font>>]
    node13790_name -> node13790 [arrowhead=none, color="black", style=dashed]
    node13790 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(start)</font>> color="black" fillcolor="white", style=filled]
    node13790 -> node13791 [color="black"]
    node13791_name [shape=none, label=<<font color="black">Block[13791]</font>>]
    node13791_name -> node13791 [arrowhead=none, color="black", style=dashed]
    node13791 [shape=box, label=<<font color="black">[0] let intStart = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13791 -> node13792 [color="black"]
    node13792_name [shape=none, label=<<font color="black">Branch[13792]</font>>]
    node13792_name -> node13792 [arrowhead=none, color="black", style=dashed]
    node13792 [shape=diamond, label=<<font color="black">(= end undefined)</font>> color="black" fillcolor="white", style=filled]
    node13792 -> node13793 [label=<<font color="black">true</font>> color="black"]
    node13792 -> node13794 [label=<<font color="black">false</font>> color="black"]
    node13793_name [shape=none, label=<<font color="black">Block[13793]</font>>]
    node13793_name -> node13793 [arrowhead=none, color="black", style=dashed]
    node13793 [shape=box, label=<<font color="black">[0] let intEnd = len<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13793 -> node13796 [color="black"]
    node13794_name [shape=none, label=<<font color="black">Call[13794]</font>>]
    node13794_name -> node13794 [arrowhead=none, color="black", style=dashed]
    node13794 [shape=cds, label=<<font color="black">%3 = clo&lt;ToIntegerOrInfinity&gt;(end)</font>> color="black" fillcolor="white", style=filled]
    node13794 -> node13795 [color="black"]
    node13796_name [shape=none, label=<<font color="black">Block[13796]</font>>]
    node13796_name -> node13796 [arrowhead=none, color="black", style=dashed]
    node13796 [shape=box, label=<<font color="black">[0] let finalStart = (clamp intStart 0 len)<BR ALIGN="LEFT"/>[1] let finalEnd = (clamp intEnd 0 len)<BR ALIGN="LEFT"/>[2] let from = (min finalStart finalEnd)<BR ALIGN="LEFT"/>[3] let to = (max finalStart finalEnd)<BR ALIGN="LEFT"/>[4] return (substring S from to)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13796 -> cluster2193_exit [color="black"]
    node13795_name [shape=none, label=<<font color="black">Block[13795]</font>>]
    node13795_name -> node13795 [arrowhead=none, color="black", style=dashed]
    node13795 [shape=box, label=<<font color="black">[0] let intEnd = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13795 -> node13796 [color="black"]
  }
}