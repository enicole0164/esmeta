digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2378 {
    label = "def <BUILTIN>:INTRINSICS.Array.prototype.unshift(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2378_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2378_entry_name -> cluster2378_entry [arrowhead=none, color="black", style=dashed]
    cluster2378_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2378_entry -> node15775 [color="black"]
    cluster2378_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2378_exit_name -> cluster2378_exit [arrowhead=none, color="black", style=dashed]
    cluster2378_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15775_name [shape=none, label=<<font color="black">Block[15775]</font>>]
    node15775_name -> node15775 [arrowhead=none, color="black", style=dashed]
    node15775 [shape=box, label=<<font color="black">[0] let items = argumentsList<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15775 -> node15776 [color="black"]
    node15776_name [shape=none, label=<<font color="black">Call[15776]</font>>]
    node15776_name -> node15776 [arrowhead=none, color="black", style=dashed]
    node15776 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node15776 -> node15777 [color="black"]
    node15777_name [shape=none, label=<<font color="black">Block[15777]</font>>]
    node15777_name -> node15777 [arrowhead=none, color="black", style=dashed]
    node15777 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15777 -> node15778 [color="black"]
    node15778_name [shape=none, label=<<font color="black">Call[15778]</font>>]
    node15778_name -> node15778 [arrowhead=none, color="black", style=dashed]
    node15778 [shape=cds, label=<<font color="black">%1 = clo&lt;LengthOfArrayLike&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node15778 -> node15779 [color="black"]
    node15779_name [shape=none, label=<<font color="black">Block[15779]</font>>]
    node15779_name -> node15779 [arrowhead=none, color="black", style=dashed]
    node15779 [shape=box, label=<<font color="black">[0] let len = [? %1]<BR ALIGN="LEFT"/>[1] let argCount = items.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15779 -> node15780 [color="black"]
    node15780_name [shape=none, label=<<font color="black">Branch[15780]</font>>]
    node15780_name -> node15780 [arrowhead=none, color="black", style=dashed]
    node15780 [shape=diamond, label=<<font color="black">(&lt; 0 argCount)</font>> color="black" fillcolor="white", style=filled]
    node15780 -> node15781 [label=<<font color="black">true</font>> color="black"]
    node15780 -> node15806 [label=<<font color="black">false</font>> color="black"]
    node15781_name [shape=none, label=<<font color="black">Branch[15781]</font>>]
    node15781_name -> node15781 [arrowhead=none, color="black", style=dashed]
    node15781 [shape=diamond, label=<<font color="black">(&lt; (- (** 2 53) 1) (+ len argCount))</font>> color="black" fillcolor="white", style=filled]
    node15781 -> node15782 [label=<<font color="black">true</font>> color="black"]
    node15781 -> node15783 [label=<<font color="black">false</font>> color="black"]
    node15806_name [shape=none, label=<<font color="black">Call[15806]</font>>]
    node15806_name -> node15806 [arrowhead=none, color="black", style=dashed]
    node15806 [shape=cds, label=<<font color="black">%12 = clo&lt;Set&gt;(O, &quot;length&quot;, ([number] (+ len argCount)), true)</font>> color="black" fillcolor="white", style=filled]
    node15806 -> node15807 [color="black"]
    node15782_name [shape=none, label=<<font color="black">Block[15782]</font>>]
    node15782_name -> node15782 [arrowhead=none, color="black", style=dashed]
    node15782 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1049])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15782 -> cluster2378_exit [color="black"]
    node15783_name [shape=none, label=<<font color="black">Block[15783]</font>>]
    node15783_name -> node15783 [arrowhead=none, color="black", style=dashed]
    node15783 [shape=box, label=<<font color="black">[0] let k = len<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15783 -> node15784 [color="black"]
    node15807_name [shape=none, label=<<font color="black">Block[15807]</font>>]
    node15807_name -> node15807 [arrowhead=none, color="black", style=dashed]
    node15807 [shape=box, label=<<font color="black">[0] [? %12]<BR ALIGN="LEFT"/>[1] return ([number] (+ len argCount))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15807 -> cluster2378_exit [color="black"]
    node15784_name [shape=none, label=<<font color="black">Branch[15784]</font>>]
    node15784_name -> node15784 [arrowhead=none, color="black", style=dashed]
    node15784 [shape=diamond, label=<<font color="black">(&lt; 0 k)</font>> color="black" fillcolor="white", style=filled]
    node15784 -> node15785 [label=<<font color="black">true</font>> color="black"]
    node15784 -> node15800 [label=<<font color="black">false</font>> color="black"]
    node15785_name [shape=none, label=<<font color="black">Call[15785]</font>>]
    node15785_name -> node15785 [arrowhead=none, color="black", style=dashed]
    node15785 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] (- k 1)))</font>> color="black" fillcolor="white", style=filled]
    node15785 -> node15786 [color="black"]
    node15800_name [shape=none, label=<<font color="black">Block[15800]</font>>]
    node15800_name -> node15800 [arrowhead=none, color="black", style=dashed]
    node15800 [shape=box, label=<<font color="black">[0] let j = 0.0f<BR ALIGN="LEFT"/>[1] %9 = items<BR ALIGN="LEFT"/>[2] %8 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15800 -> node15801 [color="black"]
    node15786_name [shape=none, label=<<font color="black">Block[15786]</font>>]
    node15786_name -> node15786 [arrowhead=none, color="black", style=dashed]
    node15786 [shape=box, label=<<font color="black">[0] let from = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15786 -> node15787 [color="black"]
    node15801_name [shape=none, label=<<font color="black">Branch[15801]</font>>]
    node15801_name -> node15801 [arrowhead=none, color="black", style=dashed]
    node15801 [shape=diamond, label=<<font color="black">(&lt; %8 %9.length)</font>> color="black" fillcolor="white", style=filled]
    node15801 -> node15802 [label=<<font color="black">true</font>> color="black"]
    node15801 -> node15806 [label=<<font color="black">false</font>> color="black"]
    node15787_name [shape=none, label=<<font color="black">Call[15787]</font>>]
    node15787_name -> node15787 [arrowhead=none, color="black", style=dashed]
    node15787 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] (- (+ k argCount) 1)))</font>> color="black" fillcolor="white", style=filled]
    node15787 -> node15788 [color="black"]
    node15802_name [shape=none, label=<<font color="black">Block[15802]</font>>]
    node15802_name -> node15802 [arrowhead=none, color="black", style=dashed]
    node15802 [shape=box, label=<<font color="black">[0] let E = %9[%8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15802 -> node15803 [color="black"]
    node15788_name [shape=none, label=<<font color="black">Block[15788]</font>>]
    node15788_name -> node15788 [arrowhead=none, color="black", style=dashed]
    node15788 [shape=box, label=<<font color="black">[0] let to = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15788 -> node15789 [color="black"]
    node15803_name [shape=none, label=<<font color="black">Call[15803]</font>>]
    node15803_name -> node15803 [arrowhead=none, color="black", style=dashed]
    node15803 [shape=cds, label=<<font color="black">%10 = clo&lt;ToString&gt;(j)</font>> color="black" fillcolor="white", style=filled]
    node15803 -> node15804 [color="black"]
    node15789_name [shape=none, label=<<font color="black">Call[15789]</font>>]
    node15789_name -> node15789 [arrowhead=none, color="black", style=dashed]
    node15789 [shape=cds, label=<<font color="black">%4 = clo&lt;HasProperty&gt;(O, from)</font>> color="black" fillcolor="white", style=filled]
    node15789 -> node15790 [color="black"]
    node15804_name [shape=none, label=<<font color="black">Call[15804]</font>>]
    node15804_name -> node15804 [arrowhead=none, color="black", style=dashed]
    node15804 [shape=cds, label=<<font color="black">%11 = clo&lt;Set&gt;(O, [! %10], E, true)</font>> color="black" fillcolor="white", style=filled]
    node15804 -> node15805 [color="black"]
    node15790_name [shape=none, label=<<font color="black">Block[15790]</font>>]
    node15790_name -> node15790 [arrowhead=none, color="black", style=dashed]
    node15790 [shape=box, label=<<font color="black">[0] let fromPresent = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15790 -> node15791 [color="black"]
    node15805_name [shape=none, label=<<font color="black">Block[15805]</font>>]
    node15805_name -> node15805 [arrowhead=none, color="black", style=dashed]
    node15805 [shape=box, label=<<font color="black">[0] [? %11]<BR ALIGN="LEFT"/>[1] j = (+ j 1.0f)<BR ALIGN="LEFT"/>[2] %8 = (+ %8 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15805 -> node15801 [color="black"]
    node15791_name [shape=none, label=<<font color="black">Branch[15791]</font>>]
    node15791_name -> node15791 [arrowhead=none, color="black", style=dashed]
    node15791 [shape=diamond, label=<<font color="black">(= fromPresent true)</font>> color="black" fillcolor="white", style=filled]
    node15791 -> node15792 [label=<<font color="black">true</font>> color="black"]
    node15791 -> node15796 [label=<<font color="black">false</font>> color="black"]
    node15792_name [shape=none, label=<<font color="black">Call[15792]</font>>]
    node15792_name -> node15792 [arrowhead=none, color="black", style=dashed]
    node15792 [shape=cds, label=<<font color="black">%5 = clo&lt;Get&gt;(O, from)</font>> color="black" fillcolor="white", style=filled]
    node15792 -> node15793 [color="black"]
    node15796_name [shape=none, label=<<font color="black">Block[15796]</font>>]
    node15796_name -> node15796 [arrowhead=none, color="black", style=dashed]
    node15796 [shape=box, label=<<font color="black">[0] assert (= fromPresent false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15796 -> node15797 [color="black"]
    node15793_name [shape=none, label=<<font color="black">Block[15793]</font>>]
    node15793_name -> node15793 [arrowhead=none, color="black", style=dashed]
    node15793 [shape=box, label=<<font color="black">[0] let fromValue = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15793 -> node15794 [color="black"]
    node15797_name [shape=none, label=<<font color="black">Call[15797]</font>>]
    node15797_name -> node15797 [arrowhead=none, color="black", style=dashed]
    node15797 [shape=cds, label=<<font color="black">%7 = clo&lt;DeletePropertyOrThrow&gt;(O, to)</font>> color="black" fillcolor="white", style=filled]
    node15797 -> node15798 [color="black"]
    node15794_name [shape=none, label=<<font color="black">Call[15794]</font>>]
    node15794_name -> node15794 [arrowhead=none, color="black", style=dashed]
    node15794 [shape=cds, label=<<font color="black">%6 = clo&lt;Set&gt;(O, to, fromValue, true)</font>> color="black" fillcolor="white", style=filled]
    node15794 -> node15795 [color="black"]
    node15798_name [shape=none, label=<<font color="black">Block[15798]</font>>]
    node15798_name -> node15798 [arrowhead=none, color="black", style=dashed]
    node15798 [shape=box, label=<<font color="black">[0] [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15798 -> node15799 [color="black"]
    node15795_name [shape=none, label=<<font color="black">Block[15795]</font>>]
    node15795_name -> node15795 [arrowhead=none, color="black", style=dashed]
    node15795 [shape=box, label=<<font color="black">[0] [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15795 -> node15799 [color="black"]
    node15799_name [shape=none, label=<<font color="black">Block[15799]</font>>]
    node15799_name -> node15799 [arrowhead=none, color="black", style=dashed]
    node15799 [shape=box, label=<<font color="black">[0] k = (- k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15799 -> node15784 [color="black"]
  }
}