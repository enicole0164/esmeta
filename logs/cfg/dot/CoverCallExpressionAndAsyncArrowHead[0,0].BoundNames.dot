digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster219 {
    label = "def <SYNTAX>:CoverCallExpressionAndAsyncArrowHead[0,0].BoundNames(this: Ast:CoverCallExpressionAndAsyncArrowHead[0,0]): List[String]"
    style = rounded
    cluster219_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster219_entry_name -> cluster219_entry [arrowhead=none, color="black", style=dashed]
    cluster219_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster219_entry -> node1611 [color="black"]
    cluster219_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster219_exit_name -> cluster219_exit [arrowhead=none, color="black", style=dashed]
    cluster219_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1611_name [shape=none, label=<<font color="black">Block[1611]</font>>]
    node1611_name -> node1611 [arrowhead=none, color="black", style=dashed]
    node1611 [shape=box, label=<<font color="black">[0] let head = (parse this (nt |AsyncArrowHead|[]))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1611 -> node1612 [color="black"]
    node1612_name [shape=none, label=<<font color="black">Call[1612]</font>>]
    node1612_name -> node1612 [arrowhead=none, color="black", style=dashed]
    node1612 [shape=cds, label=<<font color="black">%0 = head-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node1612 -> node1613 [color="black"]
    node1613_name [shape=none, label=<<font color="black">Block[1613]</font>>]
    node1613_name -> node1613 [arrowhead=none, color="black", style=dashed]
    node1613 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1613 -> cluster219_exit [color="black"]
  }
}