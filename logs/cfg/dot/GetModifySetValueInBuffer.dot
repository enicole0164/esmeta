digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2482 {
    label = "def GetModifySetValueInBuffer(arrayBuffer: Unknown["ArrayBufferOrASharedArrayBuffer"], byteIndex: Unknown["NonnegativeInteger"], type: Unknown["TypedArrayElementType"], value: Number | BigInt, op: Unknown["ReadmodifywriteModificationFunction"], isLittleEndian?: Boolean): Number | BigInt"
    style = rounded
    cluster2482_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2482_entry_name -> cluster2482_entry [arrowhead=none, color="black", style=dashed]
    cluster2482_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2482_entry -> node17451 [color="black"]
    cluster2482_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2482_exit_name -> cluster2482_exit [arrowhead=none, color="black", style=dashed]
    cluster2482_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17451_name [shape=none, label=<<font color="black">Call[17451]</font>>]
    node17451_name -> node17451 [arrowhead=none, color="black", style=dashed]
    node17451 [shape=cds, label=<<font color="black">%0 = clo&lt;IsDetachedBuffer&gt;(arrayBuffer)</font>> color="black" fillcolor="white", style=filled]
    node17451 -> node17452 [color="black"]
    node17452_name [shape=none, label=<<font color="black">Block[17452]</font>>]
    node17452_name -> node17452 [arrowhead=none, color="black", style=dashed]
    node17452 [shape=box, label=<<font color="black">[0] assert (= %0 false)<BR ALIGN="LEFT"/>[1] assert (yet &quot;There are sufficient bytes in _arrayBuffer_ starting at _byteIndex_ to represent a value of _type_.&quot;)<BR ALIGN="LEFT"/>[2] assert (yet &quot;Type(_value_) is BigInt if IsBigIntElementType(_type_) is *true*; otherwise, Type(_value_) is Number.&quot;)<BR ALIGN="LEFT"/>[3] let block = arrayBuffer.ArrayBufferData<BR ALIGN="LEFT"/>[4] (yet &quot;Let _elementSize_ be the Element Size value specified in &lt;emu-xref href=\&quot;#table-the-typedarray-constructors\&quot;&gt;&lt;/emu-xref&gt; for Element Type _type_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17452 -> node17453 [color="black"]
    node17453_name [shape=none, label=<<font color="black">Branch[17453]</font>>]
    node17453_name -> node17453 [arrowhead=none, color="black", style=dashed]
    node17453 [shape=diamond, label=<<font color="black">(= isLittleEndian absent)</font>> color="black" fillcolor="white", style=filled]
    node17453 -> node17454 [label=<<font color="black">true</font>> color="black"]
    node17453 -> node17455 [label=<<font color="black">false</font>> color="black"]
    node17454_name [shape=none, label=<<font color="black">Block[17454]</font>>]
    node17454_name -> node17454 [arrowhead=none, color="black", style=dashed]
    node17454 [shape=box, label=<<font color="black">[0] (yet &quot;set _isLittleEndian_ to the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17454 -> node17455 [color="black"]
    node17455_name [shape=none, label=<<font color="black">Call[17455]</font>>]
    node17455_name -> node17455 [arrowhead=none, color="black", style=dashed]
    node17455 [shape=cds, label=<<font color="black">%1 = clo&lt;NumericToRawBytes&gt;(type, value, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17455 -> node17456 [color="black"]
    node17456_name [shape=none, label=<<font color="black">Block[17456]</font>>]
    node17456_name -> node17456 [arrowhead=none, color="black", style=dashed]
    node17456 [shape=box, label=<<font color="black">[0] let rawBytes = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17456 -> node17457 [color="black"]
    node17457_name [shape=none, label=<<font color="black">Call[17457]</font>>]
    node17457_name -> node17457 [arrowhead=none, color="black", style=dashed]
    node17457 [shape=cds, label=<<font color="black">%2 = clo&lt;IsSharedArrayBuffer&gt;(arrayBuffer)</font>> color="black" fillcolor="white", style=filled]
    node17457 -> node17458 [color="black"]
    node17458_name [shape=none, label=<<font color="black">Branch[17458]</font>>]
    node17458_name -> node17458 [arrowhead=none, color="black", style=dashed]
    node17458 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node17458 -> node17459 [label=<<font color="black">true</font>> color="black"]
    node17458 -> node17460 [label=<<font color="black">false</font>> color="black"]
    node17459_name [shape=none, label=<<font color="black">Block[17459]</font>>]
    node17459_name -> node17459 [arrowhead=none, color="black", style=dashed]
    node17459 [shape=box, label=<<font color="black">[0] (yet &quot;Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _rawBytesRead_ be a List of length _elementSize_ whose elements are nondeterministically chosen byte values.&quot;)<BR ALIGN="LEFT"/>[3] nop<BR ALIGN="LEFT"/>[4] let rmwEvent = (new ReadModifyWriteSharedMemory(&quot;Order&quot; -&gt; ~SeqCst~, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; block, &quot;ByteIndex&quot; -&gt; byteIndex, &quot;ElementSize&quot; -&gt; elementSize, &quot;Payload&quot; -&gt; rawBytes, &quot;ModifyOp&quot; -&gt; op))[#1148]<BR ALIGN="LEFT"/>[5] push eventList &lt; rmwEvent<BR ALIGN="LEFT"/>[6] push execution.ChosenValues &lt; (new ChosenValueRecord(&quot;Event&quot; -&gt; rmwEvent, &quot;ChosenValue&quot; -&gt; rawBytesRead))[#1149]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17459 -> node17463 [color="black"]
    node17460_name [shape=none, label=<<font color="black">Block[17460]</font>>]
    node17460_name -> node17460 [arrowhead=none, color="black", style=dashed]
    node17460 [shape=box, label=<<font color="black">[0] (yet &quot;Let _rawBytesRead_ be a List of length _elementSize_ whose elements are the sequence of _elementSize_ bytes starting with _block_[_byteIndex_].&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17460 -> node17461 [color="black"]
    node17463_name [shape=none, label=<<font color="black">Call[17463]</font>>]
    node17463_name -> node17463 [arrowhead=none, color="black", style=dashed]
    node17463 [shape=cds, label=<<font color="black">%4 = clo&lt;RawBytesToNumeric&gt;(type, rawBytesRead, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17463 -> node17464 [color="black"]
    node17461_name [shape=none, label=<<font color="black">Call[17461]</font>>]
    node17461_name -> node17461 [arrowhead=none, color="black", style=dashed]
    node17461 [shape=cds, label=<<font color="black">%3 = op(rawBytesRead, rawBytes)</font>> color="black" fillcolor="white", style=filled]
    node17461 -> node17462 [color="black"]
    node17464_name [shape=none, label=<<font color="black">Block[17464]</font>>]
    node17464_name -> node17464 [arrowhead=none, color="black", style=dashed]
    node17464 [shape=box, label=<<font color="black">[0] return %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17464 -> cluster2482_exit [color="black"]
    node17462_name [shape=none, label=<<font color="black">Block[17462]</font>>]
    node17462_name -> node17462 [arrowhead=none, color="black", style=dashed]
    node17462 [shape=box, label=<<font color="black">[0] let rawBytesModified = %3<BR ALIGN="LEFT"/>[1] (yet &quot;Store the individual bytes of _rawBytesModified_ into _block_, starting at _block_[_byteIndex_].&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17462 -> node17463 [color="black"]
  }
}