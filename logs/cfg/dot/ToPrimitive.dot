digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster76 {
    label = "def ToPrimitive(input: ESValue, preferredType?: Const[~number~, ~string~]): Normal[ESValue] | Abrupt"
    style = rounded
    cluster76_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster76_entry_name -> cluster76_entry [arrowhead=none, color="black", style=dashed]
    cluster76_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster76_entry -> node587 [color="black"]
    cluster76_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster76_exit_name -> cluster76_exit [arrowhead=none, color="black", style=dashed]
    cluster76_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node587_name [shape=none, label=<<font color="black">Branch[587]</font>>]
    node587_name -> node587 [arrowhead=none, color="black", style=dashed]
    node587 [shape=diamond, label=<<font color="black">(= (typeof input) @Object)</font>> color="black" fillcolor="white", style=filled]
    node587 -> node588 [label=<<font color="black">true</font>> color="black"]
    node587 -> node605 [label=<<font color="black">false</font>> color="black"]
    node588_name [shape=none, label=<<font color="black">Call[588]</font>>]
    node588_name -> node588 [arrowhead=none, color="black", style=dashed]
    node588 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(input, @SYMBOL.toPrimitive)</font>> color="black" fillcolor="white", style=filled]
    node588 -> node589 [color="black"]
    node605_name [shape=none, label=<<font color="black">Block[605]</font>>]
    node605_name -> node605 [arrowhead=none, color="black", style=dashed]
    node605 [shape=box, label=<<font color="black">[0] return input<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node605 -> cluster76_exit [color="black"]
    node589_name [shape=none, label=<<font color="black">Block[589]</font>>]
    node589_name -> node589 [arrowhead=none, color="black", style=dashed]
    node589 [shape=box, label=<<font color="black">[0] let exoticToPrim = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node589 -> node590 [color="black"]
    node590_name [shape=none, label=<<font color="black">Branch[590]</font>>]
    node590_name -> node590 [arrowhead=none, color="black", style=dashed]
    node590 [shape=diamond, label=<<font color="black">(! (= exoticToPrim undefined))</font>> color="black" fillcolor="white", style=filled]
    node590 -> node591 [label=<<font color="black">true</font>> color="black"]
    node590 -> node601 [label=<<font color="black">false</font>> color="black"]
    node591_name [shape=none, label=<<font color="black">Branch[591]</font>>]
    node591_name -> node591 [arrowhead=none, color="black", style=dashed]
    node591 [shape=diamond, label=<<font color="black">(= preferredType absent)</font>> color="black" fillcolor="white", style=filled]
    node591 -> node592 [label=<<font color="black">true</font>> color="black"]
    node591 -> node593 [label=<<font color="black">false</font>> color="black"]
    node601_name [shape=none, label=<<font color="black">Branch[601]</font>>]
    node601_name -> node601 [arrowhead=none, color="black", style=dashed]
    node601 [shape=diamond, label=<<font color="black">(= preferredType absent)</font>> color="black" fillcolor="white", style=filled]
    node601 -> node602 [label=<<font color="black">true</font>> color="black"]
    node601 -> node603 [label=<<font color="black">false</font>> color="black"]
    node592_name [shape=none, label=<<font color="black">Block[592]</font>>]
    node592_name -> node592 [arrowhead=none, color="black", style=dashed]
    node592 [shape=box, label=<<font color="black">[0] let hint = &quot;default&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node592 -> node596 [color="black"]
    node593_name [shape=none, label=<<font color="black">Branch[593]</font>>]
    node593_name -> node593 [arrowhead=none, color="black", style=dashed]
    node593 [shape=diamond, label=<<font color="black">(= preferredType ~string~)</font>> color="black" fillcolor="white", style=filled]
    node593 -> node594 [label=<<font color="black">true</font>> color="black"]
    node593 -> node595 [label=<<font color="black">false</font>> color="black"]
    node602_name [shape=none, label=<<font color="black">Block[602]</font>>]
    node602_name -> node602 [arrowhead=none, color="black", style=dashed]
    node602 [shape=box, label=<<font color="black">[0] let preferredType = ~number~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node602 -> node603 [color="black"]
    node603_name [shape=none, label=<<font color="black">Call[603]</font>>]
    node603_name -> node603 [arrowhead=none, color="black", style=dashed]
    node603 [shape=cds, label=<<font color="black">%2 = clo&lt;OrdinaryToPrimitive&gt;(input, preferredType)</font>> color="black" fillcolor="white", style=filled]
    node603 -> node604 [color="black"]
    node596_name [shape=none, label=<<font color="black">Call[596]</font>>]
    node596_name -> node596 [arrowhead=none, color="black", style=dashed]
    node596 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(exoticToPrim, input, (new [hint])[#27])</font>> color="black" fillcolor="white", style=filled]
    node596 -> node597 [color="black"]
    node594_name [shape=none, label=<<font color="black">Block[594]</font>>]
    node594_name -> node594 [arrowhead=none, color="black", style=dashed]
    node594 [shape=box, label=<<font color="black">[0] let hint = &quot;string&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node594 -> node596 [color="black"]
    node595_name [shape=none, label=<<font color="black">Block[595]</font>>]
    node595_name -> node595 [arrowhead=none, color="black", style=dashed]
    node595 [shape=box, label=<<font color="black">[0] assert (= preferredType ~number~)<BR ALIGN="LEFT"/>[1] let hint = &quot;number&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node595 -> node596 [color="black"]
    node604_name [shape=none, label=<<font color="black">Block[604]</font>>]
    node604_name -> node604 [arrowhead=none, color="black", style=dashed]
    node604 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node604 -> cluster76_exit [color="black"]
    node597_name [shape=none, label=<<font color="black">Block[597]</font>>]
    node597_name -> node597 [arrowhead=none, color="black", style=dashed]
    node597 [shape=box, label=<<font color="black">[0] let result = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node597 -> node598 [color="black"]
    node598_name [shape=none, label=<<font color="black">Branch[598]</font>>]
    node598_name -> node598 [arrowhead=none, color="black", style=dashed]
    node598 [shape=diamond, label=<<font color="black">(! (= (typeof result) @Object))</font>> color="black" fillcolor="white", style=filled]
    node598 -> node599 [label=<<font color="black">true</font>> color="black"]
    node598 -> node600 [label=<<font color="black">false</font>> color="black"]
    node599_name [shape=none, label=<<font color="black">Block[599]</font>>]
    node599_name -> node599 [arrowhead=none, color="black", style=dashed]
    node599 [shape=box, label=<<font color="black">[0] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node599 -> cluster76_exit [color="black"]
    node600_name [shape=none, label=<<font color="black">Block[600]</font>>]
    node600_name -> node600 [arrowhead=none, color="black", style=dashed]
    node600 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#28])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node600 -> cluster76_exit [color="black"]
  }
}