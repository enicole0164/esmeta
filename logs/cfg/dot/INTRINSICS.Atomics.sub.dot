digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2541 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.sub(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2541_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2541_entry_name -> cluster2541_entry [arrowhead=none, color="black", style=dashed]
    cluster2541_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2541_entry -> node18163 [color="black"]
    cluster2541_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2541_exit_name -> cluster2541_exit [arrowhead=none, color="black", style=dashed]
    cluster2541_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18163_name [shape=none, label=<<font color="black">Branch[18163]</font>>]
    node18163_name -> node18163 [arrowhead=none, color="black", style=dashed]
    node18163 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18163 -> node18164 [label=<<font color="black">true</font>> color="black"]
    node18163 -> node18165 [label=<<font color="black">false</font>> color="black"]
    node18164_name [shape=none, label=<<font color="black">Block[18164]</font>>]
    node18164_name -> node18164 [arrowhead=none, color="black", style=dashed]
    node18164 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18164 -> node18166 [color="black"]
    node18165_name [shape=none, label=<<font color="black">Block[18165]</font>>]
    node18165_name -> node18165 [arrowhead=none, color="black", style=dashed]
    node18165 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18165 -> node18166 [color="black"]
    node18166_name [shape=none, label=<<font color="black">Branch[18166]</font>>]
    node18166_name -> node18166 [arrowhead=none, color="black", style=dashed]
    node18166 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18166 -> node18167 [label=<<font color="black">true</font>> color="black"]
    node18166 -> node18168 [label=<<font color="black">false</font>> color="black"]
    node18167_name [shape=none, label=<<font color="black">Block[18167]</font>>]
    node18167_name -> node18167 [arrowhead=none, color="black", style=dashed]
    node18167 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18167 -> node18169 [color="black"]
    node18168_name [shape=none, label=<<font color="black">Block[18168]</font>>]
    node18168_name -> node18168 [arrowhead=none, color="black", style=dashed]
    node18168 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18168 -> node18169 [color="black"]
    node18169_name [shape=none, label=<<font color="black">Branch[18169]</font>>]
    node18169_name -> node18169 [arrowhead=none, color="black", style=dashed]
    node18169 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18169 -> node18170 [label=<<font color="black">true</font>> color="black"]
    node18169 -> node18171 [label=<<font color="black">false</font>> color="black"]
    node18170_name [shape=none, label=<<font color="black">Block[18170]</font>>]
    node18170_name -> node18170 [arrowhead=none, color="black", style=dashed]
    node18170 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18170 -> node18172 [color="black"]
    node18171_name [shape=none, label=<<font color="black">Block[18171]</font>>]
    node18171_name -> node18171 [arrowhead=none, color="black", style=dashed]
    node18171 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18171 -> node18172 [color="black"]
    node18172_name [shape=none, label=<<font color="black">Call[18172]</font>>]
    node18172_name -> node18172 [arrowhead=none, color="black", style=dashed]
    node18172 [shape=cds, label=<<font color="black">%0 = clo&lt;TypedArrayElementType&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18172 -> node18173 [color="black"]
    node18173_name [shape=none, label=<<font color="black">Block[18173]</font>>]
    node18173_name -> node18173 [arrowhead=none, color="black", style=dashed]
    node18173 [shape=box, label=<<font color="black">[0] let type = %0<BR ALIGN="LEFT"/>[1] (yet &quot;Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _subtract_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called:\n  1. Let _x_ be RawBytesToNumeric(_type_, _xBytes_, _isLittleEndian_).\n  1. Let _y_ be RawBytesToNumeric(_type_, _yBytes_, _isLittleEndian_).\n  1. If Type(_x_) is Number, then\n    1. Let _difference_ be Number::subtract(_x_, _y_).\n  1. Else,\n    1. Assert: Type(_x_) is BigInt.\n    1. Let _difference_ be BigInt::subtract(_x_, _y_).\n  1. Let _differenceBytes_ be NumericToRawBytes(_type_, _difference_, _isLittleEndian_).\n  1. Assert: _differenceBytes_, _xBytes_, and _yBytes_ have the same number of elements..\n  1. Return _differenceBytes_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18173 -> node18174 [color="black"]
    node18174_name [shape=none, label=<<font color="black">Call[18174]</font>>]
    node18174_name -> node18174 [arrowhead=none, color="black", style=dashed]
    node18174 [shape=cds, label=<<font color="black">%1 = clo&lt;AtomicReadModifyWrite&gt;(typedArray, index, value, subtract)</font>> color="black" fillcolor="white", style=filled]
    node18174 -> node18175 [color="black"]
    node18175_name [shape=none, label=<<font color="black">Block[18175]</font>>]
    node18175_name -> node18175 [arrowhead=none, color="black", style=dashed]
    node18175 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18175 -> cluster2541_exit [color="black"]
  }
}