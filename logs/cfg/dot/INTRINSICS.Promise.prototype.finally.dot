digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2603 {
    label = "def <BUILTIN>:INTRINSICS.Promise.prototype.finally(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2603_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2603_entry_name -> cluster2603_entry [arrowhead=none, color="black", style=dashed]
    cluster2603_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2603_entry -> node19230 [color="black"]
    cluster2603_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2603_exit_name -> cluster2603_exit [arrowhead=none, color="black", style=dashed]
    cluster2603_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19230_name [shape=none, label=<<font color="black">Branch[19230]</font>>]
    node19230_name -> node19230 [arrowhead=none, color="black", style=dashed]
    node19230 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19230 -> node19231 [label=<<font color="black">true</font>> color="black"]
    node19230 -> node19232 [label=<<font color="black">false</font>> color="black"]
    node19231_name [shape=none, label=<<font color="black">Block[19231]</font>>]
    node19231_name -> node19231 [arrowhead=none, color="black", style=dashed]
    node19231 [shape=box, label=<<font color="black">[0] let onFinally = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19231 -> node19233 [color="black"]
    node19232_name [shape=none, label=<<font color="black">Block[19232]</font>>]
    node19232_name -> node19232 [arrowhead=none, color="black", style=dashed]
    node19232 [shape=box, label=<<font color="black">[0] let onFinally = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19232 -> node19233 [color="black"]
    node19233_name [shape=none, label=<<font color="black">Block[19233]</font>>]
    node19233_name -> node19233 [arrowhead=none, color="black", style=dashed]
    node19233 [shape=box, label=<<font color="black">[0] let promise = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19233 -> node19234 [color="black"]
    node19234_name [shape=none, label=<<font color="black">Branch[19234]</font>>]
    node19234_name -> node19234 [arrowhead=none, color="black", style=dashed]
    node19234 [shape=diamond, label=<<font color="black">(! (= (typeof promise) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19234 -> node19235 [label=<<font color="black">true</font>> color="black"]
    node19234 -> node19236 [label=<<font color="black">false</font>> color="black"]
    node19235_name [shape=none, label=<<font color="black">Block[19235]</font>>]
    node19235_name -> node19235 [arrowhead=none, color="black", style=dashed]
    node19235 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1310])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19235 -> cluster2603_exit [color="black"]
    node19236_name [shape=none, label=<<font color="black">Call[19236]</font>>]
    node19236_name -> node19236 [arrowhead=none, color="black", style=dashed]
    node19236 [shape=cds, label=<<font color="black">%0 = clo&lt;SpeciesConstructor&gt;(promise, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19236 -> node19237 [color="black"]
    node19237_name [shape=none, label=<<font color="black">Block[19237]</font>>]
    node19237_name -> node19237 [arrowhead=none, color="black", style=dashed]
    node19237 [shape=box, label=<<font color="black">[0] let C = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19237 -> node19238 [color="black"]
    node19238_name [shape=none, label=<<font color="black">Call[19238]</font>>]
    node19238_name -> node19238 [arrowhead=none, color="black", style=dashed]
    node19238 [shape=cds, label=<<font color="black">%1 = clo&lt;IsConstructor&gt;(C)</font>> color="black" fillcolor="white", style=filled]
    node19238 -> node19239 [color="black"]
    node19239_name [shape=none, label=<<font color="black">Block[19239]</font>>]
    node19239_name -> node19239 [arrowhead=none, color="black", style=dashed]
    node19239 [shape=box, label=<<font color="black">[0] assert (= %1 true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19239 -> node19240 [color="black"]
    node19240_name [shape=none, label=<<font color="black">Call[19240]</font>>]
    node19240_name -> node19240 [arrowhead=none, color="black", style=dashed]
    node19240 [shape=cds, label=<<font color="black">%2 = clo&lt;IsCallable&gt;(onFinally)</font>> color="black" fillcolor="white", style=filled]
    node19240 -> node19241 [color="black"]
    node19241_name [shape=none, label=<<font color="black">Branch[19241]</font>>]
    node19241_name -> node19241 [arrowhead=none, color="black", style=dashed]
    node19241 [shape=diamond, label=<<font color="black">(= %2 false)</font>> color="black" fillcolor="white", style=filled]
    node19241 -> node19242 [label=<<font color="black">true</font>> color="black"]
    node19241 -> node19243 [label=<<font color="black">false</font>> color="black"]
    node19242_name [shape=none, label=<<font color="black">Block[19242]</font>>]
    node19242_name -> node19242 [arrowhead=none, color="black", style=dashed]
    node19242 [shape=box, label=<<font color="black">[0] let thenFinally = onFinally<BR ALIGN="LEFT"/>[1] let catchFinally = onFinally<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19242 -> node19248 [color="black"]
    node19243_name [shape=none, label=<<font color="black">Block[19243]</font>>]
    node19243_name -> node19243 [arrowhead=none, color="black", style=dashed]
    node19243 [shape=box, label=<<font color="black">[0] let thenFinallyClosure = clo&lt;INTRINSICS.Promise.prototype.finally:clo0, [onFinally, C]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19243 -> node19244 [color="black"]
    node19248_name [shape=none, label=<<font color="black">Call[19248]</font>>]
    node19248_name -> node19248 [arrowhead=none, color="black", style=dashed]
    node19248 [shape=cds, label=<<font color="black">%5 = clo&lt;Invoke&gt;(promise, &quot;then&quot;, (new [thenFinally, catchFinally])[#1313])</font>> color="black" fillcolor="white", style=filled]
    node19248 -> node19249 [color="black"]
    node19244_name [shape=none, label=<<font color="black">Call[19244]</font>>]
    node19244_name -> node19244 [arrowhead=none, color="black", style=dashed]
    node19244 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateBuiltinFunction&gt;(thenFinallyClosure, 1, &quot;&quot;, (new [])[#1311])</font>> color="black" fillcolor="white", style=filled]
    node19244 -> node19245 [color="black"]
    node19249_name [shape=none, label=<<font color="black">Block[19249]</font>>]
    node19249_name -> node19249 [arrowhead=none, color="black", style=dashed]
    node19249 [shape=box, label=<<font color="black">[0] return [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19249 -> cluster2603_exit [color="black"]
    node19245_name [shape=none, label=<<font color="black">Block[19245]</font>>]
    node19245_name -> node19245 [arrowhead=none, color="black", style=dashed]
    node19245 [shape=box, label=<<font color="black">[0] let thenFinally = %3<BR ALIGN="LEFT"/>[1] let catchFinallyClosure = clo&lt;INTRINSICS.Promise.prototype.finally:clo1, [onFinally, C]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19245 -> node19246 [color="black"]
    node19246_name [shape=none, label=<<font color="black">Call[19246]</font>>]
    node19246_name -> node19246 [arrowhead=none, color="black", style=dashed]
    node19246 [shape=cds, label=<<font color="black">%4 = clo&lt;CreateBuiltinFunction&gt;(catchFinallyClosure, 1, &quot;&quot;, (new [])[#1312])</font>> color="black" fillcolor="white", style=filled]
    node19246 -> node19247 [color="black"]
    node19247_name [shape=none, label=<<font color="black">Block[19247]</font>>]
    node19247_name -> node19247 [arrowhead=none, color="black", style=dashed]
    node19247 [shape=box, label=<<font color="black">[0] let catchFinally = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19247 -> node19248 [color="black"]
  }
}