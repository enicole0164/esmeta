digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2538 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.load(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2538_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2538_entry_name -> cluster2538_entry [arrowhead=none, color="black", style=dashed]
    cluster2538_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2538_entry -> node18107 [color="black"]
    cluster2538_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2538_exit_name -> cluster2538_exit [arrowhead=none, color="black", style=dashed]
    cluster2538_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18107_name [shape=none, label=<<font color="black">Branch[18107]</font>>]
    node18107_name -> node18107 [arrowhead=none, color="black", style=dashed]
    node18107 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18107 -> node18108 [label=<<font color="black">true</font>> color="black"]
    node18107 -> node18109 [label=<<font color="black">false</font>> color="black"]
    node18108_name [shape=none, label=<<font color="black">Block[18108]</font>>]
    node18108_name -> node18108 [arrowhead=none, color="black", style=dashed]
    node18108 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18108 -> node18110 [color="black"]
    node18109_name [shape=none, label=<<font color="black">Block[18109]</font>>]
    node18109_name -> node18109 [arrowhead=none, color="black", style=dashed]
    node18109 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18109 -> node18110 [color="black"]
    node18110_name [shape=none, label=<<font color="black">Branch[18110]</font>>]
    node18110_name -> node18110 [arrowhead=none, color="black", style=dashed]
    node18110 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18110 -> node18111 [label=<<font color="black">true</font>> color="black"]
    node18110 -> node18112 [label=<<font color="black">false</font>> color="black"]
    node18111_name [shape=none, label=<<font color="black">Block[18111]</font>>]
    node18111_name -> node18111 [arrowhead=none, color="black", style=dashed]
    node18111 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18111 -> node18113 [color="black"]
    node18112_name [shape=none, label=<<font color="black">Block[18112]</font>>]
    node18112_name -> node18112 [arrowhead=none, color="black", style=dashed]
    node18112 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18112 -> node18113 [color="black"]
    node18113_name [shape=none, label=<<font color="black">Call[18113]</font>>]
    node18113_name -> node18113 [arrowhead=none, color="black", style=dashed]
    node18113 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateIntegerTypedArray&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18113 -> node18114 [color="black"]
    node18114_name [shape=none, label=<<font color="black">Block[18114]</font>>]
    node18114_name -> node18114 [arrowhead=none, color="black", style=dashed]
    node18114 [shape=box, label=<<font color="black">[0] let buffer = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18114 -> node18115 [color="black"]
    node18115_name [shape=none, label=<<font color="black">Call[18115]</font>>]
    node18115_name -> node18115 [arrowhead=none, color="black", style=dashed]
    node18115 [shape=cds, label=<<font color="black">%1 = clo&lt;ValidateAtomicAccess&gt;(typedArray, index)</font>> color="black" fillcolor="white", style=filled]
    node18115 -> node18116 [color="black"]
    node18116_name [shape=none, label=<<font color="black">Block[18116]</font>>]
    node18116_name -> node18116 [arrowhead=none, color="black", style=dashed]
    node18116 [shape=box, label=<<font color="black">[0] let indexedPosition = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18116 -> node18117 [color="black"]
    node18117_name [shape=none, label=<<font color="black">Call[18117]</font>>]
    node18117_name -> node18117 [arrowhead=none, color="black", style=dashed]
    node18117 [shape=cds, label=<<font color="black">%2 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node18117 -> node18118 [color="black"]
    node18118_name [shape=none, label=<<font color="black">Branch[18118]</font>>]
    node18118_name -> node18118 [arrowhead=none, color="black", style=dashed]
    node18118 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node18118 -> node18119 [label=<<font color="black">true</font>> color="black"]
    node18118 -> node18120 [label=<<font color="black">false</font>> color="black"]
    node18119_name [shape=none, label=<<font color="black">Block[18119]</font>>]
    node18119_name -> node18119 [arrowhead=none, color="black", style=dashed]
    node18119 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1189])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18119 -> cluster2538_exit [color="black"]
    node18120_name [shape=none, label=<<font color="black">Block[18120]</font>>]
    node18120_name -> node18120 [arrowhead=none, color="black", style=dashed]
    node18120 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18120 -> node18121 [color="black"]
    node18121_name [shape=none, label=<<font color="black">Call[18121]</font>>]
    node18121_name -> node18121 [arrowhead=none, color="black", style=dashed]
    node18121 [shape=cds, label=<<font color="black">%3 = clo&lt;TypedArrayElementType&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18121 -> node18122 [color="black"]
    node18122_name [shape=none, label=<<font color="black">Block[18122]</font>>]
    node18122_name -> node18122 [arrowhead=none, color="black", style=dashed]
    node18122 [shape=box, label=<<font color="black">[0] let elementType = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18122 -> node18123 [color="black"]
    node18123_name [shape=none, label=<<font color="black">Call[18123]</font>>]
    node18123_name -> node18123 [arrowhead=none, color="black", style=dashed]
    node18123 [shape=cds, label=<<font color="black">%4 = clo&lt;GetValueFromBuffer&gt;(buffer, indexedPosition, elementType, true, ~SeqCst~)</font>> color="black" fillcolor="white", style=filled]
    node18123 -> node18124 [color="black"]
    node18124_name [shape=none, label=<<font color="black">Block[18124]</font>>]
    node18124_name -> node18124 [arrowhead=none, color="black", style=dashed]
    node18124 [shape=box, label=<<font color="black">[0] return %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18124 -> cluster2538_exit [color="black"]
  }
}