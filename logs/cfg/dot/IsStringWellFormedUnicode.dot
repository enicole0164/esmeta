digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster122 {
    label = "def IsStringWellFormedUnicode(string: String): Boolean"
    style = rounded
    cluster122_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster122_entry_name -> cluster122_entry [arrowhead=none, color="black", style=dashed]
    cluster122_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster122_entry -> node921 [color="black"]
    cluster122_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster122_exit_name -> cluster122_exit [arrowhead=none, color="black", style=dashed]
    cluster122_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node921_name [shape=none, label=<<font color="black">Block[921]</font>>]
    node921_name -> node921 [arrowhead=none, color="black", style=dashed]
    node921 [shape=box, label=<<font color="black">[0] let strLen = string.length<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node921 -> node922 [color="black"]
    node922_name [shape=none, label=<<font color="black">Branch[922]</font>>]
    node922_name -> node922 [arrowhead=none, color="black", style=dashed]
    node922 [shape=diamond, label=<<font color="black">(! (== k strLen))</font>> color="black" fillcolor="white", style=filled]
    node922 -> node923 [label=<<font color="black">true</font>> color="black"]
    node922 -> node928 [label=<<font color="black">false</font>> color="black"]
    node923_name [shape=none, label=<<font color="black">Call[923]</font>>]
    node923_name -> node923 [arrowhead=none, color="black", style=dashed]
    node923 [shape=cds, label=<<font color="black">%0 = clo&lt;CodePointAt&gt;(string, k)</font>> color="black" fillcolor="white", style=filled]
    node923 -> node924 [color="black"]
    node928_name [shape=none, label=<<font color="black">Block[928]</font>>]
    node928_name -> node928 [arrowhead=none, color="black", style=dashed]
    node928 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node928 -> cluster122_exit [color="black"]
    node924_name [shape=none, label=<<font color="black">Block[924]</font>>]
    node924_name -> node924 [arrowhead=none, color="black", style=dashed]
    node924 [shape=box, label=<<font color="black">[0] let cp = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node924 -> node925 [color="black"]
    node925_name [shape=none, label=<<font color="black">Branch[925]</font>>]
    node925_name -> node925 [arrowhead=none, color="black", style=dashed]
    node925 [shape=diamond, label=<<font color="black">(= cp.IsUnpairedSurrogate true)</font>> color="black" fillcolor="white", style=filled]
    node925 -> node926 [label=<<font color="black">true</font>> color="black"]
    node925 -> node927 [label=<<font color="black">false</font>> color="black"]
    node926_name [shape=none, label=<<font color="black">Block[926]</font>>]
    node926_name -> node926 [arrowhead=none, color="black", style=dashed]
    node926 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node926 -> cluster122_exit [color="black"]
    node927_name [shape=none, label=<<font color="black">Block[927]</font>>]
    node927_name -> node927 [arrowhead=none, color="black", style=dashed]
    node927 [shape=box, label=<<font color="black">[0] k = (+ k cp.CodeUnitCount)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node927 -> node922 [color="black"]
  }
}