digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster104 {
    label = "def ToUint8(argument: Unknown): Unknown["EitherANormalCompletionContainingAnIntegralNumberOrAnAbruptCompletion"]"
    style = rounded
    cluster104_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster104_entry_name -> cluster104_entry [arrowhead=none, color="black", style=dashed]
    cluster104_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster104_entry -> node791 [color="black"]
    cluster104_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster104_exit_name -> cluster104_exit [arrowhead=none, color="black", style=dashed]
    cluster104_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node791_name [shape=none, label=<<font color="black">Call[791]</font>>]
    node791_name -> node791 [arrowhead=none, color="black", style=dashed]
    node791 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node791 -> node792 [color="black"]
    node792_name [shape=none, label=<<font color="black">Block[792]</font>>]
    node792_name -> node792 [arrowhead=none, color="black", style=dashed]
    node792 [shape=box, label=<<font color="black">[0] let number = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node792 -> node793 [color="black"]
    node793_name [shape=none, label=<<font color="black">Branch[793]</font>>]
    node793_name -> node793 [arrowhead=none, color="black", style=dashed]
    node793 [shape=diamond, label=<<font color="black">(|| (|| (|| (|| (= number NaN) (= number 0.0f)) (= number -0.0f)) (= number +INF)) (= number -INF))</font>> color="black" fillcolor="white", style=filled]
    node793 -> node794 [label=<<font color="black">true</font>> color="black"]
    node793 -> node795 [label=<<font color="black">false</font>> color="black"]
    node794_name [shape=none, label=<<font color="black">Block[794]</font>>]
    node794_name -> node794 [arrowhead=none, color="black", style=dashed]
    node794 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node794 -> cluster104_exit [color="black"]
    node795_name [shape=none, label=<<font color="black">Block[795]</font>>]
    node795_name -> node795 [arrowhead=none, color="black", style=dashed]
    node795 [shape=box, label=<<font color="black">[0] let int = (floor (abs ([math] number)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node795 -> node796 [color="black"]
    node796_name [shape=none, label=<<font color="black">Branch[796]</font>>]
    node796_name -> node796 [arrowhead=none, color="black", style=dashed]
    node796 [shape=diamond, label=<<font color="black">(&lt; number 0.0f)</font>> color="black" fillcolor="white", style=filled]
    node796 -> node797 [label=<<font color="black">true</font>> color="black"]
    node796 -> node798 [label=<<font color="black">false</font>> color="black"]
    node797_name [shape=none, label=<<font color="black">Block[797]</font>>]
    node797_name -> node797 [arrowhead=none, color="black", style=dashed]
    node797 [shape=box, label=<<font color="black">[0] int = (* -1 int)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node797 -> node798 [color="black"]
    node798_name [shape=none, label=<<font color="black">Block[798]</font>>]
    node798_name -> node798 [arrowhead=none, color="black", style=dashed]
    node798 [shape=box, label=<<font color="black">[0] let int8bit = (% int (** 2 8))<BR ALIGN="LEFT"/>[1] return ([number] int8bit)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node798 -> cluster104_exit [color="black"]
  }
}