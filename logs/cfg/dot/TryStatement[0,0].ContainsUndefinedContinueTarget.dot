digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster661 {
    label = "def <SYNTAX>:TryStatement[0,0].ContainsUndefinedContinueTarget(this: Ast:TryStatement[0,0], iterationSet: Unknown, labelSet: Unknown): Boolean"
    style = rounded
    cluster661_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster661_entry_name -> cluster661_entry [arrowhead=none, color="black", style=dashed]
    cluster661_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster661_entry -> node2863 [color="black"]
    cluster661_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster661_exit_name -> cluster661_exit [arrowhead=none, color="black", style=dashed]
    cluster661_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node2863_name [shape=none, label=<<font color="black">Call[2863]</font>>]
    node2863_name -> node2863 [arrowhead=none, color="black", style=dashed]
    node2863 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;ContainsUndefinedContinueTarget(iterationSet, (new [])[#354])</font>> color="black" fillcolor="white", style=filled]
    node2863 -> node2864 [color="black"]
    node2864_name [shape=none, label=<<font color="black">Block[2864]</font>>]
    node2864_name -> node2864 [arrowhead=none, color="black", style=dashed]
    node2864 [shape=box, label=<<font color="black">[0] let hasUndefinedLabels = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2864 -> node2865 [color="black"]
    node2865_name [shape=none, label=<<font color="black">Branch[2865]</font>>]
    node2865_name -> node2865 [arrowhead=none, color="black", style=dashed]
    node2865 [shape=diamond, label=<<font color="black">(= hasUndefinedLabels true)</font>> color="black" fillcolor="white", style=filled]
    node2865 -> node2866 [label=<<font color="black">true</font>> color="black"]
    node2865 -> node2867 [label=<<font color="black">false</font>> color="black"]
    node2866_name [shape=none, label=<<font color="black">Block[2866]</font>>]
    node2866_name -> node2866 [arrowhead=none, color="black", style=dashed]
    node2866 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2866 -> cluster661_exit [color="black"]
    node2867_name [shape=none, label=<<font color="black">Call[2867]</font>>]
    node2867_name -> node2867 [arrowhead=none, color="black", style=dashed]
    node2867 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;ContainsUndefinedContinueTarget(iterationSet, (new [])[#355])</font>> color="black" fillcolor="white", style=filled]
    node2867 -> node2868 [color="black"]
    node2868_name [shape=none, label=<<font color="black">Block[2868]</font>>]
    node2868_name -> node2868 [arrowhead=none, color="black", style=dashed]
    node2868 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2868 -> cluster661_exit [color="black"]
  }
}