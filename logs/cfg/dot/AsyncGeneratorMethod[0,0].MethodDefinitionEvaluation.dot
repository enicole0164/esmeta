digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1598 {
    label = "def <SYNTAX>:AsyncGeneratorMethod[0,0].MethodDefinitionEvaluation(this: Ast:AsyncGeneratorMethod[0,0], object: Unknown, enumerable: Unknown): Normal[PrivateElement | Const[~unused~]] | Abrupt"
    style = rounded
    cluster1598_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1598_entry_name -> cluster1598_entry [arrowhead=none, color="black", style=dashed]
    cluster1598_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1598_entry -> node8554 [color="black"]
    cluster1598_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1598_exit_name -> cluster1598_exit [arrowhead=none, color="black", style=dashed]
    cluster1598_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8554_name [shape=none, label=<<font color="black">Call[8554]</font>>]
    node8554_name -> node8554 [arrowhead=none, color="black", style=dashed]
    node8554 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node8554 -> node8555 [color="black"]
    node8555_name [shape=none, label=<<font color="black">Block[8555]</font>>]
    node8555_name -> node8555 [arrowhead=none, color="black", style=dashed]
    node8555 [shape=box, label=<<font color="black">[0] let propKey = %0<BR ALIGN="LEFT"/>[1] [? propKey]<BR ALIGN="LEFT"/>[2] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[3] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[4] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8555 -> node8556 [color="black"]
    node8556_name [shape=none, label=<<font color="black">Call[8556]</font>>]
    node8556_name -> node8556 [arrowhead=none, color="black", style=dashed]
    node8556 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%AsyncGeneratorFunction.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8556 -> node8557 [color="black"]
    node8557_name [shape=none, label=<<font color="black">Block[8557]</font>>]
    node8557_name -> node8557 [arrowhead=none, color="black", style=dashed]
    node8557 [shape=box, label=<<font color="black">[0] let closure = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8557 -> node8558 [color="black"]
    node8558_name [shape=none, label=<<font color="black">Call[8558]</font>>]
    node8558_name -> node8558 [arrowhead=none, color="black", style=dashed]
    node8558 [shape=cds, label=<<font color="black">%2 = clo&lt;MakeMethod&gt;(closure, object)</font>> color="black" fillcolor="white", style=filled]
    node8558 -> node8559 [color="black"]
    node8559_name [shape=none, label=<<font color="black">Call[8559]</font>>]
    node8559_name -> node8559 [arrowhead=none, color="black", style=dashed]
    node8559 [shape=cds, label=<<font color="black">%3 = clo&lt;SetFunctionName&gt;(closure, propKey)</font>> color="black" fillcolor="white", style=filled]
    node8559 -> node8560 [color="black"]
    node8560_name [shape=none, label=<<font color="black">Call[8560]</font>>]
    node8560_name -> node8560 [arrowhead=none, color="black", style=dashed]
    node8560 [shape=cds, label=<<font color="black">%4 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%AsyncGeneratorFunction.prototype.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node8560 -> node8561 [color="black"]
    node8561_name [shape=none, label=<<font color="black">Block[8561]</font>>]
    node8561_name -> node8561 [arrowhead=none, color="black", style=dashed]
    node8561 [shape=box, label=<<font color="black">[0] let prototype = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8561 -> node8562 [color="black"]
    node8562_name [shape=none, label=<<font color="black">Call[8562]</font>>]
    node8562_name -> node8562 [arrowhead=none, color="black", style=dashed]
    node8562 [shape=cds, label=<<font color="black">%5 = clo&lt;DefinePropertyOrThrow&gt;(closure, &quot;prototype&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false))[#657])</font>> color="black" fillcolor="white", style=filled]
    node8562 -> node8563 [color="black"]
    node8563_name [shape=none, label=<<font color="black">Block[8563]</font>>]
    node8563_name -> node8563 [arrowhead=none, color="black", style=dashed]
    node8563 [shape=box, label=<<font color="black">[0] [! %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8563 -> node8564 [color="black"]
    node8564_name [shape=none, label=<<font color="black">Call[8564]</font>>]
    node8564_name -> node8564 [arrowhead=none, color="black", style=dashed]
    node8564 [shape=cds, label=<<font color="black">%6 = clo&lt;DefineMethodProperty&gt;(object, propKey, closure, enumerable)</font>> color="black" fillcolor="white", style=filled]
    node8564 -> node8565 [color="black"]
    node8565_name [shape=none, label=<<font color="black">Block[8565]</font>>]
    node8565_name -> node8565 [arrowhead=none, color="black", style=dashed]
    node8565 [shape=box, label=<<font color="black">[0] return %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8565 -> cluster1598_exit [color="black"]
  }
}