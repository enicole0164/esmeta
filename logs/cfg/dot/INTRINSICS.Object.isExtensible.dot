digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2013 {
    label = "def <BUILTIN>:INTRINSICS.Object.isExtensible(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2013_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2013_entry_name -> cluster2013_entry [arrowhead=none, color="black", style=dashed]
    cluster2013_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2013_entry -> node11250 [color="black"]
    cluster2013_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2013_exit_name -> cluster2013_exit [arrowhead=none, color="black", style=dashed]
    cluster2013_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11250_name [shape=none, label=<<font color="black">Branch[11250]</font>>]
    node11250_name -> node11250 [arrowhead=none, color="black", style=dashed]
    node11250 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11250 -> node11251 [label=<<font color="black">true</font>> color="black"]
    node11250 -> node11252 [label=<<font color="black">false</font>> color="black"]
    node11251_name [shape=none, label=<<font color="black">Block[11251]</font>>]
    node11251_name -> node11251 [arrowhead=none, color="black", style=dashed]
    node11251 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11251 -> node11253 [color="black"]
    node11252_name [shape=none, label=<<font color="black">Block[11252]</font>>]
    node11252_name -> node11252 [arrowhead=none, color="black", style=dashed]
    node11252 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11252 -> node11253 [color="black"]
    node11253_name [shape=none, label=<<font color="black">Branch[11253]</font>>]
    node11253_name -> node11253 [arrowhead=none, color="black", style=dashed]
    node11253 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node11253 -> node11254 [label=<<font color="black">true</font>> color="black"]
    node11253 -> node11255 [label=<<font color="black">false</font>> color="black"]
    node11254_name [shape=none, label=<<font color="black">Block[11254]</font>>]
    node11254_name -> node11254 [arrowhead=none, color="black", style=dashed]
    node11254 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11254 -> cluster2013_exit [color="black"]
    node11255_name [shape=none, label=<<font color="black">Call[11255]</font>>]
    node11255_name -> node11255 [arrowhead=none, color="black", style=dashed]
    node11255 [shape=cds, label=<<font color="black">%0 = clo&lt;IsExtensible&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node11255 -> node11256 [color="black"]
    node11256_name [shape=none, label=<<font color="black">Block[11256]</font>>]
    node11256_name -> node11256 [arrowhead=none, color="black", style=dashed]
    node11256 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11256 -> cluster2013_exit [color="black"]
  }
}