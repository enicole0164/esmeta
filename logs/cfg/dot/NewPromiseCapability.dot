digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2572 {
    label = "def NewPromiseCapability(C: Unknown): Normal[PromiseCapabilityRecord] | Abrupt"
    style = rounded
    cluster2572_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2572_entry_name -> cluster2572_entry [arrowhead=none, color="black", style=dashed]
    cluster2572_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2572_entry -> node18750 [color="black"]
    cluster2572_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2572_exit_name -> cluster2572_exit [arrowhead=none, color="black", style=dashed]
    cluster2572_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18750_name [shape=none, label=<<font color="black">Call[18750]</font>>]
    node18750_name -> node18750 [arrowhead=none, color="black", style=dashed]
    node18750 [shape=cds, label=<<font color="black">%0 = clo&lt;IsConstructor&gt;(C)</font>> color="black" fillcolor="white", style=filled]
    node18750 -> node18751 [color="black"]
    node18751_name [shape=none, label=<<font color="black">Branch[18751]</font>>]
    node18751_name -> node18751 [arrowhead=none, color="black", style=dashed]
    node18751 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node18751 -> node18752 [label=<<font color="black">true</font>> color="black"]
    node18751 -> node18753 [label=<<font color="black">false</font>> color="black"]
    node18752_name [shape=none, label=<<font color="black">Block[18752]</font>>]
    node18752_name -> node18752 [arrowhead=none, color="black", style=dashed]
    node18752 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1240])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18752 -> cluster2572_exit [color="black"]
    node18753_name [shape=none, label=<<font color="black">Block[18753]</font>>]
    node18753_name -> node18753 [arrowhead=none, color="black", style=dashed]
    node18753 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] let promiseCapability = (new PromiseCapabilityRecord(&quot;Promise&quot; -&gt; undefined, &quot;Resolve&quot; -&gt; undefined, &quot;Reject&quot; -&gt; undefined))[#1241]<BR ALIGN="LEFT"/>[2] let executorClosure = clo&lt;NewPromiseCapability:clo0, [promiseCapability]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18753 -> node18754 [color="black"]
    node18754_name [shape=none, label=<<font color="black">Call[18754]</font>>]
    node18754_name -> node18754 [arrowhead=none, color="black", style=dashed]
    node18754 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateBuiltinFunction&gt;(executorClosure, 2, &quot;&quot;, (new [])[#1242])</font>> color="black" fillcolor="white", style=filled]
    node18754 -> node18755 [color="black"]
    node18755_name [shape=none, label=<<font color="black">Block[18755]</font>>]
    node18755_name -> node18755 [arrowhead=none, color="black", style=dashed]
    node18755 [shape=box, label=<<font color="black">[0] let executor = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18755 -> node18756 [color="black"]
    node18756_name [shape=none, label=<<font color="black">Call[18756]</font>>]
    node18756_name -> node18756 [arrowhead=none, color="black", style=dashed]
    node18756 [shape=cds, label=<<font color="black">%2 = clo&lt;Construct&gt;(C, (new [executor])[#1243])</font>> color="black" fillcolor="white", style=filled]
    node18756 -> node18757 [color="black"]
    node18757_name [shape=none, label=<<font color="black">Block[18757]</font>>]
    node18757_name -> node18757 [arrowhead=none, color="black", style=dashed]
    node18757 [shape=box, label=<<font color="black">[0] let promise = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18757 -> node18758 [color="black"]
    node18758_name [shape=none, label=<<font color="black">Call[18758]</font>>]
    node18758_name -> node18758 [arrowhead=none, color="black", style=dashed]
    node18758 [shape=cds, label=<<font color="black">%3 = clo&lt;IsCallable&gt;(promiseCapability.Resolve)</font>> color="black" fillcolor="white", style=filled]
    node18758 -> node18759 [color="black"]
    node18759_name [shape=none, label=<<font color="black">Branch[18759]</font>>]
    node18759_name -> node18759 [arrowhead=none, color="black", style=dashed]
    node18759 [shape=diamond, label=<<font color="black">(= %3 false)</font>> color="black" fillcolor="white", style=filled]
    node18759 -> node18760 [label=<<font color="black">true</font>> color="black"]
    node18759 -> node18761 [label=<<font color="black">false</font>> color="black"]
    node18760_name [shape=none, label=<<font color="black">Block[18760]</font>>]
    node18760_name -> node18760 [arrowhead=none, color="black", style=dashed]
    node18760 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1244])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18760 -> cluster2572_exit [color="black"]
    node18761_name [shape=none, label=<<font color="black">Call[18761]</font>>]
    node18761_name -> node18761 [arrowhead=none, color="black", style=dashed]
    node18761 [shape=cds, label=<<font color="black">%4 = clo&lt;IsCallable&gt;(promiseCapability.Reject)</font>> color="black" fillcolor="white", style=filled]
    node18761 -> node18762 [color="black"]
    node18762_name [shape=none, label=<<font color="black">Branch[18762]</font>>]
    node18762_name -> node18762 [arrowhead=none, color="black", style=dashed]
    node18762 [shape=diamond, label=<<font color="black">(= %4 false)</font>> color="black" fillcolor="white", style=filled]
    node18762 -> node18763 [label=<<font color="black">true</font>> color="black"]
    node18762 -> node18764 [label=<<font color="black">false</font>> color="black"]
    node18763_name [shape=none, label=<<font color="black">Block[18763]</font>>]
    node18763_name -> node18763 [arrowhead=none, color="black", style=dashed]
    node18763 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1245])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18763 -> cluster2572_exit [color="black"]
    node18764_name [shape=none, label=<<font color="black">Block[18764]</font>>]
    node18764_name -> node18764 [arrowhead=none, color="black", style=dashed]
    node18764 [shape=box, label=<<font color="black">[0] promiseCapability.Promise = promise<BR ALIGN="LEFT"/>[1] return promiseCapability<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18764 -> cluster2572_exit [color="black"]
  }
}