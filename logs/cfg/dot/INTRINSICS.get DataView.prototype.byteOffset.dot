digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2499 {
    label = "def <BUILTIN>:INTRINSICS.get DataView.prototype.byteOffset(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2499_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2499_entry_name -> cluster2499_entry [arrowhead=none, color="black", style=dashed]
    cluster2499_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2499_entry -> node17701 [color="black"]
    cluster2499_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2499_exit_name -> cluster2499_exit [arrowhead=none, color="black", style=dashed]
    cluster2499_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17701_name [shape=none, label=<<font color="black">Block[17701]</font>>]
    node17701_name -> node17701 [arrowhead=none, color="black", style=dashed]
    node17701 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17701 -> node17702 [color="black"]
    node17702_name [shape=none, label=<<font color="black">Call[17702]</font>>]
    node17702_name -> node17702 [arrowhead=none, color="black", style=dashed]
    node17702 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;DataView&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17702 -> node17703 [color="black"]
    node17703_name [shape=none, label=<<font color="black">Block[17703]</font>>]
    node17703_name -> node17703 [arrowhead=none, color="black", style=dashed]
    node17703 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= O.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/>[2] let buffer = O.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17703 -> node17704 [color="black"]
    node17704_name [shape=none, label=<<font color="black">Call[17704]</font>>]
    node17704_name -> node17704 [arrowhead=none, color="black", style=dashed]
    node17704 [shape=cds, label=<<font color="black">%1 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node17704 -> node17705 [color="black"]
    node17705_name [shape=none, label=<<font color="black">Branch[17705]</font>>]
    node17705_name -> node17705 [arrowhead=none, color="black", style=dashed]
    node17705 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node17705 -> node17706 [label=<<font color="black">true</font>> color="black"]
    node17705 -> node17707 [label=<<font color="black">false</font>> color="black"]
    node17706_name [shape=none, label=<<font color="black">Block[17706]</font>>]
    node17706_name -> node17706 [arrowhead=none, color="black", style=dashed]
    node17706 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1178])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17706 -> cluster2499_exit [color="black"]
    node17707_name [shape=none, label=<<font color="black">Block[17707]</font>>]
    node17707_name -> node17707 [arrowhead=none, color="black", style=dashed]
    node17707 [shape=box, label=<<font color="black">[0] let offset = O.ByteOffset<BR ALIGN="LEFT"/>[1] return ([number] offset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17707 -> cluster2499_exit [color="black"]
  }
}