digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2622 {
    label = "def CreateIteratorFromClosure(closure: Unknown["AbstractClosureWithNoParameters"], generatorBrand: Unknown, generatorPrototype: Object): Unknown["Generator"]"
    style = rounded
    cluster2622_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2622_entry_name -> cluster2622_entry [arrowhead=none, color="black", style=dashed]
    cluster2622_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2622_entry -> node19397 [color="black"]
    cluster2622_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2622_exit_name -> cluster2622_exit [arrowhead=none, color="black", style=dashed]
    cluster2622_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19397_name [shape=none, label=<<font color="black">Block[19397]</font>>]
    node19397_name -> node19397 [arrowhead=none, color="black", style=dashed]
    node19397 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] let internalSlotsList = (new [&quot;GeneratorState&quot;, &quot;GeneratorContext&quot;, &quot;GeneratorBrand&quot;])[#1321]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19397 -> node19398 [color="black"]
    node19398_name [shape=none, label=<<font color="black">Call[19398]</font>>]
    node19398_name -> node19398 [arrowhead=none, color="black", style=dashed]
    node19398 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryObjectCreate&gt;(generatorPrototype, internalSlotsList)</font>> color="black" fillcolor="white", style=filled]
    node19398 -> node19399 [color="black"]
    node19399_name [shape=none, label=<<font color="black">Block[19399]</font>>]
    node19399_name -> node19399 [arrowhead=none, color="black", style=dashed]
    node19399 [shape=box, label=<<font color="black">[0] let generator = %0<BR ALIGN="LEFT"/>[1] generator.GeneratorBrand = generatorBrand<BR ALIGN="LEFT"/>[2] generator.GeneratorState = undefined<BR ALIGN="LEFT"/>[3] let callerContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/>[4] let calleeContext = (new ExecutionContext())[#1322]<BR ALIGN="LEFT"/>[5] calleeContext.Function = null<BR ALIGN="LEFT"/>[6] calleeContext.Realm = @EXECUTION_STACK[0].Realm<BR ALIGN="LEFT"/>[7] calleeContext.ScriptOrModule = callerContext.ScriptOrModule<BR ALIGN="LEFT"/>[8] nop<BR ALIGN="LEFT"/>[9] push calleeContext &gt; @EXECUTION_STACK<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19399 -> node19400 [color="black"]
    node19400_name [shape=none, label=<<font color="black">Call[19400]</font>>]
    node19400_name -> node19400 [arrowhead=none, color="black", style=dashed]
    node19400 [shape=cds, label=<<font color="black">%1 = clo&lt;GeneratorStart&gt;(generator, closure)</font>> color="black" fillcolor="white", style=filled]
    node19400 -> node19401 [color="black"]
    node19401_name [shape=none, label=<<font color="black">Block[19401]</font>>]
    node19401_name -> node19401 [arrowhead=none, color="black", style=dashed]
    node19401 [shape=box, label=<<font color="black">[0] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/>[1] return generator<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19401 -> cluster2622_exit [color="black"]
  }
}