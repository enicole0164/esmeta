digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2084 {
    label = "def <BUILTIN>:INTRINSICS.Math.cbrt(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2084_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2084_entry_name -> cluster2084_entry [arrowhead=none, color="black", style=dashed]
    cluster2084_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2084_entry -> node12127 [color="black"]
    cluster2084_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2084_exit_name -> cluster2084_exit [arrowhead=none, color="black", style=dashed]
    cluster2084_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12127_name [shape=none, label=<<font color="black">Branch[12127]</font>>]
    node12127_name -> node12127 [arrowhead=none, color="black", style=dashed]
    node12127 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12127 -> node12128 [label=<<font color="black">true</font>> color="black"]
    node12127 -> node12129 [label=<<font color="black">false</font>> color="black"]
    node12128_name [shape=none, label=<<font color="black">Block[12128]</font>>]
    node12128_name -> node12128 [arrowhead=none, color="black", style=dashed]
    node12128 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12128 -> node12130 [color="black"]
    node12129_name [shape=none, label=<<font color="black">Block[12129]</font>>]
    node12129_name -> node12129 [arrowhead=none, color="black", style=dashed]
    node12129 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12129 -> node12130 [color="black"]
    node12130_name [shape=none, label=<<font color="black">Call[12130]</font>>]
    node12130_name -> node12130 [arrowhead=none, color="black", style=dashed]
    node12130 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12130 -> node12131 [color="black"]
    node12131_name [shape=none, label=<<font color="black">Block[12131]</font>>]
    node12131_name -> node12131 [arrowhead=none, color="black", style=dashed]
    node12131 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12131 -> node12132 [color="black"]
    node12132_name [shape=none, label=<<font color="black">Branch[12132]</font>>]
    node12132_name -> node12132 [arrowhead=none, color="black", style=dashed]
    node12132 [shape=diamond, label=<<font color="black">(|| (= n NaN) (|| (= n 0.0f) (|| (= n -0.0f) (|| (= n +INF) (= n -INF)))))</font>> color="black" fillcolor="white", style=filled]
    node12132 -> node12133 [label=<<font color="black">true</font>> color="black"]
    node12132 -> node12134 [label=<<font color="black">false</font>> color="black"]
    node12133_name [shape=none, label=<<font color="black">Block[12133]</font>>]
    node12133_name -> node12133 [arrowhead=none, color="black", style=dashed]
    node12133 [shape=box, label=<<font color="black">[0] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12133 -> cluster2084_exit [color="black"]
    node12134_name [shape=none, label=<<font color="black">Block[12134]</font>>]
    node12134_name -> node12134 [arrowhead=none, color="black", style=dashed]
    node12134 [shape=box, label=<<font color="black">[0] return ([approx-number] ([math:cbrt] ([math] n)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12134 -> cluster2084_exit [color="black"]
  }
}