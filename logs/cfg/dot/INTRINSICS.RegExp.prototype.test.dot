digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2333 {
    label = "def <BUILTIN>:INTRINSICS.RegExp.prototype.test(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2333_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2333_entry_name -> cluster2333_entry [arrowhead=none, color="black", style=dashed]
    cluster2333_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2333_entry -> node14626 [color="black"]
    cluster2333_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2333_exit_name -> cluster2333_exit [arrowhead=none, color="black", style=dashed]
    cluster2333_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14626_name [shape=none, label=<<font color="black">Branch[14626]</font>>]
    node14626_name -> node14626 [arrowhead=none, color="black", style=dashed]
    node14626 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node14626 -> node14627 [label=<<font color="black">true</font>> color="black"]
    node14626 -> node14628 [label=<<font color="black">false</font>> color="black"]
    node14627_name [shape=none, label=<<font color="black">Block[14627]</font>>]
    node14627_name -> node14627 [arrowhead=none, color="black", style=dashed]
    node14627 [shape=box, label=<<font color="black">[0] let S = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14627 -> node14629 [color="black"]
    node14628_name [shape=none, label=<<font color="black">Block[14628]</font>>]
    node14628_name -> node14628 [arrowhead=none, color="black", style=dashed]
    node14628 [shape=box, label=<<font color="black">[0] let S = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14628 -> node14629 [color="black"]
    node14629_name [shape=none, label=<<font color="black">Block[14629]</font>>]
    node14629_name -> node14629 [arrowhead=none, color="black", style=dashed]
    node14629 [shape=box, label=<<font color="black">[0] let R = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14629 -> node14630 [color="black"]
    node14630_name [shape=none, label=<<font color="black">Branch[14630]</font>>]
    node14630_name -> node14630 [arrowhead=none, color="black", style=dashed]
    node14630 [shape=diamond, label=<<font color="black">(! (= (typeof R) @Object))</font>> color="black" fillcolor="white", style=filled]
    node14630 -> node14631 [label=<<font color="black">true</font>> color="black"]
    node14630 -> node14632 [label=<<font color="black">false</font>> color="black"]
    node14631_name [shape=none, label=<<font color="black">Block[14631]</font>>]
    node14631_name -> node14631 [arrowhead=none, color="black", style=dashed]
    node14631 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1008])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14631 -> cluster2333_exit [color="black"]
    node14632_name [shape=none, label=<<font color="black">Call[14632]</font>>]
    node14632_name -> node14632 [arrowhead=none, color="black", style=dashed]
    node14632 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(S)</font>> color="black" fillcolor="white", style=filled]
    node14632 -> node14633 [color="black"]
    node14633_name [shape=none, label=<<font color="black">Block[14633]</font>>]
    node14633_name -> node14633 [arrowhead=none, color="black", style=dashed]
    node14633 [shape=box, label=<<font color="black">[0] let string = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14633 -> node14634 [color="black"]
    node14634_name [shape=none, label=<<font color="black">Call[14634]</font>>]
    node14634_name -> node14634 [arrowhead=none, color="black", style=dashed]
    node14634 [shape=cds, label=<<font color="black">%1 = clo&lt;RegExpExec&gt;(R, string)</font>> color="black" fillcolor="white", style=filled]
    node14634 -> node14635 [color="black"]
    node14635_name [shape=none, label=<<font color="black">Block[14635]</font>>]
    node14635_name -> node14635 [arrowhead=none, color="black", style=dashed]
    node14635 [shape=box, label=<<font color="black">[0] let match = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14635 -> node14636 [color="black"]
    node14636_name [shape=none, label=<<font color="black">Branch[14636]</font>>]
    node14636_name -> node14636 [arrowhead=none, color="black", style=dashed]
    node14636 [shape=diamond, label=<<font color="black">(! (= match null))</font>> color="black" fillcolor="white", style=filled]
    node14636 -> node14637 [label=<<font color="black">true</font>> color="black"]
    node14636 -> node14638 [label=<<font color="black">false</font>> color="black"]
    node14637_name [shape=none, label=<<font color="black">Block[14637]</font>>]
    node14637_name -> node14637 [arrowhead=none, color="black", style=dashed]
    node14637 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14637 -> cluster2333_exit [color="black"]
    node14638_name [shape=none, label=<<font color="black">Block[14638]</font>>]
    node14638_name -> node14638 [arrowhead=none, color="black", style=dashed]
    node14638 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14638 -> cluster2333_exit [color="black"]
  }
}