digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1989 {
    label = "def Encode(string: String, unescapedSet: String): Normal[String] | Abrupt"
    style = rounded
    cluster1989_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1989_entry_name -> cluster1989_entry [arrowhead=none, color="black", style=dashed]
    cluster1989_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1989_entry -> node10967 [color="black"]
    cluster1989_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1989_exit_name -> cluster1989_exit [arrowhead=none, color="black", style=dashed]
    cluster1989_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10967_name [shape=none, label=<<font color="black">Block[10967]</font>>]
    node10967_name -> node10967 [arrowhead=none, color="black", style=dashed]
    node10967 [shape=box, label=<<font color="black">[0] let strLen = string.length<BR ALIGN="LEFT"/>[1] let R = &quot;&quot;<BR ALIGN="LEFT"/>[2] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10967 -> node10968 [color="black"]
    node10968_name [shape=none, label=<<font color="black">Branch[10968]</font>>]
    node10968_name -> node10968 [arrowhead=none, color="black", style=dashed]
    node10968 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node10968 -> node10969 [label=<<font color="black">true</font>> color="black"]
    node10969_name [shape=none, label=<<font color="black">Branch[10969]</font>>]
    node10969_name -> node10969 [arrowhead=none, color="black", style=dashed]
    node10969 [shape=diamond, label=<<font color="black">(== k strLen)</font>> color="black" fillcolor="white", style=filled]
    node10969 -> node10970 [label=<<font color="black">true</font>> color="black"]
    node10969 -> node10971 [label=<<font color="black">false</font>> color="black"]
    node10970_name [shape=none, label=<<font color="black">Block[10970]</font>>]
    node10970_name -> node10970 [arrowhead=none, color="black", style=dashed]
    node10970 [shape=box, label=<<font color="black">[0] return R<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10970 -> cluster1989_exit [color="black"]
    node10971_name [shape=none, label=<<font color="black">Block[10971]</font>>]
    node10971_name -> node10971 [arrowhead=none, color="black", style=dashed]
    node10971 [shape=box, label=<<font color="black">[0] let C = string[k]<BR ALIGN="LEFT"/>[1] (yet &quot;If _C_ is in _unescapedSet_, then\n  1. Set _k_ to _k_ + 1.\n  1. Set _R_ to the string-concatenation of _R_ and _C_.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Else,\n  1. Let _cp_ be CodePointAt(_string_, _k_).\n  1. If _cp_.[[IsUnpairedSurrogate]] is *true*, throw a newly created *URIError* object.\n  1. Set _k_ to _k_ + _cp_.[[CodeUnitCount]].\n  1. Let _Octets_ be the List of octets resulting by applying the UTF-8 transformation to _cp_.[[CodePoint]].\n  1. For each _octet_ of _Octets_, do\n    1. Set _R_ to the string-concatenation of:\n      * _R_\n      * *\&quot;%\&quot;*\n      * the String representation of _octet_, formatted as a two-digit uppercase hexadecimal number, padded to the left with a zero if necessary&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10971 -> node10968 [color="black"]
  }
}