digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1887 {
    label = "def <CONC>:CyclicModuleRecord.Evaluate(module: CyclicModuleRecord): Unknown["Promise"]"
    style = rounded
    cluster1887_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1887_entry_name -> cluster1887_entry [arrowhead=none, color="black", style=dashed]
    cluster1887_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1887_entry -> node10135 [color="black"]
    cluster1887_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1887_exit_name -> cluster1887_exit [arrowhead=none, color="black", style=dashed]
    cluster1887_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10135_name [shape=none, label=<<font color="black">Block[10135]</font>>]
    node10135_name -> node10135 [arrowhead=none, color="black", style=dashed]
    node10135 [shape=box, label=<<font color="black">[0] assert (yet &quot;This call to Evaluate is not happening at the same time as another call to Evaluate within the surrounding agent.&quot;)<BR ALIGN="LEFT"/>[1] assert (|| (|| (= module.Status ~linked~) (= module.Status ~evaluating-async~)) (= module.Status ~evaluated~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10135 -> node10136 [color="black"]
    node10136_name [shape=none, label=<<font color="black">Branch[10136]</font>>]
    node10136_name -> node10136 [arrowhead=none, color="black", style=dashed]
    node10136 [shape=diamond, label=<<font color="black">(|| (= module.Status ~evaluating-async~) (= module.Status ~evaluated~))</font>> color="black" fillcolor="white", style=filled]
    node10136 -> node10137 [label=<<font color="black">true</font>> color="black"]
    node10136 -> node10138 [label=<<font color="black">false</font>> color="black"]
    node10137_name [shape=none, label=<<font color="black">Block[10137]</font>>]
    node10137_name -> node10137 [arrowhead=none, color="black", style=dashed]
    node10137 [shape=box, label=<<font color="black">[0] module = module.CycleRoot<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10137 -> node10138 [color="black"]
    node10138_name [shape=none, label=<<font color="black">Branch[10138]</font>>]
    node10138_name -> node10138 [arrowhead=none, color="black", style=dashed]
    node10138 [shape=diamond, label=<<font color="black">(! (= module.TopLevelCapability ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10138 -> node10139 [label=<<font color="black">true</font>> color="black"]
    node10138 -> node10140 [label=<<font color="black">false</font>> color="black"]
    node10139_name [shape=none, label=<<font color="black">Block[10139]</font>>]
    node10139_name -> node10139 [arrowhead=none, color="black", style=dashed]
    node10139 [shape=box, label=<<font color="black">[0] return module.TopLevelCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10139 -> cluster1887_exit [color="black"]
    node10140_name [shape=none, label=<<font color="black">Block[10140]</font>>]
    node10140_name -> node10140 [arrowhead=none, color="black", style=dashed]
    node10140 [shape=box, label=<<font color="black">[0] let stack = (new [])[#770]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10140 -> node10141 [color="black"]
    node10141_name [shape=none, label=<<font color="black">Call[10141]</font>>]
    node10141_name -> node10141 [arrowhead=none, color="black", style=dashed]
    node10141 [shape=cds, label=<<font color="black">%0 = clo&lt;NewPromiseCapability&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node10141 -> node10142 [color="black"]
    node10142_name [shape=none, label=<<font color="black">Block[10142]</font>>]
    node10142_name -> node10142 [arrowhead=none, color="black", style=dashed]
    node10142 [shape=box, label=<<font color="black">[0] let capability = [! %0]<BR ALIGN="LEFT"/>[1] module.TopLevelCapability = capability<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10142 -> node10143 [color="black"]
    node10143_name [shape=none, label=<<font color="black">Call[10143]</font>>]
    node10143_name -> node10143 [arrowhead=none, color="black", style=dashed]
    node10143 [shape=cds, label=<<font color="black">%1 = clo&lt;InnerModuleEvaluation&gt;(module, stack, 0)</font>> color="black" fillcolor="white", style=filled]
    node10143 -> node10144 [color="black"]
    node10144_name [shape=none, label=<<font color="black">Call[10144]</font>>]
    node10144_name -> node10144 [arrowhead=none, color="black", style=dashed]
    node10144 [shape=cds, label=<<font color="black">%2 = clo&lt;Completion&gt;(%1)</font>> color="black" fillcolor="white", style=filled]
    node10144 -> node10145 [color="black"]
    node10145_name [shape=none, label=<<font color="black">Block[10145]</font>>]
    node10145_name -> node10145 [arrowhead=none, color="black", style=dashed]
    node10145 [shape=box, label=<<font color="black">[0] let result = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10145 -> node10146 [color="black"]
    node10146_name [shape=none, label=<<font color="black">Branch[10146]</font>>]
    node10146_name -> node10146 [arrowhead=none, color="black", style=dashed]
    node10146 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? result) (! (= result.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node10146 -> node10147 [label=<<font color="black">true</font>> color="black"]
    node10146 -> node10153 [label=<<font color="black">false</font>> color="black"]
    node10147_name [shape=none, label=<<font color="black">Block[10147]</font>>]
    node10147_name -> node10147 [arrowhead=none, color="black", style=dashed]
    node10147 [shape=box, label=<<font color="black">[0] %4 = stack<BR ALIGN="LEFT"/>[1] %3 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10147 -> node10148 [color="black"]
    node10153_name [shape=none, label=<<font color="black">Block[10153]</font>>]
    node10153_name -> node10153 [arrowhead=none, color="black", style=dashed]
    node10153 [shape=box, label=<<font color="black">[0] assert (|| (= module.Status ~evaluating-async~) (= module.Status ~evaluated~))<BR ALIGN="LEFT"/>[1] assert (= module.EvaluationError ~empty~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10153 -> node10154 [color="black"]
    node10148_name [shape=none, label=<<font color="black">Branch[10148]</font>>]
    node10148_name -> node10148 [arrowhead=none, color="black", style=dashed]
    node10148 [shape=diamond, label=<<font color="black">(&lt; %3 %4.length)</font>> color="black" fillcolor="white", style=filled]
    node10148 -> node10149 [label=<<font color="black">true</font>> color="black"]
    node10148 -> node10150 [label=<<font color="black">false</font>> color="black"]
    node10154_name [shape=none, label=<<font color="black">Branch[10154]</font>>]
    node10154_name -> node10154 [arrowhead=none, color="black", style=dashed]
    node10154 [shape=diamond, label=<<font color="black">(= module.AsyncEvaluation false)</font>> color="black" fillcolor="white", style=filled]
    node10154 -> node10155 [label=<<font color="black">true</font>> color="black"]
    node10154 -> node10158 [label=<<font color="black">false</font>> color="black"]
    node10149_name [shape=none, label=<<font color="black">Block[10149]</font>>]
    node10149_name -> node10149 [arrowhead=none, color="black", style=dashed]
    node10149 [shape=box, label=<<font color="black">[0] let m = %4[%3]<BR ALIGN="LEFT"/>[1] assert (= m.Status ~evaluating~)<BR ALIGN="LEFT"/>[2] m.Status = ~evaluated~<BR ALIGN="LEFT"/>[3] m.EvaluationError = result<BR ALIGN="LEFT"/>[4] %3 = (+ %3 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10149 -> node10148 [color="black"]
    node10150_name [shape=none, label=<<font color="black">Block[10150]</font>>]
    node10150_name -> node10150 [arrowhead=none, color="black", style=dashed]
    node10150 [shape=box, label=<<font color="black">[0] assert (= module.Status ~evaluated~)<BR ALIGN="LEFT"/>[1] assert (= module.EvaluationError result)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10150 -> node10151 [color="black"]
    node10155_name [shape=none, label=<<font color="black">Block[10155]</font>>]
    node10155_name -> node10155 [arrowhead=none, color="black", style=dashed]
    node10155 [shape=box, label=<<font color="black">[0] assert (= module.Status ~evaluated~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10155 -> node10156 [color="black"]
    node10158_name [shape=none, label=<<font color="black">Block[10158]</font>>]
    node10158_name -> node10158 [arrowhead=none, color="black", style=dashed]
    node10158 [shape=box, label=<<font color="black">[0] assert (= stack.length 0)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10158 -> node10159 [color="black"]
    node10151_name [shape=none, label=<<font color="black">Call[10151]</font>>]
    node10151_name -> node10151 [arrowhead=none, color="black", style=dashed]
    node10151 [shape=cds, label=<<font color="black">%5 = clo&lt;Call&gt;(capability.Reject, undefined, (new [result.Value])[#771])</font>> color="black" fillcolor="white", style=filled]
    node10151 -> node10152 [color="black"]
    node10156_name [shape=none, label=<<font color="black">Call[10156]</font>>]
    node10156_name -> node10156 [arrowhead=none, color="black", style=dashed]
    node10156 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(capability.Resolve, undefined, (new [undefined])[#772])</font>> color="black" fillcolor="white", style=filled]
    node10156 -> node10157 [color="black"]
    node10159_name [shape=none, label=<<font color="black">Block[10159]</font>>]
    node10159_name -> node10159 [arrowhead=none, color="black", style=dashed]
    node10159 [shape=box, label=<<font color="black">[0] return capability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10159 -> cluster1887_exit [color="black"]
    node10152_name [shape=none, label=<<font color="black">Block[10152]</font>>]
    node10152_name -> node10152 [arrowhead=none, color="black", style=dashed]
    node10152 [shape=box, label=<<font color="black">[0] [! %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10152 -> node10159 [color="black"]
    node10157_name [shape=none, label=<<font color="black">Block[10157]</font>>]
    node10157_name -> node10157 [arrowhead=none, color="black", style=dashed]
    node10157 [shape=box, label=<<font color="black">[0] [! %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10157 -> node10158 [color="black"]
  }
}