digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2586 {
    label = "def PerformPromiseAllSettled(iteratorRecord: Unknown, constructor: Unknown["Constructor"], resultCapability: PromiseCapabilityRecord, promiseResolve: FunctionObject): Normal[ESValue] | Abrupt"
    style = rounded
    cluster2586_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2586_entry_name -> cluster2586_entry [arrowhead=none, color="black", style=dashed]
    cluster2586_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2586_entry -> node18967 [color="black"]
    cluster2586_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2586_exit_name -> cluster2586_exit [arrowhead=none, color="black", style=dashed]
    cluster2586_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18967_name [shape=none, label=<<font color="black">Block[18967]</font>>]
    node18967_name -> node18967 [arrowhead=none, color="black", style=dashed]
    node18967 [shape=box, label=<<font color="black">[0] let values = (new [])[#1274]<BR ALIGN="LEFT"/>[1] let remainingElementsCount = (new Record(&quot;Value&quot; -&gt; 1))[#1275]<BR ALIGN="LEFT"/>[2] let index = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18967 -> node18968 [color="black"]
    node18968_name [shape=none, label=<<font color="black">Branch[18968]</font>>]
    node18968_name -> node18968 [arrowhead=none, color="black", style=dashed]
    node18968 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node18968 -> node18969 [label=<<font color="black">true</font>> color="black"]
    node18969_name [shape=none, label=<<font color="black">Call[18969]</font>>]
    node18969_name -> node18969 [arrowhead=none, color="black", style=dashed]
    node18969 [shape=cds, label=<<font color="black">%0 = clo&lt;IteratorStep&gt;(iteratorRecord)</font>> color="black" fillcolor="white", style=filled]
    node18969 -> node18970 [color="black"]
    node18970_name [shape=none, label=<<font color="black">Call[18970]</font>>]
    node18970_name -> node18970 [arrowhead=none, color="black", style=dashed]
    node18970 [shape=cds, label=<<font color="black">%1 = clo&lt;Completion&gt;(%0)</font>> color="black" fillcolor="white", style=filled]
    node18970 -> node18971 [color="black"]
    node18971_name [shape=none, label=<<font color="black">Block[18971]</font>>]
    node18971_name -> node18971 [arrowhead=none, color="black", style=dashed]
    node18971 [shape=box, label=<<font color="black">[0] let next = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18971 -> node18972 [color="black"]
    node18972_name [shape=none, label=<<font color="black">Branch[18972]</font>>]
    node18972_name -> node18972 [arrowhead=none, color="black", style=dashed]
    node18972 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? next) (! (= next.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node18972 -> node18973 [label=<<font color="black">true</font>> color="black"]
    node18972 -> node18974 [label=<<font color="black">false</font>> color="black"]
    node18973_name [shape=none, label=<<font color="black">Block[18973]</font>>]
    node18973_name -> node18973 [arrowhead=none, color="black", style=dashed]
    node18973 [shape=box, label=<<font color="black">[0] iteratorRecord.Done = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18973 -> node18974 [color="black"]
    node18974_name [shape=none, label=<<font color="black">Block[18974]</font>>]
    node18974_name -> node18974 [arrowhead=none, color="black", style=dashed]
    node18974 [shape=box, label=<<font color="black">[0] [? next]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18974 -> node18975 [color="black"]
    node18975_name [shape=none, label=<<font color="black">Branch[18975]</font>>]
    node18975_name -> node18975 [arrowhead=none, color="black", style=dashed]
    node18975 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white", style=filled]
    node18975 -> node18976 [label=<<font color="black">true</font>> color="black"]
    node18975 -> node18983 [label=<<font color="black">false</font>> color="black"]
    node18976_name [shape=none, label=<<font color="black">Block[18976]</font>>]
    node18976_name -> node18976 [arrowhead=none, color="black", style=dashed]
    node18976 [shape=box, label=<<font color="black">[0] iteratorRecord.Done = true<BR ALIGN="LEFT"/>[1] remainingElementsCount.Value = (- remainingElementsCount.Value 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18976 -> node18977 [color="black"]
    node18983_name [shape=none, label=<<font color="black">Call[18983]</font>>]
    node18983_name -> node18983 [arrowhead=none, color="black", style=dashed]
    node18983 [shape=cds, label=<<font color="black">%4 = clo&lt;IteratorValue&gt;(next)</font>> color="black" fillcolor="white", style=filled]
    node18983 -> node18984 [color="black"]
    node18977_name [shape=none, label=<<font color="black">Branch[18977]</font>>]
    node18977_name -> node18977 [arrowhead=none, color="black", style=dashed]
    node18977 [shape=diamond, label=<<font color="black">(= remainingElementsCount.Value 0)</font>> color="black" fillcolor="white", style=filled]
    node18977 -> node18978 [label=<<font color="black">true</font>> color="black"]
    node18977 -> node18982 [label=<<font color="black">false</font>> color="black"]
    node18984_name [shape=none, label=<<font color="black">Call[18984]</font>>]
    node18984_name -> node18984 [arrowhead=none, color="black", style=dashed]
    node18984 [shape=cds, label=<<font color="black">%5 = clo&lt;Completion&gt;(%4)</font>> color="black" fillcolor="white", style=filled]
    node18984 -> node18985 [color="black"]
    node18978_name [shape=none, label=<<font color="black">Call[18978]</font>>]
    node18978_name -> node18978 [arrowhead=none, color="black", style=dashed]
    node18978 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateArrayFromList&gt;(values)</font>> color="black" fillcolor="white", style=filled]
    node18978 -> node18979 [color="black"]
    node18982_name [shape=none, label=<<font color="black">Block[18982]</font>>]
    node18982_name -> node18982 [arrowhead=none, color="black", style=dashed]
    node18982 [shape=box, label=<<font color="black">[0] return resultCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18982 -> cluster2586_exit [color="black"]
    node18985_name [shape=none, label=<<font color="black">Block[18985]</font>>]
    node18985_name -> node18985 [arrowhead=none, color="black", style=dashed]
    node18985 [shape=box, label=<<font color="black">[0] let nextValue = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18985 -> node18986 [color="black"]
    node18979_name [shape=none, label=<<font color="black">Block[18979]</font>>]
    node18979_name -> node18979 [arrowhead=none, color="black", style=dashed]
    node18979 [shape=box, label=<<font color="black">[0] let valuesArray = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18979 -> node18980 [color="black"]
    node18986_name [shape=none, label=<<font color="black">Branch[18986]</font>>]
    node18986_name -> node18986 [arrowhead=none, color="black", style=dashed]
    node18986 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? nextValue) (! (= nextValue.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node18986 -> node18987 [label=<<font color="black">true</font>> color="black"]
    node18986 -> node18988 [label=<<font color="black">false</font>> color="black"]
    node18980_name [shape=none, label=<<font color="black">Call[18980]</font>>]
    node18980_name -> node18980 [arrowhead=none, color="black", style=dashed]
    node18980 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(resultCapability.Resolve, undefined, (new [valuesArray])[#1276])</font>> color="black" fillcolor="white", style=filled]
    node18980 -> node18981 [color="black"]
    node18987_name [shape=none, label=<<font color="black">Block[18987]</font>>]
    node18987_name -> node18987 [arrowhead=none, color="black", style=dashed]
    node18987 [shape=box, label=<<font color="black">[0] iteratorRecord.Done = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18987 -> node18988 [color="black"]
    node18988_name [shape=none, label=<<font color="black">Block[18988]</font>>]
    node18988_name -> node18988 [arrowhead=none, color="black", style=dashed]
    node18988 [shape=box, label=<<font color="black">[0] [? nextValue]<BR ALIGN="LEFT"/>[1] push values &lt; undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18988 -> node18989 [color="black"]
    node18981_name [shape=none, label=<<font color="black">Block[18981]</font>>]
    node18981_name -> node18981 [arrowhead=none, color="black", style=dashed]
    node18981 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18981 -> node18982 [color="black"]
    node18989_name [shape=none, label=<<font color="black">Call[18989]</font>>]
    node18989_name -> node18989 [arrowhead=none, color="black", style=dashed]
    node18989 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(promiseResolve, constructor, (new [nextValue])[#1277])</font>> color="black" fillcolor="white", style=filled]
    node18989 -> node18990 [color="black"]
    node18990_name [shape=none, label=<<font color="black">Block[18990]</font>>]
    node18990_name -> node18990 [arrowhead=none, color="black", style=dashed]
    node18990 [shape=box, label=<<font color="black">[0] let nextPromise = [? %6]<BR ALIGN="LEFT"/>[1] let stepsFulfilled = clo&lt;INTRINSICS.yet:`Promise.allSettled`ResolveElementFunction&gt;<BR ALIGN="LEFT"/>[2] let lengthFulfilled = 1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18990 -> node18991 [color="black"]
    node18991_name [shape=none, label=<<font color="black">Call[18991]</font>>]
    node18991_name -> node18991 [arrowhead=none, color="black", style=dashed]
    node18991 [shape=cds, label=<<font color="black">%7 = clo&lt;CreateBuiltinFunction&gt;(stepsFulfilled, lengthFulfilled, &quot;&quot;, (new [&quot;AlreadyCalled&quot;, &quot;Index&quot;, &quot;Values&quot;, &quot;Capability&quot;, &quot;RemainingElements&quot;])[#1278])</font>> color="black" fillcolor="white", style=filled]
    node18991 -> node18992 [color="black"]
    node18992_name [shape=none, label=<<font color="black">Block[18992]</font>>]
    node18992_name -> node18992 [arrowhead=none, color="black", style=dashed]
    node18992 [shape=box, label=<<font color="black">[0] let onFulfilled = %7<BR ALIGN="LEFT"/>[1] let alreadyCalled = (new Record(&quot;Value&quot; -&gt; false))[#1279]<BR ALIGN="LEFT"/>[2] onFulfilled.AlreadyCalled = alreadyCalled<BR ALIGN="LEFT"/>[3] onFulfilled.Index = index<BR ALIGN="LEFT"/>[4] onFulfilled.Values = values<BR ALIGN="LEFT"/>[5] onFulfilled.Capability = resultCapability<BR ALIGN="LEFT"/>[6] onFulfilled.RemainingElements = remainingElementsCount<BR ALIGN="LEFT"/>[7] let stepsRejected = clo&lt;INTRINSICS.yet:`Promise.allSettled`RejectElementFunction&gt;<BR ALIGN="LEFT"/>[8] let lengthRejected = 1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18992 -> node18993 [color="black"]
    node18993_name [shape=none, label=<<font color="black">Call[18993]</font>>]
    node18993_name -> node18993 [arrowhead=none, color="black", style=dashed]
    node18993 [shape=cds, label=<<font color="black">%8 = clo&lt;CreateBuiltinFunction&gt;(stepsRejected, lengthRejected, &quot;&quot;, (new [&quot;AlreadyCalled&quot;, &quot;Index&quot;, &quot;Values&quot;, &quot;Capability&quot;, &quot;RemainingElements&quot;])[#1280])</font>> color="black" fillcolor="white", style=filled]
    node18993 -> node18994 [color="black"]
    node18994_name [shape=none, label=<<font color="black">Block[18994]</font>>]
    node18994_name -> node18994 [arrowhead=none, color="black", style=dashed]
    node18994 [shape=box, label=<<font color="black">[0] let onRejected = %8<BR ALIGN="LEFT"/>[1] onRejected.AlreadyCalled = alreadyCalled<BR ALIGN="LEFT"/>[2] onRejected.Index = index<BR ALIGN="LEFT"/>[3] onRejected.Values = values<BR ALIGN="LEFT"/>[4] onRejected.Capability = resultCapability<BR ALIGN="LEFT"/>[5] onRejected.RemainingElements = remainingElementsCount<BR ALIGN="LEFT"/>[6] remainingElementsCount.Value = (+ remainingElementsCount.Value 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18994 -> node18995 [color="black"]
    node18995_name [shape=none, label=<<font color="black">Call[18995]</font>>]
    node18995_name -> node18995 [arrowhead=none, color="black", style=dashed]
    node18995 [shape=cds, label=<<font color="black">%9 = clo&lt;Invoke&gt;(nextPromise, &quot;then&quot;, (new [onFulfilled, onRejected])[#1281])</font>> color="black" fillcolor="white", style=filled]
    node18995 -> node18996 [color="black"]
    node18996_name [shape=none, label=<<font color="black">Block[18996]</font>>]
    node18996_name -> node18996 [arrowhead=none, color="black", style=dashed]
    node18996 [shape=box, label=<<font color="black">[0] [? %9]<BR ALIGN="LEFT"/>[1] index = (+ index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18996 -> node18968 [color="black"]
  }
}