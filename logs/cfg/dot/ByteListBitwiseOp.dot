digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2531 {
    label = "def ByteListBitwiseOp(op: Unknown["`&`,`^`,Or``"], xBytes: Unknown["ListOfByteValues"], yBytes: Unknown["ListOfByteValues"]): Unknown["ListOfByteValues"]"
    style = rounded
    cluster2531_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2531_entry_name -> cluster2531_entry [arrowhead=none, color="black", style=dashed]
    cluster2531_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2531_entry -> node17988 [color="black"]
    cluster2531_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2531_exit_name -> cluster2531_exit [arrowhead=none, color="black", style=dashed]
    cluster2531_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17988_name [shape=none, label=<<font color="black">Block[17988]</font>>]
    node17988_name -> node17988 [arrowhead=none, color="black", style=dashed]
    node17988 [shape=box, label=<<font color="black">[0] assert (yet &quot;_xBytes_ and _yBytes_ have the same number of elements.&quot;)<BR ALIGN="LEFT"/>[1] let result = (new [])[#1184]<BR ALIGN="LEFT"/>[2] let i = 0<BR ALIGN="LEFT"/>[3] %1 = xBytes<BR ALIGN="LEFT"/>[4] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17988 -> node17989 [color="black"]
    node17989_name [shape=none, label=<<font color="black">Branch[17989]</font>>]
    node17989_name -> node17989 [arrowhead=none, color="black", style=dashed]
    node17989 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node17989 -> node17990 [label=<<font color="black">true</font>> color="black"]
    node17989 -> node17997 [label=<<font color="black">false</font>> color="black"]
    node17990_name [shape=none, label=<<font color="black">Block[17990]</font>>]
    node17990_name -> node17990 [arrowhead=none, color="black", style=dashed]
    node17990 [shape=box, label=<<font color="black">[0] let xByte = %1[%0]<BR ALIGN="LEFT"/>[1] let yByte = yBytes[i]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17990 -> node17991 [color="black"]
    node17997_name [shape=none, label=<<font color="black">Block[17997]</font>>]
    node17997_name -> node17997 [arrowhead=none, color="black", style=dashed]
    node17997 [shape=box, label=<<font color="black">[0] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17997 -> cluster2531_exit [color="black"]
    node17991_name [shape=none, label=<<font color="black">Branch[17991]</font>>]
    node17991_name -> node17991 [arrowhead=none, color="black", style=dashed]
    node17991 [shape=diamond, label=<<font color="black">(= op &quot;&amp;&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17991 -> node17992 [label=<<font color="black">true</font>> color="black"]
    node17991 -> node17993 [label=<<font color="black">false</font>> color="black"]
    node17992_name [shape=none, label=<<font color="black">Block[17992]</font>>]
    node17992_name -> node17992 [arrowhead=none, color="black", style=dashed]
    node17992 [shape=box, label=<<font color="black">[0] let resultByte = (&amp; xByte yByte)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17992 -> node17996 [color="black"]
    node17993_name [shape=none, label=<<font color="black">Branch[17993]</font>>]
    node17993_name -> node17993 [arrowhead=none, color="black", style=dashed]
    node17993 [shape=diamond, label=<<font color="black">(= op &quot;^&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17993 -> node17994 [label=<<font color="black">true</font>> color="black"]
    node17993 -> node17995 [label=<<font color="black">false</font>> color="black"]
    node17996_name [shape=none, label=<<font color="black">Block[17996]</font>>]
    node17996_name -> node17996 [arrowhead=none, color="black", style=dashed]
    node17996 [shape=box, label=<<font color="black">[0] i = (+ i 1)<BR ALIGN="LEFT"/>[1] push result &lt; resultByte<BR ALIGN="LEFT"/>[2] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17996 -> node17989 [color="black"]
    node17994_name [shape=none, label=<<font color="black">Block[17994]</font>>]
    node17994_name -> node17994 [arrowhead=none, color="black", style=dashed]
    node17994 [shape=box, label=<<font color="black">[0] let resultByte = (^ xByte yByte)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17994 -> node17996 [color="black"]
    node17995_name [shape=none, label=<<font color="black">Block[17995]</font>>]
    node17995_name -> node17995 [arrowhead=none, color="black", style=dashed]
    node17995 [shape=box, label=<<font color="black">[0] (yet &quot;_op_ is `|`. Let _resultByte_ be the result of applying the bitwise inclusive OR operation to _xByte_ and _yByte_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17995 -> node17996 [color="black"]
  }
}