digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1715 {
    label = "def <SYNTAX>:AsyncArrowFunction[0,0].InstantiateAsyncArrowFunctionExpression(this: Ast:AsyncArrowFunction[0,0], name?: Unknown): FunctionObject"
    style = rounded
    cluster1715_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1715_entry_name -> cluster1715_entry [arrowhead=none, color="black", style=dashed]
    cluster1715_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1715_entry -> node9645 [color="black"]
    cluster1715_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1715_exit_name -> cluster1715_exit [arrowhead=none, color="black", style=dashed]
    cluster1715_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node9645_name [shape=none, label=<<font color="black">Branch[9645]</font>>]
    node9645_name -> node9645 [arrowhead=none, color="black", style=dashed]
    node9645 [shape=diamond, label=<<font color="black">(= name absent)</font>> color="black" fillcolor="white", style=filled]
    node9645 -> node9646 [label=<<font color="black">true</font>> color="black"]
    node9645 -> node9647 [label=<<font color="black">false</font>> color="black"]
    node9646_name [shape=none, label=<<font color="black">Block[9646]</font>>]
    node9646_name -> node9646 [arrowhead=none, color="black", style=dashed]
    node9646 [shape=box, label=<<font color="black">[0] name = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9646 -> node9647 [color="black"]
    node9647_name [shape=none, label=<<font color="black">Block[9647]</font>>]
    node9647_name -> node9647 [arrowhead=none, color="black", style=dashed]
    node9647 [shape=box, label=<<font color="black">[0] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[1] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[2] let sourceText = (source-text this)<BR ALIGN="LEFT"/>[3] let parameters = this[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9647 -> node9648 [color="black"]
    node9648_name [shape=none, label=<<font color="black">Call[9648]</font>>]
    node9648_name -> node9648 [arrowhead=none, color="black", style=dashed]
    node9648 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%AsyncFunction.prototype%&quot;], sourceText, parameters, this[1], ~lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node9648 -> node9649 [color="black"]
    node9649_name [shape=none, label=<<font color="black">Block[9649]</font>>]
    node9649_name -> node9649 [arrowhead=none, color="black", style=dashed]
    node9649 [shape=box, label=<<font color="black">[0] let closure = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9649 -> node9650 [color="black"]
    node9650_name [shape=none, label=<<font color="black">Call[9650]</font>>]
    node9650_name -> node9650 [arrowhead=none, color="black", style=dashed]
    node9650 [shape=cds, label=<<font color="black">%1 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node9650 -> node9651 [color="black"]
    node9651_name [shape=none, label=<<font color="black">Block[9651]</font>>]
    node9651_name -> node9651 [arrowhead=none, color="black", style=dashed]
    node9651 [shape=box, label=<<font color="black">[0] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node9651 -> cluster1715_exit [color="black"]
  }
}