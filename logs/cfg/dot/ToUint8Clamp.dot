digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster105 {
    label = "def ToUint8Clamp(argument: Unknown): Unknown["EitherANormalCompletionContainingAnIntegralNumberOrAnAbruptCompletion"]"
    style = rounded
    cluster105_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster105_entry_name -> cluster105_entry [arrowhead=none, color="black", style=dashed]
    cluster105_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster105_entry -> node799 [color="black"]
    cluster105_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster105_exit_name -> cluster105_exit [arrowhead=none, color="black", style=dashed]
    cluster105_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node799_name [shape=none, label=<<font color="black">Call[799]</font>>]
    node799_name -> node799 [arrowhead=none, color="black", style=dashed]
    node799 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node799 -> node800 [color="black"]
    node800_name [shape=none, label=<<font color="black">Block[800]</font>>]
    node800_name -> node800 [arrowhead=none, color="black", style=dashed]
    node800 [shape=box, label=<<font color="black">[0] let number = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node800 -> node801 [color="black"]
    node801_name [shape=none, label=<<font color="black">Branch[801]</font>>]
    node801_name -> node801 [arrowhead=none, color="black", style=dashed]
    node801 [shape=diamond, label=<<font color="black">(= number NaN)</font>> color="black" fillcolor="white", style=filled]
    node801 -> node802 [label=<<font color="black">true</font>> color="black"]
    node801 -> node803 [label=<<font color="black">false</font>> color="black"]
    node802_name [shape=none, label=<<font color="black">Block[802]</font>>]
    node802_name -> node802 [arrowhead=none, color="black", style=dashed]
    node802 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node802 -> cluster105_exit [color="black"]
    node803_name [shape=none, label=<<font color="black">Branch[803]</font>>]
    node803_name -> node803 [arrowhead=none, color="black", style=dashed]
    node803 [shape=diamond, label=<<font color="black">(! (&lt; 0 ([math] number)))</font>> color="black" fillcolor="white", style=filled]
    node803 -> node804 [label=<<font color="black">true</font>> color="black"]
    node803 -> node805 [label=<<font color="black">false</font>> color="black"]
    node804_name [shape=none, label=<<font color="black">Block[804]</font>>]
    node804_name -> node804 [arrowhead=none, color="black", style=dashed]
    node804 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node804 -> cluster105_exit [color="black"]
    node805_name [shape=none, label=<<font color="black">Branch[805]</font>>]
    node805_name -> node805 [arrowhead=none, color="black", style=dashed]
    node805 [shape=diamond, label=<<font color="black">(! (&lt; ([math] number) 255))</font>> color="black" fillcolor="white", style=filled]
    node805 -> node806 [label=<<font color="black">true</font>> color="black"]
    node805 -> node807 [label=<<font color="black">false</font>> color="black"]
    node806_name [shape=none, label=<<font color="black">Block[806]</font>>]
    node806_name -> node806 [arrowhead=none, color="black", style=dashed]
    node806 [shape=box, label=<<font color="black">[0] return 255.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node806 -> cluster105_exit [color="black"]
    node807_name [shape=none, label=<<font color="black">Block[807]</font>>]
    node807_name -> node807 [arrowhead=none, color="black", style=dashed]
    node807 [shape=box, label=<<font color="black">[0] let f = (floor ([math] number))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node807 -> node808 [color="black"]
    node808_name [shape=none, label=<<font color="black">Branch[808]</font>>]
    node808_name -> node808 [arrowhead=none, color="black", style=dashed]
    node808 [shape=diamond, label=<<font color="black">(&lt; (+ f 0.5) ([math] number))</font>> color="black" fillcolor="white", style=filled]
    node808 -> node809 [label=<<font color="black">true</font>> color="black"]
    node808 -> node810 [label=<<font color="black">false</font>> color="black"]
    node809_name [shape=none, label=<<font color="black">Block[809]</font>>]
    node809_name -> node809 [arrowhead=none, color="black", style=dashed]
    node809 [shape=box, label=<<font color="black">[0] return ([number] (+ f 1))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node809 -> cluster105_exit [color="black"]
    node810_name [shape=none, label=<<font color="black">Branch[810]</font>>]
    node810_name -> node810 [arrowhead=none, color="black", style=dashed]
    node810 [shape=diamond, label=<<font color="black">(&lt; ([math] number) (+ f 0.5))</font>> color="black" fillcolor="white", style=filled]
    node810 -> node811 [label=<<font color="black">true</font>> color="black"]
    node810 -> node812 [label=<<font color="black">false</font>> color="black"]
    node811_name [shape=none, label=<<font color="black">Block[811]</font>>]
    node811_name -> node811 [arrowhead=none, color="black", style=dashed]
    node811 [shape=box, label=<<font color="black">[0] return ([number] f)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node811 -> cluster105_exit [color="black"]
    node812_name [shape=none, label=<<font color="black">Block[812]</font>>]
    node812_name -> node812 [arrowhead=none, color="black", style=dashed]
    node812 [shape=box, label=<<font color="black">[0] (yet &quot;If _f_ is odd, return ùîΩ(_f_ + 1).&quot;)<BR ALIGN="LEFT"/>[1] return ([number] f)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node812 -> cluster105_exit [color="black"]
  }
}