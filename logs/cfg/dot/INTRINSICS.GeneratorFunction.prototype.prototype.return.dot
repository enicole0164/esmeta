digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2609 {
    label = "def <BUILTIN>:INTRINSICS.GeneratorFunction.prototype.prototype.return(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2609_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2609_entry_name -> cluster2609_entry [arrowhead=none, color="black", style=dashed]
    cluster2609_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2609_entry -> node19309 [color="black"]
    cluster2609_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2609_exit_name -> cluster2609_exit [arrowhead=none, color="black", style=dashed]
    cluster2609_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19309_name [shape=none, label=<<font color="black">Branch[19309]</font>>]
    node19309_name -> node19309 [arrowhead=none, color="black", style=dashed]
    node19309 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19309 -> node19310 [label=<<font color="black">true</font>> color="black"]
    node19309 -> node19311 [label=<<font color="black">false</font>> color="black"]
    node19310_name [shape=none, label=<<font color="black">Block[19310]</font>>]
    node19310_name -> node19310 [arrowhead=none, color="black", style=dashed]
    node19310 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19310 -> node19312 [color="black"]
    node19311_name [shape=none, label=<<font color="black">Block[19311]</font>>]
    node19311_name -> node19311 [arrowhead=none, color="black", style=dashed]
    node19311 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19311 -> node19312 [color="black"]
    node19312_name [shape=none, label=<<font color="black">Block[19312]</font>>]
    node19312_name -> node19312 [arrowhead=none, color="black", style=dashed]
    node19312 [shape=box, label=<<font color="black">[0] let g = this<BR ALIGN="LEFT"/>[1] let C = comp[~return~/~empty~](value)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19312 -> node19313 [color="black"]
    node19313_name [shape=none, label=<<font color="black">Call[19313]</font>>]
    node19313_name -> node19313 [arrowhead=none, color="black", style=dashed]
    node19313 [shape=cds, label=<<font color="black">%0 = clo&lt;GeneratorResumeAbrupt&gt;(g, C, ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node19313 -> node19314 [color="black"]
    node19314_name [shape=none, label=<<font color="black">Block[19314]</font>>]
    node19314_name -> node19314 [arrowhead=none, color="black", style=dashed]
    node19314 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19314 -> cluster2609_exit [color="black"]
  }
}