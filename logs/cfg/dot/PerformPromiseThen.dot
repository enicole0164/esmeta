digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2605 {
    label = "def PerformPromiseThen(promise: Unknown, onFulfilled: Unknown, onRejected: Unknown, resultCapability?: PromiseCapabilityRecord): ESValue"
    style = rounded
    cluster2605_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2605_entry_name -> cluster2605_entry [arrowhead=none, color="black", style=dashed]
    cluster2605_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2605_entry -> node19266 [color="black"]
    cluster2605_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2605_exit_name -> cluster2605_exit [arrowhead=none, color="black", style=dashed]
    cluster2605_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19266_name [shape=none, label=<<font color="black">Call[19266]</font>>]
    node19266_name -> node19266 [arrowhead=none, color="black", style=dashed]
    node19266 [shape=cds, label=<<font color="black">%0 = clo&lt;IsPromise&gt;(promise)</font>> color="black" fillcolor="white", style=filled]
    node19266 -> node19267 [color="black"]
    node19267_name [shape=none, label=<<font color="black">Block[19267]</font>>]
    node19267_name -> node19267 [arrowhead=none, color="black", style=dashed]
    node19267 [shape=box, label=<<font color="black">[0] assert (= %0 true)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19267 -> node19268 [color="black"]
    node19268_name [shape=none, label=<<font color="black">Branch[19268]</font>>]
    node19268_name -> node19268 [arrowhead=none, color="black", style=dashed]
    node19268 [shape=diamond, label=<<font color="black">(= resultCapability absent)</font>> color="black" fillcolor="white", style=filled]
    node19268 -> node19269 [label=<<font color="black">true</font>> color="black"]
    node19268 -> node19270 [label=<<font color="black">false</font>> color="black"]
    node19269_name [shape=none, label=<<font color="black">Block[19269]</font>>]
    node19269_name -> node19269 [arrowhead=none, color="black", style=dashed]
    node19269 [shape=box, label=<<font color="black">[0] resultCapability = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19269 -> node19270 [color="black"]
    node19270_name [shape=none, label=<<font color="black">Call[19270]</font>>]
    node19270_name -> node19270 [arrowhead=none, color="black", style=dashed]
    node19270 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(onFulfilled)</font>> color="black" fillcolor="white", style=filled]
    node19270 -> node19271 [color="black"]
    node19271_name [shape=none, label=<<font color="black">Branch[19271]</font>>]
    node19271_name -> node19271 [arrowhead=none, color="black", style=dashed]
    node19271 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node19271 -> node19272 [label=<<font color="black">true</font>> color="black"]
    node19271 -> node19273 [label=<<font color="black">false</font>> color="black"]
    node19272_name [shape=none, label=<<font color="black">Block[19272]</font>>]
    node19272_name -> node19272 [arrowhead=none, color="black", style=dashed]
    node19272 [shape=box, label=<<font color="black">[0] let onFulfilledJobCallback = ~empty~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19272 -> node19275 [color="black"]
    node19273_name [shape=none, label=<<font color="black">Call[19273]</font>>]
    node19273_name -> node19273 [arrowhead=none, color="black", style=dashed]
    node19273 [shape=cds, label=<<font color="black">%2 = clo&lt;HostMakeJobCallback&gt;(onFulfilled)</font>> color="black" fillcolor="white", style=filled]
    node19273 -> node19274 [color="black"]
    node19275_name [shape=none, label=<<font color="black">Call[19275]</font>>]
    node19275_name -> node19275 [arrowhead=none, color="black", style=dashed]
    node19275 [shape=cds, label=<<font color="black">%3 = clo&lt;IsCallable&gt;(onRejected)</font>> color="black" fillcolor="white", style=filled]
    node19275 -> node19276 [color="black"]
    node19274_name [shape=none, label=<<font color="black">Block[19274]</font>>]
    node19274_name -> node19274 [arrowhead=none, color="black", style=dashed]
    node19274 [shape=box, label=<<font color="black">[0] let onFulfilledJobCallback = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19274 -> node19275 [color="black"]
    node19276_name [shape=none, label=<<font color="black">Branch[19276]</font>>]
    node19276_name -> node19276 [arrowhead=none, color="black", style=dashed]
    node19276 [shape=diamond, label=<<font color="black">(= %3 false)</font>> color="black" fillcolor="white", style=filled]
    node19276 -> node19277 [label=<<font color="black">true</font>> color="black"]
    node19276 -> node19278 [label=<<font color="black">false</font>> color="black"]
    node19277_name [shape=none, label=<<font color="black">Block[19277]</font>>]
    node19277_name -> node19277 [arrowhead=none, color="black", style=dashed]
    node19277 [shape=box, label=<<font color="black">[0] let onRejectedJobCallback = ~empty~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19277 -> node19280 [color="black"]
    node19278_name [shape=none, label=<<font color="black">Call[19278]</font>>]
    node19278_name -> node19278 [arrowhead=none, color="black", style=dashed]
    node19278 [shape=cds, label=<<font color="black">%4 = clo&lt;HostMakeJobCallback&gt;(onRejected)</font>> color="black" fillcolor="white", style=filled]
    node19278 -> node19279 [color="black"]
    node19280_name [shape=none, label=<<font color="black">Block[19280]</font>>]
    node19280_name -> node19280 [arrowhead=none, color="black", style=dashed]
    node19280 [shape=box, label=<<font color="black">[0] let fulfillReaction = (new PromiseReaction(&quot;Capability&quot; -&gt; resultCapability, &quot;Type&quot; -&gt; ~Fulfill~, &quot;Handler&quot; -&gt; onFulfilledJobCallback))[#1315]<BR ALIGN="LEFT"/>[1] let rejectReaction = (new PromiseReaction(&quot;Capability&quot; -&gt; resultCapability, &quot;Type&quot; -&gt; ~Reject~, &quot;Handler&quot; -&gt; onRejectedJobCallback))[#1316]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19280 -> node19281 [color="black"]
    node19279_name [shape=none, label=<<font color="black">Block[19279]</font>>]
    node19279_name -> node19279 [arrowhead=none, color="black", style=dashed]
    node19279 [shape=box, label=<<font color="black">[0] let onRejectedJobCallback = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19279 -> node19280 [color="black"]
    node19281_name [shape=none, label=<<font color="black">Branch[19281]</font>>]
    node19281_name -> node19281 [arrowhead=none, color="black", style=dashed]
    node19281 [shape=diamond, label=<<font color="black">(= promise.PromiseState ~pending~)</font>> color="black" fillcolor="white", style=filled]
    node19281 -> node19282 [label=<<font color="black">true</font>> color="black"]
    node19281 -> node19283 [label=<<font color="black">false</font>> color="black"]
    node19282_name [shape=none, label=<<font color="black">Block[19282]</font>>]
    node19282_name -> node19282 [arrowhead=none, color="black", style=dashed]
    node19282 [shape=box, label=<<font color="black">[0] push promise.PromiseFulfillReactions &lt; fulfillReaction<BR ALIGN="LEFT"/>[1] push promise.PromiseRejectReactions &lt; rejectReaction<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19282 -> node19294 [color="black"]
    node19283_name [shape=none, label=<<font color="black">Branch[19283]</font>>]
    node19283_name -> node19283 [arrowhead=none, color="black", style=dashed]
    node19283 [shape=diamond, label=<<font color="black">(= promise.PromiseState ~fulfilled~)</font>> color="black" fillcolor="white", style=filled]
    node19283 -> node19284 [label=<<font color="black">true</font>> color="black"]
    node19283 -> node19288 [label=<<font color="black">false</font>> color="black"]
    node19294_name [shape=none, label=<<font color="black">Block[19294]</font>>]
    node19294_name -> node19294 [arrowhead=none, color="black", style=dashed]
    node19294 [shape=box, label=<<font color="black">[0] promise.PromiseIsHandled = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19294 -> node19295 [color="black"]
    node19284_name [shape=none, label=<<font color="black">Block[19284]</font>>]
    node19284_name -> node19284 [arrowhead=none, color="black", style=dashed]
    node19284 [shape=box, label=<<font color="black">[0] let value = promise.PromiseResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19284 -> node19285 [color="black"]
    node19288_name [shape=none, label=<<font color="black">Block[19288]</font>>]
    node19288_name -> node19288 [arrowhead=none, color="black", style=dashed]
    node19288 [shape=box, label=<<font color="black">[0] assert (= promise.PromiseState ~rejected~)<BR ALIGN="LEFT"/>[1] let reason = promise.PromiseResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19288 -> node19289 [color="black"]
    node19295_name [shape=none, label=<<font color="black">Branch[19295]</font>>]
    node19295_name -> node19295 [arrowhead=none, color="black", style=dashed]
    node19295 [shape=diamond, label=<<font color="black">(= resultCapability undefined)</font>> color="black" fillcolor="white", style=filled]
    node19295 -> node19296 [label=<<font color="black">true</font>> color="black"]
    node19295 -> node19297 [label=<<font color="black">false</font>> color="black"]
    node19285_name [shape=none, label=<<font color="black">Call[19285]</font>>]
    node19285_name -> node19285 [arrowhead=none, color="black", style=dashed]
    node19285 [shape=cds, label=<<font color="black">%5 = clo&lt;NewPromiseReactionJob&gt;(fulfillReaction, value)</font>> color="black" fillcolor="white", style=filled]
    node19285 -> node19286 [color="black"]
    node19289_name [shape=none, label=<<font color="black">Branch[19289]</font>>]
    node19289_name -> node19289 [arrowhead=none, color="black", style=dashed]
    node19289 [shape=diamond, label=<<font color="black">(= promise.PromiseIsHandled false)</font>> color="black" fillcolor="white", style=filled]
    node19289 -> node19290 [label=<<font color="black">true</font>> color="black"]
    node19289 -> node19291 [label=<<font color="black">false</font>> color="black"]
    node19296_name [shape=none, label=<<font color="black">Block[19296]</font>>]
    node19296_name -> node19296 [arrowhead=none, color="black", style=dashed]
    node19296 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19296 -> cluster2605_exit [color="black"]
    node19297_name [shape=none, label=<<font color="black">Block[19297]</font>>]
    node19297_name -> node19297 [arrowhead=none, color="black", style=dashed]
    node19297 [shape=box, label=<<font color="black">[0] return resultCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19297 -> cluster2605_exit [color="black"]
    node19286_name [shape=none, label=<<font color="black">Block[19286]</font>>]
    node19286_name -> node19286 [arrowhead=none, color="black", style=dashed]
    node19286 [shape=box, label=<<font color="black">[0] let fulfillJob = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19286 -> node19287 [color="black"]
    node19290_name [shape=none, label=<<font color="black">Call[19290]</font>>]
    node19290_name -> node19290 [arrowhead=none, color="black", style=dashed]
    node19290 [shape=cds, label=<<font color="black">%7 = clo&lt;HostPromiseRejectionTracker&gt;(promise, &quot;handle&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19290 -> node19291 [color="black"]
    node19291_name [shape=none, label=<<font color="black">Call[19291]</font>>]
    node19291_name -> node19291 [arrowhead=none, color="black", style=dashed]
    node19291 [shape=cds, label=<<font color="black">%8 = clo&lt;NewPromiseReactionJob&gt;(rejectReaction, reason)</font>> color="black" fillcolor="white", style=filled]
    node19291 -> node19292 [color="black"]
    node19287_name [shape=none, label=<<font color="black">Call[19287]</font>>]
    node19287_name -> node19287 [arrowhead=none, color="black", style=dashed]
    node19287 [shape=cds, label=<<font color="black">%6 = clo&lt;HostEnqueuePromiseJob&gt;(fulfillJob.Job, fulfillJob.Realm)</font>> color="black" fillcolor="white", style=filled]
    node19287 -> node19294 [color="black"]
    node19292_name [shape=none, label=<<font color="black">Block[19292]</font>>]
    node19292_name -> node19292 [arrowhead=none, color="black", style=dashed]
    node19292 [shape=box, label=<<font color="black">[0] let rejectJob = %8<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19292 -> node19293 [color="black"]
    node19293_name [shape=none, label=<<font color="black">Call[19293]</font>>]
    node19293_name -> node19293 [arrowhead=none, color="black", style=dashed]
    node19293 [shape=cds, label=<<font color="black">%9 = clo&lt;HostEnqueuePromiseJob&gt;(rejectJob.Job, rejectJob.Realm)</font>> color="black" fillcolor="white", style=filled]
    node19293 -> node19294 [color="black"]
  }
}