digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster106 {
    label = "def ToBigInt(argument: Unknown): Normal[BigInt] | Abrupt"
    style = rounded
    cluster106_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster106_entry_name -> cluster106_entry [arrowhead=none, color="black", style=dashed]
    cluster106_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster106_entry -> node813 [color="black"]
    cluster106_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster106_exit_name -> cluster106_exit [arrowhead=none, color="black", style=dashed]
    cluster106_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node813_name [shape=none, label=<<font color="black">Call[813]</font>>]
    node813_name -> node813 [arrowhead=none, color="black", style=dashed]
    node813 [shape=cds, label=<<font color="black">%0 = clo&lt;ToPrimitive&gt;(argument, ~number~)</font>> color="black" fillcolor="white", style=filled]
    node813 -> node814 [color="black"]
    node814_name [shape=none, label=<<font color="black">Block[814]</font>>]
    node814_name -> node814 [arrowhead=none, color="black", style=dashed]
    node814 [shape=box, label=<<font color="black">[0] let prim = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node814 -> node815 [color="black"]
    node815_name [shape=none, label=<<font color="black">Branch[815]</font>>]
    node815_name -> node815 [arrowhead=none, color="black", style=dashed]
    node815 [shape=diamond, label=<<font color="black">(= (typeof prim) @Undefined)</font>> color="black" fillcolor="white", style=filled]
    node815 -> node816 [label=<<font color="black">true</font>> color="black"]
    node815 -> node817 [label=<<font color="black">false</font>> color="black"]
    node816_name [shape=none, label=<<font color="black">Block[816]</font>>]
    node816_name -> node816 [arrowhead=none, color="black", style=dashed]
    node816 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#32])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node816 -> cluster106_exit [color="black"]
    node817_name [shape=none, label=<<font color="black">Branch[817]</font>>]
    node817_name -> node817 [arrowhead=none, color="black", style=dashed]
    node817 [shape=diamond, label=<<font color="black">(= (typeof prim) @Null)</font>> color="black" fillcolor="white", style=filled]
    node817 -> node818 [label=<<font color="black">true</font>> color="black"]
    node817 -> node819 [label=<<font color="black">false</font>> color="black"]
    node818_name [shape=none, label=<<font color="black">Block[818]</font>>]
    node818_name -> node818 [arrowhead=none, color="black", style=dashed]
    node818 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#33])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node818 -> cluster106_exit [color="black"]
    node819_name [shape=none, label=<<font color="black">Branch[819]</font>>]
    node819_name -> node819 [arrowhead=none, color="black", style=dashed]
    node819 [shape=diamond, label=<<font color="black">(= (typeof prim) @Boolean)</font>> color="black" fillcolor="white", style=filled]
    node819 -> node820 [label=<<font color="black">true</font>> color="black"]
    node819 -> node823 [label=<<font color="black">false</font>> color="black"]
    node820_name [shape=none, label=<<font color="black">Branch[820]</font>>]
    node820_name -> node820 [arrowhead=none, color="black", style=dashed]
    node820 [shape=diamond, label=<<font color="black">prim</font>> color="black" fillcolor="white", style=filled]
    node820 -> node821 [label=<<font color="black">true</font>> color="black"]
    node820 -> node822 [label=<<font color="black">false</font>> color="black"]
    node823_name [shape=none, label=<<font color="black">Branch[823]</font>>]
    node823_name -> node823 [arrowhead=none, color="black", style=dashed]
    node823 [shape=diamond, label=<<font color="black">(= (typeof prim) @BigInt)</font>> color="black" fillcolor="white", style=filled]
    node823 -> node824 [label=<<font color="black">true</font>> color="black"]
    node823 -> node825 [label=<<font color="black">false</font>> color="black"]
    node821_name [shape=none, label=<<font color="black">Block[821]</font>>]
    node821_name -> node821 [arrowhead=none, color="black", style=dashed]
    node821 [shape=box, label=<<font color="black">[0] return 1n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node821 -> cluster106_exit [color="black"]
    node822_name [shape=none, label=<<font color="black">Block[822]</font>>]
    node822_name -> node822 [arrowhead=none, color="black", style=dashed]
    node822 [shape=box, label=<<font color="black">[0] return 0n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node822 -> cluster106_exit [color="black"]
    node824_name [shape=none, label=<<font color="black">Block[824]</font>>]
    node824_name -> node824 [arrowhead=none, color="black", style=dashed]
    node824 [shape=box, label=<<font color="black">[0] return prim<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node824 -> cluster106_exit [color="black"]
    node825_name [shape=none, label=<<font color="black">Branch[825]</font>>]
    node825_name -> node825 [arrowhead=none, color="black", style=dashed]
    node825 [shape=diamond, label=<<font color="black">(= (typeof prim) @Number)</font>> color="black" fillcolor="white", style=filled]
    node825 -> node826 [label=<<font color="black">true</font>> color="black"]
    node825 -> node827 [label=<<font color="black">false</font>> color="black"]
    node826_name [shape=none, label=<<font color="black">Block[826]</font>>]
    node826_name -> node826 [arrowhead=none, color="black", style=dashed]
    node826 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#34])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node826 -> cluster106_exit [color="black"]
    node827_name [shape=none, label=<<font color="black">Branch[827]</font>>]
    node827_name -> node827 [arrowhead=none, color="black", style=dashed]
    node827 [shape=diamond, label=<<font color="black">(= (typeof prim) @String)</font>> color="black" fillcolor="white", style=filled]
    node827 -> node828 [label=<<font color="black">true</font>> color="black"]
    node827 -> node833 [label=<<font color="black">false</font>> color="black"]
    node828_name [shape=none, label=<<font color="black">Call[828]</font>>]
    node828_name -> node828 [arrowhead=none, color="black", style=dashed]
    node828 [shape=cds, label=<<font color="black">%1 = clo&lt;StringToBigInt&gt;(prim)</font>> color="black" fillcolor="white", style=filled]
    node828 -> node829 [color="black"]
    node833_name [shape=none, label=<<font color="black">Block[833]</font>>]
    node833_name -> node833 [arrowhead=none, color="black", style=dashed]
    node833 [shape=box, label=<<font color="black">[0] assert (= (typeof prim) @Symbol)<BR ALIGN="LEFT"/>[1] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#36])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node833 -> cluster106_exit [color="black"]
    node829_name [shape=none, label=<<font color="black">Block[829]</font>>]
    node829_name -> node829 [arrowhead=none, color="black", style=dashed]
    node829 [shape=box, label=<<font color="black">[0] let n = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node829 -> node830 [color="black"]
    node830_name [shape=none, label=<<font color="black">Branch[830]</font>>]
    node830_name -> node830 [arrowhead=none, color="black", style=dashed]
    node830 [shape=diamond, label=<<font color="black">(= n undefined)</font>> color="black" fillcolor="white", style=filled]
    node830 -> node831 [label=<<font color="black">true</font>> color="black"]
    node830 -> node832 [label=<<font color="black">false</font>> color="black"]
    node831_name [shape=none, label=<<font color="black">Block[831]</font>>]
    node831_name -> node831 [arrowhead=none, color="black", style=dashed]
    node831 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%SyntaxError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#35])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node831 -> cluster106_exit [color="black"]
    node832_name [shape=none, label=<<font color="black">Block[832]</font>>]
    node832_name -> node832 [arrowhead=none, color="black", style=dashed]
    node832 [shape=box, label=<<font color="black">[0] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node832 -> cluster106_exit [color="black"]
  }
}