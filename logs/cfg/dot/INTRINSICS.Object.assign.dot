digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1996 {
    label = "def <BUILTIN>:INTRINSICS.Object.assign(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster1996_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1996_entry_name -> cluster1996_entry [arrowhead=none, color="black", style=dashed]
    cluster1996_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1996_entry -> node11038 [color="black"]
    cluster1996_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1996_exit_name -> cluster1996_exit [arrowhead=none, color="black", style=dashed]
    cluster1996_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11038_name [shape=none, label=<<font color="black">Branch[11038]</font>>]
    node11038_name -> node11038 [arrowhead=none, color="black", style=dashed]
    node11038 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11038 -> node11039 [label=<<font color="black">true</font>> color="black"]
    node11038 -> node11040 [label=<<font color="black">false</font>> color="black"]
    node11039_name [shape=none, label=<<font color="black">Block[11039]</font>>]
    node11039_name -> node11039 [arrowhead=none, color="black", style=dashed]
    node11039 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11039 -> node11041 [color="black"]
    node11040_name [shape=none, label=<<font color="black">Block[11040]</font>>]
    node11040_name -> node11040 [arrowhead=none, color="black", style=dashed]
    node11040 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11040 -> node11041 [color="black"]
    node11041_name [shape=none, label=<<font color="black">Block[11041]</font>>]
    node11041_name -> node11041 [arrowhead=none, color="black", style=dashed]
    node11041 [shape=box, label=<<font color="black">[0] let sources = argumentsList<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11041 -> node11042 [color="black"]
    node11042_name [shape=none, label=<<font color="black">Call[11042]</font>>]
    node11042_name -> node11042 [arrowhead=none, color="black", style=dashed]
    node11042 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node11042 -> node11043 [color="black"]
    node11043_name [shape=none, label=<<font color="black">Block[11043]</font>>]
    node11043_name -> node11043 [arrowhead=none, color="black", style=dashed]
    node11043 [shape=box, label=<<font color="black">[0] let to = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11043 -> node11044 [color="black"]
    node11044_name [shape=none, label=<<font color="black">Branch[11044]</font>>]
    node11044_name -> node11044 [arrowhead=none, color="black", style=dashed]
    node11044 [shape=diamond, label=<<font color="black">(= argumentsList.length 0)</font>> color="black" fillcolor="white", style=filled]
    node11044 -> node11045 [label=<<font color="black">true</font>> color="black"]
    node11044 -> node11046 [label=<<font color="black">false</font>> color="black"]
    node11045_name [shape=none, label=<<font color="black">Block[11045]</font>>]
    node11045_name -> node11045 [arrowhead=none, color="black", style=dashed]
    node11045 [shape=box, label=<<font color="black">[0] return to<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11045 -> cluster1996_exit [color="black"]
    node11046_name [shape=none, label=<<font color="black">Block[11046]</font>>]
    node11046_name -> node11046 [arrowhead=none, color="black", style=dashed]
    node11046 [shape=box, label=<<font color="black">[0] %2 = sources<BR ALIGN="LEFT"/>[1] %1 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11046 -> node11047 [color="black"]
    node11047_name [shape=none, label=<<font color="black">Branch[11047]</font>>]
    node11047_name -> node11047 [arrowhead=none, color="black", style=dashed]
    node11047 [shape=diamond, label=<<font color="black">(&lt; %1 %2.length)</font>> color="black" fillcolor="white", style=filled]
    node11047 -> node11048 [label=<<font color="black">true</font>> color="black"]
    node11047 -> node11065 [label=<<font color="black">false</font>> color="black"]
    node11048_name [shape=none, label=<<font color="black">Block[11048]</font>>]
    node11048_name -> node11048 [arrowhead=none, color="black", style=dashed]
    node11048 [shape=box, label=<<font color="black">[0] let nextSource = %2[%1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11048 -> node11049 [color="black"]
    node11065_name [shape=none, label=<<font color="black">Block[11065]</font>>]
    node11065_name -> node11065 [arrowhead=none, color="black", style=dashed]
    node11065 [shape=box, label=<<font color="black">[0] return to<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11065 -> cluster1996_exit [color="black"]
    node11049_name [shape=none, label=<<font color="black">Branch[11049]</font>>]
    node11049_name -> node11049 [arrowhead=none, color="black", style=dashed]
    node11049 [shape=diamond, label=<<font color="black">(! (|| (= nextSource undefined) (= nextSource null)))</font>> color="black" fillcolor="white", style=filled]
    node11049 -> node11050 [label=<<font color="black">true</font>> color="black"]
    node11049 -> node11064 [label=<<font color="black">false</font>> color="black"]
    node11050_name [shape=none, label=<<font color="black">Call[11050]</font>>]
    node11050_name -> node11050 [arrowhead=none, color="black", style=dashed]
    node11050 [shape=cds, label=<<font color="black">%3 = clo&lt;ToObject&gt;(nextSource)</font>> color="black" fillcolor="white", style=filled]
    node11050 -> node11051 [color="black"]
    node11064_name [shape=none, label=<<font color="black">Block[11064]</font>>]
    node11064_name -> node11064 [arrowhead=none, color="black", style=dashed]
    node11064 [shape=box, label=<<font color="black">[0] %1 = (+ %1 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11064 -> node11047 [color="black"]
    node11051_name [shape=none, label=<<font color="black">Block[11051]</font>>]
    node11051_name -> node11051 [arrowhead=none, color="black", style=dashed]
    node11051 [shape=box, label=<<font color="black">[0] let from = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11051 -> node11052 [color="black"]
    node11052_name [shape=none, label=<<font color="black">Call[11052]</font>>]
    node11052_name -> node11052 [arrowhead=none, color="black", style=dashed]
    node11052 [shape=cds, label=<<font color="black">%4 = from-&gt;OwnPropertyKeys()</font>> color="black" fillcolor="white", style=filled]
    node11052 -> node11053 [color="black"]
    node11053_name [shape=none, label=<<font color="black">Block[11053]</font>>]
    node11053_name -> node11053 [arrowhead=none, color="black", style=dashed]
    node11053 [shape=box, label=<<font color="black">[0] let keys = [? %4]<BR ALIGN="LEFT"/>[1] %6 = keys<BR ALIGN="LEFT"/>[2] %5 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11053 -> node11054 [color="black"]
    node11054_name [shape=none, label=<<font color="black">Branch[11054]</font>>]
    node11054_name -> node11054 [arrowhead=none, color="black", style=dashed]
    node11054 [shape=diamond, label=<<font color="black">(&lt; %5 %6.length)</font>> color="black" fillcolor="white", style=filled]
    node11054 -> node11055 [label=<<font color="black">true</font>> color="black"]
    node11054 -> node11064 [label=<<font color="black">false</font>> color="black"]
    node11055_name [shape=none, label=<<font color="black">Block[11055]</font>>]
    node11055_name -> node11055 [arrowhead=none, color="black", style=dashed]
    node11055 [shape=box, label=<<font color="black">[0] let nextKey = %6[%5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11055 -> node11056 [color="black"]
    node11056_name [shape=none, label=<<font color="black">Call[11056]</font>>]
    node11056_name -> node11056 [arrowhead=none, color="black", style=dashed]
    node11056 [shape=cds, label=<<font color="black">%7 = from-&gt;GetOwnProperty(nextKey)</font>> color="black" fillcolor="white", style=filled]
    node11056 -> node11057 [color="black"]
    node11057_name [shape=none, label=<<font color="black">Block[11057]</font>>]
    node11057_name -> node11057 [arrowhead=none, color="black", style=dashed]
    node11057 [shape=box, label=<<font color="black">[0] let desc = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11057 -> node11058 [color="black"]
    node11058_name [shape=none, label=<<font color="black">Branch[11058]</font>>]
    node11058_name -> node11058 [arrowhead=none, color="black", style=dashed]
    node11058 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= desc undefined)) (= desc.Enumerable true))</font>> color="black" fillcolor="white", style=filled]
    node11058 -> node11059 [label=<<font color="black">true</font>> color="black"]
    node11058 -> node11063 [label=<<font color="black">false</font>> color="black"]
    node11059_name [shape=none, label=<<font color="black">Call[11059]</font>>]
    node11059_name -> node11059 [arrowhead=none, color="black", style=dashed]
    node11059 [shape=cds, label=<<font color="black">%8 = clo&lt;Get&gt;(from, nextKey)</font>> color="black" fillcolor="white", style=filled]
    node11059 -> node11060 [color="black"]
    node11063_name [shape=none, label=<<font color="black">Block[11063]</font>>]
    node11063_name -> node11063 [arrowhead=none, color="black", style=dashed]
    node11063 [shape=box, label=<<font color="black">[0] %5 = (+ %5 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11063 -> node11054 [color="black"]
    node11060_name [shape=none, label=<<font color="black">Block[11060]</font>>]
    node11060_name -> node11060 [arrowhead=none, color="black", style=dashed]
    node11060 [shape=box, label=<<font color="black">[0] let propValue = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11060 -> node11061 [color="black"]
    node11061_name [shape=none, label=<<font color="black">Call[11061]</font>>]
    node11061_name -> node11061 [arrowhead=none, color="black", style=dashed]
    node11061 [shape=cds, label=<<font color="black">%9 = clo&lt;Set&gt;(to, nextKey, propValue, true)</font>> color="black" fillcolor="white", style=filled]
    node11061 -> node11062 [color="black"]
    node11062_name [shape=none, label=<<font color="black">Block[11062]</font>>]
    node11062_name -> node11062 [arrowhead=none, color="black", style=dashed]
    node11062 [shape=box, label=<<font color="black">[0] [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11062 -> node11063 [color="black"]
  }
}