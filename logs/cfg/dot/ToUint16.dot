digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster102 {
    label = "def ToUint16(argument: Unknown): Unknown["EitherANormalCompletionContainingAnIntegralNumberOrAnAbruptCompletion"]"
    style = rounded
    cluster102_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster102_entry_name -> cluster102_entry [arrowhead=none, color="black", style=dashed]
    cluster102_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster102_entry -> node772 [color="black"]
    cluster102_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster102_exit_name -> cluster102_exit [arrowhead=none, color="black", style=dashed]
    cluster102_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node772_name [shape=none, label=<<font color="black">Call[772]</font>>]
    node772_name -> node772 [arrowhead=none, color="black", style=dashed]
    node772 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node772 -> node773 [color="black"]
    node773_name [shape=none, label=<<font color="black">Block[773]</font>>]
    node773_name -> node773 [arrowhead=none, color="black", style=dashed]
    node773 [shape=box, label=<<font color="black">[0] let number = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node773 -> node774 [color="black"]
    node774_name [shape=none, label=<<font color="black">Branch[774]</font>>]
    node774_name -> node774 [arrowhead=none, color="black", style=dashed]
    node774 [shape=diamond, label=<<font color="black">(|| (|| (|| (|| (= number NaN) (= number 0.0f)) (= number -0.0f)) (= number +INF)) (= number -INF))</font>> color="black" fillcolor="white", style=filled]
    node774 -> node775 [label=<<font color="black">true</font>> color="black"]
    node774 -> node776 [label=<<font color="black">false</font>> color="black"]
    node775_name [shape=none, label=<<font color="black">Block[775]</font>>]
    node775_name -> node775 [arrowhead=none, color="black", style=dashed]
    node775 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node775 -> cluster102_exit [color="black"]
    node776_name [shape=none, label=<<font color="black">Block[776]</font>>]
    node776_name -> node776 [arrowhead=none, color="black", style=dashed]
    node776 [shape=box, label=<<font color="black">[0] let int = (floor (abs ([math] number)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node776 -> node777 [color="black"]
    node777_name [shape=none, label=<<font color="black">Branch[777]</font>>]
    node777_name -> node777 [arrowhead=none, color="black", style=dashed]
    node777 [shape=diamond, label=<<font color="black">(&lt; number 0.0f)</font>> color="black" fillcolor="white", style=filled]
    node777 -> node778 [label=<<font color="black">true</font>> color="black"]
    node777 -> node779 [label=<<font color="black">false</font>> color="black"]
    node778_name [shape=none, label=<<font color="black">Block[778]</font>>]
    node778_name -> node778 [arrowhead=none, color="black", style=dashed]
    node778 [shape=box, label=<<font color="black">[0] int = (* -1 int)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node778 -> node779 [color="black"]
    node779_name [shape=none, label=<<font color="black">Block[779]</font>>]
    node779_name -> node779 [arrowhead=none, color="black", style=dashed]
    node779 [shape=box, label=<<font color="black">[0] let int16bit = (% int (** 2 16))<BR ALIGN="LEFT"/>[1] return ([number] int16bit)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node779 -> cluster102_exit [color="black"]
  }
}