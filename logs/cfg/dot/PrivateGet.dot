digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster158 {
    label = "def PrivateGet(O: Object, P: PrivateName): Normal[ESValue] | Abrupt"
    style = rounded
    cluster158_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster158_entry_name -> cluster158_entry [arrowhead=none, color="black", style=dashed]
    cluster158_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster158_entry -> node1349 [color="black"]
    cluster158_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster158_exit_name -> cluster158_exit [arrowhead=none, color="black", style=dashed]
    cluster158_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1349_name [shape=none, label=<<font color="black">Call[1349]</font>>]
    node1349_name -> node1349 [arrowhead=none, color="black", style=dashed]
    node1349 [shape=cds, label=<<font color="black">%0 = clo&lt;PrivateElementFind&gt;(O, P)</font>> color="black" fillcolor="white", style=filled]
    node1349 -> node1350 [color="black"]
    node1350_name [shape=none, label=<<font color="black">Block[1350]</font>>]
    node1350_name -> node1350 [arrowhead=none, color="black", style=dashed]
    node1350 [shape=box, label=<<font color="black">[0] let entry = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1350 -> node1351 [color="black"]
    node1351_name [shape=none, label=<<font color="black">Branch[1351]</font>>]
    node1351_name -> node1351 [arrowhead=none, color="black", style=dashed]
    node1351 [shape=diamond, label=<<font color="black">(= entry ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node1351 -> node1352 [label=<<font color="black">true</font>> color="black"]
    node1351 -> node1353 [label=<<font color="black">false</font>> color="black"]
    node1352_name [shape=none, label=<<font color="black">Block[1352]</font>>]
    node1352_name -> node1352 [arrowhead=none, color="black", style=dashed]
    node1352 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#68])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1352 -> cluster158_exit [color="black"]
    node1353_name [shape=none, label=<<font color="black">Branch[1353]</font>>]
    node1353_name -> node1353 [arrowhead=none, color="black", style=dashed]
    node1353 [shape=diamond, label=<<font color="black">(|| (= entry.Kind ~field~) (= entry.Kind ~method~))</font>> color="black" fillcolor="white", style=filled]
    node1353 -> node1354 [label=<<font color="black">true</font>> color="black"]
    node1353 -> node1355 [label=<<font color="black">false</font>> color="black"]
    node1354_name [shape=none, label=<<font color="black">Block[1354]</font>>]
    node1354_name -> node1354 [arrowhead=none, color="black", style=dashed]
    node1354 [shape=box, label=<<font color="black">[0] return entry.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1354 -> cluster158_exit [color="black"]
    node1355_name [shape=none, label=<<font color="black">Block[1355]</font>>]
    node1355_name -> node1355 [arrowhead=none, color="black", style=dashed]
    node1355 [shape=box, label=<<font color="black">[0] assert (= entry.Kind ~accessor~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1355 -> node1356 [color="black"]
    node1356_name [shape=none, label=<<font color="black">Branch[1356]</font>>]
    node1356_name -> node1356 [arrowhead=none, color="black", style=dashed]
    node1356 [shape=diamond, label=<<font color="black">(= entry.Get undefined)</font>> color="black" fillcolor="white", style=filled]
    node1356 -> node1357 [label=<<font color="black">true</font>> color="black"]
    node1356 -> node1358 [label=<<font color="black">false</font>> color="black"]
    node1357_name [shape=none, label=<<font color="black">Block[1357]</font>>]
    node1357_name -> node1357 [arrowhead=none, color="black", style=dashed]
    node1357 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#69])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1357 -> cluster158_exit [color="black"]
    node1358_name [shape=none, label=<<font color="black">Block[1358]</font>>]
    node1358_name -> node1358 [arrowhead=none, color="black", style=dashed]
    node1358 [shape=box, label=<<font color="black">[0] let getter = entry.Get<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1358 -> node1359 [color="black"]
    node1359_name [shape=none, label=<<font color="black">Call[1359]</font>>]
    node1359_name -> node1359 [arrowhead=none, color="black", style=dashed]
    node1359 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(getter, O)</font>> color="black" fillcolor="white", style=filled]
    node1359 -> node1360 [color="black"]
    node1360_name [shape=none, label=<<font color="black">Block[1360]</font>>]
    node1360_name -> node1360 [arrowhead=none, color="black", style=dashed]
    node1360 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1360 -> cluster158_exit [color="black"]
  }
}