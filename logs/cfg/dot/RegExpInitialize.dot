digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2306 {
    label = "def RegExpInitialize(obj: Object, pattern: ESValue, flags: ESValue): Normal[Object] | Abrupt"
    style = rounded
    cluster2306_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2306_entry_name -> cluster2306_entry [arrowhead=none, color="black", style=dashed]
    cluster2306_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2306_entry -> node14123 [color="black"]
    cluster2306_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2306_exit_name -> cluster2306_exit [arrowhead=none, color="black", style=dashed]
    cluster2306_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14123_name [shape=none, label=<<font color="black">Branch[14123]</font>>]
    node14123_name -> node14123 [arrowhead=none, color="black", style=dashed]
    node14123 [shape=diamond, label=<<font color="black">(= pattern undefined)</font>> color="black" fillcolor="white", style=filled]
    node14123 -> node14124 [label=<<font color="black">true</font>> color="black"]
    node14123 -> node14125 [label=<<font color="black">false</font>> color="black"]
    node14124_name [shape=none, label=<<font color="black">Block[14124]</font>>]
    node14124_name -> node14124 [arrowhead=none, color="black", style=dashed]
    node14124 [shape=box, label=<<font color="black">[0] let P = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14124 -> node14127 [color="black"]
    node14125_name [shape=none, label=<<font color="black">Call[14125]</font>>]
    node14125_name -> node14125 [arrowhead=none, color="black", style=dashed]
    node14125 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(pattern)</font>> color="black" fillcolor="white", style=filled]
    node14125 -> node14126 [color="black"]
    node14127_name [shape=none, label=<<font color="black">Branch[14127]</font>>]
    node14127_name -> node14127 [arrowhead=none, color="black", style=dashed]
    node14127 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white", style=filled]
    node14127 -> node14128 [label=<<font color="black">true</font>> color="black"]
    node14127 -> node14129 [label=<<font color="black">false</font>> color="black"]
    node14126_name [shape=none, label=<<font color="black">Block[14126]</font>>]
    node14126_name -> node14126 [arrowhead=none, color="black", style=dashed]
    node14126 [shape=box, label=<<font color="black">[0] let P = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14126 -> node14127 [color="black"]
    node14128_name [shape=none, label=<<font color="black">Block[14128]</font>>]
    node14128_name -> node14128 [arrowhead=none, color="black", style=dashed]
    node14128 [shape=box, label=<<font color="black">[0] let F = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14128 -> node14131 [color="black"]
    node14129_name [shape=none, label=<<font color="black">Call[14129]</font>>]
    node14129_name -> node14129 [arrowhead=none, color="black", style=dashed]
    node14129 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(flags)</font>> color="black" fillcolor="white", style=filled]
    node14129 -> node14130 [color="black"]
    node14131_name [shape=none, label=<<font color="black">Block[14131]</font>>]
    node14131_name -> node14131 [arrowhead=none, color="black", style=dashed]
    node14131 [shape=box, label=<<font color="black">[0] (yet &quot;If _F_ contains any code unit other than *\&quot;d\&quot;*, *\&quot;g\&quot;*, *\&quot;i\&quot;*, *\&quot;m\&quot;*, *\&quot;s\&quot;*, *\&quot;u\&quot;*, or *\&quot;y\&quot;* or if it contains the same code unit more than once, throw a *SyntaxError* exception.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14131 -> node14132 [color="black"]
    node14130_name [shape=none, label=<<font color="black">Block[14130]</font>>]
    node14130_name -> node14130 [arrowhead=none, color="black", style=dashed]
    node14130 [shape=box, label=<<font color="black">[0] let F = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14130 -> node14131 [color="black"]
    node14132_name [shape=none, label=<<font color="black">Branch[14132]</font>>]
    node14132_name -> node14132 [arrowhead=none, color="black", style=dashed]
    node14132 [shape=diamond, label=<<font color="black">(contains F &quot;u&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14132 -> node14133 [label=<<font color="black">true</font>> color="black"]
    node14132 -> node14134 [label=<<font color="black">false</font>> color="black"]
    node14133_name [shape=none, label=<<font color="black">Block[14133]</font>>]
    node14133_name -> node14133 [arrowhead=none, color="black", style=dashed]
    node14133 [shape=box, label=<<font color="black">[0] let u = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14133 -> node14135 [color="black"]
    node14134_name [shape=none, label=<<font color="black">Block[14134]</font>>]
    node14134_name -> node14134 [arrowhead=none, color="black", style=dashed]
    node14134 [shape=box, label=<<font color="black">[0] let u = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14134 -> node14135 [color="black"]
    node14135_name [shape=none, label=<<font color="black">Branch[14135]</font>>]
    node14135_name -> node14135 [arrowhead=none, color="black", style=dashed]
    node14135 [shape=diamond, label=<<font color="black">(= u true)</font>> color="black" fillcolor="white", style=filled]
    node14135 -> node14136 [label=<<font color="black">true</font>> color="black"]
    node14135 -> node14138 [label=<<font color="black">false</font>> color="black"]
    node14136_name [shape=none, label=<<font color="black">Call[14136]</font>>]
    node14136_name -> node14136 [arrowhead=none, color="black", style=dashed]
    node14136 [shape=cds, label=<<font color="black">%2 = clo&lt;StringToCodePoints&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node14136 -> node14137 [color="black"]
    node14138_name [shape=none, label=<<font color="black">Block[14138]</font>>]
    node14138_name -> node14138 [arrowhead=none, color="black", style=dashed]
    node14138 [shape=box, label=<<font color="black">[0] (yet &quot;Let _patternText_ be the result of interpreting each of _P_'s 16-bit elements as a Unicode BMP code point. UTF-16 decoding is not applied to the elements.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14138 -> node14139 [color="black"]
    node14137_name [shape=none, label=<<font color="black">Block[14137]</font>>]
    node14137_name -> node14137 [arrowhead=none, color="black", style=dashed]
    node14137 [shape=box, label=<<font color="black">[0] let patternText = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14137 -> node14139 [color="black"]
    node14139_name [shape=none, label=<<font color="black">Call[14139]</font>>]
    node14139_name -> node14139 [arrowhead=none, color="black", style=dashed]
    node14139 [shape=cds, label=<<font color="black">%3 = clo&lt;ParsePattern&gt;(patternText, u)</font>> color="black" fillcolor="white", style=filled]
    node14139 -> node14140 [color="black"]
    node14140_name [shape=none, label=<<font color="black">Block[14140]</font>>]
    node14140_name -> node14140 [arrowhead=none, color="black", style=dashed]
    node14140 [shape=box, label=<<font color="black">[0] let parseResult = %3<BR ALIGN="LEFT"/>[1] (yet &quot;If _parseResult_ is a non-empty List of *SyntaxError* objects, throw a *SyntaxError* exception.&quot;)<BR ALIGN="LEFT"/>[2] assert (? parseResult: &quot;Ast[Pattern]&quot;)<BR ALIGN="LEFT"/>[3] obj.OriginalSource = P<BR ALIGN="LEFT"/>[4] obj.OriginalFlags = F<BR ALIGN="LEFT"/>[5] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14140 -> node14141 [color="black"]
    node14141_name [shape=none, label=<<font color="black">Call[14141]</font>>]
    node14141_name -> node14141 [arrowhead=none, color="black", style=dashed]
    node14141 [shape=cds, label=<<font color="black">%4 = parseResult-&gt;CompilePattern()</font>> color="black" fillcolor="white", style=filled]
    node14141 -> node14142 [color="black"]
    node14142_name [shape=none, label=<<font color="black">Block[14142]</font>>]
    node14142_name -> node14142 [arrowhead=none, color="black", style=dashed]
    node14142 [shape=box, label=<<font color="black">[0] obj.RegExpMatcher = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14142 -> node14143 [color="black"]
    node14143_name [shape=none, label=<<font color="black">Call[14143]</font>>]
    node14143_name -> node14143 [arrowhead=none, color="black", style=dashed]
    node14143 [shape=cds, label=<<font color="black">%5 = clo&lt;Set&gt;(obj, &quot;lastIndex&quot;, 0.0f, true)</font>> color="black" fillcolor="white", style=filled]
    node14143 -> node14144 [color="black"]
    node14144_name [shape=none, label=<<font color="black">Block[14144]</font>>]
    node14144_name -> node14144 [arrowhead=none, color="black", style=dashed]
    node14144 [shape=box, label=<<font color="black">[0] [? %5]<BR ALIGN="LEFT"/>[1] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14144 -> cluster2306_exit [color="black"]
  }
}