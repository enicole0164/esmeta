digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1160 {
    label = "def <INTERNAL>:ProxyExoticObject.OwnPropertyKeys(O: ProxyExoticObject): Normal[List[Symbol | String]] | Abrupt"
    style = rounded
    cluster1160_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1160_entry_name -> cluster1160_entry [arrowhead=none, color="black", style=dashed]
    cluster1160_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1160_entry -> node5265 [color="black"]
    cluster1160_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1160_exit_name -> cluster1160_exit [arrowhead=none, color="black", style=dashed]
    cluster1160_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5265_name [shape=none, label=<<font color="black">Block[5265]</font>>]
    node5265_name -> node5265 [arrowhead=none, color="black", style=dashed]
    node5265 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5265 -> node5266 [color="black"]
    node5266_name [shape=none, label=<<font color="black">Branch[5266]</font>>]
    node5266_name -> node5266 [arrowhead=none, color="black", style=dashed]
    node5266 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5266 -> node5267 [label=<<font color="black">true</font>> color="black"]
    node5266 -> node5268 [label=<<font color="black">false</font>> color="black"]
    node5267_name [shape=none, label=<<font color="black">Block[5267]</font>>]
    node5267_name -> node5267 [arrowhead=none, color="black", style=dashed]
    node5267 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#524])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5267 -> cluster1160_exit [color="black"]
    node5268_name [shape=none, label=<<font color="black">Block[5268]</font>>]
    node5268_name -> node5268 [arrowhead=none, color="black", style=dashed]
    node5268 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5268 -> node5269 [color="black"]
    node5269_name [shape=none, label=<<font color="black">Call[5269]</font>>]
    node5269_name -> node5269 [arrowhead=none, color="black", style=dashed]
    node5269 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;ownKeys&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5269 -> node5270 [color="black"]
    node5270_name [shape=none, label=<<font color="black">Block[5270]</font>>]
    node5270_name -> node5270 [arrowhead=none, color="black", style=dashed]
    node5270 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5270 -> node5271 [color="black"]
    node5271_name [shape=none, label=<<font color="black">Branch[5271]</font>>]
    node5271_name -> node5271 [arrowhead=none, color="black", style=dashed]
    node5271 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5271 -> node5272 [label=<<font color="black">true</font>> color="black"]
    node5271 -> node5274 [label=<<font color="black">false</font>> color="black"]
    node5272_name [shape=none, label=<<font color="black">Call[5272]</font>>]
    node5272_name -> node5272 [arrowhead=none, color="black", style=dashed]
    node5272 [shape=cds, label=<<font color="black">%1 = target-&gt;OwnPropertyKeys()</font>> color="black" fillcolor="white", style=filled]
    node5272 -> node5273 [color="black"]
    node5274_name [shape=none, label=<<font color="black">Call[5274]</font>>]
    node5274_name -> node5274 [arrowhead=none, color="black", style=dashed]
    node5274 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target])[#525])</font>> color="black" fillcolor="white", style=filled]
    node5274 -> node5275 [color="black"]
    node5273_name [shape=none, label=<<font color="black">Block[5273]</font>>]
    node5273_name -> node5273 [arrowhead=none, color="black", style=dashed]
    node5273 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5273 -> cluster1160_exit [color="black"]
    node5275_name [shape=none, label=<<font color="black">Block[5275]</font>>]
    node5275_name -> node5275 [arrowhead=none, color="black", style=dashed]
    node5275 [shape=box, label=<<font color="black">[0] let trapResultArray = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5275 -> node5276 [color="black"]
    node5276_name [shape=none, label=<<font color="black">Call[5276]</font>>]
    node5276_name -> node5276 [arrowhead=none, color="black", style=dashed]
    node5276 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateListFromArrayLike&gt;(trapResultArray, (new [@String, @Symbol])[#526])</font>> color="black" fillcolor="white", style=filled]
    node5276 -> node5277 [color="black"]
    node5277_name [shape=none, label=<<font color="black">Block[5277]</font>>]
    node5277_name -> node5277 [arrowhead=none, color="black", style=dashed]
    node5277 [shape=box, label=<<font color="black">[0] let trapResult = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5277 -> node5278 [color="black"]
    node5278_name [shape=none, label=<<font color="black">Branch[5278]</font>>]
    node5278_name -> node5278 [arrowhead=none, color="black", style=dashed]
    node5278 [shape=diamond, label=<<font color="black">(duplicated trapResult)</font>> color="black" fillcolor="white", style=filled]
    node5278 -> node5279 [label=<<font color="black">true</font>> color="black"]
    node5278 -> node5280 [label=<<font color="black">false</font>> color="black"]
    node5279_name [shape=none, label=<<font color="black">Block[5279]</font>>]
    node5279_name -> node5279 [arrowhead=none, color="black", style=dashed]
    node5279 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#527])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5279 -> cluster1160_exit [color="black"]
    node5280_name [shape=none, label=<<font color="black">Call[5280]</font>>]
    node5280_name -> node5280 [arrowhead=none, color="black", style=dashed]
    node5280 [shape=cds, label=<<font color="black">%4 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5280 -> node5281 [color="black"]
    node5281_name [shape=none, label=<<font color="black">Block[5281]</font>>]
    node5281_name -> node5281 [arrowhead=none, color="black", style=dashed]
    node5281 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5281 -> node5282 [color="black"]
    node5282_name [shape=none, label=<<font color="black">Call[5282]</font>>]
    node5282_name -> node5282 [arrowhead=none, color="black", style=dashed]
    node5282 [shape=cds, label=<<font color="black">%5 = target-&gt;OwnPropertyKeys()</font>> color="black" fillcolor="white", style=filled]
    node5282 -> node5283 [color="black"]
    node5283_name [shape=none, label=<<font color="black">Block[5283]</font>>]
    node5283_name -> node5283 [arrowhead=none, color="black", style=dashed]
    node5283 [shape=box, label=<<font color="black">[0] let targetKeys = [? %5]<BR ALIGN="LEFT"/>[1] assert (? targetKeys: &quot;List[SymbolString]&quot;)<BR ALIGN="LEFT"/>[2] assert (! (duplicated targetKeys))<BR ALIGN="LEFT"/>[3] let targetConfigurableKeys = (new [])[#528]<BR ALIGN="LEFT"/>[4] let targetNonconfigurableKeys = (new [])[#529]<BR ALIGN="LEFT"/>[5] %7 = targetKeys<BR ALIGN="LEFT"/>[6] %6 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5283 -> node5284 [color="black"]
    node5284_name [shape=none, label=<<font color="black">Branch[5284]</font>>]
    node5284_name -> node5284 [arrowhead=none, color="black", style=dashed]
    node5284 [shape=diamond, label=<<font color="black">(&lt; %6 %7.length)</font>> color="black" fillcolor="white", style=filled]
    node5284 -> node5285 [label=<<font color="black">true</font>> color="black"]
    node5284 -> node5292 [label=<<font color="black">false</font>> color="black"]
    node5285_name [shape=none, label=<<font color="black">Block[5285]</font>>]
    node5285_name -> node5285 [arrowhead=none, color="black", style=dashed]
    node5285 [shape=box, label=<<font color="black">[0] let key = %7[%6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5285 -> node5286 [color="black"]
    node5292_name [shape=none, label=<<font color="black">Branch[5292]</font>>]
    node5292_name -> node5292 [arrowhead=none, color="black", style=dashed]
    node5292 [shape=diamond, label=<<font color="black">(&amp;&amp; (= extensibleTarget true) (= targetNonconfigurableKeys.length 0))</font>> color="black" fillcolor="white", style=filled]
    node5292 -> node5293 [label=<<font color="black">true</font>> color="black"]
    node5292 -> node5294 [label=<<font color="black">false</font>> color="black"]
    node5286_name [shape=none, label=<<font color="black">Call[5286]</font>>]
    node5286_name -> node5286 [arrowhead=none, color="black", style=dashed]
    node5286 [shape=cds, label=<<font color="black">%8 = target-&gt;GetOwnProperty(key)</font>> color="black" fillcolor="white", style=filled]
    node5286 -> node5287 [color="black"]
    node5293_name [shape=none, label=<<font color="black">Block[5293]</font>>]
    node5293_name -> node5293 [arrowhead=none, color="black", style=dashed]
    node5293 [shape=box, label=<<font color="black">[0] return trapResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5293 -> cluster1160_exit [color="black"]
    node5294_name [shape=none, label=<<font color="black">Block[5294]</font>>]
    node5294_name -> node5294 [arrowhead=none, color="black", style=dashed]
    node5294 [shape=box, label=<<font color="black">[0] (yet &quot;Let _uncheckedResultKeys_ be a List whose elements are the elements of _trapResult_.&quot;)<BR ALIGN="LEFT"/>[1] %10 = targetNonconfigurableKeys<BR ALIGN="LEFT"/>[2] %9 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5294 -> node5295 [color="black"]
    node5287_name [shape=none, label=<<font color="black">Block[5287]</font>>]
    node5287_name -> node5287 [arrowhead=none, color="black", style=dashed]
    node5287 [shape=box, label=<<font color="black">[0] let desc = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5287 -> node5288 [color="black"]
    node5295_name [shape=none, label=<<font color="black">Branch[5295]</font>>]
    node5295_name -> node5295 [arrowhead=none, color="black", style=dashed]
    node5295 [shape=diamond, label=<<font color="black">(&lt; %9 %10.length)</font>> color="black" fillcolor="white", style=filled]
    node5295 -> node5296 [label=<<font color="black">true</font>> color="black"]
    node5295 -> node5300 [label=<<font color="black">false</font>> color="black"]
    node5288_name [shape=none, label=<<font color="black">Branch[5288]</font>>]
    node5288_name -> node5288 [arrowhead=none, color="black", style=dashed]
    node5288 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= desc undefined)) (= desc.Configurable false))</font>> color="black" fillcolor="white", style=filled]
    node5288 -> node5289 [label=<<font color="black">true</font>> color="black"]
    node5288 -> node5290 [label=<<font color="black">false</font>> color="black"]
    node5296_name [shape=none, label=<<font color="black">Block[5296]</font>>]
    node5296_name -> node5296 [arrowhead=none, color="black", style=dashed]
    node5296 [shape=box, label=<<font color="black">[0] let key = %10[%9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5296 -> node5297 [color="black"]
    node5300_name [shape=none, label=<<font color="black">Branch[5300]</font>>]
    node5300_name -> node5300 [arrowhead=none, color="black", style=dashed]
    node5300 [shape=diamond, label=<<font color="black">(= extensibleTarget true)</font>> color="black" fillcolor="white", style=filled]
    node5300 -> node5301 [label=<<font color="black">true</font>> color="black"]
    node5300 -> node5302 [label=<<font color="black">false</font>> color="black"]
    node5289_name [shape=none, label=<<font color="black">Block[5289]</font>>]
    node5289_name -> node5289 [arrowhead=none, color="black", style=dashed]
    node5289 [shape=box, label=<<font color="black">[0] (yet &quot;Append _key_ as an element of _targetNonconfigurableKeys_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5289 -> node5291 [color="black"]
    node5290_name [shape=none, label=<<font color="black">Block[5290]</font>>]
    node5290_name -> node5290 [arrowhead=none, color="black", style=dashed]
    node5290 [shape=box, label=<<font color="black">[0] (yet &quot;Append _key_ as an element of _targetConfigurableKeys_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5290 -> node5291 [color="black"]
    node5297_name [shape=none, label=<<font color="black">Branch[5297]</font>>]
    node5297_name -> node5297 [arrowhead=none, color="black", style=dashed]
    node5297 [shape=diamond, label=<<font color="black">(! (contains uncheckedResultKeys key))</font>> color="black" fillcolor="white", style=filled]
    node5297 -> node5298 [label=<<font color="black">true</font>> color="black"]
    node5297 -> node5299 [label=<<font color="black">false</font>> color="black"]
    node5301_name [shape=none, label=<<font color="black">Block[5301]</font>>]
    node5301_name -> node5301 [arrowhead=none, color="black", style=dashed]
    node5301 [shape=box, label=<<font color="black">[0] return trapResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5301 -> cluster1160_exit [color="black"]
    node5302_name [shape=none, label=<<font color="black">Block[5302]</font>>]
    node5302_name -> node5302 [arrowhead=none, color="black", style=dashed]
    node5302 [shape=box, label=<<font color="black">[0] %12 = targetConfigurableKeys<BR ALIGN="LEFT"/>[1] %11 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5302 -> node5303 [color="black"]
    node5291_name [shape=none, label=<<font color="black">Block[5291]</font>>]
    node5291_name -> node5291 [arrowhead=none, color="black", style=dashed]
    node5291 [shape=box, label=<<font color="black">[0] %6 = (+ %6 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5291 -> node5284 [color="black"]
    node5298_name [shape=none, label=<<font color="black">Block[5298]</font>>]
    node5298_name -> node5298 [arrowhead=none, color="black", style=dashed]
    node5298 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#530])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5298 -> cluster1160_exit [color="black"]
    node5299_name [shape=none, label=<<font color="black">Block[5299]</font>>]
    node5299_name -> node5299 [arrowhead=none, color="black", style=dashed]
    node5299 [shape=box, label=<<font color="black">[0] (yet &quot;Remove _key_ from _uncheckedResultKeys_.&quot;)<BR ALIGN="LEFT"/>[1] %9 = (+ %9 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5299 -> node5295 [color="black"]
    node5303_name [shape=none, label=<<font color="black">Branch[5303]</font>>]
    node5303_name -> node5303 [arrowhead=none, color="black", style=dashed]
    node5303 [shape=diamond, label=<<font color="black">(&lt; %11 %12.length)</font>> color="black" fillcolor="white", style=filled]
    node5303 -> node5304 [label=<<font color="black">true</font>> color="black"]
    node5303 -> node5308 [label=<<font color="black">false</font>> color="black"]
    node5304_name [shape=none, label=<<font color="black">Block[5304]</font>>]
    node5304_name -> node5304 [arrowhead=none, color="black", style=dashed]
    node5304 [shape=box, label=<<font color="black">[0] let key = %12[%11]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5304 -> node5305 [color="black"]
    node5308_name [shape=none, label=<<font color="black">Branch[5308]</font>>]
    node5308_name -> node5308 [arrowhead=none, color="black", style=dashed]
    node5308 [shape=diamond, label=<<font color="black">(! (= uncheckedResultKeys.length 0))</font>> color="black" fillcolor="white", style=filled]
    node5308 -> node5309 [label=<<font color="black">true</font>> color="black"]
    node5308 -> node5310 [label=<<font color="black">false</font>> color="black"]
    node5305_name [shape=none, label=<<font color="black">Branch[5305]</font>>]
    node5305_name -> node5305 [arrowhead=none, color="black", style=dashed]
    node5305 [shape=diamond, label=<<font color="black">(! (contains uncheckedResultKeys key))</font>> color="black" fillcolor="white", style=filled]
    node5305 -> node5306 [label=<<font color="black">true</font>> color="black"]
    node5305 -> node5307 [label=<<font color="black">false</font>> color="black"]
    node5309_name [shape=none, label=<<font color="black">Block[5309]</font>>]
    node5309_name -> node5309 [arrowhead=none, color="black", style=dashed]
    node5309 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#532])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5309 -> cluster1160_exit [color="black"]
    node5310_name [shape=none, label=<<font color="black">Block[5310]</font>>]
    node5310_name -> node5310 [arrowhead=none, color="black", style=dashed]
    node5310 [shape=box, label=<<font color="black">[0] return trapResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5310 -> cluster1160_exit [color="black"]
    node5306_name [shape=none, label=<<font color="black">Block[5306]</font>>]
    node5306_name -> node5306 [arrowhead=none, color="black", style=dashed]
    node5306 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#531])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5306 -> cluster1160_exit [color="black"]
    node5307_name [shape=none, label=<<font color="black">Block[5307]</font>>]
    node5307_name -> node5307 [arrowhead=none, color="black", style=dashed]
    node5307 [shape=box, label=<<font color="black">[0] (yet &quot;Remove _key_ from _uncheckedResultKeys_.&quot;)<BR ALIGN="LEFT"/>[1] %11 = (+ %11 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5307 -> node5303 [color="black"]
  }
}