digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1900 {
    label = "def <BUILTIN-CLO>:FinishDynamicImport:clo0(this: Unknown, argumentsList: Unknown, NewTarget: Unknown): Unknown"
    style = rounded
    cluster1900_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1900_entry_name -> cluster1900_entry [arrowhead=none, color="black", style=dashed]
    cluster1900_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1900_entry -> node10474 [color="black"]
    cluster1900_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1900_exit_name -> cluster1900_exit [arrowhead=none, color="black", style=dashed]
    cluster1900_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10474_name [shape=none, label=<<font color="black">Branch[10474]</font>>]
    node10474_name -> node10474 [arrowhead=none, color="black", style=dashed]
    node10474 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node10474 -> node10475 [label=<<font color="black">true</font>> color="black"]
    node10474 -> node10476 [label=<<font color="black">false</font>> color="black"]
    node10475_name [shape=none, label=<<font color="black">Block[10475]</font>>]
    node10475_name -> node10475 [arrowhead=none, color="black", style=dashed]
    node10475 [shape=box, label=<<font color="black">[0] let result = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10475 -> node10477 [color="black"]
    node10476_name [shape=none, label=<<font color="black">Block[10476]</font>>]
    node10476_name -> node10476 [arrowhead=none, color="black", style=dashed]
    node10476 [shape=box, label=<<font color="black">[0] let result = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10476 -> node10477 [color="black"]
    node10477_name [shape=none, label=<<font color="black">Block[10477]</font>>]
    node10477_name -> node10477 [arrowhead=none, color="black", style=dashed]
    node10477 [shape=box, label=<<font color="black">[0] assert (= result undefined)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10477 -> node10478 [color="black"]
    node10478_name [shape=none, label=<<font color="black">Call[10478]</font>>]
    node10478_name -> node10478 [arrowhead=none, color="black", style=dashed]
    node10478 [shape=cds, label=<<font color="black">%0 = clo&lt;HostResolveImportedModule&gt;(referencingScriptOrModule, specifier)</font>> color="black" fillcolor="white", style=filled]
    node10478 -> node10479 [color="black"]
    node10479_name [shape=none, label=<<font color="black">Block[10479]</font>>]
    node10479_name -> node10479 [arrowhead=none, color="black", style=dashed]
    node10479 [shape=box, label=<<font color="black">[0] let moduleRecord = [! %0]<BR ALIGN="LEFT"/>[1] assert (yet &quot;Evaluate has already been invoked on _moduleRecord_ and successfully completed.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10479 -> node10480 [color="black"]
    node10480_name [shape=none, label=<<font color="black">Call[10480]</font>>]
    node10480_name -> node10480 [arrowhead=none, color="black", style=dashed]
    node10480 [shape=cds, label=<<font color="black">%1 = clo&lt;GetModuleNamespace&gt;(moduleRecord)</font>> color="black" fillcolor="white", style=filled]
    node10480 -> node10481 [color="black"]
    node10481_name [shape=none, label=<<font color="black">Call[10481]</font>>]
    node10481_name -> node10481 [arrowhead=none, color="black", style=dashed]
    node10481 [shape=cds, label=<<font color="black">%2 = clo&lt;Completion&gt;(%1)</font>> color="black" fillcolor="white", style=filled]
    node10481 -> node10482 [color="black"]
    node10482_name [shape=none, label=<<font color="black">Block[10482]</font>>]
    node10482_name -> node10482 [arrowhead=none, color="black", style=dashed]
    node10482 [shape=box, label=<<font color="black">[0] let namespace = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10482 -> node10483 [color="black"]
    node10483_name [shape=none, label=<<font color="black">Branch[10483]</font>>]
    node10483_name -> node10483 [arrowhead=none, color="black", style=dashed]
    node10483 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? namespace) (! (= namespace.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node10483 -> node10484 [label=<<font color="black">true</font>> color="black"]
    node10483 -> node10486 [label=<<font color="black">false</font>> color="black"]
    node10484_name [shape=none, label=<<font color="black">Call[10484]</font>>]
    node10484_name -> node10484 [arrowhead=none, color="black", style=dashed]
    node10484 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [namespace.Value])[#797])</font>> color="black" fillcolor="white", style=filled]
    node10484 -> node10485 [color="black"]
    node10486_name [shape=none, label=<<font color="black">Call[10486]</font>>]
    node10486_name -> node10486 [arrowhead=none, color="black", style=dashed]
    node10486 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(promiseCapability.Resolve, undefined, (new [namespace.Value])[#798])</font>> color="black" fillcolor="white", style=filled]
    node10486 -> node10487 [color="black"]
    node10485_name [shape=none, label=<<font color="black">Block[10485]</font>>]
    node10485_name -> node10485 [arrowhead=none, color="black", style=dashed]
    node10485 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10485 -> node10488 [color="black"]
    node10487_name [shape=none, label=<<font color="black">Block[10487]</font>>]
    node10487_name -> node10487 [arrowhead=none, color="black", style=dashed]
    node10487 [shape=box, label=<<font color="black">[0] [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10487 -> node10488 [color="black"]
    node10488_name [shape=none, label=<<font color="black">Block[10488]</font>>]
    node10488_name -> node10488 [arrowhead=none, color="black", style=dashed]
    node10488 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10488 -> cluster1900_exit [color="black"]
  }
}