digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2656 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.preventExtensions(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2656_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2656_entry_name -> cluster2656_entry [arrowhead=none, color="black", style=dashed]
    cluster2656_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2656_entry -> node19768 [color="black"]
    cluster2656_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2656_exit_name -> cluster2656_exit [arrowhead=none, color="black", style=dashed]
    cluster2656_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19768_name [shape=none, label=<<font color="black">Branch[19768]</font>>]
    node19768_name -> node19768 [arrowhead=none, color="black", style=dashed]
    node19768 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19768 -> node19769 [label=<<font color="black">true</font>> color="black"]
    node19768 -> node19770 [label=<<font color="black">false</font>> color="black"]
    node19769_name [shape=none, label=<<font color="black">Block[19769]</font>>]
    node19769_name -> node19769 [arrowhead=none, color="black", style=dashed]
    node19769 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19769 -> node19771 [color="black"]
    node19770_name [shape=none, label=<<font color="black">Block[19770]</font>>]
    node19770_name -> node19770 [arrowhead=none, color="black", style=dashed]
    node19770 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19770 -> node19771 [color="black"]
    node19771_name [shape=none, label=<<font color="black">Branch[19771]</font>>]
    node19771_name -> node19771 [arrowhead=none, color="black", style=dashed]
    node19771 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19771 -> node19772 [label=<<font color="black">true</font>> color="black"]
    node19771 -> node19773 [label=<<font color="black">false</font>> color="black"]
    node19772_name [shape=none, label=<<font color="black">Block[19772]</font>>]
    node19772_name -> node19772 [arrowhead=none, color="black", style=dashed]
    node19772 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1354])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19772 -> cluster2656_exit [color="black"]
    node19773_name [shape=none, label=<<font color="black">Call[19773]</font>>]
    node19773_name -> node19773 [arrowhead=none, color="black", style=dashed]
    node19773 [shape=cds, label=<<font color="black">%0 = target-&gt;PreventExtensions()</font>> color="black" fillcolor="white", style=filled]
    node19773 -> node19774 [color="black"]
    node19774_name [shape=none, label=<<font color="black">Block[19774]</font>>]
    node19774_name -> node19774 [arrowhead=none, color="black", style=dashed]
    node19774 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19774 -> cluster2656_exit [color="black"]
  }
}