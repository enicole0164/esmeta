digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster9 {
    label = "def ToString(argument: ESValue): Normal[String] | Abrupt"
    style = rounded
    cluster9_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster9_entry_name -> cluster9_entry [arrowhead=none, color="black", style=dashed]
    cluster9_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster9_entry -> node69 [color="black"]
    cluster9_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster9_exit_name -> cluster9_exit [arrowhead=none, color="black", style=dashed]
    cluster9_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node69_name [shape=none, label=<<font color="black">Branch[69]</font>>]
    node69_name -> node69 [arrowhead=none, color="black", style=dashed]
    node69 [shape=diamond, label=<<font color="black">(= (typeof argument) @Undefined)</font>> color="black" fillcolor="white", style=filled]
    node69 -> node70 [label=<<font color="black">true</font>> color="black"]
    node69 -> node71 [label=<<font color="black">false</font>> color="black"]
    node70_name [shape=none, label=<<font color="black">Block[70]</font>>]
    node70_name -> node70 [arrowhead=none, color="black", style=dashed]
    node70 [shape=box, label=<<font color="black">[0] return &quot;undefined&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node70 -> cluster9_exit [color="black"]
    node71_name [shape=none, label=<<font color="black">Branch[71]</font>>]
    node71_name -> node71 [arrowhead=none, color="black", style=dashed]
    node71 [shape=diamond, label=<<font color="black">(= (typeof argument) @Null)</font>> color="black" fillcolor="white", style=filled]
    node71 -> node72 [label=<<font color="black">true</font>> color="black"]
    node71 -> node73 [label=<<font color="black">false</font>> color="black"]
    node72_name [shape=none, label=<<font color="black">Block[72]</font>>]
    node72_name -> node72 [arrowhead=none, color="black", style=dashed]
    node72 [shape=box, label=<<font color="black">[0] return &quot;null&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node72 -> cluster9_exit [color="black"]
    node73_name [shape=none, label=<<font color="black">Branch[73]</font>>]
    node73_name -> node73 [arrowhead=none, color="black", style=dashed]
    node73 [shape=diamond, label=<<font color="black">(= (typeof argument) @Boolean)</font>> color="black" fillcolor="white", style=filled]
    node73 -> node74 [label=<<font color="black">true</font>> color="black"]
    node73 -> node77 [label=<<font color="black">false</font>> color="black"]
    node74_name [shape=none, label=<<font color="black">Branch[74]</font>>]
    node74_name -> node74 [arrowhead=none, color="black", style=dashed]
    node74 [shape=diamond, label=<<font color="black">(= argument true)</font>> color="black" fillcolor="white", style=filled]
    node74 -> node75 [label=<<font color="black">true</font>> color="black"]
    node74 -> node76 [label=<<font color="black">false</font>> color="black"]
    node77_name [shape=none, label=<<font color="black">Branch[77]</font>>]
    node77_name -> node77 [arrowhead=none, color="black", style=dashed]
    node77 [shape=diamond, label=<<font color="black">(= (typeof argument) @Number)</font>> color="black" fillcolor="white", style=filled]
    node77 -> node78 [label=<<font color="black">true</font>> color="black"]
    node77 -> node80 [label=<<font color="black">false</font>> color="black"]
    node75_name [shape=none, label=<<font color="black">Block[75]</font>>]
    node75_name -> node75 [arrowhead=none, color="black", style=dashed]
    node75 [shape=box, label=<<font color="black">[0] return &quot;true&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node75 -> cluster9_exit [color="black"]
    node76_name [shape=none, label=<<font color="black">Block[76]</font>>]
    node76_name -> node76 [arrowhead=none, color="black", style=dashed]
    node76 [shape=box, label=<<font color="black">[0] return &quot;false&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node76 -> cluster9_exit [color="black"]
    node78_name [shape=none, label=<<font color="black">Call[78]</font>>]
    node78_name -> node78 [arrowhead=none, color="black", style=dashed]
    node78 [shape=cds, label=<<font color="black">%0 = clo&lt;Number::toString&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node78 -> node79 [color="black"]
    node80_name [shape=none, label=<<font color="black">Branch[80]</font>>]
    node80_name -> node80 [arrowhead=none, color="black", style=dashed]
    node80 [shape=diamond, label=<<font color="black">(= (typeof argument) @String)</font>> color="black" fillcolor="white", style=filled]
    node80 -> node81 [label=<<font color="black">true</font>> color="black"]
    node80 -> node82 [label=<<font color="black">false</font>> color="black"]
    node79_name [shape=none, label=<<font color="black">Block[79]</font>>]
    node79_name -> node79 [arrowhead=none, color="black", style=dashed]
    node79 [shape=box, label=<<font color="black">[0] return [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node79 -> cluster9_exit [color="black"]
    node81_name [shape=none, label=<<font color="black">Block[81]</font>>]
    node81_name -> node81 [arrowhead=none, color="black", style=dashed]
    node81 [shape=box, label=<<font color="black">[0] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node81 -> cluster9_exit [color="black"]
    node82_name [shape=none, label=<<font color="black">Branch[82]</font>>]
    node82_name -> node82 [arrowhead=none, color="black", style=dashed]
    node82 [shape=diamond, label=<<font color="black">(= (typeof argument) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node82 -> node83 [label=<<font color="black">true</font>> color="black"]
    node82 -> node84 [label=<<font color="black">false</font>> color="black"]
    node83_name [shape=none, label=<<font color="black">Block[83]</font>>]
    node83_name -> node83 [arrowhead=none, color="black", style=dashed]
    node83 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#7])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node83 -> cluster9_exit [color="black"]
    node84_name [shape=none, label=<<font color="black">Branch[84]</font>>]
    node84_name -> node84 [arrowhead=none, color="black", style=dashed]
    node84 [shape=diamond, label=<<font color="black">(= (typeof argument) @BigInt)</font>> color="black" fillcolor="white", style=filled]
    node84 -> node85 [label=<<font color="black">true</font>> color="black"]
    node84 -> node87 [label=<<font color="black">false</font>> color="black"]
    node85_name [shape=none, label=<<font color="black">Call[85]</font>>]
    node85_name -> node85 [arrowhead=none, color="black", style=dashed]
    node85 [shape=cds, label=<<font color="black">%1 = clo&lt;BigInt::toString&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node85 -> node86 [color="black"]
    node87_name [shape=none, label=<<font color="black">Block[87]</font>>]
    node87_name -> node87 [arrowhead=none, color="black", style=dashed]
    node87 [shape=box, label=<<font color="black">[0] assert (= (typeof argument) @Object)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node87 -> node88 [color="black"]
    node86_name [shape=none, label=<<font color="black">Block[86]</font>>]
    node86_name -> node86 [arrowhead=none, color="black", style=dashed]
    node86 [shape=box, label=<<font color="black">[0] return [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node86 -> cluster9_exit [color="black"]
    node88_name [shape=none, label=<<font color="black">Call[88]</font>>]
    node88_name -> node88 [arrowhead=none, color="black", style=dashed]
    node88 [shape=cds, label=<<font color="black">%2 = clo&lt;ToPrimitive&gt;(argument, ~string~)</font>> color="black" fillcolor="white", style=filled]
    node88 -> node89 [color="black"]
    node89_name [shape=none, label=<<font color="black">Block[89]</font>>]
    node89_name -> node89 [arrowhead=none, color="black", style=dashed]
    node89 [shape=box, label=<<font color="black">[0] let primValue = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node89 -> node90 [color="black"]
    node90_name [shape=none, label=<<font color="black">Call[90]</font>>]
    node90_name -> node90 [arrowhead=none, color="black", style=dashed]
    node90 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(primValue)</font>> color="black" fillcolor="white", style=filled]
    node90 -> node91 [color="black"]
    node91_name [shape=none, label=<<font color="black">Block[91]</font>>]
    node91_name -> node91 [arrowhead=none, color="black", style=dashed]
    node91 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node91 -> cluster9_exit [color="black"]
  }
}