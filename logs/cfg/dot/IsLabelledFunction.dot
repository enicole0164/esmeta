digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1485 {
    label = "def IsLabelledFunction(stmt: Unknown): Boolean"
    style = rounded
    cluster1485_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1485_entry_name -> cluster1485_entry [arrowhead=none, color="black", style=dashed]
    cluster1485_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1485_entry -> node8154 [color="black"]
    cluster1485_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1485_exit_name -> cluster1485_exit [arrowhead=none, color="black", style=dashed]
    cluster1485_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8154_name [shape=none, label=<<font color="black">Branch[8154]</font>>]
    node8154_name -> node8154 [arrowhead=none, color="black", style=dashed]
    node8154 [shape=diamond, label=<<font color="black">(! (? stmt: &quot;LabelledStatement&quot;))</font>> color="black" fillcolor="white", style=filled]
    node8154 -> node8155 [label=<<font color="black">true</font>> color="black"]
    node8154 -> node8156 [label=<<font color="black">false</font>> color="black"]
    node8155_name [shape=none, label=<<font color="black">Block[8155]</font>>]
    node8155_name -> node8155 [arrowhead=none, color="black", style=dashed]
    node8155 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8155 -> cluster1485_exit [color="black"]
    node8156_name [shape=none, label=<<font color="black">Block[8156]</font>>]
    node8156_name -> node8156 [arrowhead=none, color="black", style=dashed]
    node8156 [shape=box, label=<<font color="black">[0] let item = stmt.LabelledItem<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8156 -> node8157 [color="black"]
    node8157_name [shape=none, label=<<font color="black">Branch[8157]</font>>]
    node8157_name -> node8157 [arrowhead=none, color="black", style=dashed]
    node8157 [shape=diamond, label=<<font color="black">(? item: &quot;LabelledItem1&quot;)</font>> color="black" fillcolor="white", style=filled]
    node8157 -> node8158 [label=<<font color="black">true</font>> color="black"]
    node8157 -> node8159 [label=<<font color="black">false</font>> color="black"]
    node8158_name [shape=none, label=<<font color="black">Block[8158]</font>>]
    node8158_name -> node8158 [arrowhead=none, color="black", style=dashed]
    node8158 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8158 -> cluster1485_exit [color="black"]
    node8159_name [shape=none, label=<<font color="black">Block[8159]</font>>]
    node8159_name -> node8159 [arrowhead=none, color="black", style=dashed]
    node8159 [shape=box, label=<<font color="black">[0] let subStmt = item.Statement<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8159 -> node8160 [color="black"]
    node8160_name [shape=none, label=<<font color="black">Call[8160]</font>>]
    node8160_name -> node8160 [arrowhead=none, color="black", style=dashed]
    node8160 [shape=cds, label=<<font color="black">%0 = clo&lt;IsLabelledFunction&gt;(subStmt)</font>> color="black" fillcolor="white", style=filled]
    node8160 -> node8161 [color="black"]
    node8161_name [shape=none, label=<<font color="black">Block[8161]</font>>]
    node8161_name -> node8161 [arrowhead=none, color="black", style=dashed]
    node8161 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8161 -> cluster1485_exit [color="black"]
  }
}