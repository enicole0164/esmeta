digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1072 {
    label = "def OrdinaryObjectCreate(proto: Object | Null, additionalInternalSlotsList?: Unknown["ListOfNamesOfInternalSlots"]): Object"
    style = rounded
    cluster1072_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1072_entry_name -> cluster1072_entry [arrowhead=none, color="black", style=dashed]
    cluster1072_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1072_entry -> node4205 [color="black"]
    cluster1072_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1072_exit_name -> cluster1072_exit [arrowhead=none, color="black", style=dashed]
    cluster1072_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4205_name [shape=none, label=<<font color="black">Block[4205]</font>>]
    node4205_name -> node4205 [arrowhead=none, color="black", style=dashed]
    node4205 [shape=box, label=<<font color="black">[0] let internalSlotsList = (new [&quot;Prototype&quot;, &quot;Extensible&quot;])[#413]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4205 -> node4206 [color="black"]
    node4206_name [shape=none, label=<<font color="black">Branch[4206]</font>>]
    node4206_name -> node4206 [arrowhead=none, color="black", style=dashed]
    node4206 [shape=diamond, label=<<font color="black">(! (= additionalInternalSlotsList absent))</font>> color="black" fillcolor="white", style=filled]
    node4206 -> node4207 [label=<<font color="black">true</font>> color="black"]
    node4206 -> node4208 [label=<<font color="black">false</font>> color="black"]
    node4207_name [shape=none, label=<<font color="black">Block[4207]</font>>]
    node4207_name -> node4207 [arrowhead=none, color="black", style=dashed]
    node4207 [shape=box, label=<<font color="black">[0] internalSlotsList = (list-concat internalSlotsList additionalInternalSlotsList)[#414]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4207 -> node4208 [color="black"]
    node4208_name [shape=none, label=<<font color="black">Call[4208]</font>>]
    node4208_name -> node4208 [arrowhead=none, color="black", style=dashed]
    node4208 [shape=cds, label=<<font color="black">%0 = clo&lt;MakeBasicObject&gt;(internalSlotsList)</font>> color="black" fillcolor="white", style=filled]
    node4208 -> node4209 [color="black"]
    node4209_name [shape=none, label=<<font color="black">Block[4209]</font>>]
    node4209_name -> node4209 [arrowhead=none, color="black", style=dashed]
    node4209 [shape=box, label=<<font color="black">[0] let O = %0<BR ALIGN="LEFT"/>[1] O.Prototype = proto<BR ALIGN="LEFT"/>[2] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4209 -> cluster1072_exit [color="black"]
  }
}