digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2072 {
    label = "def <BUILTIN>:INTRINSICS.BigInt.asUintN(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2072_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2072_entry_name -> cluster2072_entry [arrowhead=none, color="black", style=dashed]
    cluster2072_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2072_entry -> node11967 [color="black"]
    cluster2072_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2072_exit_name -> cluster2072_exit [arrowhead=none, color="black", style=dashed]
    cluster2072_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11967_name [shape=none, label=<<font color="black">Branch[11967]</font>>]
    node11967_name -> node11967 [arrowhead=none, color="black", style=dashed]
    node11967 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11967 -> node11968 [label=<<font color="black">true</font>> color="black"]
    node11967 -> node11969 [label=<<font color="black">false</font>> color="black"]
    node11968_name [shape=none, label=<<font color="black">Block[11968]</font>>]
    node11968_name -> node11968 [arrowhead=none, color="black", style=dashed]
    node11968 [shape=box, label=<<font color="black">[0] let bits = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11968 -> node11970 [color="black"]
    node11969_name [shape=none, label=<<font color="black">Block[11969]</font>>]
    node11969_name -> node11969 [arrowhead=none, color="black", style=dashed]
    node11969 [shape=box, label=<<font color="black">[0] let bits = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11969 -> node11970 [color="black"]
    node11970_name [shape=none, label=<<font color="black">Branch[11970]</font>>]
    node11970_name -> node11970 [arrowhead=none, color="black", style=dashed]
    node11970 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11970 -> node11971 [label=<<font color="black">true</font>> color="black"]
    node11970 -> node11972 [label=<<font color="black">false</font>> color="black"]
    node11971_name [shape=none, label=<<font color="black">Block[11971]</font>>]
    node11971_name -> node11971 [arrowhead=none, color="black", style=dashed]
    node11971 [shape=box, label=<<font color="black">[0] let bigint = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11971 -> node11973 [color="black"]
    node11972_name [shape=none, label=<<font color="black">Block[11972]</font>>]
    node11972_name -> node11972 [arrowhead=none, color="black", style=dashed]
    node11972 [shape=box, label=<<font color="black">[0] let bigint = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11972 -> node11973 [color="black"]
    node11973_name [shape=none, label=<<font color="black">Call[11973]</font>>]
    node11973_name -> node11973 [arrowhead=none, color="black", style=dashed]
    node11973 [shape=cds, label=<<font color="black">%0 = clo&lt;ToIndex&gt;(bits)</font>> color="black" fillcolor="white", style=filled]
    node11973 -> node11974 [color="black"]
    node11974_name [shape=none, label=<<font color="black">Block[11974]</font>>]
    node11974_name -> node11974 [arrowhead=none, color="black", style=dashed]
    node11974 [shape=box, label=<<font color="black">[0] bits = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11974 -> node11975 [color="black"]
    node11975_name [shape=none, label=<<font color="black">Call[11975]</font>>]
    node11975_name -> node11975 [arrowhead=none, color="black", style=dashed]
    node11975 [shape=cds, label=<<font color="black">%1 = clo&lt;ToBigInt&gt;(bigint)</font>> color="black" fillcolor="white", style=filled]
    node11975 -> node11976 [color="black"]
    node11976_name [shape=none, label=<<font color="black">Block[11976]</font>>]
    node11976_name -> node11976 [arrowhead=none, color="black", style=dashed]
    node11976 [shape=box, label=<<font color="black">[0] bigint = [? %1]<BR ALIGN="LEFT"/>[1] return ([bigInt] (% ([math] bigint) (** 2 bits)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11976 -> cluster2072_exit [color="black"]
  }
}