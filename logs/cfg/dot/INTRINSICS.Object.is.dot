digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2012 {
    label = "def <BUILTIN>:INTRINSICS.Object.is(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2012_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2012_entry_name -> cluster2012_entry [arrowhead=none, color="black", style=dashed]
    cluster2012_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2012_entry -> node11242 [color="black"]
    cluster2012_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2012_exit_name -> cluster2012_exit [arrowhead=none, color="black", style=dashed]
    cluster2012_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11242_name [shape=none, label=<<font color="black">Branch[11242]</font>>]
    node11242_name -> node11242 [arrowhead=none, color="black", style=dashed]
    node11242 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11242 -> node11243 [label=<<font color="black">true</font>> color="black"]
    node11242 -> node11244 [label=<<font color="black">false</font>> color="black"]
    node11243_name [shape=none, label=<<font color="black">Block[11243]</font>>]
    node11243_name -> node11243 [arrowhead=none, color="black", style=dashed]
    node11243 [shape=box, label=<<font color="black">[0] let value1 = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11243 -> node11245 [color="black"]
    node11244_name [shape=none, label=<<font color="black">Block[11244]</font>>]
    node11244_name -> node11244 [arrowhead=none, color="black", style=dashed]
    node11244 [shape=box, label=<<font color="black">[0] let value1 = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11244 -> node11245 [color="black"]
    node11245_name [shape=none, label=<<font color="black">Branch[11245]</font>>]
    node11245_name -> node11245 [arrowhead=none, color="black", style=dashed]
    node11245 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11245 -> node11246 [label=<<font color="black">true</font>> color="black"]
    node11245 -> node11247 [label=<<font color="black">false</font>> color="black"]
    node11246_name [shape=none, label=<<font color="black">Block[11246]</font>>]
    node11246_name -> node11246 [arrowhead=none, color="black", style=dashed]
    node11246 [shape=box, label=<<font color="black">[0] let value2 = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11246 -> node11248 [color="black"]
    node11247_name [shape=none, label=<<font color="black">Block[11247]</font>>]
    node11247_name -> node11247 [arrowhead=none, color="black", style=dashed]
    node11247 [shape=box, label=<<font color="black">[0] let value2 = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11247 -> node11248 [color="black"]
    node11248_name [shape=none, label=<<font color="black">Call[11248]</font>>]
    node11248_name -> node11248 [arrowhead=none, color="black", style=dashed]
    node11248 [shape=cds, label=<<font color="black">%0 = clo&lt;SameValue&gt;(value1, value2)</font>> color="black" fillcolor="white", style=filled]
    node11248 -> node11249 [color="black"]
    node11249_name [shape=none, label=<<font color="black">Block[11249]</font>>]
    node11249_name -> node11249 [arrowhead=none, color="black", style=dashed]
    node11249 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11249 -> cluster2012_exit [color="black"]
  }
}