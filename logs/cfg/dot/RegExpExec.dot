digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2312 {
    label = "def RegExpExec(R: Object, S: String): Normal[Object | Null] | Abrupt"
    style = rounded
    cluster2312_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2312_entry_name -> cluster2312_entry [arrowhead=none, color="black", style=dashed]
    cluster2312_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2312_entry -> node14165 [color="black"]
    cluster2312_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2312_exit_name -> cluster2312_exit [arrowhead=none, color="black", style=dashed]
    cluster2312_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14165_name [shape=none, label=<<font color="black">Call[14165]</font>>]
    node14165_name -> node14165 [arrowhead=none, color="black", style=dashed]
    node14165 [shape=cds, label=<<font color="black">%0 = clo&lt;Get&gt;(R, &quot;exec&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14165 -> node14166 [color="black"]
    node14166_name [shape=none, label=<<font color="black">Block[14166]</font>>]
    node14166_name -> node14166 [arrowhead=none, color="black", style=dashed]
    node14166 [shape=box, label=<<font color="black">[0] let exec = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14166 -> node14167 [color="black"]
    node14167_name [shape=none, label=<<font color="black">Call[14167]</font>>]
    node14167_name -> node14167 [arrowhead=none, color="black", style=dashed]
    node14167 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(exec)</font>> color="black" fillcolor="white", style=filled]
    node14167 -> node14168 [color="black"]
    node14168_name [shape=none, label=<<font color="black">Branch[14168]</font>>]
    node14168_name -> node14168 [arrowhead=none, color="black", style=dashed]
    node14168 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node14168 -> node14169 [label=<<font color="black">true</font>> color="black"]
    node14168 -> node14174 [label=<<font color="black">false</font>> color="black"]
    node14169_name [shape=none, label=<<font color="black">Call[14169]</font>>]
    node14169_name -> node14169 [arrowhead=none, color="black", style=dashed]
    node14169 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(exec, R, (new [S])[#987])</font>> color="black" fillcolor="white", style=filled]
    node14169 -> node14170 [color="black"]
    node14174_name [shape=none, label=<<font color="black">Call[14174]</font>>]
    node14174_name -> node14174 [arrowhead=none, color="black", style=dashed]
    node14174 [shape=cds, label=<<font color="black">%3 = clo&lt;RequireInternalSlot&gt;(R, &quot;RegExpMatcher&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14174 -> node14175 [color="black"]
    node14170_name [shape=none, label=<<font color="black">Block[14170]</font>>]
    node14170_name -> node14170 [arrowhead=none, color="black", style=dashed]
    node14170 [shape=box, label=<<font color="black">[0] let result = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14170 -> node14171 [color="black"]
    node14175_name [shape=none, label=<<font color="black">Block[14175]</font>>]
    node14175_name -> node14175 [arrowhead=none, color="black", style=dashed]
    node14175 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14175 -> node14176 [color="black"]
    node14171_name [shape=none, label=<<font color="black">Branch[14171]</font>>]
    node14171_name -> node14171 [arrowhead=none, color="black", style=dashed]
    node14171 [shape=diamond, label=<<font color="black">(! (|| (= (typeof result) @Object) (= (typeof result) @Null)))</font>> color="black" fillcolor="white", style=filled]
    node14171 -> node14172 [label=<<font color="black">true</font>> color="black"]
    node14171 -> node14173 [label=<<font color="black">false</font>> color="black"]
    node14176_name [shape=none, label=<<font color="black">Call[14176]</font>>]
    node14176_name -> node14176 [arrowhead=none, color="black", style=dashed]
    node14176 [shape=cds, label=<<font color="black">%4 = clo&lt;RegExpBuiltinExec&gt;(R, S)</font>> color="black" fillcolor="white", style=filled]
    node14176 -> node14177 [color="black"]
    node14172_name [shape=none, label=<<font color="black">Block[14172]</font>>]
    node14172_name -> node14172 [arrowhead=none, color="black", style=dashed]
    node14172 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#988])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14172 -> cluster2312_exit [color="black"]
    node14173_name [shape=none, label=<<font color="black">Block[14173]</font>>]
    node14173_name -> node14173 [arrowhead=none, color="black", style=dashed]
    node14173 [shape=box, label=<<font color="black">[0] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14173 -> cluster2312_exit [color="black"]
    node14177_name [shape=none, label=<<font color="black">Block[14177]</font>>]
    node14177_name -> node14177 [arrowhead=none, color="black", style=dashed]
    node14177 [shape=box, label=<<font color="black">[0] return [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14177 -> cluster2312_exit [color="black"]
  }
}