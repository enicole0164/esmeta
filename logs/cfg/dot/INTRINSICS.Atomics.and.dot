digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2534 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.and(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2534_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2534_entry_name -> cluster2534_entry [arrowhead=none, color="black", style=dashed]
    cluster2534_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2534_entry -> node18018 [color="black"]
    cluster2534_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2534_exit_name -> cluster2534_exit [arrowhead=none, color="black", style=dashed]
    cluster2534_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18018_name [shape=none, label=<<font color="black">Branch[18018]</font>>]
    node18018_name -> node18018 [arrowhead=none, color="black", style=dashed]
    node18018 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18018 -> node18019 [label=<<font color="black">true</font>> color="black"]
    node18018 -> node18020 [label=<<font color="black">false</font>> color="black"]
    node18019_name [shape=none, label=<<font color="black">Block[18019]</font>>]
    node18019_name -> node18019 [arrowhead=none, color="black", style=dashed]
    node18019 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18019 -> node18021 [color="black"]
    node18020_name [shape=none, label=<<font color="black">Block[18020]</font>>]
    node18020_name -> node18020 [arrowhead=none, color="black", style=dashed]
    node18020 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18020 -> node18021 [color="black"]
    node18021_name [shape=none, label=<<font color="black">Branch[18021]</font>>]
    node18021_name -> node18021 [arrowhead=none, color="black", style=dashed]
    node18021 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18021 -> node18022 [label=<<font color="black">true</font>> color="black"]
    node18021 -> node18023 [label=<<font color="black">false</font>> color="black"]
    node18022_name [shape=none, label=<<font color="black">Block[18022]</font>>]
    node18022_name -> node18022 [arrowhead=none, color="black", style=dashed]
    node18022 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18022 -> node18024 [color="black"]
    node18023_name [shape=none, label=<<font color="black">Block[18023]</font>>]
    node18023_name -> node18023 [arrowhead=none, color="black", style=dashed]
    node18023 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18023 -> node18024 [color="black"]
    node18024_name [shape=none, label=<<font color="black">Branch[18024]</font>>]
    node18024_name -> node18024 [arrowhead=none, color="black", style=dashed]
    node18024 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18024 -> node18025 [label=<<font color="black">true</font>> color="black"]
    node18024 -> node18026 [label=<<font color="black">false</font>> color="black"]
    node18025_name [shape=none, label=<<font color="black">Block[18025]</font>>]
    node18025_name -> node18025 [arrowhead=none, color="black", style=dashed]
    node18025 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18025 -> node18027 [color="black"]
    node18026_name [shape=none, label=<<font color="black">Block[18026]</font>>]
    node18026_name -> node18026 [arrowhead=none, color="black", style=dashed]
    node18026 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18026 -> node18027 [color="black"]
    node18027_name [shape=none, label=<<font color="black">Block[18027]</font>>]
    node18027_name -> node18027 [arrowhead=none, color="black", style=dashed]
    node18027 [shape=box, label=<<font color="black">[0] (yet &quot;Let _and_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return ByteListBitwiseOp(`&amp;`, _xBytes_, _yBytes_).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18027 -> node18028 [color="black"]
    node18028_name [shape=none, label=<<font color="black">Call[18028]</font>>]
    node18028_name -> node18028 [arrowhead=none, color="black", style=dashed]
    node18028 [shape=cds, label=<<font color="black">%0 = clo&lt;AtomicReadModifyWrite&gt;(typedArray, index, value, and)</font>> color="black" fillcolor="white", style=filled]
    node18028 -> node18029 [color="black"]
    node18029_name [shape=none, label=<<font color="black">Block[18029]</font>>]
    node18029_name -> node18029 [arrowhead=none, color="black", style=dashed]
    node18029 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18029 -> cluster2534_exit [color="black"]
  }
}