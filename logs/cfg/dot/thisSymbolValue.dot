digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2047 {
    label = "def thisSymbolValue(value: Unknown): Unknown"
    style = rounded
    cluster2047_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2047_entry_name -> cluster2047_entry [arrowhead=none, color="black", style=dashed]
    cluster2047_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2047_entry -> node11668 [color="black"]
    cluster2047_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2047_exit_name -> cluster2047_exit [arrowhead=none, color="black", style=dashed]
    cluster2047_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11668_name [shape=none, label=<<font color="black">Branch[11668]</font>>]
    node11668_name -> node11668 [arrowhead=none, color="black", style=dashed]
    node11668 [shape=diamond, label=<<font color="black">(= (typeof value) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node11668 -> node11669 [label=<<font color="black">true</font>> color="black"]
    node11668 -> node11670 [label=<<font color="black">false</font>> color="black"]
    node11669_name [shape=none, label=<<font color="black">Block[11669]</font>>]
    node11669_name -> node11669 [arrowhead=none, color="black", style=dashed]
    node11669 [shape=box, label=<<font color="black">[0] return value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11669 -> cluster2047_exit [color="black"]
    node11670_name [shape=none, label=<<font color="black">Branch[11670]</font>>]
    node11670_name -> node11670 [arrowhead=none, color="black", style=dashed]
    node11670 [shape=diamond, label=<<font color="black">(&amp;&amp; (= (typeof value) @Object) (! (= value.SymbolData absent)))</font>> color="black" fillcolor="white", style=filled]
    node11670 -> node11671 [label=<<font color="black">true</font>> color="black"]
    node11670 -> node11672 [label=<<font color="black">false</font>> color="black"]
    node11671_name [shape=none, label=<<font color="black">Block[11671]</font>>]
    node11671_name -> node11671 [arrowhead=none, color="black", style=dashed]
    node11671 [shape=box, label=<<font color="black">[0] let s = value.SymbolData<BR ALIGN="LEFT"/>[1] assert (= (typeof s) @Symbol)<BR ALIGN="LEFT"/>[2] return s<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11671 -> cluster2047_exit [color="black"]
    node11672_name [shape=none, label=<<font color="black">Block[11672]</font>>]
    node11672_name -> node11672 [arrowhead=none, color="black", style=dashed]
    node11672 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#919])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11672 -> cluster2047_exit [color="black"]
  }
}