digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster159 {
    label = "def PrivateSet(O: Object, P: PrivateName, value: ESValue): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster159_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster159_entry_name -> cluster159_entry [arrowhead=none, color="black", style=dashed]
    cluster159_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster159_entry -> node1361 [color="black"]
    cluster159_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster159_exit_name -> cluster159_exit [arrowhead=none, color="black", style=dashed]
    cluster159_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1361_name [shape=none, label=<<font color="black">Call[1361]</font>>]
    node1361_name -> node1361 [arrowhead=none, color="black", style=dashed]
    node1361 [shape=cds, label=<<font color="black">%0 = clo&lt;PrivateElementFind&gt;(O, P)</font>> color="black" fillcolor="white", style=filled]
    node1361 -> node1362 [color="black"]
    node1362_name [shape=none, label=<<font color="black">Block[1362]</font>>]
    node1362_name -> node1362 [arrowhead=none, color="black", style=dashed]
    node1362 [shape=box, label=<<font color="black">[0] let entry = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1362 -> node1363 [color="black"]
    node1363_name [shape=none, label=<<font color="black">Branch[1363]</font>>]
    node1363_name -> node1363 [arrowhead=none, color="black", style=dashed]
    node1363 [shape=diamond, label=<<font color="black">(= entry ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node1363 -> node1364 [label=<<font color="black">true</font>> color="black"]
    node1363 -> node1365 [label=<<font color="black">false</font>> color="black"]
    node1364_name [shape=none, label=<<font color="black">Block[1364]</font>>]
    node1364_name -> node1364 [arrowhead=none, color="black", style=dashed]
    node1364 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#70])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1364 -> cluster159_exit [color="black"]
    node1365_name [shape=none, label=<<font color="black">Branch[1365]</font>>]
    node1365_name -> node1365 [arrowhead=none, color="black", style=dashed]
    node1365 [shape=diamond, label=<<font color="black">(= entry.Kind ~field~)</font>> color="black" fillcolor="white", style=filled]
    node1365 -> node1366 [label=<<font color="black">true</font>> color="black"]
    node1365 -> node1367 [label=<<font color="black">false</font>> color="black"]
    node1366_name [shape=none, label=<<font color="black">Block[1366]</font>>]
    node1366_name -> node1366 [arrowhead=none, color="black", style=dashed]
    node1366 [shape=box, label=<<font color="black">[0] entry.Value = value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1366 -> node1375 [color="black"]
    node1367_name [shape=none, label=<<font color="black">Branch[1367]</font>>]
    node1367_name -> node1367 [arrowhead=none, color="black", style=dashed]
    node1367 [shape=diamond, label=<<font color="black">(= entry.Kind ~method~)</font>> color="black" fillcolor="white", style=filled]
    node1367 -> node1368 [label=<<font color="black">true</font>> color="black"]
    node1367 -> node1369 [label=<<font color="black">false</font>> color="black"]
    node1375_name [shape=none, label=<<font color="black">Block[1375]</font>>]
    node1375_name -> node1375 [arrowhead=none, color="black", style=dashed]
    node1375 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1375 -> cluster159_exit [color="black"]
    node1368_name [shape=none, label=<<font color="black">Block[1368]</font>>]
    node1368_name -> node1368 [arrowhead=none, color="black", style=dashed]
    node1368 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#71])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1368 -> cluster159_exit [color="black"]
    node1369_name [shape=none, label=<<font color="black">Block[1369]</font>>]
    node1369_name -> node1369 [arrowhead=none, color="black", style=dashed]
    node1369 [shape=box, label=<<font color="black">[0] assert (= entry.Kind ~accessor~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1369 -> node1370 [color="black"]
    node1370_name [shape=none, label=<<font color="black">Branch[1370]</font>>]
    node1370_name -> node1370 [arrowhead=none, color="black", style=dashed]
    node1370 [shape=diamond, label=<<font color="black">(= entry.Set undefined)</font>> color="black" fillcolor="white", style=filled]
    node1370 -> node1371 [label=<<font color="black">true</font>> color="black"]
    node1370 -> node1372 [label=<<font color="black">false</font>> color="black"]
    node1371_name [shape=none, label=<<font color="black">Block[1371]</font>>]
    node1371_name -> node1371 [arrowhead=none, color="black", style=dashed]
    node1371 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#72])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1371 -> cluster159_exit [color="black"]
    node1372_name [shape=none, label=<<font color="black">Block[1372]</font>>]
    node1372_name -> node1372 [arrowhead=none, color="black", style=dashed]
    node1372 [shape=box, label=<<font color="black">[0] let setter = entry.Set<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1372 -> node1373 [color="black"]
    node1373_name [shape=none, label=<<font color="black">Call[1373]</font>>]
    node1373_name -> node1373 [arrowhead=none, color="black", style=dashed]
    node1373 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(setter, O, (new [value])[#73])</font>> color="black" fillcolor="white", style=filled]
    node1373 -> node1374 [color="black"]
    node1374_name [shape=none, label=<<font color="black">Block[1374]</font>>]
    node1374_name -> node1374 [arrowhead=none, color="black", style=dashed]
    node1374 [shape=box, label=<<font color="black">[0] [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1374 -> node1375 [color="black"]
  }
}