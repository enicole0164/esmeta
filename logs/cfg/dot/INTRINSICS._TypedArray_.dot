digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2425 {
    label = "def <BUILTIN>:INTRINSICS._TypedArray_(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2425_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2425_entry_name -> cluster2425_entry [arrowhead=none, color="black", style=dashed]
    cluster2425_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2425_entry -> node16714 [color="black"]
    cluster2425_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2425_exit_name -> cluster2425_exit [arrowhead=none, color="black", style=dashed]
    cluster2425_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16714_name [shape=none, label=<<font color="black">Block[16714]</font>>]
    node16714_name -> node16714 [arrowhead=none, color="black", style=dashed]
    node16714 [shape=box, label=<<font color="black">[0] let args = argumentsList<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16714 -> node16715 [color="black"]
    node16715_name [shape=none, label=<<font color="black">Branch[16715]</font>>]
    node16715_name -> node16715 [arrowhead=none, color="black", style=dashed]
    node16715 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node16715 -> node16716 [label=<<font color="black">true</font>> color="black"]
    node16715 -> node16717 [label=<<font color="black">false</font>> color="black"]
    node16716_name [shape=none, label=<<font color="black">Block[16716]</font>>]
    node16716_name -> node16716 [arrowhead=none, color="black", style=dashed]
    node16716 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1104])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16716 -> cluster2425_exit [color="black"]
    node16717_name [shape=none, label=<<font color="black">Block[16717]</font>>]
    node16717_name -> node16717 [arrowhead=none, color="black", style=dashed]
    node16717 [shape=box, label=<<font color="black">[0] (yet &quot;Let _constructorName_ be the String value of the Constructor Name value specified in &lt;emu-xref href=\&quot;#table-the-typedarray-constructors\&quot;&gt;&lt;/emu-xref&gt; for this &lt;var&gt;TypedArray&lt;/var&gt; constructor.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _proto_ be &lt;code&gt;\&quot;%&lt;var&gt;TypedArray&lt;/var&gt;.prototype%\&quot;&lt;/code&gt;.&quot;)<BR ALIGN="LEFT"/>[2] let numberOfArgs = args.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16717 -> node16718 [color="black"]
    node16718_name [shape=none, label=<<font color="black">Branch[16718]</font>>]
    node16718_name -> node16718 [arrowhead=none, color="black", style=dashed]
    node16718 [shape=diamond, label=<<font color="black">(== numberOfArgs 0)</font>> color="black" fillcolor="white", style=filled]
    node16718 -> node16719 [label=<<font color="black">true</font>> color="black"]
    node16718 -> node16721 [label=<<font color="black">false</font>> color="black"]
    node16719_name [shape=none, label=<<font color="black">Call[16719]</font>>]
    node16719_name -> node16719 [arrowhead=none, color="black", style=dashed]
    node16719 [shape=cds, label=<<font color="black">%0 = clo&lt;AllocateTypedArray&gt;(constructorName, NewTarget, proto, 0)</font>> color="black" fillcolor="white", style=filled]
    node16719 -> node16720 [color="black"]
    node16721_name [shape=none, label=<<font color="black">Block[16721]</font>>]
    node16721_name -> node16721 [arrowhead=none, color="black", style=dashed]
    node16721 [shape=box, label=<<font color="black">[0] let firstArgument = args[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16721 -> node16722 [color="black"]
    node16720_name [shape=none, label=<<font color="black">Block[16720]</font>>]
    node16720_name -> node16720 [arrowhead=none, color="black", style=dashed]
    node16720 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16720 -> cluster2425_exit [color="black"]
    node16722_name [shape=none, label=<<font color="black">Branch[16722]</font>>]
    node16722_name -> node16722 [arrowhead=none, color="black", style=dashed]
    node16722 [shape=diamond, label=<<font color="black">(= (typeof firstArgument) @Object)</font>> color="black" fillcolor="white", style=filled]
    node16722 -> node16723 [label=<<font color="black">true</font>> color="black"]
    node16722 -> node16749 [label=<<font color="black">false</font>> color="black"]
    node16723_name [shape=none, label=<<font color="black">Call[16723]</font>>]
    node16723_name -> node16723 [arrowhead=none, color="black", style=dashed]
    node16723 [shape=cds, label=<<font color="black">%1 = clo&lt;AllocateTypedArray&gt;(constructorName, NewTarget, proto)</font>> color="black" fillcolor="white", style=filled]
    node16723 -> node16724 [color="black"]
    node16749_name [shape=none, label=<<font color="black">Block[16749]</font>>]
    node16749_name -> node16749 [arrowhead=none, color="black", style=dashed]
    node16749 [shape=box, label=<<font color="black">[0] assert (! (? firstArgument: &quot;Object&quot;))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16749 -> node16750 [color="black"]
    node16724_name [shape=none, label=<<font color="black">Block[16724]</font>>]
    node16724_name -> node16724 [arrowhead=none, color="black", style=dashed]
    node16724 [shape=box, label=<<font color="black">[0] let O = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16724 -> node16725 [color="black"]
    node16750_name [shape=none, label=<<font color="black">Call[16750]</font>>]
    node16750_name -> node16750 [arrowhead=none, color="black", style=dashed]
    node16750 [shape=cds, label=<<font color="black">%8 = clo&lt;ToIndex&gt;(firstArgument)</font>> color="black" fillcolor="white", style=filled]
    node16750 -> node16751 [color="black"]
    node16725_name [shape=none, label=<<font color="black">Branch[16725]</font>>]
    node16725_name -> node16725 [arrowhead=none, color="black", style=dashed]
    node16725 [shape=diamond, label=<<font color="black">(! (= firstArgument.TypedArrayName absent))</font>> color="black" fillcolor="white", style=filled]
    node16725 -> node16726 [label=<<font color="black">true</font>> color="black"]
    node16725 -> node16728 [label=<<font color="black">false</font>> color="black"]
    node16751_name [shape=none, label=<<font color="black">Block[16751]</font>>]
    node16751_name -> node16751 [arrowhead=none, color="black", style=dashed]
    node16751 [shape=box, label=<<font color="black">[0] let elementLength = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16751 -> node16752 [color="black"]
    node16726_name [shape=none, label=<<font color="black">Call[16726]</font>>]
    node16726_name -> node16726 [arrowhead=none, color="black", style=dashed]
    node16726 [shape=cds, label=<<font color="black">%2 = clo&lt;InitializeTypedArrayFromTypedArray&gt;(O, firstArgument)</font>> color="black" fillcolor="white", style=filled]
    node16726 -> node16727 [color="black"]
    node16728_name [shape=none, label=<<font color="black">Branch[16728]</font>>]
    node16728_name -> node16728 [arrowhead=none, color="black", style=dashed]
    node16728 [shape=diamond, label=<<font color="black">(! (= firstArgument.ArrayBufferData absent))</font>> color="black" fillcolor="white", style=filled]
    node16728 -> node16729 [label=<<font color="black">true</font>> color="black"]
    node16728 -> node16737 [label=<<font color="black">false</font>> color="black"]
    node16752_name [shape=none, label=<<font color="black">Call[16752]</font>>]
    node16752_name -> node16752 [arrowhead=none, color="black", style=dashed]
    node16752 [shape=cds, label=<<font color="black">%9 = clo&lt;AllocateTypedArray&gt;(constructorName, NewTarget, proto, elementLength)</font>> color="black" fillcolor="white", style=filled]
    node16752 -> node16753 [color="black"]
    node16727_name [shape=none, label=<<font color="black">Block[16727]</font>>]
    node16727_name -> node16727 [arrowhead=none, color="black", style=dashed]
    node16727 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16727 -> node16748 [color="black"]
    node16729_name [shape=none, label=<<font color="black">Branch[16729]</font>>]
    node16729_name -> node16729 [arrowhead=none, color="black", style=dashed]
    node16729 [shape=diamond, label=<<font color="black">(&lt; 1 numberOfArgs)</font>> color="black" fillcolor="white", style=filled]
    node16729 -> node16730 [label=<<font color="black">true</font>> color="black"]
    node16729 -> node16731 [label=<<font color="black">false</font>> color="black"]
    node16737_name [shape=none, label=<<font color="black">Block[16737]</font>>]
    node16737_name -> node16737 [arrowhead=none, color="black", style=dashed]
    node16737 [shape=box, label=<<font color="black">[0] assert (yet &quot;Type(_firstArgument_) is Object and _firstArgument_ does not have either a [[TypedArrayName]] or an [[ArrayBufferData]] internal slot.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16737 -> node16738 [color="black"]
    node16753_name [shape=none, label=<<font color="black">Block[16753]</font>>]
    node16753_name -> node16753 [arrowhead=none, color="black", style=dashed]
    node16753 [shape=box, label=<<font color="black">[0] return [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16753 -> cluster2425_exit [color="black"]
    node16748_name [shape=none, label=<<font color="black">Block[16748]</font>>]
    node16748_name -> node16748 [arrowhead=none, color="black", style=dashed]
    node16748 [shape=box, label=<<font color="black">[0] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16748 -> cluster2425_exit [color="black"]
    node16730_name [shape=none, label=<<font color="black">Block[16730]</font>>]
    node16730_name -> node16730 [arrowhead=none, color="black", style=dashed]
    node16730 [shape=box, label=<<font color="black">[0] let byteOffset = args[1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16730 -> node16732 [color="black"]
    node16731_name [shape=none, label=<<font color="black">Block[16731]</font>>]
    node16731_name -> node16731 [arrowhead=none, color="black", style=dashed]
    node16731 [shape=box, label=<<font color="black">[0] let byteOffset = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16731 -> node16732 [color="black"]
    node16738_name [shape=none, label=<<font color="black">Call[16738]</font>>]
    node16738_name -> node16738 [arrowhead=none, color="black", style=dashed]
    node16738 [shape=cds, label=<<font color="black">%4 = clo&lt;GetMethod&gt;(firstArgument, @SYMBOL.iterator)</font>> color="black" fillcolor="white", style=filled]
    node16738 -> node16739 [color="black"]
    node16732_name [shape=none, label=<<font color="black">Branch[16732]</font>>]
    node16732_name -> node16732 [arrowhead=none, color="black", style=dashed]
    node16732 [shape=diamond, label=<<font color="black">(&lt; 2 numberOfArgs)</font>> color="black" fillcolor="white", style=filled]
    node16732 -> node16733 [label=<<font color="black">true</font>> color="black"]
    node16732 -> node16734 [label=<<font color="black">false</font>> color="black"]
    node16739_name [shape=none, label=<<font color="black">Block[16739]</font>>]
    node16739_name -> node16739 [arrowhead=none, color="black", style=dashed]
    node16739 [shape=box, label=<<font color="black">[0] let usingIterator = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16739 -> node16740 [color="black"]
    node16733_name [shape=none, label=<<font color="black">Block[16733]</font>>]
    node16733_name -> node16733 [arrowhead=none, color="black", style=dashed]
    node16733 [shape=box, label=<<font color="black">[0] let length = args[2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16733 -> node16735 [color="black"]
    node16734_name [shape=none, label=<<font color="black">Block[16734]</font>>]
    node16734_name -> node16734 [arrowhead=none, color="black", style=dashed]
    node16734 [shape=box, label=<<font color="black">[0] let length = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16734 -> node16735 [color="black"]
    node16740_name [shape=none, label=<<font color="black">Branch[16740]</font>>]
    node16740_name -> node16740 [arrowhead=none, color="black", style=dashed]
    node16740 [shape=diamond, label=<<font color="black">(! (= usingIterator undefined))</font>> color="black" fillcolor="white", style=filled]
    node16740 -> node16741 [label=<<font color="black">true</font>> color="black"]
    node16740 -> node16745 [label=<<font color="black">false</font>> color="black"]
    node16735_name [shape=none, label=<<font color="black">Call[16735]</font>>]
    node16735_name -> node16735 [arrowhead=none, color="black", style=dashed]
    node16735 [shape=cds, label=<<font color="black">%3 = clo&lt;InitializeTypedArrayFromArrayBuffer&gt;(O, firstArgument, byteOffset, length)</font>> color="black" fillcolor="white", style=filled]
    node16735 -> node16736 [color="black"]
    node16741_name [shape=none, label=<<font color="black">Call[16741]</font>>]
    node16741_name -> node16741 [arrowhead=none, color="black", style=dashed]
    node16741 [shape=cds, label=<<font color="black">%5 = clo&lt;IterableToList&gt;(firstArgument, usingIterator)</font>> color="black" fillcolor="white", style=filled]
    node16741 -> node16742 [color="black"]
    node16745_name [shape=none, label=<<font color="black">Block[16745]</font>>]
    node16745_name -> node16745 [arrowhead=none, color="black", style=dashed]
    node16745 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16745 -> node16746 [color="black"]
    node16736_name [shape=none, label=<<font color="black">Block[16736]</font>>]
    node16736_name -> node16736 [arrowhead=none, color="black", style=dashed]
    node16736 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16736 -> node16748 [color="black"]
    node16742_name [shape=none, label=<<font color="black">Block[16742]</font>>]
    node16742_name -> node16742 [arrowhead=none, color="black", style=dashed]
    node16742 [shape=box, label=<<font color="black">[0] let values = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16742 -> node16743 [color="black"]
    node16746_name [shape=none, label=<<font color="black">Call[16746]</font>>]
    node16746_name -> node16746 [arrowhead=none, color="black", style=dashed]
    node16746 [shape=cds, label=<<font color="black">%7 = clo&lt;InitializeTypedArrayFromArrayLike&gt;(O, firstArgument)</font>> color="black" fillcolor="white", style=filled]
    node16746 -> node16747 [color="black"]
    node16743_name [shape=none, label=<<font color="black">Call[16743]</font>>]
    node16743_name -> node16743 [arrowhead=none, color="black", style=dashed]
    node16743 [shape=cds, label=<<font color="black">%6 = clo&lt;InitializeTypedArrayFromList&gt;(O, values)</font>> color="black" fillcolor="white", style=filled]
    node16743 -> node16744 [color="black"]
    node16747_name [shape=none, label=<<font color="black">Block[16747]</font>>]
    node16747_name -> node16747 [arrowhead=none, color="black", style=dashed]
    node16747 [shape=box, label=<<font color="black">[0] [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16747 -> node16748 [color="black"]
    node16744_name [shape=none, label=<<font color="black">Block[16744]</font>>]
    node16744_name -> node16744 [arrowhead=none, color="black", style=dashed]
    node16744 [shape=box, label=<<font color="black">[0] [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16744 -> node16748 [color="black"]
  }
}