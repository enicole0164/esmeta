digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1096 {
    label = "def SetFunctionName(F: FunctionObject, name: PrivateName | Symbol | String, prefix?: String): Const[~unused~]"
    style = rounded
    cluster1096_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1096_entry_name -> cluster1096_entry [arrowhead=none, color="black", style=dashed]
    cluster1096_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1096_entry -> node4358 [color="black"]
    cluster1096_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1096_exit_name -> cluster1096_exit [arrowhead=none, color="black", style=dashed]
    cluster1096_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4358_name [shape=none, label=<<font color="black">Block[4358]</font>>]
    node4358_name -> node4358 [arrowhead=none, color="black", style=dashed]
    node4358 [shape=box, label=<<font color="black">[0] assert (&amp;&amp; F.Extensible (= F.SubMap.name absent))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4358 -> node4359 [color="black"]
    node4359_name [shape=none, label=<<font color="black">Branch[4359]</font>>]
    node4359_name -> node4359 [arrowhead=none, color="black", style=dashed]
    node4359 [shape=diamond, label=<<font color="black">(= (typeof name) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node4359 -> node4360 [label=<<font color="black">true</font>> color="black"]
    node4359 -> node4364 [label=<<font color="black">false</font>> color="black"]
    node4360_name [shape=none, label=<<font color="black">Block[4360]</font>>]
    node4360_name -> node4360 [arrowhead=none, color="black", style=dashed]
    node4360 [shape=box, label=<<font color="black">[0] let description = name.Description<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4360 -> node4361 [color="black"]
    node4364_name [shape=none, label=<<font color="black">Branch[4364]</font>>]
    node4364_name -> node4364 [arrowhead=none, color="black", style=dashed]
    node4364 [shape=diamond, label=<<font color="black">(? name: &quot;PrivateName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node4364 -> node4365 [label=<<font color="black">true</font>> color="black"]
    node4364 -> node4366 [label=<<font color="black">false</font>> color="black"]
    node4361_name [shape=none, label=<<font color="black">Branch[4361]</font>>]
    node4361_name -> node4361 [arrowhead=none, color="black", style=dashed]
    node4361 [shape=diamond, label=<<font color="black">(= description undefined)</font>> color="black" fillcolor="white", style=filled]
    node4361 -> node4362 [label=<<font color="black">true</font>> color="black"]
    node4361 -> node4363 [label=<<font color="black">false</font>> color="black"]
    node4365_name [shape=none, label=<<font color="black">Block[4365]</font>>]
    node4365_name -> node4365 [arrowhead=none, color="black", style=dashed]
    node4365 [shape=box, label=<<font color="black">[0] name = name.Description<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4365 -> node4366 [color="black"]
    node4366_name [shape=none, label=<<font color="black">Branch[4366]</font>>]
    node4366_name -> node4366 [arrowhead=none, color="black", style=dashed]
    node4366 [shape=diamond, label=<<font color="black">(! (= F.InitialName absent))</font>> color="black" fillcolor="white", style=filled]
    node4366 -> node4367 [label=<<font color="black">true</font>> color="black"]
    node4366 -> node4368 [label=<<font color="black">false</font>> color="black"]
    node4362_name [shape=none, label=<<font color="black">Block[4362]</font>>]
    node4362_name -> node4362 [arrowhead=none, color="black", style=dashed]
    node4362 [shape=box, label=<<font color="black">[0] name = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4362 -> node4366 [color="black"]
    node4363_name [shape=none, label=<<font color="black">Block[4363]</font>>]
    node4363_name -> node4363 [arrowhead=none, color="black", style=dashed]
    node4363 [shape=box, label=<<font color="black">[0] name = (concat &quot;[&quot; description &quot;]&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4363 -> node4366 [color="black"]
    node4367_name [shape=none, label=<<font color="black">Block[4367]</font>>]
    node4367_name -> node4367 [arrowhead=none, color="black", style=dashed]
    node4367 [shape=box, label=<<font color="black">[0] F.InitialName = name<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4367 -> node4368 [color="black"]
    node4368_name [shape=none, label=<<font color="black">Branch[4368]</font>>]
    node4368_name -> node4368 [arrowhead=none, color="black", style=dashed]
    node4368 [shape=diamond, label=<<font color="black">(! (= prefix absent))</font>> color="black" fillcolor="white", style=filled]
    node4368 -> node4369 [label=<<font color="black">true</font>> color="black"]
    node4368 -> node4372 [label=<<font color="black">false</font>> color="black"]
    node4369_name [shape=none, label=<<font color="black">Block[4369]</font>>]
    node4369_name -> node4369 [arrowhead=none, color="black", style=dashed]
    node4369 [shape=box, label=<<font color="black">[0] name = (concat prefix 32cu name)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4369 -> node4370 [color="black"]
    node4372_name [shape=none, label=<<font color="black">Call[4372]</font>>]
    node4372_name -> node4372 [arrowhead=none, color="black", style=dashed]
    node4372 [shape=cds, label=<<font color="black">%0 = clo&lt;DefinePropertyOrThrow&gt;(F, &quot;name&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; name, &quot;Writable&quot; -&gt; false, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; true))[#430])</font>> color="black" fillcolor="white", style=filled]
    node4372 -> node4373 [color="black"]
    node4370_name [shape=none, label=<<font color="black">Branch[4370]</font>>]
    node4370_name -> node4370 [arrowhead=none, color="black", style=dashed]
    node4370 [shape=diamond, label=<<font color="black">(! (= F.InitialName absent))</font>> color="black" fillcolor="white", style=filled]
    node4370 -> node4371 [label=<<font color="black">true</font>> color="black"]
    node4370 -> node4372 [label=<<font color="black">false</font>> color="black"]
    node4373_name [shape=none, label=<<font color="black">Block[4373]</font>>]
    node4373_name -> node4373 [arrowhead=none, color="black", style=dashed]
    node4373 [shape=box, label=<<font color="black">[0] [! %0]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4373 -> cluster1096_exit [color="black"]
    node4371_name [shape=none, label=<<font color="black">Block[4371]</font>>]
    node4371_name -> node4371 [arrowhead=none, color="black", style=dashed]
    node4371 [shape=box, label=<<font color="black">[0] (yet &quot;Optionally, set _F_.[[InitialName]] to _name_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4371 -> node4372 [color="black"]
  }
}