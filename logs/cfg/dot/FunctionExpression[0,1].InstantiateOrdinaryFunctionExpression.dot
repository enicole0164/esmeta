digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1569 {
    label = "def <SYNTAX>:FunctionExpression[0,1].InstantiateOrdinaryFunctionExpression(this: Ast:FunctionExpression[0,1], name?: Unknown): FunctionObject"
    style = rounded
    cluster1569_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1569_entry_name -> cluster1569_entry [arrowhead=none, color="black", style=dashed]
    cluster1569_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1569_entry -> node8433 [color="black"]
    cluster1569_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1569_exit_name -> cluster1569_exit [arrowhead=none, color="black", style=dashed]
    cluster1569_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8433_name [shape=none, label=<<font color="black">Block[8433]</font>>]
    node8433_name -> node8433 [arrowhead=none, color="black", style=dashed]
    node8433 [shape=box, label=<<font color="black">[0] assert (= name absent)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8433 -> node8434 [color="black"]
    node8434_name [shape=none, label=<<font color="black">Call[8434]</font>>]
    node8434_name -> node8434 [arrowhead=none, color="black", style=dashed]
    node8434 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;StringValue()</font>> color="black" fillcolor="white", style=filled]
    node8434 -> node8435 [color="black"]
    node8435_name [shape=none, label=<<font color="black">Block[8435]</font>>]
    node8435_name -> node8435 [arrowhead=none, color="black", style=dashed]
    node8435 [shape=box, label=<<font color="black">[0] name = %0<BR ALIGN="LEFT"/>[1] let outerEnv = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8435 -> node8436 [color="black"]
    node8436_name [shape=none, label=<<font color="black">Call[8436]</font>>]
    node8436_name -> node8436 [arrowhead=none, color="black", style=dashed]
    node8436 [shape=cds, label=<<font color="black">%1 = clo&lt;NewDeclarativeEnvironment&gt;(outerEnv)</font>> color="black" fillcolor="white", style=filled]
    node8436 -> node8437 [color="black"]
    node8437_name [shape=none, label=<<font color="black">Block[8437]</font>>]
    node8437_name -> node8437 [arrowhead=none, color="black", style=dashed]
    node8437 [shape=box, label=<<font color="black">[0] let funcEnv = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8437 -> node8438 [color="black"]
    node8438_name [shape=none, label=<<font color="black">Call[8438]</font>>]
    node8438_name -> node8438 [arrowhead=none, color="black", style=dashed]
    node8438 [shape=cds, label=<<font color="black">%2 = funcEnv-&gt;CreateImmutableBinding(name, false)</font>> color="black" fillcolor="white", style=filled]
    node8438 -> node8439 [color="black"]
    node8439_name [shape=none, label=<<font color="black">Block[8439]</font>>]
    node8439_name -> node8439 [arrowhead=none, color="black", style=dashed]
    node8439 [shape=box, label=<<font color="black">[0] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[1] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8439 -> node8440 [color="black"]
    node8440_name [shape=none, label=<<font color="black">Call[8440]</font>>]
    node8440_name -> node8440 [arrowhead=none, color="black", style=dashed]
    node8440 [shape=cds, label=<<font color="black">%3 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Function.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, funcEnv, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8440 -> node8441 [color="black"]
    node8441_name [shape=none, label=<<font color="black">Block[8441]</font>>]
    node8441_name -> node8441 [arrowhead=none, color="black", style=dashed]
    node8441 [shape=box, label=<<font color="black">[0] let closure = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8441 -> node8442 [color="black"]
    node8442_name [shape=none, label=<<font color="black">Call[8442]</font>>]
    node8442_name -> node8442 [arrowhead=none, color="black", style=dashed]
    node8442 [shape=cds, label=<<font color="black">%4 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node8442 -> node8443 [color="black"]
    node8443_name [shape=none, label=<<font color="black">Call[8443]</font>>]
    node8443_name -> node8443 [arrowhead=none, color="black", style=dashed]
    node8443 [shape=cds, label=<<font color="black">%5 = clo&lt;MakeConstructor&gt;(closure)</font>> color="black" fillcolor="white", style=filled]
    node8443 -> node8444 [color="black"]
    node8444_name [shape=none, label=<<font color="black">Call[8444]</font>>]
    node8444_name -> node8444 [arrowhead=none, color="black", style=dashed]
    node8444 [shape=cds, label=<<font color="black">%6 = funcEnv-&gt;InitializeBinding(name, closure)</font>> color="black" fillcolor="white", style=filled]
    node8444 -> node8445 [color="black"]
    node8445_name [shape=none, label=<<font color="black">Block[8445]</font>>]
    node8445_name -> node8445 [arrowhead=none, color="black", style=dashed]
    node8445 [shape=box, label=<<font color="black">[0] [! %6]<BR ALIGN="LEFT"/>[1] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8445 -> cluster1569_exit [color="black"]
  }
}