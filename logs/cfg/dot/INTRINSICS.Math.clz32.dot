digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2086 {
    label = "def <BUILTIN>:INTRINSICS.Math.clz32(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2086_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2086_entry_name -> cluster2086_entry [arrowhead=none, color="black", style=dashed]
    cluster2086_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2086_entry -> node12147 [color="black"]
    cluster2086_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2086_exit_name -> cluster2086_exit [arrowhead=none, color="black", style=dashed]
    cluster2086_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12147_name [shape=none, label=<<font color="black">Branch[12147]</font>>]
    node12147_name -> node12147 [arrowhead=none, color="black", style=dashed]
    node12147 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12147 -> node12148 [label=<<font color="black">true</font>> color="black"]
    node12147 -> node12149 [label=<<font color="black">false</font>> color="black"]
    node12148_name [shape=none, label=<<font color="black">Block[12148]</font>>]
    node12148_name -> node12148 [arrowhead=none, color="black", style=dashed]
    node12148 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12148 -> node12150 [color="black"]
    node12149_name [shape=none, label=<<font color="black">Block[12149]</font>>]
    node12149_name -> node12149 [arrowhead=none, color="black", style=dashed]
    node12149 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12149 -> node12150 [color="black"]
    node12150_name [shape=none, label=<<font color="black">Call[12150]</font>>]
    node12150_name -> node12150 [arrowhead=none, color="black", style=dashed]
    node12150 [shape=cds, label=<<font color="black">%0 = clo&lt;ToUint32&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12150 -> node12151 [color="black"]
    node12151_name [shape=none, label=<<font color="black">Block[12151]</font>>]
    node12151_name -> node12151 [arrowhead=none, color="black", style=dashed]
    node12151 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/>[1] (yet &quot;Let _p_ be the number of leading zero bits in the unsigned 32-bit binary representation of _n_.&quot;)<BR ALIGN="LEFT"/>[2] return ([number] p)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12151 -> cluster2086_exit [color="black"]
  }
}