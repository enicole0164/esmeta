digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1154 {
    label = "def <INTERNAL>:ProxyExoticObject.GetOwnProperty(O: ProxyExoticObject, P: Symbol | String): Normal[PropertyDescriptor | Undefined] | Abrupt"
    style = rounded
    cluster1154_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1154_entry_name -> cluster1154_entry [arrowhead=none, color="black", style=dashed]
    cluster1154_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1154_entry -> node5086 [color="black"]
    cluster1154_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1154_exit_name -> cluster1154_exit [arrowhead=none, color="black", style=dashed]
    cluster1154_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5086_name [shape=none, label=<<font color="black">Block[5086]</font>>]
    node5086_name -> node5086 [arrowhead=none, color="black", style=dashed]
    node5086 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5086 -> node5087 [color="black"]
    node5087_name [shape=none, label=<<font color="black">Branch[5087]</font>>]
    node5087_name -> node5087 [arrowhead=none, color="black", style=dashed]
    node5087 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5087 -> node5088 [label=<<font color="black">true</font>> color="black"]
    node5087 -> node5089 [label=<<font color="black">false</font>> color="black"]
    node5088_name [shape=none, label=<<font color="black">Block[5088]</font>>]
    node5088_name -> node5088 [arrowhead=none, color="black", style=dashed]
    node5088 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#493])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5088 -> cluster1154_exit [color="black"]
    node5089_name [shape=none, label=<<font color="black">Block[5089]</font>>]
    node5089_name -> node5089 [arrowhead=none, color="black", style=dashed]
    node5089 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5089 -> node5090 [color="black"]
    node5090_name [shape=none, label=<<font color="black">Call[5090]</font>>]
    node5090_name -> node5090 [arrowhead=none, color="black", style=dashed]
    node5090 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;getOwnPropertyDescriptor&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5090 -> node5091 [color="black"]
    node5091_name [shape=none, label=<<font color="black">Block[5091]</font>>]
    node5091_name -> node5091 [arrowhead=none, color="black", style=dashed]
    node5091 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5091 -> node5092 [color="black"]
    node5092_name [shape=none, label=<<font color="black">Branch[5092]</font>>]
    node5092_name -> node5092 [arrowhead=none, color="black", style=dashed]
    node5092 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5092 -> node5093 [label=<<font color="black">true</font>> color="black"]
    node5092 -> node5095 [label=<<font color="black">false</font>> color="black"]
    node5093_name [shape=none, label=<<font color="black">Call[5093]</font>>]
    node5093_name -> node5093 [arrowhead=none, color="black", style=dashed]
    node5093 [shape=cds, label=<<font color="black">%1 = target-&gt;GetOwnProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5093 -> node5094 [color="black"]
    node5095_name [shape=none, label=<<font color="black">Call[5095]</font>>]
    node5095_name -> node5095 [arrowhead=none, color="black", style=dashed]
    node5095 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target, P])[#494])</font>> color="black" fillcolor="white", style=filled]
    node5095 -> node5096 [color="black"]
    node5094_name [shape=none, label=<<font color="black">Block[5094]</font>>]
    node5094_name -> node5094 [arrowhead=none, color="black", style=dashed]
    node5094 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5094 -> cluster1154_exit [color="black"]
    node5096_name [shape=none, label=<<font color="black">Block[5096]</font>>]
    node5096_name -> node5096 [arrowhead=none, color="black", style=dashed]
    node5096 [shape=box, label=<<font color="black">[0] let trapResultObj = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5096 -> node5097 [color="black"]
    node5097_name [shape=none, label=<<font color="black">Branch[5097]</font>>]
    node5097_name -> node5097 [arrowhead=none, color="black", style=dashed]
    node5097 [shape=diamond, label=<<font color="black">(! (|| (= (typeof trapResultObj) @Object) (= (typeof trapResultObj) @Undefined)))</font>> color="black" fillcolor="white", style=filled]
    node5097 -> node5098 [label=<<font color="black">true</font>> color="black"]
    node5097 -> node5099 [label=<<font color="black">false</font>> color="black"]
    node5098_name [shape=none, label=<<font color="black">Block[5098]</font>>]
    node5098_name -> node5098 [arrowhead=none, color="black", style=dashed]
    node5098 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#495])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5098 -> cluster1154_exit [color="black"]
    node5099_name [shape=none, label=<<font color="black">Call[5099]</font>>]
    node5099_name -> node5099 [arrowhead=none, color="black", style=dashed]
    node5099 [shape=cds, label=<<font color="black">%3 = target-&gt;GetOwnProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5099 -> node5100 [color="black"]
    node5100_name [shape=none, label=<<font color="black">Block[5100]</font>>]
    node5100_name -> node5100 [arrowhead=none, color="black", style=dashed]
    node5100 [shape=box, label=<<font color="black">[0] let targetDesc = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5100 -> node5101 [color="black"]
    node5101_name [shape=none, label=<<font color="black">Branch[5101]</font>>]
    node5101_name -> node5101 [arrowhead=none, color="black", style=dashed]
    node5101 [shape=diamond, label=<<font color="black">(= trapResultObj undefined)</font>> color="black" fillcolor="white", style=filled]
    node5101 -> node5102 [label=<<font color="black">true</font>> color="black"]
    node5101 -> node5111 [label=<<font color="black">false</font>> color="black"]
    node5102_name [shape=none, label=<<font color="black">Branch[5102]</font>>]
    node5102_name -> node5102 [arrowhead=none, color="black", style=dashed]
    node5102 [shape=diamond, label=<<font color="black">(= targetDesc undefined)</font>> color="black" fillcolor="white", style=filled]
    node5102 -> node5103 [label=<<font color="black">true</font>> color="black"]
    node5102 -> node5104 [label=<<font color="black">false</font>> color="black"]
    node5111_name [shape=none, label=<<font color="black">Call[5111]</font>>]
    node5111_name -> node5111 [arrowhead=none, color="black", style=dashed]
    node5111 [shape=cds, label=<<font color="black">%5 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5111 -> node5112 [color="black"]
    node5103_name [shape=none, label=<<font color="black">Block[5103]</font>>]
    node5103_name -> node5103 [arrowhead=none, color="black", style=dashed]
    node5103 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5103 -> cluster1154_exit [color="black"]
    node5104_name [shape=none, label=<<font color="black">Branch[5104]</font>>]
    node5104_name -> node5104 [arrowhead=none, color="black", style=dashed]
    node5104 [shape=diamond, label=<<font color="black">(= targetDesc.Configurable false)</font>> color="black" fillcolor="white", style=filled]
    node5104 -> node5105 [label=<<font color="black">true</font>> color="black"]
    node5104 -> node5106 [label=<<font color="black">false</font>> color="black"]
    node5112_name [shape=none, label=<<font color="black">Block[5112]</font>>]
    node5112_name -> node5112 [arrowhead=none, color="black", style=dashed]
    node5112 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5112 -> node5113 [color="black"]
    node5105_name [shape=none, label=<<font color="black">Block[5105]</font>>]
    node5105_name -> node5105 [arrowhead=none, color="black", style=dashed]
    node5105 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#496])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5105 -> cluster1154_exit [color="black"]
    node5106_name [shape=none, label=<<font color="black">Call[5106]</font>>]
    node5106_name -> node5106 [arrowhead=none, color="black", style=dashed]
    node5106 [shape=cds, label=<<font color="black">%4 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5106 -> node5107 [color="black"]
    node5113_name [shape=none, label=<<font color="black">Call[5113]</font>>]
    node5113_name -> node5113 [arrowhead=none, color="black", style=dashed]
    node5113 [shape=cds, label=<<font color="black">%6 = clo&lt;ToPropertyDescriptor&gt;(trapResultObj)</font>> color="black" fillcolor="white", style=filled]
    node5113 -> node5114 [color="black"]
    node5107_name [shape=none, label=<<font color="black">Block[5107]</font>>]
    node5107_name -> node5107 [arrowhead=none, color="black", style=dashed]
    node5107 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5107 -> node5108 [color="black"]
    node5114_name [shape=none, label=<<font color="black">Block[5114]</font>>]
    node5114_name -> node5114 [arrowhead=none, color="black", style=dashed]
    node5114 [shape=box, label=<<font color="black">[0] let resultDesc = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5114 -> node5115 [color="black"]
    node5108_name [shape=none, label=<<font color="black">Branch[5108]</font>>]
    node5108_name -> node5108 [arrowhead=none, color="black", style=dashed]
    node5108 [shape=diamond, label=<<font color="black">(= extensibleTarget false)</font>> color="black" fillcolor="white", style=filled]
    node5108 -> node5109 [label=<<font color="black">true</font>> color="black"]
    node5108 -> node5110 [label=<<font color="black">false</font>> color="black"]
    node5115_name [shape=none, label=<<font color="black">Call[5115]</font>>]
    node5115_name -> node5115 [arrowhead=none, color="black", style=dashed]
    node5115 [shape=cds, label=<<font color="black">%7 = clo&lt;CompletePropertyDescriptor&gt;(resultDesc)</font>> color="black" fillcolor="white", style=filled]
    node5115 -> node5116 [color="black"]
    node5109_name [shape=none, label=<<font color="black">Block[5109]</font>>]
    node5109_name -> node5109 [arrowhead=none, color="black", style=dashed]
    node5109 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#497])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5109 -> cluster1154_exit [color="black"]
    node5110_name [shape=none, label=<<font color="black">Block[5110]</font>>]
    node5110_name -> node5110 [arrowhead=none, color="black", style=dashed]
    node5110 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5110 -> cluster1154_exit [color="black"]
    node5116_name [shape=none, label=<<font color="black">Call[5116]</font>>]
    node5116_name -> node5116 [arrowhead=none, color="black", style=dashed]
    node5116 [shape=cds, label=<<font color="black">%8 = clo&lt;IsCompatiblePropertyDescriptor&gt;(extensibleTarget, resultDesc, targetDesc)</font>> color="black" fillcolor="white", style=filled]
    node5116 -> node5117 [color="black"]
    node5117_name [shape=none, label=<<font color="black">Block[5117]</font>>]
    node5117_name -> node5117 [arrowhead=none, color="black", style=dashed]
    node5117 [shape=box, label=<<font color="black">[0] let valid = %8<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5117 -> node5118 [color="black"]
    node5118_name [shape=none, label=<<font color="black">Branch[5118]</font>>]
    node5118_name -> node5118 [arrowhead=none, color="black", style=dashed]
    node5118 [shape=diamond, label=<<font color="black">(= valid false)</font>> color="black" fillcolor="white", style=filled]
    node5118 -> node5119 [label=<<font color="black">true</font>> color="black"]
    node5118 -> node5120 [label=<<font color="black">false</font>> color="black"]
    node5119_name [shape=none, label=<<font color="black">Block[5119]</font>>]
    node5119_name -> node5119 [arrowhead=none, color="black", style=dashed]
    node5119 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#498])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5119 -> cluster1154_exit [color="black"]
    node5120_name [shape=none, label=<<font color="black">Branch[5120]</font>>]
    node5120_name -> node5120 [arrowhead=none, color="black", style=dashed]
    node5120 [shape=diamond, label=<<font color="black">(= resultDesc.Configurable false)</font>> color="black" fillcolor="white", style=filled]
    node5120 -> node5121 [label=<<font color="black">true</font>> color="black"]
    node5120 -> node5127 [label=<<font color="black">false</font>> color="black"]
    node5121_name [shape=none, label=<<font color="black">Branch[5121]</font>>]
    node5121_name -> node5121 [arrowhead=none, color="black", style=dashed]
    node5121 [shape=diamond, label=<<font color="black">(|| (= targetDesc undefined) (= targetDesc.Configurable true))</font>> color="black" fillcolor="white", style=filled]
    node5121 -> node5122 [label=<<font color="black">true</font>> color="black"]
    node5121 -> node5123 [label=<<font color="black">false</font>> color="black"]
    node5127_name [shape=none, label=<<font color="black">Block[5127]</font>>]
    node5127_name -> node5127 [arrowhead=none, color="black", style=dashed]
    node5127 [shape=box, label=<<font color="black">[0] return resultDesc<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5127 -> cluster1154_exit [color="black"]
    node5122_name [shape=none, label=<<font color="black">Block[5122]</font>>]
    node5122_name -> node5122 [arrowhead=none, color="black", style=dashed]
    node5122 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#499])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5122 -> cluster1154_exit [color="black"]
    node5123_name [shape=none, label=<<font color="black">Branch[5123]</font>>]
    node5123_name -> node5123 [arrowhead=none, color="black", style=dashed]
    node5123 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= resultDesc.Writable absent)) (= resultDesc.Writable false))</font>> color="black" fillcolor="white", style=filled]
    node5123 -> node5124 [label=<<font color="black">true</font>> color="black"]
    node5123 -> node5127 [label=<<font color="black">false</font>> color="black"]
    node5124_name [shape=none, label=<<font color="black">Block[5124]</font>>]
    node5124_name -> node5124 [arrowhead=none, color="black", style=dashed]
    node5124 [shape=box, label=<<font color="black">[0] assert (! (= targetDesc.Writable absent))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5124 -> node5125 [color="black"]
    node5125_name [shape=none, label=<<font color="black">Branch[5125]</font>>]
    node5125_name -> node5125 [arrowhead=none, color="black", style=dashed]
    node5125 [shape=diamond, label=<<font color="black">(= targetDesc.Writable true)</font>> color="black" fillcolor="white", style=filled]
    node5125 -> node5126 [label=<<font color="black">true</font>> color="black"]
    node5125 -> node5127 [label=<<font color="black">false</font>> color="black"]
    node5126_name [shape=none, label=<<font color="black">Block[5126]</font>>]
    node5126_name -> node5126 [arrowhead=none, color="black", style=dashed]
    node5126 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#500])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5126 -> cluster1154_exit [color="black"]
  }
}