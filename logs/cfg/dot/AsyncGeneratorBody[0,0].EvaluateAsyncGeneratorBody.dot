digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1610 {
    label = "def <SYNTAX>:AsyncGeneratorBody[0,0].EvaluateAsyncGeneratorBody(this: Ast:AsyncGeneratorBody[0,0], functionObject: Unknown, argumentsList: Unknown["List"]): Abrupt[return, throw]"
    style = rounded
    cluster1610_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1610_entry_name -> cluster1610_entry [arrowhead=none, color="black", style=dashed]
    cluster1610_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1610_entry -> node8727 [color="black"]
    cluster1610_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1610_exit_name -> cluster1610_exit [arrowhead=none, color="black", style=dashed]
    cluster1610_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8727_name [shape=none, label=<<font color="black">Call[8727]</font>>]
    node8727_name -> node8727 [arrowhead=none, color="black", style=dashed]
    node8727 [shape=cds, label=<<font color="black">%0 = clo&lt;FunctionDeclarationInstantiation&gt;(functionObject, argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node8727 -> node8728 [color="black"]
    node8728_name [shape=none, label=<<font color="black">Block[8728]</font>>]
    node8728_name -> node8728 [arrowhead=none, color="black", style=dashed]
    node8728 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8728 -> node8729 [color="black"]
    node8729_name [shape=none, label=<<font color="black">Call[8729]</font>>]
    node8729_name -> node8729 [arrowhead=none, color="black", style=dashed]
    node8729 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryCreateFromConstructor&gt;(functionObject, &quot;%AsyncGeneratorFunction.prototype.prototype%&quot;, (new [&quot;AsyncGeneratorState&quot;, &quot;AsyncGeneratorContext&quot;, &quot;AsyncGeneratorQueue&quot;, &quot;GeneratorBrand&quot;])[#670])</font>> color="black" fillcolor="white", style=filled]
    node8729 -> node8730 [color="black"]
    node8730_name [shape=none, label=<<font color="black">Block[8730]</font>>]
    node8730_name -> node8730 [arrowhead=none, color="black", style=dashed]
    node8730 [shape=box, label=<<font color="black">[0] let generator = [? %1]<BR ALIGN="LEFT"/>[1] generator.GeneratorBrand = ~empty~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8730 -> node8731 [color="black"]
    node8731_name [shape=none, label=<<font color="black">Call[8731]</font>>]
    node8731_name -> node8731 [arrowhead=none, color="black", style=dashed]
    node8731 [shape=cds, label=<<font color="black">%2 = clo&lt;AsyncGeneratorStart&gt;(generator, this[0])</font>> color="black" fillcolor="white", style=filled]
    node8731 -> node8732 [color="black"]
    node8732_name [shape=none, label=<<font color="black">Block[8732]</font>>]
    node8732_name -> node8732 [arrowhead=none, color="black", style=dashed]
    node8732 [shape=box, label=<<font color="black">[0] return comp[~return~/~empty~](generator)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8732 -> cluster1610_exit [color="black"]
  }
}