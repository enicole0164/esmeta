digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2245 {
    label = "def <SYNTAX>:Alternative[1,0].CompileSubpattern(this: Ast:Alternative[1,0], direction: Const[~backward~, ~forward~]): Unknown["Matcher"]"
    style = rounded
    cluster2245_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2245_entry_name -> cluster2245_entry [arrowhead=none, color="black", style=dashed]
    cluster2245_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2245_entry -> node13917 [color="black"]
    cluster2245_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2245_exit_name -> cluster2245_exit [arrowhead=none, color="black", style=dashed]
    cluster2245_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13917_name [shape=none, label=<<font color="black">Call[13917]</font>>]
    node13917_name -> node13917 [arrowhead=none, color="black", style=dashed]
    node13917 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;CompileSubpattern(direction)</font>> color="black" fillcolor="white", style=filled]
    node13917 -> node13918 [color="black"]
    node13918_name [shape=none, label=<<font color="black">Block[13918]</font>>]
    node13918_name -> node13918 [arrowhead=none, color="black", style=dashed]
    node13918 [shape=box, label=<<font color="black">[0] let m1 = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13918 -> node13919 [color="black"]
    node13919_name [shape=none, label=<<font color="black">Call[13919]</font>>]
    node13919_name -> node13919 [arrowhead=none, color="black", style=dashed]
    node13919 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;CompileSubpattern(direction)</font>> color="black" fillcolor="white", style=filled]
    node13919 -> node13920 [color="black"]
    node13920_name [shape=none, label=<<font color="black">Block[13920]</font>>]
    node13920_name -> node13920 [arrowhead=none, color="black", style=dashed]
    node13920 [shape=box, label=<<font color="black">[0] let m2 = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13920 -> node13921 [color="black"]
    node13921_name [shape=none, label=<<font color="black">Branch[13921]</font>>]
    node13921_name -> node13921 [arrowhead=none, color="black", style=dashed]
    node13921 [shape=diamond, label=<<font color="black">(= direction ~forward~)</font>> color="black" fillcolor="white", style=filled]
    node13921 -> node13922 [label=<<font color="black">true</font>> color="black"]
    node13921 -> node13923 [label=<<font color="black">false</font>> color="black"]
    node13922_name [shape=none, label=<<font color="black">Block[13922]</font>>]
    node13922_name -> node13922 [arrowhead=none, color="black", style=dashed]
    node13922 [shape=box, label=<<font color="black">[0] (yet &quot;Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m2_ and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _m2_(_y_, _c_).\n  1. Return _m1_(_x_, _d_).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13922 -> cluster2245_exit [color="black"]
    node13923_name [shape=none, label=<<font color="black">Block[13923]</font>>]
    node13923_name -> node13923 [arrowhead=none, color="black", style=dashed]
    node13923 [shape=box, label=<<font color="black">[0] assert (= direction ~backward~)<BR ALIGN="LEFT"/>[1] (yet &quot;Return a new Matcher with parameters (_x_, _c_) that captures _m1_ and _m2_ and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _d_ be a new Continuation with parameters (_y_) that captures _c_ and _m1_ and performs the following steps when called:\n    1. Assert: _y_ is a State.\n    1. Return _m1_(_y_, _c_).\n  1. Return _m2_(_x_, _d_).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13923 -> cluster2245_exit [color="black"]
  }
}