digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2179 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.matchAll(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2179_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2179_entry_name -> cluster2179_entry [arrowhead=none, color="black", style=dashed]
    cluster2179_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2179_entry -> node13466 [color="black"]
    cluster2179_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2179_exit_name -> cluster2179_exit [arrowhead=none, color="black", style=dashed]
    cluster2179_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13466_name [shape=none, label=<<font color="black">Branch[13466]</font>>]
    node13466_name -> node13466 [arrowhead=none, color="black", style=dashed]
    node13466 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13466 -> node13467 [label=<<font color="black">true</font>> color="black"]
    node13466 -> node13468 [label=<<font color="black">false</font>> color="black"]
    node13467_name [shape=none, label=<<font color="black">Block[13467]</font>>]
    node13467_name -> node13467 [arrowhead=none, color="black", style=dashed]
    node13467 [shape=box, label=<<font color="black">[0] let regexp = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13467 -> node13469 [color="black"]
    node13468_name [shape=none, label=<<font color="black">Block[13468]</font>>]
    node13468_name -> node13468 [arrowhead=none, color="black", style=dashed]
    node13468 [shape=box, label=<<font color="black">[0] let regexp = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13468 -> node13469 [color="black"]
    node13469_name [shape=none, label=<<font color="black">Call[13469]</font>>]
    node13469_name -> node13469 [arrowhead=none, color="black", style=dashed]
    node13469 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13469 -> node13470 [color="black"]
    node13470_name [shape=none, label=<<font color="black">Block[13470]</font>>]
    node13470_name -> node13470 [arrowhead=none, color="black", style=dashed]
    node13470 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13470 -> node13471 [color="black"]
    node13471_name [shape=none, label=<<font color="black">Branch[13471]</font>>]
    node13471_name -> node13471 [arrowhead=none, color="black", style=dashed]
    node13471 [shape=diamond, label=<<font color="black">(! (|| (= regexp undefined) (= regexp null)))</font>> color="black" fillcolor="white", style=filled]
    node13471 -> node13472 [label=<<font color="black">true</font>> color="black"]
    node13471 -> node13487 [label=<<font color="black">false</font>> color="black"]
    node13472_name [shape=none, label=<<font color="black">Call[13472]</font>>]
    node13472_name -> node13472 [arrowhead=none, color="black", style=dashed]
    node13472 [shape=cds, label=<<font color="black">%1 = clo&lt;IsRegExp&gt;(regexp)</font>> color="black" fillcolor="white", style=filled]
    node13472 -> node13473 [color="black"]
    node13487_name [shape=none, label=<<font color="black">Call[13487]</font>>]
    node13487_name -> node13487 [arrowhead=none, color="black", style=dashed]
    node13487 [shape=cds, label=<<font color="black">%7 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13487 -> node13488 [color="black"]
    node13473_name [shape=none, label=<<font color="black">Block[13473]</font>>]
    node13473_name -> node13473 [arrowhead=none, color="black", style=dashed]
    node13473 [shape=box, label=<<font color="black">[0] let isRegExp = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13473 -> node13474 [color="black"]
    node13488_name [shape=none, label=<<font color="black">Block[13488]</font>>]
    node13488_name -> node13488 [arrowhead=none, color="black", style=dashed]
    node13488 [shape=box, label=<<font color="black">[0] let S = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13488 -> node13489 [color="black"]
    node13474_name [shape=none, label=<<font color="black">Branch[13474]</font>>]
    node13474_name -> node13474 [arrowhead=none, color="black", style=dashed]
    node13474 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white", style=filled]
    node13474 -> node13475 [label=<<font color="black">true</font>> color="black"]
    node13474 -> node13482 [label=<<font color="black">false</font>> color="black"]
    node13489_name [shape=none, label=<<font color="black">Call[13489]</font>>]
    node13489_name -> node13489 [arrowhead=none, color="black", style=dashed]
    node13489 [shape=cds, label=<<font color="black">%8 = clo&lt;RegExpCreate&gt;(regexp, &quot;g&quot;)</font>> color="black" fillcolor="white", style=filled]
    node13489 -> node13490 [color="black"]
    node13475_name [shape=none, label=<<font color="black">Call[13475]</font>>]
    node13475_name -> node13475 [arrowhead=none, color="black", style=dashed]
    node13475 [shape=cds, label=<<font color="black">%2 = clo&lt;Get&gt;(regexp, &quot;flags&quot;)</font>> color="black" fillcolor="white", style=filled]
    node13475 -> node13476 [color="black"]
    node13482_name [shape=none, label=<<font color="black">Call[13482]</font>>]
    node13482_name -> node13482 [arrowhead=none, color="black", style=dashed]
    node13482 [shape=cds, label=<<font color="black">%5 = clo&lt;GetMethod&gt;(regexp, @SYMBOL.matchAll)</font>> color="black" fillcolor="white", style=filled]
    node13482 -> node13483 [color="black"]
    node13490_name [shape=none, label=<<font color="black">Block[13490]</font>>]
    node13490_name -> node13490 [arrowhead=none, color="black", style=dashed]
    node13490 [shape=box, label=<<font color="black">[0] let rx = [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13490 -> node13491 [color="black"]
    node13476_name [shape=none, label=<<font color="black">Block[13476]</font>>]
    node13476_name -> node13476 [arrowhead=none, color="black", style=dashed]
    node13476 [shape=box, label=<<font color="black">[0] let flags = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13476 -> node13477 [color="black"]
    node13483_name [shape=none, label=<<font color="black">Block[13483]</font>>]
    node13483_name -> node13483 [arrowhead=none, color="black", style=dashed]
    node13483 [shape=box, label=<<font color="black">[0] let matcher = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13483 -> node13484 [color="black"]
    node13491_name [shape=none, label=<<font color="black">Call[13491]</font>>]
    node13491_name -> node13491 [arrowhead=none, color="black", style=dashed]
    node13491 [shape=cds, label=<<font color="black">%9 = clo&lt;Invoke&gt;(rx, @SYMBOL.matchAll, (new [S])[#953])</font>> color="black" fillcolor="white", style=filled]
    node13491 -> node13492 [color="black"]
    node13477_name [shape=none, label=<<font color="black">Call[13477]</font>>]
    node13477_name -> node13477 [arrowhead=none, color="black", style=dashed]
    node13477 [shape=cds, label=<<font color="black">%3 = clo&lt;RequireObjectCoercible&gt;(flags)</font>> color="black" fillcolor="white", style=filled]
    node13477 -> node13478 [color="black"]
    node13484_name [shape=none, label=<<font color="black">Branch[13484]</font>>]
    node13484_name -> node13484 [arrowhead=none, color="black", style=dashed]
    node13484 [shape=diamond, label=<<font color="black">(! (= matcher undefined))</font>> color="black" fillcolor="white", style=filled]
    node13484 -> node13485 [label=<<font color="black">true</font>> color="black"]
    node13484 -> node13487 [label=<<font color="black">false</font>> color="black"]
    node13492_name [shape=none, label=<<font color="black">Block[13492]</font>>]
    node13492_name -> node13492 [arrowhead=none, color="black", style=dashed]
    node13492 [shape=box, label=<<font color="black">[0] return [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13492 -> cluster2179_exit [color="black"]
    node13478_name [shape=none, label=<<font color="black">Block[13478]</font>>]
    node13478_name -> node13478 [arrowhead=none, color="black", style=dashed]
    node13478 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13478 -> node13479 [color="black"]
    node13485_name [shape=none, label=<<font color="black">Call[13485]</font>>]
    node13485_name -> node13485 [arrowhead=none, color="black", style=dashed]
    node13485 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(matcher, regexp, (new [O])[#952])</font>> color="black" fillcolor="white", style=filled]
    node13485 -> node13486 [color="black"]
    node13479_name [shape=none, label=<<font color="black">Call[13479]</font>>]
    node13479_name -> node13479 [arrowhead=none, color="black", style=dashed]
    node13479 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(flags)</font>> color="black" fillcolor="white", style=filled]
    node13479 -> node13480 [color="black"]
    node13486_name [shape=none, label=<<font color="black">Block[13486]</font>>]
    node13486_name -> node13486 [arrowhead=none, color="black", style=dashed]
    node13486 [shape=box, label=<<font color="black">[0] return [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13486 -> cluster2179_exit [color="black"]
    node13480_name [shape=none, label=<<font color="black">Branch[13480]</font>>]
    node13480_name -> node13480 [arrowhead=none, color="black", style=dashed]
    node13480 [shape=diamond, label=<<font color="black">(! (contains [? %4] &quot;g&quot;))</font>> color="black" fillcolor="white", style=filled]
    node13480 -> node13481 [label=<<font color="black">true</font>> color="black"]
    node13480 -> node13482 [label=<<font color="black">false</font>> color="black"]
    node13481_name [shape=none, label=<<font color="black">Block[13481]</font>>]
    node13481_name -> node13481 [arrowhead=none, color="black", style=dashed]
    node13481 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#951])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13481 -> cluster2179_exit [color="black"]
  }
}