digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2304 {
    label = "def <BUILTIN>:INTRINSICS.RegExp(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2304_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2304_entry_name -> cluster2304_entry [arrowhead=none, color="black", style=dashed]
    cluster2304_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2304_entry -> node14085 [color="black"]
    cluster2304_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2304_exit_name -> cluster2304_exit [arrowhead=none, color="black", style=dashed]
    cluster2304_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14085_name [shape=none, label=<<font color="black">Branch[14085]</font>>]
    node14085_name -> node14085 [arrowhead=none, color="black", style=dashed]
    node14085 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node14085 -> node14086 [label=<<font color="black">true</font>> color="black"]
    node14085 -> node14087 [label=<<font color="black">false</font>> color="black"]
    node14086_name [shape=none, label=<<font color="black">Block[14086]</font>>]
    node14086_name -> node14086 [arrowhead=none, color="black", style=dashed]
    node14086 [shape=box, label=<<font color="black">[0] let pattern = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14086 -> node14088 [color="black"]
    node14087_name [shape=none, label=<<font color="black">Block[14087]</font>>]
    node14087_name -> node14087 [arrowhead=none, color="black", style=dashed]
    node14087 [shape=box, label=<<font color="black">[0] let pattern = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14087 -> node14088 [color="black"]
    node14088_name [shape=none, label=<<font color="black">Branch[14088]</font>>]
    node14088_name -> node14088 [arrowhead=none, color="black", style=dashed]
    node14088 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node14088 -> node14089 [label=<<font color="black">true</font>> color="black"]
    node14088 -> node14090 [label=<<font color="black">false</font>> color="black"]
    node14089_name [shape=none, label=<<font color="black">Block[14089]</font>>]
    node14089_name -> node14089 [arrowhead=none, color="black", style=dashed]
    node14089 [shape=box, label=<<font color="black">[0] let flags = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14089 -> node14091 [color="black"]
    node14090_name [shape=none, label=<<font color="black">Block[14090]</font>>]
    node14090_name -> node14090 [arrowhead=none, color="black", style=dashed]
    node14090 [shape=box, label=<<font color="black">[0] let flags = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14090 -> node14091 [color="black"]
    node14091_name [shape=none, label=<<font color="black">Call[14091]</font>>]
    node14091_name -> node14091 [arrowhead=none, color="black", style=dashed]
    node14091 [shape=cds, label=<<font color="black">%0 = clo&lt;IsRegExp&gt;(pattern)</font>> color="black" fillcolor="white", style=filled]
    node14091 -> node14092 [color="black"]
    node14092_name [shape=none, label=<<font color="black">Block[14092]</font>>]
    node14092_name -> node14092 [arrowhead=none, color="black", style=dashed]
    node14092 [shape=box, label=<<font color="black">[0] let patternIsRegExp = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14092 -> node14093 [color="black"]
    node14093_name [shape=none, label=<<font color="black">Branch[14093]</font>>]
    node14093_name -> node14093 [arrowhead=none, color="black", style=dashed]
    node14093 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node14093 -> node14094 [label=<<font color="black">true</font>> color="black"]
    node14093 -> node14101 [label=<<font color="black">false</font>> color="black"]
    node14094_name [shape=none, label=<<font color="black">Block[14094]</font>>]
    node14094_name -> node14094 [arrowhead=none, color="black", style=dashed]
    node14094 [shape=box, label=<<font color="black">[0] let newTarget = @EXECUTION_STACK[0].Function<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14094 -> node14095 [color="black"]
    node14101_name [shape=none, label=<<font color="black">Block[14101]</font>>]
    node14101_name -> node14101 [arrowhead=none, color="black", style=dashed]
    node14101 [shape=box, label=<<font color="black">[0] let newTarget = NewTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14101 -> node14102 [color="black"]
    node14095_name [shape=none, label=<<font color="black">Branch[14095]</font>>]
    node14095_name -> node14095 [arrowhead=none, color="black", style=dashed]
    node14095 [shape=diamond, label=<<font color="black">(&amp;&amp; (= patternIsRegExp true) (= flags undefined))</font>> color="black" fillcolor="white", style=filled]
    node14095 -> node14096 [label=<<font color="black">true</font>> color="black"]
    node14095 -> node14102 [label=<<font color="black">false</font>> color="black"]
    node14102_name [shape=none, label=<<font color="black">Branch[14102]</font>>]
    node14102_name -> node14102 [arrowhead=none, color="black", style=dashed]
    node14102 [shape=diamond, label=<<font color="black">(&amp;&amp; (= (typeof pattern) @Object) (! (= pattern.RegExpMatcher absent)))</font>> color="black" fillcolor="white", style=filled]
    node14102 -> node14103 [label=<<font color="black">true</font>> color="black"]
    node14102 -> node14107 [label=<<font color="black">false</font>> color="black"]
    node14096_name [shape=none, label=<<font color="black">Call[14096]</font>>]
    node14096_name -> node14096 [arrowhead=none, color="black", style=dashed]
    node14096 [shape=cds, label=<<font color="black">%1 = clo&lt;Get&gt;(pattern, &quot;constructor&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14096 -> node14097 [color="black"]
    node14103_name [shape=none, label=<<font color="black">Block[14103]</font>>]
    node14103_name -> node14103 [arrowhead=none, color="black", style=dashed]
    node14103 [shape=box, label=<<font color="black">[0] let P = pattern.OriginalSource<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14103 -> node14104 [color="black"]
    node14107_name [shape=none, label=<<font color="black">Branch[14107]</font>>]
    node14107_name -> node14107 [arrowhead=none, color="black", style=dashed]
    node14107 [shape=diamond, label=<<font color="black">(= patternIsRegExp true)</font>> color="black" fillcolor="white", style=filled]
    node14107 -> node14108 [label=<<font color="black">true</font>> color="black"]
    node14107 -> node14114 [label=<<font color="black">false</font>> color="black"]
    node14097_name [shape=none, label=<<font color="black">Block[14097]</font>>]
    node14097_name -> node14097 [arrowhead=none, color="black", style=dashed]
    node14097 [shape=box, label=<<font color="black">[0] let patternConstructor = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14097 -> node14098 [color="black"]
    node14104_name [shape=none, label=<<font color="black">Branch[14104]</font>>]
    node14104_name -> node14104 [arrowhead=none, color="black", style=dashed]
    node14104 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white", style=filled]
    node14104 -> node14105 [label=<<font color="black">true</font>> color="black"]
    node14104 -> node14106 [label=<<font color="black">false</font>> color="black"]
    node14108_name [shape=none, label=<<font color="black">Call[14108]</font>>]
    node14108_name -> node14108 [arrowhead=none, color="black", style=dashed]
    node14108 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(pattern, &quot;source&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14108 -> node14109 [color="black"]
    node14114_name [shape=none, label=<<font color="black">Block[14114]</font>>]
    node14114_name -> node14114 [arrowhead=none, color="black", style=dashed]
    node14114 [shape=box, label=<<font color="black">[0] let P = pattern<BR ALIGN="LEFT"/>[1] let F = flags<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14114 -> node14115 [color="black"]
    node14098_name [shape=none, label=<<font color="black">Call[14098]</font>>]
    node14098_name -> node14098 [arrowhead=none, color="black", style=dashed]
    node14098 [shape=cds, label=<<font color="black">%2 = clo&lt;SameValue&gt;(newTarget, patternConstructor)</font>> color="black" fillcolor="white", style=filled]
    node14098 -> node14099 [color="black"]
    node14105_name [shape=none, label=<<font color="black">Block[14105]</font>>]
    node14105_name -> node14105 [arrowhead=none, color="black", style=dashed]
    node14105 [shape=box, label=<<font color="black">[0] let F = pattern.OriginalFlags<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14105 -> node14115 [color="black"]
    node14106_name [shape=none, label=<<font color="black">Block[14106]</font>>]
    node14106_name -> node14106 [arrowhead=none, color="black", style=dashed]
    node14106 [shape=box, label=<<font color="black">[0] let F = flags<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14106 -> node14115 [color="black"]
    node14109_name [shape=none, label=<<font color="black">Block[14109]</font>>]
    node14109_name -> node14109 [arrowhead=none, color="black", style=dashed]
    node14109 [shape=box, label=<<font color="black">[0] let P = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14109 -> node14110 [color="black"]
    node14115_name [shape=none, label=<<font color="black">Call[14115]</font>>]
    node14115_name -> node14115 [arrowhead=none, color="black", style=dashed]
    node14115 [shape=cds, label=<<font color="black">%5 = clo&lt;RegExpAlloc&gt;(newTarget)</font>> color="black" fillcolor="white", style=filled]
    node14115 -> node14116 [color="black"]
    node14099_name [shape=none, label=<<font color="black">Branch[14099]</font>>]
    node14099_name -> node14099 [arrowhead=none, color="black", style=dashed]
    node14099 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node14099 -> node14100 [label=<<font color="black">true</font>> color="black"]
    node14099 -> node14102 [label=<<font color="black">false</font>> color="black"]
    node14110_name [shape=none, label=<<font color="black">Branch[14110]</font>>]
    node14110_name -> node14110 [arrowhead=none, color="black", style=dashed]
    node14110 [shape=diamond, label=<<font color="black">(= flags undefined)</font>> color="black" fillcolor="white", style=filled]
    node14110 -> node14111 [label=<<font color="black">true</font>> color="black"]
    node14110 -> node14113 [label=<<font color="black">false</font>> color="black"]
    node14116_name [shape=none, label=<<font color="black">Block[14116]</font>>]
    node14116_name -> node14116 [arrowhead=none, color="black", style=dashed]
    node14116 [shape=box, label=<<font color="black">[0] let O = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14116 -> node14117 [color="black"]
    node14100_name [shape=none, label=<<font color="black">Block[14100]</font>>]
    node14100_name -> node14100 [arrowhead=none, color="black", style=dashed]
    node14100 [shape=box, label=<<font color="black">[0] return pattern<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14100 -> cluster2304_exit [color="black"]
    node14111_name [shape=none, label=<<font color="black">Call[14111]</font>>]
    node14111_name -> node14111 [arrowhead=none, color="black", style=dashed]
    node14111 [shape=cds, label=<<font color="black">%4 = clo&lt;Get&gt;(pattern, &quot;flags&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14111 -> node14112 [color="black"]
    node14113_name [shape=none, label=<<font color="black">Block[14113]</font>>]
    node14113_name -> node14113 [arrowhead=none, color="black", style=dashed]
    node14113 [shape=box, label=<<font color="black">[0] let F = flags<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14113 -> node14115 [color="black"]
    node14117_name [shape=none, label=<<font color="black">Call[14117]</font>>]
    node14117_name -> node14117 [arrowhead=none, color="black", style=dashed]
    node14117 [shape=cds, label=<<font color="black">%6 = clo&lt;RegExpInitialize&gt;(O, P, F)</font>> color="black" fillcolor="white", style=filled]
    node14117 -> node14118 [color="black"]
    node14112_name [shape=none, label=<<font color="black">Block[14112]</font>>]
    node14112_name -> node14112 [arrowhead=none, color="black", style=dashed]
    node14112 [shape=box, label=<<font color="black">[0] let F = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14112 -> node14115 [color="black"]
    node14118_name [shape=none, label=<<font color="black">Block[14118]</font>>]
    node14118_name -> node14118 [arrowhead=none, color="black", style=dashed]
    node14118 [shape=box, label=<<font color="black">[0] return [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14118 -> cluster2304_exit [color="black"]
  }
}