digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2073 {
    label = "def thisBigIntValue(value: Unknown): Unknown"
    style = rounded
    cluster2073_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2073_entry_name -> cluster2073_entry [arrowhead=none, color="black", style=dashed]
    cluster2073_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2073_entry -> node11977 [color="black"]
    cluster2073_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2073_exit_name -> cluster2073_exit [arrowhead=none, color="black", style=dashed]
    cluster2073_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11977_name [shape=none, label=<<font color="black">Branch[11977]</font>>]
    node11977_name -> node11977 [arrowhead=none, color="black", style=dashed]
    node11977 [shape=diamond, label=<<font color="black">(= (typeof value) @BigInt)</font>> color="black" fillcolor="white", style=filled]
    node11977 -> node11978 [label=<<font color="black">true</font>> color="black"]
    node11977 -> node11979 [label=<<font color="black">false</font>> color="black"]
    node11978_name [shape=none, label=<<font color="black">Block[11978]</font>>]
    node11978_name -> node11978 [arrowhead=none, color="black", style=dashed]
    node11978 [shape=box, label=<<font color="black">[0] return value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11978 -> cluster2073_exit [color="black"]
    node11979_name [shape=none, label=<<font color="black">Branch[11979]</font>>]
    node11979_name -> node11979 [arrowhead=none, color="black", style=dashed]
    node11979 [shape=diamond, label=<<font color="black">(&amp;&amp; (= (typeof value) @Object) (! (= value.BigIntData absent)))</font>> color="black" fillcolor="white", style=filled]
    node11979 -> node11980 [label=<<font color="black">true</font>> color="black"]
    node11979 -> node11981 [label=<<font color="black">false</font>> color="black"]
    node11980_name [shape=none, label=<<font color="black">Block[11980]</font>>]
    node11980_name -> node11980 [arrowhead=none, color="black", style=dashed]
    node11980 [shape=box, label=<<font color="black">[0] assert (= (typeof value.BigIntData) @BigInt)<BR ALIGN="LEFT"/>[1] return value.BigIntData<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11980 -> cluster2073_exit [color="black"]
    node11981_name [shape=none, label=<<font color="black">Block[11981]</font>>]
    node11981_name -> node11981 [arrowhead=none, color="black", style=dashed]
    node11981 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#933])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11981 -> cluster2073_exit [color="black"]
  }
}