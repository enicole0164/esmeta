digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2000 {
    label = "def <BUILTIN>:INTRINSICS.Object.defineProperty(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2000_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2000_entry_name -> cluster2000_entry [arrowhead=none, color="black", style=dashed]
    cluster2000_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2000_entry -> node11110 [color="black"]
    cluster2000_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2000_exit_name -> cluster2000_exit [arrowhead=none, color="black", style=dashed]
    cluster2000_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11110_name [shape=none, label=<<font color="black">Branch[11110]</font>>]
    node11110_name -> node11110 [arrowhead=none, color="black", style=dashed]
    node11110 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11110 -> node11111 [label=<<font color="black">true</font>> color="black"]
    node11110 -> node11112 [label=<<font color="black">false</font>> color="black"]
    node11111_name [shape=none, label=<<font color="black">Block[11111]</font>>]
    node11111_name -> node11111 [arrowhead=none, color="black", style=dashed]
    node11111 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11111 -> node11113 [color="black"]
    node11112_name [shape=none, label=<<font color="black">Block[11112]</font>>]
    node11112_name -> node11112 [arrowhead=none, color="black", style=dashed]
    node11112 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11112 -> node11113 [color="black"]
    node11113_name [shape=none, label=<<font color="black">Branch[11113]</font>>]
    node11113_name -> node11113 [arrowhead=none, color="black", style=dashed]
    node11113 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11113 -> node11114 [label=<<font color="black">true</font>> color="black"]
    node11113 -> node11115 [label=<<font color="black">false</font>> color="black"]
    node11114_name [shape=none, label=<<font color="black">Block[11114]</font>>]
    node11114_name -> node11114 [arrowhead=none, color="black", style=dashed]
    node11114 [shape=box, label=<<font color="black">[0] let P = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11114 -> node11116 [color="black"]
    node11115_name [shape=none, label=<<font color="black">Block[11115]</font>>]
    node11115_name -> node11115 [arrowhead=none, color="black", style=dashed]
    node11115 [shape=box, label=<<font color="black">[0] let P = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11115 -> node11116 [color="black"]
    node11116_name [shape=none, label=<<font color="black">Branch[11116]</font>>]
    node11116_name -> node11116 [arrowhead=none, color="black", style=dashed]
    node11116 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11116 -> node11117 [label=<<font color="black">true</font>> color="black"]
    node11116 -> node11118 [label=<<font color="black">false</font>> color="black"]
    node11117_name [shape=none, label=<<font color="black">Block[11117]</font>>]
    node11117_name -> node11117 [arrowhead=none, color="black", style=dashed]
    node11117 [shape=box, label=<<font color="black">[0] let Attributes = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11117 -> node11119 [color="black"]
    node11118_name [shape=none, label=<<font color="black">Block[11118]</font>>]
    node11118_name -> node11118 [arrowhead=none, color="black", style=dashed]
    node11118 [shape=box, label=<<font color="black">[0] let Attributes = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11118 -> node11119 [color="black"]
    node11119_name [shape=none, label=<<font color="black">Branch[11119]</font>>]
    node11119_name -> node11119 [arrowhead=none, color="black", style=dashed]
    node11119 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node11119 -> node11120 [label=<<font color="black">true</font>> color="black"]
    node11119 -> node11121 [label=<<font color="black">false</font>> color="black"]
    node11120_name [shape=none, label=<<font color="black">Block[11120]</font>>]
    node11120_name -> node11120 [arrowhead=none, color="black", style=dashed]
    node11120 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#892])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11120 -> cluster2000_exit [color="black"]
    node11121_name [shape=none, label=<<font color="black">Call[11121]</font>>]
    node11121_name -> node11121 [arrowhead=none, color="black", style=dashed]
    node11121 [shape=cds, label=<<font color="black">%0 = clo&lt;ToPropertyKey&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node11121 -> node11122 [color="black"]
    node11122_name [shape=none, label=<<font color="black">Block[11122]</font>>]
    node11122_name -> node11122 [arrowhead=none, color="black", style=dashed]
    node11122 [shape=box, label=<<font color="black">[0] let key = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11122 -> node11123 [color="black"]
    node11123_name [shape=none, label=<<font color="black">Call[11123]</font>>]
    node11123_name -> node11123 [arrowhead=none, color="black", style=dashed]
    node11123 [shape=cds, label=<<font color="black">%1 = clo&lt;ToPropertyDescriptor&gt;(Attributes)</font>> color="black" fillcolor="white", style=filled]
    node11123 -> node11124 [color="black"]
    node11124_name [shape=none, label=<<font color="black">Block[11124]</font>>]
    node11124_name -> node11124 [arrowhead=none, color="black", style=dashed]
    node11124 [shape=box, label=<<font color="black">[0] let desc = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11124 -> node11125 [color="black"]
    node11125_name [shape=none, label=<<font color="black">Call[11125]</font>>]
    node11125_name -> node11125 [arrowhead=none, color="black", style=dashed]
    node11125 [shape=cds, label=<<font color="black">%2 = clo&lt;DefinePropertyOrThrow&gt;(O, key, desc)</font>> color="black" fillcolor="white", style=filled]
    node11125 -> node11126 [color="black"]
    node11126_name [shape=none, label=<<font color="black">Block[11126]</font>>]
    node11126_name -> node11126 [arrowhead=none, color="black", style=dashed]
    node11126 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/>[1] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11126 -> cluster2000_exit [color="black"]
  }
}