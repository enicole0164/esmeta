digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2165 {
    label = "def <BUILTIN>:INTRINSICS.String.fromCodePoint(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2165_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2165_entry_name -> cluster2165_entry [arrowhead=none, color="black", style=dashed]
    cluster2165_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2165_entry -> node13231 [color="black"]
    cluster2165_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2165_exit_name -> cluster2165_exit [arrowhead=none, color="black", style=dashed]
    cluster2165_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13231_name [shape=none, label=<<font color="black">Block[13231]</font>>]
    node13231_name -> node13231 [arrowhead=none, color="black", style=dashed]
    node13231 [shape=box, label=<<font color="black">[0] let codePoints = argumentsList<BR ALIGN="LEFT"/>[1] let result = &quot;&quot;<BR ALIGN="LEFT"/>[2] %1 = codePoints<BR ALIGN="LEFT"/>[3] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13231 -> node13232 [color="black"]
    node13232_name [shape=none, label=<<font color="black">Branch[13232]</font>>]
    node13232_name -> node13232 [arrowhead=none, color="black", style=dashed]
    node13232 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node13232 -> node13233 [label=<<font color="black">true</font>> color="black"]
    node13232 -> node13243 [label=<<font color="black">false</font>> color="black"]
    node13233_name [shape=none, label=<<font color="black">Block[13233]</font>>]
    node13233_name -> node13233 [arrowhead=none, color="black", style=dashed]
    node13233 [shape=box, label=<<font color="black">[0] let next = %1[%0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13233 -> node13234 [color="black"]
    node13243_name [shape=none, label=<<font color="black">Block[13243]</font>>]
    node13243_name -> node13243 [arrowhead=none, color="black", style=dashed]
    node13243 [shape=box, label=<<font color="black">[0] assert (|| (! (= codePoints.length 0)) (= result &quot;&quot;))<BR ALIGN="LEFT"/>[1] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13243 -> cluster2165_exit [color="black"]
    node13234_name [shape=none, label=<<font color="black">Call[13234]</font>>]
    node13234_name -> node13234 [arrowhead=none, color="black", style=dashed]
    node13234 [shape=cds, label=<<font color="black">%2 = clo&lt;ToNumber&gt;(next)</font>> color="black" fillcolor="white", style=filled]
    node13234 -> node13235 [color="black"]
    node13235_name [shape=none, label=<<font color="black">Block[13235]</font>>]
    node13235_name -> node13235 [arrowhead=none, color="black", style=dashed]
    node13235 [shape=box, label=<<font color="black">[0] let nextCP = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13235 -> node13236 [color="black"]
    node13236_name [shape=none, label=<<font color="black">Call[13236]</font>>]
    node13236_name -> node13236 [arrowhead=none, color="black", style=dashed]
    node13236 [shape=cds, label=<<font color="black">%3 = clo&lt;IsIntegralNumber&gt;(nextCP)</font>> color="black" fillcolor="white", style=filled]
    node13236 -> node13237 [color="black"]
    node13237_name [shape=none, label=<<font color="black">Branch[13237]</font>>]
    node13237_name -> node13237 [arrowhead=none, color="black", style=dashed]
    node13237 [shape=diamond, label=<<font color="black">(= %3 false)</font>> color="black" fillcolor="white", style=filled]
    node13237 -> node13238 [label=<<font color="black">true</font>> color="black"]
    node13237 -> node13239 [label=<<font color="black">false</font>> color="black"]
    node13238_name [shape=none, label=<<font color="black">Block[13238]</font>>]
    node13238_name -> node13238 [arrowhead=none, color="black", style=dashed]
    node13238 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#943])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13238 -> cluster2165_exit [color="black"]
    node13239_name [shape=none, label=<<font color="black">Branch[13239]</font>>]
    node13239_name -> node13239 [arrowhead=none, color="black", style=dashed]
    node13239 [shape=diamond, label=<<font color="black">(|| (&lt; ([math] nextCP) 0) (&lt; 1114111 ([math] nextCP)))</font>> color="black" fillcolor="white", style=filled]
    node13239 -> node13240 [label=<<font color="black">true</font>> color="black"]
    node13239 -> node13241 [label=<<font color="black">false</font>> color="black"]
    node13240_name [shape=none, label=<<font color="black">Block[13240]</font>>]
    node13240_name -> node13240 [arrowhead=none, color="black", style=dashed]
    node13240 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#944])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13240 -> cluster2165_exit [color="black"]
    node13241_name [shape=none, label=<<font color="black">Call[13241]</font>>]
    node13241_name -> node13241 [arrowhead=none, color="black", style=dashed]
    node13241 [shape=cds, label=<<font color="black">%4 = clo&lt;UTF16EncodeCodePoint&gt;(([math] nextCP))</font>> color="black" fillcolor="white", style=filled]
    node13241 -> node13242 [color="black"]
    node13242_name [shape=none, label=<<font color="black">Block[13242]</font>>]
    node13242_name -> node13242 [arrowhead=none, color="black", style=dashed]
    node13242 [shape=box, label=<<font color="black">[0] result = (concat result %4)<BR ALIGN="LEFT"/>[1] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13242 -> node13232 [color="black"]
  }
}