digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1886 {
    label = "def InnerModuleLinking(module: ModuleRecord, stack: Unknown, index: Unknown["NonnegativeInteger"]): Unknown["EitherANormalCompletionContainingANonnegativeIntegerOrAnAbruptCompletion"]"
    style = rounded
    cluster1886_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1886_entry_name -> cluster1886_entry [arrowhead=none, color="black", style=dashed]
    cluster1886_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1886_entry -> node10109 [color="black"]
    cluster1886_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1886_exit_name -> cluster1886_exit [arrowhead=none, color="black", style=dashed]
    cluster1886_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10109_name [shape=none, label=<<font color="black">Branch[10109]</font>>]
    node10109_name -> node10109 [arrowhead=none, color="black", style=dashed]
    node10109 [shape=diamond, label=<<font color="black">(! (? module: &quot;CyclicModuleRecord&quot;))</font>> color="black" fillcolor="white", style=filled]
    node10109 -> node10110 [label=<<font color="black">true</font>> color="black"]
    node10109 -> node10112 [label=<<font color="black">false</font>> color="black"]
    node10110_name [shape=none, label=<<font color="black">Call[10110]</font>>]
    node10110_name -> node10110 [arrowhead=none, color="black", style=dashed]
    node10110 [shape=cds, label=<<font color="black">%0 = module-&gt;Link()</font>> color="black" fillcolor="white", style=filled]
    node10110 -> node10111 [color="black"]
    node10112_name [shape=none, label=<<font color="black">Branch[10112]</font>>]
    node10112_name -> node10112 [arrowhead=none, color="black", style=dashed]
    node10112 [shape=diamond, label=<<font color="black">(|| (|| (|| (= module.Status ~linking~) (= module.Status ~linked~)) (= module.Status ~evaluating-async~)) (= module.Status ~evaluated~))</font>> color="black" fillcolor="white", style=filled]
    node10112 -> node10113 [label=<<font color="black">true</font>> color="black"]
    node10112 -> node10114 [label=<<font color="black">false</font>> color="black"]
    node10111_name [shape=none, label=<<font color="black">Block[10111]</font>>]
    node10111_name -> node10111 [arrowhead=none, color="black", style=dashed]
    node10111 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] return index<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10111 -> cluster1886_exit [color="black"]
    node10113_name [shape=none, label=<<font color="black">Block[10113]</font>>]
    node10113_name -> node10113 [arrowhead=none, color="black", style=dashed]
    node10113 [shape=box, label=<<font color="black">[0] return index<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10113 -> cluster1886_exit [color="black"]
    node10114_name [shape=none, label=<<font color="black">Block[10114]</font>>]
    node10114_name -> node10114 [arrowhead=none, color="black", style=dashed]
    node10114 [shape=box, label=<<font color="black">[0] assert (= module.Status ~unlinked~)<BR ALIGN="LEFT"/>[1] module.Status = ~linking~<BR ALIGN="LEFT"/>[2] module.DFSIndex = index<BR ALIGN="LEFT"/>[3] module.DFSAncestorIndex = index<BR ALIGN="LEFT"/>[4] index = (+ index 1)<BR ALIGN="LEFT"/>[5] push stack &lt; module<BR ALIGN="LEFT"/>[6] %2 = module.RequestedModules<BR ALIGN="LEFT"/>[7] %1 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10114 -> node10115 [color="black"]
    node10115_name [shape=none, label=<<font color="black">Branch[10115]</font>>]
    node10115_name -> node10115 [arrowhead=none, color="black", style=dashed]
    node10115 [shape=diamond, label=<<font color="black">(&lt; %1 %2.length)</font>> color="black" fillcolor="white", style=filled]
    node10115 -> node10116 [label=<<font color="black">true</font>> color="black"]
    node10115 -> node10126 [label=<<font color="black">false</font>> color="black"]
    node10116_name [shape=none, label=<<font color="black">Block[10116]</font>>]
    node10116_name -> node10116 [arrowhead=none, color="black", style=dashed]
    node10116 [shape=box, label=<<font color="black">[0] let required = %2[%1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10116 -> node10117 [color="black"]
    node10126_name [shape=none, label=<<font color="black">Call[10126]</font>>]
    node10126_name -> node10126 [arrowhead=none, color="black", style=dashed]
    node10126 [shape=cds, label=<<font color="black">%5 = module-&gt;InitializeEnvironment()</font>> color="black" fillcolor="white", style=filled]
    node10126 -> node10127 [color="black"]
    node10117_name [shape=none, label=<<font color="black">Call[10117]</font>>]
    node10117_name -> node10117 [arrowhead=none, color="black", style=dashed]
    node10117 [shape=cds, label=<<font color="black">%3 = clo&lt;HostResolveImportedModule&gt;(module, required)</font>> color="black" fillcolor="white", style=filled]
    node10117 -> node10118 [color="black"]
    node10127_name [shape=none, label=<<font color="black">Block[10127]</font>>]
    node10127_name -> node10127 [arrowhead=none, color="black", style=dashed]
    node10127 [shape=box, label=<<font color="black">[0] [? %5]<BR ALIGN="LEFT"/>[1] assert (yet &quot;_module_ occurs exactly once in _stack_.&quot;)<BR ALIGN="LEFT"/>[2] assert (! (&lt; module.DFSIndex module.DFSAncestorIndex))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10127 -> node10128 [color="black"]
    node10118_name [shape=none, label=<<font color="black">Block[10118]</font>>]
    node10118_name -> node10118 [arrowhead=none, color="black", style=dashed]
    node10118 [shape=box, label=<<font color="black">[0] let requiredModule = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10118 -> node10119 [color="black"]
    node10128_name [shape=none, label=<<font color="black">Branch[10128]</font>>]
    node10128_name -> node10128 [arrowhead=none, color="black", style=dashed]
    node10128 [shape=diamond, label=<<font color="black">(== module.DFSAncestorIndex module.DFSIndex)</font>> color="black" fillcolor="white", style=filled]
    node10128 -> node10129 [label=<<font color="black">true</font>> color="black"]
    node10128 -> node10134 [label=<<font color="black">false</font>> color="black"]
    node10119_name [shape=none, label=<<font color="black">Call[10119]</font>>]
    node10119_name -> node10119 [arrowhead=none, color="black", style=dashed]
    node10119 [shape=cds, label=<<font color="black">%4 = clo&lt;InnerModuleLinking&gt;(requiredModule, stack, index)</font>> color="black" fillcolor="white", style=filled]
    node10119 -> node10120 [color="black"]
    node10129_name [shape=none, label=<<font color="black">Block[10129]</font>>]
    node10129_name -> node10129 [arrowhead=none, color="black", style=dashed]
    node10129 [shape=box, label=<<font color="black">[0] let done = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10129 -> node10130 [color="black"]
    node10134_name [shape=none, label=<<font color="black">Block[10134]</font>>]
    node10134_name -> node10134 [arrowhead=none, color="black", style=dashed]
    node10134 [shape=box, label=<<font color="black">[0] return index<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10134 -> cluster1886_exit [color="black"]
    node10120_name [shape=none, label=<<font color="black">Block[10120]</font>>]
    node10120_name -> node10120 [arrowhead=none, color="black", style=dashed]
    node10120 [shape=box, label=<<font color="black">[0] index = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10120 -> node10121 [color="black"]
    node10130_name [shape=none, label=<<font color="black">Branch[10130]</font>>]
    node10130_name -> node10130 [arrowhead=none, color="black", style=dashed]
    node10130 [shape=diamond, label=<<font color="black">(= done false)</font>> color="black" fillcolor="white", style=filled]
    node10130 -> node10131 [label=<<font color="black">true</font>> color="black"]
    node10130 -> node10134 [label=<<font color="black">false</font>> color="black"]
    node10121_name [shape=none, label=<<font color="black">Branch[10121]</font>>]
    node10121_name -> node10121 [arrowhead=none, color="black", style=dashed]
    node10121 [shape=diamond, label=<<font color="black">(? requiredModule: &quot;CyclicModuleRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10121 -> node10122 [label=<<font color="black">true</font>> color="black"]
    node10121 -> node10125 [label=<<font color="black">false</font>> color="black"]
    node10131_name [shape=none, label=<<font color="black">Block[10131]</font>>]
    node10131_name -> node10131 [arrowhead=none, color="black", style=dashed]
    node10131 [shape=box, label=<<font color="black">[0] (yet &quot;Let _requiredModule_ be the last element in _stack_.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Remove the last element of _stack_.&quot;)<BR ALIGN="LEFT"/>[2] assert (? requiredModule: &quot;CyclicModuleRecord&quot;)<BR ALIGN="LEFT"/>[3] requiredModule.Status = ~linked~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10131 -> node10132 [color="black"]
    node10122_name [shape=none, label=<<font color="black">Block[10122]</font>>]
    node10122_name -> node10122 [arrowhead=none, color="black", style=dashed]
    node10122 [shape=box, label=<<font color="black">[0] assert (|| (|| (|| (= requiredModule.Status ~linking~) (= requiredModule.Status ~linked~)) (= requiredModule.Status ~evaluating-async~)) (= requiredModule.Status ~evaluated~))<BR ALIGN="LEFT"/>[1] assert (yet &quot;_requiredModule_.[[Status]] is ~linking~ if and only if _requiredModule_ is in _stack_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10122 -> node10123 [color="black"]
    node10125_name [shape=none, label=<<font color="black">Block[10125]</font>>]
    node10125_name -> node10125 [arrowhead=none, color="black", style=dashed]
    node10125 [shape=box, label=<<font color="black">[0] %1 = (+ %1 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10125 -> node10115 [color="black"]
    node10132_name [shape=none, label=<<font color="black">Branch[10132]</font>>]
    node10132_name -> node10132 [arrowhead=none, color="black", style=dashed]
    node10132 [shape=diamond, label=<<font color="black">(= requiredModule module)</font>> color="black" fillcolor="white", style=filled]
    node10132 -> node10133 [label=<<font color="black">true</font>> color="black"]
    node10132 -> node10130 [label=<<font color="black">false</font>> color="black"]
    node10123_name [shape=none, label=<<font color="black">Branch[10123]</font>>]
    node10123_name -> node10123 [arrowhead=none, color="black", style=dashed]
    node10123 [shape=diamond, label=<<font color="black">(= requiredModule.Status ~linking~)</font>> color="black" fillcolor="white", style=filled]
    node10123 -> node10124 [label=<<font color="black">true</font>> color="black"]
    node10123 -> node10125 [label=<<font color="black">false</font>> color="black"]
    node10133_name [shape=none, label=<<font color="black">Block[10133]</font>>]
    node10133_name -> node10133 [arrowhead=none, color="black", style=dashed]
    node10133 [shape=box, label=<<font color="black">[0] done = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10133 -> node10130 [color="black"]
    node10124_name [shape=none, label=<<font color="black">Block[10124]</font>>]
    node10124_name -> node10124 [arrowhead=none, color="black", style=dashed]
    node10124 [shape=box, label=<<font color="black">[0] module.DFSAncestorIndex = (min module.DFSAncestorIndex requiredModule.DFSAncestorIndex)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10124 -> node10125 [color="black"]
  }
}