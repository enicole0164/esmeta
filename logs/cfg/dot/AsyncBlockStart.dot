digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2645 {
    label = "def AsyncBlockStart(promiseCapability: PromiseCapabilityRecord, asyncBody: Ast, asyncContext: ExecutionContext): Const[~unused~]"
    style = rounded
    cluster2645_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2645_entry_name -> cluster2645_entry [arrowhead=none, color="black", style=dashed]
    cluster2645_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2645_entry -> node19630 [color="black"]
    cluster2645_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2645_exit_name -> cluster2645_exit [arrowhead=none, color="black", style=dashed]
    cluster2645_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19630_name [shape=none, label=<<font color="black">Block[19630]</font>>]
    node19630_name -> node19630 [arrowhead=none, color="black", style=dashed]
    node19630 [shape=box, label=<<font color="black">[0] assert (? promiseCapability: &quot;PromiseCapabilityRecord&quot;)<BR ALIGN="LEFT"/>[1] let runningContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/>[2] asyncContext.ResumeCont = cont&lt;AsyncBlockStart:cont0&gt;<BR ALIGN="LEFT"/>[3] push asyncContext &gt; @EXECUTION_STACK<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19630 -> node19631 [color="black"]
    node19631_name [shape=none, label=<<font color="black">Branch[19631]</font>>]
    node19631_name -> node19631 [arrowhead=none, color="black", style=dashed]
    node19631 [shape=diamond, label=<<font color="black">(= asyncContext.ReturnCont absent)</font>> color="black" fillcolor="white", style=filled]
    node19631 -> node19632 [label=<<font color="black">true</font>> color="black"]
    node19631 -> node19633 [label=<<font color="black">false</font>> color="black"]
    node19632_name [shape=none, label=<<font color="black">Block[19632]</font>>]
    node19632_name -> node19632 [arrowhead=none, color="black", style=dashed]
    node19632 [shape=box, label=<<font color="black">[0] asyncContext.ReturnCont = (new [])[#1342]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19632 -> node19633 [color="black"]
    node19633_name [shape=none, label=<<font color="black">Block[19633]</font>>]
    node19633_name -> node19633 [arrowhead=none, color="black", style=dashed]
    node19633 [shape=box, label=<<font color="black">[0] push cont&lt;AsyncBlockStart:cont1&gt; &gt; asyncContext.ReturnCont<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19633 -> node19634 [color="black"]
    node19634_name [shape=none, label=<<font color="black">Call[19634]</font>>]
    node19634_name -> node19634 [arrowhead=none, color="black", style=dashed]
    node19634 [shape=cds, label=<<font color="black">%0 = asyncContext.ResumeCont()</font>> color="black" fillcolor="white", style=filled]
    node19634 -> cluster2645_exit [color="black"]
  }
}