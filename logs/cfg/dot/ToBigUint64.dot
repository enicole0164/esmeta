digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster109 {
    label = "def ToBigUint64(argument: Unknown): Normal[BigInt] | Abrupt"
    style = rounded
    cluster109_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster109_entry_name -> cluster109_entry [arrowhead=none, color="black", style=dashed]
    cluster109_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster109_entry -> node840 [color="black"]
    cluster109_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster109_exit_name -> cluster109_exit [arrowhead=none, color="black", style=dashed]
    cluster109_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node840_name [shape=none, label=<<font color="black">Call[840]</font>>]
    node840_name -> node840 [arrowhead=none, color="black", style=dashed]
    node840 [shape=cds, label=<<font color="black">%0 = clo&lt;ToBigInt&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node840 -> node841 [color="black"]
    node841_name [shape=none, label=<<font color="black">Block[841]</font>>]
    node841_name -> node841 [arrowhead=none, color="black", style=dashed]
    node841 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/>[1] let int64bit = (% ([math] n) (** 2 64))<BR ALIGN="LEFT"/>[2] return ([bigInt] int64bit)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node841 -> cluster109_exit [color="black"]
  }
}