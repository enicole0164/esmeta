digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1287 {
    label = "def <SYNTAX>:OptionalExpression[2,0].Evaluation(this: Ast:OptionalExpression[2,0]): Unknown"
    style = rounded
    cluster1287_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1287_entry_name -> cluster1287_entry [arrowhead=none, color="black", style=dashed]
    cluster1287_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1287_entry -> node6036 [color="black"]
    cluster1287_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1287_exit_name -> cluster1287_exit [arrowhead=none, color="black", style=dashed]
    cluster1287_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6036_name [shape=none, label=<<font color="black">Call[6036]</font>>]
    node6036_name -> node6036 [arrowhead=none, color="black", style=dashed]
    node6036 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6036 -> node6037 [color="black"]
    node6037_name [shape=none, label=<<font color="black">Block[6037]</font>>]
    node6037_name -> node6037 [arrowhead=none, color="black", style=dashed]
    node6037 [shape=box, label=<<font color="black">[0] let baseReference = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6037 -> node6038 [color="black"]
    node6038_name [shape=none, label=<<font color="black">Call[6038]</font>>]
    node6038_name -> node6038 [arrowhead=none, color="black", style=dashed]
    node6038 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(baseReference)</font>> color="black" fillcolor="white", style=filled]
    node6038 -> node6039 [color="black"]
    node6039_name [shape=none, label=<<font color="black">Block[6039]</font>>]
    node6039_name -> node6039 [arrowhead=none, color="black", style=dashed]
    node6039 [shape=box, label=<<font color="black">[0] let baseValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6039 -> node6040 [color="black"]
    node6040_name [shape=none, label=<<font color="black">Branch[6040]</font>>]
    node6040_name -> node6040 [arrowhead=none, color="black", style=dashed]
    node6040 [shape=diamond, label=<<font color="black">(|| (= baseValue undefined) (= baseValue null))</font>> color="black" fillcolor="white", style=filled]
    node6040 -> node6041 [label=<<font color="black">true</font>> color="black"]
    node6040 -> node6042 [label=<<font color="black">false</font>> color="black"]
    node6041_name [shape=none, label=<<font color="black">Block[6041]</font>>]
    node6041_name -> node6041 [arrowhead=none, color="black", style=dashed]
    node6041 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6041 -> cluster1287_exit [color="black"]
    node6042_name [shape=none, label=<<font color="black">Call[6042]</font>>]
    node6042_name -> node6042 [arrowhead=none, color="black", style=dashed]
    node6042 [shape=cds, label=<<font color="black">%2 = this[1]-&gt;ChainEvaluation(baseValue, baseReference)</font>> color="black" fillcolor="white", style=filled]
    node6042 -> node6043 [color="black"]
    node6043_name [shape=none, label=<<font color="black">Block[6043]</font>>]
    node6043_name -> node6043 [arrowhead=none, color="black", style=dashed]
    node6043 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6043 -> cluster1287_exit [color="black"]
  }
}