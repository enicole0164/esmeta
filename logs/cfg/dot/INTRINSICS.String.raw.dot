digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2166 {
    label = "def <BUILTIN>:INTRINSICS.String.raw(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2166_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2166_entry_name -> cluster2166_entry [arrowhead=none, color="black", style=dashed]
    cluster2166_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2166_entry -> node13244 [color="black"]
    cluster2166_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2166_exit_name -> cluster2166_exit [arrowhead=none, color="black", style=dashed]
    cluster2166_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13244_name [shape=none, label=<<font color="black">Branch[13244]</font>>]
    node13244_name -> node13244 [arrowhead=none, color="black", style=dashed]
    node13244 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13244 -> node13245 [label=<<font color="black">true</font>> color="black"]
    node13244 -> node13246 [label=<<font color="black">false</font>> color="black"]
    node13245_name [shape=none, label=<<font color="black">Block[13245]</font>>]
    node13245_name -> node13245 [arrowhead=none, color="black", style=dashed]
    node13245 [shape=box, label=<<font color="black">[0] let template = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13245 -> node13247 [color="black"]
    node13246_name [shape=none, label=<<font color="black">Block[13246]</font>>]
    node13246_name -> node13246 [arrowhead=none, color="black", style=dashed]
    node13246 [shape=box, label=<<font color="black">[0] let template = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13246 -> node13247 [color="black"]
    node13247_name [shape=none, label=<<font color="black">Block[13247]</font>>]
    node13247_name -> node13247 [arrowhead=none, color="black", style=dashed]
    node13247 [shape=box, label=<<font color="black">[0] let substitutions = argumentsList<BR ALIGN="LEFT"/>[1] let numberOfSubstitutions = substitutions.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13247 -> node13248 [color="black"]
    node13248_name [shape=none, label=<<font color="black">Call[13248]</font>>]
    node13248_name -> node13248 [arrowhead=none, color="black", style=dashed]
    node13248 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(template)</font>> color="black" fillcolor="white", style=filled]
    node13248 -> node13249 [color="black"]
    node13249_name [shape=none, label=<<font color="black">Block[13249]</font>>]
    node13249_name -> node13249 [arrowhead=none, color="black", style=dashed]
    node13249 [shape=box, label=<<font color="black">[0] let cooked = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13249 -> node13250 [color="black"]
    node13250_name [shape=none, label=<<font color="black">Call[13250]</font>>]
    node13250_name -> node13250 [arrowhead=none, color="black", style=dashed]
    node13250 [shape=cds, label=<<font color="black">%1 = clo&lt;Get&gt;(cooked, &quot;raw&quot;)</font>> color="black" fillcolor="white", style=filled]
    node13250 -> node13251 [color="black"]
    node13251_name [shape=none, label=<<font color="black">Call[13251]</font>>]
    node13251_name -> node13251 [arrowhead=none, color="black", style=dashed]
    node13251 [shape=cds, label=<<font color="black">%2 = clo&lt;ToObject&gt;([? %1])</font>> color="black" fillcolor="white", style=filled]
    node13251 -> node13252 [color="black"]
    node13252_name [shape=none, label=<<font color="black">Block[13252]</font>>]
    node13252_name -> node13252 [arrowhead=none, color="black", style=dashed]
    node13252 [shape=box, label=<<font color="black">[0] let raw = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13252 -> node13253 [color="black"]
    node13253_name [shape=none, label=<<font color="black">Call[13253]</font>>]
    node13253_name -> node13253 [arrowhead=none, color="black", style=dashed]
    node13253 [shape=cds, label=<<font color="black">%3 = clo&lt;LengthOfArrayLike&gt;(raw)</font>> color="black" fillcolor="white", style=filled]
    node13253 -> node13254 [color="black"]
    node13254_name [shape=none, label=<<font color="black">Block[13254]</font>>]
    node13254_name -> node13254 [arrowhead=none, color="black", style=dashed]
    node13254 [shape=box, label=<<font color="black">[0] let literalSegments = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13254 -> node13255 [color="black"]
    node13255_name [shape=none, label=<<font color="black">Branch[13255]</font>>]
    node13255_name -> node13255 [arrowhead=none, color="black", style=dashed]
    node13255 [shape=diamond, label=<<font color="black">(! (&lt; 0 literalSegments))</font>> color="black" fillcolor="white", style=filled]
    node13255 -> node13256 [label=<<font color="black">true</font>> color="black"]
    node13255 -> node13257 [label=<<font color="black">false</font>> color="black"]
    node13256_name [shape=none, label=<<font color="black">Block[13256]</font>>]
    node13256_name -> node13256 [arrowhead=none, color="black", style=dashed]
    node13256 [shape=box, label=<<font color="black">[0] return &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13256 -> cluster2166_exit [color="black"]
    node13257_name [shape=none, label=<<font color="black">Block[13257]</font>>]
    node13257_name -> node13257 [arrowhead=none, color="black", style=dashed]
    node13257 [shape=box, label=<<font color="black">[0] let stringElements = (new [])[#945]<BR ALIGN="LEFT"/>[1] let nextIndex = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13257 -> node13258 [color="black"]
    node13258_name [shape=none, label=<<font color="black">Branch[13258]</font>>]
    node13258_name -> node13258 [arrowhead=none, color="black", style=dashed]
    node13258 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node13258 -> node13259 [label=<<font color="black">true</font>> color="black"]
    node13259_name [shape=none, label=<<font color="black">Call[13259]</font>>]
    node13259_name -> node13259 [arrowhead=none, color="black", style=dashed]
    node13259 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(([number] nextIndex))</font>> color="black" fillcolor="white", style=filled]
    node13259 -> node13260 [color="black"]
    node13260_name [shape=none, label=<<font color="black">Block[13260]</font>>]
    node13260_name -> node13260 [arrowhead=none, color="black", style=dashed]
    node13260 [shape=box, label=<<font color="black">[0] let nextKey = [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13260 -> node13261 [color="black"]
    node13261_name [shape=none, label=<<font color="black">Call[13261]</font>>]
    node13261_name -> node13261 [arrowhead=none, color="black", style=dashed]
    node13261 [shape=cds, label=<<font color="black">%5 = clo&lt;Get&gt;(raw, nextKey)</font>> color="black" fillcolor="white", style=filled]
    node13261 -> node13262 [color="black"]
    node13262_name [shape=none, label=<<font color="black">Call[13262]</font>>]
    node13262_name -> node13262 [arrowhead=none, color="black", style=dashed]
    node13262 [shape=cds, label=<<font color="black">%6 = clo&lt;ToString&gt;([? %5])</font>> color="black" fillcolor="white", style=filled]
    node13262 -> node13263 [color="black"]
    node13263_name [shape=none, label=<<font color="black">Block[13263]</font>>]
    node13263_name -> node13263 [arrowhead=none, color="black", style=dashed]
    node13263 [shape=box, label=<<font color="black">[0] let nextSeg = [? %6]<BR ALIGN="LEFT"/>[1] (yet &quot;Append the code unit elements of _nextSeg_ to the end of _stringElements_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13263 -> node13264 [color="black"]
    node13264_name [shape=none, label=<<font color="black">Branch[13264]</font>>]
    node13264_name -> node13264 [arrowhead=none, color="black", style=dashed]
    node13264 [shape=diamond, label=<<font color="black">(== (+ nextIndex 1) literalSegments)</font>> color="black" fillcolor="white", style=filled]
    node13264 -> node13265 [label=<<font color="black">true</font>> color="black"]
    node13264 -> node13266 [label=<<font color="black">false</font>> color="black"]
    node13265_name [shape=none, label=<<font color="black">Block[13265]</font>>]
    node13265_name -> node13265 [arrowhead=none, color="black", style=dashed]
    node13265 [shape=box, label=<<font color="black">[0] (yet &quot;Return the String value whose code units are the elements in the List _stringElements_. If _stringElements_ has no elements, the empty String is returned.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13265 -> node13266 [color="black"]
    node13266_name [shape=none, label=<<font color="black">Branch[13266]</font>>]
    node13266_name -> node13266 [arrowhead=none, color="black", style=dashed]
    node13266 [shape=diamond, label=<<font color="black">(&lt; nextIndex numberOfSubstitutions)</font>> color="black" fillcolor="white", style=filled]
    node13266 -> node13267 [label=<<font color="black">true</font>> color="black"]
    node13266 -> node13268 [label=<<font color="black">false</font>> color="black"]
    node13267_name [shape=none, label=<<font color="black">Block[13267]</font>>]
    node13267_name -> node13267 [arrowhead=none, color="black", style=dashed]
    node13267 [shape=box, label=<<font color="black">[0] let next = substitutions[nextIndex]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13267 -> node13269 [color="black"]
    node13268_name [shape=none, label=<<font color="black">Block[13268]</font>>]
    node13268_name -> node13268 [arrowhead=none, color="black", style=dashed]
    node13268 [shape=box, label=<<font color="black">[0] let next = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13268 -> node13269 [color="black"]
    node13269_name [shape=none, label=<<font color="black">Call[13269]</font>>]
    node13269_name -> node13269 [arrowhead=none, color="black", style=dashed]
    node13269 [shape=cds, label=<<font color="black">%7 = clo&lt;ToString&gt;(next)</font>> color="black" fillcolor="white", style=filled]
    node13269 -> node13270 [color="black"]
    node13270_name [shape=none, label=<<font color="black">Block[13270]</font>>]
    node13270_name -> node13270 [arrowhead=none, color="black", style=dashed]
    node13270 [shape=box, label=<<font color="black">[0] let nextSub = [? %7]<BR ALIGN="LEFT"/>[1] (yet &quot;Append the code unit elements of _nextSub_ to the end of _stringElements_.&quot;)<BR ALIGN="LEFT"/>[2] nextIndex = (+ nextIndex 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13270 -> node13258 [color="black"]
  }
}