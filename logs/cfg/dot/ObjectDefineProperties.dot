digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1999 {
    label = "def ObjectDefineProperties(O: Object, Properties: Unknown): Normal[Object] | Abrupt"
    style = rounded
    cluster1999_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1999_entry_name -> cluster1999_entry [arrowhead=none, color="black", style=dashed]
    cluster1999_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1999_entry -> node11090 [color="black"]
    cluster1999_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1999_exit_name -> cluster1999_exit [arrowhead=none, color="black", style=dashed]
    cluster1999_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11090_name [shape=none, label=<<font color="black">Call[11090]</font>>]
    node11090_name -> node11090 [arrowhead=none, color="black", style=dashed]
    node11090 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(Properties)</font>> color="black" fillcolor="white", style=filled]
    node11090 -> node11091 [color="black"]
    node11091_name [shape=none, label=<<font color="black">Block[11091]</font>>]
    node11091_name -> node11091 [arrowhead=none, color="black", style=dashed]
    node11091 [shape=box, label=<<font color="black">[0] let props = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11091 -> node11092 [color="black"]
    node11092_name [shape=none, label=<<font color="black">Call[11092]</font>>]
    node11092_name -> node11092 [arrowhead=none, color="black", style=dashed]
    node11092 [shape=cds, label=<<font color="black">%1 = props-&gt;OwnPropertyKeys()</font>> color="black" fillcolor="white", style=filled]
    node11092 -> node11093 [color="black"]
    node11093_name [shape=none, label=<<font color="black">Block[11093]</font>>]
    node11093_name -> node11093 [arrowhead=none, color="black", style=dashed]
    node11093 [shape=box, label=<<font color="black">[0] let keys = [? %1]<BR ALIGN="LEFT"/>[1] let descriptors = (new [])[#890]<BR ALIGN="LEFT"/>[2] %3 = keys<BR ALIGN="LEFT"/>[3] %2 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11093 -> node11094 [color="black"]
    node11094_name [shape=none, label=<<font color="black">Branch[11094]</font>>]
    node11094_name -> node11094 [arrowhead=none, color="black", style=dashed]
    node11094 [shape=diamond, label=<<font color="black">(&lt; %2 %3.length)</font>> color="black" fillcolor="white", style=filled]
    node11094 -> node11095 [label=<<font color="black">true</font>> color="black"]
    node11094 -> node11104 [label=<<font color="black">false</font>> color="black"]
    node11095_name [shape=none, label=<<font color="black">Block[11095]</font>>]
    node11095_name -> node11095 [arrowhead=none, color="black", style=dashed]
    node11095 [shape=box, label=<<font color="black">[0] let nextKey = %3[%2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11095 -> node11096 [color="black"]
    node11104_name [shape=none, label=<<font color="black">Block[11104]</font>>]
    node11104_name -> node11104 [arrowhead=none, color="black", style=dashed]
    node11104 [shape=box, label=<<font color="black">[0] %8 = descriptors<BR ALIGN="LEFT"/>[1] %7 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11104 -> node11105 [color="black"]
    node11096_name [shape=none, label=<<font color="black">Call[11096]</font>>]
    node11096_name -> node11096 [arrowhead=none, color="black", style=dashed]
    node11096 [shape=cds, label=<<font color="black">%4 = props-&gt;GetOwnProperty(nextKey)</font>> color="black" fillcolor="white", style=filled]
    node11096 -> node11097 [color="black"]
    node11105_name [shape=none, label=<<font color="black">Branch[11105]</font>>]
    node11105_name -> node11105 [arrowhead=none, color="black", style=dashed]
    node11105 [shape=diamond, label=<<font color="black">(&lt; %7 %8.length)</font>> color="black" fillcolor="white", style=filled]
    node11105 -> node11106 [label=<<font color="black">true</font>> color="black"]
    node11105 -> node11109 [label=<<font color="black">false</font>> color="black"]
    node11097_name [shape=none, label=<<font color="black">Block[11097]</font>>]
    node11097_name -> node11097 [arrowhead=none, color="black", style=dashed]
    node11097 [shape=box, label=<<font color="black">[0] let propDesc = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11097 -> node11098 [color="black"]
    node11106_name [shape=none, label=<<font color="black">Block[11106]</font>>]
    node11106_name -> node11106 [arrowhead=none, color="black", style=dashed]
    node11106 [shape=box, label=<<font color="black">[0] let pair = %8[%7]<BR ALIGN="LEFT"/>[1] let P = pair[0]<BR ALIGN="LEFT"/>[2] let desc = pair[1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11106 -> node11107 [color="black"]
    node11109_name [shape=none, label=<<font color="black">Block[11109]</font>>]
    node11109_name -> node11109 [arrowhead=none, color="black", style=dashed]
    node11109 [shape=box, label=<<font color="black">[0] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11109 -> cluster1999_exit [color="black"]
    node11098_name [shape=none, label=<<font color="black">Branch[11098]</font>>]
    node11098_name -> node11098 [arrowhead=none, color="black", style=dashed]
    node11098 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= propDesc undefined)) (= propDesc.Enumerable true))</font>> color="black" fillcolor="white", style=filled]
    node11098 -> node11099 [label=<<font color="black">true</font>> color="black"]
    node11098 -> node11103 [label=<<font color="black">false</font>> color="black"]
    node11107_name [shape=none, label=<<font color="black">Call[11107]</font>>]
    node11107_name -> node11107 [arrowhead=none, color="black", style=dashed]
    node11107 [shape=cds, label=<<font color="black">%9 = clo&lt;DefinePropertyOrThrow&gt;(O, P, desc)</font>> color="black" fillcolor="white", style=filled]
    node11107 -> node11108 [color="black"]
    node11099_name [shape=none, label=<<font color="black">Call[11099]</font>>]
    node11099_name -> node11099 [arrowhead=none, color="black", style=dashed]
    node11099 [shape=cds, label=<<font color="black">%5 = clo&lt;Get&gt;(props, nextKey)</font>> color="black" fillcolor="white", style=filled]
    node11099 -> node11100 [color="black"]
    node11103_name [shape=none, label=<<font color="black">Block[11103]</font>>]
    node11103_name -> node11103 [arrowhead=none, color="black", style=dashed]
    node11103 [shape=box, label=<<font color="black">[0] %2 = (+ %2 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11103 -> node11094 [color="black"]
    node11108_name [shape=none, label=<<font color="black">Block[11108]</font>>]
    node11108_name -> node11108 [arrowhead=none, color="black", style=dashed]
    node11108 [shape=box, label=<<font color="black">[0] [? %9]<BR ALIGN="LEFT"/>[1] %7 = (+ %7 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11108 -> node11105 [color="black"]
    node11100_name [shape=none, label=<<font color="black">Block[11100]</font>>]
    node11100_name -> node11100 [arrowhead=none, color="black", style=dashed]
    node11100 [shape=box, label=<<font color="black">[0] let descObj = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11100 -> node11101 [color="black"]
    node11101_name [shape=none, label=<<font color="black">Call[11101]</font>>]
    node11101_name -> node11101 [arrowhead=none, color="black", style=dashed]
    node11101 [shape=cds, label=<<font color="black">%6 = clo&lt;ToPropertyDescriptor&gt;(descObj)</font>> color="black" fillcolor="white", style=filled]
    node11101 -> node11102 [color="black"]
    node11102_name [shape=none, label=<<font color="black">Block[11102]</font>>]
    node11102_name -> node11102 [arrowhead=none, color="black", style=dashed]
    node11102 [shape=box, label=<<font color="black">[0] let desc = [? %6]<BR ALIGN="LEFT"/>[1] push descriptors &lt; (new [nextKey, desc])[#891]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11102 -> node11103 [color="black"]
  }
}