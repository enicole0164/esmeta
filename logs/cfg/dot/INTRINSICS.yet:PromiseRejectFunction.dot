digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2568 {
    label = "def <BUILTIN>:INTRINSICS.yet:PromiseRejectFunction(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2568_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2568_entry_name -> cluster2568_entry [arrowhead=none, color="black", style=dashed]
    cluster2568_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2568_entry -> node18695 [color="black"]
    cluster2568_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2568_exit_name -> cluster2568_exit [arrowhead=none, color="black", style=dashed]
    cluster2568_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18695_name [shape=none, label=<<font color="black">Branch[18695]</font>>]
    node18695_name -> node18695 [arrowhead=none, color="black", style=dashed]
    node18695 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18695 -> node18696 [label=<<font color="black">true</font>> color="black"]
    node18695 -> node18697 [label=<<font color="black">false</font>> color="black"]
    node18696_name [shape=none, label=<<font color="black">Block[18696]</font>>]
    node18696_name -> node18696 [arrowhead=none, color="black", style=dashed]
    node18696 [shape=box, label=<<font color="black">[0] let reason = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18696 -> node18698 [color="black"]
    node18697_name [shape=none, label=<<font color="black">Block[18697]</font>>]
    node18697_name -> node18697 [arrowhead=none, color="black", style=dashed]
    node18697 [shape=box, label=<<font color="black">[0] let reason = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18697 -> node18698 [color="black"]
    node18698_name [shape=none, label=<<font color="black">Block[18698]</font>>]
    node18698_name -> node18698 [arrowhead=none, color="black", style=dashed]
    node18698 [shape=box, label=<<font color="black">[0] let F = @EXECUTION_STACK[0].Function<BR ALIGN="LEFT"/>[1] assert (&amp;&amp; (! (= F.Promise absent)) (? F.Promise: &quot;Object&quot;))<BR ALIGN="LEFT"/>[2] let promise = F.Promise<BR ALIGN="LEFT"/>[3] let alreadyResolved = F.AlreadyResolved<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18698 -> node18699 [color="black"]
    node18699_name [shape=none, label=<<font color="black">Branch[18699]</font>>]
    node18699_name -> node18699 [arrowhead=none, color="black", style=dashed]
    node18699 [shape=diamond, label=<<font color="black">(= alreadyResolved.Value true)</font>> color="black" fillcolor="white", style=filled]
    node18699 -> node18700 [label=<<font color="black">true</font>> color="black"]
    node18699 -> node18701 [label=<<font color="black">false</font>> color="black"]
    node18700_name [shape=none, label=<<font color="black">Block[18700]</font>>]
    node18700_name -> node18700 [arrowhead=none, color="black", style=dashed]
    node18700 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18700 -> cluster2568_exit [color="black"]
    node18701_name [shape=none, label=<<font color="black">Block[18701]</font>>]
    node18701_name -> node18701 [arrowhead=none, color="black", style=dashed]
    node18701 [shape=box, label=<<font color="black">[0] alreadyResolved.Value = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18701 -> node18702 [color="black"]
    node18702_name [shape=none, label=<<font color="black">Call[18702]</font>>]
    node18702_name -> node18702 [arrowhead=none, color="black", style=dashed]
    node18702 [shape=cds, label=<<font color="black">%0 = clo&lt;RejectPromise&gt;(promise, reason)</font>> color="black" fillcolor="white", style=filled]
    node18702 -> node18703 [color="black"]
    node18703_name [shape=none, label=<<font color="black">Block[18703]</font>>]
    node18703_name -> node18703 [arrowhead=none, color="black", style=dashed]
    node18703 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18703 -> cluster2568_exit [color="black"]
  }
}