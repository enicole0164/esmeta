digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2019 {
    label = "def <BUILTIN>:INTRINSICS.Object.setPrototypeOf(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2019_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2019_entry_name -> cluster2019_entry [arrowhead=none, color="black", style=dashed]
    cluster2019_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2019_entry -> node11300 [color="black"]
    cluster2019_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2019_exit_name -> cluster2019_exit [arrowhead=none, color="black", style=dashed]
    cluster2019_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11300_name [shape=none, label=<<font color="black">Branch[11300]</font>>]
    node11300_name -> node11300 [arrowhead=none, color="black", style=dashed]
    node11300 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11300 -> node11301 [label=<<font color="black">true</font>> color="black"]
    node11300 -> node11302 [label=<<font color="black">false</font>> color="black"]
    node11301_name [shape=none, label=<<font color="black">Block[11301]</font>>]
    node11301_name -> node11301 [arrowhead=none, color="black", style=dashed]
    node11301 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11301 -> node11303 [color="black"]
    node11302_name [shape=none, label=<<font color="black">Block[11302]</font>>]
    node11302_name -> node11302 [arrowhead=none, color="black", style=dashed]
    node11302 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11302 -> node11303 [color="black"]
    node11303_name [shape=none, label=<<font color="black">Branch[11303]</font>>]
    node11303_name -> node11303 [arrowhead=none, color="black", style=dashed]
    node11303 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11303 -> node11304 [label=<<font color="black">true</font>> color="black"]
    node11303 -> node11305 [label=<<font color="black">false</font>> color="black"]
    node11304_name [shape=none, label=<<font color="black">Block[11304]</font>>]
    node11304_name -> node11304 [arrowhead=none, color="black", style=dashed]
    node11304 [shape=box, label=<<font color="black">[0] let proto = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11304 -> node11306 [color="black"]
    node11305_name [shape=none, label=<<font color="black">Block[11305]</font>>]
    node11305_name -> node11305 [arrowhead=none, color="black", style=dashed]
    node11305 [shape=box, label=<<font color="black">[0] let proto = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11305 -> node11306 [color="black"]
    node11306_name [shape=none, label=<<font color="black">Call[11306]</font>>]
    node11306_name -> node11306 [arrowhead=none, color="black", style=dashed]
    node11306 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node11306 -> node11307 [color="black"]
    node11307_name [shape=none, label=<<font color="black">Block[11307]</font>>]
    node11307_name -> node11307 [arrowhead=none, color="black", style=dashed]
    node11307 [shape=box, label=<<font color="black">[0] O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11307 -> node11308 [color="black"]
    node11308_name [shape=none, label=<<font color="black">Branch[11308]</font>>]
    node11308_name -> node11308 [arrowhead=none, color="black", style=dashed]
    node11308 [shape=diamond, label=<<font color="black">(! (|| (= (typeof proto) @Object) (= (typeof proto) @Null)))</font>> color="black" fillcolor="white", style=filled]
    node11308 -> node11309 [label=<<font color="black">true</font>> color="black"]
    node11308 -> node11310 [label=<<font color="black">false</font>> color="black"]
    node11309_name [shape=none, label=<<font color="black">Block[11309]</font>>]
    node11309_name -> node11309 [arrowhead=none, color="black", style=dashed]
    node11309 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#898])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11309 -> cluster2019_exit [color="black"]
    node11310_name [shape=none, label=<<font color="black">Branch[11310]</font>>]
    node11310_name -> node11310 [arrowhead=none, color="black", style=dashed]
    node11310 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node11310 -> node11311 [label=<<font color="black">true</font>> color="black"]
    node11310 -> node11312 [label=<<font color="black">false</font>> color="black"]
    node11311_name [shape=none, label=<<font color="black">Block[11311]</font>>]
    node11311_name -> node11311 [arrowhead=none, color="black", style=dashed]
    node11311 [shape=box, label=<<font color="black">[0] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11311 -> cluster2019_exit [color="black"]
    node11312_name [shape=none, label=<<font color="black">Call[11312]</font>>]
    node11312_name -> node11312 [arrowhead=none, color="black", style=dashed]
    node11312 [shape=cds, label=<<font color="black">%1 = O-&gt;SetPrototypeOf(proto)</font>> color="black" fillcolor="white", style=filled]
    node11312 -> node11313 [color="black"]
    node11313_name [shape=none, label=<<font color="black">Block[11313]</font>>]
    node11313_name -> node11313 [arrowhead=none, color="black", style=dashed]
    node11313 [shape=box, label=<<font color="black">[0] let status = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11313 -> node11314 [color="black"]
    node11314_name [shape=none, label=<<font color="black">Branch[11314]</font>>]
    node11314_name -> node11314 [arrowhead=none, color="black", style=dashed]
    node11314 [shape=diamond, label=<<font color="black">(= status false)</font>> color="black" fillcolor="white", style=filled]
    node11314 -> node11315 [label=<<font color="black">true</font>> color="black"]
    node11314 -> node11316 [label=<<font color="black">false</font>> color="black"]
    node11315_name [shape=none, label=<<font color="black">Block[11315]</font>>]
    node11315_name -> node11315 [arrowhead=none, color="black", style=dashed]
    node11315 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#899])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11315 -> cluster2019_exit [color="black"]
    node11316_name [shape=none, label=<<font color="black">Block[11316]</font>>]
    node11316_name -> node11316 [arrowhead=none, color="black", style=dashed]
    node11316 [shape=box, label=<<font color="black">[0] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11316 -> cluster2019_exit [color="black"]
  }
}