digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2420 {
    label = "def TypedArraySpeciesCreate(exemplar: Unknown["TypedArray"], argumentList: Unknown): Unknown["EitherANormalCompletionContainingATypedArrayOrAnAbruptCompletion"]"
    style = rounded
    cluster2420_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2420_entry_name -> cluster2420_entry [arrowhead=none, color="black", style=dashed]
    cluster2420_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2420_entry -> node16694 [color="black"]
    cluster2420_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2420_exit_name -> cluster2420_exit [arrowhead=none, color="black", style=dashed]
    cluster2420_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16694_name [shape=none, label=<<font color="black">Block[16694]</font>>]
    node16694_name -> node16694 [arrowhead=none, color="black", style=dashed]
    node16694 [shape=box, label=<<font color="black">[0] (yet &quot;Let _defaultConstructor_ be the intrinsic object listed in column one of &lt;emu-xref href=\&quot;#table-the-typedarray-constructors\&quot;&gt;&lt;/emu-xref&gt; for _exemplar_.[[TypedArrayName]].&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16694 -> node16695 [color="black"]
    node16695_name [shape=none, label=<<font color="black">Call[16695]</font>>]
    node16695_name -> node16695 [arrowhead=none, color="black", style=dashed]
    node16695 [shape=cds, label=<<font color="black">%0 = clo&lt;SpeciesConstructor&gt;(exemplar, defaultConstructor)</font>> color="black" fillcolor="white", style=filled]
    node16695 -> node16696 [color="black"]
    node16696_name [shape=none, label=<<font color="black">Block[16696]</font>>]
    node16696_name -> node16696 [arrowhead=none, color="black", style=dashed]
    node16696 [shape=box, label=<<font color="black">[0] let constructor = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16696 -> node16697 [color="black"]
    node16697_name [shape=none, label=<<font color="black">Call[16697]</font>>]
    node16697_name -> node16697 [arrowhead=none, color="black", style=dashed]
    node16697 [shape=cds, label=<<font color="black">%1 = clo&lt;TypedArrayCreate&gt;(constructor, argumentList)</font>> color="black" fillcolor="white", style=filled]
    node16697 -> node16698 [color="black"]
    node16698_name [shape=none, label=<<font color="black">Block[16698]</font>>]
    node16698_name -> node16698 [arrowhead=none, color="black", style=dashed]
    node16698 [shape=box, label=<<font color="black">[0] let result = [? %1]<BR ALIGN="LEFT"/>[1] assert (yet &quot;_result_ has [[TypedArrayName]] and [[ContentType]] internal slots.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16698 -> node16699 [color="black"]
    node16699_name [shape=none, label=<<font color="black">Branch[16699]</font>>]
    node16699_name -> node16699 [arrowhead=none, color="black", style=dashed]
    node16699 [shape=diamond, label=<<font color="black">(! (== result.ContentType exemplar.ContentType))</font>> color="black" fillcolor="white", style=filled]
    node16699 -> node16700 [label=<<font color="black">true</font>> color="black"]
    node16699 -> node16701 [label=<<font color="black">false</font>> color="black"]
    node16700_name [shape=none, label=<<font color="black">Block[16700]</font>>]
    node16700_name -> node16700 [arrowhead=none, color="black", style=dashed]
    node16700 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1102])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16700 -> cluster2420_exit [color="black"]
    node16701_name [shape=none, label=<<font color="black">Block[16701]</font>>]
    node16701_name -> node16701 [arrowhead=none, color="black", style=dashed]
    node16701 [shape=box, label=<<font color="black">[0] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16701 -> cluster2420_exit [color="black"]
  }
}