digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2045 {
    label = "def <BUILTIN>:INTRINSICS.Symbol.for(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2045_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2045_entry_name -> cluster2045_entry [arrowhead=none, color="black", style=dashed]
    cluster2045_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2045_entry -> node11657 [color="black"]
    cluster2045_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2045_exit_name -> cluster2045_exit [arrowhead=none, color="black", style=dashed]
    cluster2045_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11657_name [shape=none, label=<<font color="black">Branch[11657]</font>>]
    node11657_name -> node11657 [arrowhead=none, color="black", style=dashed]
    node11657 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11657 -> node11658 [label=<<font color="black">true</font>> color="black"]
    node11657 -> node11659 [label=<<font color="black">false</font>> color="black"]
    node11658_name [shape=none, label=<<font color="black">Block[11658]</font>>]
    node11658_name -> node11658 [arrowhead=none, color="black", style=dashed]
    node11658 [shape=box, label=<<font color="black">[0] let key = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11658 -> node11660 [color="black"]
    node11659_name [shape=none, label=<<font color="black">Block[11659]</font>>]
    node11659_name -> node11659 [arrowhead=none, color="black", style=dashed]
    node11659 [shape=box, label=<<font color="black">[0] let key = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11659 -> node11660 [color="black"]
    node11660_name [shape=none, label=<<font color="black">Call[11660]</font>>]
    node11660_name -> node11660 [arrowhead=none, color="black", style=dashed]
    node11660 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(key)</font>> color="black" fillcolor="white", style=filled]
    node11660 -> node11661 [color="black"]
    node11661_name [shape=none, label=<<font color="black">Block[11661]</font>>]
    node11661_name -> node11661 [arrowhead=none, color="black", style=dashed]
    node11661 [shape=box, label=<<font color="black">[0] let stringKey = [? %0]<BR ALIGN="LEFT"/>[1] (yet &quot;For each element _e_ of the GlobalSymbolRegistry List, do\n  1. If SameValue(_e_.[[Key]], _stringKey_) is *true*, return _e_.[[Symbol]].&quot;)<BR ALIGN="LEFT"/>[2] assert (yet &quot;GlobalSymbolRegistry does not currently contain an entry for _stringKey_.&quot;)<BR ALIGN="LEFT"/>[3] (yet &quot;Let _newSymbol_ be a new unique Symbol value whose [[Description]] value is _stringKey_.&quot;)<BR ALIGN="LEFT"/>[4] (yet &quot;Append the Record { [[Key]]: _stringKey_, [[Symbol]]: _newSymbol_ } to the GlobalSymbolRegistry List.&quot;)<BR ALIGN="LEFT"/>[5] return newSymbol<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11661 -> cluster2045_exit [color="black"]
  }
}