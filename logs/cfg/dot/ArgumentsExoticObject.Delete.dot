digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1118 {
    label = "def <INTERNAL>:ArgumentsExoticObject.Delete(args: ArgumentsExoticObject, P: Symbol | String): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1118_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1118_entry_name -> cluster1118_entry [arrowhead=none, color="black", style=dashed]
    cluster1118_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1118_entry -> node4744 [color="black"]
    cluster1118_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1118_exit_name -> cluster1118_exit [arrowhead=none, color="black", style=dashed]
    cluster1118_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4744_name [shape=none, label=<<font color="black">Block[4744]</font>>]
    node4744_name -> node4744 [arrowhead=none, color="black", style=dashed]
    node4744 [shape=box, label=<<font color="black">[0] let map = args.ParameterMap<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4744 -> node4745 [color="black"]
    node4745_name [shape=none, label=<<font color="black">Call[4745]</font>>]
    node4745_name -> node4745 [arrowhead=none, color="black", style=dashed]
    node4745 [shape=cds, label=<<font color="black">%0 = clo&lt;HasOwnProperty&gt;(map, P)</font>> color="black" fillcolor="white", style=filled]
    node4745 -> node4746 [color="black"]
    node4746_name [shape=none, label=<<font color="black">Block[4746]</font>>]
    node4746_name -> node4746 [arrowhead=none, color="black", style=dashed]
    node4746 [shape=box, label=<<font color="black">[0] let isMapped = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4746 -> node4747 [color="black"]
    node4747_name [shape=none, label=<<font color="black">Call[4747]</font>>]
    node4747_name -> node4747 [arrowhead=none, color="black", style=dashed]
    node4747 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryDelete&gt;(args, P)</font>> color="black" fillcolor="white", style=filled]
    node4747 -> node4748 [color="black"]
    node4748_name [shape=none, label=<<font color="black">Block[4748]</font>>]
    node4748_name -> node4748 [arrowhead=none, color="black", style=dashed]
    node4748 [shape=box, label=<<font color="black">[0] let result = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4748 -> node4749 [color="black"]
    node4749_name [shape=none, label=<<font color="black">Branch[4749]</font>>]
    node4749_name -> node4749 [arrowhead=none, color="black", style=dashed]
    node4749 [shape=diamond, label=<<font color="black">(&amp;&amp; (= result true) (= isMapped true))</font>> color="black" fillcolor="white", style=filled]
    node4749 -> node4750 [label=<<font color="black">true</font>> color="black"]
    node4749 -> node4752 [label=<<font color="black">false</font>> color="black"]
    node4750_name [shape=none, label=<<font color="black">Call[4750]</font>>]
    node4750_name -> node4750 [arrowhead=none, color="black", style=dashed]
    node4750 [shape=cds, label=<<font color="black">%2 = map-&gt;Delete(P)</font>> color="black" fillcolor="white", style=filled]
    node4750 -> node4751 [color="black"]
    node4752_name [shape=none, label=<<font color="black">Block[4752]</font>>]
    node4752_name -> node4752 [arrowhead=none, color="black", style=dashed]
    node4752 [shape=box, label=<<font color="black">[0] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4752 -> cluster1118_exit [color="black"]
    node4751_name [shape=none, label=<<font color="black">Block[4751]</font>>]
    node4751_name -> node4751 [arrowhead=none, color="black", style=dashed]
    node4751 [shape=box, label=<<font color="black">[0] [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4751 -> node4752 [color="black"]
  }
}