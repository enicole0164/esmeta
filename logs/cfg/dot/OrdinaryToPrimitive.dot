digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster77 {
    label = "def OrdinaryToPrimitive(O: Object, hint: Const[~number~, ~string~]): Normal[ESValue] | Abrupt"
    style = rounded
    cluster77_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster77_entry_name -> cluster77_entry [arrowhead=none, color="black", style=dashed]
    cluster77_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster77_entry -> node606 [color="black"]
    cluster77_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster77_exit_name -> cluster77_exit [arrowhead=none, color="black", style=dashed]
    cluster77_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node606_name [shape=none, label=<<font color="black">Branch[606]</font>>]
    node606_name -> node606 [arrowhead=none, color="black", style=dashed]
    node606 [shape=diamond, label=<<font color="black">(= hint ~string~)</font>> color="black" fillcolor="white", style=filled]
    node606 -> node607 [label=<<font color="black">true</font>> color="black"]
    node606 -> node608 [label=<<font color="black">false</font>> color="black"]
    node607_name [shape=none, label=<<font color="black">Block[607]</font>>]
    node607_name -> node607 [arrowhead=none, color="black", style=dashed]
    node607 [shape=box, label=<<font color="black">[0] let methodNames = (new [&quot;toString&quot;, &quot;valueOf&quot;])[#29]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node607 -> node609 [color="black"]
    node608_name [shape=none, label=<<font color="black">Block[608]</font>>]
    node608_name -> node608 [arrowhead=none, color="black", style=dashed]
    node608 [shape=box, label=<<font color="black">[0] let methodNames = (new [&quot;valueOf&quot;, &quot;toString&quot;])[#30]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node608 -> node609 [color="black"]
    node609_name [shape=none, label=<<font color="black">Block[609]</font>>]
    node609_name -> node609 [arrowhead=none, color="black", style=dashed]
    node609 [shape=box, label=<<font color="black">[0] %1 = methodNames<BR ALIGN="LEFT"/>[1] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node609 -> node610 [color="black"]
    node610_name [shape=none, label=<<font color="black">Branch[610]</font>>]
    node610_name -> node610 [arrowhead=none, color="black", style=dashed]
    node610 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node610 -> node611 [label=<<font color="black">true</font>> color="black"]
    node610 -> node621 [label=<<font color="black">false</font>> color="black"]
    node611_name [shape=none, label=<<font color="black">Block[611]</font>>]
    node611_name -> node611 [arrowhead=none, color="black", style=dashed]
    node611 [shape=box, label=<<font color="black">[0] let name = %1[%0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node611 -> node612 [color="black"]
    node621_name [shape=none, label=<<font color="black">Block[621]</font>>]
    node621_name -> node621 [arrowhead=none, color="black", style=dashed]
    node621 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#31])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node621 -> cluster77_exit [color="black"]
    node612_name [shape=none, label=<<font color="black">Call[612]</font>>]
    node612_name -> node612 [arrowhead=none, color="black", style=dashed]
    node612 [shape=cds, label=<<font color="black">%2 = clo&lt;Get&gt;(O, name)</font>> color="black" fillcolor="white", style=filled]
    node612 -> node613 [color="black"]
    node613_name [shape=none, label=<<font color="black">Block[613]</font>>]
    node613_name -> node613 [arrowhead=none, color="black", style=dashed]
    node613 [shape=box, label=<<font color="black">[0] let method = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node613 -> node614 [color="black"]
    node614_name [shape=none, label=<<font color="black">Call[614]</font>>]
    node614_name -> node614 [arrowhead=none, color="black", style=dashed]
    node614 [shape=cds, label=<<font color="black">%3 = clo&lt;IsCallable&gt;(method)</font>> color="black" fillcolor="white", style=filled]
    node614 -> node615 [color="black"]
    node615_name [shape=none, label=<<font color="black">Branch[615]</font>>]
    node615_name -> node615 [arrowhead=none, color="black", style=dashed]
    node615 [shape=diamond, label=<<font color="black">(= %3 true)</font>> color="black" fillcolor="white", style=filled]
    node615 -> node616 [label=<<font color="black">true</font>> color="black"]
    node615 -> node620 [label=<<font color="black">false</font>> color="black"]
    node616_name [shape=none, label=<<font color="black">Call[616]</font>>]
    node616_name -> node616 [arrowhead=none, color="black", style=dashed]
    node616 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(method, O)</font>> color="black" fillcolor="white", style=filled]
    node616 -> node617 [color="black"]
    node620_name [shape=none, label=<<font color="black">Block[620]</font>>]
    node620_name -> node620 [arrowhead=none, color="black", style=dashed]
    node620 [shape=box, label=<<font color="black">[0] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node620 -> node610 [color="black"]
    node617_name [shape=none, label=<<font color="black">Block[617]</font>>]
    node617_name -> node617 [arrowhead=none, color="black", style=dashed]
    node617 [shape=box, label=<<font color="black">[0] let result = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node617 -> node618 [color="black"]
    node618_name [shape=none, label=<<font color="black">Branch[618]</font>>]
    node618_name -> node618 [arrowhead=none, color="black", style=dashed]
    node618 [shape=diamond, label=<<font color="black">(! (= (typeof result) @Object))</font>> color="black" fillcolor="white", style=filled]
    node618 -> node619 [label=<<font color="black">true</font>> color="black"]
    node618 -> node620 [label=<<font color="black">false</font>> color="black"]
    node619_name [shape=none, label=<<font color="black">Block[619]</font>>]
    node619_name -> node619 [arrowhead=none, color="black", style=dashed]
    node619 [shape=box, label=<<font color="black">[0] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node619 -> cluster77_exit [color="black"]
  }
}