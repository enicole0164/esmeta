digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster97 {
    label = "def RoundMVResult(n: Unknown["MathematicalValue"]): Number"
    style = rounded
    cluster97_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster97_entry_name -> cluster97_entry [arrowhead=none, color="black", style=dashed]
    cluster97_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster97_entry -> node729 [color="black"]
    cluster97_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster97_exit_name -> cluster97_exit [arrowhead=none, color="black", style=dashed]
    cluster97_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node729_name [shape=none, label=<<font color="black">Block[729]</font>>]
    node729_name -> node729 [arrowhead=none, color="black", style=dashed]
    node729 [shape=box, label=<<font color="black">[0] (yet &quot;If the decimal representation of _n_ has 20 or fewer significant digits, return ùîΩ(_n_).&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _option1_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _option2_ be the mathematical value denoted by the result of replacing each significant digit in the decimal representation of _n_ after the 20th with a 0 digit and then incrementing it at the 20th position (with carrying as necessary).&quot;)<BR ALIGN="LEFT"/>[3] (yet &quot;Let _chosen_ be an implementation-defined choice of either _option1_ or _option2_.&quot;)<BR ALIGN="LEFT"/>[4] return ([number] chosen)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node729 -> cluster97_exit [color="black"]
  }
}