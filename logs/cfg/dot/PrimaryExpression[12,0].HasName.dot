digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster670 {
    label = "def <SYNTAX>:PrimaryExpression[12,0].HasName(this: Ast:PrimaryExpression[12,0]): Boolean"
    style = rounded
    cluster670_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster670_entry_name -> cluster670_entry [arrowhead=none, color="black", style=dashed]
    cluster670_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster670_entry -> node2895 [color="black"]
    cluster670_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster670_exit_name -> cluster670_exit [arrowhead=none, color="black", style=dashed]
    cluster670_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node2895_name [shape=none, label=<<font color="black">Block[2895]</font>>]
    node2895_name -> node2895 [arrowhead=none, color="black", style=dashed]
    node2895 [shape=box, label=<<font color="black">[0] let expr = (parse this[0] (nt |ParenthesizedExpression|[]))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2895 -> node2896 [color="black"]
    node2896_name [shape=none, label=<<font color="black">Call[2896]</font>>]
    node2896_name -> node2896 [arrowhead=none, color="black", style=dashed]
    node2896 [shape=cds, label=<<font color="black">%0 = expr-&gt;IsFunctionDefinition()</font>> color="black" fillcolor="white", style=filled]
    node2896 -> node2897 [color="black"]
    node2897_name [shape=none, label=<<font color="black">Branch[2897]</font>>]
    node2897_name -> node2897 [arrowhead=none, color="black", style=dashed]
    node2897 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node2897 -> node2898 [label=<<font color="black">true</font>> color="black"]
    node2897 -> node2899 [label=<<font color="black">false</font>> color="black"]
    node2898_name [shape=none, label=<<font color="black">Block[2898]</font>>]
    node2898_name -> node2898 [arrowhead=none, color="black", style=dashed]
    node2898 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2898 -> cluster670_exit [color="black"]
    node2899_name [shape=none, label=<<font color="black">Call[2899]</font>>]
    node2899_name -> node2899 [arrowhead=none, color="black", style=dashed]
    node2899 [shape=cds, label=<<font color="black">%1 = expr-&gt;HasName()</font>> color="black" fillcolor="white", style=filled]
    node2899 -> node2900 [color="black"]
    node2900_name [shape=none, label=<<font color="black">Block[2900]</font>>]
    node2900_name -> node2900 [arrowhead=none, color="black", style=dashed]
    node2900 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2900 -> cluster670_exit [color="black"]
  }
}