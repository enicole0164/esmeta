digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1120 {
    label = "def CreateMappedArgumentsObject(func: Object, formals: Ast, argumentsList: Unknown["List"], env: EnvironmentRecord): ArgumentsExoticObject"
    style = rounded
    cluster1120_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1120_entry_name -> cluster1120_entry [arrowhead=none, color="black", style=dashed]
    cluster1120_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1120_entry -> node4767 [color="black"]
    cluster1120_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1120_exit_name -> cluster1120_exit [arrowhead=none, color="black", style=dashed]
    cluster1120_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4767_name [shape=none, label=<<font color="black">Block[4767]</font>>]
    node4767_name -> node4767 [arrowhead=none, color="black", style=dashed]
    node4767 [shape=box, label=<<font color="black">[0] assert (yet &quot;_formals_ does not contain a rest parameter, any binding patterns, or any initializers. It may contain duplicate identifiers.&quot;)<BR ALIGN="LEFT"/>[1] let len = argumentsList.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4767 -> node4768 [color="black"]
    node4768_name [shape=none, label=<<font color="black">Call[4768]</font>>]
    node4768_name -> node4768 [arrowhead=none, color="black", style=dashed]
    node4768 [shape=cds, label=<<font color="black">%0 = clo&lt;MakeBasicObject&gt;((new [&quot;Prototype&quot;, &quot;Extensible&quot;, &quot;ParameterMap&quot;])[#465])</font>> color="black" fillcolor="white", style=filled]
    node4768 -> node4769 [color="black"]
    node4769_name [shape=none, label=<<font color="black">Block[4769]</font>>]
    node4769_name -> node4769 [arrowhead=none, color="black", style=dashed]
    node4769 [shape=box, label=<<font color="black">[0] let obj = %0<BR ALIGN="LEFT"/>[1] obj.GetOwnProperty = clo&lt;ArgumentsExoticObject.GetOwnProperty&gt;<BR ALIGN="LEFT"/>[2] obj.DefineOwnProperty = clo&lt;ArgumentsExoticObject.DefineOwnProperty&gt;<BR ALIGN="LEFT"/>[3] obj.Get = clo&lt;ArgumentsExoticObject.Get&gt;<BR ALIGN="LEFT"/>[4] obj.Set = clo&lt;ArgumentsExoticObject.Set&gt;<BR ALIGN="LEFT"/>[5] obj.Delete = clo&lt;ArgumentsExoticObject.Delete&gt;<BR ALIGN="LEFT"/>[6] obj.Prototype = @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Object.prototype%&quot;]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4769 -> node4770 [color="black"]
    node4770_name [shape=none, label=<<font color="black">Call[4770]</font>>]
    node4770_name -> node4770 [arrowhead=none, color="black", style=dashed]
    node4770 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryObjectCreate&gt;(null)</font>> color="black" fillcolor="white", style=filled]
    node4770 -> node4771 [color="black"]
    node4771_name [shape=none, label=<<font color="black">Block[4771]</font>>]
    node4771_name -> node4771 [arrowhead=none, color="black", style=dashed]
    node4771 [shape=box, label=<<font color="black">[0] let map = %1<BR ALIGN="LEFT"/>[1] obj.ParameterMap = map<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4771 -> node4772 [color="black"]
    node4772_name [shape=none, label=<<font color="black">Call[4772]</font>>]
    node4772_name -> node4772 [arrowhead=none, color="black", style=dashed]
    node4772 [shape=cds, label=<<font color="black">%2 = formals-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node4772 -> node4773 [color="black"]
    node4773_name [shape=none, label=<<font color="black">Block[4773]</font>>]
    node4773_name -> node4773 [arrowhead=none, color="black", style=dashed]
    node4773 [shape=box, label=<<font color="black">[0] let parameterNames = %2<BR ALIGN="LEFT"/>[1] let numberOfParameters = parameterNames.length<BR ALIGN="LEFT"/>[2] let index = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4773 -> node4774 [color="black"]
    node4774_name [shape=none, label=<<font color="black">Branch[4774]</font>>]
    node4774_name -> node4774 [arrowhead=none, color="black", style=dashed]
    node4774 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white", style=filled]
    node4774 -> node4775 [label=<<font color="black">true</font>> color="black"]
    node4774 -> node4779 [label=<<font color="black">false</font>> color="black"]
    node4775_name [shape=none, label=<<font color="black">Block[4775]</font>>]
    node4775_name -> node4775 [arrowhead=none, color="black", style=dashed]
    node4775 [shape=box, label=<<font color="black">[0] let val = argumentsList[index]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4775 -> node4776 [color="black"]
    node4779_name [shape=none, label=<<font color="black">Call[4779]</font>>]
    node4779_name -> node4779 [arrowhead=none, color="black", style=dashed]
    node4779 [shape=cds, label=<<font color="black">%5 = clo&lt;DefinePropertyOrThrow&gt;(obj, &quot;length&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; ([number] len), &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; true))[#466])</font>> color="black" fillcolor="white", style=filled]
    node4779 -> node4780 [color="black"]
    node4776_name [shape=none, label=<<font color="black">Call[4776]</font>>]
    node4776_name -> node4776 [arrowhead=none, color="black", style=dashed]
    node4776 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] index))</font>> color="black" fillcolor="white", style=filled]
    node4776 -> node4777 [color="black"]
    node4780_name [shape=none, label=<<font color="black">Block[4780]</font>>]
    node4780_name -> node4780 [arrowhead=none, color="black", style=dashed]
    node4780 [shape=box, label=<<font color="black">[0] [! %5]<BR ALIGN="LEFT"/>[1] let mappedNames = (new [])[#467]<BR ALIGN="LEFT"/>[2] index = (- numberOfParameters 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4780 -> node4781 [color="black"]
    node4777_name [shape=none, label=<<font color="black">Call[4777]</font>>]
    node4777_name -> node4777 [arrowhead=none, color="black", style=dashed]
    node4777 [shape=cds, label=<<font color="black">%4 = clo&lt;CreateDataPropertyOrThrow&gt;(obj, [! %3], val)</font>> color="black" fillcolor="white", style=filled]
    node4777 -> node4778 [color="black"]
    node4781_name [shape=none, label=<<font color="black">Branch[4781]</font>>]
    node4781_name -> node4781 [arrowhead=none, color="black", style=dashed]
    node4781 [shape=diamond, label=<<font color="black">(! (&lt; index 0))</font>> color="black" fillcolor="white", style=filled]
    node4781 -> node4782 [label=<<font color="black">true</font>> color="black"]
    node4781 -> node4794 [label=<<font color="black">false</font>> color="black"]
    node4778_name [shape=none, label=<<font color="black">Block[4778]</font>>]
    node4778_name -> node4778 [arrowhead=none, color="black", style=dashed]
    node4778 [shape=box, label=<<font color="black">[0] [! %4]<BR ALIGN="LEFT"/>[1] index = (+ index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4778 -> node4774 [color="black"]
    node4782_name [shape=none, label=<<font color="black">Block[4782]</font>>]
    node4782_name -> node4782 [arrowhead=none, color="black", style=dashed]
    node4782 [shape=box, label=<<font color="black">[0] let name = parameterNames[index]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4782 -> node4783 [color="black"]
    node4794_name [shape=none, label=<<font color="black">Call[4794]</font>>]
    node4794_name -> node4794 [arrowhead=none, color="black", style=dashed]
    node4794 [shape=cds, label=<<font color="black">%10 = clo&lt;DefinePropertyOrThrow&gt;(obj, @SYMBOL.iterator, (new PropertyDescriptor(&quot;Value&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Array.prototype.values%&quot;], &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; true))[#469])</font>> color="black" fillcolor="white", style=filled]
    node4794 -> node4795 [color="black"]
    node4783_name [shape=none, label=<<font color="black">Branch[4783]</font>>]
    node4783_name -> node4783 [arrowhead=none, color="black", style=dashed]
    node4783 [shape=diamond, label=<<font color="black">(! (contains mappedNames name))</font>> color="black" fillcolor="white", style=filled]
    node4783 -> node4784 [label=<<font color="black">true</font>> color="black"]
    node4783 -> node4793 [label=<<font color="black">false</font>> color="black"]
    node4795_name [shape=none, label=<<font color="black">Block[4795]</font>>]
    node4795_name -> node4795 [arrowhead=none, color="black", style=dashed]
    node4795 [shape=box, label=<<font color="black">[0] [! %10]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4795 -> node4796 [color="black"]
    node4784_name [shape=none, label=<<font color="black">Block[4784]</font>>]
    node4784_name -> node4784 [arrowhead=none, color="black", style=dashed]
    node4784 [shape=box, label=<<font color="black">[0] (yet &quot;Add _name_ as an element of the list _mappedNames_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4784 -> node4785 [color="black"]
    node4793_name [shape=none, label=<<font color="black">Block[4793]</font>>]
    node4793_name -> node4793 [arrowhead=none, color="black", style=dashed]
    node4793 [shape=box, label=<<font color="black">[0] index = (- index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4793 -> node4781 [color="black"]
    node4796_name [shape=none, label=<<font color="black">Call[4796]</font>>]
    node4796_name -> node4796 [arrowhead=none, color="black", style=dashed]
    node4796 [shape=cds, label=<<font color="black">%11 = clo&lt;DefinePropertyOrThrow&gt;(obj, &quot;callee&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; func, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; true))[#470])</font>> color="black" fillcolor="white", style=filled]
    node4796 -> node4797 [color="black"]
    node4785_name [shape=none, label=<<font color="black">Branch[4785]</font>>]
    node4785_name -> node4785 [arrowhead=none, color="black", style=dashed]
    node4785 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white", style=filled]
    node4785 -> node4786 [label=<<font color="black">true</font>> color="black"]
    node4785 -> node4793 [label=<<font color="black">false</font>> color="black"]
    node4797_name [shape=none, label=<<font color="black">Block[4797]</font>>]
    node4797_name -> node4797 [arrowhead=none, color="black", style=dashed]
    node4797 [shape=box, label=<<font color="black">[0] [! %11]<BR ALIGN="LEFT"/>[1] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4797 -> cluster1120_exit [color="black"]
    node4786_name [shape=none, label=<<font color="black">Call[4786]</font>>]
    node4786_name -> node4786 [arrowhead=none, color="black", style=dashed]
    node4786 [shape=cds, label=<<font color="black">%6 = clo&lt;MakeArgGetter&gt;(name, env)</font>> color="black" fillcolor="white", style=filled]
    node4786 -> node4787 [color="black"]
    node4787_name [shape=none, label=<<font color="black">Block[4787]</font>>]
    node4787_name -> node4787 [arrowhead=none, color="black", style=dashed]
    node4787 [shape=box, label=<<font color="black">[0] let g = %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4787 -> node4788 [color="black"]
    node4788_name [shape=none, label=<<font color="black">Call[4788]</font>>]
    node4788_name -> node4788 [arrowhead=none, color="black", style=dashed]
    node4788 [shape=cds, label=<<font color="black">%7 = clo&lt;MakeArgSetter&gt;(name, env)</font>> color="black" fillcolor="white", style=filled]
    node4788 -> node4789 [color="black"]
    node4789_name [shape=none, label=<<font color="black">Block[4789]</font>>]
    node4789_name -> node4789 [arrowhead=none, color="black", style=dashed]
    node4789 [shape=box, label=<<font color="black">[0] let p = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4789 -> node4790 [color="black"]
    node4790_name [shape=none, label=<<font color="black">Call[4790]</font>>]
    node4790_name -> node4790 [arrowhead=none, color="black", style=dashed]
    node4790 [shape=cds, label=<<font color="black">%9 = clo&lt;ToString&gt;(([number] index))</font>> color="black" fillcolor="white", style=filled]
    node4790 -> node4791 [color="black"]
    node4791_name [shape=none, label=<<font color="black">Call[4791]</font>>]
    node4791_name -> node4791 [arrowhead=none, color="black", style=dashed]
    node4791 [shape=cds, label=<<font color="black">%8 = map-&gt;DefineOwnProperty([! %9], (new PropertyDescriptor(&quot;Set&quot; -&gt; p, &quot;Get&quot; -&gt; g, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; true))[#468])</font>> color="black" fillcolor="white", style=filled]
    node4791 -> node4792 [color="black"]
    node4792_name [shape=none, label=<<font color="black">Block[4792]</font>>]
    node4792_name -> node4792 [arrowhead=none, color="black", style=dashed]
    node4792 [shape=box, label=<<font color="black">[0] [! %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4792 -> node4793 [color="black"]
  }
}