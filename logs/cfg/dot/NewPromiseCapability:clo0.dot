digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2571 {
    label = "def <BUILTIN-CLO>:NewPromiseCapability:clo0(this: Unknown, argumentsList: Unknown, NewTarget: Unknown): Unknown"
    style = rounded
    cluster2571_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2571_entry_name -> cluster2571_entry [arrowhead=none, color="black", style=dashed]
    cluster2571_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2571_entry -> node18739 [color="black"]
    cluster2571_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2571_exit_name -> cluster2571_exit [arrowhead=none, color="black", style=dashed]
    cluster2571_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18739_name [shape=none, label=<<font color="black">Branch[18739]</font>>]
    node18739_name -> node18739 [arrowhead=none, color="black", style=dashed]
    node18739 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18739 -> node18740 [label=<<font color="black">true</font>> color="black"]
    node18739 -> node18741 [label=<<font color="black">false</font>> color="black"]
    node18740_name [shape=none, label=<<font color="black">Block[18740]</font>>]
    node18740_name -> node18740 [arrowhead=none, color="black", style=dashed]
    node18740 [shape=box, label=<<font color="black">[0] let resolve = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18740 -> node18742 [color="black"]
    node18741_name [shape=none, label=<<font color="black">Block[18741]</font>>]
    node18741_name -> node18741 [arrowhead=none, color="black", style=dashed]
    node18741 [shape=box, label=<<font color="black">[0] let resolve = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18741 -> node18742 [color="black"]
    node18742_name [shape=none, label=<<font color="black">Branch[18742]</font>>]
    node18742_name -> node18742 [arrowhead=none, color="black", style=dashed]
    node18742 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18742 -> node18743 [label=<<font color="black">true</font>> color="black"]
    node18742 -> node18744 [label=<<font color="black">false</font>> color="black"]
    node18743_name [shape=none, label=<<font color="black">Block[18743]</font>>]
    node18743_name -> node18743 [arrowhead=none, color="black", style=dashed]
    node18743 [shape=box, label=<<font color="black">[0] let reject = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18743 -> node18745 [color="black"]
    node18744_name [shape=none, label=<<font color="black">Block[18744]</font>>]
    node18744_name -> node18744 [arrowhead=none, color="black", style=dashed]
    node18744 [shape=box, label=<<font color="black">[0] let reject = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18744 -> node18745 [color="black"]
    node18745_name [shape=none, label=<<font color="black">Branch[18745]</font>>]
    node18745_name -> node18745 [arrowhead=none, color="black", style=dashed]
    node18745 [shape=diamond, label=<<font color="black">(! (= promiseCapability.Resolve undefined))</font>> color="black" fillcolor="white", style=filled]
    node18745 -> node18746 [label=<<font color="black">true</font>> color="black"]
    node18745 -> node18747 [label=<<font color="black">false</font>> color="black"]
    node18746_name [shape=none, label=<<font color="black">Block[18746]</font>>]
    node18746_name -> node18746 [arrowhead=none, color="black", style=dashed]
    node18746 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1238])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18746 -> cluster2571_exit [color="black"]
    node18747_name [shape=none, label=<<font color="black">Branch[18747]</font>>]
    node18747_name -> node18747 [arrowhead=none, color="black", style=dashed]
    node18747 [shape=diamond, label=<<font color="black">(! (= promiseCapability.Reject undefined))</font>> color="black" fillcolor="white", style=filled]
    node18747 -> node18748 [label=<<font color="black">true</font>> color="black"]
    node18747 -> node18749 [label=<<font color="black">false</font>> color="black"]
    node18748_name [shape=none, label=<<font color="black">Block[18748]</font>>]
    node18748_name -> node18748 [arrowhead=none, color="black", style=dashed]
    node18748 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1239])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18748 -> cluster2571_exit [color="black"]
    node18749_name [shape=none, label=<<font color="black">Block[18749]</font>>]
    node18749_name -> node18749 [arrowhead=none, color="black", style=dashed]
    node18749 [shape=box, label=<<font color="black">[0] promiseCapability.Resolve = resolve<BR ALIGN="LEFT"/>[1] promiseCapability.Reject = reject<BR ALIGN="LEFT"/>[2] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18749 -> cluster2571_exit [color="black"]
  }
}