digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2074 {
    label = "def <BUILTIN>:INTRINSICS.BigInt.prototype.toString(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2074_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2074_entry_name -> cluster2074_entry [arrowhead=none, color="black", style=dashed]
    cluster2074_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2074_entry -> node11982 [color="black"]
    cluster2074_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2074_exit_name -> cluster2074_exit [arrowhead=none, color="black", style=dashed]
    cluster2074_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11982_name [shape=none, label=<<font color="black">Branch[11982]</font>>]
    node11982_name -> node11982 [arrowhead=none, color="black", style=dashed]
    node11982 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11982 -> node11983 [label=<<font color="black">true</font>> color="black"]
    node11982 -> node11984 [label=<<font color="black">false</font>> color="black"]
    node11983_name [shape=none, label=<<font color="black">Block[11983]</font>>]
    node11983_name -> node11983 [arrowhead=none, color="black", style=dashed]
    node11983 [shape=box, label=<<font color="black">[0] let radix = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11983 -> node11985 [color="black"]
    node11984_name [shape=none, label=<<font color="black">Block[11984]</font>>]
    node11984_name -> node11984 [arrowhead=none, color="black", style=dashed]
    node11984 [shape=box, label=<<font color="black">[0] let radix = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11984 -> node11985 [color="black"]
    node11985_name [shape=none, label=<<font color="black">Call[11985]</font>>]
    node11985_name -> node11985 [arrowhead=none, color="black", style=dashed]
    node11985 [shape=cds, label=<<font color="black">%0 = clo&lt;thisBigIntValue&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node11985 -> node11986 [color="black"]
    node11986_name [shape=none, label=<<font color="black">Block[11986]</font>>]
    node11986_name -> node11986 [arrowhead=none, color="black", style=dashed]
    node11986 [shape=box, label=<<font color="black">[0] let x = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11986 -> node11987 [color="black"]
    node11987_name [shape=none, label=<<font color="black">Branch[11987]</font>>]
    node11987_name -> node11987 [arrowhead=none, color="black", style=dashed]
    node11987 [shape=diamond, label=<<font color="black">(= radix undefined)</font>> color="black" fillcolor="white", style=filled]
    node11987 -> node11988 [label=<<font color="black">true</font>> color="black"]
    node11987 -> node11989 [label=<<font color="black">false</font>> color="black"]
    node11988_name [shape=none, label=<<font color="black">Block[11988]</font>>]
    node11988_name -> node11988 [arrowhead=none, color="black", style=dashed]
    node11988 [shape=box, label=<<font color="black">[0] let radixMV = 10<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11988 -> node11991 [color="black"]
    node11989_name [shape=none, label=<<font color="black">Call[11989]</font>>]
    node11989_name -> node11989 [arrowhead=none, color="black", style=dashed]
    node11989 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIntegerOrInfinity&gt;(radix)</font>> color="black" fillcolor="white", style=filled]
    node11989 -> node11990 [color="black"]
    node11991_name [shape=none, label=<<font color="black">Branch[11991]</font>>]
    node11991_name -> node11991 [arrowhead=none, color="black", style=dashed]
    node11991 [shape=diamond, label=<<font color="black">(|| (&lt; radixMV 2) (&lt; 36 radixMV))</font>> color="black" fillcolor="white", style=filled]
    node11991 -> node11992 [label=<<font color="black">true</font>> color="black"]
    node11991 -> node11993 [label=<<font color="black">false</font>> color="black"]
    node11990_name [shape=none, label=<<font color="black">Block[11990]</font>>]
    node11990_name -> node11990 [arrowhead=none, color="black", style=dashed]
    node11990 [shape=box, label=<<font color="black">[0] let radixMV = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11990 -> node11991 [color="black"]
    node11992_name [shape=none, label=<<font color="black">Block[11992]</font>>]
    node11992_name -> node11992 [arrowhead=none, color="black", style=dashed]
    node11992 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#934])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11992 -> cluster2074_exit [color="black"]
    node11993_name [shape=none, label=<<font color="black">Branch[11993]</font>>]
    node11993_name -> node11993 [arrowhead=none, color="black", style=dashed]
    node11993 [shape=diamond, label=<<font color="black">(== radixMV 10)</font>> color="black" fillcolor="white", style=filled]
    node11993 -> node11994 [label=<<font color="black">true</font>> color="black"]
    node11993 -> node11996 [label=<<font color="black">false</font>> color="black"]
    node11994_name [shape=none, label=<<font color="black">Call[11994]</font>>]
    node11994_name -> node11994 [arrowhead=none, color="black", style=dashed]
    node11994 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node11994 -> node11995 [color="black"]
    node11996_name [shape=none, label=<<font color="black">Block[11996]</font>>]
    node11996_name -> node11996 [arrowhead=none, color="black", style=dashed]
    node11996 [shape=box, label=<<font color="black">[0] return ([str radixMV] x)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11996 -> cluster2074_exit [color="black"]
    node11995_name [shape=none, label=<<font color="black">Block[11995]</font>>]
    node11995_name -> node11995 [arrowhead=none, color="black", style=dashed]
    node11995 [shape=box, label=<<font color="black">[0] return [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11995 -> cluster2074_exit [color="black"]
  }
}