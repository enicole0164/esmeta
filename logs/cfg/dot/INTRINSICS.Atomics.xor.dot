digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2544 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.xor(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2544_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2544_entry_name -> cluster2544_entry [arrowhead=none, color="black", style=dashed]
    cluster2544_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2544_entry -> node18266 [color="black"]
    cluster2544_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2544_exit_name -> cluster2544_exit [arrowhead=none, color="black", style=dashed]
    cluster2544_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18266_name [shape=none, label=<<font color="black">Branch[18266]</font>>]
    node18266_name -> node18266 [arrowhead=none, color="black", style=dashed]
    node18266 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18266 -> node18267 [label=<<font color="black">true</font>> color="black"]
    node18266 -> node18268 [label=<<font color="black">false</font>> color="black"]
    node18267_name [shape=none, label=<<font color="black">Block[18267]</font>>]
    node18267_name -> node18267 [arrowhead=none, color="black", style=dashed]
    node18267 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18267 -> node18269 [color="black"]
    node18268_name [shape=none, label=<<font color="black">Block[18268]</font>>]
    node18268_name -> node18268 [arrowhead=none, color="black", style=dashed]
    node18268 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18268 -> node18269 [color="black"]
    node18269_name [shape=none, label=<<font color="black">Branch[18269]</font>>]
    node18269_name -> node18269 [arrowhead=none, color="black", style=dashed]
    node18269 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18269 -> node18270 [label=<<font color="black">true</font>> color="black"]
    node18269 -> node18271 [label=<<font color="black">false</font>> color="black"]
    node18270_name [shape=none, label=<<font color="black">Block[18270]</font>>]
    node18270_name -> node18270 [arrowhead=none, color="black", style=dashed]
    node18270 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18270 -> node18272 [color="black"]
    node18271_name [shape=none, label=<<font color="black">Block[18271]</font>>]
    node18271_name -> node18271 [arrowhead=none, color="black", style=dashed]
    node18271 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18271 -> node18272 [color="black"]
    node18272_name [shape=none, label=<<font color="black">Branch[18272]</font>>]
    node18272_name -> node18272 [arrowhead=none, color="black", style=dashed]
    node18272 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18272 -> node18273 [label=<<font color="black">true</font>> color="black"]
    node18272 -> node18274 [label=<<font color="black">false</font>> color="black"]
    node18273_name [shape=none, label=<<font color="black">Block[18273]</font>>]
    node18273_name -> node18273 [arrowhead=none, color="black", style=dashed]
    node18273 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18273 -> node18275 [color="black"]
    node18274_name [shape=none, label=<<font color="black">Block[18274]</font>>]
    node18274_name -> node18274 [arrowhead=none, color="black", style=dashed]
    node18274 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18274 -> node18275 [color="black"]
    node18275_name [shape=none, label=<<font color="black">Block[18275]</font>>]
    node18275_name -> node18275 [arrowhead=none, color="black", style=dashed]
    node18275 [shape=box, label=<<font color="black">[0] (yet &quot;Let _xor_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return ByteListBitwiseOp(`^`, _xBytes_, _yBytes_).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18275 -> node18276 [color="black"]
    node18276_name [shape=none, label=<<font color="black">Call[18276]</font>>]
    node18276_name -> node18276 [arrowhead=none, color="black", style=dashed]
    node18276 [shape=cds, label=<<font color="black">%0 = clo&lt;AtomicReadModifyWrite&gt;(typedArray, index, value, xor)</font>> color="black" fillcolor="white", style=filled]
    node18276 -> node18277 [color="black"]
    node18277_name [shape=none, label=<<font color="black">Block[18277]</font>>]
    node18277_name -> node18277 [arrowhead=none, color="black", style=dashed]
    node18277 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18277 -> cluster2544_exit [color="black"]
  }
}