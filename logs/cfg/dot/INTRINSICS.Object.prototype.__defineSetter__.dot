digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2030 {
    label = "def <BUILTIN>:INTRINSICS.Object.prototype.__defineSetter__(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2030_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2030_entry_name -> cluster2030_entry [arrowhead=none, color="black", style=dashed]
    cluster2030_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2030_entry -> node11439 [color="black"]
    cluster2030_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2030_exit_name -> cluster2030_exit [arrowhead=none, color="black", style=dashed]
    cluster2030_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11439_name [shape=none, label=<<font color="black">Branch[11439]</font>>]
    node11439_name -> node11439 [arrowhead=none, color="black", style=dashed]
    node11439 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11439 -> node11440 [label=<<font color="black">true</font>> color="black"]
    node11439 -> node11441 [label=<<font color="black">false</font>> color="black"]
    node11440_name [shape=none, label=<<font color="black">Block[11440]</font>>]
    node11440_name -> node11440 [arrowhead=none, color="black", style=dashed]
    node11440 [shape=box, label=<<font color="black">[0] let P = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11440 -> node11442 [color="black"]
    node11441_name [shape=none, label=<<font color="black">Block[11441]</font>>]
    node11441_name -> node11441 [arrowhead=none, color="black", style=dashed]
    node11441 [shape=box, label=<<font color="black">[0] let P = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11441 -> node11442 [color="black"]
    node11442_name [shape=none, label=<<font color="black">Branch[11442]</font>>]
    node11442_name -> node11442 [arrowhead=none, color="black", style=dashed]
    node11442 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11442 -> node11443 [label=<<font color="black">true</font>> color="black"]
    node11442 -> node11444 [label=<<font color="black">false</font>> color="black"]
    node11443_name [shape=none, label=<<font color="black">Block[11443]</font>>]
    node11443_name -> node11443 [arrowhead=none, color="black", style=dashed]
    node11443 [shape=box, label=<<font color="black">[0] let setter = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11443 -> node11445 [color="black"]
    node11444_name [shape=none, label=<<font color="black">Block[11444]</font>>]
    node11444_name -> node11444 [arrowhead=none, color="black", style=dashed]
    node11444 [shape=box, label=<<font color="black">[0] let setter = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11444 -> node11445 [color="black"]
    node11445_name [shape=none, label=<<font color="black">Call[11445]</font>>]
    node11445_name -> node11445 [arrowhead=none, color="black", style=dashed]
    node11445 [shape=cds, label=<<font color="black">%0 = clo&lt;ToObject&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node11445 -> node11446 [color="black"]
    node11446_name [shape=none, label=<<font color="black">Block[11446]</font>>]
    node11446_name -> node11446 [arrowhead=none, color="black", style=dashed]
    node11446 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11446 -> node11447 [color="black"]
    node11447_name [shape=none, label=<<font color="black">Call[11447]</font>>]
    node11447_name -> node11447 [arrowhead=none, color="black", style=dashed]
    node11447 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(setter)</font>> color="black" fillcolor="white", style=filled]
    node11447 -> node11448 [color="black"]
    node11448_name [shape=none, label=<<font color="black">Branch[11448]</font>>]
    node11448_name -> node11448 [arrowhead=none, color="black", style=dashed]
    node11448 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node11448 -> node11449 [label=<<font color="black">true</font>> color="black"]
    node11448 -> node11450 [label=<<font color="black">false</font>> color="black"]
    node11449_name [shape=none, label=<<font color="black">Block[11449]</font>>]
    node11449_name -> node11449 [arrowhead=none, color="black", style=dashed]
    node11449 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#903])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11449 -> cluster2030_exit [color="black"]
    node11450_name [shape=none, label=<<font color="black">Block[11450]</font>>]
    node11450_name -> node11450 [arrowhead=none, color="black", style=dashed]
    node11450 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor(&quot;Set&quot; -&gt; setter, &quot;Enumerable&quot; -&gt; true, &quot;Configurable&quot; -&gt; true))[#904]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11450 -> node11451 [color="black"]
    node11451_name [shape=none, label=<<font color="black">Call[11451]</font>>]
    node11451_name -> node11451 [arrowhead=none, color="black", style=dashed]
    node11451 [shape=cds, label=<<font color="black">%2 = clo&lt;ToPropertyKey&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node11451 -> node11452 [color="black"]
    node11452_name [shape=none, label=<<font color="black">Block[11452]</font>>]
    node11452_name -> node11452 [arrowhead=none, color="black", style=dashed]
    node11452 [shape=box, label=<<font color="black">[0] let key = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11452 -> node11453 [color="black"]
    node11453_name [shape=none, label=<<font color="black">Call[11453]</font>>]
    node11453_name -> node11453 [arrowhead=none, color="black", style=dashed]
    node11453 [shape=cds, label=<<font color="black">%3 = clo&lt;DefinePropertyOrThrow&gt;(O, key, desc)</font>> color="black" fillcolor="white", style=filled]
    node11453 -> node11454 [color="black"]
    node11454_name [shape=none, label=<<font color="black">Block[11454]</font>>]
    node11454_name -> node11454 [arrowhead=none, color="black", style=dashed]
    node11454 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/>[1] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11454 -> cluster2030_exit [color="black"]
  }
}