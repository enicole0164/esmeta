digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1678 {
    label = "def <SYNTAX>:AsyncMethod[0,0].ContainsArguments(this: Ast:AsyncMethod[0,0]): Boolean"
    style = rounded
    cluster1678_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1678_entry_name -> cluster1678_entry [arrowhead=none, color="black", style=dashed]
    cluster1678_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1678_entry -> node8936 [color="black"]
    cluster1678_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1678_exit_name -> cluster1678_exit [arrowhead=none, color="black", style=dashed]
    cluster1678_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8936_name [shape=none, label=<<font color="black">Call[8936]</font>>]
    node8936_name -> node8936 [arrowhead=none, color="black", style=dashed]
    node8936 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;ContainsArguments()</font>> color="black" fillcolor="white", style=filled]
    node8936 -> node8937 [color="black"]
    node8937_name [shape=none, label=<<font color="black">Block[8937]</font>>]
    node8937_name -> node8937 [arrowhead=none, color="black", style=dashed]
    node8937 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8937 -> cluster1678_exit [color="black"]
  }
}