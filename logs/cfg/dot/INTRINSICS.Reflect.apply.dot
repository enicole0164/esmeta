digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2646 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.apply(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2646_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2646_entry_name -> cluster2646_entry [arrowhead=none, color="black", style=dashed]
    cluster2646_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2646_entry -> node19635 [color="black"]
    cluster2646_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2646_exit_name -> cluster2646_exit [arrowhead=none, color="black", style=dashed]
    cluster2646_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19635_name [shape=none, label=<<font color="black">Branch[19635]</font>>]
    node19635_name -> node19635 [arrowhead=none, color="black", style=dashed]
    node19635 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19635 -> node19636 [label=<<font color="black">true</font>> color="black"]
    node19635 -> node19637 [label=<<font color="black">false</font>> color="black"]
    node19636_name [shape=none, label=<<font color="black">Block[19636]</font>>]
    node19636_name -> node19636 [arrowhead=none, color="black", style=dashed]
    node19636 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19636 -> node19638 [color="black"]
    node19637_name [shape=none, label=<<font color="black">Block[19637]</font>>]
    node19637_name -> node19637 [arrowhead=none, color="black", style=dashed]
    node19637 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19637 -> node19638 [color="black"]
    node19638_name [shape=none, label=<<font color="black">Branch[19638]</font>>]
    node19638_name -> node19638 [arrowhead=none, color="black", style=dashed]
    node19638 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19638 -> node19639 [label=<<font color="black">true</font>> color="black"]
    node19638 -> node19640 [label=<<font color="black">false</font>> color="black"]
    node19639_name [shape=none, label=<<font color="black">Block[19639]</font>>]
    node19639_name -> node19639 [arrowhead=none, color="black", style=dashed]
    node19639 [shape=box, label=<<font color="black">[0] let thisArgument = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19639 -> node19641 [color="black"]
    node19640_name [shape=none, label=<<font color="black">Block[19640]</font>>]
    node19640_name -> node19640 [arrowhead=none, color="black", style=dashed]
    node19640 [shape=box, label=<<font color="black">[0] let thisArgument = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19640 -> node19641 [color="black"]
    node19641_name [shape=none, label=<<font color="black">Branch[19641]</font>>]
    node19641_name -> node19641 [arrowhead=none, color="black", style=dashed]
    node19641 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19641 -> node19642 [label=<<font color="black">true</font>> color="black"]
    node19641 -> node19643 [label=<<font color="black">false</font>> color="black"]
    node19642_name [shape=none, label=<<font color="black">Block[19642]</font>>]
    node19642_name -> node19642 [arrowhead=none, color="black", style=dashed]
    node19642 [shape=box, label=<<font color="black">[0] let argumentsList = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19642 -> node19644 [color="black"]
    node19643_name [shape=none, label=<<font color="black">Block[19643]</font>>]
    node19643_name -> node19643 [arrowhead=none, color="black", style=dashed]
    node19643 [shape=box, label=<<font color="black">[0] let argumentsList = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19643 -> node19644 [color="black"]
    node19644_name [shape=none, label=<<font color="black">Call[19644]</font>>]
    node19644_name -> node19644 [arrowhead=none, color="black", style=dashed]
    node19644 [shape=cds, label=<<font color="black">%0 = clo&lt;IsCallable&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node19644 -> node19645 [color="black"]
    node19645_name [shape=none, label=<<font color="black">Branch[19645]</font>>]
    node19645_name -> node19645 [arrowhead=none, color="black", style=dashed]
    node19645 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node19645 -> node19646 [label=<<font color="black">true</font>> color="black"]
    node19645 -> node19647 [label=<<font color="black">false</font>> color="black"]
    node19646_name [shape=none, label=<<font color="black">Block[19646]</font>>]
    node19646_name -> node19646 [arrowhead=none, color="black", style=dashed]
    node19646 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1343])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19646 -> cluster2646_exit [color="black"]
    node19647_name [shape=none, label=<<font color="black">Call[19647]</font>>]
    node19647_name -> node19647 [arrowhead=none, color="black", style=dashed]
    node19647 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateListFromArrayLike&gt;(argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node19647 -> node19648 [color="black"]
    node19648_name [shape=none, label=<<font color="black">Block[19648]</font>>]
    node19648_name -> node19648 [arrowhead=none, color="black", style=dashed]
    node19648 [shape=box, label=<<font color="black">[0] let args = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19648 -> node19649 [color="black"]
    node19649_name [shape=none, label=<<font color="black">Call[19649]</font>>]
    node19649_name -> node19649 [arrowhead=none, color="black", style=dashed]
    node19649 [shape=cds, label=<<font color="black">%2 = clo&lt;PrepareForTailCall&gt;()</font>> color="black" fillcolor="white", style=filled]
    node19649 -> node19650 [color="black"]
    node19650_name [shape=none, label=<<font color="black">Call[19650]</font>>]
    node19650_name -> node19650 [arrowhead=none, color="black", style=dashed]
    node19650 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(target, thisArgument, args)</font>> color="black" fillcolor="white", style=filled]
    node19650 -> node19651 [color="black"]
    node19651_name [shape=none, label=<<font color="black">Block[19651]</font>>]
    node19651_name -> node19651 [arrowhead=none, color="black", style=dashed]
    node19651 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19651 -> cluster2646_exit [color="black"]
  }
}