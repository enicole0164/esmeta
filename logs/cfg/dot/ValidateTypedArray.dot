digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2422 {
    label = "def ValidateTypedArray(O: Unknown): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2422_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2422_entry_name -> cluster2422_entry [arrowhead=none, color="black", style=dashed]
    cluster2422_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2422_entry -> node16706 [color="black"]
    cluster2422_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2422_exit_name -> cluster2422_exit [arrowhead=none, color="black", style=dashed]
    cluster2422_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16706_name [shape=none, label=<<font color="black">Call[16706]</font>>]
    node16706_name -> node16706 [arrowhead=none, color="black", style=dashed]
    node16706 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;TypedArrayName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node16706 -> node16707 [color="black"]
    node16707_name [shape=none, label=<<font color="black">Block[16707]</font>>]
    node16707_name -> node16707 [arrowhead=none, color="black", style=dashed]
    node16707 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= O.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/>[2] let buffer = O.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16707 -> node16708 [color="black"]
    node16708_name [shape=none, label=<<font color="black">Call[16708]</font>>]
    node16708_name -> node16708 [arrowhead=none, color="black", style=dashed]
    node16708 [shape=cds, label=<<font color="black">%1 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node16708 -> node16709 [color="black"]
    node16709_name [shape=none, label=<<font color="black">Branch[16709]</font>>]
    node16709_name -> node16709 [arrowhead=none, color="black", style=dashed]
    node16709 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node16709 -> node16710 [label=<<font color="black">true</font>> color="black"]
    node16709 -> node16711 [label=<<font color="black">false</font>> color="black"]
    node16710_name [shape=none, label=<<font color="black">Block[16710]</font>>]
    node16710_name -> node16710 [arrowhead=none, color="black", style=dashed]
    node16710 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1103])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16710 -> cluster2422_exit [color="black"]
    node16711_name [shape=none, label=<<font color="black">Block[16711]</font>>]
    node16711_name -> node16711 [arrowhead=none, color="black", style=dashed]
    node16711 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16711 -> cluster2422_exit [color="black"]
  }
}