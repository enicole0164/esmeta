digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2355 {
    label = "def FlattenIntoArray(target: Object, source: Object, sourceLen: Unknown["NonnegativeInteger"], start: Unknown["NonnegativeInteger"], depth: Unknown["NonnegativeIntegerOr+âˆž"], mapperFunction?: Unknown, thisArg?: Unknown): Unknown["EitherANormalCompletionContainingANonnegativeIntegerOrAnAbruptCompletion"]"
    style = rounded
    cluster2355_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2355_entry_name -> cluster2355_entry [arrowhead=none, color="black", style=dashed]
    cluster2355_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2355_entry -> node15106 [color="black"]
    cluster2355_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2355_exit_name -> cluster2355_exit [arrowhead=none, color="black", style=dashed]
    cluster2355_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15106_name [shape=none, label=<<font color="black">Block[15106]</font>>]
    node15106_name -> node15106 [arrowhead=none, color="black", style=dashed]
    node15106 [shape=box, label=<<font color="black">[0] assert (yet &quot;If _mapperFunction_ is present, then IsCallable(_mapperFunction_) is *true*, _thisArg_ is present, and _depth_ is 1.&quot;)<BR ALIGN="LEFT"/>[1] let targetIndex = start<BR ALIGN="LEFT"/>[2] let sourceIndex = 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15106 -> node15107 [color="black"]
    node15107_name [shape=none, label=<<font color="black">Branch[15107]</font>>]
    node15107_name -> node15107 [arrowhead=none, color="black", style=dashed]
    node15107 [shape=diamond, label=<<font color="black">(&lt; ([math] sourceIndex) sourceLen)</font>> color="black" fillcolor="white", style=filled]
    node15107 -> node15108 [label=<<font color="black">true</font>> color="black"]
    node15107 -> node15136 [label=<<font color="black">false</font>> color="black"]
    node15108_name [shape=none, label=<<font color="black">Call[15108]</font>>]
    node15108_name -> node15108 [arrowhead=none, color="black", style=dashed]
    node15108 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(sourceIndex)</font>> color="black" fillcolor="white", style=filled]
    node15108 -> node15109 [color="black"]
    node15136_name [shape=none, label=<<font color="black">Block[15136]</font>>]
    node15136_name -> node15136 [arrowhead=none, color="black", style=dashed]
    node15136 [shape=box, label=<<font color="black">[0] return targetIndex<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15136 -> cluster2355_exit [color="black"]
    node15109_name [shape=none, label=<<font color="black">Block[15109]</font>>]
    node15109_name -> node15109 [arrowhead=none, color="black", style=dashed]
    node15109 [shape=box, label=<<font color="black">[0] let P = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15109 -> node15110 [color="black"]
    node15110_name [shape=none, label=<<font color="black">Call[15110]</font>>]
    node15110_name -> node15110 [arrowhead=none, color="black", style=dashed]
    node15110 [shape=cds, label=<<font color="black">%1 = clo&lt;HasProperty&gt;(source, P)</font>> color="black" fillcolor="white", style=filled]
    node15110 -> node15111 [color="black"]
    node15111_name [shape=none, label=<<font color="black">Block[15111]</font>>]
    node15111_name -> node15111 [arrowhead=none, color="black", style=dashed]
    node15111 [shape=box, label=<<font color="black">[0] let exists = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15111 -> node15112 [color="black"]
    node15112_name [shape=none, label=<<font color="black">Branch[15112]</font>>]
    node15112_name -> node15112 [arrowhead=none, color="black", style=dashed]
    node15112 [shape=diamond, label=<<font color="black">(= exists true)</font>> color="black" fillcolor="white", style=filled]
    node15112 -> node15113 [label=<<font color="black">true</font>> color="black"]
    node15112 -> node15135 [label=<<font color="black">false</font>> color="black"]
    node15113_name [shape=none, label=<<font color="black">Call[15113]</font>>]
    node15113_name -> node15113 [arrowhead=none, color="black", style=dashed]
    node15113 [shape=cds, label=<<font color="black">%2 = clo&lt;Get&gt;(source, P)</font>> color="black" fillcolor="white", style=filled]
    node15113 -> node15114 [color="black"]
    node15135_name [shape=none, label=<<font color="black">Block[15135]</font>>]
    node15135_name -> node15135 [arrowhead=none, color="black", style=dashed]
    node15135 [shape=box, label=<<font color="black">[0] sourceIndex = (+ sourceIndex 1.0f)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15135 -> node15107 [color="black"]
    node15114_name [shape=none, label=<<font color="black">Block[15114]</font>>]
    node15114_name -> node15114 [arrowhead=none, color="black", style=dashed]
    node15114 [shape=box, label=<<font color="black">[0] let element = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15114 -> node15115 [color="black"]
    node15115_name [shape=none, label=<<font color="black">Branch[15115]</font>>]
    node15115_name -> node15115 [arrowhead=none, color="black", style=dashed]
    node15115 [shape=diamond, label=<<font color="black">(! (= mapperFunction absent))</font>> color="black" fillcolor="white", style=filled]
    node15115 -> node15116 [label=<<font color="black">true</font>> color="black"]
    node15115 -> node15118 [label=<<font color="black">false</font>> color="black"]
    node15116_name [shape=none, label=<<font color="black">Call[15116]</font>>]
    node15116_name -> node15116 [arrowhead=none, color="black", style=dashed]
    node15116 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(mapperFunction, thisArg, (new [element, sourceIndex, source])[#1027])</font>> color="black" fillcolor="white", style=filled]
    node15116 -> node15117 [color="black"]
    node15118_name [shape=none, label=<<font color="black">Block[15118]</font>>]
    node15118_name -> node15118 [arrowhead=none, color="black", style=dashed]
    node15118 [shape=box, label=<<font color="black">[0] let shouldFlatten = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15118 -> node15119 [color="black"]
    node15117_name [shape=none, label=<<font color="black">Block[15117]</font>>]
    node15117_name -> node15117 [arrowhead=none, color="black", style=dashed]
    node15117 [shape=box, label=<<font color="black">[0] element = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15117 -> node15118 [color="black"]
    node15119_name [shape=none, label=<<font color="black">Branch[15119]</font>>]
    node15119_name -> node15119 [arrowhead=none, color="black", style=dashed]
    node15119 [shape=diamond, label=<<font color="black">(&lt; 0 depth)</font>> color="black" fillcolor="white", style=filled]
    node15119 -> node15120 [label=<<font color="black">true</font>> color="black"]
    node15119 -> node15122 [label=<<font color="black">false</font>> color="black"]
    node15120_name [shape=none, label=<<font color="black">Call[15120]</font>>]
    node15120_name -> node15120 [arrowhead=none, color="black", style=dashed]
    node15120 [shape=cds, label=<<font color="black">%4 = clo&lt;IsArray&gt;(element)</font>> color="black" fillcolor="white", style=filled]
    node15120 -> node15121 [color="black"]
    node15122_name [shape=none, label=<<font color="black">Branch[15122]</font>>]
    node15122_name -> node15122 [arrowhead=none, color="black", style=dashed]
    node15122 [shape=diamond, label=<<font color="black">(= shouldFlatten true)</font>> color="black" fillcolor="white", style=filled]
    node15122 -> node15123 [label=<<font color="black">true</font>> color="black"]
    node15122 -> node15130 [label=<<font color="black">false</font>> color="black"]
    node15121_name [shape=none, label=<<font color="black">Block[15121]</font>>]
    node15121_name -> node15121 [arrowhead=none, color="black", style=dashed]
    node15121 [shape=box, label=<<font color="black">[0] shouldFlatten = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15121 -> node15122 [color="black"]
    node15123_name [shape=none, label=<<font color="black">Branch[15123]</font>>]
    node15123_name -> node15123 [arrowhead=none, color="black", style=dashed]
    node15123 [shape=diamond, label=<<font color="black">(= depth +INF)</font>> color="black" fillcolor="white", style=filled]
    node15123 -> node15124 [label=<<font color="black">true</font>> color="black"]
    node15123 -> node15125 [label=<<font color="black">false</font>> color="black"]
    node15130_name [shape=none, label=<<font color="black">Branch[15130]</font>>]
    node15130_name -> node15130 [arrowhead=none, color="black", style=dashed]
    node15130 [shape=diamond, label=<<font color="black">(! (&lt; targetIndex (- (** 2 53) 1)))</font>> color="black" fillcolor="white", style=filled]
    node15130 -> node15131 [label=<<font color="black">true</font>> color="black"]
    node15130 -> node15132 [label=<<font color="black">false</font>> color="black"]
    node15124_name [shape=none, label=<<font color="black">Block[15124]</font>>]
    node15124_name -> node15124 [arrowhead=none, color="black", style=dashed]
    node15124 [shape=box, label=<<font color="black">[0] let newDepth = +INF<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15124 -> node15126 [color="black"]
    node15125_name [shape=none, label=<<font color="black">Block[15125]</font>>]
    node15125_name -> node15125 [arrowhead=none, color="black", style=dashed]
    node15125 [shape=box, label=<<font color="black">[0] let newDepth = (- depth 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15125 -> node15126 [color="black"]
    node15131_name [shape=none, label=<<font color="black">Block[15131]</font>>]
    node15131_name -> node15131 [arrowhead=none, color="black", style=dashed]
    node15131 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1028])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15131 -> cluster2355_exit [color="black"]
    node15132_name [shape=none, label=<<font color="black">Call[15132]</font>>]
    node15132_name -> node15132 [arrowhead=none, color="black", style=dashed]
    node15132 [shape=cds, label=<<font color="black">%7 = clo&lt;ToString&gt;(([number] targetIndex))</font>> color="black" fillcolor="white", style=filled]
    node15132 -> node15133 [color="black"]
    node15126_name [shape=none, label=<<font color="black">Call[15126]</font>>]
    node15126_name -> node15126 [arrowhead=none, color="black", style=dashed]
    node15126 [shape=cds, label=<<font color="black">%5 = clo&lt;LengthOfArrayLike&gt;(element)</font>> color="black" fillcolor="white", style=filled]
    node15126 -> node15127 [color="black"]
    node15133_name [shape=none, label=<<font color="black">Call[15133]</font>>]
    node15133_name -> node15133 [arrowhead=none, color="black", style=dashed]
    node15133 [shape=cds, label=<<font color="black">%8 = clo&lt;CreateDataPropertyOrThrow&gt;(target, [! %7], element)</font>> color="black" fillcolor="white", style=filled]
    node15133 -> node15134 [color="black"]
    node15127_name [shape=none, label=<<font color="black">Block[15127]</font>>]
    node15127_name -> node15127 [arrowhead=none, color="black", style=dashed]
    node15127 [shape=box, label=<<font color="black">[0] let elementLen = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15127 -> node15128 [color="black"]
    node15134_name [shape=none, label=<<font color="black">Block[15134]</font>>]
    node15134_name -> node15134 [arrowhead=none, color="black", style=dashed]
    node15134 [shape=box, label=<<font color="black">[0] [? %8]<BR ALIGN="LEFT"/>[1] targetIndex = (+ targetIndex 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15134 -> node15135 [color="black"]
    node15128_name [shape=none, label=<<font color="black">Call[15128]</font>>]
    node15128_name -> node15128 [arrowhead=none, color="black", style=dashed]
    node15128 [shape=cds, label=<<font color="black">%6 = clo&lt;FlattenIntoArray&gt;(target, element, elementLen, targetIndex, newDepth)</font>> color="black" fillcolor="white", style=filled]
    node15128 -> node15129 [color="black"]
    node15129_name [shape=none, label=<<font color="black">Block[15129]</font>>]
    node15129_name -> node15129 [arrowhead=none, color="black", style=dashed]
    node15129 [shape=box, label=<<font color="black">[0] targetIndex = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15129 -> node15135 [color="black"]
  }
}