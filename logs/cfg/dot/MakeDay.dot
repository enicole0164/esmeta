digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2113 {
    label = "def MakeDay(year: Number, month: Number, date: Number): Number"
    style = rounded
    cluster2113_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2113_entry_name -> cluster2113_entry [arrowhead=none, color="black", style=dashed]
    cluster2113_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2113_entry -> node12446 [color="black"]
    cluster2113_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2113_exit_name -> cluster2113_exit [arrowhead=none, color="black", style=dashed]
    cluster2113_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12446_name [shape=none, label=<<font color="black">Block[12446]</font>>]
    node12446_name -> node12446 [arrowhead=none, color="black", style=dashed]
    node12446 [shape=box, label=<<font color="black">[0] (yet &quot;If _year_ is not finite or _month_ is not finite or _date_ is not finite, return *NaN*.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12446 -> node12447 [color="black"]
    node12447_name [shape=none, label=<<font color="black">Call[12447]</font>>]
    node12447_name -> node12447 [arrowhead=none, color="black", style=dashed]
    node12447 [shape=cds, label=<<font color="black">%0 = clo&lt;ToIntegerOrInfinity&gt;(year)</font>> color="black" fillcolor="white", style=filled]
    node12447 -> node12448 [color="black"]
    node12448_name [shape=none, label=<<font color="black">Block[12448]</font>>]
    node12448_name -> node12448 [arrowhead=none, color="black", style=dashed]
    node12448 [shape=box, label=<<font color="black">[0] let y = ([number] [! %0])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12448 -> node12449 [color="black"]
    node12449_name [shape=none, label=<<font color="black">Call[12449]</font>>]
    node12449_name -> node12449 [arrowhead=none, color="black", style=dashed]
    node12449 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIntegerOrInfinity&gt;(month)</font>> color="black" fillcolor="white", style=filled]
    node12449 -> node12450 [color="black"]
    node12450_name [shape=none, label=<<font color="black">Block[12450]</font>>]
    node12450_name -> node12450 [arrowhead=none, color="black", style=dashed]
    node12450 [shape=box, label=<<font color="black">[0] let m = ([number] [! %1])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12450 -> node12451 [color="black"]
    node12451_name [shape=none, label=<<font color="black">Call[12451]</font>>]
    node12451_name -> node12451 [arrowhead=none, color="black", style=dashed]
    node12451 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(date)</font>> color="black" fillcolor="white", style=filled]
    node12451 -> node12452 [color="black"]
    node12452_name [shape=none, label=<<font color="black">Block[12452]</font>>]
    node12452_name -> node12452 [arrowhead=none, color="black", style=dashed]
    node12452 [shape=box, label=<<font color="black">[0] let dt = ([number] [! %2])<BR ALIGN="LEFT"/>[1] let ym = (+ y ([number] (floor (/ ([math] m) 12))))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12452 -> node12453 [color="black"]
    node12453_name [shape=none, label=<<font color="black">Branch[12453]</font>>]
    node12453_name -> node12453 [arrowhead=none, color="black", style=dashed]
    node12453 [shape=diamond, label=<<font color="black">(|| (= ym NaN) (|| (= ym +INF) (= ym -INF)))</font>> color="black" fillcolor="white", style=filled]
    node12453 -> node12454 [label=<<font color="black">true</font>> color="black"]
    node12453 -> node12455 [label=<<font color="black">false</font>> color="black"]
    node12454_name [shape=none, label=<<font color="black">Block[12454]</font>>]
    node12454_name -> node12454 [arrowhead=none, color="black", style=dashed]
    node12454 [shape=box, label=<<font color="black">[0] return NaN<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12454 -> cluster2113_exit [color="black"]
    node12455_name [shape=none, label=<<font color="black">Block[12455]</font>>]
    node12455_name -> node12455 [arrowhead=none, color="black", style=dashed]
    node12455 [shape=box, label=<<font color="black">[0] let mn = ([number] (% ([math] m) 12))<BR ALIGN="LEFT"/>[1] (yet &quot;Find a finite time value _t_ such that YearFromTime(_t_) is _ym_ and MonthFromTime(_t_) is _mn_ and DateFromTime(_t_) is *1*&lt;sub&gt;ùîΩ&lt;/sub&gt;; but if this is not possible (because some argument is out of range), return *NaN*.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Return Day(_t_) + _dt_ - *1*&lt;sub&gt;ùîΩ&lt;/sub&gt;.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12455 -> cluster2113_exit [color="black"]
  }
}