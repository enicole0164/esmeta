digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster75 {
    label = "def CopyDataBlockBytes(toBlock: Unknown["DataBlockOrASharedDataBlock"], toIndex: Unknown["NonnegativeInteger"], fromBlock: Unknown["DataBlockOrASharedDataBlock"], fromIndex: Unknown["NonnegativeInteger"], count: Unknown["NonnegativeInteger"]): Const[~unused~]"
    style = rounded
    cluster75_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster75_entry_name -> cluster75_entry [arrowhead=none, color="black", style=dashed]
    cluster75_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster75_entry -> node577 [color="black"]
    cluster75_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster75_exit_name -> cluster75_exit [arrowhead=none, color="black", style=dashed]
    cluster75_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node577_name [shape=none, label=<<font color="black">Block[577]</font>>]
    node577_name -> node577 [arrowhead=none, color="black", style=dashed]
    node577 [shape=box, label=<<font color="black">[0] assert (yet &quot;_fromBlock_ and _toBlock_ are distinct values.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _fromSize_ be the number of bytes in _fromBlock_.&quot;)<BR ALIGN="LEFT"/>[2] assert (! (&lt; fromSize (+ fromIndex count)))<BR ALIGN="LEFT"/>[3] (yet &quot;Let _toSize_ be the number of bytes in _toBlock_.&quot;)<BR ALIGN="LEFT"/>[4] assert (! (&lt; toSize (+ toIndex count)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node577 -> node578 [color="black"]
    node578_name [shape=none, label=<<font color="black">Branch[578]</font>>]
    node578_name -> node578 [arrowhead=none, color="black", style=dashed]
    node578 [shape=diamond, label=<<font color="black">(&lt; 0 count)</font>> color="black" fillcolor="white", style=filled]
    node578 -> node579 [label=<<font color="black">true</font>> color="black"]
    node578 -> node586 [label=<<font color="black">false</font>> color="black"]
    node579_name [shape=none, label=<<font color="black">Branch[579]</font>>]
    node579_name -> node579 [arrowhead=none, color="black", style=dashed]
    node579 [shape=diamond, label=<<font color="black">(? fromBlock: &quot;SharedDataBlock&quot;)</font>> color="black" fillcolor="white", style=filled]
    node579 -> node580 [label=<<font color="black">true</font>> color="black"]
    node579 -> node584 [label=<<font color="black">false</font>> color="black"]
    node586_name [shape=none, label=<<font color="black">Block[586]</font>>]
    node586_name -> node586 [arrowhead=none, color="black", style=dashed]
    node586 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node586 -> cluster75_exit [color="black"]
    node580_name [shape=none, label=<<font color="black">Block[580]</font>>]
    node580_name -> node580 [arrowhead=none, color="black", style=dashed]
    node580 [shape=box, label=<<font color="black">[0] (yet &quot;Let _execution_ be the [[CandidateExecution]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _eventList_ be the [[EventList]] field of the element in _execution_.[[EventsRecords]] whose [[AgentSignifier]] is AgentSignifier().&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _bytes_ be a List whose sole element is a nondeterministically chosen byte value.&quot;)<BR ALIGN="LEFT"/>[3] nop<BR ALIGN="LEFT"/>[4] let readEvent = (new ReadSharedMemory(&quot;Order&quot; -&gt; ~Unordered~, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; fromBlock, &quot;ByteIndex&quot; -&gt; fromIndex, &quot;ElementSize&quot; -&gt; 1))[#24]<BR ALIGN="LEFT"/>[5] push eventList &lt; readEvent<BR ALIGN="LEFT"/>[6] push execution.ChosenValues &lt; (new ChosenValueRecord(&quot;Event&quot; -&gt; readEvent, &quot;ChosenValue&quot; -&gt; bytes))[#25]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node580 -> node581 [color="black"]
    node584_name [shape=none, label=<<font color="black">Block[584]</font>>]
    node584_name -> node584 [arrowhead=none, color="black", style=dashed]
    node584 [shape=box, label=<<font color="black">[0] assert (! (? toBlock: &quot;SharedDataBlock&quot;))<BR ALIGN="LEFT"/>[1] toBlock[toIndex] = fromBlock[fromIndex]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node584 -> node585 [color="black"]
    node581_name [shape=none, label=<<font color="black">Branch[581]</font>>]
    node581_name -> node581 [arrowhead=none, color="black", style=dashed]
    node581 [shape=diamond, label=<<font color="black">(? toBlock: &quot;SharedDataBlock&quot;)</font>> color="black" fillcolor="white", style=filled]
    node581 -> node582 [label=<<font color="black">true</font>> color="black"]
    node581 -> node583 [label=<<font color="black">false</font>> color="black"]
    node585_name [shape=none, label=<<font color="black">Block[585]</font>>]
    node585_name -> node585 [arrowhead=none, color="black", style=dashed]
    node585 [shape=box, label=<<font color="black">[0] toIndex = (+ toIndex 1)<BR ALIGN="LEFT"/>[1] fromIndex = (+ fromIndex 1)<BR ALIGN="LEFT"/>[2] count = (- count 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node585 -> node578 [color="black"]
    node582_name [shape=none, label=<<font color="black">Block[582]</font>>]
    node582_name -> node582 [arrowhead=none, color="black", style=dashed]
    node582 [shape=box, label=<<font color="black">[0] push eventList &lt; (new WriteSharedMemory(&quot;Order&quot; -&gt; ~Unordered~, &quot;NoTear&quot; -&gt; true, &quot;Block&quot; -&gt; toBlock, &quot;ByteIndex&quot; -&gt; toIndex, &quot;ElementSize&quot; -&gt; 1, &quot;Payload&quot; -&gt; bytes))[#26]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node582 -> node585 [color="black"]
    node583_name [shape=none, label=<<font color="black">Block[583]</font>>]
    node583_name -> node583 [arrowhead=none, color="black", style=dashed]
    node583 [shape=box, label=<<font color="black">[0] toBlock[toIndex] = bytes[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node583 -> node585 [color="black"]
  }
}