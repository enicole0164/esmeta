digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2618 {
    label = "def GetGeneratorKind(): Const[~async~, ~non-generator~, ~sync~]"
    style = rounded
    cluster2618_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2618_entry_name -> cluster2618_entry [arrowhead=none, color="black", style=dashed]
    cluster2618_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2618_entry -> node19377 [color="black"]
    cluster2618_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2618_exit_name -> cluster2618_exit [arrowhead=none, color="black", style=dashed]
    cluster2618_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19377_name [shape=none, label=<<font color="black">Block[19377]</font>>]
    node19377_name -> node19377 [arrowhead=none, color="black", style=dashed]
    node19377 [shape=box, label=<<font color="black">[0] let genContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19377 -> node19378 [color="black"]
    node19378_name [shape=none, label=<<font color="black">Branch[19378]</font>>]
    node19378_name -> node19378 [arrowhead=none, color="black", style=dashed]
    node19378 [shape=diamond, label=<<font color="black">(= genContext.Generator absent)</font>> color="black" fillcolor="white", style=filled]
    node19378 -> node19379 [label=<<font color="black">true</font>> color="black"]
    node19378 -> node19380 [label=<<font color="black">false</font>> color="black"]
    node19379_name [shape=none, label=<<font color="black">Block[19379]</font>>]
    node19379_name -> node19379 [arrowhead=none, color="black", style=dashed]
    node19379 [shape=box, label=<<font color="black">[0] return ~non-generator~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19379 -> cluster2618_exit [color="black"]
    node19380_name [shape=none, label=<<font color="black">Block[19380]</font>>]
    node19380_name -> node19380 [arrowhead=none, color="black", style=dashed]
    node19380 [shape=box, label=<<font color="black">[0] let generator = genContext.Generator<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19380 -> node19381 [color="black"]
    node19381_name [shape=none, label=<<font color="black">Branch[19381]</font>>]
    node19381_name -> node19381 [arrowhead=none, color="black", style=dashed]
    node19381 [shape=diamond, label=<<font color="black">(! (= generator.AsyncGeneratorState absent))</font>> color="black" fillcolor="white", style=filled]
    node19381 -> node19382 [label=<<font color="black">true</font>> color="black"]
    node19381 -> node19383 [label=<<font color="black">false</font>> color="black"]
    node19382_name [shape=none, label=<<font color="black">Block[19382]</font>>]
    node19382_name -> node19382 [arrowhead=none, color="black", style=dashed]
    node19382 [shape=box, label=<<font color="black">[0] return ~async~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19382 -> cluster2618_exit [color="black"]
    node19383_name [shape=none, label=<<font color="black">Block[19383]</font>>]
    node19383_name -> node19383 [arrowhead=none, color="black", style=dashed]
    node19383 [shape=box, label=<<font color="black">[0] return ~sync~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19383 -> cluster2618_exit [color="black"]
  }
}