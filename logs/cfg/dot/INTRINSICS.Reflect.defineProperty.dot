digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2648 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.defineProperty(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2648_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2648_entry_name -> cluster2648_entry [arrowhead=none, color="black", style=dashed]
    cluster2648_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2648_entry -> node19673 [color="black"]
    cluster2648_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2648_exit_name -> cluster2648_exit [arrowhead=none, color="black", style=dashed]
    cluster2648_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19673_name [shape=none, label=<<font color="black">Branch[19673]</font>>]
    node19673_name -> node19673 [arrowhead=none, color="black", style=dashed]
    node19673 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19673 -> node19674 [label=<<font color="black">true</font>> color="black"]
    node19673 -> node19675 [label=<<font color="black">false</font>> color="black"]
    node19674_name [shape=none, label=<<font color="black">Block[19674]</font>>]
    node19674_name -> node19674 [arrowhead=none, color="black", style=dashed]
    node19674 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19674 -> node19676 [color="black"]
    node19675_name [shape=none, label=<<font color="black">Block[19675]</font>>]
    node19675_name -> node19675 [arrowhead=none, color="black", style=dashed]
    node19675 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19675 -> node19676 [color="black"]
    node19676_name [shape=none, label=<<font color="black">Branch[19676]</font>>]
    node19676_name -> node19676 [arrowhead=none, color="black", style=dashed]
    node19676 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19676 -> node19677 [label=<<font color="black">true</font>> color="black"]
    node19676 -> node19678 [label=<<font color="black">false</font>> color="black"]
    node19677_name [shape=none, label=<<font color="black">Block[19677]</font>>]
    node19677_name -> node19677 [arrowhead=none, color="black", style=dashed]
    node19677 [shape=box, label=<<font color="black">[0] let propertyKey = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19677 -> node19679 [color="black"]
    node19678_name [shape=none, label=<<font color="black">Block[19678]</font>>]
    node19678_name -> node19678 [arrowhead=none, color="black", style=dashed]
    node19678 [shape=box, label=<<font color="black">[0] let propertyKey = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19678 -> node19679 [color="black"]
    node19679_name [shape=none, label=<<font color="black">Branch[19679]</font>>]
    node19679_name -> node19679 [arrowhead=none, color="black", style=dashed]
    node19679 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19679 -> node19680 [label=<<font color="black">true</font>> color="black"]
    node19679 -> node19681 [label=<<font color="black">false</font>> color="black"]
    node19680_name [shape=none, label=<<font color="black">Block[19680]</font>>]
    node19680_name -> node19680 [arrowhead=none, color="black", style=dashed]
    node19680 [shape=box, label=<<font color="black">[0] let attributes = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19680 -> node19682 [color="black"]
    node19681_name [shape=none, label=<<font color="black">Block[19681]</font>>]
    node19681_name -> node19681 [arrowhead=none, color="black", style=dashed]
    node19681 [shape=box, label=<<font color="black">[0] let attributes = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19681 -> node19682 [color="black"]
    node19682_name [shape=none, label=<<font color="black">Branch[19682]</font>>]
    node19682_name -> node19682 [arrowhead=none, color="black", style=dashed]
    node19682 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19682 -> node19683 [label=<<font color="black">true</font>> color="black"]
    node19682 -> node19684 [label=<<font color="black">false</font>> color="black"]
    node19683_name [shape=none, label=<<font color="black">Block[19683]</font>>]
    node19683_name -> node19683 [arrowhead=none, color="black", style=dashed]
    node19683 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1346])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19683 -> cluster2648_exit [color="black"]
    node19684_name [shape=none, label=<<font color="black">Call[19684]</font>>]
    node19684_name -> node19684 [arrowhead=none, color="black", style=dashed]
    node19684 [shape=cds, label=<<font color="black">%0 = clo&lt;ToPropertyKey&gt;(propertyKey)</font>> color="black" fillcolor="white", style=filled]
    node19684 -> node19685 [color="black"]
    node19685_name [shape=none, label=<<font color="black">Block[19685]</font>>]
    node19685_name -> node19685 [arrowhead=none, color="black", style=dashed]
    node19685 [shape=box, label=<<font color="black">[0] let key = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19685 -> node19686 [color="black"]
    node19686_name [shape=none, label=<<font color="black">Call[19686]</font>>]
    node19686_name -> node19686 [arrowhead=none, color="black", style=dashed]
    node19686 [shape=cds, label=<<font color="black">%1 = clo&lt;ToPropertyDescriptor&gt;(attributes)</font>> color="black" fillcolor="white", style=filled]
    node19686 -> node19687 [color="black"]
    node19687_name [shape=none, label=<<font color="black">Block[19687]</font>>]
    node19687_name -> node19687 [arrowhead=none, color="black", style=dashed]
    node19687 [shape=box, label=<<font color="black">[0] let desc = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19687 -> node19688 [color="black"]
    node19688_name [shape=none, label=<<font color="black">Call[19688]</font>>]
    node19688_name -> node19688 [arrowhead=none, color="black", style=dashed]
    node19688 [shape=cds, label=<<font color="black">%2 = target-&gt;DefineOwnProperty(key, desc)</font>> color="black" fillcolor="white", style=filled]
    node19688 -> node19689 [color="black"]
    node19689_name [shape=none, label=<<font color="black">Block[19689]</font>>]
    node19689_name -> node19689 [arrowhead=none, color="black", style=dashed]
    node19689 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19689 -> cluster2648_exit [color="black"]
  }
}