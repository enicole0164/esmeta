digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1150 {
    label = "def <INTERNAL>:ProxyExoticObject.GetPrototypeOf(O: ProxyExoticObject): Normal[Object | Null] | Abrupt"
    style = rounded
    cluster1150_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1150_entry_name -> cluster1150_entry [arrowhead=none, color="black", style=dashed]
    cluster1150_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1150_entry -> node5003 [color="black"]
    cluster1150_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1150_exit_name -> cluster1150_exit [arrowhead=none, color="black", style=dashed]
    cluster1150_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5003_name [shape=none, label=<<font color="black">Block[5003]</font>>]
    node5003_name -> node5003 [arrowhead=none, color="black", style=dashed]
    node5003 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5003 -> node5004 [color="black"]
    node5004_name [shape=none, label=<<font color="black">Branch[5004]</font>>]
    node5004_name -> node5004 [arrowhead=none, color="black", style=dashed]
    node5004 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5004 -> node5005 [label=<<font color="black">true</font>> color="black"]
    node5004 -> node5006 [label=<<font color="black">false</font>> color="black"]
    node5005_name [shape=none, label=<<font color="black">Block[5005]</font>>]
    node5005_name -> node5005 [arrowhead=none, color="black", style=dashed]
    node5005 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#480])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5005 -> cluster1150_exit [color="black"]
    node5006_name [shape=none, label=<<font color="black">Block[5006]</font>>]
    node5006_name -> node5006 [arrowhead=none, color="black", style=dashed]
    node5006 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5006 -> node5007 [color="black"]
    node5007_name [shape=none, label=<<font color="black">Call[5007]</font>>]
    node5007_name -> node5007 [arrowhead=none, color="black", style=dashed]
    node5007 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;getPrototypeOf&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5007 -> node5008 [color="black"]
    node5008_name [shape=none, label=<<font color="black">Block[5008]</font>>]
    node5008_name -> node5008 [arrowhead=none, color="black", style=dashed]
    node5008 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5008 -> node5009 [color="black"]
    node5009_name [shape=none, label=<<font color="black">Branch[5009]</font>>]
    node5009_name -> node5009 [arrowhead=none, color="black", style=dashed]
    node5009 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5009 -> node5010 [label=<<font color="black">true</font>> color="black"]
    node5009 -> node5012 [label=<<font color="black">false</font>> color="black"]
    node5010_name [shape=none, label=<<font color="black">Call[5010]</font>>]
    node5010_name -> node5010 [arrowhead=none, color="black", style=dashed]
    node5010 [shape=cds, label=<<font color="black">%1 = target-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node5010 -> node5011 [color="black"]
    node5012_name [shape=none, label=<<font color="black">Call[5012]</font>>]
    node5012_name -> node5012 [arrowhead=none, color="black", style=dashed]
    node5012 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target])[#481])</font>> color="black" fillcolor="white", style=filled]
    node5012 -> node5013 [color="black"]
    node5011_name [shape=none, label=<<font color="black">Block[5011]</font>>]
    node5011_name -> node5011 [arrowhead=none, color="black", style=dashed]
    node5011 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5011 -> cluster1150_exit [color="black"]
    node5013_name [shape=none, label=<<font color="black">Block[5013]</font>>]
    node5013_name -> node5013 [arrowhead=none, color="black", style=dashed]
    node5013 [shape=box, label=<<font color="black">[0] let handlerProto = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5013 -> node5014 [color="black"]
    node5014_name [shape=none, label=<<font color="black">Branch[5014]</font>>]
    node5014_name -> node5014 [arrowhead=none, color="black", style=dashed]
    node5014 [shape=diamond, label=<<font color="black">(! (|| (= (typeof handlerProto) @Object) (= (typeof handlerProto) @Null)))</font>> color="black" fillcolor="white", style=filled]
    node5014 -> node5015 [label=<<font color="black">true</font>> color="black"]
    node5014 -> node5016 [label=<<font color="black">false</font>> color="black"]
    node5015_name [shape=none, label=<<font color="black">Block[5015]</font>>]
    node5015_name -> node5015 [arrowhead=none, color="black", style=dashed]
    node5015 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#482])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5015 -> cluster1150_exit [color="black"]
    node5016_name [shape=none, label=<<font color="black">Call[5016]</font>>]
    node5016_name -> node5016 [arrowhead=none, color="black", style=dashed]
    node5016 [shape=cds, label=<<font color="black">%3 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5016 -> node5017 [color="black"]
    node5017_name [shape=none, label=<<font color="black">Block[5017]</font>>]
    node5017_name -> node5017 [arrowhead=none, color="black", style=dashed]
    node5017 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5017 -> node5018 [color="black"]
    node5018_name [shape=none, label=<<font color="black">Branch[5018]</font>>]
    node5018_name -> node5018 [arrowhead=none, color="black", style=dashed]
    node5018 [shape=diamond, label=<<font color="black">(= extensibleTarget true)</font>> color="black" fillcolor="white", style=filled]
    node5018 -> node5019 [label=<<font color="black">true</font>> color="black"]
    node5018 -> node5020 [label=<<font color="black">false</font>> color="black"]
    node5019_name [shape=none, label=<<font color="black">Block[5019]</font>>]
    node5019_name -> node5019 [arrowhead=none, color="black", style=dashed]
    node5019 [shape=box, label=<<font color="black">[0] return handlerProto<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5019 -> cluster1150_exit [color="black"]
    node5020_name [shape=none, label=<<font color="black">Call[5020]</font>>]
    node5020_name -> node5020 [arrowhead=none, color="black", style=dashed]
    node5020 [shape=cds, label=<<font color="black">%4 = target-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node5020 -> node5021 [color="black"]
    node5021_name [shape=none, label=<<font color="black">Block[5021]</font>>]
    node5021_name -> node5021 [arrowhead=none, color="black", style=dashed]
    node5021 [shape=box, label=<<font color="black">[0] let targetProto = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5021 -> node5022 [color="black"]
    node5022_name [shape=none, label=<<font color="black">Call[5022]</font>>]
    node5022_name -> node5022 [arrowhead=none, color="black", style=dashed]
    node5022 [shape=cds, label=<<font color="black">%5 = clo&lt;SameValue&gt;(handlerProto, targetProto)</font>> color="black" fillcolor="white", style=filled]
    node5022 -> node5023 [color="black"]
    node5023_name [shape=none, label=<<font color="black">Branch[5023]</font>>]
    node5023_name -> node5023 [arrowhead=none, color="black", style=dashed]
    node5023 [shape=diamond, label=<<font color="black">(= %5 false)</font>> color="black" fillcolor="white", style=filled]
    node5023 -> node5024 [label=<<font color="black">true</font>> color="black"]
    node5023 -> node5025 [label=<<font color="black">false</font>> color="black"]
    node5024_name [shape=none, label=<<font color="black">Block[5024]</font>>]
    node5024_name -> node5024 [arrowhead=none, color="black", style=dashed]
    node5024 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#483])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5024 -> cluster1150_exit [color="black"]
    node5025_name [shape=none, label=<<font color="black">Block[5025]</font>>]
    node5025_name -> node5025 [arrowhead=none, color="black", style=dashed]
    node5025 [shape=box, label=<<font color="black">[0] return handlerProto<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5025 -> cluster1150_exit [color="black"]
  }
}