digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1874 {
    label = "def <SYNTAX>:ModuleItemList[1,0].ModuleRequests(this: Ast:ModuleItemList[1,0]): List[String]"
    style = rounded
    cluster1874_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1874_entry_name -> cluster1874_entry [arrowhead=none, color="black", style=dashed]
    cluster1874_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1874_entry -> node10082 [color="black"]
    cluster1874_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1874_exit_name -> cluster1874_exit [arrowhead=none, color="black", style=dashed]
    cluster1874_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10082_name [shape=none, label=<<font color="black">Call[10082]</font>>]
    node10082_name -> node10082 [arrowhead=none, color="black", style=dashed]
    node10082 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;ModuleRequests()</font>> color="black" fillcolor="white", style=filled]
    node10082 -> node10083 [color="black"]
    node10083_name [shape=none, label=<<font color="black">Block[10083]</font>>]
    node10083_name -> node10083 [arrowhead=none, color="black", style=dashed]
    node10083 [shape=box, label=<<font color="black">[0] let moduleNames = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10083 -> node10084 [color="black"]
    node10084_name [shape=none, label=<<font color="black">Call[10084]</font>>]
    node10084_name -> node10084 [arrowhead=none, color="black", style=dashed]
    node10084 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;ModuleRequests()</font>> color="black" fillcolor="white", style=filled]
    node10084 -> node10085 [color="black"]
    node10085_name [shape=none, label=<<font color="black">Block[10085]</font>>]
    node10085_name -> node10085 [arrowhead=none, color="black", style=dashed]
    node10085 [shape=box, label=<<font color="black">[0] let additionalNames = %1<BR ALIGN="LEFT"/>[1] (yet &quot;Append to _moduleNames_ each element of _additionalNames_ that is not already an element of _moduleNames_.&quot;)<BR ALIGN="LEFT"/>[2] return moduleNames<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10085 -> cluster1874_exit [color="black"]
  }
}