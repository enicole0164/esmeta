digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1311 {
    label = "def <SYNTAX>:UnaryExpression[7,0].Evaluation(this: Ast:UnaryExpression[7,0]): Unknown"
    style = rounded
    cluster1311_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1311_entry_name -> cluster1311_entry [arrowhead=none, color="black", style=dashed]
    cluster1311_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1311_entry -> node6284 [color="black"]
    cluster1311_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1311_exit_name -> cluster1311_exit [arrowhead=none, color="black", style=dashed]
    cluster1311_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6284_name [shape=none, label=<<font color="black">Call[6284]</font>>]
    node6284_name -> node6284 [arrowhead=none, color="black", style=dashed]
    node6284 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6284 -> node6285 [color="black"]
    node6285_name [shape=none, label=<<font color="black">Block[6285]</font>>]
    node6285_name -> node6285 [arrowhead=none, color="black", style=dashed]
    node6285 [shape=box, label=<<font color="black">[0] let expr = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6285 -> node6286 [color="black"]
    node6286_name [shape=none, label=<<font color="black">Call[6286]</font>>]
    node6286_name -> node6286 [arrowhead=none, color="black", style=dashed]
    node6286 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(expr)</font>> color="black" fillcolor="white", style=filled]
    node6286 -> node6287 [color="black"]
    node6287_name [shape=none, label=<<font color="black">Call[6287]</font>>]
    node6287_name -> node6287 [arrowhead=none, color="black", style=dashed]
    node6287 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBoolean&gt;([? %1])</font>> color="black" fillcolor="white", style=filled]
    node6287 -> node6288 [color="black"]
    node6288_name [shape=none, label=<<font color="black">Block[6288]</font>>]
    node6288_name -> node6288 [arrowhead=none, color="black", style=dashed]
    node6288 [shape=box, label=<<font color="black">[0] let oldValue = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6288 -> node6289 [color="black"]
    node6289_name [shape=none, label=<<font color="black">Branch[6289]</font>>]
    node6289_name -> node6289 [arrowhead=none, color="black", style=dashed]
    node6289 [shape=diamond, label=<<font color="black">(= oldValue true)</font>> color="black" fillcolor="white", style=filled]
    node6289 -> node6290 [label=<<font color="black">true</font>> color="black"]
    node6289 -> node6291 [label=<<font color="black">false</font>> color="black"]
    node6290_name [shape=none, label=<<font color="black">Block[6290]</font>>]
    node6290_name -> node6290 [arrowhead=none, color="black", style=dashed]
    node6290 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6290 -> cluster1311_exit [color="black"]
    node6291_name [shape=none, label=<<font color="black">Block[6291]</font>>]
    node6291_name -> node6291 [arrowhead=none, color="black", style=dashed]
    node6291 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6291 -> cluster1311_exit [color="black"]
  }
}