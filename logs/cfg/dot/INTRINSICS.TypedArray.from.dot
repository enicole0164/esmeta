digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2385 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.from(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2385_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2385_entry_name -> cluster2385_entry [arrowhead=none, color="black", style=dashed]
    cluster2385_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2385_entry -> node15873 [color="black"]
    cluster2385_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2385_exit_name -> cluster2385_exit [arrowhead=none, color="black", style=dashed]
    cluster2385_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15873_name [shape=none, label=<<font color="black">Branch[15873]</font>>]
    node15873_name -> node15873 [arrowhead=none, color="black", style=dashed]
    node15873 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15873 -> node15874 [label=<<font color="black">true</font>> color="black"]
    node15873 -> node15875 [label=<<font color="black">false</font>> color="black"]
    node15874_name [shape=none, label=<<font color="black">Block[15874]</font>>]
    node15874_name -> node15874 [arrowhead=none, color="black", style=dashed]
    node15874 [shape=box, label=<<font color="black">[0] let source = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15874 -> node15876 [color="black"]
    node15875_name [shape=none, label=<<font color="black">Block[15875]</font>>]
    node15875_name -> node15875 [arrowhead=none, color="black", style=dashed]
    node15875 [shape=box, label=<<font color="black">[0] let source = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15875 -> node15876 [color="black"]
    node15876_name [shape=none, label=<<font color="black">Branch[15876]</font>>]
    node15876_name -> node15876 [arrowhead=none, color="black", style=dashed]
    node15876 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15876 -> node15877 [label=<<font color="black">true</font>> color="black"]
    node15876 -> node15878 [label=<<font color="black">false</font>> color="black"]
    node15877_name [shape=none, label=<<font color="black">Block[15877]</font>>]
    node15877_name -> node15877 [arrowhead=none, color="black", style=dashed]
    node15877 [shape=box, label=<<font color="black">[0] let mapfn = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15877 -> node15879 [color="black"]
    node15878_name [shape=none, label=<<font color="black">Block[15878]</font>>]
    node15878_name -> node15878 [arrowhead=none, color="black", style=dashed]
    node15878 [shape=box, label=<<font color="black">[0] let mapfn = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15878 -> node15879 [color="black"]
    node15879_name [shape=none, label=<<font color="black">Branch[15879]</font>>]
    node15879_name -> node15879 [arrowhead=none, color="black", style=dashed]
    node15879 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node15879 -> node15880 [label=<<font color="black">true</font>> color="black"]
    node15879 -> node15881 [label=<<font color="black">false</font>> color="black"]
    node15880_name [shape=none, label=<<font color="black">Block[15880]</font>>]
    node15880_name -> node15880 [arrowhead=none, color="black", style=dashed]
    node15880 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15880 -> node15882 [color="black"]
    node15881_name [shape=none, label=<<font color="black">Block[15881]</font>>]
    node15881_name -> node15881 [arrowhead=none, color="black", style=dashed]
    node15881 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15881 -> node15882 [color="black"]
    node15882_name [shape=none, label=<<font color="black">Block[15882]</font>>]
    node15882_name -> node15882 [arrowhead=none, color="black", style=dashed]
    node15882 [shape=box, label=<<font color="black">[0] let C = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15882 -> node15883 [color="black"]
    node15883_name [shape=none, label=<<font color="black">Call[15883]</font>>]
    node15883_name -> node15883 [arrowhead=none, color="black", style=dashed]
    node15883 [shape=cds, label=<<font color="black">%0 = clo&lt;IsConstructor&gt;(C)</font>> color="black" fillcolor="white", style=filled]
    node15883 -> node15884 [color="black"]
    node15884_name [shape=none, label=<<font color="black">Branch[15884]</font>>]
    node15884_name -> node15884 [arrowhead=none, color="black", style=dashed]
    node15884 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node15884 -> node15885 [label=<<font color="black">true</font>> color="black"]
    node15884 -> node15886 [label=<<font color="black">false</font>> color="black"]
    node15885_name [shape=none, label=<<font color="black">Block[15885]</font>>]
    node15885_name -> node15885 [arrowhead=none, color="black", style=dashed]
    node15885 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1053])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15885 -> cluster2385_exit [color="black"]
    node15886_name [shape=none, label=<<font color="black">Branch[15886]</font>>]
    node15886_name -> node15886 [arrowhead=none, color="black", style=dashed]
    node15886 [shape=diamond, label=<<font color="black">(= mapfn undefined)</font>> color="black" fillcolor="white", style=filled]
    node15886 -> node15887 [label=<<font color="black">true</font>> color="black"]
    node15886 -> node15888 [label=<<font color="black">false</font>> color="black"]
    node15887_name [shape=none, label=<<font color="black">Block[15887]</font>>]
    node15887_name -> node15887 [arrowhead=none, color="black", style=dashed]
    node15887 [shape=box, label=<<font color="black">[0] let mapping = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15887 -> node15892 [color="black"]
    node15888_name [shape=none, label=<<font color="black">Call[15888]</font>>]
    node15888_name -> node15888 [arrowhead=none, color="black", style=dashed]
    node15888 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(mapfn)</font>> color="black" fillcolor="white", style=filled]
    node15888 -> node15889 [color="black"]
    node15892_name [shape=none, label=<<font color="black">Call[15892]</font>>]
    node15892_name -> node15892 [arrowhead=none, color="black", style=dashed]
    node15892 [shape=cds, label=<<font color="black">%2 = clo&lt;GetMethod&gt;(source, @SYMBOL.iterator)</font>> color="black" fillcolor="white", style=filled]
    node15892 -> node15893 [color="black"]
    node15889_name [shape=none, label=<<font color="black">Branch[15889]</font>>]
    node15889_name -> node15889 [arrowhead=none, color="black", style=dashed]
    node15889 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node15889 -> node15890 [label=<<font color="black">true</font>> color="black"]
    node15889 -> node15891 [label=<<font color="black">false</font>> color="black"]
    node15893_name [shape=none, label=<<font color="black">Block[15893]</font>>]
    node15893_name -> node15893 [arrowhead=none, color="black", style=dashed]
    node15893 [shape=box, label=<<font color="black">[0] let usingIterator = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15893 -> node15894 [color="black"]
    node15890_name [shape=none, label=<<font color="black">Block[15890]</font>>]
    node15890_name -> node15890 [arrowhead=none, color="black", style=dashed]
    node15890 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1054])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15890 -> cluster2385_exit [color="black"]
    node15891_name [shape=none, label=<<font color="black">Block[15891]</font>>]
    node15891_name -> node15891 [arrowhead=none, color="black", style=dashed]
    node15891 [shape=box, label=<<font color="black">[0] let mapping = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15891 -> node15892 [color="black"]
    node15894_name [shape=none, label=<<font color="black">Branch[15894]</font>>]
    node15894_name -> node15894 [arrowhead=none, color="black", style=dashed]
    node15894 [shape=diamond, label=<<font color="black">(! (= usingIterator undefined))</font>> color="black" fillcolor="white", style=filled]
    node15894 -> node15895 [label=<<font color="black">true</font>> color="black"]
    node15894 -> node15909 [label=<<font color="black">false</font>> color="black"]
    node15895_name [shape=none, label=<<font color="black">Call[15895]</font>>]
    node15895_name -> node15895 [arrowhead=none, color="black", style=dashed]
    node15895 [shape=cds, label=<<font color="black">%3 = clo&lt;IterableToList&gt;(source, usingIterator)</font>> color="black" fillcolor="white", style=filled]
    node15895 -> node15896 [color="black"]
    node15909_name [shape=none, label=<<font color="black">Block[15909]</font>>]
    node15909_name -> node15909 [arrowhead=none, color="black", style=dashed]
    node15909 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15909 -> node15910 [color="black"]
    node15896_name [shape=none, label=<<font color="black">Block[15896]</font>>]
    node15896_name -> node15896 [arrowhead=none, color="black", style=dashed]
    node15896 [shape=box, label=<<font color="black">[0] let values = [? %3]<BR ALIGN="LEFT"/>[1] let len = values.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15896 -> node15897 [color="black"]
    node15910_name [shape=none, label=<<font color="black">Call[15910]</font>>]
    node15910_name -> node15910 [arrowhead=none, color="black", style=dashed]
    node15910 [shape=cds, label=<<font color="black">%8 = clo&lt;ToObject&gt;(source)</font>> color="black" fillcolor="white", style=filled]
    node15910 -> node15911 [color="black"]
    node15897_name [shape=none, label=<<font color="black">Call[15897]</font>>]
    node15897_name -> node15897 [arrowhead=none, color="black", style=dashed]
    node15897 [shape=cds, label=<<font color="black">%4 = clo&lt;TypedArrayCreate&gt;(C, (new [([number] len)])[#1055])</font>> color="black" fillcolor="white", style=filled]
    node15897 -> node15898 [color="black"]
    node15911_name [shape=none, label=<<font color="black">Block[15911]</font>>]
    node15911_name -> node15911 [arrowhead=none, color="black", style=dashed]
    node15911 [shape=box, label=<<font color="black">[0] let arrayLike = [! %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15911 -> node15912 [color="black"]
    node15898_name [shape=none, label=<<font color="black">Block[15898]</font>>]
    node15898_name -> node15898 [arrowhead=none, color="black", style=dashed]
    node15898 [shape=box, label=<<font color="black">[0] let targetObj = [? %4]<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15898 -> node15899 [color="black"]
    node15912_name [shape=none, label=<<font color="black">Call[15912]</font>>]
    node15912_name -> node15912 [arrowhead=none, color="black", style=dashed]
    node15912 [shape=cds, label=<<font color="black">%9 = clo&lt;LengthOfArrayLike&gt;(arrayLike)</font>> color="black" fillcolor="white", style=filled]
    node15912 -> node15913 [color="black"]
    node15899_name [shape=none, label=<<font color="black">Branch[15899]</font>>]
    node15899_name -> node15899 [arrowhead=none, color="black", style=dashed]
    node15899 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node15899 -> node15900 [label=<<font color="black">true</font>> color="black"]
    node15899 -> node15908 [label=<<font color="black">false</font>> color="black"]
    node15913_name [shape=none, label=<<font color="black">Block[15913]</font>>]
    node15913_name -> node15913 [arrowhead=none, color="black", style=dashed]
    node15913 [shape=box, label=<<font color="black">[0] let len = [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15913 -> node15914 [color="black"]
    node15900_name [shape=none, label=<<font color="black">Call[15900]</font>>]
    node15900_name -> node15900 [arrowhead=none, color="black", style=dashed]
    node15900 [shape=cds, label=<<font color="black">%5 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15900 -> node15901 [color="black"]
    node15908_name [shape=none, label=<<font color="black">Block[15908]</font>>]
    node15908_name -> node15908 [arrowhead=none, color="black", style=dashed]
    node15908 [shape=box, label=<<font color="black">[0] assert (yet &quot;_values_ is now an empty List.&quot;)<BR ALIGN="LEFT"/>[1] return targetObj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15908 -> cluster2385_exit [color="black"]
    node15914_name [shape=none, label=<<font color="black">Call[15914]</font>>]
    node15914_name -> node15914 [arrowhead=none, color="black", style=dashed]
    node15914 [shape=cds, label=<<font color="black">%10 = clo&lt;TypedArrayCreate&gt;(C, (new [([number] len)])[#1057])</font>> color="black" fillcolor="white", style=filled]
    node15914 -> node15915 [color="black"]
    node15901_name [shape=none, label=<<font color="black">Block[15901]</font>>]
    node15901_name -> node15901 [arrowhead=none, color="black", style=dashed]
    node15901 [shape=box, label=<<font color="black">[0] let Pk = [! %5]<BR ALIGN="LEFT"/>[1] (yet &quot;Let _kValue_ be the first element of _values_ and remove that element from _values_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15901 -> node15902 [color="black"]
    node15915_name [shape=none, label=<<font color="black">Block[15915]</font>>]
    node15915_name -> node15915 [arrowhead=none, color="black", style=dashed]
    node15915 [shape=box, label=<<font color="black">[0] let targetObj = [? %10]<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15915 -> node15916 [color="black"]
    node15902_name [shape=none, label=<<font color="black">Branch[15902]</font>>]
    node15902_name -> node15902 [arrowhead=none, color="black", style=dashed]
    node15902 [shape=diamond, label=<<font color="black">(= mapping true)</font>> color="black" fillcolor="white", style=filled]
    node15902 -> node15903 [label=<<font color="black">true</font>> color="black"]
    node15902 -> node15905 [label=<<font color="black">false</font>> color="black"]
    node15916_name [shape=none, label=<<font color="black">Branch[15916]</font>>]
    node15916_name -> node15916 [arrowhead=none, color="black", style=dashed]
    node15916 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node15916 -> node15917 [label=<<font color="black">true</font>> color="black"]
    node15916 -> node15927 [label=<<font color="black">false</font>> color="black"]
    node15903_name [shape=none, label=<<font color="black">Call[15903]</font>>]
    node15903_name -> node15903 [arrowhead=none, color="black", style=dashed]
    node15903 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(mapfn, thisArg, (new [kValue, ([number] k)])[#1056])</font>> color="black" fillcolor="white", style=filled]
    node15903 -> node15904 [color="black"]
    node15905_name [shape=none, label=<<font color="black">Block[15905]</font>>]
    node15905_name -> node15905 [arrowhead=none, color="black", style=dashed]
    node15905 [shape=box, label=<<font color="black">[0] let mappedValue = kValue<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15905 -> node15906 [color="black"]
    node15917_name [shape=none, label=<<font color="black">Call[15917]</font>>]
    node15917_name -> node15917 [arrowhead=none, color="black", style=dashed]
    node15917 [shape=cds, label=<<font color="black">%11 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node15917 -> node15918 [color="black"]
    node15927_name [shape=none, label=<<font color="black">Block[15927]</font>>]
    node15927_name -> node15927 [arrowhead=none, color="black", style=dashed]
    node15927 [shape=box, label=<<font color="black">[0] return targetObj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15927 -> cluster2385_exit [color="black"]
    node15904_name [shape=none, label=<<font color="black">Block[15904]</font>>]
    node15904_name -> node15904 [arrowhead=none, color="black", style=dashed]
    node15904 [shape=box, label=<<font color="black">[0] let mappedValue = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15904 -> node15906 [color="black"]
    node15906_name [shape=none, label=<<font color="black">Call[15906]</font>>]
    node15906_name -> node15906 [arrowhead=none, color="black", style=dashed]
    node15906 [shape=cds, label=<<font color="black">%7 = clo&lt;Set&gt;(targetObj, Pk, mappedValue, true)</font>> color="black" fillcolor="white", style=filled]
    node15906 -> node15907 [color="black"]
    node15918_name [shape=none, label=<<font color="black">Block[15918]</font>>]
    node15918_name -> node15918 [arrowhead=none, color="black", style=dashed]
    node15918 [shape=box, label=<<font color="black">[0] let Pk = [! %11]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15918 -> node15919 [color="black"]
    node15907_name [shape=none, label=<<font color="black">Block[15907]</font>>]
    node15907_name -> node15907 [arrowhead=none, color="black", style=dashed]
    node15907 [shape=box, label=<<font color="black">[0] [? %7]<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15907 -> node15899 [color="black"]
    node15919_name [shape=none, label=<<font color="black">Call[15919]</font>>]
    node15919_name -> node15919 [arrowhead=none, color="black", style=dashed]
    node15919 [shape=cds, label=<<font color="black">%12 = clo&lt;Get&gt;(arrayLike, Pk)</font>> color="black" fillcolor="white", style=filled]
    node15919 -> node15920 [color="black"]
    node15920_name [shape=none, label=<<font color="black">Block[15920]</font>>]
    node15920_name -> node15920 [arrowhead=none, color="black", style=dashed]
    node15920 [shape=box, label=<<font color="black">[0] let kValue = [? %12]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15920 -> node15921 [color="black"]
    node15921_name [shape=none, label=<<font color="black">Branch[15921]</font>>]
    node15921_name -> node15921 [arrowhead=none, color="black", style=dashed]
    node15921 [shape=diamond, label=<<font color="black">(= mapping true)</font>> color="black" fillcolor="white", style=filled]
    node15921 -> node15922 [label=<<font color="black">true</font>> color="black"]
    node15921 -> node15924 [label=<<font color="black">false</font>> color="black"]
    node15922_name [shape=none, label=<<font color="black">Call[15922]</font>>]
    node15922_name -> node15922 [arrowhead=none, color="black", style=dashed]
    node15922 [shape=cds, label=<<font color="black">%13 = clo&lt;Call&gt;(mapfn, thisArg, (new [kValue, ([number] k)])[#1058])</font>> color="black" fillcolor="white", style=filled]
    node15922 -> node15923 [color="black"]
    node15924_name [shape=none, label=<<font color="black">Block[15924]</font>>]
    node15924_name -> node15924 [arrowhead=none, color="black", style=dashed]
    node15924 [shape=box, label=<<font color="black">[0] let mappedValue = kValue<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15924 -> node15925 [color="black"]
    node15923_name [shape=none, label=<<font color="black">Block[15923]</font>>]
    node15923_name -> node15923 [arrowhead=none, color="black", style=dashed]
    node15923 [shape=box, label=<<font color="black">[0] let mappedValue = [? %13]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15923 -> node15925 [color="black"]
    node15925_name [shape=none, label=<<font color="black">Call[15925]</font>>]
    node15925_name -> node15925 [arrowhead=none, color="black", style=dashed]
    node15925 [shape=cds, label=<<font color="black">%14 = clo&lt;Set&gt;(targetObj, Pk, mappedValue, true)</font>> color="black" fillcolor="white", style=filled]
    node15925 -> node15926 [color="black"]
    node15926_name [shape=none, label=<<font color="black">Block[15926]</font>>]
    node15926_name -> node15926 [arrowhead=none, color="black", style=dashed]
    node15926 [shape=box, label=<<font color="black">[0] [? %14]<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15926 -> node15916 [color="black"]
  }
}