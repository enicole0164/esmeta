digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1140 {
    label = "def <INTERNAL>:ModuleNamespaceExoticObject.GetOwnProperty(O: ModuleNamespaceExoticObject, P: Symbol | String): Normal[PropertyDescriptor | Undefined] | Abrupt"
    style = rounded
    cluster1140_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1140_entry_name -> cluster1140_entry [arrowhead=none, color="black", style=dashed]
    cluster1140_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1140_entry -> node4929 [color="black"]
    cluster1140_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1140_exit_name -> cluster1140_exit [arrowhead=none, color="black", style=dashed]
    cluster1140_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4929_name [shape=none, label=<<font color="black">Branch[4929]</font>>]
    node4929_name -> node4929 [arrowhead=none, color="black", style=dashed]
    node4929 [shape=diamond, label=<<font color="black">(= (typeof P) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node4929 -> node4930 [label=<<font color="black">true</font>> color="black"]
    node4929 -> node4932 [label=<<font color="black">false</font>> color="black"]
    node4930_name [shape=none, label=<<font color="black">Call[4930]</font>>]
    node4930_name -> node4930 [arrowhead=none, color="black", style=dashed]
    node4930 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryGetOwnProperty&gt;(O, P)</font>> color="black" fillcolor="white", style=filled]
    node4930 -> node4931 [color="black"]
    node4932_name [shape=none, label=<<font color="black">Block[4932]</font>>]
    node4932_name -> node4932 [arrowhead=none, color="black", style=dashed]
    node4932 [shape=box, label=<<font color="black">[0] let exports = O.Exports<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4932 -> node4933 [color="black"]
    node4931_name [shape=none, label=<<font color="black">Block[4931]</font>>]
    node4931_name -> node4931 [arrowhead=none, color="black", style=dashed]
    node4931 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4931 -> cluster1140_exit [color="black"]
    node4933_name [shape=none, label=<<font color="black">Branch[4933]</font>>]
    node4933_name -> node4933 [arrowhead=none, color="black", style=dashed]
    node4933 [shape=diamond, label=<<font color="black">(! (contains exports P))</font>> color="black" fillcolor="white", style=filled]
    node4933 -> node4934 [label=<<font color="black">true</font>> color="black"]
    node4933 -> node4935 [label=<<font color="black">false</font>> color="black"]
    node4934_name [shape=none, label=<<font color="black">Block[4934]</font>>]
    node4934_name -> node4934 [arrowhead=none, color="black", style=dashed]
    node4934 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4934 -> cluster1140_exit [color="black"]
    node4935_name [shape=none, label=<<font color="black">Call[4935]</font>>]
    node4935_name -> node4935 [arrowhead=none, color="black", style=dashed]
    node4935 [shape=cds, label=<<font color="black">%1 = O-&gt;Get(P, O)</font>> color="black" fillcolor="white", style=filled]
    node4935 -> node4936 [color="black"]
    node4936_name [shape=none, label=<<font color="black">Block[4936]</font>>]
    node4936_name -> node4936 [arrowhead=none, color="black", style=dashed]
    node4936 [shape=box, label=<<font color="black">[0] let value = [? %1]<BR ALIGN="LEFT"/>[1] return (new PropertyDescriptor(&quot;Value&quot; -&gt; value, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; true, &quot;Configurable&quot; -&gt; false))[#476]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4936 -> cluster1140_exit [color="black"]
  }
}