digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2044 {
    label = "def <BUILTIN>:INTRINSICS.Symbol(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2044_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2044_entry_name -> cluster2044_entry [arrowhead=none, color="black", style=dashed]
    cluster2044_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2044_entry -> node11647 [color="black"]
    cluster2044_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2044_exit_name -> cluster2044_exit [arrowhead=none, color="black", style=dashed]
    cluster2044_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11647_name [shape=none, label=<<font color="black">Branch[11647]</font>>]
    node11647_name -> node11647 [arrowhead=none, color="black", style=dashed]
    node11647 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11647 -> node11648 [label=<<font color="black">true</font>> color="black"]
    node11647 -> node11649 [label=<<font color="black">false</font>> color="black"]
    node11648_name [shape=none, label=<<font color="black">Block[11648]</font>>]
    node11648_name -> node11648 [arrowhead=none, color="black", style=dashed]
    node11648 [shape=box, label=<<font color="black">[0] let description = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11648 -> node11650 [color="black"]
    node11649_name [shape=none, label=<<font color="black">Block[11649]</font>>]
    node11649_name -> node11649 [arrowhead=none, color="black", style=dashed]
    node11649 [shape=box, label=<<font color="black">[0] let description = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11649 -> node11650 [color="black"]
    node11650_name [shape=none, label=<<font color="black">Branch[11650]</font>>]
    node11650_name -> node11650 [arrowhead=none, color="black", style=dashed]
    node11650 [shape=diamond, label=<<font color="black">(! (= NewTarget undefined))</font>> color="black" fillcolor="white", style=filled]
    node11650 -> node11651 [label=<<font color="black">true</font>> color="black"]
    node11650 -> node11652 [label=<<font color="black">false</font>> color="black"]
    node11651_name [shape=none, label=<<font color="black">Block[11651]</font>>]
    node11651_name -> node11651 [arrowhead=none, color="black", style=dashed]
    node11651 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#916])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11651 -> cluster2044_exit [color="black"]
    node11652_name [shape=none, label=<<font color="black">Branch[11652]</font>>]
    node11652_name -> node11652 [arrowhead=none, color="black", style=dashed]
    node11652 [shape=diamond, label=<<font color="black">(= description undefined)</font>> color="black" fillcolor="white", style=filled]
    node11652 -> node11653 [label=<<font color="black">true</font>> color="black"]
    node11652 -> node11654 [label=<<font color="black">false</font>> color="black"]
    node11653_name [shape=none, label=<<font color="black">Block[11653]</font>>]
    node11653_name -> node11653 [arrowhead=none, color="black", style=dashed]
    node11653 [shape=box, label=<<font color="black">[0] let descString = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11653 -> node11656 [color="black"]
    node11654_name [shape=none, label=<<font color="black">Call[11654]</font>>]
    node11654_name -> node11654 [arrowhead=none, color="black", style=dashed]
    node11654 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(description)</font>> color="black" fillcolor="white", style=filled]
    node11654 -> node11655 [color="black"]
    node11656_name [shape=none, label=<<font color="black">Block[11656]</font>>]
    node11656_name -> node11656 [arrowhead=none, color="black", style=dashed]
    node11656 [shape=box, label=<<font color="black">[0] return (new 'descString)[#917]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11656 -> cluster2044_exit [color="black"]
    node11655_name [shape=none, label=<<font color="black">Block[11655]</font>>]
    node11655_name -> node11655 [arrowhead=none, color="black", style=dashed]
    node11655 [shape=box, label=<<font color="black">[0] let descString = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11655 -> node11656 [color="black"]
  }
}