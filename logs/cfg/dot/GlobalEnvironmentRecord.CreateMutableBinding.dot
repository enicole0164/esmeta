digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster999 {
    label = "def <CONC>:GlobalEnvironmentRecord.CreateMutableBinding(envRec: GlobalEnvironmentRecord, N: String, D: Boolean): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster999_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster999_entry_name -> cluster999_entry [arrowhead=none, color="black", style=dashed]
    cluster999_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster999_entry -> node3700 [color="black"]
    cluster999_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster999_exit_name -> cluster999_exit [arrowhead=none, color="black", style=dashed]
    cluster999_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3700_name [shape=none, label=<<font color="black">Block[3700]</font>>]
    node3700_name -> node3700 [arrowhead=none, color="black", style=dashed]
    node3700 [shape=box, label=<<font color="black">[0] let DclRec = envRec.DeclarativeRecord<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3700 -> node3701 [color="black"]
    node3701_name [shape=none, label=<<font color="black">Call[3701]</font>>]
    node3701_name -> node3701 [arrowhead=none, color="black", style=dashed]
    node3701 [shape=cds, label=<<font color="black">%0 = DclRec-&gt;HasBinding(N)</font>> color="black" fillcolor="white", style=filled]
    node3701 -> node3702 [color="black"]
    node3702_name [shape=none, label=<<font color="black">Branch[3702]</font>>]
    node3702_name -> node3702 [arrowhead=none, color="black", style=dashed]
    node3702 [shape=diamond, label=<<font color="black">(= [! %0] true)</font>> color="black" fillcolor="white", style=filled]
    node3702 -> node3703 [label=<<font color="black">true</font>> color="black"]
    node3702 -> node3704 [label=<<font color="black">false</font>> color="black"]
    node3703_name [shape=none, label=<<font color="black">Block[3703]</font>>]
    node3703_name -> node3703 [arrowhead=none, color="black", style=dashed]
    node3703 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#377])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3703 -> cluster999_exit [color="black"]
    node3704_name [shape=none, label=<<font color="black">Call[3704]</font>>]
    node3704_name -> node3704 [arrowhead=none, color="black", style=dashed]
    node3704 [shape=cds, label=<<font color="black">%1 = DclRec-&gt;CreateMutableBinding(N, D)</font>> color="black" fillcolor="white", style=filled]
    node3704 -> node3705 [color="black"]
    node3705_name [shape=none, label=<<font color="black">Block[3705]</font>>]
    node3705_name -> node3705 [arrowhead=none, color="black", style=dashed]
    node3705 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3705 -> cluster999_exit [color="black"]
  }
}