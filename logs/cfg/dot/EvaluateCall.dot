digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1271 {
    label = "def EvaluateCall(func: ESValue, ref: ESValue | ReferenceRecord, arguments: Ast, tailPosition: Boolean): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1271_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1271_entry_name -> cluster1271_entry [arrowhead=none, color="black", style=dashed]
    cluster1271_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1271_entry -> node5894 [color="black"]
    cluster1271_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1271_exit_name -> cluster1271_exit [arrowhead=none, color="black", style=dashed]
    cluster1271_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5894_name [shape=none, label=<<font color="black">Branch[5894]</font>>]
    node5894_name -> node5894 [arrowhead=none, color="black", style=dashed]
    node5894 [shape=diamond, label=<<font color="black">(? ref: &quot;ReferenceRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5894 -> node5895 [label=<<font color="black">true</font>> color="black"]
    node5894 -> node5902 [label=<<font color="black">false</font>> color="black"]
    node5895_name [shape=none, label=<<font color="black">Call[5895]</font>>]
    node5895_name -> node5895 [arrowhead=none, color="black", style=dashed]
    node5895 [shape=cds, label=<<font color="black">%0 = clo&lt;IsPropertyReference&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node5895 -> node5896 [color="black"]
    node5902_name [shape=none, label=<<font color="black">Block[5902]</font>>]
    node5902_name -> node5902 [arrowhead=none, color="black", style=dashed]
    node5902 [shape=box, label=<<font color="black">[0] let thisValue = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5902 -> node5903 [color="black"]
    node5896_name [shape=none, label=<<font color="black">Branch[5896]</font>>]
    node5896_name -> node5896 [arrowhead=none, color="black", style=dashed]
    node5896 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node5896 -> node5897 [label=<<font color="black">true</font>> color="black"]
    node5896 -> node5899 [label=<<font color="black">false</font>> color="black"]
    node5903_name [shape=none, label=<<font color="black">Call[5903]</font>>]
    node5903_name -> node5903 [arrowhead=none, color="black", style=dashed]
    node5903 [shape=cds, label=<<font color="black">%3 = arguments-&gt;ArgumentListEvaluation()</font>> color="black" fillcolor="white", style=filled]
    node5903 -> node5904 [color="black"]
    node5897_name [shape=none, label=<<font color="black">Call[5897]</font>>]
    node5897_name -> node5897 [arrowhead=none, color="black", style=dashed]
    node5897 [shape=cds, label=<<font color="black">%1 = clo&lt;GetThisValue&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node5897 -> node5898 [color="black"]
    node5899_name [shape=none, label=<<font color="black">Block[5899]</font>>]
    node5899_name -> node5899 [arrowhead=none, color="black", style=dashed]
    node5899 [shape=box, label=<<font color="black">[0] let refEnv = ref.Base<BR ALIGN="LEFT"/>[1] assert (? refEnv: &quot;EnvironmentRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5899 -> node5900 [color="black"]
    node5904_name [shape=none, label=<<font color="black">Block[5904]</font>>]
    node5904_name -> node5904 [arrowhead=none, color="black", style=dashed]
    node5904 [shape=box, label=<<font color="black">[0] let argList = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5904 -> node5905 [color="black"]
    node5898_name [shape=none, label=<<font color="black">Block[5898]</font>>]
    node5898_name -> node5898 [arrowhead=none, color="black", style=dashed]
    node5898 [shape=box, label=<<font color="black">[0] let thisValue = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5898 -> node5903 [color="black"]
    node5900_name [shape=none, label=<<font color="black">Call[5900]</font>>]
    node5900_name -> node5900 [arrowhead=none, color="black", style=dashed]
    node5900 [shape=cds, label=<<font color="black">%2 = refEnv-&gt;WithBaseObject()</font>> color="black" fillcolor="white", style=filled]
    node5900 -> node5901 [color="black"]
    node5905_name [shape=none, label=<<font color="black">Branch[5905]</font>>]
    node5905_name -> node5905 [arrowhead=none, color="black", style=dashed]
    node5905 [shape=diamond, label=<<font color="black">(! (= (typeof func) @Object))</font>> color="black" fillcolor="white", style=filled]
    node5905 -> node5906 [label=<<font color="black">true</font>> color="black"]
    node5905 -> node5907 [label=<<font color="black">false</font>> color="black"]
    node5901_name [shape=none, label=<<font color="black">Block[5901]</font>>]
    node5901_name -> node5901 [arrowhead=none, color="black", style=dashed]
    node5901 [shape=box, label=<<font color="black">[0] let thisValue = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5901 -> node5903 [color="black"]
    node5906_name [shape=none, label=<<font color="black">Block[5906]</font>>]
    node5906_name -> node5906 [arrowhead=none, color="black", style=dashed]
    node5906 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#571])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5906 -> cluster1271_exit [color="black"]
    node5907_name [shape=none, label=<<font color="black">Call[5907]</font>>]
    node5907_name -> node5907 [arrowhead=none, color="black", style=dashed]
    node5907 [shape=cds, label=<<font color="black">%4 = clo&lt;IsCallable&gt;(func)</font>> color="black" fillcolor="white", style=filled]
    node5907 -> node5908 [color="black"]
    node5908_name [shape=none, label=<<font color="black">Branch[5908]</font>>]
    node5908_name -> node5908 [arrowhead=none, color="black", style=dashed]
    node5908 [shape=diamond, label=<<font color="black">(= %4 false)</font>> color="black" fillcolor="white", style=filled]
    node5908 -> node5909 [label=<<font color="black">true</font>> color="black"]
    node5908 -> node5910 [label=<<font color="black">false</font>> color="black"]
    node5909_name [shape=none, label=<<font color="black">Block[5909]</font>>]
    node5909_name -> node5909 [arrowhead=none, color="black", style=dashed]
    node5909 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#572])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5909 -> cluster1271_exit [color="black"]
    node5910_name [shape=none, label=<<font color="black">Branch[5910]</font>>]
    node5910_name -> node5910 [arrowhead=none, color="black", style=dashed]
    node5910 [shape=diamond, label=<<font color="black">(= tailPosition true)</font>> color="black" fillcolor="white", style=filled]
    node5910 -> node5911 [label=<<font color="black">true</font>> color="black"]
    node5910 -> node5912 [label=<<font color="black">false</font>> color="black"]
    node5911_name [shape=none, label=<<font color="black">Call[5911]</font>>]
    node5911_name -> node5911 [arrowhead=none, color="black", style=dashed]
    node5911 [shape=cds, label=<<font color="black">%5 = clo&lt;PrepareForTailCall&gt;()</font>> color="black" fillcolor="white", style=filled]
    node5911 -> node5912 [color="black"]
    node5912_name [shape=none, label=<<font color="black">Call[5912]</font>>]
    node5912_name -> node5912 [arrowhead=none, color="black", style=dashed]
    node5912 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(func, thisValue, argList)</font>> color="black" fillcolor="white", style=filled]
    node5912 -> node5913 [color="black"]
    node5913_name [shape=none, label=<<font color="black">Block[5913]</font>>]
    node5913_name -> node5913 [arrowhead=none, color="black", style=dashed]
    node5913 [shape=box, label=<<font color="black">[0] return [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5913 -> cluster1271_exit [color="black"]
  }
}