digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2053 {
    label = "def <BUILTIN>:INTRINSICS.Error(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2053_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2053_entry_name -> cluster2053_entry [arrowhead=none, color="black", style=dashed]
    cluster2053_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2053_entry -> node11691 [color="black"]
    cluster2053_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2053_exit_name -> cluster2053_exit [arrowhead=none, color="black", style=dashed]
    cluster2053_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11691_name [shape=none, label=<<font color="black">Branch[11691]</font>>]
    node11691_name -> node11691 [arrowhead=none, color="black", style=dashed]
    node11691 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11691 -> node11692 [label=<<font color="black">true</font>> color="black"]
    node11691 -> node11693 [label=<<font color="black">false</font>> color="black"]
    node11692_name [shape=none, label=<<font color="black">Block[11692]</font>>]
    node11692_name -> node11692 [arrowhead=none, color="black", style=dashed]
    node11692 [shape=box, label=<<font color="black">[0] let message = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11692 -> node11694 [color="black"]
    node11693_name [shape=none, label=<<font color="black">Block[11693]</font>>]
    node11693_name -> node11693 [arrowhead=none, color="black", style=dashed]
    node11693 [shape=box, label=<<font color="black">[0] let message = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11693 -> node11694 [color="black"]
    node11694_name [shape=none, label=<<font color="black">Branch[11694]</font>>]
    node11694_name -> node11694 [arrowhead=none, color="black", style=dashed]
    node11694 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11694 -> node11695 [label=<<font color="black">true</font>> color="black"]
    node11694 -> node11696 [label=<<font color="black">false</font>> color="black"]
    node11695_name [shape=none, label=<<font color="black">Block[11695]</font>>]
    node11695_name -> node11695 [arrowhead=none, color="black", style=dashed]
    node11695 [shape=box, label=<<font color="black">[0] let options = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11695 -> node11697 [color="black"]
    node11696_name [shape=none, label=<<font color="black">Block[11696]</font>>]
    node11696_name -> node11696 [arrowhead=none, color="black", style=dashed]
    node11696 [shape=box, label=<<font color="black">[0] let options = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11696 -> node11697 [color="black"]
    node11697_name [shape=none, label=<<font color="black">Branch[11697]</font>>]
    node11697_name -> node11697 [arrowhead=none, color="black", style=dashed]
    node11697 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node11697 -> node11698 [label=<<font color="black">true</font>> color="black"]
    node11697 -> node11699 [label=<<font color="black">false</font>> color="black"]
    node11698_name [shape=none, label=<<font color="black">Block[11698]</font>>]
    node11698_name -> node11698 [arrowhead=none, color="black", style=dashed]
    node11698 [shape=box, label=<<font color="black">[0] let newTarget = @EXECUTION_STACK[0].Function<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11698 -> node11700 [color="black"]
    node11699_name [shape=none, label=<<font color="black">Block[11699]</font>>]
    node11699_name -> node11699 [arrowhead=none, color="black", style=dashed]
    node11699 [shape=box, label=<<font color="black">[0] let newTarget = NewTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11699 -> node11700 [color="black"]
    node11700_name [shape=none, label=<<font color="black">Call[11700]</font>>]
    node11700_name -> node11700 [arrowhead=none, color="black", style=dashed]
    node11700 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryCreateFromConstructor&gt;(newTarget, &quot;%Error.prototype%&quot;, (new [&quot;ErrorData&quot;])[#920])</font>> color="black" fillcolor="white", style=filled]
    node11700 -> node11701 [color="black"]
    node11701_name [shape=none, label=<<font color="black">Block[11701]</font>>]
    node11701_name -> node11701 [arrowhead=none, color="black", style=dashed]
    node11701 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11701 -> node11702 [color="black"]
    node11702_name [shape=none, label=<<font color="black">Branch[11702]</font>>]
    node11702_name -> node11702 [arrowhead=none, color="black", style=dashed]
    node11702 [shape=diamond, label=<<font color="black">(! (= message undefined))</font>> color="black" fillcolor="white", style=filled]
    node11702 -> node11703 [label=<<font color="black">true</font>> color="black"]
    node11702 -> node11706 [label=<<font color="black">false</font>> color="black"]
    node11703_name [shape=none, label=<<font color="black">Call[11703]</font>>]
    node11703_name -> node11703 [arrowhead=none, color="black", style=dashed]
    node11703 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(message)</font>> color="black" fillcolor="white", style=filled]
    node11703 -> node11704 [color="black"]
    node11706_name [shape=none, label=<<font color="black">Call[11706]</font>>]
    node11706_name -> node11706 [arrowhead=none, color="black", style=dashed]
    node11706 [shape=cds, label=<<font color="black">%3 = clo&lt;InstallErrorCause&gt;(O, options)</font>> color="black" fillcolor="white", style=filled]
    node11706 -> node11707 [color="black"]
    node11704_name [shape=none, label=<<font color="black">Block[11704]</font>>]
    node11704_name -> node11704 [arrowhead=none, color="black", style=dashed]
    node11704 [shape=box, label=<<font color="black">[0] let msg = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11704 -> node11705 [color="black"]
    node11707_name [shape=none, label=<<font color="black">Block[11707]</font>>]
    node11707_name -> node11707 [arrowhead=none, color="black", style=dashed]
    node11707 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/>[1] return O<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11707 -> cluster2053_exit [color="black"]
    node11705_name [shape=none, label=<<font color="black">Call[11705]</font>>]
    node11705_name -> node11705 [arrowhead=none, color="black", style=dashed]
    node11705 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateNonEnumerableDataPropertyOrThrow&gt;(O, &quot;message&quot;, msg)</font>> color="black" fillcolor="white", style=filled]
    node11705 -> node11706 [color="black"]
  }
}