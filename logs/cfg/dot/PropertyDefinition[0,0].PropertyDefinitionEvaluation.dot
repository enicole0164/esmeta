digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1234 {
    label = "def <SYNTAX>:PropertyDefinition[0,0].PropertyDefinitionEvaluation(this: Ast:PropertyDefinition[0,0], object: Unknown): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1234_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1234_entry_name -> cluster1234_entry [arrowhead=none, color="black", style=dashed]
    cluster1234_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1234_entry -> node5598 [color="black"]
    cluster1234_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1234_exit_name -> cluster1234_exit [arrowhead=none, color="black", style=dashed]
    cluster1234_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5598_name [shape=none, label=<<font color="black">Call[5598]</font>>]
    node5598_name -> node5598 [arrowhead=none, color="black", style=dashed]
    node5598 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;StringValue()</font>> color="black" fillcolor="white", style=filled]
    node5598 -> node5599 [color="black"]
    node5599_name [shape=none, label=<<font color="black">Block[5599]</font>>]
    node5599_name -> node5599 [arrowhead=none, color="black", style=dashed]
    node5599 [shape=box, label=<<font color="black">[0] let propName = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5599 -> node5600 [color="black"]
    node5600_name [shape=none, label=<<font color="black">Call[5600]</font>>]
    node5600_name -> node5600 [arrowhead=none, color="black", style=dashed]
    node5600 [shape=cds, label=<<font color="black">%1 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5600 -> node5601 [color="black"]
    node5601_name [shape=none, label=<<font color="black">Block[5601]</font>>]
    node5601_name -> node5601 [arrowhead=none, color="black", style=dashed]
    node5601 [shape=box, label=<<font color="black">[0] let exprValue = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5601 -> node5602 [color="black"]
    node5602_name [shape=none, label=<<font color="black">Call[5602]</font>>]
    node5602_name -> node5602 [arrowhead=none, color="black", style=dashed]
    node5602 [shape=cds, label=<<font color="black">%2 = clo&lt;GetValue&gt;(exprValue)</font>> color="black" fillcolor="white", style=filled]
    node5602 -> node5603 [color="black"]
    node5603_name [shape=none, label=<<font color="black">Block[5603]</font>>]
    node5603_name -> node5603 [arrowhead=none, color="black", style=dashed]
    node5603 [shape=box, label=<<font color="black">[0] let propValue = [? %2]<BR ALIGN="LEFT"/>[1] assert (yet &quot;_object_ is an ordinary, extensible object with no non-configurable properties.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5603 -> node5604 [color="black"]
    node5604_name [shape=none, label=<<font color="black">Call[5604]</font>>]
    node5604_name -> node5604 [arrowhead=none, color="black", style=dashed]
    node5604 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateDataPropertyOrThrow&gt;(object, propName, propValue)</font>> color="black" fillcolor="white", style=filled]
    node5604 -> node5605 [color="black"]
    node5605_name [shape=none, label=<<font color="black">Block[5605]</font>>]
    node5605_name -> node5605 [arrowhead=none, color="black", style=dashed]
    node5605 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5605 -> cluster1234_exit [color="black"]
  }
}