digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2540 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.store(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2540_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2540_entry_name -> cluster2540_entry [arrowhead=none, color="black", style=dashed]
    cluster2540_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2540_entry -> node18137 [color="black"]
    cluster2540_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2540_exit_name -> cluster2540_exit [arrowhead=none, color="black", style=dashed]
    cluster2540_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18137_name [shape=none, label=<<font color="black">Branch[18137]</font>>]
    node18137_name -> node18137 [arrowhead=none, color="black", style=dashed]
    node18137 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18137 -> node18138 [label=<<font color="black">true</font>> color="black"]
    node18137 -> node18139 [label=<<font color="black">false</font>> color="black"]
    node18138_name [shape=none, label=<<font color="black">Block[18138]</font>>]
    node18138_name -> node18138 [arrowhead=none, color="black", style=dashed]
    node18138 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18138 -> node18140 [color="black"]
    node18139_name [shape=none, label=<<font color="black">Block[18139]</font>>]
    node18139_name -> node18139 [arrowhead=none, color="black", style=dashed]
    node18139 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18139 -> node18140 [color="black"]
    node18140_name [shape=none, label=<<font color="black">Branch[18140]</font>>]
    node18140_name -> node18140 [arrowhead=none, color="black", style=dashed]
    node18140 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18140 -> node18141 [label=<<font color="black">true</font>> color="black"]
    node18140 -> node18142 [label=<<font color="black">false</font>> color="black"]
    node18141_name [shape=none, label=<<font color="black">Block[18141]</font>>]
    node18141_name -> node18141 [arrowhead=none, color="black", style=dashed]
    node18141 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18141 -> node18143 [color="black"]
    node18142_name [shape=none, label=<<font color="black">Block[18142]</font>>]
    node18142_name -> node18142 [arrowhead=none, color="black", style=dashed]
    node18142 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18142 -> node18143 [color="black"]
    node18143_name [shape=none, label=<<font color="black">Branch[18143]</font>>]
    node18143_name -> node18143 [arrowhead=none, color="black", style=dashed]
    node18143 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18143 -> node18144 [label=<<font color="black">true</font>> color="black"]
    node18143 -> node18145 [label=<<font color="black">false</font>> color="black"]
    node18144_name [shape=none, label=<<font color="black">Block[18144]</font>>]
    node18144_name -> node18144 [arrowhead=none, color="black", style=dashed]
    node18144 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18144 -> node18146 [color="black"]
    node18145_name [shape=none, label=<<font color="black">Block[18145]</font>>]
    node18145_name -> node18145 [arrowhead=none, color="black", style=dashed]
    node18145 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18145 -> node18146 [color="black"]
    node18146_name [shape=none, label=<<font color="black">Call[18146]</font>>]
    node18146_name -> node18146 [arrowhead=none, color="black", style=dashed]
    node18146 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateIntegerTypedArray&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18146 -> node18147 [color="black"]
    node18147_name [shape=none, label=<<font color="black">Block[18147]</font>>]
    node18147_name -> node18147 [arrowhead=none, color="black", style=dashed]
    node18147 [shape=box, label=<<font color="black">[0] let buffer = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18147 -> node18148 [color="black"]
    node18148_name [shape=none, label=<<font color="black">Call[18148]</font>>]
    node18148_name -> node18148 [arrowhead=none, color="black", style=dashed]
    node18148 [shape=cds, label=<<font color="black">%1 = clo&lt;ValidateAtomicAccess&gt;(typedArray, index)</font>> color="black" fillcolor="white", style=filled]
    node18148 -> node18149 [color="black"]
    node18149_name [shape=none, label=<<font color="black">Block[18149]</font>>]
    node18149_name -> node18149 [arrowhead=none, color="black", style=dashed]
    node18149 [shape=box, label=<<font color="black">[0] let indexedPosition = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18149 -> node18150 [color="black"]
    node18150_name [shape=none, label=<<font color="black">Branch[18150]</font>>]
    node18150_name -> node18150 [arrowhead=none, color="black", style=dashed]
    node18150 [shape=diamond, label=<<font color="black">(= typedArray.ContentType ~BigInt~)</font>> color="black" fillcolor="white", style=filled]
    node18150 -> node18151 [label=<<font color="black">true</font>> color="black"]
    node18150 -> node18153 [label=<<font color="black">false</font>> color="black"]
    node18151_name [shape=none, label=<<font color="black">Call[18151]</font>>]
    node18151_name -> node18151 [arrowhead=none, color="black", style=dashed]
    node18151 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBigInt&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node18151 -> node18152 [color="black"]
    node18153_name [shape=none, label=<<font color="black">Call[18153]</font>>]
    node18153_name -> node18153 [arrowhead=none, color="black", style=dashed]
    node18153 [shape=cds, label=<<font color="black">%3 = clo&lt;ToIntegerOrInfinity&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node18153 -> node18154 [color="black"]
    node18152_name [shape=none, label=<<font color="black">Block[18152]</font>>]
    node18152_name -> node18152 [arrowhead=none, color="black", style=dashed]
    node18152 [shape=box, label=<<font color="black">[0] let v = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18152 -> node18155 [color="black"]
    node18154_name [shape=none, label=<<font color="black">Block[18154]</font>>]
    node18154_name -> node18154 [arrowhead=none, color="black", style=dashed]
    node18154 [shape=box, label=<<font color="black">[0] let v = ([number] [? %3])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18154 -> node18155 [color="black"]
    node18155_name [shape=none, label=<<font color="black">Call[18155]</font>>]
    node18155_name -> node18155 [arrowhead=none, color="black", style=dashed]
    node18155 [shape=cds, label=<<font color="black">%4 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node18155 -> node18156 [color="black"]
    node18156_name [shape=none, label=<<font color="black">Branch[18156]</font>>]
    node18156_name -> node18156 [arrowhead=none, color="black", style=dashed]
    node18156 [shape=diamond, label=<<font color="black">(= %4 true)</font>> color="black" fillcolor="white", style=filled]
    node18156 -> node18157 [label=<<font color="black">true</font>> color="black"]
    node18156 -> node18158 [label=<<font color="black">false</font>> color="black"]
    node18157_name [shape=none, label=<<font color="black">Block[18157]</font>>]
    node18157_name -> node18157 [arrowhead=none, color="black", style=dashed]
    node18157 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1190])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18157 -> cluster2540_exit [color="black"]
    node18158_name [shape=none, label=<<font color="black">Block[18158]</font>>]
    node18158_name -> node18158 [arrowhead=none, color="black", style=dashed]
    node18158 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18158 -> node18159 [color="black"]
    node18159_name [shape=none, label=<<font color="black">Call[18159]</font>>]
    node18159_name -> node18159 [arrowhead=none, color="black", style=dashed]
    node18159 [shape=cds, label=<<font color="black">%5 = clo&lt;TypedArrayElementType&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18159 -> node18160 [color="black"]
    node18160_name [shape=none, label=<<font color="black">Block[18160]</font>>]
    node18160_name -> node18160 [arrowhead=none, color="black", style=dashed]
    node18160 [shape=box, label=<<font color="black">[0] let elementType = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18160 -> node18161 [color="black"]
    node18161_name [shape=none, label=<<font color="black">Call[18161]</font>>]
    node18161_name -> node18161 [arrowhead=none, color="black", style=dashed]
    node18161 [shape=cds, label=<<font color="black">%6 = clo&lt;SetValueInBuffer&gt;(buffer, indexedPosition, elementType, v, true, ~SeqCst~)</font>> color="black" fillcolor="white", style=filled]
    node18161 -> node18162 [color="black"]
    node18162_name [shape=none, label=<<font color="black">Block[18162]</font>>]
    node18162_name -> node18162 [arrowhead=none, color="black", style=dashed]
    node18162 [shape=box, label=<<font color="black">[0] return v<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18162 -> cluster2540_exit [color="black"]
  }
}