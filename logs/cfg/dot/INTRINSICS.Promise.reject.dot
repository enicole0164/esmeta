digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2594 {
    label = "def <BUILTIN>:INTRINSICS.Promise.reject(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2594_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2594_entry_name -> cluster2594_entry [arrowhead=none, color="black", style=dashed]
    cluster2594_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2594_entry -> node19171 [color="black"]
    cluster2594_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2594_exit_name -> cluster2594_exit [arrowhead=none, color="black", style=dashed]
    cluster2594_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19171_name [shape=none, label=<<font color="black">Branch[19171]</font>>]
    node19171_name -> node19171 [arrowhead=none, color="black", style=dashed]
    node19171 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19171 -> node19172 [label=<<font color="black">true</font>> color="black"]
    node19171 -> node19173 [label=<<font color="black">false</font>> color="black"]
    node19172_name [shape=none, label=<<font color="black">Block[19172]</font>>]
    node19172_name -> node19172 [arrowhead=none, color="black", style=dashed]
    node19172 [shape=box, label=<<font color="black">[0] let r = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19172 -> node19174 [color="black"]
    node19173_name [shape=none, label=<<font color="black">Block[19173]</font>>]
    node19173_name -> node19173 [arrowhead=none, color="black", style=dashed]
    node19173 [shape=box, label=<<font color="black">[0] let r = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19173 -> node19174 [color="black"]
    node19174_name [shape=none, label=<<font color="black">Block[19174]</font>>]
    node19174_name -> node19174 [arrowhead=none, color="black", style=dashed]
    node19174 [shape=box, label=<<font color="black">[0] let C = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19174 -> node19175 [color="black"]
    node19175_name [shape=none, label=<<font color="black">Call[19175]</font>>]
    node19175_name -> node19175 [arrowhead=none, color="black", style=dashed]
    node19175 [shape=cds, label=<<font color="black">%0 = clo&lt;NewPromiseCapability&gt;(C)</font>> color="black" fillcolor="white", style=filled]
    node19175 -> node19176 [color="black"]
    node19176_name [shape=none, label=<<font color="black">Block[19176]</font>>]
    node19176_name -> node19176 [arrowhead=none, color="black", style=dashed]
    node19176 [shape=box, label=<<font color="black">[0] let promiseCapability = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19176 -> node19177 [color="black"]
    node19177_name [shape=none, label=<<font color="black">Call[19177]</font>>]
    node19177_name -> node19177 [arrowhead=none, color="black", style=dashed]
    node19177 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [r])[#1302])</font>> color="black" fillcolor="white", style=filled]
    node19177 -> node19178 [color="black"]
    node19178_name [shape=none, label=<<font color="black">Block[19178]</font>>]
    node19178_name -> node19178 [arrowhead=none, color="black", style=dashed]
    node19178 [shape=box, label=<<font color="black">[0] [? %1]<BR ALIGN="LEFT"/>[1] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19178 -> cluster2594_exit [color="black"]
  }
}