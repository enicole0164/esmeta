digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2495 {
    label = "def SetViewValue(view: Unknown, requestIndex: Unknown, isLittleEndian: Unknown, type: Unknown, value: Unknown): Normal[Undefined] | Abrupt"
    style = rounded
    cluster2495_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2495_entry_name -> cluster2495_entry [arrowhead=none, color="black", style=dashed]
    cluster2495_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2495_entry -> node17637 [color="black"]
    cluster2495_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2495_exit_name -> cluster2495_exit [arrowhead=none, color="black", style=dashed]
    cluster2495_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17637_name [shape=none, label=<<font color="black">Call[17637]</font>>]
    node17637_name -> node17637 [arrowhead=none, color="black", style=dashed]
    node17637 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(view, &quot;DataView&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17637 -> node17638 [color="black"]
    node17638_name [shape=none, label=<<font color="black">Block[17638]</font>>]
    node17638_name -> node17638 [arrowhead=none, color="black", style=dashed]
    node17638 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= view.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17638 -> node17639 [color="black"]
    node17639_name [shape=none, label=<<font color="black">Call[17639]</font>>]
    node17639_name -> node17639 [arrowhead=none, color="black", style=dashed]
    node17639 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIndex&gt;(requestIndex)</font>> color="black" fillcolor="white", style=filled]
    node17639 -> node17640 [color="black"]
    node17640_name [shape=none, label=<<font color="black">Block[17640]</font>>]
    node17640_name -> node17640 [arrowhead=none, color="black", style=dashed]
    node17640 [shape=box, label=<<font color="black">[0] let getIndex = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17640 -> node17641 [color="black"]
    node17641_name [shape=none, label=<<font color="black">Call[17641]</font>>]
    node17641_name -> node17641 [arrowhead=none, color="black", style=dashed]
    node17641 [shape=cds, label=<<font color="black">%2 = clo&lt;IsBigIntElementType&gt;(type)</font>> color="black" fillcolor="white", style=filled]
    node17641 -> node17642 [color="black"]
    node17642_name [shape=none, label=<<font color="black">Branch[17642]</font>>]
    node17642_name -> node17642 [arrowhead=none, color="black", style=dashed]
    node17642 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node17642 -> node17643 [label=<<font color="black">true</font>> color="black"]
    node17642 -> node17645 [label=<<font color="black">false</font>> color="black"]
    node17643_name [shape=none, label=<<font color="black">Call[17643]</font>>]
    node17643_name -> node17643 [arrowhead=none, color="black", style=dashed]
    node17643 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBigInt&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node17643 -> node17644 [color="black"]
    node17645_name [shape=none, label=<<font color="black">Call[17645]</font>>]
    node17645_name -> node17645 [arrowhead=none, color="black", style=dashed]
    node17645 [shape=cds, label=<<font color="black">%4 = clo&lt;ToNumber&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node17645 -> node17646 [color="black"]
    node17644_name [shape=none, label=<<font color="black">Block[17644]</font>>]
    node17644_name -> node17644 [arrowhead=none, color="black", style=dashed]
    node17644 [shape=box, label=<<font color="black">[0] let numberValue = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17644 -> node17647 [color="black"]
    node17646_name [shape=none, label=<<font color="black">Block[17646]</font>>]
    node17646_name -> node17646 [arrowhead=none, color="black", style=dashed]
    node17646 [shape=box, label=<<font color="black">[0] let numberValue = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17646 -> node17647 [color="black"]
    node17647_name [shape=none, label=<<font color="black">Call[17647]</font>>]
    node17647_name -> node17647 [arrowhead=none, color="black", style=dashed]
    node17647 [shape=cds, label=<<font color="black">%5 = clo&lt;ToBoolean&gt;(isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17647 -> node17648 [color="black"]
    node17648_name [shape=none, label=<<font color="black">Block[17648]</font>>]
    node17648_name -> node17648 [arrowhead=none, color="black", style=dashed]
    node17648 [shape=box, label=<<font color="black">[0] isLittleEndian = %5<BR ALIGN="LEFT"/>[1] let buffer = view.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17648 -> node17649 [color="black"]
    node17649_name [shape=none, label=<<font color="black">Call[17649]</font>>]
    node17649_name -> node17649 [arrowhead=none, color="black", style=dashed]
    node17649 [shape=cds, label=<<font color="black">%6 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node17649 -> node17650 [color="black"]
    node17650_name [shape=none, label=<<font color="black">Branch[17650]</font>>]
    node17650_name -> node17650 [arrowhead=none, color="black", style=dashed]
    node17650 [shape=diamond, label=<<font color="black">(= %6 true)</font>> color="black" fillcolor="white", style=filled]
    node17650 -> node17651 [label=<<font color="black">true</font>> color="black"]
    node17650 -> node17652 [label=<<font color="black">false</font>> color="black"]
    node17651_name [shape=none, label=<<font color="black">Block[17651]</font>>]
    node17651_name -> node17651 [arrowhead=none, color="black", style=dashed]
    node17651 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1169])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17651 -> cluster2495_exit [color="black"]
    node17652_name [shape=none, label=<<font color="black">Block[17652]</font>>]
    node17652_name -> node17652 [arrowhead=none, color="black", style=dashed]
    node17652 [shape=box, label=<<font color="black">[0] let viewOffset = view.ByteOffset<BR ALIGN="LEFT"/>[1] let viewSize = view.ByteLength<BR ALIGN="LEFT"/>[2] (yet &quot;Let _elementSize_ be the Element Size value specified in &lt;emu-xref href=\&quot;#table-the-typedarray-constructors\&quot;&gt;&lt;/emu-xref&gt; for Element Type _type_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17652 -> node17653 [color="black"]
    node17653_name [shape=none, label=<<font color="black">Branch[17653]</font>>]
    node17653_name -> node17653 [arrowhead=none, color="black", style=dashed]
    node17653 [shape=diamond, label=<<font color="black">(&lt; viewSize (+ getIndex elementSize))</font>> color="black" fillcolor="white", style=filled]
    node17653 -> node17654 [label=<<font color="black">true</font>> color="black"]
    node17653 -> node17655 [label=<<font color="black">false</font>> color="black"]
    node17654_name [shape=none, label=<<font color="black">Block[17654]</font>>]
    node17654_name -> node17654 [arrowhead=none, color="black", style=dashed]
    node17654 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1170])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17654 -> cluster2495_exit [color="black"]
    node17655_name [shape=none, label=<<font color="black">Block[17655]</font>>]
    node17655_name -> node17655 [arrowhead=none, color="black", style=dashed]
    node17655 [shape=box, label=<<font color="black">[0] let bufferIndex = (+ getIndex viewOffset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17655 -> node17656 [color="black"]
    node17656_name [shape=none, label=<<font color="black">Call[17656]</font>>]
    node17656_name -> node17656 [arrowhead=none, color="black", style=dashed]
    node17656 [shape=cds, label=<<font color="black">%7 = clo&lt;SetValueInBuffer&gt;(buffer, bufferIndex, type, numberValue, false, ~Unordered~, isLittleEndian)</font>> color="black" fillcolor="white", style=filled]
    node17656 -> node17657 [color="black"]
    node17657_name [shape=none, label=<<font color="black">Block[17657]</font>>]
    node17657_name -> node17657 [arrowhead=none, color="black", style=dashed]
    node17657 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17657 -> cluster2495_exit [color="black"]
  }
}