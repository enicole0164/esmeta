digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2661 {
    label = "def <BUILTIN>:INTRINSICS.Proxy.revocable(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2661_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2661_entry_name -> cluster2661_entry [arrowhead=none, color="black", style=dashed]
    cluster2661_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2661_entry -> node19821 [color="black"]
    cluster2661_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2661_exit_name -> cluster2661_exit [arrowhead=none, color="black", style=dashed]
    cluster2661_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19821_name [shape=none, label=<<font color="black">Branch[19821]</font>>]
    node19821_name -> node19821 [arrowhead=none, color="black", style=dashed]
    node19821 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19821 -> node19822 [label=<<font color="black">true</font>> color="black"]
    node19821 -> node19823 [label=<<font color="black">false</font>> color="black"]
    node19822_name [shape=none, label=<<font color="black">Block[19822]</font>>]
    node19822_name -> node19822 [arrowhead=none, color="black", style=dashed]
    node19822 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19822 -> node19824 [color="black"]
    node19823_name [shape=none, label=<<font color="black">Block[19823]</font>>]
    node19823_name -> node19823 [arrowhead=none, color="black", style=dashed]
    node19823 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19823 -> node19824 [color="black"]
    node19824_name [shape=none, label=<<font color="black">Branch[19824]</font>>]
    node19824_name -> node19824 [arrowhead=none, color="black", style=dashed]
    node19824 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19824 -> node19825 [label=<<font color="black">true</font>> color="black"]
    node19824 -> node19826 [label=<<font color="black">false</font>> color="black"]
    node19825_name [shape=none, label=<<font color="black">Block[19825]</font>>]
    node19825_name -> node19825 [arrowhead=none, color="black", style=dashed]
    node19825 [shape=box, label=<<font color="black">[0] let handler = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19825 -> node19827 [color="black"]
    node19826_name [shape=none, label=<<font color="black">Block[19826]</font>>]
    node19826_name -> node19826 [arrowhead=none, color="black", style=dashed]
    node19826 [shape=box, label=<<font color="black">[0] let handler = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19826 -> node19827 [color="black"]
    node19827_name [shape=none, label=<<font color="black">Call[19827]</font>>]
    node19827_name -> node19827 [arrowhead=none, color="black", style=dashed]
    node19827 [shape=cds, label=<<font color="black">%0 = clo&lt;ProxyCreate&gt;(target, handler)</font>> color="black" fillcolor="white", style=filled]
    node19827 -> node19828 [color="black"]
    node19828_name [shape=none, label=<<font color="black">Block[19828]</font>>]
    node19828_name -> node19828 [arrowhead=none, color="black", style=dashed]
    node19828 [shape=box, label=<<font color="black">[0] let p = [? %0]<BR ALIGN="LEFT"/>[1] let revokerClosure = clo&lt;INTRINSICS.Proxy.revocable:clo0&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19828 -> node19829 [color="black"]
    node19829_name [shape=none, label=<<font color="black">Call[19829]</font>>]
    node19829_name -> node19829 [arrowhead=none, color="black", style=dashed]
    node19829 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateBuiltinFunction&gt;(revokerClosure, 0, &quot;&quot;, (new [&quot;RevocableProxy&quot;])[#1359])</font>> color="black" fillcolor="white", style=filled]
    node19829 -> node19830 [color="black"]
    node19830_name [shape=none, label=<<font color="black">Block[19830]</font>>]
    node19830_name -> node19830 [arrowhead=none, color="black", style=dashed]
    node19830 [shape=box, label=<<font color="black">[0] let revoker = %1<BR ALIGN="LEFT"/>[1] revoker.RevocableProxy = p<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19830 -> node19831 [color="black"]
    node19831_name [shape=none, label=<<font color="black">Call[19831]</font>>]
    node19831_name -> node19831 [arrowhead=none, color="black", style=dashed]
    node19831 [shape=cds, label=<<font color="black">%2 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Object.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19831 -> node19832 [color="black"]
    node19832_name [shape=none, label=<<font color="black">Block[19832]</font>>]
    node19832_name -> node19832 [arrowhead=none, color="black", style=dashed]
    node19832 [shape=box, label=<<font color="black">[0] let result = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19832 -> node19833 [color="black"]
    node19833_name [shape=none, label=<<font color="black">Call[19833]</font>>]
    node19833_name -> node19833 [arrowhead=none, color="black", style=dashed]
    node19833 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateDataPropertyOrThrow&gt;(result, &quot;proxy&quot;, p)</font>> color="black" fillcolor="white", style=filled]
    node19833 -> node19834 [color="black"]
    node19834_name [shape=none, label=<<font color="black">Block[19834]</font>>]
    node19834_name -> node19834 [arrowhead=none, color="black", style=dashed]
    node19834 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19834 -> node19835 [color="black"]
    node19835_name [shape=none, label=<<font color="black">Call[19835]</font>>]
    node19835_name -> node19835 [arrowhead=none, color="black", style=dashed]
    node19835 [shape=cds, label=<<font color="black">%4 = clo&lt;CreateDataPropertyOrThrow&gt;(result, &quot;revoke&quot;, revoker)</font>> color="black" fillcolor="white", style=filled]
    node19835 -> node19836 [color="black"]
    node19836_name [shape=none, label=<<font color="black">Block[19836]</font>>]
    node19836_name -> node19836 [arrowhead=none, color="black", style=dashed]
    node19836 [shape=box, label=<<font color="black">[0] [! %4]<BR ALIGN="LEFT"/>[1] return result<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19836 -> cluster2661_exit [color="black"]
  }
}