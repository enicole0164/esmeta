digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster596 {
    label = "def <SYNTAX>:TryStatement[1,0].ContainsUndefinedBreakTarget(this: Ast:TryStatement[1,0], labelSet: Unknown): Boolean"
    style = rounded
    cluster596_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster596_entry_name -> cluster596_entry [arrowhead=none, color="black", style=dashed]
    cluster596_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster596_entry -> node2674 [color="black"]
    cluster596_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster596_exit_name -> cluster596_exit [arrowhead=none, color="black", style=dashed]
    cluster596_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node2674_name [shape=none, label=<<font color="black">Call[2674]</font>>]
    node2674_name -> node2674 [arrowhead=none, color="black", style=dashed]
    node2674 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;ContainsUndefinedBreakTarget(labelSet)</font>> color="black" fillcolor="white", style=filled]
    node2674 -> node2675 [color="black"]
    node2675_name [shape=none, label=<<font color="black">Block[2675]</font>>]
    node2675_name -> node2675 [arrowhead=none, color="black", style=dashed]
    node2675 [shape=box, label=<<font color="black">[0] let hasUndefinedLabels = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2675 -> node2676 [color="black"]
    node2676_name [shape=none, label=<<font color="black">Branch[2676]</font>>]
    node2676_name -> node2676 [arrowhead=none, color="black", style=dashed]
    node2676 [shape=diamond, label=<<font color="black">(= hasUndefinedLabels true)</font>> color="black" fillcolor="white", style=filled]
    node2676 -> node2677 [label=<<font color="black">true</font>> color="black"]
    node2676 -> node2678 [label=<<font color="black">false</font>> color="black"]
    node2677_name [shape=none, label=<<font color="black">Block[2677]</font>>]
    node2677_name -> node2677 [arrowhead=none, color="black", style=dashed]
    node2677 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2677 -> cluster596_exit [color="black"]
    node2678_name [shape=none, label=<<font color="black">Call[2678]</font>>]
    node2678_name -> node2678 [arrowhead=none, color="black", style=dashed]
    node2678 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;ContainsUndefinedBreakTarget(labelSet)</font>> color="black" fillcolor="white", style=filled]
    node2678 -> node2679 [color="black"]
    node2679_name [shape=none, label=<<font color="black">Block[2679]</font>>]
    node2679_name -> node2679 [arrowhead=none, color="black", style=dashed]
    node2679 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2679 -> cluster596_exit [color="black"]
  }
}