digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster114 {
    label = "def IsArray(argument: Unknown): Normal[Boolean] | Abrupt"
    style = rounded
    cluster114_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster114_entry_name -> cluster114_entry [arrowhead=none, color="black", style=dashed]
    cluster114_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster114_entry -> node872 [color="black"]
    cluster114_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster114_exit_name -> cluster114_exit [arrowhead=none, color="black", style=dashed]
    cluster114_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node872_name [shape=none, label=<<font color="black">Branch[872]</font>>]
    node872_name -> node872 [arrowhead=none, color="black", style=dashed]
    node872 [shape=diamond, label=<<font color="black">(! (= (typeof argument) @Object))</font>> color="black" fillcolor="white", style=filled]
    node872 -> node873 [label=<<font color="black">true</font>> color="black"]
    node872 -> node874 [label=<<font color="black">false</font>> color="black"]
    node873_name [shape=none, label=<<font color="black">Block[873]</font>>]
    node873_name -> node873 [arrowhead=none, color="black", style=dashed]
    node873 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node873 -> cluster114_exit [color="black"]
    node874_name [shape=none, label=<<font color="black">Branch[874]</font>>]
    node874_name -> node874 [arrowhead=none, color="black", style=dashed]
    node874 [shape=diamond, label=<<font color="black">(? argument: &quot;ArrayExoticObject&quot;)</font>> color="black" fillcolor="white", style=filled]
    node874 -> node875 [label=<<font color="black">true</font>> color="black"]
    node874 -> node876 [label=<<font color="black">false</font>> color="black"]
    node875_name [shape=none, label=<<font color="black">Block[875]</font>>]
    node875_name -> node875 [arrowhead=none, color="black", style=dashed]
    node875 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node875 -> cluster114_exit [color="black"]
    node876_name [shape=none, label=<<font color="black">Branch[876]</font>>]
    node876_name -> node876 [arrowhead=none, color="black", style=dashed]
    node876 [shape=diamond, label=<<font color="black">(? argument: &quot;ProxyExoticObject&quot;)</font>> color="black" fillcolor="white", style=filled]
    node876 -> node877 [label=<<font color="black">true</font>> color="black"]
    node876 -> node882 [label=<<font color="black">false</font>> color="black"]
    node877_name [shape=none, label=<<font color="black">Branch[877]</font>>]
    node877_name -> node877 [arrowhead=none, color="black", style=dashed]
    node877 [shape=diamond, label=<<font color="black">(= argument.ProxyHandler null)</font>> color="black" fillcolor="white", style=filled]
    node877 -> node878 [label=<<font color="black">true</font>> color="black"]
    node877 -> node879 [label=<<font color="black">false</font>> color="black"]
    node882_name [shape=none, label=<<font color="black">Block[882]</font>>]
    node882_name -> node882 [arrowhead=none, color="black", style=dashed]
    node882 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node882 -> cluster114_exit [color="black"]
    node878_name [shape=none, label=<<font color="black">Block[878]</font>>]
    node878_name -> node878 [arrowhead=none, color="black", style=dashed]
    node878 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#38])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node878 -> cluster114_exit [color="black"]
    node879_name [shape=none, label=<<font color="black">Block[879]</font>>]
    node879_name -> node879 [arrowhead=none, color="black", style=dashed]
    node879 [shape=box, label=<<font color="black">[0] let target = argument.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node879 -> node880 [color="black"]
    node880_name [shape=none, label=<<font color="black">Call[880]</font>>]
    node880_name -> node880 [arrowhead=none, color="black", style=dashed]
    node880 [shape=cds, label=<<font color="black">%0 = clo&lt;IsArray&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node880 -> node881 [color="black"]
    node881_name [shape=none, label=<<font color="black">Block[881]</font>>]
    node881_name -> node881 [arrowhead=none, color="black", style=dashed]
    node881 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node881 -> cluster114_exit [color="black"]
  }
}