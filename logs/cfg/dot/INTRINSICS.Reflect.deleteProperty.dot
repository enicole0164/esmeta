digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2649 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.deleteProperty(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2649_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2649_entry_name -> cluster2649_entry [arrowhead=none, color="black", style=dashed]
    cluster2649_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2649_entry -> node19690 [color="black"]
    cluster2649_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2649_exit_name -> cluster2649_exit [arrowhead=none, color="black", style=dashed]
    cluster2649_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19690_name [shape=none, label=<<font color="black">Branch[19690]</font>>]
    node19690_name -> node19690 [arrowhead=none, color="black", style=dashed]
    node19690 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19690 -> node19691 [label=<<font color="black">true</font>> color="black"]
    node19690 -> node19692 [label=<<font color="black">false</font>> color="black"]
    node19691_name [shape=none, label=<<font color="black">Block[19691]</font>>]
    node19691_name -> node19691 [arrowhead=none, color="black", style=dashed]
    node19691 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19691 -> node19693 [color="black"]
    node19692_name [shape=none, label=<<font color="black">Block[19692]</font>>]
    node19692_name -> node19692 [arrowhead=none, color="black", style=dashed]
    node19692 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19692 -> node19693 [color="black"]
    node19693_name [shape=none, label=<<font color="black">Branch[19693]</font>>]
    node19693_name -> node19693 [arrowhead=none, color="black", style=dashed]
    node19693 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19693 -> node19694 [label=<<font color="black">true</font>> color="black"]
    node19693 -> node19695 [label=<<font color="black">false</font>> color="black"]
    node19694_name [shape=none, label=<<font color="black">Block[19694]</font>>]
    node19694_name -> node19694 [arrowhead=none, color="black", style=dashed]
    node19694 [shape=box, label=<<font color="black">[0] let propertyKey = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19694 -> node19696 [color="black"]
    node19695_name [shape=none, label=<<font color="black">Block[19695]</font>>]
    node19695_name -> node19695 [arrowhead=none, color="black", style=dashed]
    node19695 [shape=box, label=<<font color="black">[0] let propertyKey = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19695 -> node19696 [color="black"]
    node19696_name [shape=none, label=<<font color="black">Branch[19696]</font>>]
    node19696_name -> node19696 [arrowhead=none, color="black", style=dashed]
    node19696 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19696 -> node19697 [label=<<font color="black">true</font>> color="black"]
    node19696 -> node19698 [label=<<font color="black">false</font>> color="black"]
    node19697_name [shape=none, label=<<font color="black">Block[19697]</font>>]
    node19697_name -> node19697 [arrowhead=none, color="black", style=dashed]
    node19697 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1347])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19697 -> cluster2649_exit [color="black"]
    node19698_name [shape=none, label=<<font color="black">Call[19698]</font>>]
    node19698_name -> node19698 [arrowhead=none, color="black", style=dashed]
    node19698 [shape=cds, label=<<font color="black">%0 = clo&lt;ToPropertyKey&gt;(propertyKey)</font>> color="black" fillcolor="white", style=filled]
    node19698 -> node19699 [color="black"]
    node19699_name [shape=none, label=<<font color="black">Block[19699]</font>>]
    node19699_name -> node19699 [arrowhead=none, color="black", style=dashed]
    node19699 [shape=box, label=<<font color="black">[0] let key = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19699 -> node19700 [color="black"]
    node19700_name [shape=none, label=<<font color="black">Call[19700]</font>>]
    node19700_name -> node19700 [arrowhead=none, color="black", style=dashed]
    node19700 [shape=cds, label=<<font color="black">%1 = target-&gt;Delete(key)</font>> color="black" fillcolor="white", style=filled]
    node19700 -> node19701 [color="black"]
    node19701_name [shape=none, label=<<font color="black">Block[19701]</font>>]
    node19701_name -> node19701 [arrowhead=none, color="black", style=dashed]
    node19701 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19701 -> cluster2649_exit [color="black"]
  }
}