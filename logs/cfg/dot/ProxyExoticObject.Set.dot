digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1158 {
    label = "def <INTERNAL>:ProxyExoticObject.Set(O: ProxyExoticObject, P: Symbol | String, V: ESValue, Receiver: ESValue): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1158_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1158_entry_name -> cluster1158_entry [arrowhead=none, color="black", style=dashed]
    cluster1158_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1158_entry -> node5213 [color="black"]
    cluster1158_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1158_exit_name -> cluster1158_exit [arrowhead=none, color="black", style=dashed]
    cluster1158_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5213_name [shape=none, label=<<font color="black">Block[5213]</font>>]
    node5213_name -> node5213 [arrowhead=none, color="black", style=dashed]
    node5213 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5213 -> node5214 [color="black"]
    node5214_name [shape=none, label=<<font color="black">Branch[5214]</font>>]
    node5214_name -> node5214 [arrowhead=none, color="black", style=dashed]
    node5214 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5214 -> node5215 [label=<<font color="black">true</font>> color="black"]
    node5214 -> node5216 [label=<<font color="black">false</font>> color="black"]
    node5215_name [shape=none, label=<<font color="black">Block[5215]</font>>]
    node5215_name -> node5215 [arrowhead=none, color="black", style=dashed]
    node5215 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#516])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5215 -> cluster1158_exit [color="black"]
    node5216_name [shape=none, label=<<font color="black">Block[5216]</font>>]
    node5216_name -> node5216 [arrowhead=none, color="black", style=dashed]
    node5216 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5216 -> node5217 [color="black"]
    node5217_name [shape=none, label=<<font color="black">Call[5217]</font>>]
    node5217_name -> node5217 [arrowhead=none, color="black", style=dashed]
    node5217 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;set&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5217 -> node5218 [color="black"]
    node5218_name [shape=none, label=<<font color="black">Block[5218]</font>>]
    node5218_name -> node5218 [arrowhead=none, color="black", style=dashed]
    node5218 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5218 -> node5219 [color="black"]
    node5219_name [shape=none, label=<<font color="black">Branch[5219]</font>>]
    node5219_name -> node5219 [arrowhead=none, color="black", style=dashed]
    node5219 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5219 -> node5220 [label=<<font color="black">true</font>> color="black"]
    node5219 -> node5222 [label=<<font color="black">false</font>> color="black"]
    node5220_name [shape=none, label=<<font color="black">Call[5220]</font>>]
    node5220_name -> node5220 [arrowhead=none, color="black", style=dashed]
    node5220 [shape=cds, label=<<font color="black">%1 = target-&gt;Set(P, V, Receiver)</font>> color="black" fillcolor="white", style=filled]
    node5220 -> node5221 [color="black"]
    node5222_name [shape=none, label=<<font color="black">Call[5222]</font>>]
    node5222_name -> node5222 [arrowhead=none, color="black", style=dashed]
    node5222 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target, P, V, Receiver])[#517])</font>> color="black" fillcolor="white", style=filled]
    node5222 -> node5223 [color="black"]
    node5221_name [shape=none, label=<<font color="black">Block[5221]</font>>]
    node5221_name -> node5221 [arrowhead=none, color="black", style=dashed]
    node5221 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5221 -> cluster1158_exit [color="black"]
    node5223_name [shape=none, label=<<font color="black">Call[5223]</font>>]
    node5223_name -> node5223 [arrowhead=none, color="black", style=dashed]
    node5223 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBoolean&gt;([? %2])</font>> color="black" fillcolor="white", style=filled]
    node5223 -> node5224 [color="black"]
    node5224_name [shape=none, label=<<font color="black">Block[5224]</font>>]
    node5224_name -> node5224 [arrowhead=none, color="black", style=dashed]
    node5224 [shape=box, label=<<font color="black">[0] let booleanTrapResult = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5224 -> node5225 [color="black"]
    node5225_name [shape=none, label=<<font color="black">Branch[5225]</font>>]
    node5225_name -> node5225 [arrowhead=none, color="black", style=dashed]
    node5225 [shape=diamond, label=<<font color="black">(= booleanTrapResult false)</font>> color="black" fillcolor="white", style=filled]
    node5225 -> node5226 [label=<<font color="black">true</font>> color="black"]
    node5225 -> node5227 [label=<<font color="black">false</font>> color="black"]
    node5226_name [shape=none, label=<<font color="black">Block[5226]</font>>]
    node5226_name -> node5226 [arrowhead=none, color="black", style=dashed]
    node5226 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5226 -> cluster1158_exit [color="black"]
    node5227_name [shape=none, label=<<font color="black">Call[5227]</font>>]
    node5227_name -> node5227 [arrowhead=none, color="black", style=dashed]
    node5227 [shape=cds, label=<<font color="black">%4 = target-&gt;GetOwnProperty(P)</font>> color="black" fillcolor="white", style=filled]
    node5227 -> node5228 [color="black"]
    node5228_name [shape=none, label=<<font color="black">Block[5228]</font>>]
    node5228_name -> node5228 [arrowhead=none, color="black", style=dashed]
    node5228 [shape=box, label=<<font color="black">[0] let targetDesc = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5228 -> node5229 [color="black"]
    node5229_name [shape=none, label=<<font color="black">Branch[5229]</font>>]
    node5229_name -> node5229 [arrowhead=none, color="black", style=dashed]
    node5229 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= targetDesc undefined)) (= targetDesc.Configurable false))</font>> color="black" fillcolor="white", style=filled]
    node5229 -> node5230 [label=<<font color="black">true</font>> color="black"]
    node5229 -> node5239 [label=<<font color="black">false</font>> color="black"]
    node5230_name [shape=none, label=<<font color="black">Call[5230]</font>>]
    node5230_name -> node5230 [arrowhead=none, color="black", style=dashed]
    node5230 [shape=cds, label=<<font color="black">%5 = clo&lt;IsDataDescriptor&gt;(targetDesc)</font>> color="black" fillcolor="white", style=filled]
    node5230 -> node5231 [color="black"]
    node5239_name [shape=none, label=<<font color="black">Block[5239]</font>>]
    node5239_name -> node5239 [arrowhead=none, color="black", style=dashed]
    node5239 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5239 -> cluster1158_exit [color="black"]
    node5231_name [shape=none, label=<<font color="black">Branch[5231]</font>>]
    node5231_name -> node5231 [arrowhead=none, color="black", style=dashed]
    node5231 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %5 true) (= targetDesc.Writable false))</font>> color="black" fillcolor="white", style=filled]
    node5231 -> node5232 [label=<<font color="black">true</font>> color="black"]
    node5231 -> node5235 [label=<<font color="black">false</font>> color="black"]
    node5232_name [shape=none, label=<<font color="black">Call[5232]</font>>]
    node5232_name -> node5232 [arrowhead=none, color="black", style=dashed]
    node5232 [shape=cds, label=<<font color="black">%6 = clo&lt;SameValue&gt;(V, targetDesc.Value)</font>> color="black" fillcolor="white", style=filled]
    node5232 -> node5233 [color="black"]
    node5235_name [shape=none, label=<<font color="black">Call[5235]</font>>]
    node5235_name -> node5235 [arrowhead=none, color="black", style=dashed]
    node5235 [shape=cds, label=<<font color="black">%7 = clo&lt;IsAccessorDescriptor&gt;(targetDesc)</font>> color="black" fillcolor="white", style=filled]
    node5235 -> node5236 [color="black"]
    node5233_name [shape=none, label=<<font color="black">Branch[5233]</font>>]
    node5233_name -> node5233 [arrowhead=none, color="black", style=dashed]
    node5233 [shape=diamond, label=<<font color="black">(= %6 false)</font>> color="black" fillcolor="white", style=filled]
    node5233 -> node5234 [label=<<font color="black">true</font>> color="black"]
    node5233 -> node5235 [label=<<font color="black">false</font>> color="black"]
    node5236_name [shape=none, label=<<font color="black">Branch[5236]</font>>]
    node5236_name -> node5236 [arrowhead=none, color="black", style=dashed]
    node5236 [shape=diamond, label=<<font color="black">(= %7 true)</font>> color="black" fillcolor="white", style=filled]
    node5236 -> node5237 [label=<<font color="black">true</font>> color="black"]
    node5236 -> node5239 [label=<<font color="black">false</font>> color="black"]
    node5234_name [shape=none, label=<<font color="black">Block[5234]</font>>]
    node5234_name -> node5234 [arrowhead=none, color="black", style=dashed]
    node5234 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#518])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5234 -> cluster1158_exit [color="black"]
    node5237_name [shape=none, label=<<font color="black">Branch[5237]</font>>]
    node5237_name -> node5237 [arrowhead=none, color="black", style=dashed]
    node5237 [shape=diamond, label=<<font color="black">(= targetDesc.Set undefined)</font>> color="black" fillcolor="white", style=filled]
    node5237 -> node5238 [label=<<font color="black">true</font>> color="black"]
    node5237 -> node5239 [label=<<font color="black">false</font>> color="black"]
    node5238_name [shape=none, label=<<font color="black">Block[5238]</font>>]
    node5238_name -> node5238 [arrowhead=none, color="black", style=dashed]
    node5238 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#519])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5238 -> cluster1158_exit [color="black"]
  }
}