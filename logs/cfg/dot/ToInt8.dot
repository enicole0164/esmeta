digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster103 {
    label = "def ToInt8(argument: Unknown): Unknown["EitherANormalCompletionContainingAnIntegralNumberOrAnAbruptCompletion"]"
    style = rounded
    cluster103_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster103_entry_name -> cluster103_entry [arrowhead=none, color="black", style=dashed]
    cluster103_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster103_entry -> node780 [color="black"]
    cluster103_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster103_exit_name -> cluster103_exit [arrowhead=none, color="black", style=dashed]
    cluster103_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node780_name [shape=none, label=<<font color="black">Call[780]</font>>]
    node780_name -> node780 [arrowhead=none, color="black", style=dashed]
    node780 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node780 -> node781 [color="black"]
    node781_name [shape=none, label=<<font color="black">Block[781]</font>>]
    node781_name -> node781 [arrowhead=none, color="black", style=dashed]
    node781 [shape=box, label=<<font color="black">[0] let number = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node781 -> node782 [color="black"]
    node782_name [shape=none, label=<<font color="black">Branch[782]</font>>]
    node782_name -> node782 [arrowhead=none, color="black", style=dashed]
    node782 [shape=diamond, label=<<font color="black">(|| (|| (|| (|| (= number NaN) (= number 0.0f)) (= number -0.0f)) (= number +INF)) (= number -INF))</font>> color="black" fillcolor="white", style=filled]
    node782 -> node783 [label=<<font color="black">true</font>> color="black"]
    node782 -> node784 [label=<<font color="black">false</font>> color="black"]
    node783_name [shape=none, label=<<font color="black">Block[783]</font>>]
    node783_name -> node783 [arrowhead=none, color="black", style=dashed]
    node783 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node783 -> cluster103_exit [color="black"]
    node784_name [shape=none, label=<<font color="black">Block[784]</font>>]
    node784_name -> node784 [arrowhead=none, color="black", style=dashed]
    node784 [shape=box, label=<<font color="black">[0] let int = (floor (abs ([math] number)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node784 -> node785 [color="black"]
    node785_name [shape=none, label=<<font color="black">Branch[785]</font>>]
    node785_name -> node785 [arrowhead=none, color="black", style=dashed]
    node785 [shape=diamond, label=<<font color="black">(&lt; number 0.0f)</font>> color="black" fillcolor="white", style=filled]
    node785 -> node786 [label=<<font color="black">true</font>> color="black"]
    node785 -> node787 [label=<<font color="black">false</font>> color="black"]
    node786_name [shape=none, label=<<font color="black">Block[786]</font>>]
    node786_name -> node786 [arrowhead=none, color="black", style=dashed]
    node786 [shape=box, label=<<font color="black">[0] int = (* -1 int)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node786 -> node787 [color="black"]
    node787_name [shape=none, label=<<font color="black">Block[787]</font>>]
    node787_name -> node787 [arrowhead=none, color="black", style=dashed]
    node787 [shape=box, label=<<font color="black">[0] let int8bit = (% int (** 2 8))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node787 -> node788 [color="black"]
    node788_name [shape=none, label=<<font color="black">Branch[788]</font>>]
    node788_name -> node788 [arrowhead=none, color="black", style=dashed]
    node788 [shape=diamond, label=<<font color="black">(! (&lt; int8bit (** 2 7)))</font>> color="black" fillcolor="white", style=filled]
    node788 -> node789 [label=<<font color="black">true</font>> color="black"]
    node788 -> node790 [label=<<font color="black">false</font>> color="black"]
    node789_name [shape=none, label=<<font color="black">Block[789]</font>>]
    node789_name -> node789 [arrowhead=none, color="black", style=dashed]
    node789 [shape=box, label=<<font color="black">[0] return ([number] (- int8bit (** 2 8)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node789 -> cluster103_exit [color="black"]
    node790_name [shape=none, label=<<font color="black">Block[790]</font>>]
    node790_name -> node790 [arrowhead=none, color="black", style=dashed]
    node790 [shape=box, label=<<font color="black">[0] return ([number] int8bit)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node790 -> cluster103_exit [color="black"]
  }
}