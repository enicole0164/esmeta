digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2004 {
    label = "def <BUILTIN>:INTRINSICS.Object.fromEntries(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2004_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2004_entry_name -> cluster2004_entry [arrowhead=none, color="black", style=dashed]
    cluster2004_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2004_entry -> node11156 [color="black"]
    cluster2004_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2004_exit_name -> cluster2004_exit [arrowhead=none, color="black", style=dashed]
    cluster2004_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11156_name [shape=none, label=<<font color="black">Branch[11156]</font>>]
    node11156_name -> node11156 [arrowhead=none, color="black", style=dashed]
    node11156 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11156 -> node11157 [label=<<font color="black">true</font>> color="black"]
    node11156 -> node11158 [label=<<font color="black">false</font>> color="black"]
    node11157_name [shape=none, label=<<font color="black">Block[11157]</font>>]
    node11157_name -> node11157 [arrowhead=none, color="black", style=dashed]
    node11157 [shape=box, label=<<font color="black">[0] let iterable = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11157 -> node11159 [color="black"]
    node11158_name [shape=none, label=<<font color="black">Block[11158]</font>>]
    node11158_name -> node11158 [arrowhead=none, color="black", style=dashed]
    node11158 [shape=box, label=<<font color="black">[0] let iterable = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11158 -> node11159 [color="black"]
    node11159_name [shape=none, label=<<font color="black">Call[11159]</font>>]
    node11159_name -> node11159 [arrowhead=none, color="black", style=dashed]
    node11159 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(iterable)</font>> color="black" fillcolor="white", style=filled]
    node11159 -> node11160 [color="black"]
    node11160_name [shape=none, label=<<font color="black">Block[11160]</font>>]
    node11160_name -> node11160 [arrowhead=none, color="black", style=dashed]
    node11160 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11160 -> node11161 [color="black"]
    node11161_name [shape=none, label=<<font color="black">Call[11161]</font>>]
    node11161_name -> node11161 [arrowhead=none, color="black", style=dashed]
    node11161 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Object.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node11161 -> node11162 [color="black"]
    node11162_name [shape=none, label=<<font color="black">Block[11162]</font>>]
    node11162_name -> node11162 [arrowhead=none, color="black", style=dashed]
    node11162 [shape=box, label=<<font color="black">[0] let obj = %1<BR ALIGN="LEFT"/>[1] assert (yet &quot;_obj_ is an extensible ordinary object with no own properties.&quot;)<BR ALIGN="LEFT"/>[2] let closure = clo&lt;INTRINSICS.Object.fromEntries:clo0, [obj]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11162 -> node11163 [color="black"]
    node11163_name [shape=none, label=<<font color="black">Call[11163]</font>>]
    node11163_name -> node11163 [arrowhead=none, color="black", style=dashed]
    node11163 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateBuiltinFunction&gt;(closure, 2, &quot;&quot;, (new [])[#894])</font>> color="black" fillcolor="white", style=filled]
    node11163 -> node11164 [color="black"]
    node11164_name [shape=none, label=<<font color="black">Block[11164]</font>>]
    node11164_name -> node11164 [arrowhead=none, color="black", style=dashed]
    node11164 [shape=box, label=<<font color="black">[0] let adder = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11164 -> node11165 [color="black"]
    node11165_name [shape=none, label=<<font color="black">Call[11165]</font>>]
    node11165_name -> node11165 [arrowhead=none, color="black", style=dashed]
    node11165 [shape=cds, label=<<font color="black">%3 = clo&lt;AddEntriesFromIterable&gt;(obj, iterable, adder)</font>> color="black" fillcolor="white", style=filled]
    node11165 -> node11166 [color="black"]
    node11166_name [shape=none, label=<<font color="black">Block[11166]</font>>]
    node11166_name -> node11166 [arrowhead=none, color="black", style=dashed]
    node11166 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11166 -> cluster2004_exit [color="black"]
  }
}