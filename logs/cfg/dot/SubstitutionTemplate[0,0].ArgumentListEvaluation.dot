digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1284 {
    label = "def <SYNTAX>:SubstitutionTemplate[0,0].ArgumentListEvaluation(this: Ast:SubstitutionTemplate[0,0]): Normal[List[ESValue]] | Abrupt"
    style = rounded
    cluster1284_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1284_entry_name -> cluster1284_entry [arrowhead=none, color="black", style=dashed]
    cluster1284_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1284_entry -> node6014 [color="black"]
    cluster1284_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1284_exit_name -> cluster1284_exit [arrowhead=none, color="black", style=dashed]
    cluster1284_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6014_name [shape=none, label=<<font color="black">Call[6014]</font>>]
    node6014_name -> node6014 [arrowhead=none, color="black", style=dashed]
    node6014 [shape=cds, label=<<font color="black">%0 = this[1]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6014 -> node6015 [color="black"]
    node6015_name [shape=none, label=<<font color="black">Block[6015]</font>>]
    node6015_name -> node6015 [arrowhead=none, color="black", style=dashed]
    node6015 [shape=box, label=<<font color="black">[0] let firstSubRef = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6015 -> node6016 [color="black"]
    node6016_name [shape=none, label=<<font color="black">Call[6016]</font>>]
    node6016_name -> node6016 [arrowhead=none, color="black", style=dashed]
    node6016 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(firstSubRef)</font>> color="black" fillcolor="white", style=filled]
    node6016 -> node6017 [color="black"]
    node6017_name [shape=none, label=<<font color="black">Block[6017]</font>>]
    node6017_name -> node6017 [arrowhead=none, color="black", style=dashed]
    node6017 [shape=box, label=<<font color="black">[0] let firstSub = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6017 -> node6018 [color="black"]
    node6018_name [shape=none, label=<<font color="black">Call[6018]</font>>]
    node6018_name -> node6018 [arrowhead=none, color="black", style=dashed]
    node6018 [shape=cds, label=<<font color="black">%2 = this[2]-&gt;SubstitutionEvaluation()</font>> color="black" fillcolor="white", style=filled]
    node6018 -> node6019 [color="black"]
    node6019_name [shape=none, label=<<font color="black">Block[6019]</font>>]
    node6019_name -> node6019 [arrowhead=none, color="black", style=dashed]
    node6019 [shape=box, label=<<font color="black">[0] let restSub = [? %2]<BR ALIGN="LEFT"/>[1] assert (yet &quot;_restSub_ is a possibly empty List.&quot;)<BR ALIGN="LEFT"/>[2] return (list-concat (new [firstSub])[#584] restSub)[#583]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6019 -> cluster1284_exit [color="black"]
  }
}