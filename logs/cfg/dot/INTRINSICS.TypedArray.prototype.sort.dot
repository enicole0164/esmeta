digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2416 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.sort(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2416_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2416_entry_name -> cluster2416_entry [arrowhead=none, color="black", style=dashed]
    cluster2416_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2416_entry -> node16639 [color="black"]
    cluster2416_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2416_exit_name -> cluster2416_exit [arrowhead=none, color="black", style=dashed]
    cluster2416_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16639_name [shape=none, label=<<font color="black">Branch[16639]</font>>]
    node16639_name -> node16639 [arrowhead=none, color="black", style=dashed]
    node16639 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16639 -> node16640 [label=<<font color="black">true</font>> color="black"]
    node16639 -> node16641 [label=<<font color="black">false</font>> color="black"]
    node16640_name [shape=none, label=<<font color="black">Block[16640]</font>>]
    node16640_name -> node16640 [arrowhead=none, color="black", style=dashed]
    node16640 [shape=box, label=<<font color="black">[0] let comparefn = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16640 -> node16642 [color="black"]
    node16641_name [shape=none, label=<<font color="black">Block[16641]</font>>]
    node16641_name -> node16641 [arrowhead=none, color="black", style=dashed]
    node16641 [shape=box, label=<<font color="black">[0] let comparefn = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16641 -> node16642 [color="black"]
    node16642_name [shape=none, label=<<font color="black">Block[16642]</font>>]
    node16642_name -> node16642 [arrowhead=none, color="black", style=dashed]
    node16642 [shape=box, label=<<font color="black">[0] %0 = (! (= comparefn undefined))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16642 -> node16643 [color="black"]
    node16643_name [shape=none, label=<<font color="black">Branch[16643]</font>>]
    node16643_name -> node16643 [arrowhead=none, color="black", style=dashed]
    node16643 [shape=diamond, label=<<font color="black">%0</font>> color="black" fillcolor="white", style=filled]
    node16643 -> node16644 [label=<<font color="black">true</font>> color="black"]
    node16643 -> node16646 [label=<<font color="black">false</font>> color="black"]
    node16644_name [shape=none, label=<<font color="black">Call[16644]</font>>]
    node16644_name -> node16644 [arrowhead=none, color="black", style=dashed]
    node16644 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(comparefn)</font>> color="black" fillcolor="white", style=filled]
    node16644 -> node16645 [color="black"]
    node16646_name [shape=none, label=<<font color="black">Branch[16646]</font>>]
    node16646_name -> node16646 [arrowhead=none, color="black", style=dashed]
    node16646 [shape=diamond, label=<<font color="black">%0</font>> color="black" fillcolor="white", style=filled]
    node16646 -> node16647 [label=<<font color="black">true</font>> color="black"]
    node16646 -> node16648 [label=<<font color="black">false</font>> color="black"]
    node16645_name [shape=none, label=<<font color="black">Block[16645]</font>>]
    node16645_name -> node16645 [arrowhead=none, color="black", style=dashed]
    node16645 [shape=box, label=<<font color="black">[0] %0 = (= %1 false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16645 -> node16646 [color="black"]
    node16647_name [shape=none, label=<<font color="black">Block[16647]</font>>]
    node16647_name -> node16647 [arrowhead=none, color="black", style=dashed]
    node16647 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1100])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16647 -> cluster2416_exit [color="black"]
    node16648_name [shape=none, label=<<font color="black">Block[16648]</font>>]
    node16648_name -> node16648 [arrowhead=none, color="black", style=dashed]
    node16648 [shape=box, label=<<font color="black">[0] let obj = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16648 -> node16649 [color="black"]
    node16649_name [shape=none, label=<<font color="black">Call[16649]</font>>]
    node16649_name -> node16649 [arrowhead=none, color="black", style=dashed]
    node16649 [shape=cds, label=<<font color="black">%2 = clo&lt;ValidateTypedArray&gt;(obj)</font>> color="black" fillcolor="white", style=filled]
    node16649 -> node16650 [color="black"]
    node16650_name [shape=none, label=<<font color="black">Block[16650]</font>>]
    node16650_name -> node16650 [arrowhead=none, color="black", style=dashed]
    node16650 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/>[1] let buffer = obj.ViewedArrayBuffer<BR ALIGN="LEFT"/>[2] let len = obj.ArrayLength<BR ALIGN="LEFT"/>[3] nop<BR ALIGN="LEFT"/>[4] let SortCompare = clo&lt;INTRINSICS.TypedArray.prototype.sort:clo0, [comparefn, buffer]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16650 -> node16651 [color="black"]
    node16651_name [shape=none, label=<<font color="black">Call[16651]</font>>]
    node16651_name -> node16651 [arrowhead=none, color="black", style=dashed]
    node16651 [shape=cds, label=<<font color="black">%3 = clo&lt;SortIndexedProperties&gt;(obj, len, SortCompare)</font>> color="black" fillcolor="white", style=filled]
    node16651 -> node16652 [color="black"]
    node16652_name [shape=none, label=<<font color="black">Block[16652]</font>>]
    node16652_name -> node16652 [arrowhead=none, color="black", style=dashed]
    node16652 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16652 -> cluster2416_exit [color="black"]
  }
}