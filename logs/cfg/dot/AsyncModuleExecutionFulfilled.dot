digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1893 {
    label = "def AsyncModuleExecutionFulfilled(module: CyclicModuleRecord): Const[~unused~]"
    style = rounded
    cluster1893_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1893_entry_name -> cluster1893_entry [arrowhead=none, color="black", style=dashed]
    cluster1893_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1893_entry -> node10236 [color="black"]
    cluster1893_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1893_exit_name -> cluster1893_exit [arrowhead=none, color="black", style=dashed]
    cluster1893_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10236_name [shape=none, label=<<font color="black">Branch[10236]</font>>]
    node10236_name -> node10236 [arrowhead=none, color="black", style=dashed]
    node10236 [shape=diamond, label=<<font color="black">(= module.Status ~evaluated~)</font>> color="black" fillcolor="white", style=filled]
    node10236 -> node10237 [label=<<font color="black">true</font>> color="black"]
    node10236 -> node10238 [label=<<font color="black">false</font>> color="black"]
    node10237_name [shape=none, label=<<font color="black">Block[10237]</font>>]
    node10237_name -> node10237 [arrowhead=none, color="black", style=dashed]
    node10237 [shape=box, label=<<font color="black">[0] assert (! (= module.EvaluationError ~empty~))<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10237 -> cluster1893_exit [color="black"]
    node10238_name [shape=none, label=<<font color="black">Block[10238]</font>>]
    node10238_name -> node10238 [arrowhead=none, color="black", style=dashed]
    node10238 [shape=box, label=<<font color="black">[0] assert (= module.Status ~evaluating-async~)<BR ALIGN="LEFT"/>[1] assert (= module.AsyncEvaluation true)<BR ALIGN="LEFT"/>[2] assert (= module.EvaluationError ~empty~)<BR ALIGN="LEFT"/>[3] module.AsyncEvaluation = false<BR ALIGN="LEFT"/>[4] module.Status = ~evaluated~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10238 -> node10239 [color="black"]
    node10239_name [shape=none, label=<<font color="black">Branch[10239]</font>>]
    node10239_name -> node10239 [arrowhead=none, color="black", style=dashed]
    node10239 [shape=diamond, label=<<font color="black">(! (= module.TopLevelCapability ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10239 -> node10240 [label=<<font color="black">true</font>> color="black"]
    node10239 -> node10243 [label=<<font color="black">false</font>> color="black"]
    node10240_name [shape=none, label=<<font color="black">Block[10240]</font>>]
    node10240_name -> node10240 [arrowhead=none, color="black", style=dashed]
    node10240 [shape=box, label=<<font color="black">[0] assert (= module.CycleRoot module)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10240 -> node10241 [color="black"]
    node10243_name [shape=none, label=<<font color="black">Block[10243]</font>>]
    node10243_name -> node10243 [arrowhead=none, color="black", style=dashed]
    node10243 [shape=box, label=<<font color="black">[0] let execList = (new [])[#776]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10243 -> node10244 [color="black"]
    node10241_name [shape=none, label=<<font color="black">Call[10241]</font>>]
    node10241_name -> node10241 [arrowhead=none, color="black", style=dashed]
    node10241 [shape=cds, label=<<font color="black">%0 = clo&lt;Call&gt;(module.TopLevelCapability.Resolve, undefined, (new [undefined])[#775])</font>> color="black" fillcolor="white", style=filled]
    node10241 -> node10242 [color="black"]
    node10244_name [shape=none, label=<<font color="black">Call[10244]</font>>]
    node10244_name -> node10244 [arrowhead=none, color="black", style=dashed]
    node10244 [shape=cds, label=<<font color="black">%1 = clo&lt;GatherAvailableAncestors&gt;(module, execList)</font>> color="black" fillcolor="white", style=filled]
    node10244 -> node10245 [color="black"]
    node10242_name [shape=none, label=<<font color="black">Block[10242]</font>>]
    node10242_name -> node10242 [arrowhead=none, color="black", style=dashed]
    node10242 [shape=box, label=<<font color="black">[0] [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10242 -> node10243 [color="black"]
    node10245_name [shape=none, label=<<font color="black">Block[10245]</font>>]
    node10245_name -> node10245 [arrowhead=none, color="black", style=dashed]
    node10245 [shape=box, label=<<font color="black">[0] (yet &quot;Let _sortedExecList_ be a List whose elements are the elements of _execList_, in the order in which they had their [[AsyncEvaluation]] fields set to *true* in InnerModuleEvaluation.&quot;)<BR ALIGN="LEFT"/>[1] assert (yet &quot;All elements of _sortedExecList_ have their [[AsyncEvaluation]] field set to *true*, [[PendingAsyncDependencies]] field set to 0, and [[EvaluationError]] field set to ~empty~.&quot;)<BR ALIGN="LEFT"/>[2] %3 = sortedExecList<BR ALIGN="LEFT"/>[3] %2 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10245 -> node10246 [color="black"]
    node10246_name [shape=none, label=<<font color="black">Branch[10246]</font>>]
    node10246_name -> node10246 [arrowhead=none, color="black", style=dashed]
    node10246 [shape=diamond, label=<<font color="black">(&lt; %2 %3.length)</font>> color="black" fillcolor="white", style=filled]
    node10246 -> node10247 [label=<<font color="black">true</font>> color="black"]
    node10246 -> node10262 [label=<<font color="black">false</font>> color="black"]
    node10247_name [shape=none, label=<<font color="black">Block[10247]</font>>]
    node10247_name -> node10247 [arrowhead=none, color="black", style=dashed]
    node10247 [shape=box, label=<<font color="black">[0] let m = %3[%2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10247 -> node10248 [color="black"]
    node10262_name [shape=none, label=<<font color="black">Block[10262]</font>>]
    node10262_name -> node10262 [arrowhead=none, color="black", style=dashed]
    node10262 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10262 -> cluster1893_exit [color="black"]
    node10248_name [shape=none, label=<<font color="black">Branch[10248]</font>>]
    node10248_name -> node10248 [arrowhead=none, color="black", style=dashed]
    node10248 [shape=diamond, label=<<font color="black">(= m.Status ~evaluated~)</font>> color="black" fillcolor="white", style=filled]
    node10248 -> node10249 [label=<<font color="black">true</font>> color="black"]
    node10248 -> node10250 [label=<<font color="black">false</font>> color="black"]
    node10249_name [shape=none, label=<<font color="black">Block[10249]</font>>]
    node10249_name -> node10249 [arrowhead=none, color="black", style=dashed]
    node10249 [shape=box, label=<<font color="black">[0] assert (! (= m.EvaluationError ~empty~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10249 -> node10261 [color="black"]
    node10250_name [shape=none, label=<<font color="black">Branch[10250]</font>>]
    node10250_name -> node10250 [arrowhead=none, color="black", style=dashed]
    node10250 [shape=diamond, label=<<font color="black">(= m.HasTLA true)</font>> color="black" fillcolor="white", style=filled]
    node10250 -> node10251 [label=<<font color="black">true</font>> color="black"]
    node10250 -> node10252 [label=<<font color="black">false</font>> color="black"]
    node10261_name [shape=none, label=<<font color="black">Block[10261]</font>>]
    node10261_name -> node10261 [arrowhead=none, color="black", style=dashed]
    node10261 [shape=box, label=<<font color="black">[0] %2 = (+ %2 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10261 -> node10246 [color="black"]
    node10251_name [shape=none, label=<<font color="black">Call[10251]</font>>]
    node10251_name -> node10251 [arrowhead=none, color="black", style=dashed]
    node10251 [shape=cds, label=<<font color="black">%4 = clo&lt;ExecuteAsyncModule&gt;(m)</font>> color="black" fillcolor="white", style=filled]
    node10251 -> node10261 [color="black"]
    node10252_name [shape=none, label=<<font color="black">Call[10252]</font>>]
    node10252_name -> node10252 [arrowhead=none, color="black", style=dashed]
    node10252 [shape=cds, label=<<font color="black">%5 = m-&gt;ExecuteModule()</font>> color="black" fillcolor="white", style=filled]
    node10252 -> node10253 [color="black"]
    node10253_name [shape=none, label=<<font color="black">Block[10253]</font>>]
    node10253_name -> node10253 [arrowhead=none, color="black", style=dashed]
    node10253 [shape=box, label=<<font color="black">[0] let result = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10253 -> node10254 [color="black"]
    node10254_name [shape=none, label=<<font color="black">Branch[10254]</font>>]
    node10254_name -> node10254 [arrowhead=none, color="black", style=dashed]
    node10254 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? result) (! (= result.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node10254 -> node10255 [label=<<font color="black">true</font>> color="black"]
    node10254 -> node10256 [label=<<font color="black">false</font>> color="black"]
    node10255_name [shape=none, label=<<font color="black">Call[10255]</font>>]
    node10255_name -> node10255 [arrowhead=none, color="black", style=dashed]
    node10255 [shape=cds, label=<<font color="black">%6 = clo&lt;AsyncModuleExecutionRejected&gt;(m, result.Value)</font>> color="black" fillcolor="white", style=filled]
    node10255 -> node10261 [color="black"]
    node10256_name [shape=none, label=<<font color="black">Block[10256]</font>>]
    node10256_name -> node10256 [arrowhead=none, color="black", style=dashed]
    node10256 [shape=box, label=<<font color="black">[0] m.Status = ~evaluated~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10256 -> node10257 [color="black"]
    node10257_name [shape=none, label=<<font color="black">Branch[10257]</font>>]
    node10257_name -> node10257 [arrowhead=none, color="black", style=dashed]
    node10257 [shape=diamond, label=<<font color="black">(! (= m.TopLevelCapability ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node10257 -> node10258 [label=<<font color="black">true</font>> color="black"]
    node10257 -> node10261 [label=<<font color="black">false</font>> color="black"]
    node10258_name [shape=none, label=<<font color="black">Block[10258]</font>>]
    node10258_name -> node10258 [arrowhead=none, color="black", style=dashed]
    node10258 [shape=box, label=<<font color="black">[0] assert (= m.CycleRoot m)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10258 -> node10259 [color="black"]
    node10259_name [shape=none, label=<<font color="black">Call[10259]</font>>]
    node10259_name -> node10259 [arrowhead=none, color="black", style=dashed]
    node10259 [shape=cds, label=<<font color="black">%7 = clo&lt;Call&gt;(m.TopLevelCapability.Resolve, undefined, (new [undefined])[#777])</font>> color="black" fillcolor="white", style=filled]
    node10259 -> node10260 [color="black"]
    node10260_name [shape=none, label=<<font color="black">Block[10260]</font>>]
    node10260_name -> node10260 [arrowhead=none, color="black", style=dashed]
    node10260 [shape=box, label=<<font color="black">[0] [! %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10260 -> node10261 [color="black"]
  }
}