digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1604 {
    label = "def <SYNTAX>:GeneratorExpression[0,1].InstantiateGeneratorFunctionExpression(this: Ast:GeneratorExpression[0,1], name?: Unknown): FunctionObject"
    style = rounded
    cluster1604_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1604_entry_name -> cluster1604_entry [arrowhead=none, color="black", style=dashed]
    cluster1604_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1604_entry -> node8607 [color="black"]
    cluster1604_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1604_exit_name -> cluster1604_exit [arrowhead=none, color="black", style=dashed]
    cluster1604_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8607_name [shape=none, label=<<font color="black">Block[8607]</font>>]
    node8607_name -> node8607 [arrowhead=none, color="black", style=dashed]
    node8607 [shape=box, label=<<font color="black">[0] assert (= name absent)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8607 -> node8608 [color="black"]
    node8608_name [shape=none, label=<<font color="black">Call[8608]</font>>]
    node8608_name -> node8608 [arrowhead=none, color="black", style=dashed]
    node8608 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;StringValue()</font>> color="black" fillcolor="white", style=filled]
    node8608 -> node8609 [color="black"]
    node8609_name [shape=none, label=<<font color="black">Block[8609]</font>>]
    node8609_name -> node8609 [arrowhead=none, color="black", style=dashed]
    node8609 [shape=box, label=<<font color="black">[0] name = %0<BR ALIGN="LEFT"/>[1] let outerEnv = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8609 -> node8610 [color="black"]
    node8610_name [shape=none, label=<<font color="black">Call[8610]</font>>]
    node8610_name -> node8610 [arrowhead=none, color="black", style=dashed]
    node8610 [shape=cds, label=<<font color="black">%1 = clo&lt;NewDeclarativeEnvironment&gt;(outerEnv)</font>> color="black" fillcolor="white", style=filled]
    node8610 -> node8611 [color="black"]
    node8611_name [shape=none, label=<<font color="black">Block[8611]</font>>]
    node8611_name -> node8611 [arrowhead=none, color="black", style=dashed]
    node8611 [shape=box, label=<<font color="black">[0] let funcEnv = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8611 -> node8612 [color="black"]
    node8612_name [shape=none, label=<<font color="black">Call[8612]</font>>]
    node8612_name -> node8612 [arrowhead=none, color="black", style=dashed]
    node8612 [shape=cds, label=<<font color="black">%2 = funcEnv-&gt;CreateImmutableBinding(name, false)</font>> color="black" fillcolor="white", style=filled]
    node8612 -> node8613 [color="black"]
    node8613_name [shape=none, label=<<font color="black">Block[8613]</font>>]
    node8613_name -> node8613 [arrowhead=none, color="black", style=dashed]
    node8613 [shape=box, label=<<font color="black">[0] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[1] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8613 -> node8614 [color="black"]
    node8614_name [shape=none, label=<<font color="black">Call[8614]</font>>]
    node8614_name -> node8614 [arrowhead=none, color="black", style=dashed]
    node8614 [shape=cds, label=<<font color="black">%3 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%GeneratorFunction.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, funcEnv, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8614 -> node8615 [color="black"]
    node8615_name [shape=none, label=<<font color="black">Block[8615]</font>>]
    node8615_name -> node8615 [arrowhead=none, color="black", style=dashed]
    node8615 [shape=box, label=<<font color="black">[0] let closure = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8615 -> node8616 [color="black"]
    node8616_name [shape=none, label=<<font color="black">Call[8616]</font>>]
    node8616_name -> node8616 [arrowhead=none, color="black", style=dashed]
    node8616 [shape=cds, label=<<font color="black">%4 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node8616 -> node8617 [color="black"]
    node8617_name [shape=none, label=<<font color="black">Call[8617]</font>>]
    node8617_name -> node8617 [arrowhead=none, color="black", style=dashed]
    node8617 [shape=cds, label=<<font color="black">%5 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%GeneratorFunction.prototype.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node8617 -> node8618 [color="black"]
    node8618_name [shape=none, label=<<font color="black">Block[8618]</font>>]
    node8618_name -> node8618 [arrowhead=none, color="black", style=dashed]
    node8618 [shape=box, label=<<font color="black">[0] let prototype = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8618 -> node8619 [color="black"]
    node8619_name [shape=none, label=<<font color="black">Call[8619]</font>>]
    node8619_name -> node8619 [arrowhead=none, color="black", style=dashed]
    node8619 [shape=cds, label=<<font color="black">%6 = clo&lt;DefinePropertyOrThrow&gt;(closure, &quot;prototype&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false))[#662])</font>> color="black" fillcolor="white", style=filled]
    node8619 -> node8620 [color="black"]
    node8620_name [shape=none, label=<<font color="black">Block[8620]</font>>]
    node8620_name -> node8620 [arrowhead=none, color="black", style=dashed]
    node8620 [shape=box, label=<<font color="black">[0] [! %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8620 -> node8621 [color="black"]
    node8621_name [shape=none, label=<<font color="black">Call[8621]</font>>]
    node8621_name -> node8621 [arrowhead=none, color="black", style=dashed]
    node8621 [shape=cds, label=<<font color="black">%7 = funcEnv-&gt;InitializeBinding(name, closure)</font>> color="black" fillcolor="white", style=filled]
    node8621 -> node8622 [color="black"]
    node8622_name [shape=none, label=<<font color="black">Block[8622]</font>>]
    node8622_name -> node8622 [arrowhead=none, color="black", style=dashed]
    node8622 [shape=box, label=<<font color="black">[0] [! %7]<BR ALIGN="LEFT"/>[1] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8622 -> cluster1604_exit [color="black"]
  }
}