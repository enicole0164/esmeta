digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2398 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.findIndex(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2398_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2398_entry_name -> cluster2398_entry [arrowhead=none, color="black", style=dashed]
    cluster2398_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2398_entry -> node16156 [color="black"]
    cluster2398_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2398_exit_name -> cluster2398_exit [arrowhead=none, color="black", style=dashed]
    cluster2398_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16156_name [shape=none, label=<<font color="black">Branch[16156]</font>>]
    node16156_name -> node16156 [arrowhead=none, color="black", style=dashed]
    node16156 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16156 -> node16157 [label=<<font color="black">true</font>> color="black"]
    node16156 -> node16158 [label=<<font color="black">false</font>> color="black"]
    node16157_name [shape=none, label=<<font color="black">Block[16157]</font>>]
    node16157_name -> node16157 [arrowhead=none, color="black", style=dashed]
    node16157 [shape=box, label=<<font color="black">[0] let predicate = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16157 -> node16159 [color="black"]
    node16158_name [shape=none, label=<<font color="black">Block[16158]</font>>]
    node16158_name -> node16158 [arrowhead=none, color="black", style=dashed]
    node16158 [shape=box, label=<<font color="black">[0] let predicate = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16158 -> node16159 [color="black"]
    node16159_name [shape=none, label=<<font color="black">Branch[16159]</font>>]
    node16159_name -> node16159 [arrowhead=none, color="black", style=dashed]
    node16159 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16159 -> node16160 [label=<<font color="black">true</font>> color="black"]
    node16159 -> node16161 [label=<<font color="black">false</font>> color="black"]
    node16160_name [shape=none, label=<<font color="black">Block[16160]</font>>]
    node16160_name -> node16160 [arrowhead=none, color="black", style=dashed]
    node16160 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16160 -> node16162 [color="black"]
    node16161_name [shape=none, label=<<font color="black">Block[16161]</font>>]
    node16161_name -> node16161 [arrowhead=none, color="black", style=dashed]
    node16161 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16161 -> node16162 [color="black"]
    node16162_name [shape=none, label=<<font color="black">Block[16162]</font>>]
    node16162_name -> node16162 [arrowhead=none, color="black", style=dashed]
    node16162 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16162 -> node16163 [color="black"]
    node16163_name [shape=none, label=<<font color="black">Call[16163]</font>>]
    node16163_name -> node16163 [arrowhead=none, color="black", style=dashed]
    node16163 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateTypedArray&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16163 -> node16164 [color="black"]
    node16164_name [shape=none, label=<<font color="black">Block[16164]</font>>]
    node16164_name -> node16164 [arrowhead=none, color="black", style=dashed]
    node16164 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let len = O.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16164 -> node16165 [color="black"]
    node16165_name [shape=none, label=<<font color="black">Call[16165]</font>>]
    node16165_name -> node16165 [arrowhead=none, color="black", style=dashed]
    node16165 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(predicate)</font>> color="black" fillcolor="white", style=filled]
    node16165 -> node16166 [color="black"]
    node16166_name [shape=none, label=<<font color="black">Branch[16166]</font>>]
    node16166_name -> node16166 [arrowhead=none, color="black", style=dashed]
    node16166 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node16166 -> node16167 [label=<<font color="black">true</font>> color="black"]
    node16166 -> node16168 [label=<<font color="black">false</font>> color="black"]
    node16167_name [shape=none, label=<<font color="black">Block[16167]</font>>]
    node16167_name -> node16167 [arrowhead=none, color="black", style=dashed]
    node16167 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1071])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16167 -> cluster2398_exit [color="black"]
    node16168_name [shape=none, label=<<font color="black">Block[16168]</font>>]
    node16168_name -> node16168 [arrowhead=none, color="black", style=dashed]
    node16168 [shape=box, label=<<font color="black">[0] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16168 -> node16169 [color="black"]
    node16169_name [shape=none, label=<<font color="black">Branch[16169]</font>>]
    node16169_name -> node16169 [arrowhead=none, color="black", style=dashed]
    node16169 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node16169 -> node16170 [label=<<font color="black">true</font>> color="black"]
    node16169 -> node16180 [label=<<font color="black">false</font>> color="black"]
    node16170_name [shape=none, label=<<font color="black">Call[16170]</font>>]
    node16170_name -> node16170 [arrowhead=none, color="black", style=dashed]
    node16170 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16170 -> node16171 [color="black"]
    node16180_name [shape=none, label=<<font color="black">Block[16180]</font>>]
    node16180_name -> node16180 [arrowhead=none, color="black", style=dashed]
    node16180 [shape=box, label=<<font color="black">[0] return -1.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16180 -> cluster2398_exit [color="black"]
    node16171_name [shape=none, label=<<font color="black">Block[16171]</font>>]
    node16171_name -> node16171 [arrowhead=none, color="black", style=dashed]
    node16171 [shape=box, label=<<font color="black">[0] let Pk = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16171 -> node16172 [color="black"]
    node16172_name [shape=none, label=<<font color="black">Call[16172]</font>>]
    node16172_name -> node16172 [arrowhead=none, color="black", style=dashed]
    node16172 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16172 -> node16173 [color="black"]
    node16173_name [shape=none, label=<<font color="black">Block[16173]</font>>]
    node16173_name -> node16173 [arrowhead=none, color="black", style=dashed]
    node16173 [shape=box, label=<<font color="black">[0] let kValue = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16173 -> node16174 [color="black"]
    node16174_name [shape=none, label=<<font color="black">Call[16174]</font>>]
    node16174_name -> node16174 [arrowhead=none, color="black", style=dashed]
    node16174 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(predicate, thisArg, (new [kValue, ([number] k), O])[#1072])</font>> color="black" fillcolor="white", style=filled]
    node16174 -> node16175 [color="black"]
    node16175_name [shape=none, label=<<font color="black">Call[16175]</font>>]
    node16175_name -> node16175 [arrowhead=none, color="black", style=dashed]
    node16175 [shape=cds, label=<<font color="black">%5 = clo&lt;ToBoolean&gt;([? %4])</font>> color="black" fillcolor="white", style=filled]
    node16175 -> node16176 [color="black"]
    node16176_name [shape=none, label=<<font color="black">Block[16176]</font>>]
    node16176_name -> node16176 [arrowhead=none, color="black", style=dashed]
    node16176 [shape=box, label=<<font color="black">[0] let testResult = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16176 -> node16177 [color="black"]
    node16177_name [shape=none, label=<<font color="black">Branch[16177]</font>>]
    node16177_name -> node16177 [arrowhead=none, color="black", style=dashed]
    node16177 [shape=diamond, label=<<font color="black">(= testResult true)</font>> color="black" fillcolor="white", style=filled]
    node16177 -> node16178 [label=<<font color="black">true</font>> color="black"]
    node16177 -> node16179 [label=<<font color="black">false</font>> color="black"]
    node16178_name [shape=none, label=<<font color="black">Block[16178]</font>>]
    node16178_name -> node16178 [arrowhead=none, color="black", style=dashed]
    node16178 [shape=box, label=<<font color="black">[0] return ([number] k)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16178 -> cluster2398_exit [color="black"]
    node16179_name [shape=none, label=<<font color="black">Block[16179]</font>>]
    node16179_name -> node16179 [arrowhead=none, color="black", style=dashed]
    node16179 [shape=box, label=<<font color="black">[0] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16179 -> node16169 [color="black"]
  }
}