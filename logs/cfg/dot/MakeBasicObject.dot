digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster129 {
    label = "def MakeBasicObject(internalSlotsList: Unknown["ListOfInternalSlotNames"]): Object"
    style = rounded
    cluster129_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster129_entry_name -> cluster129_entry [arrowhead=none, color="black", style=dashed]
    cluster129_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster129_entry -> node1087 [color="black"]
    cluster129_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster129_exit_name -> cluster129_exit [arrowhead=none, color="black", style=dashed]
    cluster129_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1087_name [shape=none, label=<<font color="black">Block[1087]</font>>]
    node1087_name -> node1087 [arrowhead=none, color="black", style=dashed]
    node1087 [shape=box, label=<<font color="black">[0] let obj = (new Object())[#39]<BR ALIGN="LEFT"/>[1] let idx = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1087 -> node1088 [color="black"]
    node1088_name [shape=none, label=<<font color="black">Branch[1088]</font>>]
    node1088_name -> node1088 [arrowhead=none, color="black", style=dashed]
    node1088 [shape=diamond, label=<<font color="black">(&lt; idx internalSlotsList.length)</font>> color="black" fillcolor="white", style=filled]
    node1088 -> node1089 [label=<<font color="black">true</font>> color="black"]
    node1088 -> node1090 [label=<<font color="black">false</font>> color="black"]
    node1089_name [shape=none, label=<<font color="black">Block[1089]</font>>]
    node1089_name -> node1089 [arrowhead=none, color="black", style=dashed]
    node1089 [shape=box, label=<<font color="black">[0] obj[internalSlotsList[idx]] = undefined<BR ALIGN="LEFT"/>[1] idx = (+ idx 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1089 -> node1088 [color="black"]
    node1090_name [shape=none, label=<<font color="black">Block[1090]</font>>]
    node1090_name -> node1090 [arrowhead=none, color="black", style=dashed]
    node1090 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/>[1] assert (yet &quot;If the caller will not be overriding both _obj_'s [[GetPrototypeOf]] and [[SetPrototypeOf]] essential internal methods, then _internalSlotsList_ contains [[Prototype]].&quot;)<BR ALIGN="LEFT"/>[2] assert (yet &quot;If the caller will not be overriding all of _obj_'s [[SetPrototypeOf]], [[IsExtensible]], and [[PreventExtensions]] essential internal methods, then _internalSlotsList_ contains [[Extensible]].&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1090 -> node1091 [color="black"]
    node1091_name [shape=none, label=<<font color="black">Branch[1091]</font>>]
    node1091_name -> node1091 [arrowhead=none, color="black", style=dashed]
    node1091 [shape=diamond, label=<<font color="black">(contains internalSlotsList &quot;Extensible&quot;)</font>> color="black" fillcolor="white", style=filled]
    node1091 -> node1092 [label=<<font color="black">true</font>> color="black"]
    node1091 -> node1093 [label=<<font color="black">false</font>> color="black"]
    node1092_name [shape=none, label=<<font color="black">Block[1092]</font>>]
    node1092_name -> node1092 [arrowhead=none, color="black", style=dashed]
    node1092 [shape=box, label=<<font color="black">[0] obj.Extensible = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1092 -> node1093 [color="black"]
    node1093_name [shape=none, label=<<font color="black">Block[1093]</font>>]
    node1093_name -> node1093 [arrowhead=none, color="black", style=dashed]
    node1093 [shape=box, label=<<font color="black">[0] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1093 -> cluster129_exit [color="black"]
  }
}