digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster815 {
    label = "def <SYNTAX>:AsyncArrowFunction[1,0].Contains(this: Ast:AsyncArrowFunction[1,0], symbol: Unknown): Boolean"
    style = rounded
    cluster815_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster815_entry_name -> cluster815_entry [arrowhead=none, color="black", style=dashed]
    cluster815_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster815_entry -> node3111 [color="black"]
    cluster815_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster815_exit_name -> cluster815_exit [arrowhead=none, color="black", style=dashed]
    cluster815_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3111_name [shape=none, label=<<font color="black">Branch[3111]</font>>]
    node3111_name -> node3111 [arrowhead=none, color="black", style=dashed]
    node3111 [shape=diamond, label=<<font color="black">(! (|| (|| (|| (|| (= symbol (nt |NewTarget|[])) (= symbol (nt |SuperProperty|[]))) (= symbol (nt |SuperCall|[]))) (= symbol &quot;super&quot;)) (= symbol &quot;this&quot;)))</font>> color="black" fillcolor="white", style=filled]
    node3111 -> node3112 [label=<<font color="black">true</font>> color="black"]
    node3111 -> node3113 [label=<<font color="black">false</font>> color="black"]
    node3112_name [shape=none, label=<<font color="black">Block[3112]</font>>]
    node3112_name -> node3112 [arrowhead=none, color="black", style=dashed]
    node3112 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3112 -> cluster815_exit [color="black"]
    node3113_name [shape=none, label=<<font color="black">Block[3113]</font>>]
    node3113_name -> node3113 [arrowhead=none, color="black", style=dashed]
    node3113 [shape=box, label=<<font color="black">[0] let head = (parse this[0] (nt |AsyncArrowHead|[]))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3113 -> node3114 [color="black"]
    node3114_name [shape=none, label=<<font color="black">Call[3114]</font>>]
    node3114_name -> node3114 [arrowhead=none, color="black", style=dashed]
    node3114 [shape=cds, label=<<font color="black">%0 = head-&gt;Contains(symbol)</font>> color="black" fillcolor="white", style=filled]
    node3114 -> node3115 [color="black"]
    node3115_name [shape=none, label=<<font color="black">Branch[3115]</font>>]
    node3115_name -> node3115 [arrowhead=none, color="black", style=dashed]
    node3115 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node3115 -> node3116 [label=<<font color="black">true</font>> color="black"]
    node3115 -> node3117 [label=<<font color="black">false</font>> color="black"]
    node3116_name [shape=none, label=<<font color="black">Block[3116]</font>>]
    node3116_name -> node3116 [arrowhead=none, color="black", style=dashed]
    node3116 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3116 -> cluster815_exit [color="black"]
    node3117_name [shape=none, label=<<font color="black">Call[3117]</font>>]
    node3117_name -> node3117 [arrowhead=none, color="black", style=dashed]
    node3117 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;Contains(symbol)</font>> color="black" fillcolor="white", style=filled]
    node3117 -> node3118 [color="black"]
    node3118_name [shape=none, label=<<font color="black">Block[3118]</font>>]
    node3118_name -> node3118 [arrowhead=none, color="black", style=dashed]
    node3118 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3118 -> cluster815_exit [color="black"]
  }
}