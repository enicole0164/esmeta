digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1566 {
    label = "def <SYNTAX>:FunctionDeclaration[0,0].InstantiateOrdinaryFunctionObject(this: Ast:FunctionDeclaration[0,0], env: Unknown, privateEnv: Unknown): FunctionObject"
    style = rounded
    cluster1566_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1566_entry_name -> cluster1566_entry [arrowhead=none, color="black", style=dashed]
    cluster1566_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1566_entry -> node8412 [color="black"]
    cluster1566_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1566_exit_name -> cluster1566_exit [arrowhead=none, color="black", style=dashed]
    cluster1566_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8412_name [shape=none, label=<<font color="black">Call[8412]</font>>]
    node8412_name -> node8412 [arrowhead=none, color="black", style=dashed]
    node8412 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;StringValue()</font>> color="black" fillcolor="white", style=filled]
    node8412 -> node8413 [color="black"]
    node8413_name [shape=none, label=<<font color="black">Block[8413]</font>>]
    node8413_name -> node8413 [arrowhead=none, color="black", style=dashed]
    node8413 [shape=box, label=<<font color="black">[0] let name = %0<BR ALIGN="LEFT"/>[1] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8413 -> node8414 [color="black"]
    node8414_name [shape=none, label=<<font color="black">Call[8414]</font>>]
    node8414_name -> node8414 [arrowhead=none, color="black", style=dashed]
    node8414 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Function.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8414 -> node8415 [color="black"]
    node8415_name [shape=none, label=<<font color="black">Block[8415]</font>>]
    node8415_name -> node8415 [arrowhead=none, color="black", style=dashed]
    node8415 [shape=box, label=<<font color="black">[0] let F = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8415 -> node8416 [color="black"]
    node8416_name [shape=none, label=<<font color="black">Call[8416]</font>>]
    node8416_name -> node8416 [arrowhead=none, color="black", style=dashed]
    node8416 [shape=cds, label=<<font color="black">%2 = clo&lt;SetFunctionName&gt;(F, name)</font>> color="black" fillcolor="white", style=filled]
    node8416 -> node8417 [color="black"]
    node8417_name [shape=none, label=<<font color="black">Call[8417]</font>>]
    node8417_name -> node8417 [arrowhead=none, color="black", style=dashed]
    node8417 [shape=cds, label=<<font color="black">%3 = clo&lt;MakeConstructor&gt;(F)</font>> color="black" fillcolor="white", style=filled]
    node8417 -> node8418 [color="black"]
    node8418_name [shape=none, label=<<font color="black">Block[8418]</font>>]
    node8418_name -> node8418 [arrowhead=none, color="black", style=dashed]
    node8418 [shape=box, label=<<font color="black">[0] return F<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8418 -> cluster1566_exit [color="black"]
  }
}