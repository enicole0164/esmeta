digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1153 {
    label = "def <INTERNAL>:ProxyExoticObject.PreventExtensions(O: ProxyExoticObject): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1153_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1153_entry_name -> cluster1153_entry [arrowhead=none, color="black", style=dashed]
    cluster1153_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1153_entry -> node5068 [color="black"]
    cluster1153_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1153_exit_name -> cluster1153_exit [arrowhead=none, color="black", style=dashed]
    cluster1153_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5068_name [shape=none, label=<<font color="black">Block[5068]</font>>]
    node5068_name -> node5068 [arrowhead=none, color="black", style=dashed]
    node5068 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5068 -> node5069 [color="black"]
    node5069_name [shape=none, label=<<font color="black">Branch[5069]</font>>]
    node5069_name -> node5069 [arrowhead=none, color="black", style=dashed]
    node5069 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5069 -> node5070 [label=<<font color="black">true</font>> color="black"]
    node5069 -> node5071 [label=<<font color="black">false</font>> color="black"]
    node5070_name [shape=none, label=<<font color="black">Block[5070]</font>>]
    node5070_name -> node5070 [arrowhead=none, color="black", style=dashed]
    node5070 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#490])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5070 -> cluster1153_exit [color="black"]
    node5071_name [shape=none, label=<<font color="black">Block[5071]</font>>]
    node5071_name -> node5071 [arrowhead=none, color="black", style=dashed]
    node5071 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5071 -> node5072 [color="black"]
    node5072_name [shape=none, label=<<font color="black">Call[5072]</font>>]
    node5072_name -> node5072 [arrowhead=none, color="black", style=dashed]
    node5072 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;preventExtensions&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5072 -> node5073 [color="black"]
    node5073_name [shape=none, label=<<font color="black">Block[5073]</font>>]
    node5073_name -> node5073 [arrowhead=none, color="black", style=dashed]
    node5073 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5073 -> node5074 [color="black"]
    node5074_name [shape=none, label=<<font color="black">Branch[5074]</font>>]
    node5074_name -> node5074 [arrowhead=none, color="black", style=dashed]
    node5074 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5074 -> node5075 [label=<<font color="black">true</font>> color="black"]
    node5074 -> node5077 [label=<<font color="black">false</font>> color="black"]
    node5075_name [shape=none, label=<<font color="black">Call[5075]</font>>]
    node5075_name -> node5075 [arrowhead=none, color="black", style=dashed]
    node5075 [shape=cds, label=<<font color="black">%1 = target-&gt;PreventExtensions()</font>> color="black" fillcolor="white", style=filled]
    node5075 -> node5076 [color="black"]
    node5077_name [shape=none, label=<<font color="black">Call[5077]</font>>]
    node5077_name -> node5077 [arrowhead=none, color="black", style=dashed]
    node5077 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(trap, handler, (new [target])[#491])</font>> color="black" fillcolor="white", style=filled]
    node5077 -> node5078 [color="black"]
    node5076_name [shape=none, label=<<font color="black">Block[5076]</font>>]
    node5076_name -> node5076 [arrowhead=none, color="black", style=dashed]
    node5076 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5076 -> cluster1153_exit [color="black"]
    node5078_name [shape=none, label=<<font color="black">Call[5078]</font>>]
    node5078_name -> node5078 [arrowhead=none, color="black", style=dashed]
    node5078 [shape=cds, label=<<font color="black">%3 = clo&lt;ToBoolean&gt;([? %2])</font>> color="black" fillcolor="white", style=filled]
    node5078 -> node5079 [color="black"]
    node5079_name [shape=none, label=<<font color="black">Block[5079]</font>>]
    node5079_name -> node5079 [arrowhead=none, color="black", style=dashed]
    node5079 [shape=box, label=<<font color="black">[0] let booleanTrapResult = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5079 -> node5080 [color="black"]
    node5080_name [shape=none, label=<<font color="black">Branch[5080]</font>>]
    node5080_name -> node5080 [arrowhead=none, color="black", style=dashed]
    node5080 [shape=diamond, label=<<font color="black">(= booleanTrapResult true)</font>> color="black" fillcolor="white", style=filled]
    node5080 -> node5081 [label=<<font color="black">true</font>> color="black"]
    node5080 -> node5085 [label=<<font color="black">false</font>> color="black"]
    node5081_name [shape=none, label=<<font color="black">Call[5081]</font>>]
    node5081_name -> node5081 [arrowhead=none, color="black", style=dashed]
    node5081 [shape=cds, label=<<font color="black">%4 = clo&lt;IsExtensible&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node5081 -> node5082 [color="black"]
    node5085_name [shape=none, label=<<font color="black">Block[5085]</font>>]
    node5085_name -> node5085 [arrowhead=none, color="black", style=dashed]
    node5085 [shape=box, label=<<font color="black">[0] return booleanTrapResult<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5085 -> cluster1153_exit [color="black"]
    node5082_name [shape=none, label=<<font color="black">Block[5082]</font>>]
    node5082_name -> node5082 [arrowhead=none, color="black", style=dashed]
    node5082 [shape=box, label=<<font color="black">[0] let extensibleTarget = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5082 -> node5083 [color="black"]
    node5083_name [shape=none, label=<<font color="black">Branch[5083]</font>>]
    node5083_name -> node5083 [arrowhead=none, color="black", style=dashed]
    node5083 [shape=diamond, label=<<font color="black">(= extensibleTarget true)</font>> color="black" fillcolor="white", style=filled]
    node5083 -> node5084 [label=<<font color="black">true</font>> color="black"]
    node5083 -> node5085 [label=<<font color="black">false</font>> color="black"]
    node5084_name [shape=none, label=<<font color="black">Block[5084]</font>>]
    node5084_name -> node5084 [arrowhead=none, color="black", style=dashed]
    node5084 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#492])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5084 -> cluster1153_exit [color="black"]
  }
}