digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1015 {
    label = "def <CONC>:GlobalEnvironmentRecord.CreateGlobalFunctionBinding(envRec: GlobalEnvironmentRecord, N: String, V: ESValue, D: Boolean): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1015_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1015_entry_name -> cluster1015_entry [arrowhead=none, color="black", style=dashed]
    cluster1015_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1015_entry -> node3802 [color="black"]
    cluster1015_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1015_exit_name -> cluster1015_exit [arrowhead=none, color="black", style=dashed]
    cluster1015_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3802_name [shape=none, label=<<font color="black">Block[3802]</font>>]
    node3802_name -> node3802 [arrowhead=none, color="black", style=dashed]
    node3802 [shape=box, label=<<font color="black">[0] let ObjRec = envRec.ObjectRecord<BR ALIGN="LEFT"/>[1] let globalObject = ObjRec.BindingObject<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3802 -> node3803 [color="black"]
    node3803_name [shape=none, label=<<font color="black">Call[3803]</font>>]
    node3803_name -> node3803 [arrowhead=none, color="black", style=dashed]
    node3803 [shape=cds, label=<<font color="black">%0 = globalObject-&gt;GetOwnProperty(N)</font>> color="black" fillcolor="white", style=filled]
    node3803 -> node3804 [color="black"]
    node3804_name [shape=none, label=<<font color="black">Block[3804]</font>>]
    node3804_name -> node3804 [arrowhead=none, color="black", style=dashed]
    node3804 [shape=box, label=<<font color="black">[0] let existingProp = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3804 -> node3805 [color="black"]
    node3805_name [shape=none, label=<<font color="black">Branch[3805]</font>>]
    node3805_name -> node3805 [arrowhead=none, color="black", style=dashed]
    node3805 [shape=diamond, label=<<font color="black">(|| (= existingProp undefined) (= existingProp.Configurable true))</font>> color="black" fillcolor="white", style=filled]
    node3805 -> node3806 [label=<<font color="black">true</font>> color="black"]
    node3805 -> node3807 [label=<<font color="black">false</font>> color="black"]
    node3806_name [shape=none, label=<<font color="black">Block[3806]</font>>]
    node3806_name -> node3806 [arrowhead=none, color="black", style=dashed]
    node3806 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor(&quot;Value&quot; -&gt; V, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; true, &quot;Configurable&quot; -&gt; D))[#379]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3806 -> node3808 [color="black"]
    node3807_name [shape=none, label=<<font color="black">Block[3807]</font>>]
    node3807_name -> node3807 [arrowhead=none, color="black", style=dashed]
    node3807 [shape=box, label=<<font color="black">[0] let desc = (new PropertyDescriptor(&quot;Value&quot; -&gt; V))[#380]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3807 -> node3808 [color="black"]
    node3808_name [shape=none, label=<<font color="black">Call[3808]</font>>]
    node3808_name -> node3808 [arrowhead=none, color="black", style=dashed]
    node3808 [shape=cds, label=<<font color="black">%1 = clo&lt;DefinePropertyOrThrow&gt;(globalObject, N, desc)</font>> color="black" fillcolor="white", style=filled]
    node3808 -> node3809 [color="black"]
    node3809_name [shape=none, label=<<font color="black">Block[3809]</font>>]
    node3809_name -> node3809 [arrowhead=none, color="black", style=dashed]
    node3809 [shape=box, label=<<font color="black">[0] [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3809 -> node3810 [color="black"]
    node3810_name [shape=none, label=<<font color="black">Call[3810]</font>>]
    node3810_name -> node3810 [arrowhead=none, color="black", style=dashed]
    node3810 [shape=cds, label=<<font color="black">%2 = clo&lt;Set&gt;(globalObject, N, V, false)</font>> color="black" fillcolor="white", style=filled]
    node3810 -> node3811 [color="black"]
    node3811_name [shape=none, label=<<font color="black">Block[3811]</font>>]
    node3811_name -> node3811 [arrowhead=none, color="black", style=dashed]
    node3811 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/>[1] let varDeclaredNames = envRec.VarNames<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3811 -> node3812 [color="black"]
    node3812_name [shape=none, label=<<font color="black">Branch[3812]</font>>]
    node3812_name -> node3812 [arrowhead=none, color="black", style=dashed]
    node3812 [shape=diamond, label=<<font color="black">(! (contains varDeclaredNames N))</font>> color="black" fillcolor="white", style=filled]
    node3812 -> node3813 [label=<<font color="black">true</font>> color="black"]
    node3812 -> node3814 [label=<<font color="black">false</font>> color="black"]
    node3813_name [shape=none, label=<<font color="black">Block[3813]</font>>]
    node3813_name -> node3813 [arrowhead=none, color="black", style=dashed]
    node3813 [shape=box, label=<<font color="black">[0] push varDeclaredNames &lt; N<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3813 -> node3814 [color="black"]
    node3814_name [shape=none, label=<<font color="black">Block[3814]</font>>]
    node3814_name -> node3814 [arrowhead=none, color="black", style=dashed]
    node3814 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3814 -> cluster1015_exit [color="black"]
  }
}