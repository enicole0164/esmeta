digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1285 {
    label = "def <SYNTAX>:OptionalExpression[0,0].Evaluation(this: Ast:OptionalExpression[0,0]): Unknown"
    style = rounded
    cluster1285_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1285_entry_name -> cluster1285_entry [arrowhead=none, color="black", style=dashed]
    cluster1285_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1285_entry -> node6020 [color="black"]
    cluster1285_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1285_exit_name -> cluster1285_exit [arrowhead=none, color="black", style=dashed]
    cluster1285_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6020_name [shape=none, label=<<font color="black">Call[6020]</font>>]
    node6020_name -> node6020 [arrowhead=none, color="black", style=dashed]
    node6020 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6020 -> node6021 [color="black"]
    node6021_name [shape=none, label=<<font color="black">Block[6021]</font>>]
    node6021_name -> node6021 [arrowhead=none, color="black", style=dashed]
    node6021 [shape=box, label=<<font color="black">[0] let baseReference = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6021 -> node6022 [color="black"]
    node6022_name [shape=none, label=<<font color="black">Call[6022]</font>>]
    node6022_name -> node6022 [arrowhead=none, color="black", style=dashed]
    node6022 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(baseReference)</font>> color="black" fillcolor="white", style=filled]
    node6022 -> node6023 [color="black"]
    node6023_name [shape=none, label=<<font color="black">Block[6023]</font>>]
    node6023_name -> node6023 [arrowhead=none, color="black", style=dashed]
    node6023 [shape=box, label=<<font color="black">[0] let baseValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6023 -> node6024 [color="black"]
    node6024_name [shape=none, label=<<font color="black">Branch[6024]</font>>]
    node6024_name -> node6024 [arrowhead=none, color="black", style=dashed]
    node6024 [shape=diamond, label=<<font color="black">(|| (= baseValue undefined) (= baseValue null))</font>> color="black" fillcolor="white", style=filled]
    node6024 -> node6025 [label=<<font color="black">true</font>> color="black"]
    node6024 -> node6026 [label=<<font color="black">false</font>> color="black"]
    node6025_name [shape=none, label=<<font color="black">Block[6025]</font>>]
    node6025_name -> node6025 [arrowhead=none, color="black", style=dashed]
    node6025 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6025 -> cluster1285_exit [color="black"]
    node6026_name [shape=none, label=<<font color="black">Call[6026]</font>>]
    node6026_name -> node6026 [arrowhead=none, color="black", style=dashed]
    node6026 [shape=cds, label=<<font color="black">%2 = this[1]-&gt;ChainEvaluation(baseValue, baseReference)</font>> color="black" fillcolor="white", style=filled]
    node6026 -> node6027 [color="black"]
    node6027_name [shape=none, label=<<font color="black">Block[6027]</font>>]
    node6027_name -> node6027 [arrowhead=none, color="black", style=dashed]
    node6027 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6027 -> cluster1285_exit [color="black"]
  }
}