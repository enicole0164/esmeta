digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1268 {
    label = "def EvaluateNew(constructExpr: Ast[MemberExpression, NewExpression], arguments: Ast[Arguments] | Const[~empty~]): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1268_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1268_entry_name -> cluster1268_entry [arrowhead=none, color="black", style=dashed]
    cluster1268_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1268_entry -> node5844 [color="black"]
    cluster1268_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1268_exit_name -> cluster1268_exit [arrowhead=none, color="black", style=dashed]
    cluster1268_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5844_name [shape=none, label=<<font color="black">Call[5844]</font>>]
    node5844_name -> node5844 [arrowhead=none, color="black", style=dashed]
    node5844 [shape=cds, label=<<font color="black">%0 = constructExpr-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node5844 -> node5845 [color="black"]
    node5845_name [shape=none, label=<<font color="black">Block[5845]</font>>]
    node5845_name -> node5845 [arrowhead=none, color="black", style=dashed]
    node5845 [shape=box, label=<<font color="black">[0] let ref = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5845 -> node5846 [color="black"]
    node5846_name [shape=none, label=<<font color="black">Call[5846]</font>>]
    node5846_name -> node5846 [arrowhead=none, color="black", style=dashed]
    node5846 [shape=cds, label=<<font color="black">%1 = clo&lt;GetValue&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node5846 -> node5847 [color="black"]
    node5847_name [shape=none, label=<<font color="black">Block[5847]</font>>]
    node5847_name -> node5847 [arrowhead=none, color="black", style=dashed]
    node5847 [shape=box, label=<<font color="black">[0] let constructor = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5847 -> node5848 [color="black"]
    node5848_name [shape=none, label=<<font color="black">Branch[5848]</font>>]
    node5848_name -> node5848 [arrowhead=none, color="black", style=dashed]
    node5848 [shape=diamond, label=<<font color="black">(= arguments ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node5848 -> node5849 [label=<<font color="black">true</font>> color="black"]
    node5848 -> node5850 [label=<<font color="black">false</font>> color="black"]
    node5849_name [shape=none, label=<<font color="black">Block[5849]</font>>]
    node5849_name -> node5849 [arrowhead=none, color="black", style=dashed]
    node5849 [shape=box, label=<<font color="black">[0] let argList = (new [])[#569]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5849 -> node5852 [color="black"]
    node5850_name [shape=none, label=<<font color="black">Call[5850]</font>>]
    node5850_name -> node5850 [arrowhead=none, color="black", style=dashed]
    node5850 [shape=cds, label=<<font color="black">%2 = arguments-&gt;ArgumentListEvaluation()</font>> color="black" fillcolor="white", style=filled]
    node5850 -> node5851 [color="black"]
    node5852_name [shape=none, label=<<font color="black">Call[5852]</font>>]
    node5852_name -> node5852 [arrowhead=none, color="black", style=dashed]
    node5852 [shape=cds, label=<<font color="black">%3 = clo&lt;IsConstructor&gt;(constructor)</font>> color="black" fillcolor="white", style=filled]
    node5852 -> node5853 [color="black"]
    node5851_name [shape=none, label=<<font color="black">Block[5851]</font>>]
    node5851_name -> node5851 [arrowhead=none, color="black", style=dashed]
    node5851 [shape=box, label=<<font color="black">[0] let argList = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5851 -> node5852 [color="black"]
    node5853_name [shape=none, label=<<font color="black">Branch[5853]</font>>]
    node5853_name -> node5853 [arrowhead=none, color="black", style=dashed]
    node5853 [shape=diamond, label=<<font color="black">(= %3 false)</font>> color="black" fillcolor="white", style=filled]
    node5853 -> node5854 [label=<<font color="black">true</font>> color="black"]
    node5853 -> node5855 [label=<<font color="black">false</font>> color="black"]
    node5854_name [shape=none, label=<<font color="black">Block[5854]</font>>]
    node5854_name -> node5854 [arrowhead=none, color="black", style=dashed]
    node5854 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#570])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5854 -> cluster1268_exit [color="black"]
    node5855_name [shape=none, label=<<font color="black">Call[5855]</font>>]
    node5855_name -> node5855 [arrowhead=none, color="black", style=dashed]
    node5855 [shape=cds, label=<<font color="black">%4 = clo&lt;Construct&gt;(constructor, argList)</font>> color="black" fillcolor="white", style=filled]
    node5855 -> node5856 [color="black"]
    node5856_name [shape=none, label=<<font color="black">Block[5856]</font>>]
    node5856_name -> node5856 [arrowhead=none, color="black", style=dashed]
    node5856 [shape=box, label=<<font color="black">[0] return [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5856 -> cluster1268_exit [color="black"]
  }
}