digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2094 {
    label = "def <BUILTIN>:INTRINSICS.Math.imul(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2094_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2094_entry_name -> cluster2094_entry [arrowhead=none, color="black", style=dashed]
    cluster2094_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2094_entry -> node12240 [color="black"]
    cluster2094_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2094_exit_name -> cluster2094_exit [arrowhead=none, color="black", style=dashed]
    cluster2094_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12240_name [shape=none, label=<<font color="black">Branch[12240]</font>>]
    node12240_name -> node12240 [arrowhead=none, color="black", style=dashed]
    node12240 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12240 -> node12241 [label=<<font color="black">true</font>> color="black"]
    node12240 -> node12242 [label=<<font color="black">false</font>> color="black"]
    node12241_name [shape=none, label=<<font color="black">Block[12241]</font>>]
    node12241_name -> node12241 [arrowhead=none, color="black", style=dashed]
    node12241 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12241 -> node12243 [color="black"]
    node12242_name [shape=none, label=<<font color="black">Block[12242]</font>>]
    node12242_name -> node12242 [arrowhead=none, color="black", style=dashed]
    node12242 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12242 -> node12243 [color="black"]
    node12243_name [shape=none, label=<<font color="black">Branch[12243]</font>>]
    node12243_name -> node12243 [arrowhead=none, color="black", style=dashed]
    node12243 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12243 -> node12244 [label=<<font color="black">true</font>> color="black"]
    node12243 -> node12245 [label=<<font color="black">false</font>> color="black"]
    node12244_name [shape=none, label=<<font color="black">Block[12244]</font>>]
    node12244_name -> node12244 [arrowhead=none, color="black", style=dashed]
    node12244 [shape=box, label=<<font color="black">[0] let y = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12244 -> node12246 [color="black"]
    node12245_name [shape=none, label=<<font color="black">Block[12245]</font>>]
    node12245_name -> node12245 [arrowhead=none, color="black", style=dashed]
    node12245 [shape=box, label=<<font color="black">[0] let y = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12245 -> node12246 [color="black"]
    node12246_name [shape=none, label=<<font color="black">Call[12246]</font>>]
    node12246_name -> node12246 [arrowhead=none, color="black", style=dashed]
    node12246 [shape=cds, label=<<font color="black">%0 = clo&lt;ToUint32&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12246 -> node12247 [color="black"]
    node12247_name [shape=none, label=<<font color="black">Block[12247]</font>>]
    node12247_name -> node12247 [arrowhead=none, color="black", style=dashed]
    node12247 [shape=box, label=<<font color="black">[0] let a = ([math] [? %0])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12247 -> node12248 [color="black"]
    node12248_name [shape=none, label=<<font color="black">Call[12248]</font>>]
    node12248_name -> node12248 [arrowhead=none, color="black", style=dashed]
    node12248 [shape=cds, label=<<font color="black">%1 = clo&lt;ToUint32&gt;(y)</font>> color="black" fillcolor="white", style=filled]
    node12248 -> node12249 [color="black"]
    node12249_name [shape=none, label=<<font color="black">Block[12249]</font>>]
    node12249_name -> node12249 [arrowhead=none, color="black", style=dashed]
    node12249 [shape=box, label=<<font color="black">[0] let b = ([math] [? %1])<BR ALIGN="LEFT"/>[1] let product = (% (* a b) (** 2 32))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12249 -> node12250 [color="black"]
    node12250_name [shape=none, label=<<font color="black">Branch[12250]</font>>]
    node12250_name -> node12250 [arrowhead=none, color="black", style=dashed]
    node12250 [shape=diamond, label=<<font color="black">(! (&lt; product (** 2 31)))</font>> color="black" fillcolor="white", style=filled]
    node12250 -> node12251 [label=<<font color="black">true</font>> color="black"]
    node12250 -> node12252 [label=<<font color="black">false</font>> color="black"]
    node12251_name [shape=none, label=<<font color="black">Block[12251]</font>>]
    node12251_name -> node12251 [arrowhead=none, color="black", style=dashed]
    node12251 [shape=box, label=<<font color="black">[0] return ([number] (- product (** 2 32)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12251 -> cluster2094_exit [color="black"]
    node12252_name [shape=none, label=<<font color="black">Block[12252]</font>>]
    node12252_name -> node12252 [arrowhead=none, color="black", style=dashed]
    node12252 [shape=box, label=<<font color="black">[0] return ([number] product)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12252 -> cluster2094_exit [color="black"]
  }
}