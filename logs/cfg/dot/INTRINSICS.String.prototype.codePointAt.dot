digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2171 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.codePointAt(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2171_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2171_entry_name -> cluster2171_entry [arrowhead=none, color="black", style=dashed]
    cluster2171_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2171_entry -> node13315 [color="black"]
    cluster2171_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2171_exit_name -> cluster2171_exit [arrowhead=none, color="black", style=dashed]
    cluster2171_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13315_name [shape=none, label=<<font color="black">Branch[13315]</font>>]
    node13315_name -> node13315 [arrowhead=none, color="black", style=dashed]
    node13315 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13315 -> node13316 [label=<<font color="black">true</font>> color="black"]
    node13315 -> node13317 [label=<<font color="black">false</font>> color="black"]
    node13316_name [shape=none, label=<<font color="black">Block[13316]</font>>]
    node13316_name -> node13316 [arrowhead=none, color="black", style=dashed]
    node13316 [shape=box, label=<<font color="black">[0] let pos = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13316 -> node13318 [color="black"]
    node13317_name [shape=none, label=<<font color="black">Block[13317]</font>>]
    node13317_name -> node13317 [arrowhead=none, color="black", style=dashed]
    node13317 [shape=box, label=<<font color="black">[0] let pos = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13317 -> node13318 [color="black"]
    node13318_name [shape=none, label=<<font color="black">Call[13318]</font>>]
    node13318_name -> node13318 [arrowhead=none, color="black", style=dashed]
    node13318 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13318 -> node13319 [color="black"]
    node13319_name [shape=none, label=<<font color="black">Block[13319]</font>>]
    node13319_name -> node13319 [arrowhead=none, color="black", style=dashed]
    node13319 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13319 -> node13320 [color="black"]
    node13320_name [shape=none, label=<<font color="black">Call[13320]</font>>]
    node13320_name -> node13320 [arrowhead=none, color="black", style=dashed]
    node13320 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13320 -> node13321 [color="black"]
    node13321_name [shape=none, label=<<font color="black">Block[13321]</font>>]
    node13321_name -> node13321 [arrowhead=none, color="black", style=dashed]
    node13321 [shape=box, label=<<font color="black">[0] let S = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13321 -> node13322 [color="black"]
    node13322_name [shape=none, label=<<font color="black">Call[13322]</font>>]
    node13322_name -> node13322 [arrowhead=none, color="black", style=dashed]
    node13322 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(pos)</font>> color="black" fillcolor="white", style=filled]
    node13322 -> node13323 [color="black"]
    node13323_name [shape=none, label=<<font color="black">Block[13323]</font>>]
    node13323_name -> node13323 [arrowhead=none, color="black", style=dashed]
    node13323 [shape=box, label=<<font color="black">[0] let position = [? %2]<BR ALIGN="LEFT"/>[1] let size = S.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13323 -> node13324 [color="black"]
    node13324_name [shape=none, label=<<font color="black">Branch[13324]</font>>]
    node13324_name -> node13324 [arrowhead=none, color="black", style=dashed]
    node13324 [shape=diamond, label=<<font color="black">(|| (&lt; position 0) (! (&lt; position size)))</font>> color="black" fillcolor="white", style=filled]
    node13324 -> node13325 [label=<<font color="black">true</font>> color="black"]
    node13324 -> node13326 [label=<<font color="black">false</font>> color="black"]
    node13325_name [shape=none, label=<<font color="black">Block[13325]</font>>]
    node13325_name -> node13325 [arrowhead=none, color="black", style=dashed]
    node13325 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13325 -> cluster2171_exit [color="black"]
    node13326_name [shape=none, label=<<font color="black">Call[13326]</font>>]
    node13326_name -> node13326 [arrowhead=none, color="black", style=dashed]
    node13326 [shape=cds, label=<<font color="black">%3 = clo&lt;CodePointAt&gt;(S, position)</font>> color="black" fillcolor="white", style=filled]
    node13326 -> node13327 [color="black"]
    node13327_name [shape=none, label=<<font color="black">Block[13327]</font>>]
    node13327_name -> node13327 [arrowhead=none, color="black", style=dashed]
    node13327 [shape=box, label=<<font color="black">[0] let cp = %3<BR ALIGN="LEFT"/>[1] return ([number] cp.CodePoint)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13327 -> cluster2171_exit [color="black"]
  }
}