digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2250 {
    label = "def <SYNTAX>:Assertion[0,0].CompileAssertion(this: Ast:Assertion[0,0]): Unknown["Matcher"]"
    style = rounded
    cluster2250_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2250_entry_name -> cluster2250_entry [arrowhead=none, color="black", style=dashed]
    cluster2250_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2250_entry -> node13952 [color="black"]
    cluster2250_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2250_exit_name -> cluster2250_exit [arrowhead=none, color="black", style=dashed]
    cluster2250_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13952_name [shape=none, label=<<font color="black">Block[13952]</font>>]
    node13952_name -> node13952 [arrowhead=none, color="black", style=dashed]
    node13952 [shape=box, label=<<font color="black">[0] (yet &quot;Return a new Matcher with parameters (_x_, _c_) that captures nothing and performs the following steps when called:\n  1. Assert: _x_ is a State.\n  1. Assert: _c_ is a Continuation.\n  1. Let _e_ be _x_'s _endIndex_.\n  1. If _e_ = 0, or if _Multiline_ is *true* and the character _Input_[_e_ - 1] is one of |LineTerminator|, then\n    1. Return _c_(_x_).\n  1. Return ~failure~.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13952 -> cluster2250_exit [color="black"]
  }
}