digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1135 {
    label = "def IntegerIndexedElementSet(O: IntegerIndexedExoticObject, index: Number, value: ESValue): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1135_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1135_entry_name -> cluster1135_entry [arrowhead=none, color="black", style=dashed]
    cluster1135_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1135_entry -> node4910 [color="black"]
    cluster1135_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1135_exit_name -> cluster1135_exit [arrowhead=none, color="black", style=dashed]
    cluster1135_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4910_name [shape=none, label=<<font color="black">Branch[4910]</font>>]
    node4910_name -> node4910 [arrowhead=none, color="black", style=dashed]
    node4910 [shape=diamond, label=<<font color="black">(= O.ContentType ~BigInt~)</font>> color="black" fillcolor="white", style=filled]
    node4910 -> node4911 [label=<<font color="black">true</font>> color="black"]
    node4910 -> node4913 [label=<<font color="black">false</font>> color="black"]
    node4911_name [shape=none, label=<<font color="black">Call[4911]</font>>]
    node4911_name -> node4911 [arrowhead=none, color="black", style=dashed]
    node4911 [shape=cds, label=<<font color="black">%0 = clo&lt;ToBigInt&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node4911 -> node4912 [color="black"]
    node4913_name [shape=none, label=<<font color="black">Call[4913]</font>>]
    node4913_name -> node4913 [arrowhead=none, color="black", style=dashed]
    node4913 [shape=cds, label=<<font color="black">%1 = clo&lt;ToNumber&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node4913 -> node4914 [color="black"]
    node4912_name [shape=none, label=<<font color="black">Block[4912]</font>>]
    node4912_name -> node4912 [arrowhead=none, color="black", style=dashed]
    node4912 [shape=box, label=<<font color="black">[0] let numValue = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4912 -> node4915 [color="black"]
    node4914_name [shape=none, label=<<font color="black">Block[4914]</font>>]
    node4914_name -> node4914 [arrowhead=none, color="black", style=dashed]
    node4914 [shape=box, label=<<font color="black">[0] let numValue = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4914 -> node4915 [color="black"]
    node4915_name [shape=none, label=<<font color="black">Call[4915]</font>>]
    node4915_name -> node4915 [arrowhead=none, color="black", style=dashed]
    node4915 [shape=cds, label=<<font color="black">%2 = clo&lt;IsValidIntegerIndex&gt;(O, index)</font>> color="black" fillcolor="white", style=filled]
    node4915 -> node4916 [color="black"]
    node4916_name [shape=none, label=<<font color="black">Branch[4916]</font>>]
    node4916_name -> node4916 [arrowhead=none, color="black", style=dashed]
    node4916 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node4916 -> node4917 [label=<<font color="black">true</font>> color="black"]
    node4916 -> node4923 [label=<<font color="black">false</font>> color="black"]
    node4917_name [shape=none, label=<<font color="black">Block[4917]</font>>]
    node4917_name -> node4917 [arrowhead=none, color="black", style=dashed]
    node4917 [shape=box, label=<<font color="black">[0] let offset = O.ByteOffset<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4917 -> node4918 [color="black"]
    node4923_name [shape=none, label=<<font color="black">Block[4923]</font>>]
    node4923_name -> node4923 [arrowhead=none, color="black", style=dashed]
    node4923 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4923 -> cluster1135_exit [color="black"]
    node4918_name [shape=none, label=<<font color="black">Call[4918]</font>>]
    node4918_name -> node4918 [arrowhead=none, color="black", style=dashed]
    node4918 [shape=cds, label=<<font color="black">%3 = clo&lt;TypedArrayElementSize&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node4918 -> node4919 [color="black"]
    node4919_name [shape=none, label=<<font color="black">Block[4919]</font>>]
    node4919_name -> node4919 [arrowhead=none, color="black", style=dashed]
    node4919 [shape=box, label=<<font color="black">[0] let elementSize = %3<BR ALIGN="LEFT"/>[1] let indexedPosition = (+ (* ([math] index) elementSize) offset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4919 -> node4920 [color="black"]
    node4920_name [shape=none, label=<<font color="black">Call[4920]</font>>]
    node4920_name -> node4920 [arrowhead=none, color="black", style=dashed]
    node4920 [shape=cds, label=<<font color="black">%4 = clo&lt;TypedArrayElementType&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node4920 -> node4921 [color="black"]
    node4921_name [shape=none, label=<<font color="black">Block[4921]</font>>]
    node4921_name -> node4921 [arrowhead=none, color="black", style=dashed]
    node4921 [shape=box, label=<<font color="black">[0] let elementType = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4921 -> node4922 [color="black"]
    node4922_name [shape=none, label=<<font color="black">Call[4922]</font>>]
    node4922_name -> node4922 [arrowhead=none, color="black", style=dashed]
    node4922 [shape=cds, label=<<font color="black">%5 = clo&lt;SetValueInBuffer&gt;(O.ViewedArrayBuffer, indexedPosition, elementType, numValue, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node4922 -> node4923 [color="black"]
  }
}