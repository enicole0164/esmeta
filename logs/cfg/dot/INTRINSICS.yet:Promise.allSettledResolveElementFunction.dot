digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2587 {
    label = "def <BUILTIN>:INTRINSICS.yet:`Promise.allSettled`ResolveElementFunction(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2587_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2587_entry_name -> cluster2587_entry [arrowhead=none, color="black", style=dashed]
    cluster2587_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2587_entry -> node18997 [color="black"]
    cluster2587_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2587_exit_name -> cluster2587_exit [arrowhead=none, color="black", style=dashed]
    cluster2587_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18997_name [shape=none, label=<<font color="black">Branch[18997]</font>>]
    node18997_name -> node18997 [arrowhead=none, color="black", style=dashed]
    node18997 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18997 -> node18998 [label=<<font color="black">true</font>> color="black"]
    node18997 -> node18999 [label=<<font color="black">false</font>> color="black"]
    node18998_name [shape=none, label=<<font color="black">Block[18998]</font>>]
    node18998_name -> node18998 [arrowhead=none, color="black", style=dashed]
    node18998 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18998 -> node19000 [color="black"]
    node18999_name [shape=none, label=<<font color="black">Block[18999]</font>>]
    node18999_name -> node18999 [arrowhead=none, color="black", style=dashed]
    node18999 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18999 -> node19000 [color="black"]
    node19000_name [shape=none, label=<<font color="black">Block[19000]</font>>]
    node19000_name -> node19000 [arrowhead=none, color="black", style=dashed]
    node19000 [shape=box, label=<<font color="black">[0] let F = @EXECUTION_STACK[0].Function<BR ALIGN="LEFT"/>[1] let alreadyCalled = F.AlreadyCalled<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19000 -> node19001 [color="black"]
    node19001_name [shape=none, label=<<font color="black">Branch[19001]</font>>]
    node19001_name -> node19001 [arrowhead=none, color="black", style=dashed]
    node19001 [shape=diamond, label=<<font color="black">(= alreadyCalled.Value true)</font>> color="black" fillcolor="white", style=filled]
    node19001 -> node19002 [label=<<font color="black">true</font>> color="black"]
    node19001 -> node19003 [label=<<font color="black">false</font>> color="black"]
    node19002_name [shape=none, label=<<font color="black">Block[19002]</font>>]
    node19002_name -> node19002 [arrowhead=none, color="black", style=dashed]
    node19002 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19002 -> cluster2587_exit [color="black"]
    node19003_name [shape=none, label=<<font color="black">Block[19003]</font>>]
    node19003_name -> node19003 [arrowhead=none, color="black", style=dashed]
    node19003 [shape=box, label=<<font color="black">[0] alreadyCalled.Value = true<BR ALIGN="LEFT"/>[1] let index = F.Index<BR ALIGN="LEFT"/>[2] let values = F.Values<BR ALIGN="LEFT"/>[3] let promiseCapability = F.Capability<BR ALIGN="LEFT"/>[4] let remainingElementsCount = F.RemainingElements<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19003 -> node19004 [color="black"]
    node19004_name [shape=none, label=<<font color="black">Call[19004]</font>>]
    node19004_name -> node19004 [arrowhead=none, color="black", style=dashed]
    node19004 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Object.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19004 -> node19005 [color="black"]
    node19005_name [shape=none, label=<<font color="black">Block[19005]</font>>]
    node19005_name -> node19005 [arrowhead=none, color="black", style=dashed]
    node19005 [shape=box, label=<<font color="black">[0] let obj = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19005 -> node19006 [color="black"]
    node19006_name [shape=none, label=<<font color="black">Call[19006]</font>>]
    node19006_name -> node19006 [arrowhead=none, color="black", style=dashed]
    node19006 [shape=cds, label=<<font color="black">%1 = clo&lt;CreateDataPropertyOrThrow&gt;(obj, &quot;status&quot;, &quot;fulfilled&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19006 -> node19007 [color="black"]
    node19007_name [shape=none, label=<<font color="black">Block[19007]</font>>]
    node19007_name -> node19007 [arrowhead=none, color="black", style=dashed]
    node19007 [shape=box, label=<<font color="black">[0] [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19007 -> node19008 [color="black"]
    node19008_name [shape=none, label=<<font color="black">Call[19008]</font>>]
    node19008_name -> node19008 [arrowhead=none, color="black", style=dashed]
    node19008 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateDataPropertyOrThrow&gt;(obj, &quot;value&quot;, x)</font>> color="black" fillcolor="white", style=filled]
    node19008 -> node19009 [color="black"]
    node19009_name [shape=none, label=<<font color="black">Block[19009]</font>>]
    node19009_name -> node19009 [arrowhead=none, color="black", style=dashed]
    node19009 [shape=box, label=<<font color="black">[0] [! %2]<BR ALIGN="LEFT"/>[1] values[index] = obj<BR ALIGN="LEFT"/>[2] remainingElementsCount.Value = (- remainingElementsCount.Value 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19009 -> node19010 [color="black"]
    node19010_name [shape=none, label=<<font color="black">Branch[19010]</font>>]
    node19010_name -> node19010 [arrowhead=none, color="black", style=dashed]
    node19010 [shape=diamond, label=<<font color="black">(= remainingElementsCount.Value 0)</font>> color="black" fillcolor="white", style=filled]
    node19010 -> node19011 [label=<<font color="black">true</font>> color="black"]
    node19010 -> node19015 [label=<<font color="black">false</font>> color="black"]
    node19011_name [shape=none, label=<<font color="black">Call[19011]</font>>]
    node19011_name -> node19011 [arrowhead=none, color="black", style=dashed]
    node19011 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateArrayFromList&gt;(values)</font>> color="black" fillcolor="white", style=filled]
    node19011 -> node19012 [color="black"]
    node19015_name [shape=none, label=<<font color="black">Block[19015]</font>>]
    node19015_name -> node19015 [arrowhead=none, color="black", style=dashed]
    node19015 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19015 -> cluster2587_exit [color="black"]
    node19012_name [shape=none, label=<<font color="black">Block[19012]</font>>]
    node19012_name -> node19012 [arrowhead=none, color="black", style=dashed]
    node19012 [shape=box, label=<<font color="black">[0] let valuesArray = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19012 -> node19013 [color="black"]
    node19013_name [shape=none, label=<<font color="black">Call[19013]</font>>]
    node19013_name -> node19013 [arrowhead=none, color="black", style=dashed]
    node19013 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(promiseCapability.Resolve, undefined, (new [valuesArray])[#1282])</font>> color="black" fillcolor="white", style=filled]
    node19013 -> node19014 [color="black"]
    node19014_name [shape=none, label=<<font color="black">Block[19014]</font>>]
    node19014_name -> node19014 [arrowhead=none, color="black", style=dashed]
    node19014 [shape=box, label=<<font color="black">[0] return [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19014 -> cluster2587_exit [color="black"]
  }
}