digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2039 {
    label = "def <BUILTIN>:INTRINSICS.Function.prototype[@@hasInstance](this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2039_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2039_entry_name -> cluster2039_entry [arrowhead=none, color="black", style=dashed]
    cluster2039_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2039_entry -> node11620 [color="black"]
    cluster2039_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2039_exit_name -> cluster2039_exit [arrowhead=none, color="black", style=dashed]
    cluster2039_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11620_name [shape=none, label=<<font color="black">Branch[11620]</font>>]
    node11620_name -> node11620 [arrowhead=none, color="black", style=dashed]
    node11620 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11620 -> node11621 [label=<<font color="black">true</font>> color="black"]
    node11620 -> node11622 [label=<<font color="black">false</font>> color="black"]
    node11621_name [shape=none, label=<<font color="black">Block[11621]</font>>]
    node11621_name -> node11621 [arrowhead=none, color="black", style=dashed]
    node11621 [shape=box, label=<<font color="black">[0] let V = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11621 -> node11623 [color="black"]
    node11622_name [shape=none, label=<<font color="black">Block[11622]</font>>]
    node11622_name -> node11622 [arrowhead=none, color="black", style=dashed]
    node11622 [shape=box, label=<<font color="black">[0] let V = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11622 -> node11623 [color="black"]
    node11623_name [shape=none, label=<<font color="black">Block[11623]</font>>]
    node11623_name -> node11623 [arrowhead=none, color="black", style=dashed]
    node11623 [shape=box, label=<<font color="black">[0] let F = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11623 -> node11624 [color="black"]
    node11624_name [shape=none, label=<<font color="black">Call[11624]</font>>]
    node11624_name -> node11624 [arrowhead=none, color="black", style=dashed]
    node11624 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryHasInstance&gt;(F, V)</font>> color="black" fillcolor="white", style=filled]
    node11624 -> node11625 [color="black"]
    node11625_name [shape=none, label=<<font color="black">Block[11625]</font>>]
    node11625_name -> node11625 [arrowhead=none, color="black", style=dashed]
    node11625 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11625 -> cluster2039_exit [color="black"]
  }
}