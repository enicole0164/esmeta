digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster62 {
    label = "def GetValue(V: Unknown): Normal[ESValue] | Abrupt"
    style = rounded
    cluster62_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster62_entry_name -> cluster62_entry [arrowhead=none, color="black", style=dashed]
    cluster62_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster62_entry -> node399 [color="black"]
    cluster62_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster62_exit_name -> cluster62_exit [arrowhead=none, color="black", style=dashed]
    cluster62_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node399_name [shape=none, label=<<font color="black">Block[399]</font>>]
    node399_name -> node399 [arrowhead=none, color="black", style=dashed]
    node399 [shape=box, label=<<font color="black">[0] [? V]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node399 -> node400 [color="black"]
    node400_name [shape=none, label=<<font color="black">Branch[400]</font>>]
    node400_name -> node400 [arrowhead=none, color="black", style=dashed]
    node400 [shape=diamond, label=<<font color="black">(! (? V: &quot;ReferenceRecord&quot;))</font>> color="black" fillcolor="white", style=filled]
    node400 -> node401 [label=<<font color="black">true</font>> color="black"]
    node400 -> node402 [label=<<font color="black">false</font>> color="black"]
    node401_name [shape=none, label=<<font color="black">Block[401]</font>>]
    node401_name -> node401 [arrowhead=none, color="black", style=dashed]
    node401 [shape=box, label=<<font color="black">[0] return V<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node401 -> cluster62_exit [color="black"]
    node402_name [shape=none, label=<<font color="black">Call[402]</font>>]
    node402_name -> node402 [arrowhead=none, color="black", style=dashed]
    node402 [shape=cds, label=<<font color="black">%0 = clo&lt;IsUnresolvableReference&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node402 -> node403 [color="black"]
    node403_name [shape=none, label=<<font color="black">Branch[403]</font>>]
    node403_name -> node403 [arrowhead=none, color="black", style=dashed]
    node403 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node403 -> node404 [label=<<font color="black">true</font>> color="black"]
    node403 -> node405 [label=<<font color="black">false</font>> color="black"]
    node404_name [shape=none, label=<<font color="black">Block[404]</font>>]
    node404_name -> node404 [arrowhead=none, color="black", style=dashed]
    node404 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#12])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node404 -> cluster62_exit [color="black"]
    node405_name [shape=none, label=<<font color="black">Call[405]</font>>]
    node405_name -> node405 [arrowhead=none, color="black", style=dashed]
    node405 [shape=cds, label=<<font color="black">%1 = clo&lt;IsPropertyReference&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node405 -> node406 [color="black"]
    node406_name [shape=none, label=<<font color="black">Branch[406]</font>>]
    node406_name -> node406 [arrowhead=none, color="black", style=dashed]
    node406 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node406 -> node407 [label=<<font color="black">true</font>> color="black"]
    node406 -> node416 [label=<<font color="black">false</font>> color="black"]
    node407_name [shape=none, label=<<font color="black">Call[407]</font>>]
    node407_name -> node407 [arrowhead=none, color="black", style=dashed]
    node407 [shape=cds, label=<<font color="black">%2 = clo&lt;ToObject&gt;(V.Base)</font>> color="black" fillcolor="white", style=filled]
    node407 -> node408 [color="black"]
    node416_name [shape=none, label=<<font color="black">Block[416]</font>>]
    node416_name -> node416 [arrowhead=none, color="black", style=dashed]
    node416 [shape=box, label=<<font color="black">[0] let base = V.Base<BR ALIGN="LEFT"/>[1] assert (? base: &quot;EnvironmentRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node416 -> node417 [color="black"]
    node408_name [shape=none, label=<<font color="black">Block[408]</font>>]
    node408_name -> node408 [arrowhead=none, color="black", style=dashed]
    node408 [shape=box, label=<<font color="black">[0] let baseObj = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node408 -> node409 [color="black"]
    node417_name [shape=none, label=<<font color="black">Call[417]</font>>]
    node417_name -> node417 [arrowhead=none, color="black", style=dashed]
    node417 [shape=cds, label=<<font color="black">%7 = base-&gt;GetBindingValue(V.ReferencedName, V.Strict)</font>> color="black" fillcolor="white", style=filled]
    node417 -> node418 [color="black"]
    node409_name [shape=none, label=<<font color="black">Call[409]</font>>]
    node409_name -> node409 [arrowhead=none, color="black", style=dashed]
    node409 [shape=cds, label=<<font color="black">%3 = clo&lt;IsPrivateReference&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node409 -> node410 [color="black"]
    node418_name [shape=none, label=<<font color="black">Block[418]</font>>]
    node418_name -> node418 [arrowhead=none, color="black", style=dashed]
    node418 [shape=box, label=<<font color="black">[0] return [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node418 -> cluster62_exit [color="black"]
    node410_name [shape=none, label=<<font color="black">Branch[410]</font>>]
    node410_name -> node410 [arrowhead=none, color="black", style=dashed]
    node410 [shape=diamond, label=<<font color="black">(= %3 true)</font>> color="black" fillcolor="white", style=filled]
    node410 -> node411 [label=<<font color="black">true</font>> color="black"]
    node410 -> node413 [label=<<font color="black">false</font>> color="black"]
    node411_name [shape=none, label=<<font color="black">Call[411]</font>>]
    node411_name -> node411 [arrowhead=none, color="black", style=dashed]
    node411 [shape=cds, label=<<font color="black">%4 = clo&lt;PrivateGet&gt;(baseObj, V.ReferencedName)</font>> color="black" fillcolor="white", style=filled]
    node411 -> node412 [color="black"]
    node413_name [shape=none, label=<<font color="black">Call[413]</font>>]
    node413_name -> node413 [arrowhead=none, color="black", style=dashed]
    node413 [shape=cds, label=<<font color="black">%6 = clo&lt;GetThisValue&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node413 -> node414 [color="black"]
    node412_name [shape=none, label=<<font color="black">Block[412]</font>>]
    node412_name -> node412 [arrowhead=none, color="black", style=dashed]
    node412 [shape=box, label=<<font color="black">[0] return [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node412 -> cluster62_exit [color="black"]
    node414_name [shape=none, label=<<font color="black">Call[414]</font>>]
    node414_name -> node414 [arrowhead=none, color="black", style=dashed]
    node414 [shape=cds, label=<<font color="black">%5 = baseObj-&gt;Get(V.ReferencedName, %6)</font>> color="black" fillcolor="white", style=filled]
    node414 -> node415 [color="black"]
    node415_name [shape=none, label=<<font color="black">Block[415]</font>>]
    node415_name -> node415 [arrowhead=none, color="black", style=dashed]
    node415 [shape=box, label=<<font color="black">[0] return [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node415 -> cluster62_exit [color="black"]
  }
}