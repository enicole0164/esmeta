digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2625 {
    label = "def <BUILTIN>:INTRINSICS.AsyncGeneratorFunction.prototype.prototype.throw(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2625_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2625_entry_name -> cluster2625_entry [arrowhead=none, color="black", style=dashed]
    cluster2625_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2625_entry -> node19454 [color="black"]
    cluster2625_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2625_exit_name -> cluster2625_exit [arrowhead=none, color="black", style=dashed]
    cluster2625_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19454_name [shape=none, label=<<font color="black">Branch[19454]</font>>]
    node19454_name -> node19454 [arrowhead=none, color="black", style=dashed]
    node19454 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19454 -> node19455 [label=<<font color="black">true</font>> color="black"]
    node19454 -> node19456 [label=<<font color="black">false</font>> color="black"]
    node19455_name [shape=none, label=<<font color="black">Block[19455]</font>>]
    node19455_name -> node19455 [arrowhead=none, color="black", style=dashed]
    node19455 [shape=box, label=<<font color="black">[0] let exception = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19455 -> node19457 [color="black"]
    node19456_name [shape=none, label=<<font color="black">Block[19456]</font>>]
    node19456_name -> node19456 [arrowhead=none, color="black", style=dashed]
    node19456 [shape=box, label=<<font color="black">[0] let exception = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19456 -> node19457 [color="black"]
    node19457_name [shape=none, label=<<font color="black">Block[19457]</font>>]
    node19457_name -> node19457 [arrowhead=none, color="black", style=dashed]
    node19457 [shape=box, label=<<font color="black">[0] let generator = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19457 -> node19458 [color="black"]
    node19458_name [shape=none, label=<<font color="black">Call[19458]</font>>]
    node19458_name -> node19458 [arrowhead=none, color="black", style=dashed]
    node19458 [shape=cds, label=<<font color="black">%0 = clo&lt;NewPromiseCapability&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19458 -> node19459 [color="black"]
    node19459_name [shape=none, label=<<font color="black">Block[19459]</font>>]
    node19459_name -> node19459 [arrowhead=none, color="black", style=dashed]
    node19459 [shape=box, label=<<font color="black">[0] let promiseCapability = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19459 -> node19460 [color="black"]
    node19460_name [shape=none, label=<<font color="black">Call[19460]</font>>]
    node19460_name -> node19460 [arrowhead=none, color="black", style=dashed]
    node19460 [shape=cds, label=<<font color="black">%1 = clo&lt;AsyncGeneratorValidate&gt;(generator, ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node19460 -> node19461 [color="black"]
    node19461_name [shape=none, label=<<font color="black">Call[19461]</font>>]
    node19461_name -> node19461 [arrowhead=none, color="black", style=dashed]
    node19461 [shape=cds, label=<<font color="black">%2 = clo&lt;Completion&gt;(%1)</font>> color="black" fillcolor="white", style=filled]
    node19461 -> node19462 [color="black"]
    node19462_name [shape=none, label=<<font color="black">Block[19462]</font>>]
    node19462_name -> node19462 [arrowhead=none, color="black", style=dashed]
    node19462 [shape=box, label=<<font color="black">[0] let result = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19462 -> node19463 [color="black"]
    node19463_name [shape=none, label=<<font color="black">Branch[19463]</font>>]
    node19463_name -> node19463 [arrowhead=none, color="black", style=dashed]
    node19463 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? result) (! (= result.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node19463 -> node19464 [label=<<font color="black">true</font>> color="black"]
    node19463 -> node19466 [label=<<font color="black">false</font>> color="black"]
    node19464_name [shape=none, label=<<font color="black">Call[19464]</font>>]
    node19464_name -> node19464 [arrowhead=none, color="black", style=dashed]
    node19464 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [result.Value])[#1326])</font>> color="black" fillcolor="white", style=filled]
    node19464 -> node19465 [color="black"]
    node19466_name [shape=none, label=<<font color="black">Branch[19466]</font>>]
    node19466_name -> node19466 [arrowhead=none, color="black", style=dashed]
    node19466 [shape=diamond, label=<<font color="black">(? result: &quot;CompletionRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19466 -> node19467 [label=<<font color="black">true</font>> color="black"]
    node19466 -> node19468 [label=<<font color="black">false</font>> color="black"]
    node19465_name [shape=none, label=<<font color="black">Block[19465]</font>>]
    node19465_name -> node19465 [arrowhead=none, color="black", style=dashed]
    node19465 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/>[1] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19465 -> cluster2625_exit [color="black"]
    node19467_name [shape=none, label=<<font color="black">Block[19467]</font>>]
    node19467_name -> node19467 [arrowhead=none, color="black", style=dashed]
    node19467 [shape=box, label=<<font color="black">[0] result = result.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19467 -> node19468 [color="black"]
    node19468_name [shape=none, label=<<font color="black">Block[19468]</font>>]
    node19468_name -> node19468 [arrowhead=none, color="black", style=dashed]
    node19468 [shape=box, label=<<font color="black">[0] let state = generator.AsyncGeneratorState<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19468 -> node19469 [color="black"]
    node19469_name [shape=none, label=<<font color="black">Branch[19469]</font>>]
    node19469_name -> node19469 [arrowhead=none, color="black", style=dashed]
    node19469 [shape=diamond, label=<<font color="black">(= state ~suspendedStart~)</font>> color="black" fillcolor="white", style=filled]
    node19469 -> node19470 [label=<<font color="black">true</font>> color="black"]
    node19469 -> node19471 [label=<<font color="black">false</font>> color="black"]
    node19470_name [shape=none, label=<<font color="black">Block[19470]</font>>]
    node19470_name -> node19470 [arrowhead=none, color="black", style=dashed]
    node19470 [shape=box, label=<<font color="black">[0] generator.AsyncGeneratorState = ~completed~<BR ALIGN="LEFT"/>[1] state = ~completed~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19470 -> node19471 [color="black"]
    node19471_name [shape=none, label=<<font color="black">Branch[19471]</font>>]
    node19471_name -> node19471 [arrowhead=none, color="black", style=dashed]
    node19471 [shape=diamond, label=<<font color="black">(= state ~completed~)</font>> color="black" fillcolor="white", style=filled]
    node19471 -> node19472 [label=<<font color="black">true</font>> color="black"]
    node19471 -> node19474 [label=<<font color="black">false</font>> color="black"]
    node19472_name [shape=none, label=<<font color="black">Call[19472]</font>>]
    node19472_name -> node19472 [arrowhead=none, color="black", style=dashed]
    node19472 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [exception])[#1327])</font>> color="black" fillcolor="white", style=filled]
    node19472 -> node19473 [color="black"]
    node19474_name [shape=none, label=<<font color="black">Call[19474]</font>>]
    node19474_name -> node19474 [arrowhead=none, color="black", style=dashed]
    node19474 [shape=cds, label=<<font color="black">%5 = clo&lt;ThrowCompletion&gt;(exception)</font>> color="black" fillcolor="white", style=filled]
    node19474 -> node19475 [color="black"]
    node19473_name [shape=none, label=<<font color="black">Block[19473]</font>>]
    node19473_name -> node19473 [arrowhead=none, color="black", style=dashed]
    node19473 [shape=box, label=<<font color="black">[0] [! %4]<BR ALIGN="LEFT"/>[1] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19473 -> cluster2625_exit [color="black"]
    node19475_name [shape=none, label=<<font color="black">Block[19475]</font>>]
    node19475_name -> node19475 [arrowhead=none, color="black", style=dashed]
    node19475 [shape=box, label=<<font color="black">[0] let completion = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19475 -> node19476 [color="black"]
    node19476_name [shape=none, label=<<font color="black">Call[19476]</font>>]
    node19476_name -> node19476 [arrowhead=none, color="black", style=dashed]
    node19476 [shape=cds, label=<<font color="black">%6 = clo&lt;AsyncGeneratorEnqueue&gt;(generator, completion, promiseCapability)</font>> color="black" fillcolor="white", style=filled]
    node19476 -> node19477 [color="black"]
    node19477_name [shape=none, label=<<font color="black">Branch[19477]</font>>]
    node19477_name -> node19477 [arrowhead=none, color="black", style=dashed]
    node19477 [shape=diamond, label=<<font color="black">(= state ~suspendedYield~)</font>> color="black" fillcolor="white", style=filled]
    node19477 -> node19478 [label=<<font color="black">true</font>> color="black"]
    node19477 -> node19479 [label=<<font color="black">false</font>> color="black"]
    node19478_name [shape=none, label=<<font color="black">Call[19478]</font>>]
    node19478_name -> node19478 [arrowhead=none, color="black", style=dashed]
    node19478 [shape=cds, label=<<font color="black">%7 = clo&lt;AsyncGeneratorResume&gt;(generator, completion)</font>> color="black" fillcolor="white", style=filled]
    node19478 -> node19480 [color="black"]
    node19479_name [shape=none, label=<<font color="black">Block[19479]</font>>]
    node19479_name -> node19479 [arrowhead=none, color="black", style=dashed]
    node19479 [shape=box, label=<<font color="black">[0] assert (|| (= state ~executing~) (= state ~awaiting-return~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19479 -> node19480 [color="black"]
    node19480_name [shape=none, label=<<font color="black">Block[19480]</font>>]
    node19480_name -> node19480 [arrowhead=none, color="black", style=dashed]
    node19480 [shape=box, label=<<font color="black">[0] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19480 -> cluster2625_exit [color="black"]
  }
}