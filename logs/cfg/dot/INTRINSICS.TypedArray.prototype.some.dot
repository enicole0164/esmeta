digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2414 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.some(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2414_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2414_entry_name -> cluster2414_entry [arrowhead=none, color="black", style=dashed]
    cluster2414_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2414_entry -> node16588 [color="black"]
    cluster2414_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2414_exit_name -> cluster2414_exit [arrowhead=none, color="black", style=dashed]
    cluster2414_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16588_name [shape=none, label=<<font color="black">Branch[16588]</font>>]
    node16588_name -> node16588 [arrowhead=none, color="black", style=dashed]
    node16588 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16588 -> node16589 [label=<<font color="black">true</font>> color="black"]
    node16588 -> node16590 [label=<<font color="black">false</font>> color="black"]
    node16589_name [shape=none, label=<<font color="black">Block[16589]</font>>]
    node16589_name -> node16589 [arrowhead=none, color="black", style=dashed]
    node16589 [shape=box, label=<<font color="black">[0] let callbackfn = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16589 -> node16591 [color="black"]
    node16590_name [shape=none, label=<<font color="black">Block[16590]</font>>]
    node16590_name -> node16590 [arrowhead=none, color="black", style=dashed]
    node16590 [shape=box, label=<<font color="black">[0] let callbackfn = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16590 -> node16591 [color="black"]
    node16591_name [shape=none, label=<<font color="black">Branch[16591]</font>>]
    node16591_name -> node16591 [arrowhead=none, color="black", style=dashed]
    node16591 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16591 -> node16592 [label=<<font color="black">true</font>> color="black"]
    node16591 -> node16593 [label=<<font color="black">false</font>> color="black"]
    node16592_name [shape=none, label=<<font color="black">Block[16592]</font>>]
    node16592_name -> node16592 [arrowhead=none, color="black", style=dashed]
    node16592 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16592 -> node16594 [color="black"]
    node16593_name [shape=none, label=<<font color="black">Block[16593]</font>>]
    node16593_name -> node16593 [arrowhead=none, color="black", style=dashed]
    node16593 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16593 -> node16594 [color="black"]
    node16594_name [shape=none, label=<<font color="black">Block[16594]</font>>]
    node16594_name -> node16594 [arrowhead=none, color="black", style=dashed]
    node16594 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16594 -> node16595 [color="black"]
    node16595_name [shape=none, label=<<font color="black">Call[16595]</font>>]
    node16595_name -> node16595 [arrowhead=none, color="black", style=dashed]
    node16595 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateTypedArray&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16595 -> node16596 [color="black"]
    node16596_name [shape=none, label=<<font color="black">Block[16596]</font>>]
    node16596_name -> node16596 [arrowhead=none, color="black", style=dashed]
    node16596 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let len = O.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16596 -> node16597 [color="black"]
    node16597_name [shape=none, label=<<font color="black">Call[16597]</font>>]
    node16597_name -> node16597 [arrowhead=none, color="black", style=dashed]
    node16597 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(callbackfn)</font>> color="black" fillcolor="white", style=filled]
    node16597 -> node16598 [color="black"]
    node16598_name [shape=none, label=<<font color="black">Branch[16598]</font>>]
    node16598_name -> node16598 [arrowhead=none, color="black", style=dashed]
    node16598 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node16598 -> node16599 [label=<<font color="black">true</font>> color="black"]
    node16598 -> node16600 [label=<<font color="black">false</font>> color="black"]
    node16599_name [shape=none, label=<<font color="black">Block[16599]</font>>]
    node16599_name -> node16599 [arrowhead=none, color="black", style=dashed]
    node16599 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1096])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16599 -> cluster2414_exit [color="black"]
    node16600_name [shape=none, label=<<font color="black">Block[16600]</font>>]
    node16600_name -> node16600 [arrowhead=none, color="black", style=dashed]
    node16600 [shape=box, label=<<font color="black">[0] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16600 -> node16601 [color="black"]
    node16601_name [shape=none, label=<<font color="black">Branch[16601]</font>>]
    node16601_name -> node16601 [arrowhead=none, color="black", style=dashed]
    node16601 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node16601 -> node16602 [label=<<font color="black">true</font>> color="black"]
    node16601 -> node16612 [label=<<font color="black">false</font>> color="black"]
    node16602_name [shape=none, label=<<font color="black">Call[16602]</font>>]
    node16602_name -> node16602 [arrowhead=none, color="black", style=dashed]
    node16602 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16602 -> node16603 [color="black"]
    node16612_name [shape=none, label=<<font color="black">Block[16612]</font>>]
    node16612_name -> node16612 [arrowhead=none, color="black", style=dashed]
    node16612 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16612 -> cluster2414_exit [color="black"]
    node16603_name [shape=none, label=<<font color="black">Block[16603]</font>>]
    node16603_name -> node16603 [arrowhead=none, color="black", style=dashed]
    node16603 [shape=box, label=<<font color="black">[0] let Pk = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16603 -> node16604 [color="black"]
    node16604_name [shape=none, label=<<font color="black">Call[16604]</font>>]
    node16604_name -> node16604 [arrowhead=none, color="black", style=dashed]
    node16604 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16604 -> node16605 [color="black"]
    node16605_name [shape=none, label=<<font color="black">Block[16605]</font>>]
    node16605_name -> node16605 [arrowhead=none, color="black", style=dashed]
    node16605 [shape=box, label=<<font color="black">[0] let kValue = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16605 -> node16606 [color="black"]
    node16606_name [shape=none, label=<<font color="black">Call[16606]</font>>]
    node16606_name -> node16606 [arrowhead=none, color="black", style=dashed]
    node16606 [shape=cds, label=<<font color="black">%4 = clo&lt;Call&gt;(callbackfn, thisArg, (new [kValue, ([number] k), O])[#1097])</font>> color="black" fillcolor="white", style=filled]
    node16606 -> node16607 [color="black"]
    node16607_name [shape=none, label=<<font color="black">Call[16607]</font>>]
    node16607_name -> node16607 [arrowhead=none, color="black", style=dashed]
    node16607 [shape=cds, label=<<font color="black">%5 = clo&lt;ToBoolean&gt;([? %4])</font>> color="black" fillcolor="white", style=filled]
    node16607 -> node16608 [color="black"]
    node16608_name [shape=none, label=<<font color="black">Block[16608]</font>>]
    node16608_name -> node16608 [arrowhead=none, color="black", style=dashed]
    node16608 [shape=box, label=<<font color="black">[0] let testResult = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16608 -> node16609 [color="black"]
    node16609_name [shape=none, label=<<font color="black">Branch[16609]</font>>]
    node16609_name -> node16609 [arrowhead=none, color="black", style=dashed]
    node16609 [shape=diamond, label=<<font color="black">(= testResult true)</font>> color="black" fillcolor="white", style=filled]
    node16609 -> node16610 [label=<<font color="black">true</font>> color="black"]
    node16609 -> node16611 [label=<<font color="black">false</font>> color="black"]
    node16610_name [shape=none, label=<<font color="black">Block[16610]</font>>]
    node16610_name -> node16610 [arrowhead=none, color="black", style=dashed]
    node16610 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16610 -> cluster2414_exit [color="black"]
    node16611_name [shape=none, label=<<font color="black">Block[16611]</font>>]
    node16611_name -> node16611 [arrowhead=none, color="black", style=dashed]
    node16611 [shape=box, label=<<font color="black">[0] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16611 -> node16601 [color="black"]
  }
}