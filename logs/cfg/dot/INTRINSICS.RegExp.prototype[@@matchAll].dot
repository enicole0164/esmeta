digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2326 {
    label = "def <BUILTIN>:INTRINSICS.RegExp.prototype[@@matchAll](this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2326_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2326_entry_name -> cluster2326_entry [arrowhead=none, color="black", style=dashed]
    cluster2326_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2326_entry -> node14392 [color="black"]
    cluster2326_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2326_exit_name -> cluster2326_exit [arrowhead=none, color="black", style=dashed]
    cluster2326_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14392_name [shape=none, label=<<font color="black">Branch[14392]</font>>]
    node14392_name -> node14392 [arrowhead=none, color="black", style=dashed]
    node14392 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node14392 -> node14393 [label=<<font color="black">true</font>> color="black"]
    node14392 -> node14394 [label=<<font color="black">false</font>> color="black"]
    node14393_name [shape=none, label=<<font color="black">Block[14393]</font>>]
    node14393_name -> node14393 [arrowhead=none, color="black", style=dashed]
    node14393 [shape=box, label=<<font color="black">[0] let string = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14393 -> node14395 [color="black"]
    node14394_name [shape=none, label=<<font color="black">Block[14394]</font>>]
    node14394_name -> node14394 [arrowhead=none, color="black", style=dashed]
    node14394 [shape=box, label=<<font color="black">[0] let string = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14394 -> node14395 [color="black"]
    node14395_name [shape=none, label=<<font color="black">Block[14395]</font>>]
    node14395_name -> node14395 [arrowhead=none, color="black", style=dashed]
    node14395 [shape=box, label=<<font color="black">[0] let R = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14395 -> node14396 [color="black"]
    node14396_name [shape=none, label=<<font color="black">Branch[14396]</font>>]
    node14396_name -> node14396 [arrowhead=none, color="black", style=dashed]
    node14396 [shape=diamond, label=<<font color="black">(! (= (typeof R) @Object))</font>> color="black" fillcolor="white", style=filled]
    node14396 -> node14397 [label=<<font color="black">true</font>> color="black"]
    node14396 -> node14398 [label=<<font color="black">false</font>> color="black"]
    node14397_name [shape=none, label=<<font color="black">Block[14397]</font>>]
    node14397_name -> node14397 [arrowhead=none, color="black", style=dashed]
    node14397 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#997])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14397 -> cluster2326_exit [color="black"]
    node14398_name [shape=none, label=<<font color="black">Call[14398]</font>>]
    node14398_name -> node14398 [arrowhead=none, color="black", style=dashed]
    node14398 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(string)</font>> color="black" fillcolor="white", style=filled]
    node14398 -> node14399 [color="black"]
    node14399_name [shape=none, label=<<font color="black">Block[14399]</font>>]
    node14399_name -> node14399 [arrowhead=none, color="black", style=dashed]
    node14399 [shape=box, label=<<font color="black">[0] let S = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14399 -> node14400 [color="black"]
    node14400_name [shape=none, label=<<font color="black">Call[14400]</font>>]
    node14400_name -> node14400 [arrowhead=none, color="black", style=dashed]
    node14400 [shape=cds, label=<<font color="black">%1 = clo&lt;SpeciesConstructor&gt;(R, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RegExp%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node14400 -> node14401 [color="black"]
    node14401_name [shape=none, label=<<font color="black">Block[14401]</font>>]
    node14401_name -> node14401 [arrowhead=none, color="black", style=dashed]
    node14401 [shape=box, label=<<font color="black">[0] let C = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14401 -> node14402 [color="black"]
    node14402_name [shape=none, label=<<font color="black">Call[14402]</font>>]
    node14402_name -> node14402 [arrowhead=none, color="black", style=dashed]
    node14402 [shape=cds, label=<<font color="black">%2 = clo&lt;Get&gt;(R, &quot;flags&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14402 -> node14403 [color="black"]
    node14403_name [shape=none, label=<<font color="black">Call[14403]</font>>]
    node14403_name -> node14403 [arrowhead=none, color="black", style=dashed]
    node14403 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;([? %2])</font>> color="black" fillcolor="white", style=filled]
    node14403 -> node14404 [color="black"]
    node14404_name [shape=none, label=<<font color="black">Block[14404]</font>>]
    node14404_name -> node14404 [arrowhead=none, color="black", style=dashed]
    node14404 [shape=box, label=<<font color="black">[0] let flags = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14404 -> node14405 [color="black"]
    node14405_name [shape=none, label=<<font color="black">Call[14405]</font>>]
    node14405_name -> node14405 [arrowhead=none, color="black", style=dashed]
    node14405 [shape=cds, label=<<font color="black">%4 = clo&lt;Construct&gt;(C, (new [R, flags])[#998])</font>> color="black" fillcolor="white", style=filled]
    node14405 -> node14406 [color="black"]
    node14406_name [shape=none, label=<<font color="black">Block[14406]</font>>]
    node14406_name -> node14406 [arrowhead=none, color="black", style=dashed]
    node14406 [shape=box, label=<<font color="black">[0] let matcher = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14406 -> node14407 [color="black"]
    node14407_name [shape=none, label=<<font color="black">Call[14407]</font>>]
    node14407_name -> node14407 [arrowhead=none, color="black", style=dashed]
    node14407 [shape=cds, label=<<font color="black">%5 = clo&lt;Get&gt;(R, &quot;lastIndex&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14407 -> node14408 [color="black"]
    node14408_name [shape=none, label=<<font color="black">Call[14408]</font>>]
    node14408_name -> node14408 [arrowhead=none, color="black", style=dashed]
    node14408 [shape=cds, label=<<font color="black">%6 = clo&lt;ToLength&gt;([? %5])</font>> color="black" fillcolor="white", style=filled]
    node14408 -> node14409 [color="black"]
    node14409_name [shape=none, label=<<font color="black">Block[14409]</font>>]
    node14409_name -> node14409 [arrowhead=none, color="black", style=dashed]
    node14409 [shape=box, label=<<font color="black">[0] let lastIndex = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14409 -> node14410 [color="black"]
    node14410_name [shape=none, label=<<font color="black">Call[14410]</font>>]
    node14410_name -> node14410 [arrowhead=none, color="black", style=dashed]
    node14410 [shape=cds, label=<<font color="black">%7 = clo&lt;Set&gt;(matcher, &quot;lastIndex&quot;, lastIndex, true)</font>> color="black" fillcolor="white", style=filled]
    node14410 -> node14411 [color="black"]
    node14411_name [shape=none, label=<<font color="black">Block[14411]</font>>]
    node14411_name -> node14411 [arrowhead=none, color="black", style=dashed]
    node14411 [shape=box, label=<<font color="black">[0] [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14411 -> node14412 [color="black"]
    node14412_name [shape=none, label=<<font color="black">Branch[14412]</font>>]
    node14412_name -> node14412 [arrowhead=none, color="black", style=dashed]
    node14412 [shape=diamond, label=<<font color="black">(contains flags &quot;g&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14412 -> node14413 [label=<<font color="black">true</font>> color="black"]
    node14412 -> node14414 [label=<<font color="black">false</font>> color="black"]
    node14413_name [shape=none, label=<<font color="black">Block[14413]</font>>]
    node14413_name -> node14413 [arrowhead=none, color="black", style=dashed]
    node14413 [shape=box, label=<<font color="black">[0] let global = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14413 -> node14415 [color="black"]
    node14414_name [shape=none, label=<<font color="black">Block[14414]</font>>]
    node14414_name -> node14414 [arrowhead=none, color="black", style=dashed]
    node14414 [shape=box, label=<<font color="black">[0] let global = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14414 -> node14415 [color="black"]
    node14415_name [shape=none, label=<<font color="black">Branch[14415]</font>>]
    node14415_name -> node14415 [arrowhead=none, color="black", style=dashed]
    node14415 [shape=diamond, label=<<font color="black">(contains flags &quot;u&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14415 -> node14416 [label=<<font color="black">true</font>> color="black"]
    node14415 -> node14417 [label=<<font color="black">false</font>> color="black"]
    node14416_name [shape=none, label=<<font color="black">Block[14416]</font>>]
    node14416_name -> node14416 [arrowhead=none, color="black", style=dashed]
    node14416 [shape=box, label=<<font color="black">[0] let fullUnicode = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14416 -> node14418 [color="black"]
    node14417_name [shape=none, label=<<font color="black">Block[14417]</font>>]
    node14417_name -> node14417 [arrowhead=none, color="black", style=dashed]
    node14417 [shape=box, label=<<font color="black">[0] let fullUnicode = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14417 -> node14418 [color="black"]
    node14418_name [shape=none, label=<<font color="black">Call[14418]</font>>]
    node14418_name -> node14418 [arrowhead=none, color="black", style=dashed]
    node14418 [shape=cds, label=<<font color="black">%8 = clo&lt;CreateRegExpStringIterator&gt;(matcher, S, global, fullUnicode)</font>> color="black" fillcolor="white", style=filled]
    node14418 -> node14419 [color="black"]
    node14419_name [shape=none, label=<<font color="black">Block[14419]</font>>]
    node14419_name -> node14419 [arrowhead=none, color="black", style=dashed]
    node14419 [shape=box, label=<<font color="black">[0] return %8<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14419 -> cluster2326_exit [color="black"]
  }
}