digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2623 {
    label = "def <BUILTIN>:INTRINSICS.AsyncGeneratorFunction.prototype.prototype.next(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2623_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2623_entry_name -> cluster2623_entry [arrowhead=none, color="black", style=dashed]
    cluster2623_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2623_entry -> node19402 [color="black"]
    cluster2623_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2623_exit_name -> cluster2623_exit [arrowhead=none, color="black", style=dashed]
    cluster2623_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19402_name [shape=none, label=<<font color="black">Branch[19402]</font>>]
    node19402_name -> node19402 [arrowhead=none, color="black", style=dashed]
    node19402 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19402 -> node19403 [label=<<font color="black">true</font>> color="black"]
    node19402 -> node19404 [label=<<font color="black">false</font>> color="black"]
    node19403_name [shape=none, label=<<font color="black">Block[19403]</font>>]
    node19403_name -> node19403 [arrowhead=none, color="black", style=dashed]
    node19403 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19403 -> node19405 [color="black"]
    node19404_name [shape=none, label=<<font color="black">Block[19404]</font>>]
    node19404_name -> node19404 [arrowhead=none, color="black", style=dashed]
    node19404 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19404 -> node19405 [color="black"]
    node19405_name [shape=none, label=<<font color="black">Block[19405]</font>>]
    node19405_name -> node19405 [arrowhead=none, color="black", style=dashed]
    node19405 [shape=box, label=<<font color="black">[0] let generator = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19405 -> node19406 [color="black"]
    node19406_name [shape=none, label=<<font color="black">Call[19406]</font>>]
    node19406_name -> node19406 [arrowhead=none, color="black", style=dashed]
    node19406 [shape=cds, label=<<font color="black">%0 = clo&lt;NewPromiseCapability&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19406 -> node19407 [color="black"]
    node19407_name [shape=none, label=<<font color="black">Block[19407]</font>>]
    node19407_name -> node19407 [arrowhead=none, color="black", style=dashed]
    node19407 [shape=box, label=<<font color="black">[0] let promiseCapability = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19407 -> node19408 [color="black"]
    node19408_name [shape=none, label=<<font color="black">Call[19408]</font>>]
    node19408_name -> node19408 [arrowhead=none, color="black", style=dashed]
    node19408 [shape=cds, label=<<font color="black">%1 = clo&lt;AsyncGeneratorValidate&gt;(generator, ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node19408 -> node19409 [color="black"]
    node19409_name [shape=none, label=<<font color="black">Call[19409]</font>>]
    node19409_name -> node19409 [arrowhead=none, color="black", style=dashed]
    node19409 [shape=cds, label=<<font color="black">%2 = clo&lt;Completion&gt;(%1)</font>> color="black" fillcolor="white", style=filled]
    node19409 -> node19410 [color="black"]
    node19410_name [shape=none, label=<<font color="black">Block[19410]</font>>]
    node19410_name -> node19410 [arrowhead=none, color="black", style=dashed]
    node19410 [shape=box, label=<<font color="black">[0] let result = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19410 -> node19411 [color="black"]
    node19411_name [shape=none, label=<<font color="black">Branch[19411]</font>>]
    node19411_name -> node19411 [arrowhead=none, color="black", style=dashed]
    node19411 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? result) (! (= result.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node19411 -> node19412 [label=<<font color="black">true</font>> color="black"]
    node19411 -> node19414 [label=<<font color="black">false</font>> color="black"]
    node19412_name [shape=none, label=<<font color="black">Call[19412]</font>>]
    node19412_name -> node19412 [arrowhead=none, color="black", style=dashed]
    node19412 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [result.Value])[#1323])</font>> color="black" fillcolor="white", style=filled]
    node19412 -> node19413 [color="black"]
    node19414_name [shape=none, label=<<font color="black">Branch[19414]</font>>]
    node19414_name -> node19414 [arrowhead=none, color="black", style=dashed]
    node19414 [shape=diamond, label=<<font color="black">(? result: &quot;CompletionRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19414 -> node19415 [label=<<font color="black">true</font>> color="black"]
    node19414 -> node19416 [label=<<font color="black">false</font>> color="black"]
    node19413_name [shape=none, label=<<font color="black">Block[19413]</font>>]
    node19413_name -> node19413 [arrowhead=none, color="black", style=dashed]
    node19413 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/>[1] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19413 -> cluster2623_exit [color="black"]
    node19415_name [shape=none, label=<<font color="black">Block[19415]</font>>]
    node19415_name -> node19415 [arrowhead=none, color="black", style=dashed]
    node19415 [shape=box, label=<<font color="black">[0] result = result.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19415 -> node19416 [color="black"]
    node19416_name [shape=none, label=<<font color="black">Block[19416]</font>>]
    node19416_name -> node19416 [arrowhead=none, color="black", style=dashed]
    node19416 [shape=box, label=<<font color="black">[0] let state = generator.AsyncGeneratorState<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19416 -> node19417 [color="black"]
    node19417_name [shape=none, label=<<font color="black">Branch[19417]</font>>]
    node19417_name -> node19417 [arrowhead=none, color="black", style=dashed]
    node19417 [shape=diamond, label=<<font color="black">(= state ~completed~)</font>> color="black" fillcolor="white", style=filled]
    node19417 -> node19418 [label=<<font color="black">true</font>> color="black"]
    node19417 -> node19422 [label=<<font color="black">false</font>> color="black"]
    node19418_name [shape=none, label=<<font color="black">Call[19418]</font>>]
    node19418_name -> node19418 [arrowhead=none, color="black", style=dashed]
    node19418 [shape=cds, label=<<font color="black">%4 = clo&lt;CreateIterResultObject&gt;(undefined, true)</font>> color="black" fillcolor="white", style=filled]
    node19418 -> node19419 [color="black"]
    node19422_name [shape=none, label=<<font color="black">Call[19422]</font>>]
    node19422_name -> node19422 [arrowhead=none, color="black", style=dashed]
    node19422 [shape=cds, label=<<font color="black">%6 = clo&lt;NormalCompletion&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node19422 -> node19423 [color="black"]
    node19419_name [shape=none, label=<<font color="black">Block[19419]</font>>]
    node19419_name -> node19419 [arrowhead=none, color="black", style=dashed]
    node19419 [shape=box, label=<<font color="black">[0] let iteratorResult = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19419 -> node19420 [color="black"]
    node19423_name [shape=none, label=<<font color="black">Block[19423]</font>>]
    node19423_name -> node19423 [arrowhead=none, color="black", style=dashed]
    node19423 [shape=box, label=<<font color="black">[0] let completion = %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19423 -> node19424 [color="black"]
    node19420_name [shape=none, label=<<font color="black">Call[19420]</font>>]
    node19420_name -> node19420 [arrowhead=none, color="black", style=dashed]
    node19420 [shape=cds, label=<<font color="black">%5 = clo&lt;Call&gt;(promiseCapability.Resolve, undefined, (new [iteratorResult])[#1324])</font>> color="black" fillcolor="white", style=filled]
    node19420 -> node19421 [color="black"]
    node19424_name [shape=none, label=<<font color="black">Call[19424]</font>>]
    node19424_name -> node19424 [arrowhead=none, color="black", style=dashed]
    node19424 [shape=cds, label=<<font color="black">%7 = clo&lt;AsyncGeneratorEnqueue&gt;(generator, completion, promiseCapability)</font>> color="black" fillcolor="white", style=filled]
    node19424 -> node19425 [color="black"]
    node19421_name [shape=none, label=<<font color="black">Block[19421]</font>>]
    node19421_name -> node19421 [arrowhead=none, color="black", style=dashed]
    node19421 [shape=box, label=<<font color="black">[0] [! %5]<BR ALIGN="LEFT"/>[1] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19421 -> cluster2623_exit [color="black"]
    node19425_name [shape=none, label=<<font color="black">Branch[19425]</font>>]
    node19425_name -> node19425 [arrowhead=none, color="black", style=dashed]
    node19425 [shape=diamond, label=<<font color="black">(|| (= state ~suspendedStart~) (= state ~suspendedYield~))</font>> color="black" fillcolor="white", style=filled]
    node19425 -> node19426 [label=<<font color="black">true</font>> color="black"]
    node19425 -> node19427 [label=<<font color="black">false</font>> color="black"]
    node19426_name [shape=none, label=<<font color="black">Call[19426]</font>>]
    node19426_name -> node19426 [arrowhead=none, color="black", style=dashed]
    node19426 [shape=cds, label=<<font color="black">%8 = clo&lt;AsyncGeneratorResume&gt;(generator, completion)</font>> color="black" fillcolor="white", style=filled]
    node19426 -> node19428 [color="black"]
    node19427_name [shape=none, label=<<font color="black">Block[19427]</font>>]
    node19427_name -> node19427 [arrowhead=none, color="black", style=dashed]
    node19427 [shape=box, label=<<font color="black">[0] assert (|| (= state ~executing~) (= state ~awaiting-return~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19427 -> node19428 [color="black"]
    node19428_name [shape=none, label=<<font color="black">Block[19428]</font>>]
    node19428_name -> node19428 [arrowhead=none, color="black", style=dashed]
    node19428 [shape=box, label=<<font color="black">[0] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19428 -> cluster2623_exit [color="black"]
  }
}