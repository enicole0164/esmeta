digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1219 {
    label = "def <SYNTAX>:ArrayLiteral[2,0].Evaluation(this: Ast:ArrayLiteral[2,0]): Unknown"
    style = rounded
    cluster1219_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1219_entry_name -> cluster1219_entry [arrowhead=none, color="black", style=dashed]
    cluster1219_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1219_entry -> node5534 [color="black"]
    cluster1219_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1219_exit_name -> cluster1219_exit [arrowhead=none, color="black", style=dashed]
    cluster1219_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5534_name [shape=none, label=<<font color="black">Call[5534]</font>>]
    node5534_name -> node5534 [arrowhead=none, color="black", style=dashed]
    node5534 [shape=cds, label=<<font color="black">%0 = clo&lt;ArrayCreate&gt;(0)</font>> color="black" fillcolor="white", style=filled]
    node5534 -> node5535 [color="black"]
    node5535_name [shape=none, label=<<font color="black">Block[5535]</font>>]
    node5535_name -> node5535 [arrowhead=none, color="black", style=dashed]
    node5535 [shape=box, label=<<font color="black">[0] let array = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5535 -> node5536 [color="black"]
    node5536_name [shape=none, label=<<font color="black">Call[5536]</font>>]
    node5536_name -> node5536 [arrowhead=none, color="black", style=dashed]
    node5536 [shape=cds, label=<<font color="black">%1 = this[0]-&gt;ArrayAccumulation(array, 0)</font>> color="black" fillcolor="white", style=filled]
    node5536 -> node5537 [color="black"]
    node5537_name [shape=none, label=<<font color="black">Block[5537]</font>>]
    node5537_name -> node5537 [arrowhead=none, color="black", style=dashed]
    node5537 [shape=box, label=<<font color="black">[0] let nextIndex = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5537 -> node5538 [color="black"]
    node5538_name [shape=none, label=<<font color="black">Branch[5538]</font>>]
    node5538_name -> node5538 [arrowhead=none, color="black", style=dashed]
    node5538 [shape=diamond, label=<<font color="black">(! (= this[1] absent))</font>> color="black" fillcolor="white", style=filled]
    node5538 -> node5539 [label=<<font color="black">true</font>> color="black"]
    node5538 -> node5541 [label=<<font color="black">false</font>> color="black"]
    node5539_name [shape=none, label=<<font color="black">Call[5539]</font>>]
    node5539_name -> node5539 [arrowhead=none, color="black", style=dashed]
    node5539 [shape=cds, label=<<font color="black">%2 = this[1]-&gt;ArrayAccumulation(array, nextIndex)</font>> color="black" fillcolor="white", style=filled]
    node5539 -> node5540 [color="black"]
    node5541_name [shape=none, label=<<font color="black">Block[5541]</font>>]
    node5541_name -> node5541 [arrowhead=none, color="black", style=dashed]
    node5541 [shape=box, label=<<font color="black">[0] return array<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5541 -> cluster1219_exit [color="black"]
    node5540_name [shape=none, label=<<font color="black">Block[5540]</font>>]
    node5540_name -> node5540 [arrowhead=none, color="black", style=dashed]
    node5540 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5540 -> node5541 [color="black"]
  }
}