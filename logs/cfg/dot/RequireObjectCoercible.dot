digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2684 {
    label = "def RequireObjectCoercible(argument: Unknown): Unknown"
    style = rounded
    cluster2684_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2684_entry_name -> cluster2684_entry [arrowhead=none, color="black", style=dashed]
    cluster2684_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2684_entry -> node19981 [color="black"]
    cluster2684_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2684_exit_name -> cluster2684_exit [arrowhead=none, color="black", style=dashed]
    cluster2684_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19981_name [shape=none, label=<<font color="black">Branch[19981]</font>>]
    node19981_name -> node19981 [arrowhead=none, color="black", style=dashed]
    node19981 [shape=diamond, label=<<font color="black">(= (typeof argument) @Undefined)</font>> color="black" fillcolor="white", style=filled]
    node19981 -> node19982 [label=<<font color="black">true</font>> color="black"]
    node19981 -> node19983 [label=<<font color="black">false</font>> color="black"]
    node19982_name [shape=none, label=<<font color="black">Block[19982]</font>>]
    node19982_name -> node19982 [arrowhead=none, color="black", style=dashed]
    node19982 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1369])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19982 -> cluster2684_exit [color="black"]
    node19983_name [shape=none, label=<<font color="black">Branch[19983]</font>>]
    node19983_name -> node19983 [arrowhead=none, color="black", style=dashed]
    node19983 [shape=diamond, label=<<font color="black">(= (typeof argument) @Null)</font>> color="black" fillcolor="white", style=filled]
    node19983 -> node19984 [label=<<font color="black">true</font>> color="black"]
    node19983 -> node19985 [label=<<font color="black">false</font>> color="black"]
    node19984_name [shape=none, label=<<font color="black">Block[19984]</font>>]
    node19984_name -> node19984 [arrowhead=none, color="black", style=dashed]
    node19984 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1370])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19984 -> cluster2684_exit [color="black"]
    node19985_name [shape=none, label=<<font color="black">Branch[19985]</font>>]
    node19985_name -> node19985 [arrowhead=none, color="black", style=dashed]
    node19985 [shape=diamond, label=<<font color="black">(= (typeof argument) @Boolean)</font>> color="black" fillcolor="white", style=filled]
    node19985 -> node19986 [label=<<font color="black">true</font>> color="black"]
    node19985 -> node19987 [label=<<font color="black">false</font>> color="black"]
    node19986_name [shape=none, label=<<font color="black">Block[19986]</font>>]
    node19986_name -> node19986 [arrowhead=none, color="black", style=dashed]
    node19986 [shape=box, label=<<font color="black">[0] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19986 -> cluster2684_exit [color="black"]
    node19987_name [shape=none, label=<<font color="black">Branch[19987]</font>>]
    node19987_name -> node19987 [arrowhead=none, color="black", style=dashed]
    node19987 [shape=diamond, label=<<font color="black">(= (typeof argument) @Number)</font>> color="black" fillcolor="white", style=filled]
    node19987 -> node19988 [label=<<font color="black">true</font>> color="black"]
    node19987 -> node19989 [label=<<font color="black">false</font>> color="black"]
    node19988_name [shape=none, label=<<font color="black">Block[19988]</font>>]
    node19988_name -> node19988 [arrowhead=none, color="black", style=dashed]
    node19988 [shape=box, label=<<font color="black">[0] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19988 -> cluster2684_exit [color="black"]
    node19989_name [shape=none, label=<<font color="black">Branch[19989]</font>>]
    node19989_name -> node19989 [arrowhead=none, color="black", style=dashed]
    node19989 [shape=diamond, label=<<font color="black">(= (typeof argument) @String)</font>> color="black" fillcolor="white", style=filled]
    node19989 -> node19990 [label=<<font color="black">true</font>> color="black"]
    node19989 -> node19991 [label=<<font color="black">false</font>> color="black"]
    node19990_name [shape=none, label=<<font color="black">Block[19990]</font>>]
    node19990_name -> node19990 [arrowhead=none, color="black", style=dashed]
    node19990 [shape=box, label=<<font color="black">[0] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19990 -> cluster2684_exit [color="black"]
    node19991_name [shape=none, label=<<font color="black">Branch[19991]</font>>]
    node19991_name -> node19991 [arrowhead=none, color="black", style=dashed]
    node19991 [shape=diamond, label=<<font color="black">(= (typeof argument) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node19991 -> node19992 [label=<<font color="black">true</font>> color="black"]
    node19991 -> node19993 [label=<<font color="black">false</font>> color="black"]
    node19992_name [shape=none, label=<<font color="black">Block[19992]</font>>]
    node19992_name -> node19992 [arrowhead=none, color="black", style=dashed]
    node19992 [shape=box, label=<<font color="black">[0] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19992 -> cluster2684_exit [color="black"]
    node19993_name [shape=none, label=<<font color="black">Branch[19993]</font>>]
    node19993_name -> node19993 [arrowhead=none, color="black", style=dashed]
    node19993 [shape=diamond, label=<<font color="black">(= (typeof argument) @BigInt)</font>> color="black" fillcolor="white", style=filled]
    node19993 -> node19994 [label=<<font color="black">true</font>> color="black"]
    node19993 -> node19995 [label=<<font color="black">false</font>> color="black"]
    node19994_name [shape=none, label=<<font color="black">Block[19994]</font>>]
    node19994_name -> node19994 [arrowhead=none, color="black", style=dashed]
    node19994 [shape=box, label=<<font color="black">[0] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19994 -> cluster2684_exit [color="black"]
    node19995_name [shape=none, label=<<font color="black">Block[19995]</font>>]
    node19995_name -> node19995 [arrowhead=none, color="black", style=dashed]
    node19995 [shape=box, label=<<font color="black">[0] assert (= (typeof argument) @Object)<BR ALIGN="LEFT"/>[1] return argument<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19995 -> cluster2684_exit [color="black"]
  }
}