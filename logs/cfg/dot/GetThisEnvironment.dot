digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1034 {
    label = "def GetThisEnvironment(): EnvironmentRecord"
    style = rounded
    cluster1034_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1034_entry_name -> cluster1034_entry [arrowhead=none, color="black", style=dashed]
    cluster1034_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1034_entry -> node3892 [color="black"]
    cluster1034_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1034_exit_name -> cluster1034_exit [arrowhead=none, color="black", style=dashed]
    cluster1034_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3892_name [shape=none, label=<<font color="black">Block[3892]</font>>]
    node3892_name -> node3892 [arrowhead=none, color="black", style=dashed]
    node3892 [shape=box, label=<<font color="black">[0] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3892 -> node3893 [color="black"]
    node3893_name [shape=none, label=<<font color="black">Branch[3893]</font>>]
    node3893_name -> node3893 [arrowhead=none, color="black", style=dashed]
    node3893 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node3893 -> node3894 [label=<<font color="black">true</font>> color="black"]
    node3894_name [shape=none, label=<<font color="black">Call[3894]</font>>]
    node3894_name -> node3894 [arrowhead=none, color="black", style=dashed]
    node3894 [shape=cds, label=<<font color="black">%0 = env-&gt;HasThisBinding()</font>> color="black" fillcolor="white", style=filled]
    node3894 -> node3895 [color="black"]
    node3895_name [shape=none, label=<<font color="black">Block[3895]</font>>]
    node3895_name -> node3895 [arrowhead=none, color="black", style=dashed]
    node3895 [shape=box, label=<<font color="black">[0] let exists = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3895 -> node3896 [color="black"]
    node3896_name [shape=none, label=<<font color="black">Branch[3896]</font>>]
    node3896_name -> node3896 [arrowhead=none, color="black", style=dashed]
    node3896 [shape=diamond, label=<<font color="black">(= exists true)</font>> color="black" fillcolor="white", style=filled]
    node3896 -> node3897 [label=<<font color="black">true</font>> color="black"]
    node3896 -> node3898 [label=<<font color="black">false</font>> color="black"]
    node3897_name [shape=none, label=<<font color="black">Block[3897]</font>>]
    node3897_name -> node3897 [arrowhead=none, color="black", style=dashed]
    node3897 [shape=box, label=<<font color="black">[0] return env<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3897 -> cluster1034_exit [color="black"]
    node3898_name [shape=none, label=<<font color="black">Block[3898]</font>>]
    node3898_name -> node3898 [arrowhead=none, color="black", style=dashed]
    node3898 [shape=box, label=<<font color="black">[0] let outer = env.OuterEnv<BR ALIGN="LEFT"/>[1] assert (! (= outer null))<BR ALIGN="LEFT"/>[2] env = outer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3898 -> node3893 [color="black"]
  }
}