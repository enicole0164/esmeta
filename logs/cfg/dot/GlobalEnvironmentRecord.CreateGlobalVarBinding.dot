digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1014 {
    label = "def <CONC>:GlobalEnvironmentRecord.CreateGlobalVarBinding(envRec: GlobalEnvironmentRecord, N: String, D: Boolean): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1014_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1014_entry_name -> cluster1014_entry [arrowhead=none, color="black", style=dashed]
    cluster1014_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1014_entry -> node3788 [color="black"]
    cluster1014_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1014_exit_name -> cluster1014_exit [arrowhead=none, color="black", style=dashed]
    cluster1014_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node3788_name [shape=none, label=<<font color="black">Block[3788]</font>>]
    node3788_name -> node3788 [arrowhead=none, color="black", style=dashed]
    node3788 [shape=box, label=<<font color="black">[0] let ObjRec = envRec.ObjectRecord<BR ALIGN="LEFT"/>[1] let globalObject = ObjRec.BindingObject<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3788 -> node3789 [color="black"]
    node3789_name [shape=none, label=<<font color="black">Call[3789]</font>>]
    node3789_name -> node3789 [arrowhead=none, color="black", style=dashed]
    node3789 [shape=cds, label=<<font color="black">%0 = clo&lt;HasOwnProperty&gt;(globalObject, N)</font>> color="black" fillcolor="white", style=filled]
    node3789 -> node3790 [color="black"]
    node3790_name [shape=none, label=<<font color="black">Block[3790]</font>>]
    node3790_name -> node3790 [arrowhead=none, color="black", style=dashed]
    node3790 [shape=box, label=<<font color="black">[0] let hasProperty = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3790 -> node3791 [color="black"]
    node3791_name [shape=none, label=<<font color="black">Call[3791]</font>>]
    node3791_name -> node3791 [arrowhead=none, color="black", style=dashed]
    node3791 [shape=cds, label=<<font color="black">%1 = clo&lt;IsExtensible&gt;(globalObject)</font>> color="black" fillcolor="white", style=filled]
    node3791 -> node3792 [color="black"]
    node3792_name [shape=none, label=<<font color="black">Block[3792]</font>>]
    node3792_name -> node3792 [arrowhead=none, color="black", style=dashed]
    node3792 [shape=box, label=<<font color="black">[0] let extensible = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3792 -> node3793 [color="black"]
    node3793_name [shape=none, label=<<font color="black">Branch[3793]</font>>]
    node3793_name -> node3793 [arrowhead=none, color="black", style=dashed]
    node3793 [shape=diamond, label=<<font color="black">(&amp;&amp; (= hasProperty false) (= extensible true))</font>> color="black" fillcolor="white", style=filled]
    node3793 -> node3794 [label=<<font color="black">true</font>> color="black"]
    node3793 -> node3798 [label=<<font color="black">false</font>> color="black"]
    node3794_name [shape=none, label=<<font color="black">Call[3794]</font>>]
    node3794_name -> node3794 [arrowhead=none, color="black", style=dashed]
    node3794 [shape=cds, label=<<font color="black">%2 = ObjRec-&gt;CreateMutableBinding(N, D)</font>> color="black" fillcolor="white", style=filled]
    node3794 -> node3795 [color="black"]
    node3798_name [shape=none, label=<<font color="black">Block[3798]</font>>]
    node3798_name -> node3798 [arrowhead=none, color="black", style=dashed]
    node3798 [shape=box, label=<<font color="black">[0] let varDeclaredNames = envRec.VarNames<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3798 -> node3799 [color="black"]
    node3795_name [shape=none, label=<<font color="black">Block[3795]</font>>]
    node3795_name -> node3795 [arrowhead=none, color="black", style=dashed]
    node3795 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3795 -> node3796 [color="black"]
    node3799_name [shape=none, label=<<font color="black">Branch[3799]</font>>]
    node3799_name -> node3799 [arrowhead=none, color="black", style=dashed]
    node3799 [shape=diamond, label=<<font color="black">(! (contains varDeclaredNames N))</font>> color="black" fillcolor="white", style=filled]
    node3799 -> node3800 [label=<<font color="black">true</font>> color="black"]
    node3799 -> node3801 [label=<<font color="black">false</font>> color="black"]
    node3796_name [shape=none, label=<<font color="black">Call[3796]</font>>]
    node3796_name -> node3796 [arrowhead=none, color="black", style=dashed]
    node3796 [shape=cds, label=<<font color="black">%3 = ObjRec-&gt;InitializeBinding(N, undefined)</font>> color="black" fillcolor="white", style=filled]
    node3796 -> node3797 [color="black"]
    node3800_name [shape=none, label=<<font color="black">Block[3800]</font>>]
    node3800_name -> node3800 [arrowhead=none, color="black", style=dashed]
    node3800 [shape=box, label=<<font color="black">[0] push varDeclaredNames &lt; N<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3800 -> node3801 [color="black"]
    node3801_name [shape=none, label=<<font color="black">Block[3801]</font>>]
    node3801_name -> node3801 [arrowhead=none, color="black", style=dashed]
    node3801 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3801 -> cluster1014_exit [color="black"]
    node3797_name [shape=none, label=<<font color="black">Block[3797]</font>>]
    node3797_name -> node3797 [arrowhead=none, color="black", style=dashed]
    node3797 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node3797 -> node3798 [color="black"]
  }
}