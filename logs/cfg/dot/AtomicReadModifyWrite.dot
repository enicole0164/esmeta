digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2530 {
    label = "def AtomicReadModifyWrite(typedArray: Unknown, index: Unknown, value: Unknown, op: Unknown["ReadmodifywriteModificationFunction"]): Normal[Number | BigInt] | Abrupt"
    style = rounded
    cluster2530_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2530_entry_name -> cluster2530_entry [arrowhead=none, color="black", style=dashed]
    cluster2530_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2530_entry -> node17971 [color="black"]
    cluster2530_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2530_exit_name -> cluster2530_exit [arrowhead=none, color="black", style=dashed]
    cluster2530_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17971_name [shape=none, label=<<font color="black">Call[17971]</font>>]
    node17971_name -> node17971 [arrowhead=none, color="black", style=dashed]
    node17971 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateIntegerTypedArray&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node17971 -> node17972 [color="black"]
    node17972_name [shape=none, label=<<font color="black">Block[17972]</font>>]
    node17972_name -> node17972 [arrowhead=none, color="black", style=dashed]
    node17972 [shape=box, label=<<font color="black">[0] let buffer = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17972 -> node17973 [color="black"]
    node17973_name [shape=none, label=<<font color="black">Call[17973]</font>>]
    node17973_name -> node17973 [arrowhead=none, color="black", style=dashed]
    node17973 [shape=cds, label=<<font color="black">%1 = clo&lt;ValidateAtomicAccess&gt;(typedArray, index)</font>> color="black" fillcolor="white", style=filled]
    node17973 -> node17974 [color="black"]
    node17974_name [shape=none, label=<<font color="black">Block[17974]</font>>]
    node17974_name -> node17974 [arrowhead=none, color="black", style=dashed]
    node17974 [shape=box, label=<<font color="black">[0] let indexedPosition = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17974 -> node17975 [color="black"]
    node17975_name [shape=none, label=<<font color="black">Branch[17975]</font>>]
    node17975_name -> node17975 [arrowhead=none, color="black", style=dashed]
    node17975 [shape=diamond, label=<<font color="black">(= typedArray.ContentType ~BigInt~)</font>> color="black" fillcolor="white", style=filled]
    node17975 -> node17976 [label=<<font color="black">true</font>> color="black"]
    node17975 -> node17978 [label=<<font color="black">false</font>> color="black"]
    node17976_name [shape=none, label=<<font color="black">Call[17976]</font>>]
    node17976_name -> node17976 [arrowhead=none, color="black", style=dashed]
    node17976 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBigInt&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node17976 -> node17977 [color="black"]
    node17978_name [shape=none, label=<<font color="black">Call[17978]</font>>]
    node17978_name -> node17978 [arrowhead=none, color="black", style=dashed]
    node17978 [shape=cds, label=<<font color="black">%3 = clo&lt;ToIntegerOrInfinity&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node17978 -> node17979 [color="black"]
    node17977_name [shape=none, label=<<font color="black">Block[17977]</font>>]
    node17977_name -> node17977 [arrowhead=none, color="black", style=dashed]
    node17977 [shape=box, label=<<font color="black">[0] let v = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17977 -> node17980 [color="black"]
    node17979_name [shape=none, label=<<font color="black">Block[17979]</font>>]
    node17979_name -> node17979 [arrowhead=none, color="black", style=dashed]
    node17979 [shape=box, label=<<font color="black">[0] let v = ([number] [? %3])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17979 -> node17980 [color="black"]
    node17980_name [shape=none, label=<<font color="black">Call[17980]</font>>]
    node17980_name -> node17980 [arrowhead=none, color="black", style=dashed]
    node17980 [shape=cds, label=<<font color="black">%4 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node17980 -> node17981 [color="black"]
    node17981_name [shape=none, label=<<font color="black">Branch[17981]</font>>]
    node17981_name -> node17981 [arrowhead=none, color="black", style=dashed]
    node17981 [shape=diamond, label=<<font color="black">(= %4 true)</font>> color="black" fillcolor="white", style=filled]
    node17981 -> node17982 [label=<<font color="black">true</font>> color="black"]
    node17981 -> node17983 [label=<<font color="black">false</font>> color="black"]
    node17982_name [shape=none, label=<<font color="black">Block[17982]</font>>]
    node17982_name -> node17982 [arrowhead=none, color="black", style=dashed]
    node17982 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1183])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17982 -> cluster2530_exit [color="black"]
    node17983_name [shape=none, label=<<font color="black">Block[17983]</font>>]
    node17983_name -> node17983 [arrowhead=none, color="black", style=dashed]
    node17983 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17983 -> node17984 [color="black"]
    node17984_name [shape=none, label=<<font color="black">Call[17984]</font>>]
    node17984_name -> node17984 [arrowhead=none, color="black", style=dashed]
    node17984 [shape=cds, label=<<font color="black">%5 = clo&lt;TypedArrayElementType&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node17984 -> node17985 [color="black"]
    node17985_name [shape=none, label=<<font color="black">Block[17985]</font>>]
    node17985_name -> node17985 [arrowhead=none, color="black", style=dashed]
    node17985 [shape=box, label=<<font color="black">[0] let elementType = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17985 -> node17986 [color="black"]
    node17986_name [shape=none, label=<<font color="black">Call[17986]</font>>]
    node17986_name -> node17986 [arrowhead=none, color="black", style=dashed]
    node17986 [shape=cds, label=<<font color="black">%6 = clo&lt;GetModifySetValueInBuffer&gt;(buffer, indexedPosition, elementType, v, op)</font>> color="black" fillcolor="white", style=filled]
    node17986 -> node17987 [color="black"]
    node17987_name [shape=none, label=<<font color="black">Block[17987]</font>>]
    node17987_name -> node17987 [arrowhead=none, color="black", style=dashed]
    node17987 [shape=box, label=<<font color="black">[0] return %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17987 -> cluster2530_exit [color="black"]
  }
}