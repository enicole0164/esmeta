digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2411 {
    label = "def SetTypedArrayFromTypedArray(target: Unknown["TypedArray"], targetOffset: Unknown["NonnegativeIntegerOr+âˆž"], source: Unknown["TypedArray"]): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2411_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2411_entry_name -> cluster2411_entry [arrowhead=none, color="black", style=dashed]
    cluster2411_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2411_entry -> node16452 [color="black"]
    cluster2411_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2411_exit_name -> cluster2411_exit [arrowhead=none, color="black", style=dashed]
    cluster2411_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16452_name [shape=none, label=<<font color="black">Block[16452]</font>>]
    node16452_name -> node16452 [arrowhead=none, color="black", style=dashed]
    node16452 [shape=box, label=<<font color="black">[0] let targetBuffer = target.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16452 -> node16453 [color="black"]
    node16453_name [shape=none, label=<<font color="black">Call[16453]</font>>]
    node16453_name -> node16453 [arrowhead=none, color="black", style=dashed]
    node16453 [shape=cds, label=<<font color="black">%0 = clo&lt;IsDetachedBuffer&gt;(targetBuffer)</font>> color="black" fillcolor="white", style=filled]
    node16453 -> node16454 [color="black"]
    node16454_name [shape=none, label=<<font color="black">Branch[16454]</font>>]
    node16454_name -> node16454 [arrowhead=none, color="black", style=dashed]
    node16454 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node16454 -> node16455 [label=<<font color="black">true</font>> color="black"]
    node16454 -> node16456 [label=<<font color="black">false</font>> color="black"]
    node16455_name [shape=none, label=<<font color="black">Block[16455]</font>>]
    node16455_name -> node16455 [arrowhead=none, color="black", style=dashed]
    node16455 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1085])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16455 -> cluster2411_exit [color="black"]
    node16456_name [shape=none, label=<<font color="black">Block[16456]</font>>]
    node16456_name -> node16456 [arrowhead=none, color="black", style=dashed]
    node16456 [shape=box, label=<<font color="black">[0] let targetLength = target.ArrayLength<BR ALIGN="LEFT"/>[1] let srcBuffer = source.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16456 -> node16457 [color="black"]
    node16457_name [shape=none, label=<<font color="black">Call[16457]</font>>]
    node16457_name -> node16457 [arrowhead=none, color="black", style=dashed]
    node16457 [shape=cds, label=<<font color="black">%1 = clo&lt;IsDetachedBuffer&gt;(srcBuffer)</font>> color="black" fillcolor="white", style=filled]
    node16457 -> node16458 [color="black"]
    node16458_name [shape=none, label=<<font color="black">Branch[16458]</font>>]
    node16458_name -> node16458 [arrowhead=none, color="black", style=dashed]
    node16458 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node16458 -> node16459 [label=<<font color="black">true</font>> color="black"]
    node16458 -> node16460 [label=<<font color="black">false</font>> color="black"]
    node16459_name [shape=none, label=<<font color="black">Block[16459]</font>>]
    node16459_name -> node16459 [arrowhead=none, color="black", style=dashed]
    node16459 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1086])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16459 -> cluster2411_exit [color="black"]
    node16460_name [shape=none, label=<<font color="black">Call[16460]</font>>]
    node16460_name -> node16460 [arrowhead=none, color="black", style=dashed]
    node16460 [shape=cds, label=<<font color="black">%2 = clo&lt;TypedArrayElementType&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node16460 -> node16461 [color="black"]
    node16461_name [shape=none, label=<<font color="black">Block[16461]</font>>]
    node16461_name -> node16461 [arrowhead=none, color="black", style=dashed]
    node16461 [shape=box, label=<<font color="black">[0] let targetType = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16461 -> node16462 [color="black"]
    node16462_name [shape=none, label=<<font color="black">Call[16462]</font>>]
    node16462_name -> node16462 [arrowhead=none, color="black", style=dashed]
    node16462 [shape=cds, label=<<font color="black">%3 = clo&lt;TypedArrayElementSize&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node16462 -> node16463 [color="black"]
    node16463_name [shape=none, label=<<font color="black">Block[16463]</font>>]
    node16463_name -> node16463 [arrowhead=none, color="black", style=dashed]
    node16463 [shape=box, label=<<font color="black">[0] let targetElementSize = %3<BR ALIGN="LEFT"/>[1] let targetByteOffset = target.ByteOffset<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16463 -> node16464 [color="black"]
    node16464_name [shape=none, label=<<font color="black">Call[16464]</font>>]
    node16464_name -> node16464 [arrowhead=none, color="black", style=dashed]
    node16464 [shape=cds, label=<<font color="black">%4 = clo&lt;TypedArrayElementType&gt;(source)</font>> color="black" fillcolor="white", style=filled]
    node16464 -> node16465 [color="black"]
    node16465_name [shape=none, label=<<font color="black">Block[16465]</font>>]
    node16465_name -> node16465 [arrowhead=none, color="black", style=dashed]
    node16465 [shape=box, label=<<font color="black">[0] let srcType = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16465 -> node16466 [color="black"]
    node16466_name [shape=none, label=<<font color="black">Call[16466]</font>>]
    node16466_name -> node16466 [arrowhead=none, color="black", style=dashed]
    node16466 [shape=cds, label=<<font color="black">%5 = clo&lt;TypedArrayElementSize&gt;(source)</font>> color="black" fillcolor="white", style=filled]
    node16466 -> node16467 [color="black"]
    node16467_name [shape=none, label=<<font color="black">Block[16467]</font>>]
    node16467_name -> node16467 [arrowhead=none, color="black", style=dashed]
    node16467 [shape=box, label=<<font color="black">[0] let srcElementSize = %5<BR ALIGN="LEFT"/>[1] let srcLength = source.ArrayLength<BR ALIGN="LEFT"/>[2] let srcByteOffset = source.ByteOffset<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16467 -> node16468 [color="black"]
    node16468_name [shape=none, label=<<font color="black">Branch[16468]</font>>]
    node16468_name -> node16468 [arrowhead=none, color="black", style=dashed]
    node16468 [shape=diamond, label=<<font color="black">(= targetOffset +INF)</font>> color="black" fillcolor="white", style=filled]
    node16468 -> node16469 [label=<<font color="black">true</font>> color="black"]
    node16468 -> node16470 [label=<<font color="black">false</font>> color="black"]
    node16469_name [shape=none, label=<<font color="black">Block[16469]</font>>]
    node16469_name -> node16469 [arrowhead=none, color="black", style=dashed]
    node16469 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1087])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16469 -> cluster2411_exit [color="black"]
    node16470_name [shape=none, label=<<font color="black">Branch[16470]</font>>]
    node16470_name -> node16470 [arrowhead=none, color="black", style=dashed]
    node16470 [shape=diamond, label=<<font color="black">(&lt; targetLength (+ srcLength targetOffset))</font>> color="black" fillcolor="white", style=filled]
    node16470 -> node16471 [label=<<font color="black">true</font>> color="black"]
    node16470 -> node16472 [label=<<font color="black">false</font>> color="black"]
    node16471_name [shape=none, label=<<font color="black">Block[16471]</font>>]
    node16471_name -> node16471 [arrowhead=none, color="black", style=dashed]
    node16471 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1088])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16471 -> cluster2411_exit [color="black"]
    node16472_name [shape=none, label=<<font color="black">Branch[16472]</font>>]
    node16472_name -> node16472 [arrowhead=none, color="black", style=dashed]
    node16472 [shape=diamond, label=<<font color="black">(! (== target.ContentType source.ContentType))</font>> color="black" fillcolor="white", style=filled]
    node16472 -> node16473 [label=<<font color="black">true</font>> color="black"]
    node16472 -> node16474 [label=<<font color="black">false</font>> color="black"]
    node16473_name [shape=none, label=<<font color="black">Block[16473]</font>>]
    node16473_name -> node16473 [arrowhead=none, color="black", style=dashed]
    node16473 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1089])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16473 -> cluster2411_exit [color="black"]
    node16474_name [shape=none, label=<<font color="black">Call[16474]</font>>]
    node16474_name -> node16474 [arrowhead=none, color="black", style=dashed]
    node16474 [shape=cds, label=<<font color="black">%6 = clo&lt;IsSharedArrayBuffer&gt;(srcBuffer)</font>> color="black" fillcolor="white", style=filled]
    node16474 -> node16475 [color="black"]
    node16475_name [shape=none, label=<<font color="black">Call[16475]</font>>]
    node16475_name -> node16475 [arrowhead=none, color="black", style=dashed]
    node16475 [shape=cds, label=<<font color="black">%7 = clo&lt;IsSharedArrayBuffer&gt;(targetBuffer)</font>> color="black" fillcolor="white", style=filled]
    node16475 -> node16476 [color="black"]
    node16476_name [shape=none, label=<<font color="black">Branch[16476]</font>>]
    node16476_name -> node16476 [arrowhead=none, color="black", style=dashed]
    node16476 [shape=diamond, label=<<font color="black">(&amp;&amp; (= %6 true) (= %7 true))</font>> color="black" fillcolor="white", style=filled]
    node16476 -> node16477 [label=<<font color="black">true</font>> color="black"]
    node16476 -> node16478 [label=<<font color="black">false</font>> color="black"]
    node16477_name [shape=none, label=<<font color="black">Block[16477]</font>>]
    node16477_name -> node16477 [arrowhead=none, color="black", style=dashed]
    node16477 [shape=box, label=<<font color="black">[0] (yet &quot;If _srcBuffer_.[[ArrayBufferData]] and _targetBuffer_.[[ArrayBufferData]] are the same Shared Data Block values, let _same_ be *true*; else let _same_ be *false*.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16477 -> node16480 [color="black"]
    node16478_name [shape=none, label=<<font color="black">Call[16478]</font>>]
    node16478_name -> node16478 [arrowhead=none, color="black", style=dashed]
    node16478 [shape=cds, label=<<font color="black">%8 = clo&lt;SameValue&gt;(srcBuffer, targetBuffer)</font>> color="black" fillcolor="white", style=filled]
    node16478 -> node16479 [color="black"]
    node16480_name [shape=none, label=<<font color="black">Branch[16480]</font>>]
    node16480_name -> node16480 [arrowhead=none, color="black", style=dashed]
    node16480 [shape=diamond, label=<<font color="black">(= same true)</font>> color="black" fillcolor="white", style=filled]
    node16480 -> node16481 [label=<<font color="black">true</font>> color="black"]
    node16480 -> node16484 [label=<<font color="black">false</font>> color="black"]
    node16479_name [shape=none, label=<<font color="black">Block[16479]</font>>]
    node16479_name -> node16479 [arrowhead=none, color="black", style=dashed]
    node16479 [shape=box, label=<<font color="black">[0] let same = %8<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16479 -> node16480 [color="black"]
    node16481_name [shape=none, label=<<font color="black">Block[16481]</font>>]
    node16481_name -> node16481 [arrowhead=none, color="black", style=dashed]
    node16481 [shape=box, label=<<font color="black">[0] let srcByteLength = source.ByteLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16481 -> node16482 [color="black"]
    node16484_name [shape=none, label=<<font color="black">Block[16484]</font>>]
    node16484_name -> node16484 [arrowhead=none, color="black", style=dashed]
    node16484 [shape=box, label=<<font color="black">[0] let srcByteIndex = srcByteOffset<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16484 -> node16485 [color="black"]
    node16482_name [shape=none, label=<<font color="black">Call[16482]</font>>]
    node16482_name -> node16482 [arrowhead=none, color="black", style=dashed]
    node16482 [shape=cds, label=<<font color="black">%9 = clo&lt;CloneArrayBuffer&gt;(srcBuffer, srcByteOffset, srcByteLength, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ArrayBuffer%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node16482 -> node16483 [color="black"]
    node16485_name [shape=none, label=<<font color="black">Block[16485]</font>>]
    node16485_name -> node16485 [arrowhead=none, color="black", style=dashed]
    node16485 [shape=box, label=<<font color="black">[0] let targetByteIndex = (+ (* targetOffset targetElementSize) targetByteOffset)<BR ALIGN="LEFT"/>[1] let limit = (+ targetByteIndex (* targetElementSize srcLength))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16485 -> node16486 [color="black"]
    node16483_name [shape=none, label=<<font color="black">Block[16483]</font>>]
    node16483_name -> node16483 [arrowhead=none, color="black", style=dashed]
    node16483 [shape=box, label=<<font color="black">[0] srcBuffer = [? %9]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] let srcByteIndex = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16483 -> node16485 [color="black"]
    node16486_name [shape=none, label=<<font color="black">Branch[16486]</font>>]
    node16486_name -> node16486 [arrowhead=none, color="black", style=dashed]
    node16486 [shape=diamond, label=<<font color="black">(= srcType targetType)</font>> color="black" fillcolor="white", style=filled]
    node16486 -> node16487 [label=<<font color="black">true</font>> color="black"]
    node16486 -> node16493 [label=<<font color="black">false</font>> color="black"]
    node16487_name [shape=none, label=<<font color="black">Block[16487]</font>>]
    node16487_name -> node16487 [arrowhead=none, color="black", style=dashed]
    node16487 [shape=box, label=<<font color="black">[0] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16487 -> node16488 [color="black"]
    node16493_name [shape=none, label=<<font color="black">Branch[16493]</font>>]
    node16493_name -> node16493 [arrowhead=none, color="black", style=dashed]
    node16493 [shape=diamond, label=<<font color="black">(&lt; targetByteIndex limit)</font>> color="black" fillcolor="white", style=filled]
    node16493 -> node16494 [label=<<font color="black">true</font>> color="black"]
    node16493 -> node16498 [label=<<font color="black">false</font>> color="black"]
    node16488_name [shape=none, label=<<font color="black">Branch[16488]</font>>]
    node16488_name -> node16488 [arrowhead=none, color="black", style=dashed]
    node16488 [shape=diamond, label=<<font color="black">(&lt; targetByteIndex limit)</font>> color="black" fillcolor="white", style=filled]
    node16488 -> node16489 [label=<<font color="black">true</font>> color="black"]
    node16488 -> node16498 [label=<<font color="black">false</font>> color="black"]
    node16494_name [shape=none, label=<<font color="black">Call[16494]</font>>]
    node16494_name -> node16494 [arrowhead=none, color="black", style=dashed]
    node16494 [shape=cds, label=<<font color="black">%12 = clo&lt;GetValueFromBuffer&gt;(srcBuffer, srcByteIndex, srcType, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node16494 -> node16495 [color="black"]
    node16498_name [shape=none, label=<<font color="black">Block[16498]</font>>]
    node16498_name -> node16498 [arrowhead=none, color="black", style=dashed]
    node16498 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16498 -> cluster2411_exit [color="black"]
    node16489_name [shape=none, label=<<font color="black">Call[16489]</font>>]
    node16489_name -> node16489 [arrowhead=none, color="black", style=dashed]
    node16489 [shape=cds, label=<<font color="black">%10 = clo&lt;GetValueFromBuffer&gt;(srcBuffer, srcByteIndex, ~Uint8~, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node16489 -> node16490 [color="black"]
    node16495_name [shape=none, label=<<font color="black">Block[16495]</font>>]
    node16495_name -> node16495 [arrowhead=none, color="black", style=dashed]
    node16495 [shape=box, label=<<font color="black">[0] let value = %12<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16495 -> node16496 [color="black"]
    node16490_name [shape=none, label=<<font color="black">Block[16490]</font>>]
    node16490_name -> node16490 [arrowhead=none, color="black", style=dashed]
    node16490 [shape=box, label=<<font color="black">[0] let value = %10<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16490 -> node16491 [color="black"]
    node16496_name [shape=none, label=<<font color="black">Call[16496]</font>>]
    node16496_name -> node16496 [arrowhead=none, color="black", style=dashed]
    node16496 [shape=cds, label=<<font color="black">%13 = clo&lt;SetValueInBuffer&gt;(targetBuffer, targetByteIndex, targetType, value, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node16496 -> node16497 [color="black"]
    node16491_name [shape=none, label=<<font color="black">Call[16491]</font>>]
    node16491_name -> node16491 [arrowhead=none, color="black", style=dashed]
    node16491 [shape=cds, label=<<font color="black">%11 = clo&lt;SetValueInBuffer&gt;(targetBuffer, targetByteIndex, ~Uint8~, value, true, ~Unordered~)</font>> color="black" fillcolor="white", style=filled]
    node16491 -> node16492 [color="black"]
    node16497_name [shape=none, label=<<font color="black">Block[16497]</font>>]
    node16497_name -> node16497 [arrowhead=none, color="black", style=dashed]
    node16497 [shape=box, label=<<font color="black">[0] srcByteIndex = (+ srcByteIndex srcElementSize)<BR ALIGN="LEFT"/>[1] targetByteIndex = (+ targetByteIndex targetElementSize)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16497 -> node16493 [color="black"]
    node16492_name [shape=none, label=<<font color="black">Block[16492]</font>>]
    node16492_name -> node16492 [arrowhead=none, color="black", style=dashed]
    node16492 [shape=box, label=<<font color="black">[0] srcByteIndex = (+ srcByteIndex 1)<BR ALIGN="LEFT"/>[1] targetByteIndex = (+ targetByteIndex 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16492 -> node16488 [color="black"]
  }
}