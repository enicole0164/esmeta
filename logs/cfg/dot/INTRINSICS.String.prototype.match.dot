digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2178 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.match(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2178_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2178_entry_name -> cluster2178_entry [arrowhead=none, color="black", style=dashed]
    cluster2178_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2178_entry -> node13449 [color="black"]
    cluster2178_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2178_exit_name -> cluster2178_exit [arrowhead=none, color="black", style=dashed]
    cluster2178_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13449_name [shape=none, label=<<font color="black">Branch[13449]</font>>]
    node13449_name -> node13449 [arrowhead=none, color="black", style=dashed]
    node13449 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13449 -> node13450 [label=<<font color="black">true</font>> color="black"]
    node13449 -> node13451 [label=<<font color="black">false</font>> color="black"]
    node13450_name [shape=none, label=<<font color="black">Block[13450]</font>>]
    node13450_name -> node13450 [arrowhead=none, color="black", style=dashed]
    node13450 [shape=box, label=<<font color="black">[0] let regexp = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13450 -> node13452 [color="black"]
    node13451_name [shape=none, label=<<font color="black">Block[13451]</font>>]
    node13451_name -> node13451 [arrowhead=none, color="black", style=dashed]
    node13451 [shape=box, label=<<font color="black">[0] let regexp = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13451 -> node13452 [color="black"]
    node13452_name [shape=none, label=<<font color="black">Call[13452]</font>>]
    node13452_name -> node13452 [arrowhead=none, color="black", style=dashed]
    node13452 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13452 -> node13453 [color="black"]
    node13453_name [shape=none, label=<<font color="black">Block[13453]</font>>]
    node13453_name -> node13453 [arrowhead=none, color="black", style=dashed]
    node13453 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13453 -> node13454 [color="black"]
    node13454_name [shape=none, label=<<font color="black">Branch[13454]</font>>]
    node13454_name -> node13454 [arrowhead=none, color="black", style=dashed]
    node13454 [shape=diamond, label=<<font color="black">(! (|| (= regexp undefined) (= regexp null)))</font>> color="black" fillcolor="white", style=filled]
    node13454 -> node13455 [label=<<font color="black">true</font>> color="black"]
    node13454 -> node13460 [label=<<font color="black">false</font>> color="black"]
    node13455_name [shape=none, label=<<font color="black">Call[13455]</font>>]
    node13455_name -> node13455 [arrowhead=none, color="black", style=dashed]
    node13455 [shape=cds, label=<<font color="black">%1 = clo&lt;GetMethod&gt;(regexp, @SYMBOL.match)</font>> color="black" fillcolor="white", style=filled]
    node13455 -> node13456 [color="black"]
    node13460_name [shape=none, label=<<font color="black">Call[13460]</font>>]
    node13460_name -> node13460 [arrowhead=none, color="black", style=dashed]
    node13460 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13460 -> node13461 [color="black"]
    node13456_name [shape=none, label=<<font color="black">Block[13456]</font>>]
    node13456_name -> node13456 [arrowhead=none, color="black", style=dashed]
    node13456 [shape=box, label=<<font color="black">[0] let matcher = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13456 -> node13457 [color="black"]
    node13461_name [shape=none, label=<<font color="black">Block[13461]</font>>]
    node13461_name -> node13461 [arrowhead=none, color="black", style=dashed]
    node13461 [shape=box, label=<<font color="black">[0] let S = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13461 -> node13462 [color="black"]
    node13457_name [shape=none, label=<<font color="black">Branch[13457]</font>>]
    node13457_name -> node13457 [arrowhead=none, color="black", style=dashed]
    node13457 [shape=diamond, label=<<font color="black">(! (= matcher undefined))</font>> color="black" fillcolor="white", style=filled]
    node13457 -> node13458 [label=<<font color="black">true</font>> color="black"]
    node13457 -> node13460 [label=<<font color="black">false</font>> color="black"]
    node13462_name [shape=none, label=<<font color="black">Call[13462]</font>>]
    node13462_name -> node13462 [arrowhead=none, color="black", style=dashed]
    node13462 [shape=cds, label=<<font color="black">%4 = clo&lt;RegExpCreate&gt;(regexp, undefined)</font>> color="black" fillcolor="white", style=filled]
    node13462 -> node13463 [color="black"]
    node13458_name [shape=none, label=<<font color="black">Call[13458]</font>>]
    node13458_name -> node13458 [arrowhead=none, color="black", style=dashed]
    node13458 [shape=cds, label=<<font color="black">%2 = clo&lt;Call&gt;(matcher, regexp, (new [O])[#949])</font>> color="black" fillcolor="white", style=filled]
    node13458 -> node13459 [color="black"]
    node13463_name [shape=none, label=<<font color="black">Block[13463]</font>>]
    node13463_name -> node13463 [arrowhead=none, color="black", style=dashed]
    node13463 [shape=box, label=<<font color="black">[0] let rx = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13463 -> node13464 [color="black"]
    node13459_name [shape=none, label=<<font color="black">Block[13459]</font>>]
    node13459_name -> node13459 [arrowhead=none, color="black", style=dashed]
    node13459 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13459 -> cluster2178_exit [color="black"]
    node13464_name [shape=none, label=<<font color="black">Call[13464]</font>>]
    node13464_name -> node13464 [arrowhead=none, color="black", style=dashed]
    node13464 [shape=cds, label=<<font color="black">%5 = clo&lt;Invoke&gt;(rx, @SYMBOL.match, (new [S])[#950])</font>> color="black" fillcolor="white", style=filled]
    node13464 -> node13465 [color="black"]
    node13465_name [shape=none, label=<<font color="black">Block[13465]</font>>]
    node13465_name -> node13465 [arrowhead=none, color="black", style=dashed]
    node13465 [shape=box, label=<<font color="black">[0] return [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13465 -> cluster2178_exit [color="black"]
  }
}