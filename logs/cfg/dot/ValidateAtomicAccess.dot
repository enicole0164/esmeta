digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2521 {
    label = "def ValidateAtomicAccess(typedArray: Unknown["TypedArray"], requestIndex: Unknown): Unknown["EitherANormalCompletionContainingAnIntegerOrAnAbruptCompletion"]"
    style = rounded
    cluster2521_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2521_entry_name -> cluster2521_entry [arrowhead=none, color="black", style=dashed]
    cluster2521_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2521_entry -> node17947 [color="black"]
    cluster2521_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2521_exit_name -> cluster2521_exit [arrowhead=none, color="black", style=dashed]
    cluster2521_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17947_name [shape=none, label=<<font color="black">Block[17947]</font>>]
    node17947_name -> node17947 [arrowhead=none, color="black", style=dashed]
    node17947 [shape=box, label=<<font color="black">[0] let length = typedArray.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17947 -> node17948 [color="black"]
    node17948_name [shape=none, label=<<font color="black">Call[17948]</font>>]
    node17948_name -> node17948 [arrowhead=none, color="black", style=dashed]
    node17948 [shape=cds, label=<<font color="black">%0 = clo&lt;ToIndex&gt;(requestIndex)</font>> color="black" fillcolor="white", style=filled]
    node17948 -> node17949 [color="black"]
    node17949_name [shape=none, label=<<font color="black">Block[17949]</font>>]
    node17949_name -> node17949 [arrowhead=none, color="black", style=dashed]
    node17949 [shape=box, label=<<font color="black">[0] let accessIndex = [? %0]<BR ALIGN="LEFT"/>[1] assert (! (&lt; accessIndex 0))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17949 -> node17950 [color="black"]
    node17950_name [shape=none, label=<<font color="black">Branch[17950]</font>>]
    node17950_name -> node17950 [arrowhead=none, color="black", style=dashed]
    node17950 [shape=diamond, label=<<font color="black">(! (&lt; accessIndex length))</font>> color="black" fillcolor="white", style=filled]
    node17950 -> node17951 [label=<<font color="black">true</font>> color="black"]
    node17950 -> node17952 [label=<<font color="black">false</font>> color="black"]
    node17951_name [shape=none, label=<<font color="black">Block[17951]</font>>]
    node17951_name -> node17951 [arrowhead=none, color="black", style=dashed]
    node17951 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1181])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17951 -> cluster2521_exit [color="black"]
    node17952_name [shape=none, label=<<font color="black">Call[17952]</font>>]
    node17952_name -> node17952 [arrowhead=none, color="black", style=dashed]
    node17952 [shape=cds, label=<<font color="black">%1 = clo&lt;TypedArrayElementSize&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node17952 -> node17953 [color="black"]
    node17953_name [shape=none, label=<<font color="black">Block[17953]</font>>]
    node17953_name -> node17953 [arrowhead=none, color="black", style=dashed]
    node17953 [shape=box, label=<<font color="black">[0] let elementSize = %1<BR ALIGN="LEFT"/>[1] let offset = typedArray.ByteOffset<BR ALIGN="LEFT"/>[2] return (+ (* accessIndex elementSize) offset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17953 -> cluster2521_exit [color="black"]
  }
}