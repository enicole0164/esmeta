digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1110 {
    label = "def <INTERNAL>:StringExoticObject.DefineOwnProperty(S: StringExoticObject, P: Symbol | String, Desc: PropertyDescriptor): Normal[Boolean]"
    style = rounded
    cluster1110_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1110_entry_name -> cluster1110_entry [arrowhead=none, color="black", style=dashed]
    cluster1110_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1110_entry -> node4654 [color="black"]
    cluster1110_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1110_exit_name -> cluster1110_exit [arrowhead=none, color="black", style=dashed]
    cluster1110_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4654_name [shape=none, label=<<font color="black">Call[4654]</font>>]
    node4654_name -> node4654 [arrowhead=none, color="black", style=dashed]
    node4654 [shape=cds, label=<<font color="black">%0 = clo&lt;StringGetOwnProperty&gt;(S, P)</font>> color="black" fillcolor="white", style=filled]
    node4654 -> node4655 [color="black"]
    node4655_name [shape=none, label=<<font color="black">Block[4655]</font>>]
    node4655_name -> node4655 [arrowhead=none, color="black", style=dashed]
    node4655 [shape=box, label=<<font color="black">[0] let stringDesc = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4655 -> node4656 [color="black"]
    node4656_name [shape=none, label=<<font color="black">Branch[4656]</font>>]
    node4656_name -> node4656 [arrowhead=none, color="black", style=dashed]
    node4656 [shape=diamond, label=<<font color="black">(! (= stringDesc undefined))</font>> color="black" fillcolor="white", style=filled]
    node4656 -> node4657 [label=<<font color="black">true</font>> color="black"]
    node4656 -> node4660 [label=<<font color="black">false</font>> color="black"]
    node4657_name [shape=none, label=<<font color="black">Block[4657]</font>>]
    node4657_name -> node4657 [arrowhead=none, color="black", style=dashed]
    node4657 [shape=box, label=<<font color="black">[0] let extensible = S.Extensible<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4657 -> node4658 [color="black"]
    node4660_name [shape=none, label=<<font color="black">Call[4660]</font>>]
    node4660_name -> node4660 [arrowhead=none, color="black", style=dashed]
    node4660 [shape=cds, label=<<font color="black">%2 = clo&lt;OrdinaryDefineOwnProperty&gt;(S, P, Desc)</font>> color="black" fillcolor="white", style=filled]
    node4660 -> node4661 [color="black"]
    node4658_name [shape=none, label=<<font color="black">Call[4658]</font>>]
    node4658_name -> node4658 [arrowhead=none, color="black", style=dashed]
    node4658 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCompatiblePropertyDescriptor&gt;(extensible, Desc, stringDesc)</font>> color="black" fillcolor="white", style=filled]
    node4658 -> node4659 [color="black"]
    node4661_name [shape=none, label=<<font color="black">Block[4661]</font>>]
    node4661_name -> node4661 [arrowhead=none, color="black", style=dashed]
    node4661 [shape=box, label=<<font color="black">[0] return [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4661 -> cluster1110_exit [color="black"]
    node4659_name [shape=none, label=<<font color="black">Block[4659]</font>>]
    node4659_name -> node4659 [arrowhead=none, color="black", style=dashed]
    node4659 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4659 -> cluster1110_exit [color="black"]
  }
}