digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2604 {
    label = "def <BUILTIN>:INTRINSICS.Promise.prototype.then(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2604_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2604_entry_name -> cluster2604_entry [arrowhead=none, color="black", style=dashed]
    cluster2604_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2604_entry -> node19250 [color="black"]
    cluster2604_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2604_exit_name -> cluster2604_exit [arrowhead=none, color="black", style=dashed]
    cluster2604_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19250_name [shape=none, label=<<font color="black">Branch[19250]</font>>]
    node19250_name -> node19250 [arrowhead=none, color="black", style=dashed]
    node19250 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19250 -> node19251 [label=<<font color="black">true</font>> color="black"]
    node19250 -> node19252 [label=<<font color="black">false</font>> color="black"]
    node19251_name [shape=none, label=<<font color="black">Block[19251]</font>>]
    node19251_name -> node19251 [arrowhead=none, color="black", style=dashed]
    node19251 [shape=box, label=<<font color="black">[0] let onFulfilled = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19251 -> node19253 [color="black"]
    node19252_name [shape=none, label=<<font color="black">Block[19252]</font>>]
    node19252_name -> node19252 [arrowhead=none, color="black", style=dashed]
    node19252 [shape=box, label=<<font color="black">[0] let onFulfilled = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19252 -> node19253 [color="black"]
    node19253_name [shape=none, label=<<font color="black">Branch[19253]</font>>]
    node19253_name -> node19253 [arrowhead=none, color="black", style=dashed]
    node19253 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19253 -> node19254 [label=<<font color="black">true</font>> color="black"]
    node19253 -> node19255 [label=<<font color="black">false</font>> color="black"]
    node19254_name [shape=none, label=<<font color="black">Block[19254]</font>>]
    node19254_name -> node19254 [arrowhead=none, color="black", style=dashed]
    node19254 [shape=box, label=<<font color="black">[0] let onRejected = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19254 -> node19256 [color="black"]
    node19255_name [shape=none, label=<<font color="black">Block[19255]</font>>]
    node19255_name -> node19255 [arrowhead=none, color="black", style=dashed]
    node19255 [shape=box, label=<<font color="black">[0] let onRejected = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19255 -> node19256 [color="black"]
    node19256_name [shape=none, label=<<font color="black">Block[19256]</font>>]
    node19256_name -> node19256 [arrowhead=none, color="black", style=dashed]
    node19256 [shape=box, label=<<font color="black">[0] let promise = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19256 -> node19257 [color="black"]
    node19257_name [shape=none, label=<<font color="black">Call[19257]</font>>]
    node19257_name -> node19257 [arrowhead=none, color="black", style=dashed]
    node19257 [shape=cds, label=<<font color="black">%0 = clo&lt;IsPromise&gt;(promise)</font>> color="black" fillcolor="white", style=filled]
    node19257 -> node19258 [color="black"]
    node19258_name [shape=none, label=<<font color="black">Branch[19258]</font>>]
    node19258_name -> node19258 [arrowhead=none, color="black", style=dashed]
    node19258 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node19258 -> node19259 [label=<<font color="black">true</font>> color="black"]
    node19258 -> node19260 [label=<<font color="black">false</font>> color="black"]
    node19259_name [shape=none, label=<<font color="black">Block[19259]</font>>]
    node19259_name -> node19259 [arrowhead=none, color="black", style=dashed]
    node19259 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1314])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19259 -> cluster2604_exit [color="black"]
    node19260_name [shape=none, label=<<font color="black">Call[19260]</font>>]
    node19260_name -> node19260 [arrowhead=none, color="black", style=dashed]
    node19260 [shape=cds, label=<<font color="black">%1 = clo&lt;SpeciesConstructor&gt;(promise, @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19260 -> node19261 [color="black"]
    node19261_name [shape=none, label=<<font color="black">Block[19261]</font>>]
    node19261_name -> node19261 [arrowhead=none, color="black", style=dashed]
    node19261 [shape=box, label=<<font color="black">[0] let C = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19261 -> node19262 [color="black"]
    node19262_name [shape=none, label=<<font color="black">Call[19262]</font>>]
    node19262_name -> node19262 [arrowhead=none, color="black", style=dashed]
    node19262 [shape=cds, label=<<font color="black">%2 = clo&lt;NewPromiseCapability&gt;(C)</font>> color="black" fillcolor="white", style=filled]
    node19262 -> node19263 [color="black"]
    node19263_name [shape=none, label=<<font color="black">Block[19263]</font>>]
    node19263_name -> node19263 [arrowhead=none, color="black", style=dashed]
    node19263 [shape=box, label=<<font color="black">[0] let resultCapability = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19263 -> node19264 [color="black"]
    node19264_name [shape=none, label=<<font color="black">Call[19264]</font>>]
    node19264_name -> node19264 [arrowhead=none, color="black", style=dashed]
    node19264 [shape=cds, label=<<font color="black">%3 = clo&lt;PerformPromiseThen&gt;(promise, onFulfilled, onRejected, resultCapability)</font>> color="black" fillcolor="white", style=filled]
    node19264 -> node19265 [color="black"]
    node19265_name [shape=none, label=<<font color="black">Block[19265]</font>>]
    node19265_name -> node19265 [arrowhead=none, color="black", style=dashed]
    node19265 [shape=box, label=<<font color="black">[0] return %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19265 -> cluster2604_exit [color="black"]
  }
}