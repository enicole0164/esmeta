digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster291 {
    label = "def <SYNTAX>:CaseBlock[1,2].LexicallyScopedDeclarations(this: Ast:CaseBlock[1,2]): List[Ast]"
    style = rounded
    cluster291_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster291_entry_name -> cluster291_entry [arrowhead=none, color="black", style=dashed]
    cluster291_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster291_entry -> node1802 [color="black"]
    cluster291_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster291_exit_name -> cluster291_exit [arrowhead=none, color="black", style=dashed]
    cluster291_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1802_name [shape=none, label=<<font color="black">Branch[1802]</font>>]
    node1802_name -> node1802 [arrowhead=none, color="black", style=dashed]
    node1802 [shape=diamond, label=<<font color="black">(! (= this[0] absent))</font>> color="black" fillcolor="white", style=filled]
    node1802 -> node1803 [label=<<font color="black">true</font>> color="black"]
    node1802 -> node1805 [label=<<font color="black">false</font>> color="black"]
    node1803_name [shape=none, label=<<font color="black">Call[1803]</font>>]
    node1803_name -> node1803 [arrowhead=none, color="black", style=dashed]
    node1803 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node1803 -> node1804 [color="black"]
    node1805_name [shape=none, label=<<font color="black">Block[1805]</font>>]
    node1805_name -> node1805 [arrowhead=none, color="black", style=dashed]
    node1805 [shape=box, label=<<font color="black">[0] let declarations1 = (new [])[#149]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1805 -> node1806 [color="black"]
    node1804_name [shape=none, label=<<font color="black">Block[1804]</font>>]
    node1804_name -> node1804 [arrowhead=none, color="black", style=dashed]
    node1804 [shape=box, label=<<font color="black">[0] let declarations1 = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1804 -> node1806 [color="black"]
    node1806_name [shape=none, label=<<font color="black">Call[1806]</font>>]
    node1806_name -> node1806 [arrowhead=none, color="black", style=dashed]
    node1806 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node1806 -> node1807 [color="black"]
    node1807_name [shape=none, label=<<font color="black">Block[1807]</font>>]
    node1807_name -> node1807 [arrowhead=none, color="black", style=dashed]
    node1807 [shape=box, label=<<font color="black">[0] let declarations2 = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1807 -> node1808 [color="black"]
    node1808_name [shape=none, label=<<font color="black">Branch[1808]</font>>]
    node1808_name -> node1808 [arrowhead=none, color="black", style=dashed]
    node1808 [shape=diamond, label=<<font color="black">(! (= this[2] absent))</font>> color="black" fillcolor="white", style=filled]
    node1808 -> node1809 [label=<<font color="black">true</font>> color="black"]
    node1808 -> node1811 [label=<<font color="black">false</font>> color="black"]
    node1809_name [shape=none, label=<<font color="black">Call[1809]</font>>]
    node1809_name -> node1809 [arrowhead=none, color="black", style=dashed]
    node1809 [shape=cds, label=<<font color="black">%2 = this[2]-&gt;LexicallyScopedDeclarations()</font>> color="black" fillcolor="white", style=filled]
    node1809 -> node1810 [color="black"]
    node1811_name [shape=none, label=<<font color="black">Block[1811]</font>>]
    node1811_name -> node1811 [arrowhead=none, color="black", style=dashed]
    node1811 [shape=box, label=<<font color="black">[0] let declarations3 = (new [])[#150]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1811 -> node1812 [color="black"]
    node1810_name [shape=none, label=<<font color="black">Block[1810]</font>>]
    node1810_name -> node1810 [arrowhead=none, color="black", style=dashed]
    node1810 [shape=box, label=<<font color="black">[0] let declarations3 = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1810 -> node1812 [color="black"]
    node1812_name [shape=none, label=<<font color="black">Block[1812]</font>>]
    node1812_name -> node1812 [arrowhead=none, color="black", style=dashed]
    node1812 [shape=box, label=<<font color="black">[0] return (list-concat declarations1 declarations2 declarations3)[#151]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1812 -> cluster291_exit [color="black"]
  }
}