digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster148 {
    label = "def CreateListFromArrayLike(obj: Unknown, elementTypes?: Unknown["ListOfNamesOfECMAScriptLanguageTypes"]): Unknown["EitherANormalCompletionContainingAListOrAnAbruptCompletion"]"
    style = rounded
    cluster148_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster148_entry_name -> cluster148_entry [arrowhead=none, color="black", style=dashed]
    cluster148_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster148_entry -> node1217 [color="black"]
    cluster148_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster148_exit_name -> cluster148_exit [arrowhead=none, color="black", style=dashed]
    cluster148_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1217_name [shape=none, label=<<font color="black">Branch[1217]</font>>]
    node1217_name -> node1217 [arrowhead=none, color="black", style=dashed]
    node1217 [shape=diamond, label=<<font color="black">(= elementTypes absent)</font>> color="black" fillcolor="white", style=filled]
    node1217 -> node1218 [label=<<font color="black">true</font>> color="black"]
    node1217 -> node1219 [label=<<font color="black">false</font>> color="black"]
    node1218_name [shape=none, label=<<font color="black">Block[1218]</font>>]
    node1218_name -> node1218 [arrowhead=none, color="black", style=dashed]
    node1218 [shape=box, label=<<font color="black">[0] elementTypes = (new [@Undefined, @Null, @Boolean, @String, @Symbol, @Number, @BigInt, @Object])[#54]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1218 -> node1219 [color="black"]
    node1219_name [shape=none, label=<<font color="black">Branch[1219]</font>>]
    node1219_name -> node1219 [arrowhead=none, color="black", style=dashed]
    node1219 [shape=diamond, label=<<font color="black">(! (= (typeof obj) @Object))</font>> color="black" fillcolor="white", style=filled]
    node1219 -> node1220 [label=<<font color="black">true</font>> color="black"]
    node1219 -> node1221 [label=<<font color="black">false</font>> color="black"]
    node1220_name [shape=none, label=<<font color="black">Block[1220]</font>>]
    node1220_name -> node1220 [arrowhead=none, color="black", style=dashed]
    node1220 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#55])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1220 -> cluster148_exit [color="black"]
    node1221_name [shape=none, label=<<font color="black">Call[1221]</font>>]
    node1221_name -> node1221 [arrowhead=none, color="black", style=dashed]
    node1221 [shape=cds, label=<<font color="black">%0 = clo&lt;LengthOfArrayLike&gt;(obj)</font>> color="black" fillcolor="white", style=filled]
    node1221 -> node1222 [color="black"]
    node1222_name [shape=none, label=<<font color="black">Block[1222]</font>>]
    node1222_name -> node1222 [arrowhead=none, color="black", style=dashed]
    node1222 [shape=box, label=<<font color="black">[0] let len = [? %0]<BR ALIGN="LEFT"/>[1] let list = (new [])[#56]<BR ALIGN="LEFT"/>[2] let index = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1222 -> node1223 [color="black"]
    node1223_name [shape=none, label=<<font color="black">Branch[1223]</font>>]
    node1223_name -> node1223 [arrowhead=none, color="black", style=dashed]
    node1223 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white", style=filled]
    node1223 -> node1224 [label=<<font color="black">true</font>> color="black"]
    node1223 -> node1231 [label=<<font color="black">false</font>> color="black"]
    node1224_name [shape=none, label=<<font color="black">Call[1224]</font>>]
    node1224_name -> node1224 [arrowhead=none, color="black", style=dashed]
    node1224 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(([number] index))</font>> color="black" fillcolor="white", style=filled]
    node1224 -> node1225 [color="black"]
    node1231_name [shape=none, label=<<font color="black">Block[1231]</font>>]
    node1231_name -> node1231 [arrowhead=none, color="black", style=dashed]
    node1231 [shape=box, label=<<font color="black">[0] return list<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1231 -> cluster148_exit [color="black"]
    node1225_name [shape=none, label=<<font color="black">Block[1225]</font>>]
    node1225_name -> node1225 [arrowhead=none, color="black", style=dashed]
    node1225 [shape=box, label=<<font color="black">[0] let indexName = [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1225 -> node1226 [color="black"]
    node1226_name [shape=none, label=<<font color="black">Call[1226]</font>>]
    node1226_name -> node1226 [arrowhead=none, color="black", style=dashed]
    node1226 [shape=cds, label=<<font color="black">%2 = clo&lt;Get&gt;(obj, indexName)</font>> color="black" fillcolor="white", style=filled]
    node1226 -> node1227 [color="black"]
    node1227_name [shape=none, label=<<font color="black">Block[1227]</font>>]
    node1227_name -> node1227 [arrowhead=none, color="black", style=dashed]
    node1227 [shape=box, label=<<font color="black">[0] let next = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1227 -> node1228 [color="black"]
    node1228_name [shape=none, label=<<font color="black">Branch[1228]</font>>]
    node1228_name -> node1228 [arrowhead=none, color="black", style=dashed]
    node1228 [shape=diamond, label=<<font color="black">(! (contains elementTypes (typeof next)))</font>> color="black" fillcolor="white", style=filled]
    node1228 -> node1229 [label=<<font color="black">true</font>> color="black"]
    node1228 -> node1230 [label=<<font color="black">false</font>> color="black"]
    node1229_name [shape=none, label=<<font color="black">Block[1229]</font>>]
    node1229_name -> node1229 [arrowhead=none, color="black", style=dashed]
    node1229 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#57])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1229 -> cluster148_exit [color="black"]
    node1230_name [shape=none, label=<<font color="black">Block[1230]</font>>]
    node1230_name -> node1230 [arrowhead=none, color="black", style=dashed]
    node1230 [shape=box, label=<<font color="black">[0] push list &lt; next<BR ALIGN="LEFT"/>[1] index = (+ index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1230 -> node1223 [color="black"]
  }
}