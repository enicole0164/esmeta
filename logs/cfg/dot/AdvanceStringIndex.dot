digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2314 {
    label = "def AdvanceStringIndex(S: String, index: Unknown["NonnegativeInteger"], unicode: Boolean): Unknown["Integer"]"
    style = rounded
    cluster2314_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2314_entry_name -> cluster2314_entry [arrowhead=none, color="black", style=dashed]
    cluster2314_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2314_entry -> node14245 [color="black"]
    cluster2314_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2314_exit_name -> cluster2314_exit [arrowhead=none, color="black", style=dashed]
    cluster2314_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14245_name [shape=none, label=<<font color="black">Block[14245]</font>>]
    node14245_name -> node14245 [arrowhead=none, color="black", style=dashed]
    node14245 [shape=box, label=<<font color="black">[0] assert (! (&lt; (- (** 2 53) 1) index))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14245 -> node14246 [color="black"]
    node14246_name [shape=none, label=<<font color="black">Branch[14246]</font>>]
    node14246_name -> node14246 [arrowhead=none, color="black", style=dashed]
    node14246 [shape=diamond, label=<<font color="black">(= unicode false)</font>> color="black" fillcolor="white", style=filled]
    node14246 -> node14247 [label=<<font color="black">true</font>> color="black"]
    node14246 -> node14248 [label=<<font color="black">false</font>> color="black"]
    node14247_name [shape=none, label=<<font color="black">Block[14247]</font>>]
    node14247_name -> node14247 [arrowhead=none, color="black", style=dashed]
    node14247 [shape=box, label=<<font color="black">[0] return (+ index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14247 -> cluster2314_exit [color="black"]
    node14248_name [shape=none, label=<<font color="black">Block[14248]</font>>]
    node14248_name -> node14248 [arrowhead=none, color="black", style=dashed]
    node14248 [shape=box, label=<<font color="black">[0] let length = S.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14248 -> node14249 [color="black"]
    node14249_name [shape=none, label=<<font color="black">Branch[14249]</font>>]
    node14249_name -> node14249 [arrowhead=none, color="black", style=dashed]
    node14249 [shape=diamond, label=<<font color="black">(! (&lt; (+ index 1) length))</font>> color="black" fillcolor="white", style=filled]
    node14249 -> node14250 [label=<<font color="black">true</font>> color="black"]
    node14249 -> node14251 [label=<<font color="black">false</font>> color="black"]
    node14250_name [shape=none, label=<<font color="black">Block[14250]</font>>]
    node14250_name -> node14250 [arrowhead=none, color="black", style=dashed]
    node14250 [shape=box, label=<<font color="black">[0] return (+ index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14250 -> cluster2314_exit [color="black"]
    node14251_name [shape=none, label=<<font color="black">Call[14251]</font>>]
    node14251_name -> node14251 [arrowhead=none, color="black", style=dashed]
    node14251 [shape=cds, label=<<font color="black">%0 = clo&lt;CodePointAt&gt;(S, index)</font>> color="black" fillcolor="white", style=filled]
    node14251 -> node14252 [color="black"]
    node14252_name [shape=none, label=<<font color="black">Block[14252]</font>>]
    node14252_name -> node14252 [arrowhead=none, color="black", style=dashed]
    node14252 [shape=box, label=<<font color="black">[0] let cp = %0<BR ALIGN="LEFT"/>[1] return (+ index cp.CodeUnitCount)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14252 -> cluster2314_exit [color="black"]
  }
}