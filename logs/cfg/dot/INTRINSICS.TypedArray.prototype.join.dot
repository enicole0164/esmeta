digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2402 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.join(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2402_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2402_entry_name -> cluster2402_entry [arrowhead=none, color="black", style=dashed]
    cluster2402_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2402_entry -> node16269 [color="black"]
    cluster2402_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2402_exit_name -> cluster2402_exit [arrowhead=none, color="black", style=dashed]
    cluster2402_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16269_name [shape=none, label=<<font color="black">Branch[16269]</font>>]
    node16269_name -> node16269 [arrowhead=none, color="black", style=dashed]
    node16269 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16269 -> node16270 [label=<<font color="black">true</font>> color="black"]
    node16269 -> node16271 [label=<<font color="black">false</font>> color="black"]
    node16270_name [shape=none, label=<<font color="black">Block[16270]</font>>]
    node16270_name -> node16270 [arrowhead=none, color="black", style=dashed]
    node16270 [shape=box, label=<<font color="black">[0] let separator = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16270 -> node16272 [color="black"]
    node16271_name [shape=none, label=<<font color="black">Block[16271]</font>>]
    node16271_name -> node16271 [arrowhead=none, color="black", style=dashed]
    node16271 [shape=box, label=<<font color="black">[0] let separator = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16271 -> node16272 [color="black"]
    node16272_name [shape=none, label=<<font color="black">Block[16272]</font>>]
    node16272_name -> node16272 [arrowhead=none, color="black", style=dashed]
    node16272 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16272 -> node16273 [color="black"]
    node16273_name [shape=none, label=<<font color="black">Call[16273]</font>>]
    node16273_name -> node16273 [arrowhead=none, color="black", style=dashed]
    node16273 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateTypedArray&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16273 -> node16274 [color="black"]
    node16274_name [shape=none, label=<<font color="black">Block[16274]</font>>]
    node16274_name -> node16274 [arrowhead=none, color="black", style=dashed]
    node16274 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let len = O.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16274 -> node16275 [color="black"]
    node16275_name [shape=none, label=<<font color="black">Branch[16275]</font>>]
    node16275_name -> node16275 [arrowhead=none, color="black", style=dashed]
    node16275 [shape=diamond, label=<<font color="black">(= separator undefined)</font>> color="black" fillcolor="white", style=filled]
    node16275 -> node16276 [label=<<font color="black">true</font>> color="black"]
    node16275 -> node16277 [label=<<font color="black">false</font>> color="black"]
    node16276_name [shape=none, label=<<font color="black">Block[16276]</font>>]
    node16276_name -> node16276 [arrowhead=none, color="black", style=dashed]
    node16276 [shape=box, label=<<font color="black">[0] let sep = &quot;,&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16276 -> node16279 [color="black"]
    node16277_name [shape=none, label=<<font color="black">Call[16277]</font>>]
    node16277_name -> node16277 [arrowhead=none, color="black", style=dashed]
    node16277 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(separator)</font>> color="black" fillcolor="white", style=filled]
    node16277 -> node16278 [color="black"]
    node16279_name [shape=none, label=<<font color="black">Block[16279]</font>>]
    node16279_name -> node16279 [arrowhead=none, color="black", style=dashed]
    node16279 [shape=box, label=<<font color="black">[0] let R = &quot;&quot;<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16279 -> node16280 [color="black"]
    node16278_name [shape=none, label=<<font color="black">Block[16278]</font>>]
    node16278_name -> node16278 [arrowhead=none, color="black", style=dashed]
    node16278 [shape=box, label=<<font color="black">[0] let sep = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16278 -> node16279 [color="black"]
    node16280_name [shape=none, label=<<font color="black">Branch[16280]</font>>]
    node16280_name -> node16280 [arrowhead=none, color="black", style=dashed]
    node16280 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node16280 -> node16281 [label=<<font color="black">true</font>> color="black"]
    node16280 -> node16291 [label=<<font color="black">false</font>> color="black"]
    node16281_name [shape=none, label=<<font color="black">Branch[16281]</font>>]
    node16281_name -> node16281 [arrowhead=none, color="black", style=dashed]
    node16281 [shape=diamond, label=<<font color="black">(&lt; 0 k)</font>> color="black" fillcolor="white", style=filled]
    node16281 -> node16282 [label=<<font color="black">true</font>> color="black"]
    node16281 -> node16283 [label=<<font color="black">false</font>> color="black"]
    node16291_name [shape=none, label=<<font color="black">Block[16291]</font>>]
    node16291_name -> node16291 [arrowhead=none, color="black", style=dashed]
    node16291 [shape=box, label=<<font color="black">[0] return R<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16291 -> cluster2402_exit [color="black"]
    node16282_name [shape=none, label=<<font color="black">Block[16282]</font>>]
    node16282_name -> node16282 [arrowhead=none, color="black", style=dashed]
    node16282 [shape=box, label=<<font color="black">[0] R = (concat R sep)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16282 -> node16283 [color="black"]
    node16283_name [shape=none, label=<<font color="black">Call[16283]</font>>]
    node16283_name -> node16283 [arrowhead=none, color="black", style=dashed]
    node16283 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16283 -> node16284 [color="black"]
    node16284_name [shape=none, label=<<font color="black">Call[16284]</font>>]
    node16284_name -> node16284 [arrowhead=none, color="black", style=dashed]
    node16284 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(O, [! %2])</font>> color="black" fillcolor="white", style=filled]
    node16284 -> node16285 [color="black"]
    node16285_name [shape=none, label=<<font color="black">Block[16285]</font>>]
    node16285_name -> node16285 [arrowhead=none, color="black", style=dashed]
    node16285 [shape=box, label=<<font color="black">[0] let element = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16285 -> node16286 [color="black"]
    node16286_name [shape=none, label=<<font color="black">Branch[16286]</font>>]
    node16286_name -> node16286 [arrowhead=none, color="black", style=dashed]
    node16286 [shape=diamond, label=<<font color="black">(= element undefined)</font>> color="black" fillcolor="white", style=filled]
    node16286 -> node16287 [label=<<font color="black">true</font>> color="black"]
    node16286 -> node16288 [label=<<font color="black">false</font>> color="black"]
    node16287_name [shape=none, label=<<font color="black">Block[16287]</font>>]
    node16287_name -> node16287 [arrowhead=none, color="black", style=dashed]
    node16287 [shape=box, label=<<font color="black">[0] let next = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16287 -> node16290 [color="black"]
    node16288_name [shape=none, label=<<font color="black">Call[16288]</font>>]
    node16288_name -> node16288 [arrowhead=none, color="black", style=dashed]
    node16288 [shape=cds, label=<<font color="black">%4 = clo&lt;ToString&gt;(element)</font>> color="black" fillcolor="white", style=filled]
    node16288 -> node16289 [color="black"]
    node16290_name [shape=none, label=<<font color="black">Block[16290]</font>>]
    node16290_name -> node16290 [arrowhead=none, color="black", style=dashed]
    node16290 [shape=box, label=<<font color="black">[0] R = (concat R next)<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16290 -> node16280 [color="black"]
    node16289_name [shape=none, label=<<font color="black">Block[16289]</font>>]
    node16289_name -> node16289 [arrowhead=none, color="black", style=dashed]
    node16289 [shape=box, label=<<font color="black">[0] let next = [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16289 -> node16290 [color="black"]
  }
}