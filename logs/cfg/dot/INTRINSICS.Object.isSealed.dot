digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2015 {
    label = "def <BUILTIN>:INTRINSICS.Object.isSealed(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2015_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2015_entry_name -> cluster2015_entry [arrowhead=none, color="black", style=dashed]
    cluster2015_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2015_entry -> node11264 [color="black"]
    cluster2015_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2015_exit_name -> cluster2015_exit [arrowhead=none, color="black", style=dashed]
    cluster2015_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11264_name [shape=none, label=<<font color="black">Branch[11264]</font>>]
    node11264_name -> node11264 [arrowhead=none, color="black", style=dashed]
    node11264 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11264 -> node11265 [label=<<font color="black">true</font>> color="black"]
    node11264 -> node11266 [label=<<font color="black">false</font>> color="black"]
    node11265_name [shape=none, label=<<font color="black">Block[11265]</font>>]
    node11265_name -> node11265 [arrowhead=none, color="black", style=dashed]
    node11265 [shape=box, label=<<font color="black">[0] let O = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11265 -> node11267 [color="black"]
    node11266_name [shape=none, label=<<font color="black">Block[11266]</font>>]
    node11266_name -> node11266 [arrowhead=none, color="black", style=dashed]
    node11266 [shape=box, label=<<font color="black">[0] let O = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11266 -> node11267 [color="black"]
    node11267_name [shape=none, label=<<font color="black">Branch[11267]</font>>]
    node11267_name -> node11267 [arrowhead=none, color="black", style=dashed]
    node11267 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node11267 -> node11268 [label=<<font color="black">true</font>> color="black"]
    node11267 -> node11269 [label=<<font color="black">false</font>> color="black"]
    node11268_name [shape=none, label=<<font color="black">Block[11268]</font>>]
    node11268_name -> node11268 [arrowhead=none, color="black", style=dashed]
    node11268 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11268 -> cluster2015_exit [color="black"]
    node11269_name [shape=none, label=<<font color="black">Call[11269]</font>>]
    node11269_name -> node11269 [arrowhead=none, color="black", style=dashed]
    node11269 [shape=cds, label=<<font color="black">%0 = clo&lt;TestIntegrityLevel&gt;(O, ~sealed~)</font>> color="black" fillcolor="white", style=filled]
    node11269 -> node11270 [color="black"]
    node11270_name [shape=none, label=<<font color="black">Block[11270]</font>>]
    node11270_name -> node11270 [arrowhead=none, color="black", style=dashed]
    node11270 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11270 -> cluster2015_exit [color="black"]
  }
}