digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1143 {
    label = "def <INTERNAL>:ModuleNamespaceExoticObject.Get(O: ModuleNamespaceExoticObject, P: Symbol | String, Receiver: ESValue): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1143_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1143_entry_name -> cluster1143_entry [arrowhead=none, color="black", style=dashed]
    cluster1143_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1143_entry -> node4964 [color="black"]
    cluster1143_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1143_exit_name -> cluster1143_exit [arrowhead=none, color="black", style=dashed]
    cluster1143_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4964_name [shape=none, label=<<font color="black">Branch[4964]</font>>]
    node4964_name -> node4964 [arrowhead=none, color="black", style=dashed]
    node4964 [shape=diamond, label=<<font color="black">(= (typeof P) @Symbol)</font>> color="black" fillcolor="white", style=filled]
    node4964 -> node4965 [label=<<font color="black">true</font>> color="black"]
    node4964 -> node4967 [label=<<font color="black">false</font>> color="black"]
    node4965_name [shape=none, label=<<font color="black">Call[4965]</font>>]
    node4965_name -> node4965 [arrowhead=none, color="black", style=dashed]
    node4965 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryGet&gt;(O, P, Receiver)</font>> color="black" fillcolor="white", style=filled]
    node4965 -> node4966 [color="black"]
    node4967_name [shape=none, label=<<font color="black">Block[4967]</font>>]
    node4967_name -> node4967 [arrowhead=none, color="black", style=dashed]
    node4967 [shape=box, label=<<font color="black">[0] let exports = O.Exports<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4967 -> node4968 [color="black"]
    node4966_name [shape=none, label=<<font color="black">Block[4966]</font>>]
    node4966_name -> node4966 [arrowhead=none, color="black", style=dashed]
    node4966 [shape=box, label=<<font color="black">[0] return [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4966 -> cluster1143_exit [color="black"]
    node4968_name [shape=none, label=<<font color="black">Branch[4968]</font>>]
    node4968_name -> node4968 [arrowhead=none, color="black", style=dashed]
    node4968 [shape=diamond, label=<<font color="black">(! (contains exports P))</font>> color="black" fillcolor="white", style=filled]
    node4968 -> node4969 [label=<<font color="black">true</font>> color="black"]
    node4968 -> node4970 [label=<<font color="black">false</font>> color="black"]
    node4969_name [shape=none, label=<<font color="black">Block[4969]</font>>]
    node4969_name -> node4969 [arrowhead=none, color="black", style=dashed]
    node4969 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4969 -> cluster1143_exit [color="black"]
    node4970_name [shape=none, label=<<font color="black">Block[4970]</font>>]
    node4970_name -> node4970 [arrowhead=none, color="black", style=dashed]
    node4970 [shape=box, label=<<font color="black">[0] let m = O.Module<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4970 -> node4971 [color="black"]
    node4971_name [shape=none, label=<<font color="black">Call[4971]</font>>]
    node4971_name -> node4971 [arrowhead=none, color="black", style=dashed]
    node4971 [shape=cds, label=<<font color="black">%1 = m-&gt;ResolveExport(P)</font>> color="black" fillcolor="white", style=filled]
    node4971 -> node4972 [color="black"]
    node4972_name [shape=none, label=<<font color="black">Block[4972]</font>>]
    node4972_name -> node4972 [arrowhead=none, color="black", style=dashed]
    node4972 [shape=box, label=<<font color="black">[0] let binding = [! %1]<BR ALIGN="LEFT"/>[1] assert (? binding: &quot;ResolvedBindingRecord&quot;)<BR ALIGN="LEFT"/>[2] let targetModule = binding.Module<BR ALIGN="LEFT"/>[3] assert (! (= targetModule undefined))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4972 -> node4973 [color="black"]
    node4973_name [shape=none, label=<<font color="black">Branch[4973]</font>>]
    node4973_name -> node4973 [arrowhead=none, color="black", style=dashed]
    node4973 [shape=diamond, label=<<font color="black">(= binding.BindingName ~namespace~)</font>> color="black" fillcolor="white", style=filled]
    node4973 -> node4974 [label=<<font color="black">true</font>> color="black"]
    node4973 -> node4976 [label=<<font color="black">false</font>> color="black"]
    node4974_name [shape=none, label=<<font color="black">Call[4974]</font>>]
    node4974_name -> node4974 [arrowhead=none, color="black", style=dashed]
    node4974 [shape=cds, label=<<font color="black">%2 = clo&lt;GetModuleNamespace&gt;(targetModule)</font>> color="black" fillcolor="white", style=filled]
    node4974 -> node4975 [color="black"]
    node4976_name [shape=none, label=<<font color="black">Block[4976]</font>>]
    node4976_name -> node4976 [arrowhead=none, color="black", style=dashed]
    node4976 [shape=box, label=<<font color="black">[0] let targetEnv = targetModule.Environment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4976 -> node4977 [color="black"]
    node4975_name [shape=none, label=<<font color="black">Block[4975]</font>>]
    node4975_name -> node4975 [arrowhead=none, color="black", style=dashed]
    node4975 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4975 -> cluster1143_exit [color="black"]
    node4977_name [shape=none, label=<<font color="black">Branch[4977]</font>>]
    node4977_name -> node4977 [arrowhead=none, color="black", style=dashed]
    node4977 [shape=diamond, label=<<font color="black">(= targetEnv ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node4977 -> node4978 [label=<<font color="black">true</font>> color="black"]
    node4977 -> node4979 [label=<<font color="black">false</font>> color="black"]
    node4978_name [shape=none, label=<<font color="black">Block[4978]</font>>]
    node4978_name -> node4978 [arrowhead=none, color="black", style=dashed]
    node4978 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#477])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4978 -> cluster1143_exit [color="black"]
    node4979_name [shape=none, label=<<font color="black">Call[4979]</font>>]
    node4979_name -> node4979 [arrowhead=none, color="black", style=dashed]
    node4979 [shape=cds, label=<<font color="black">%3 = targetEnv-&gt;GetBindingValue(binding.BindingName, true)</font>> color="black" fillcolor="white", style=filled]
    node4979 -> node4980 [color="black"]
    node4980_name [shape=none, label=<<font color="black">Block[4980]</font>>]
    node4980_name -> node4980 [arrowhead=none, color="black", style=dashed]
    node4980 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4980 -> cluster1143_exit [color="black"]
  }
}