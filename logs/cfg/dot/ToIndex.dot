digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster113 {
    label = "def ToIndex(value: ESValue): Unknown["EitherANormalCompletionContainingANonnegativeIntegerOrAnAbruptCompletion"]"
    style = rounded
    cluster113_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster113_entry_name -> cluster113_entry [arrowhead=none, color="black", style=dashed]
    cluster113_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster113_entry -> node862 [color="black"]
    cluster113_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster113_exit_name -> cluster113_exit [arrowhead=none, color="black", style=dashed]
    cluster113_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node862_name [shape=none, label=<<font color="black">Branch[862]</font>>]
    node862_name -> node862 [arrowhead=none, color="black", style=dashed]
    node862 [shape=diamond, label=<<font color="black">(= value undefined)</font>> color="black" fillcolor="white", style=filled]
    node862 -> node863 [label=<<font color="black">true</font>> color="black"]
    node862 -> node864 [label=<<font color="black">false</font>> color="black"]
    node863_name [shape=none, label=<<font color="black">Block[863]</font>>]
    node863_name -> node863 [arrowhead=none, color="black", style=dashed]
    node863 [shape=box, label=<<font color="black">[0] return 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node863 -> cluster113_exit [color="black"]
    node864_name [shape=none, label=<<font color="black">Call[864]</font>>]
    node864_name -> node864 [arrowhead=none, color="black", style=dashed]
    node864 [shape=cds, label=<<font color="black">%0 = clo&lt;ToIntegerOrInfinity&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node864 -> node865 [color="black"]
    node865_name [shape=none, label=<<font color="black">Block[865]</font>>]
    node865_name -> node865 [arrowhead=none, color="black", style=dashed]
    node865 [shape=box, label=<<font color="black">[0] let integer = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node865 -> node866 [color="black"]
    node866_name [shape=none, label=<<font color="black">Call[866]</font>>]
    node866_name -> node866 [arrowhead=none, color="black", style=dashed]
    node866 [shape=cds, label=<<font color="black">%1 = clo&lt;ToLength&gt;(([number] integer))</font>> color="black" fillcolor="white", style=filled]
    node866 -> node867 [color="black"]
    node867_name [shape=none, label=<<font color="black">Block[867]</font>>]
    node867_name -> node867 [arrowhead=none, color="black", style=dashed]
    node867 [shape=box, label=<<font color="black">[0] let clamped = [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node867 -> node868 [color="black"]
    node868_name [shape=none, label=<<font color="black">Call[868]</font>>]
    node868_name -> node868 [arrowhead=none, color="black", style=dashed]
    node868 [shape=cds, label=<<font color="black">%2 = clo&lt;SameValue&gt;(([number] integer), clamped)</font>> color="black" fillcolor="white", style=filled]
    node868 -> node869 [color="black"]
    node869_name [shape=none, label=<<font color="black">Branch[869]</font>>]
    node869_name -> node869 [arrowhead=none, color="black", style=dashed]
    node869 [shape=diamond, label=<<font color="black">(= %2 false)</font>> color="black" fillcolor="white", style=filled]
    node869 -> node870 [label=<<font color="black">true</font>> color="black"]
    node869 -> node871 [label=<<font color="black">false</font>> color="black"]
    node870_name [shape=none, label=<<font color="black">Block[870]</font>>]
    node870_name -> node870 [arrowhead=none, color="black", style=dashed]
    node870 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#37])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node870 -> cluster113_exit [color="black"]
    node871_name [shape=none, label=<<font color="black">Block[871]</font>>]
    node871_name -> node871 [arrowhead=none, color="black", style=dashed]
    node871 [shape=box, label=<<font color="black">[0] assert (yet &quot;0 &le; _integer_ &le; 2&lt;sup&gt;53&lt;/sup&gt; - 1.&quot;)<BR ALIGN="LEFT"/>[1] return integer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node871 -> cluster113_exit [color="black"]
  }
}