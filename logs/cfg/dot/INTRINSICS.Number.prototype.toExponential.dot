digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2064 {
    label = "def <BUILTIN>:INTRINSICS.Number.prototype.toExponential(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2064_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2064_entry_name -> cluster2064_entry [arrowhead=none, color="black", style=dashed]
    cluster2064_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2064_entry -> node11826 [color="black"]
    cluster2064_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2064_exit_name -> cluster2064_exit [arrowhead=none, color="black", style=dashed]
    cluster2064_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11826_name [shape=none, label=<<font color="black">Branch[11826]</font>>]
    node11826_name -> node11826 [arrowhead=none, color="black", style=dashed]
    node11826 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11826 -> node11827 [label=<<font color="black">true</font>> color="black"]
    node11826 -> node11828 [label=<<font color="black">false</font>> color="black"]
    node11827_name [shape=none, label=<<font color="black">Block[11827]</font>>]
    node11827_name -> node11827 [arrowhead=none, color="black", style=dashed]
    node11827 [shape=box, label=<<font color="black">[0] let fractionDigits = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11827 -> node11829 [color="black"]
    node11828_name [shape=none, label=<<font color="black">Block[11828]</font>>]
    node11828_name -> node11828 [arrowhead=none, color="black", style=dashed]
    node11828 [shape=box, label=<<font color="black">[0] let fractionDigits = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11828 -> node11829 [color="black"]
    node11829_name [shape=none, label=<<font color="black">Call[11829]</font>>]
    node11829_name -> node11829 [arrowhead=none, color="black", style=dashed]
    node11829 [shape=cds, label=<<font color="black">%0 = clo&lt;thisNumberValue&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node11829 -> node11830 [color="black"]
    node11830_name [shape=none, label=<<font color="black">Block[11830]</font>>]
    node11830_name -> node11830 [arrowhead=none, color="black", style=dashed]
    node11830 [shape=box, label=<<font color="black">[0] let x = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11830 -> node11831 [color="black"]
    node11831_name [shape=none, label=<<font color="black">Call[11831]</font>>]
    node11831_name -> node11831 [arrowhead=none, color="black", style=dashed]
    node11831 [shape=cds, label=<<font color="black">%1 = clo&lt;ToIntegerOrInfinity&gt;(fractionDigits)</font>> color="black" fillcolor="white", style=filled]
    node11831 -> node11832 [color="black"]
    node11832_name [shape=none, label=<<font color="black">Block[11832]</font>>]
    node11832_name -> node11832 [arrowhead=none, color="black", style=dashed]
    node11832 [shape=box, label=<<font color="black">[0] let f = [? %1]<BR ALIGN="LEFT"/>[1] assert (|| (! (= fractionDigits undefined)) (= f 0))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11832 -> node11833 [color="black"]
    node11833_name [shape=none, label=<<font color="black">Branch[11833]</font>>]
    node11833_name -> node11833 [arrowhead=none, color="black", style=dashed]
    node11833 [shape=diamond, label=<<font color="black">(|| (= x NaN) (|| (= x +INF) (= x -INF)))</font>> color="black" fillcolor="white", style=filled]
    node11833 -> node11834 [label=<<font color="black">true</font>> color="black"]
    node11833 -> node11836 [label=<<font color="black">false</font>> color="black"]
    node11834_name [shape=none, label=<<font color="black">Call[11834]</font>>]
    node11834_name -> node11834 [arrowhead=none, color="black", style=dashed]
    node11834 [shape=cds, label=<<font color="black">%2 = clo&lt;Number::toString&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node11834 -> node11835 [color="black"]
    node11836_name [shape=none, label=<<font color="black">Branch[11836]</font>>]
    node11836_name -> node11836 [arrowhead=none, color="black", style=dashed]
    node11836 [shape=diamond, label=<<font color="black">(|| (&lt; f 0) (&lt; 100 f))</font>> color="black" fillcolor="white", style=filled]
    node11836 -> node11837 [label=<<font color="black">true</font>> color="black"]
    node11836 -> node11838 [label=<<font color="black">false</font>> color="black"]
    node11835_name [shape=none, label=<<font color="black">Block[11835]</font>>]
    node11835_name -> node11835 [arrowhead=none, color="black", style=dashed]
    node11835 [shape=box, label=<<font color="black">[0] return %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11835 -> cluster2064_exit [color="black"]
    node11837_name [shape=none, label=<<font color="black">Block[11837]</font>>]
    node11837_name -> node11837 [arrowhead=none, color="black", style=dashed]
    node11837 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#926])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11837 -> cluster2064_exit [color="black"]
    node11838_name [shape=none, label=<<font color="black">Block[11838]</font>>]
    node11838_name -> node11838 [arrowhead=none, color="black", style=dashed]
    node11838 [shape=box, label=<<font color="black">[0] x = ([math] x)<BR ALIGN="LEFT"/>[1] let s = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11838 -> node11839 [color="black"]
    node11839_name [shape=none, label=<<font color="black">Branch[11839]</font>>]
    node11839_name -> node11839 [arrowhead=none, color="black", style=dashed]
    node11839 [shape=diamond, label=<<font color="black">(&lt; x 0)</font>> color="black" fillcolor="white", style=filled]
    node11839 -> node11840 [label=<<font color="black">true</font>> color="black"]
    node11839 -> node11841 [label=<<font color="black">false</font>> color="black"]
    node11840_name [shape=none, label=<<font color="black">Block[11840]</font>>]
    node11840_name -> node11840 [arrowhead=none, color="black", style=dashed]
    node11840 [shape=box, label=<<font color="black">[0] s = &quot;-&quot;<BR ALIGN="LEFT"/>[1] x = (- x)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11840 -> node11841 [color="black"]
    node11841_name [shape=none, label=<<font color="black">Branch[11841]</font>>]
    node11841_name -> node11841 [arrowhead=none, color="black", style=dashed]
    node11841 [shape=diamond, label=<<font color="black">(== x 0)</font>> color="black" fillcolor="white", style=filled]
    node11841 -> node11842 [label=<<font color="black">true</font>> color="black"]
    node11841 -> node11843 [label=<<font color="black">false</font>> color="black"]
    node11842_name [shape=none, label=<<font color="black">Block[11842]</font>>]
    node11842_name -> node11842 [arrowhead=none, color="black", style=dashed]
    node11842 [shape=box, label=<<font color="black">[0] (yet &quot;Let _m_ be the String value consisting of _f_ + 1 occurrences of the code unit 0x0030 (DIGIT ZERO).&quot;)<BR ALIGN="LEFT"/>[1] let e = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11842 -> node11847 [color="black"]
    node11843_name [shape=none, label=<<font color="black">Branch[11843]</font>>]
    node11843_name -> node11843 [arrowhead=none, color="black", style=dashed]
    node11843 [shape=diamond, label=<<font color="black">(! (= fractionDigits undefined))</font>> color="black" fillcolor="white", style=filled]
    node11843 -> node11844 [label=<<font color="black">true</font>> color="black"]
    node11843 -> node11845 [label=<<font color="black">false</font>> color="black"]
    node11847_name [shape=none, label=<<font color="black">Branch[11847]</font>>]
    node11847_name -> node11847 [arrowhead=none, color="black", style=dashed]
    node11847 [shape=diamond, label=<<font color="black">(! (== f 0))</font>> color="black" fillcolor="white", style=filled]
    node11847 -> node11848 [label=<<font color="black">true</font>> color="black"]
    node11847 -> node11849 [label=<<font color="black">false</font>> color="black"]
    node11844_name [shape=none, label=<<font color="black">Block[11844]</font>>]
    node11844_name -> node11844 [arrowhead=none, color="black", style=dashed]
    node11844 [shape=box, label=<<font color="black">[0] (yet &quot;Let _e_ and _n_ be integers such that 10&lt;sup&gt;_f_&lt;/sup&gt; &le; _n_ &lt; 10&lt;sup&gt;_f_ + 1&lt;/sup&gt; and for which _n_ &times; 10&lt;sup&gt;_e_ - _f_&lt;/sup&gt; - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ &times; 10&lt;sup&gt;_e_ - _f_&lt;/sup&gt; is larger.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11844 -> node11846 [color="black"]
    node11845_name [shape=none, label=<<font color="black">Block[11845]</font>>]
    node11845_name -> node11845 [arrowhead=none, color="black", style=dashed]
    node11845 [shape=box, label=<<font color="black">[0] (yet &quot;Let _e_, _n_, and _f_ be integers such that _f_ &ge; 0, 10&lt;sup&gt;_f_&lt;/sup&gt; &le; _n_ &lt; 10&lt;sup&gt;_f_ + 1&lt;/sup&gt;, ùîΩ(_n_ &times; 10&lt;sup&gt;_e_ - _f_&lt;/sup&gt;) is ùîΩ(_x_), and _f_ is as small as possible. Note that the decimal representation of _n_ has _f_ + 1 digits, _n_ is not divisible by 10, and the least significant digit of _n_ is not necessarily uniquely determined by these criteria.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11845 -> node11846 [color="black"]
    node11848_name [shape=none, label=<<font color="black">Block[11848]</font>>]
    node11848_name -> node11848 [arrowhead=none, color="black", style=dashed]
    node11848 [shape=box, label=<<font color="black">[0] (yet &quot;Let _a_ be the first code unit of _m_.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _b_ be the other _f_ code units of _m_.&quot;)<BR ALIGN="LEFT"/>[2] m = (concat a &quot;.&quot; b)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11848 -> node11849 [color="black"]
    node11849_name [shape=none, label=<<font color="black">Branch[11849]</font>>]
    node11849_name -> node11849 [arrowhead=none, color="black", style=dashed]
    node11849 [shape=diamond, label=<<font color="black">(== e 0)</font>> color="black" fillcolor="white", style=filled]
    node11849 -> node11850 [label=<<font color="black">true</font>> color="black"]
    node11849 -> node11851 [label=<<font color="black">false</font>> color="black"]
    node11846_name [shape=none, label=<<font color="black">Block[11846]</font>>]
    node11846_name -> node11846 [arrowhead=none, color="black", style=dashed]
    node11846 [shape=box, label=<<font color="black">[0] (yet &quot;Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11846 -> node11847 [color="black"]
    node11850_name [shape=none, label=<<font color="black">Block[11850]</font>>]
    node11850_name -> node11850 [arrowhead=none, color="black", style=dashed]
    node11850 [shape=box, label=<<font color="black">[0] let c = &quot;+&quot;<BR ALIGN="LEFT"/>[1] let d = &quot;0&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11850 -> node11855 [color="black"]
    node11851_name [shape=none, label=<<font color="black">Branch[11851]</font>>]
    node11851_name -> node11851 [arrowhead=none, color="black", style=dashed]
    node11851 [shape=diamond, label=<<font color="black">(&lt; 0 e)</font>> color="black" fillcolor="white", style=filled]
    node11851 -> node11852 [label=<<font color="black">true</font>> color="black"]
    node11851 -> node11853 [label=<<font color="black">false</font>> color="black"]
    node11855_name [shape=none, label=<<font color="black">Block[11855]</font>>]
    node11855_name -> node11855 [arrowhead=none, color="black", style=dashed]
    node11855 [shape=box, label=<<font color="black">[0] m = (concat m &quot;e&quot; c d)<BR ALIGN="LEFT"/>[1] return (concat s m)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11855 -> cluster2064_exit [color="black"]
    node11852_name [shape=none, label=<<font color="black">Block[11852]</font>>]
    node11852_name -> node11852 [arrowhead=none, color="black", style=dashed]
    node11852 [shape=box, label=<<font color="black">[0] let c = &quot;+&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11852 -> node11854 [color="black"]
    node11853_name [shape=none, label=<<font color="black">Block[11853]</font>>]
    node11853_name -> node11853 [arrowhead=none, color="black", style=dashed]
    node11853 [shape=box, label=<<font color="black">[0] assert (&lt; e 0)<BR ALIGN="LEFT"/>[1] let c = &quot;-&quot;<BR ALIGN="LEFT"/>[2] e = (- e)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11853 -> node11854 [color="black"]
    node11854_name [shape=none, label=<<font color="black">Block[11854]</font>>]
    node11854_name -> node11854 [arrowhead=none, color="black", style=dashed]
    node11854 [shape=box, label=<<font color="black">[0] (yet &quot;Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11854 -> node11855 [color="black"]
  }
}