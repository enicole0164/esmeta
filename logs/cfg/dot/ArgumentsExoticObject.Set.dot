digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1117 {
    label = "def <INTERNAL>:ArgumentsExoticObject.Set(args: ArgumentsExoticObject, P: Symbol | String, V: ESValue, Receiver: ESValue): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1117_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1117_entry_name -> cluster1117_entry [arrowhead=none, color="black", style=dashed]
    cluster1117_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1117_entry -> node4732 [color="black"]
    cluster1117_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1117_exit_name -> cluster1117_exit [arrowhead=none, color="black", style=dashed]
    cluster1117_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4732_name [shape=none, label=<<font color="black">Call[4732]</font>>]
    node4732_name -> node4732 [arrowhead=none, color="black", style=dashed]
    node4732 [shape=cds, label=<<font color="black">%0 = clo&lt;SameValue&gt;(args, Receiver)</font>> color="black" fillcolor="white", style=filled]
    node4732 -> node4733 [color="black"]
    node4733_name [shape=none, label=<<font color="black">Branch[4733]</font>>]
    node4733_name -> node4733 [arrowhead=none, color="black", style=dashed]
    node4733 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node4733 -> node4734 [label=<<font color="black">true</font>> color="black"]
    node4733 -> node4735 [label=<<font color="black">false</font>> color="black"]
    node4734_name [shape=none, label=<<font color="black">Block[4734]</font>>]
    node4734_name -> node4734 [arrowhead=none, color="black", style=dashed]
    node4734 [shape=box, label=<<font color="black">[0] let isMapped = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4734 -> node4738 [color="black"]
    node4735_name [shape=none, label=<<font color="black">Block[4735]</font>>]
    node4735_name -> node4735 [arrowhead=none, color="black", style=dashed]
    node4735 [shape=box, label=<<font color="black">[0] let map = args.ParameterMap<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4735 -> node4736 [color="black"]
    node4738_name [shape=none, label=<<font color="black">Branch[4738]</font>>]
    node4738_name -> node4738 [arrowhead=none, color="black", style=dashed]
    node4738 [shape=diamond, label=<<font color="black">(= isMapped true)</font>> color="black" fillcolor="white", style=filled]
    node4738 -> node4739 [label=<<font color="black">true</font>> color="black"]
    node4738 -> node4742 [label=<<font color="black">false</font>> color="black"]
    node4736_name [shape=none, label=<<font color="black">Call[4736]</font>>]
    node4736_name -> node4736 [arrowhead=none, color="black", style=dashed]
    node4736 [shape=cds, label=<<font color="black">%1 = clo&lt;HasOwnProperty&gt;(map, P)</font>> color="black" fillcolor="white", style=filled]
    node4736 -> node4737 [color="black"]
    node4739_name [shape=none, label=<<font color="black">Block[4739]</font>>]
    node4739_name -> node4739 [arrowhead=none, color="black", style=dashed]
    node4739 [shape=box, label=<<font color="black">[0] assert (yet &quot;The following Set will succeed, since formal parameters mapped by arguments objects are always writable.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4739 -> node4740 [color="black"]
    node4742_name [shape=none, label=<<font color="black">Call[4742]</font>>]
    node4742_name -> node4742 [arrowhead=none, color="black", style=dashed]
    node4742 [shape=cds, label=<<font color="black">%3 = clo&lt;OrdinarySet&gt;(args, P, V, Receiver)</font>> color="black" fillcolor="white", style=filled]
    node4742 -> node4743 [color="black"]
    node4737_name [shape=none, label=<<font color="black">Block[4737]</font>>]
    node4737_name -> node4737 [arrowhead=none, color="black", style=dashed]
    node4737 [shape=box, label=<<font color="black">[0] let isMapped = [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4737 -> node4738 [color="black"]
    node4740_name [shape=none, label=<<font color="black">Call[4740]</font>>]
    node4740_name -> node4740 [arrowhead=none, color="black", style=dashed]
    node4740 [shape=cds, label=<<font color="black">%2 = clo&lt;Set&gt;(map, P, V, false)</font>> color="black" fillcolor="white", style=filled]
    node4740 -> node4741 [color="black"]
    node4743_name [shape=none, label=<<font color="black">Block[4743]</font>>]
    node4743_name -> node4743 [arrowhead=none, color="black", style=dashed]
    node4743 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4743 -> cluster1117_exit [color="black"]
    node4741_name [shape=none, label=<<font color="black">Block[4741]</font>>]
    node4741_name -> node4741 [arrowhead=none, color="black", style=dashed]
    node4741 [shape=box, label=<<font color="black">[0] [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4741 -> node4742 [color="black"]
  }
}