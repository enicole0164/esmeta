digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2552 {
    label = "def SerializeJSONArray(state: Unknown, value: ESValue): Normal[String] | Abrupt"
    style = rounded
    cluster2552_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2552_entry_name -> cluster2552_entry [arrowhead=none, color="black", style=dashed]
    cluster2552_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2552_entry -> node18467 [color="black"]
    cluster2552_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2552_exit_name -> cluster2552_exit [arrowhead=none, color="black", style=dashed]
    cluster2552_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18467_name [shape=none, label=<<font color="black">Branch[18467]</font>>]
    node18467_name -> node18467 [arrowhead=none, color="black", style=dashed]
    node18467 [shape=diamond, label=<<font color="black">(contains state.Stack value)</font>> color="black" fillcolor="white", style=filled]
    node18467 -> node18468 [label=<<font color="black">true</font>> color="black"]
    node18467 -> node18469 [label=<<font color="black">false</font>> color="black"]
    node18468_name [shape=none, label=<<font color="black">Block[18468]</font>>]
    node18468_name -> node18468 [arrowhead=none, color="black", style=dashed]
    node18468 [shape=box, label=<<font color="black">[0] (yet &quot;throw a *TypeError* exception because the structure is cyclical.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18468 -> node18469 [color="black"]
    node18469_name [shape=none, label=<<font color="black">Block[18469]</font>>]
    node18469_name -> node18469 [arrowhead=none, color="black", style=dashed]
    node18469 [shape=box, label=<<font color="black">[0] push state.Stack &lt; value<BR ALIGN="LEFT"/>[1] let stepback = state.Indent<BR ALIGN="LEFT"/>[2] state.Indent = (concat state.Indent state.Gap)<BR ALIGN="LEFT"/>[3] let partial = (new [])[#1201]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18469 -> node18470 [color="black"]
    node18470_name [shape=none, label=<<font color="black">Call[18470]</font>>]
    node18470_name -> node18470 [arrowhead=none, color="black", style=dashed]
    node18470 [shape=cds, label=<<font color="black">%0 = clo&lt;LengthOfArrayLike&gt;(value)</font>> color="black" fillcolor="white", style=filled]
    node18470 -> node18471 [color="black"]
    node18471_name [shape=none, label=<<font color="black">Block[18471]</font>>]
    node18471_name -> node18471 [arrowhead=none, color="black", style=dashed]
    node18471 [shape=box, label=<<font color="black">[0] let len = [? %0]<BR ALIGN="LEFT"/>[1] let index = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18471 -> node18472 [color="black"]
    node18472_name [shape=none, label=<<font color="black">Branch[18472]</font>>]
    node18472_name -> node18472 [arrowhead=none, color="black", style=dashed]
    node18472 [shape=diamond, label=<<font color="black">(&lt; index len)</font>> color="black" fillcolor="white", style=filled]
    node18472 -> node18473 [label=<<font color="black">true</font>> color="black"]
    node18472 -> node18480 [label=<<font color="black">false</font>> color="black"]
    node18473_name [shape=none, label=<<font color="black">Call[18473]</font>>]
    node18473_name -> node18473 [arrowhead=none, color="black", style=dashed]
    node18473 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(([number] index))</font>> color="black" fillcolor="white", style=filled]
    node18473 -> node18474 [color="black"]
    node18480_name [shape=none, label=<<font color="black">Branch[18480]</font>>]
    node18480_name -> node18480 [arrowhead=none, color="black", style=dashed]
    node18480 [shape=diamond, label=<<font color="black">(= partial.length 0)</font>> color="black" fillcolor="white", style=filled]
    node18480 -> node18481 [label=<<font color="black">true</font>> color="black"]
    node18480 -> node18482 [label=<<font color="black">false</font>> color="black"]
    node18474_name [shape=none, label=<<font color="black">Call[18474]</font>>]
    node18474_name -> node18474 [arrowhead=none, color="black", style=dashed]
    node18474 [shape=cds, label=<<font color="black">%2 = clo&lt;SerializeJSONProperty&gt;(state, [! %1], value)</font>> color="black" fillcolor="white", style=filled]
    node18474 -> node18475 [color="black"]
    node18481_name [shape=none, label=<<font color="black">Block[18481]</font>>]
    node18481_name -> node18481 [arrowhead=none, color="black", style=dashed]
    node18481 [shape=box, label=<<font color="black">[0] let final = &quot;[]&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18481 -> node18485 [color="black"]
    node18482_name [shape=none, label=<<font color="black">Branch[18482]</font>>]
    node18482_name -> node18482 [arrowhead=none, color="black", style=dashed]
    node18482 [shape=diamond, label=<<font color="black">(= state.Gap &quot;&quot;)</font>> color="black" fillcolor="white", style=filled]
    node18482 -> node18483 [label=<<font color="black">true</font>> color="black"]
    node18482 -> node18484 [label=<<font color="black">false</font>> color="black"]
    node18475_name [shape=none, label=<<font color="black">Block[18475]</font>>]
    node18475_name -> node18475 [arrowhead=none, color="black", style=dashed]
    node18475 [shape=box, label=<<font color="black">[0] let strP = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18475 -> node18476 [color="black"]
    node18485_name [shape=none, label=<<font color="black">Block[18485]</font>>]
    node18485_name -> node18485 [arrowhead=none, color="black", style=dashed]
    node18485 [shape=box, label=<<font color="black">[0] (yet &quot;Remove the last element of _state_.[[Stack]].&quot;)<BR ALIGN="LEFT"/>[1] state.Indent = stepback<BR ALIGN="LEFT"/>[2] return final<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18485 -> cluster2552_exit [color="black"]
    node18483_name [shape=none, label=<<font color="black">Block[18483]</font>>]
    node18483_name -> node18483 [arrowhead=none, color="black", style=dashed]
    node18483 [shape=box, label=<<font color="black">[0] (yet &quot;Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with the code unit 0x002C (COMMA). A comma is not inserted either before the first String or after the last String.&quot;)<BR ALIGN="LEFT"/>[1] let final = (concat &quot;[&quot; properties &quot;]&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18483 -> node18485 [color="black"]
    node18484_name [shape=none, label=<<font color="black">Block[18484]</font>>]
    node18484_name -> node18484 [arrowhead=none, color="black", style=dashed]
    node18484 [shape=box, label=<<font color="black">[0] let separator = (concat 44cu 10cu state.Indent)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _properties_ be the String value formed by concatenating all the element Strings of _partial_ with each adjacent pair of Strings separated with _separator_. The _separator_ String is not inserted either before the first String or after the last String.&quot;)<BR ALIGN="LEFT"/>[2] let final = (concat &quot;[&quot; 10cu state.Indent properties 10cu stepback &quot;]&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18484 -> node18485 [color="black"]
    node18476_name [shape=none, label=<<font color="black">Branch[18476]</font>>]
    node18476_name -> node18476 [arrowhead=none, color="black", style=dashed]
    node18476 [shape=diamond, label=<<font color="black">(= strP undefined)</font>> color="black" fillcolor="white", style=filled]
    node18476 -> node18477 [label=<<font color="black">true</font>> color="black"]
    node18476 -> node18478 [label=<<font color="black">false</font>> color="black"]
    node18477_name [shape=none, label=<<font color="black">Block[18477]</font>>]
    node18477_name -> node18477 [arrowhead=none, color="black", style=dashed]
    node18477 [shape=box, label=<<font color="black">[0] push partial &lt; &quot;null&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18477 -> node18479 [color="black"]
    node18478_name [shape=none, label=<<font color="black">Block[18478]</font>>]
    node18478_name -> node18478 [arrowhead=none, color="black", style=dashed]
    node18478 [shape=box, label=<<font color="black">[0] push partial &lt; strP<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18478 -> node18479 [color="black"]
    node18479_name [shape=none, label=<<font color="black">Block[18479]</font>>]
    node18479_name -> node18479 [arrowhead=none, color="black", style=dashed]
    node18479 [shape=box, label=<<font color="black">[0] index = (+ index 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18479 -> node18472 [color="black"]
  }
}