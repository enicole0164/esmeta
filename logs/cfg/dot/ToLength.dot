digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster111 {
    label = "def ToLength(argument: ESValue): Unknown["EitherANormalCompletionContainingAnIntegralNumberOrAnAbruptCompletion"]"
    style = rounded
    cluster111_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster111_entry_name -> cluster111_entry [arrowhead=none, color="black", style=dashed]
    cluster111_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster111_entry -> node848 [color="black"]
    cluster111_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster111_exit_name -> cluster111_exit [arrowhead=none, color="black", style=dashed]
    cluster111_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node848_name [shape=none, label=<<font color="black">Call[848]</font>>]
    node848_name -> node848 [arrowhead=none, color="black", style=dashed]
    node848 [shape=cds, label=<<font color="black">%0 = clo&lt;ToIntegerOrInfinity&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node848 -> node849 [color="black"]
    node849_name [shape=none, label=<<font color="black">Block[849]</font>>]
    node849_name -> node849 [arrowhead=none, color="black", style=dashed]
    node849 [shape=box, label=<<font color="black">[0] let len = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node849 -> node850 [color="black"]
    node850_name [shape=none, label=<<font color="black">Branch[850]</font>>]
    node850_name -> node850 [arrowhead=none, color="black", style=dashed]
    node850 [shape=diamond, label=<<font color="black">(! (&lt; 0 len))</font>> color="black" fillcolor="white", style=filled]
    node850 -> node851 [label=<<font color="black">true</font>> color="black"]
    node850 -> node852 [label=<<font color="black">false</font>> color="black"]
    node851_name [shape=none, label=<<font color="black">Block[851]</font>>]
    node851_name -> node851 [arrowhead=none, color="black", style=dashed]
    node851 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node851 -> cluster111_exit [color="black"]
    node852_name [shape=none, label=<<font color="black">Block[852]</font>>]
    node852_name -> node852 [arrowhead=none, color="black", style=dashed]
    node852 [shape=box, label=<<font color="black">[0] return ([number] (min len (- (** 2 53) 1)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node852 -> cluster111_exit [color="black"]
  }
}