digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1113 {
    label = "def StringGetOwnProperty(S: Unknown["ObjectThatHasA[[StringData]]InternalSlot"], P: Symbol | String): PropertyDescriptor | Undefined"
    style = rounded
    cluster1113_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1113_entry_name -> cluster1113_entry [arrowhead=none, color="black", style=dashed]
    cluster1113_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1113_entry -> node4671 [color="black"]
    cluster1113_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1113_exit_name -> cluster1113_exit [arrowhead=none, color="black", style=dashed]
    cluster1113_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4671_name [shape=none, label=<<font color="black">Branch[4671]</font>>]
    node4671_name -> node4671 [arrowhead=none, color="black", style=dashed]
    node4671 [shape=diamond, label=<<font color="black">(! (= (typeof P) @String))</font>> color="black" fillcolor="white", style=filled]
    node4671 -> node4672 [label=<<font color="black">true</font>> color="black"]
    node4671 -> node4673 [label=<<font color="black">false</font>> color="black"]
    node4672_name [shape=none, label=<<font color="black">Block[4672]</font>>]
    node4672_name -> node4672 [arrowhead=none, color="black", style=dashed]
    node4672 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4672 -> cluster1113_exit [color="black"]
    node4673_name [shape=none, label=<<font color="black">Call[4673]</font>>]
    node4673_name -> node4673 [arrowhead=none, color="black", style=dashed]
    node4673 [shape=cds, label=<<font color="black">%0 = clo&lt;CanonicalNumericIndexString&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node4673 -> node4674 [color="black"]
    node4674_name [shape=none, label=<<font color="black">Block[4674]</font>>]
    node4674_name -> node4674 [arrowhead=none, color="black", style=dashed]
    node4674 [shape=box, label=<<font color="black">[0] let index = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4674 -> node4675 [color="black"]
    node4675_name [shape=none, label=<<font color="black">Branch[4675]</font>>]
    node4675_name -> node4675 [arrowhead=none, color="black", style=dashed]
    node4675 [shape=diamond, label=<<font color="black">(= index undefined)</font>> color="black" fillcolor="white", style=filled]
    node4675 -> node4676 [label=<<font color="black">true</font>> color="black"]
    node4675 -> node4677 [label=<<font color="black">false</font>> color="black"]
    node4676_name [shape=none, label=<<font color="black">Block[4676]</font>>]
    node4676_name -> node4676 [arrowhead=none, color="black", style=dashed]
    node4676 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4676 -> cluster1113_exit [color="black"]
    node4677_name [shape=none, label=<<font color="black">Call[4677]</font>>]
    node4677_name -> node4677 [arrowhead=none, color="black", style=dashed]
    node4677 [shape=cds, label=<<font color="black">%1 = clo&lt;IsIntegralNumber&gt;(index)</font>> color="black" fillcolor="white", style=filled]
    node4677 -> node4678 [color="black"]
    node4678_name [shape=none, label=<<font color="black">Branch[4678]</font>>]
    node4678_name -> node4678 [arrowhead=none, color="black", style=dashed]
    node4678 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node4678 -> node4679 [label=<<font color="black">true</font>> color="black"]
    node4678 -> node4680 [label=<<font color="black">false</font>> color="black"]
    node4679_name [shape=none, label=<<font color="black">Block[4679]</font>>]
    node4679_name -> node4679 [arrowhead=none, color="black", style=dashed]
    node4679 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4679 -> cluster1113_exit [color="black"]
    node4680_name [shape=none, label=<<font color="black">Branch[4680]</font>>]
    node4680_name -> node4680 [arrowhead=none, color="black", style=dashed]
    node4680 [shape=diamond, label=<<font color="black">(= index -0.0f)</font>> color="black" fillcolor="white", style=filled]
    node4680 -> node4681 [label=<<font color="black">true</font>> color="black"]
    node4680 -> node4682 [label=<<font color="black">false</font>> color="black"]
    node4681_name [shape=none, label=<<font color="black">Block[4681]</font>>]
    node4681_name -> node4681 [arrowhead=none, color="black", style=dashed]
    node4681 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4681 -> cluster1113_exit [color="black"]
    node4682_name [shape=none, label=<<font color="black">Block[4682]</font>>]
    node4682_name -> node4682 [arrowhead=none, color="black", style=dashed]
    node4682 [shape=box, label=<<font color="black">[0] let str = S.StringData<BR ALIGN="LEFT"/>[1] assert (= (typeof str) @String)<BR ALIGN="LEFT"/>[2] let len = str.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4682 -> node4683 [color="black"]
    node4683_name [shape=none, label=<<font color="black">Branch[4683]</font>>]
    node4683_name -> node4683 [arrowhead=none, color="black", style=dashed]
    node4683 [shape=diamond, label=<<font color="black">(|| (&lt; ([math] index) 0) (! (&lt; ([math] index) len)))</font>> color="black" fillcolor="white", style=filled]
    node4683 -> node4684 [label=<<font color="black">true</font>> color="black"]
    node4683 -> node4685 [label=<<font color="black">false</font>> color="black"]
    node4684_name [shape=none, label=<<font color="black">Block[4684]</font>>]
    node4684_name -> node4684 [arrowhead=none, color="black", style=dashed]
    node4684 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4684 -> cluster1113_exit [color="black"]
    node4685_name [shape=none, label=<<font color="black">Block[4685]</font>>]
    node4685_name -> node4685 [arrowhead=none, color="black", style=dashed]
    node4685 [shape=box, label=<<font color="black">[0] let resultStr = (substring str ([math] index) (+ ([math] index) 1))<BR ALIGN="LEFT"/>[1] return (new PropertyDescriptor(&quot;Value&quot; -&gt; resultStr, &quot;Writable&quot; -&gt; false, &quot;Enumerable&quot; -&gt; true, &quot;Configurable&quot; -&gt; false))[#460]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4685 -> cluster1113_exit [color="black"]
  }
}