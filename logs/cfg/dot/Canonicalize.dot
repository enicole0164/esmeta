digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2278 {
    label = "def Canonicalize(ch: Unknown["Character"]): Unknown["Character"]"
    style = rounded
    cluster2278_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2278_entry_name -> cluster2278_entry [arrowhead=none, color="black", style=dashed]
    cluster2278_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2278_entry -> node14015 [color="black"]
    cluster2278_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2278_exit_name -> cluster2278_exit [arrowhead=none, color="black", style=dashed]
    cluster2278_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14015_name [shape=none, label=<<font color="black">Branch[14015]</font>>]
    node14015_name -> node14015 [arrowhead=none, color="black", style=dashed]
    node14015 [shape=diamond, label=<<font color="black">(&amp;&amp; (= Unicode true) (= IgnoreCase true))</font>> color="black" fillcolor="white", style=filled]
    node14015 -> node14016 [label=<<font color="black">true</font>> color="black"]
    node14015 -> node14017 [label=<<font color="black">false</font>> color="black"]
    node14016_name [shape=none, label=<<font color="black">Block[14016]</font>>]
    node14016_name -> node14016 [arrowhead=none, color="black", style=dashed]
    node14016 [shape=box, label=<<font color="black">[0] (yet &quot;If the file &lt;a href=\&quot;https://unicode.org/Public/UCD/latest/ucd/CaseFolding.txt\&quot;&gt;&lt;code&gt;CaseFolding.txt&lt;/code&gt;&lt;/a&gt; of the Unicode Character Database provides a simple or common case folding mapping for _ch_, return the result of applying that mapping to _ch_.&quot;)<BR ALIGN="LEFT"/>[1] return ch<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14016 -> cluster2278_exit [color="black"]
    node14017_name [shape=none, label=<<font color="black">Branch[14017]</font>>]
    node14017_name -> node14017 [arrowhead=none, color="black", style=dashed]
    node14017 [shape=diamond, label=<<font color="black">(= IgnoreCase false)</font>> color="black" fillcolor="white", style=filled]
    node14017 -> node14018 [label=<<font color="black">true</font>> color="black"]
    node14017 -> node14019 [label=<<font color="black">false</font>> color="black"]
    node14018_name [shape=none, label=<<font color="black">Block[14018]</font>>]
    node14018_name -> node14018 [arrowhead=none, color="black", style=dashed]
    node14018 [shape=box, label=<<font color="black">[0] return ch<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14018 -> cluster2278_exit [color="black"]
    node14019_name [shape=none, label=<<font color="black">Block[14019]</font>>]
    node14019_name -> node14019 [arrowhead=none, color="black", style=dashed]
    node14019 [shape=box, label=<<font color="black">[0] assert (yet &quot;_ch_ is a UTF-16 code unit.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _cp_ be the code point whose numeric value is that of _ch_.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _u_ be the result of toUppercase(&laquo; _cp_ &raquo;), according to the Unicode Default Case Conversion algorithm.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14019 -> node14020 [color="black"]
    node14020_name [shape=none, label=<<font color="black">Call[14020]</font>>]
    node14020_name -> node14020 [arrowhead=none, color="black", style=dashed]
    node14020 [shape=cds, label=<<font color="black">%0 = clo&lt;CodePointsToString&gt;(u)</font>> color="black" fillcolor="white", style=filled]
    node14020 -> node14021 [color="black"]
    node14021_name [shape=none, label=<<font color="black">Block[14021]</font>>]
    node14021_name -> node14021 [arrowhead=none, color="black", style=dashed]
    node14021 [shape=box, label=<<font color="black">[0] let uStr = %0<BR ALIGN="LEFT"/>[1] (yet &quot;If _uStr_ does not consist of a single code unit, return _ch_.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _cu_ be _uStr_'s single code unit element.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14021 -> node14022 [color="black"]
    node14022_name [shape=none, label=<<font color="black">Branch[14022]</font>>]
    node14022_name -> node14022 [arrowhead=none, color="black", style=dashed]
    node14022 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (&lt; ([math] ch) 128)) (&lt; ([math] cu) 128))</font>> color="black" fillcolor="white", style=filled]
    node14022 -> node14023 [label=<<font color="black">true</font>> color="black"]
    node14022 -> node14024 [label=<<font color="black">false</font>> color="black"]
    node14023_name [shape=none, label=<<font color="black">Block[14023]</font>>]
    node14023_name -> node14023 [arrowhead=none, color="black", style=dashed]
    node14023 [shape=box, label=<<font color="black">[0] return ch<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14023 -> cluster2278_exit [color="black"]
    node14024_name [shape=none, label=<<font color="black">Block[14024]</font>>]
    node14024_name -> node14024 [arrowhead=none, color="black", style=dashed]
    node14024 [shape=box, label=<<font color="black">[0] return cu<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14024 -> cluster2278_exit [color="black"]
  }
}