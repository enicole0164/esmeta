digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster118 {
    label = "def IsIntegralNumber(argument: Unknown): Boolean"
    style = rounded
    cluster118_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster118_entry_name -> cluster118_entry [arrowhead=none, color="black", style=dashed]
    cluster118_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster118_entry -> node895 [color="black"]
    cluster118_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster118_exit_name -> cluster118_exit [arrowhead=none, color="black", style=dashed]
    cluster118_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node895_name [shape=none, label=<<font color="black">Branch[895]</font>>]
    node895_name -> node895 [arrowhead=none, color="black", style=dashed]
    node895 [shape=diamond, label=<<font color="black">(! (= (typeof argument) @Number))</font>> color="black" fillcolor="white", style=filled]
    node895 -> node896 [label=<<font color="black">true</font>> color="black"]
    node895 -> node897 [label=<<font color="black">false</font>> color="black"]
    node896_name [shape=none, label=<<font color="black">Block[896]</font>>]
    node896_name -> node896 [arrowhead=none, color="black", style=dashed]
    node896 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node896 -> cluster118_exit [color="black"]
    node897_name [shape=none, label=<<font color="black">Branch[897]</font>>]
    node897_name -> node897 [arrowhead=none, color="black", style=dashed]
    node897 [shape=diamond, label=<<font color="black">(|| (|| (= argument NaN) (= argument +INF)) (= argument -INF))</font>> color="black" fillcolor="white", style=filled]
    node897 -> node898 [label=<<font color="black">true</font>> color="black"]
    node897 -> node899 [label=<<font color="black">false</font>> color="black"]
    node898_name [shape=none, label=<<font color="black">Block[898]</font>>]
    node898_name -> node898 [arrowhead=none, color="black", style=dashed]
    node898 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node898 -> cluster118_exit [color="black"]
    node899_name [shape=none, label=<<font color="black">Branch[899]</font>>]
    node899_name -> node899 [arrowhead=none, color="black", style=dashed]
    node899 [shape=diamond, label=<<font color="black">(! (== (floor (abs ([math] argument))) (abs ([math] argument))))</font>> color="black" fillcolor="white", style=filled]
    node899 -> node900 [label=<<font color="black">true</font>> color="black"]
    node899 -> node901 [label=<<font color="black">false</font>> color="black"]
    node900_name [shape=none, label=<<font color="black">Block[900]</font>>]
    node900_name -> node900 [arrowhead=none, color="black", style=dashed]
    node900 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node900 -> cluster118_exit [color="black"]
    node901_name [shape=none, label=<<font color="black">Block[901]</font>>]
    node901_name -> node901 [arrowhead=none, color="black", style=dashed]
    node901 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node901 -> cluster118_exit [color="black"]
  }
}