digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1104 {
    label = "def BoundFunctionCreate(targetFunction: FunctionObject, boundThis: ESValue, boundArgs: List[ESValue]): Normal[FunctionObject] | Abrupt"
    style = rounded
    cluster1104_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1104_entry_name -> cluster1104_entry [arrowhead=none, color="black", style=dashed]
    cluster1104_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1104_entry -> node4535 [color="black"]
    cluster1104_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1104_exit_name -> cluster1104_exit [arrowhead=none, color="black", style=dashed]
    cluster1104_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4535_name [shape=none, label=<<font color="black">Call[4535]</font>>]
    node4535_name -> node4535 [arrowhead=none, color="black", style=dashed]
    node4535 [shape=cds, label=<<font color="black">%0 = targetFunction-&gt;GetPrototypeOf()</font>> color="black" fillcolor="white", style=filled]
    node4535 -> node4536 [color="black"]
    node4536_name [shape=none, label=<<font color="black">Block[4536]</font>>]
    node4536_name -> node4536 [arrowhead=none, color="black", style=dashed]
    node4536 [shape=box, label=<<font color="black">[0] let proto = [? %0]<BR ALIGN="LEFT"/>[1] let internalSlotsList = (list-concat (new [&quot;Prototype&quot;, &quot;Extensible&quot;])[#446] (new [&quot;BoundTargetFunction&quot;, &quot;BoundThis&quot;, &quot;BoundArguments&quot;])[#447])[#445]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4536 -> node4537 [color="black"]
    node4537_name [shape=none, label=<<font color="black">Call[4537]</font>>]
    node4537_name -> node4537 [arrowhead=none, color="black", style=dashed]
    node4537 [shape=cds, label=<<font color="black">%1 = clo&lt;MakeBasicObject&gt;(internalSlotsList)</font>> color="black" fillcolor="white", style=filled]
    node4537 -> node4538 [color="black"]
    node4538_name [shape=none, label=<<font color="black">Block[4538]</font>>]
    node4538_name -> node4538 [arrowhead=none, color="black", style=dashed]
    node4538 [shape=box, label=<<font color="black">[0] let obj = %1<BR ALIGN="LEFT"/>[1] obj.Prototype = proto<BR ALIGN="LEFT"/>[2] obj.Call = clo&lt;BoundFunctionExoticObject.Call&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4538 -> node4539 [color="black"]
    node4539_name [shape=none, label=<<font color="black">Call[4539]</font>>]
    node4539_name -> node4539 [arrowhead=none, color="black", style=dashed]
    node4539 [shape=cds, label=<<font color="black">%2 = clo&lt;IsConstructor&gt;(targetFunction)</font>> color="black" fillcolor="white", style=filled]
    node4539 -> node4540 [color="black"]
    node4540_name [shape=none, label=<<font color="black">Branch[4540]</font>>]
    node4540_name -> node4540 [arrowhead=none, color="black", style=dashed]
    node4540 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node4540 -> node4541 [label=<<font color="black">true</font>> color="black"]
    node4540 -> node4542 [label=<<font color="black">false</font>> color="black"]
    node4541_name [shape=none, label=<<font color="black">Block[4541]</font>>]
    node4541_name -> node4541 [arrowhead=none, color="black", style=dashed]
    node4541 [shape=box, label=<<font color="black">[0] obj.Construct = clo&lt;BoundFunctionExoticObject.Construct&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4541 -> node4542 [color="black"]
    node4542_name [shape=none, label=<<font color="black">Block[4542]</font>>]
    node4542_name -> node4542 [arrowhead=none, color="black", style=dashed]
    node4542 [shape=box, label=<<font color="black">[0] obj.BoundTargetFunction = targetFunction<BR ALIGN="LEFT"/>[1] obj.BoundThis = boundThis<BR ALIGN="LEFT"/>[2] obj.BoundArguments = boundArgs<BR ALIGN="LEFT"/>[3] return obj<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4542 -> cluster1104_exit [color="black"]
  }
}