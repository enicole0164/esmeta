digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster614 {
    label = "def <SYNTAX>:BreakableStatement[0,0].ContainsUndefinedContinueTarget(this: Ast:BreakableStatement[0,0], iterationSet: Unknown, labelSet: Unknown): Boolean"
    style = rounded
    cluster614_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster614_entry_name -> cluster614_entry [arrowhead=none, color="black", style=dashed]
    cluster614_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster614_entry -> node2711 [color="black"]
    cluster614_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster614_exit_name -> cluster614_exit [arrowhead=none, color="black", style=dashed]
    cluster614_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node2711_name [shape=none, label=<<font color="black">Block[2711]</font>>]
    node2711_name -> node2711 [arrowhead=none, color="black", style=dashed]
    node2711 [shape=box, label=<<font color="black">[0] let newIterationSet = (list-concat iterationSet labelSet)[#298]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2711 -> node2712 [color="black"]
    node2712_name [shape=none, label=<<font color="black">Call[2712]</font>>]
    node2712_name -> node2712 [arrowhead=none, color="black", style=dashed]
    node2712 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;ContainsUndefinedContinueTarget(newIterationSet, (new [])[#299])</font>> color="black" fillcolor="white", style=filled]
    node2712 -> node2713 [color="black"]
    node2713_name [shape=none, label=<<font color="black">Block[2713]</font>>]
    node2713_name -> node2713 [arrowhead=none, color="black", style=dashed]
    node2713 [shape=box, label=<<font color="black">[0] return %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2713 -> cluster614_exit [color="black"]
  }
}