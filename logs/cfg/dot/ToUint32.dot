digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster100 {
    label = "def ToUint32(argument: Unknown): Unknown["EitherANormalCompletionContainingAnIntegralNumberOrAnAbruptCompletion"]"
    style = rounded
    cluster100_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster100_entry_name -> cluster100_entry [arrowhead=none, color="black", style=dashed]
    cluster100_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster100_entry -> node753 [color="black"]
    cluster100_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster100_exit_name -> cluster100_exit [arrowhead=none, color="black", style=dashed]
    cluster100_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node753_name [shape=none, label=<<font color="black">Call[753]</font>>]
    node753_name -> node753 [arrowhead=none, color="black", style=dashed]
    node753 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(argument)</font>> color="black" fillcolor="white", style=filled]
    node753 -> node754 [color="black"]
    node754_name [shape=none, label=<<font color="black">Block[754]</font>>]
    node754_name -> node754 [arrowhead=none, color="black", style=dashed]
    node754 [shape=box, label=<<font color="black">[0] let number = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node754 -> node755 [color="black"]
    node755_name [shape=none, label=<<font color="black">Branch[755]</font>>]
    node755_name -> node755 [arrowhead=none, color="black", style=dashed]
    node755 [shape=diamond, label=<<font color="black">(|| (|| (|| (|| (= number NaN) (= number 0.0f)) (= number -0.0f)) (= number +INF)) (= number -INF))</font>> color="black" fillcolor="white", style=filled]
    node755 -> node756 [label=<<font color="black">true</font>> color="black"]
    node755 -> node757 [label=<<font color="black">false</font>> color="black"]
    node756_name [shape=none, label=<<font color="black">Block[756]</font>>]
    node756_name -> node756 [arrowhead=none, color="black", style=dashed]
    node756 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node756 -> cluster100_exit [color="black"]
    node757_name [shape=none, label=<<font color="black">Block[757]</font>>]
    node757_name -> node757 [arrowhead=none, color="black", style=dashed]
    node757 [shape=box, label=<<font color="black">[0] let int = (floor (abs ([math] number)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node757 -> node758 [color="black"]
    node758_name [shape=none, label=<<font color="black">Branch[758]</font>>]
    node758_name -> node758 [arrowhead=none, color="black", style=dashed]
    node758 [shape=diamond, label=<<font color="black">(&lt; number 0.0f)</font>> color="black" fillcolor="white", style=filled]
    node758 -> node759 [label=<<font color="black">true</font>> color="black"]
    node758 -> node760 [label=<<font color="black">false</font>> color="black"]
    node759_name [shape=none, label=<<font color="black">Block[759]</font>>]
    node759_name -> node759 [arrowhead=none, color="black", style=dashed]
    node759 [shape=box, label=<<font color="black">[0] int = (* -1 int)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node759 -> node760 [color="black"]
    node760_name [shape=none, label=<<font color="black">Block[760]</font>>]
    node760_name -> node760 [arrowhead=none, color="black", style=dashed]
    node760 [shape=box, label=<<font color="black">[0] let int32bit = (% int (** 2 32))<BR ALIGN="LEFT"/>[1] return ([number] int32bit)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node760 -> cluster100_exit [color="black"]
  }
}