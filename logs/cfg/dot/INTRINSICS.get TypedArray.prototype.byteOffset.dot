digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2391 {
    label = "def <BUILTIN>:INTRINSICS.get TypedArray.prototype.byteOffset(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2391_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2391_entry_name -> cluster2391_entry [arrowhead=none, color="black", style=dashed]
    cluster2391_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2391_entry -> node15968 [color="black"]
    cluster2391_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2391_exit_name -> cluster2391_exit [arrowhead=none, color="black", style=dashed]
    cluster2391_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node15968_name [shape=none, label=<<font color="black">Block[15968]</font>>]
    node15968_name -> node15968 [arrowhead=none, color="black", style=dashed]
    node15968 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15968 -> node15969 [color="black"]
    node15969_name [shape=none, label=<<font color="black">Call[15969]</font>>]
    node15969_name -> node15969 [arrowhead=none, color="black", style=dashed]
    node15969 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;TypedArrayName&quot;)</font>> color="black" fillcolor="white", style=filled]
    node15969 -> node15970 [color="black"]
    node15970_name [shape=none, label=<<font color="black">Block[15970]</font>>]
    node15970_name -> node15970 [arrowhead=none, color="black", style=dashed]
    node15970 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] assert (! (= O.ViewedArrayBuffer absent))<BR ALIGN="LEFT"/>[2] let buffer = O.ViewedArrayBuffer<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15970 -> node15971 [color="black"]
    node15971_name [shape=none, label=<<font color="black">Call[15971]</font>>]
    node15971_name -> node15971 [arrowhead=none, color="black", style=dashed]
    node15971 [shape=cds, label=<<font color="black">%1 = clo&lt;IsDetachedBuffer&gt;(buffer)</font>> color="black" fillcolor="white", style=filled]
    node15971 -> node15972 [color="black"]
    node15972_name [shape=none, label=<<font color="black">Branch[15972]</font>>]
    node15972_name -> node15972 [arrowhead=none, color="black", style=dashed]
    node15972 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node15972 -> node15973 [label=<<font color="black">true</font>> color="black"]
    node15972 -> node15974 [label=<<font color="black">false</font>> color="black"]
    node15973_name [shape=none, label=<<font color="black">Block[15973]</font>>]
    node15973_name -> node15973 [arrowhead=none, color="black", style=dashed]
    node15973 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15973 -> cluster2391_exit [color="black"]
    node15974_name [shape=none, label=<<font color="black">Block[15974]</font>>]
    node15974_name -> node15974 [arrowhead=none, color="black", style=dashed]
    node15974 [shape=box, label=<<font color="black">[0] let offset = O.ByteOffset<BR ALIGN="LEFT"/>[1] return ([number] offset)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node15974 -> cluster2391_exit [color="black"]
  }
}