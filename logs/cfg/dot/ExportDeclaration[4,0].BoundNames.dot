digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster231 {
    label = "def <SYNTAX>:ExportDeclaration[4,0].BoundNames(this: Ast:ExportDeclaration[4,0]): List[String]"
    style = rounded
    cluster231_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster231_entry_name -> cluster231_entry [arrowhead=none, color="black", style=dashed]
    cluster231_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster231_entry -> node1638 [color="black"]
    cluster231_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster231_exit_name -> cluster231_exit [arrowhead=none, color="black", style=dashed]
    cluster231_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1638_name [shape=none, label=<<font color="black">Call[1638]</font>>]
    node1638_name -> node1638 [arrowhead=none, color="black", style=dashed]
    node1638 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node1638 -> node1639 [color="black"]
    node1639_name [shape=none, label=<<font color="black">Block[1639]</font>>]
    node1639_name -> node1639 [arrowhead=none, color="black", style=dashed]
    node1639 [shape=box, label=<<font color="black">[0] let declarationNames = %0<BR ALIGN="LEFT"/>[1] (yet &quot;If _declarationNames_ does not include the element *\&quot;\\*default\\*\&quot;*, append *\&quot;\\*default\\*\&quot;* to _declarationNames_.&quot;)<BR ALIGN="LEFT"/>[2] return declarationNames<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1639 -> cluster231_exit [color="black"]
  }
}