digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1326 {
    label = "def InstanceofOperator(V: ESValue, target: ESValue): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1326_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1326_entry_name -> cluster1326_entry [arrowhead=none, color="black", style=dashed]
    cluster1326_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1326_entry -> node6397 [color="black"]
    cluster1326_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1326_exit_name -> cluster1326_exit [arrowhead=none, color="black", style=dashed]
    cluster1326_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6397_name [shape=none, label=<<font color="black">Branch[6397]</font>>]
    node6397_name -> node6397 [arrowhead=none, color="black", style=dashed]
    node6397 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node6397 -> node6398 [label=<<font color="black">true</font>> color="black"]
    node6397 -> node6399 [label=<<font color="black">false</font>> color="black"]
    node6398_name [shape=none, label=<<font color="black">Block[6398]</font>>]
    node6398_name -> node6398 [arrowhead=none, color="black", style=dashed]
    node6398 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#590])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6398 -> cluster1326_exit [color="black"]
    node6399_name [shape=none, label=<<font color="black">Call[6399]</font>>]
    node6399_name -> node6399 [arrowhead=none, color="black", style=dashed]
    node6399 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(target, @SYMBOL.hasInstance)</font>> color="black" fillcolor="white", style=filled]
    node6399 -> node6400 [color="black"]
    node6400_name [shape=none, label=<<font color="black">Block[6400]</font>>]
    node6400_name -> node6400 [arrowhead=none, color="black", style=dashed]
    node6400 [shape=box, label=<<font color="black">[0] let instOfHandler = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6400 -> node6401 [color="black"]
    node6401_name [shape=none, label=<<font color="black">Branch[6401]</font>>]
    node6401_name -> node6401 [arrowhead=none, color="black", style=dashed]
    node6401 [shape=diamond, label=<<font color="black">(! (= instOfHandler undefined))</font>> color="black" fillcolor="white", style=filled]
    node6401 -> node6402 [label=<<font color="black">true</font>> color="black"]
    node6401 -> node6405 [label=<<font color="black">false</font>> color="black"]
    node6402_name [shape=none, label=<<font color="black">Call[6402]</font>>]
    node6402_name -> node6402 [arrowhead=none, color="black", style=dashed]
    node6402 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(instOfHandler, target, (new [V])[#591])</font>> color="black" fillcolor="white", style=filled]
    node6402 -> node6403 [color="black"]
    node6405_name [shape=none, label=<<font color="black">Call[6405]</font>>]
    node6405_name -> node6405 [arrowhead=none, color="black", style=dashed]
    node6405 [shape=cds, label=<<font color="black">%3 = clo&lt;IsCallable&gt;(target)</font>> color="black" fillcolor="white", style=filled]
    node6405 -> node6406 [color="black"]
    node6403_name [shape=none, label=<<font color="black">Call[6403]</font>>]
    node6403_name -> node6403 [arrowhead=none, color="black", style=dashed]
    node6403 [shape=cds, label=<<font color="black">%2 = clo&lt;ToBoolean&gt;([? %1])</font>> color="black" fillcolor="white", style=filled]
    node6403 -> node6404 [color="black"]
    node6406_name [shape=none, label=<<font color="black">Branch[6406]</font>>]
    node6406_name -> node6406 [arrowhead=none, color="black", style=dashed]
    node6406 [shape=diamond, label=<<font color="black">(= %3 false)</font>> color="black" fillcolor="white", style=filled]
    node6406 -> node6407 [label=<<font color="black">true</font>> color="black"]
    node6406 -> node6408 [label=<<font color="black">false</font>> color="black"]
    node6404_name [shape=none, label=<<font color="black">Block[6404]</font>>]
    node6404_name -> node6404 [arrowhead=none, color="black", style=dashed]
    node6404 [shape=box, label=<<font color="black">[0] return %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6404 -> cluster1326_exit [color="black"]
    node6407_name [shape=none, label=<<font color="black">Block[6407]</font>>]
    node6407_name -> node6407 [arrowhead=none, color="black", style=dashed]
    node6407 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#592])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6407 -> cluster1326_exit [color="black"]
    node6408_name [shape=none, label=<<font color="black">Call[6408]</font>>]
    node6408_name -> node6408 [arrowhead=none, color="black", style=dashed]
    node6408 [shape=cds, label=<<font color="black">%4 = clo&lt;OrdinaryHasInstance&gt;(target, V)</font>> color="black" fillcolor="white", style=filled]
    node6408 -> node6409 [color="black"]
    node6409_name [shape=none, label=<<font color="black">Block[6409]</font>>]
    node6409_name -> node6409 [arrowhead=none, color="black", style=dashed]
    node6409 [shape=box, label=<<font color="black">[0] return [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6409 -> cluster1326_exit [color="black"]
  }
}