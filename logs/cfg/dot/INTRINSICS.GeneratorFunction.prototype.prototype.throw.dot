digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2610 {
    label = "def <BUILTIN>:INTRINSICS.GeneratorFunction.prototype.prototype.throw(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2610_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2610_entry_name -> cluster2610_entry [arrowhead=none, color="black", style=dashed]
    cluster2610_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2610_entry -> node19315 [color="black"]
    cluster2610_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2610_exit_name -> cluster2610_exit [arrowhead=none, color="black", style=dashed]
    cluster2610_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19315_name [shape=none, label=<<font color="black">Branch[19315]</font>>]
    node19315_name -> node19315 [arrowhead=none, color="black", style=dashed]
    node19315 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19315 -> node19316 [label=<<font color="black">true</font>> color="black"]
    node19315 -> node19317 [label=<<font color="black">false</font>> color="black"]
    node19316_name [shape=none, label=<<font color="black">Block[19316]</font>>]
    node19316_name -> node19316 [arrowhead=none, color="black", style=dashed]
    node19316 [shape=box, label=<<font color="black">[0] let exception = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19316 -> node19318 [color="black"]
    node19317_name [shape=none, label=<<font color="black">Block[19317]</font>>]
    node19317_name -> node19317 [arrowhead=none, color="black", style=dashed]
    node19317 [shape=box, label=<<font color="black">[0] let exception = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19317 -> node19318 [color="black"]
    node19318_name [shape=none, label=<<font color="black">Block[19318]</font>>]
    node19318_name -> node19318 [arrowhead=none, color="black", style=dashed]
    node19318 [shape=box, label=<<font color="black">[0] let g = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19318 -> node19319 [color="black"]
    node19319_name [shape=none, label=<<font color="black">Call[19319]</font>>]
    node19319_name -> node19319 [arrowhead=none, color="black", style=dashed]
    node19319 [shape=cds, label=<<font color="black">%0 = clo&lt;ThrowCompletion&gt;(exception)</font>> color="black" fillcolor="white", style=filled]
    node19319 -> node19320 [color="black"]
    node19320_name [shape=none, label=<<font color="black">Block[19320]</font>>]
    node19320_name -> node19320 [arrowhead=none, color="black", style=dashed]
    node19320 [shape=box, label=<<font color="black">[0] let C = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19320 -> node19321 [color="black"]
    node19321_name [shape=none, label=<<font color="black">Call[19321]</font>>]
    node19321_name -> node19321 [arrowhead=none, color="black", style=dashed]
    node19321 [shape=cds, label=<<font color="black">%1 = clo&lt;GeneratorResumeAbrupt&gt;(g, C, ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node19321 -> node19322 [color="black"]
    node19322_name [shape=none, label=<<font color="black">Block[19322]</font>>]
    node19322_name -> node19322 [arrowhead=none, color="black", style=dashed]
    node19322 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19322 -> cluster2610_exit [color="black"]
  }
}