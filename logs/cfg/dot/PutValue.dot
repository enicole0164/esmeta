digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster63 {
    label = "def PutValue(V: Unknown, W: Unknown): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster63_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster63_entry_name -> cluster63_entry [arrowhead=none, color="black", style=dashed]
    cluster63_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster63_entry -> node419 [color="black"]
    cluster63_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster63_exit_name -> cluster63_exit [arrowhead=none, color="black", style=dashed]
    cluster63_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node419_name [shape=none, label=<<font color="black">Block[419]</font>>]
    node419_name -> node419 [arrowhead=none, color="black", style=dashed]
    node419 [shape=box, label=<<font color="black">[0] [? V]<BR ALIGN="LEFT"/>[1] [? W]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node419 -> node420 [color="black"]
    node420_name [shape=none, label=<<font color="black">Branch[420]</font>>]
    node420_name -> node420 [arrowhead=none, color="black", style=dashed]
    node420 [shape=diamond, label=<<font color="black">(! (? V: &quot;ReferenceRecord&quot;))</font>> color="black" fillcolor="white", style=filled]
    node420 -> node421 [label=<<font color="black">true</font>> color="black"]
    node420 -> node422 [label=<<font color="black">false</font>> color="black"]
    node421_name [shape=none, label=<<font color="black">Block[421]</font>>]
    node421_name -> node421 [arrowhead=none, color="black", style=dashed]
    node421 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#13])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node421 -> cluster63_exit [color="black"]
    node422_name [shape=none, label=<<font color="black">Call[422]</font>>]
    node422_name -> node422 [arrowhead=none, color="black", style=dashed]
    node422 [shape=cds, label=<<font color="black">%0 = clo&lt;IsUnresolvableReference&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node422 -> node423 [color="black"]
    node423_name [shape=none, label=<<font color="black">Branch[423]</font>>]
    node423_name -> node423 [arrowhead=none, color="black", style=dashed]
    node423 [shape=diamond, label=<<font color="black">(= %0 true)</font>> color="black" fillcolor="white", style=filled]
    node423 -> node424 [label=<<font color="black">true</font>> color="black"]
    node423 -> node430 [label=<<font color="black">false</font>> color="black"]
    node424_name [shape=none, label=<<font color="black">Branch[424]</font>>]
    node424_name -> node424 [arrowhead=none, color="black", style=dashed]
    node424 [shape=diamond, label=<<font color="black">(= V.Strict true)</font>> color="black" fillcolor="white", style=filled]
    node424 -> node425 [label=<<font color="black">true</font>> color="black"]
    node424 -> node426 [label=<<font color="black">false</font>> color="black"]
    node430_name [shape=none, label=<<font color="black">Call[430]</font>>]
    node430_name -> node430 [arrowhead=none, color="black", style=dashed]
    node430 [shape=cds, label=<<font color="black">%3 = clo&lt;IsPropertyReference&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node430 -> node431 [color="black"]
    node425_name [shape=none, label=<<font color="black">Block[425]</font>>]
    node425_name -> node425 [arrowhead=none, color="black", style=dashed]
    node425 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#14])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node425 -> cluster63_exit [color="black"]
    node426_name [shape=none, label=<<font color="black">Call[426]</font>>]
    node426_name -> node426 [arrowhead=none, color="black", style=dashed]
    node426 [shape=cds, label=<<font color="black">%1 = clo&lt;GetGlobalObject&gt;()</font>> color="black" fillcolor="white", style=filled]
    node426 -> node427 [color="black"]
    node431_name [shape=none, label=<<font color="black">Branch[431]</font>>]
    node431_name -> node431 [arrowhead=none, color="black", style=dashed]
    node431 [shape=diamond, label=<<font color="black">(= %3 true)</font>> color="black" fillcolor="white", style=filled]
    node431 -> node432 [label=<<font color="black">true</font>> color="black"]
    node431 -> node444 [label=<<font color="black">false</font>> color="black"]
    node427_name [shape=none, label=<<font color="black">Block[427]</font>>]
    node427_name -> node427 [arrowhead=none, color="black", style=dashed]
    node427 [shape=box, label=<<font color="black">[0] let globalObj = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node427 -> node428 [color="black"]
    node432_name [shape=none, label=<<font color="black">Call[432]</font>>]
    node432_name -> node432 [arrowhead=none, color="black", style=dashed]
    node432 [shape=cds, label=<<font color="black">%4 = clo&lt;ToObject&gt;(V.Base)</font>> color="black" fillcolor="white", style=filled]
    node432 -> node433 [color="black"]
    node444_name [shape=none, label=<<font color="black">Block[444]</font>>]
    node444_name -> node444 [arrowhead=none, color="black", style=dashed]
    node444 [shape=box, label=<<font color="black">[0] let base = V.Base<BR ALIGN="LEFT"/>[1] assert (? base: &quot;EnvironmentRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node444 -> node445 [color="black"]
    node428_name [shape=none, label=<<font color="black">Call[428]</font>>]
    node428_name -> node428 [arrowhead=none, color="black", style=dashed]
    node428 [shape=cds, label=<<font color="black">%2 = clo&lt;Set&gt;(globalObj, V.ReferencedName, W, false)</font>> color="black" fillcolor="white", style=filled]
    node428 -> node429 [color="black"]
    node433_name [shape=none, label=<<font color="black">Block[433]</font>>]
    node433_name -> node433 [arrowhead=none, color="black", style=dashed]
    node433 [shape=box, label=<<font color="black">[0] let baseObj = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node433 -> node434 [color="black"]
    node445_name [shape=none, label=<<font color="black">Call[445]</font>>]
    node445_name -> node445 [arrowhead=none, color="black", style=dashed]
    node445 [shape=cds, label=<<font color="black">%9 = base-&gt;SetMutableBinding(V.ReferencedName, W, V.Strict)</font>> color="black" fillcolor="white", style=filled]
    node445 -> node446 [color="black"]
    node429_name [shape=none, label=<<font color="black">Block[429]</font>>]
    node429_name -> node429 [arrowhead=none, color="black", style=dashed]
    node429 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node429 -> cluster63_exit [color="black"]
    node434_name [shape=none, label=<<font color="black">Call[434]</font>>]
    node434_name -> node434 [arrowhead=none, color="black", style=dashed]
    node434 [shape=cds, label=<<font color="black">%5 = clo&lt;IsPrivateReference&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node434 -> node435 [color="black"]
    node446_name [shape=none, label=<<font color="black">Block[446]</font>>]
    node446_name -> node446 [arrowhead=none, color="black", style=dashed]
    node446 [shape=box, label=<<font color="black">[0] return [? %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node446 -> cluster63_exit [color="black"]
    node435_name [shape=none, label=<<font color="black">Branch[435]</font>>]
    node435_name -> node435 [arrowhead=none, color="black", style=dashed]
    node435 [shape=diamond, label=<<font color="black">(= %5 true)</font>> color="black" fillcolor="white", style=filled]
    node435 -> node436 [label=<<font color="black">true</font>> color="black"]
    node435 -> node438 [label=<<font color="black">false</font>> color="black"]
    node436_name [shape=none, label=<<font color="black">Call[436]</font>>]
    node436_name -> node436 [arrowhead=none, color="black", style=dashed]
    node436 [shape=cds, label=<<font color="black">%6 = clo&lt;PrivateSet&gt;(baseObj, V.ReferencedName, W)</font>> color="black" fillcolor="white", style=filled]
    node436 -> node437 [color="black"]
    node438_name [shape=none, label=<<font color="black">Call[438]</font>>]
    node438_name -> node438 [arrowhead=none, color="black", style=dashed]
    node438 [shape=cds, label=<<font color="black">%8 = clo&lt;GetThisValue&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node438 -> node439 [color="black"]
    node437_name [shape=none, label=<<font color="black">Block[437]</font>>]
    node437_name -> node437 [arrowhead=none, color="black", style=dashed]
    node437 [shape=box, label=<<font color="black">[0] return [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node437 -> cluster63_exit [color="black"]
    node439_name [shape=none, label=<<font color="black">Call[439]</font>>]
    node439_name -> node439 [arrowhead=none, color="black", style=dashed]
    node439 [shape=cds, label=<<font color="black">%7 = baseObj-&gt;Set(V.ReferencedName, W, %8)</font>> color="black" fillcolor="white", style=filled]
    node439 -> node440 [color="black"]
    node440_name [shape=none, label=<<font color="black">Block[440]</font>>]
    node440_name -> node440 [arrowhead=none, color="black", style=dashed]
    node440 [shape=box, label=<<font color="black">[0] let succeeded = [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node440 -> node441 [color="black"]
    node441_name [shape=none, label=<<font color="black">Branch[441]</font>>]
    node441_name -> node441 [arrowhead=none, color="black", style=dashed]
    node441 [shape=diamond, label=<<font color="black">(&amp;&amp; (= succeeded false) (= V.Strict true))</font>> color="black" fillcolor="white", style=filled]
    node441 -> node442 [label=<<font color="black">true</font>> color="black"]
    node441 -> node443 [label=<<font color="black">false</font>> color="black"]
    node442_name [shape=none, label=<<font color="black">Block[442]</font>>]
    node442_name -> node442 [arrowhead=none, color="black", style=dashed]
    node442 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#15])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node442 -> cluster63_exit [color="black"]
    node443_name [shape=none, label=<<font color="black">Block[443]</font>>]
    node443_name -> node443 [arrowhead=none, color="black", style=dashed]
    node443 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node443 -> cluster63_exit [color="black"]
  }
}