digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2339 {
    label = "def <BUILTIN>:INTRINSICS.Array(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2339_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2339_entry_name -> cluster2339_entry [arrowhead=none, color="black", style=dashed]
    cluster2339_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2339_entry -> node14679 [color="black"]
    cluster2339_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2339_exit_name -> cluster2339_exit [arrowhead=none, color="black", style=dashed]
    cluster2339_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node14679_name [shape=none, label=<<font color="black">Block[14679]</font>>]
    node14679_name -> node14679 [arrowhead=none, color="black", style=dashed]
    node14679 [shape=box, label=<<font color="black">[0] let values = argumentsList<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14679 -> node14680 [color="black"]
    node14680_name [shape=none, label=<<font color="black">Branch[14680]</font>>]
    node14680_name -> node14680 [arrowhead=none, color="black", style=dashed]
    node14680 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node14680 -> node14681 [label=<<font color="black">true</font>> color="black"]
    node14680 -> node14682 [label=<<font color="black">false</font>> color="black"]
    node14681_name [shape=none, label=<<font color="black">Block[14681]</font>>]
    node14681_name -> node14681 [arrowhead=none, color="black", style=dashed]
    node14681 [shape=box, label=<<font color="black">[0] let newTarget = @EXECUTION_STACK[0].Function<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14681 -> node14683 [color="black"]
    node14682_name [shape=none, label=<<font color="black">Block[14682]</font>>]
    node14682_name -> node14682 [arrowhead=none, color="black", style=dashed]
    node14682 [shape=box, label=<<font color="black">[0] let newTarget = NewTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14682 -> node14683 [color="black"]
    node14683_name [shape=none, label=<<font color="black">Call[14683]</font>>]
    node14683_name -> node14683 [arrowhead=none, color="black", style=dashed]
    node14683 [shape=cds, label=<<font color="black">%0 = clo&lt;GetPrototypeFromConstructor&gt;(newTarget, &quot;%Array.prototype%&quot;)</font>> color="black" fillcolor="white", style=filled]
    node14683 -> node14684 [color="black"]
    node14684_name [shape=none, label=<<font color="black">Block[14684]</font>>]
    node14684_name -> node14684 [arrowhead=none, color="black", style=dashed]
    node14684 [shape=box, label=<<font color="black">[0] let proto = [? %0]<BR ALIGN="LEFT"/>[1] let numberOfArgs = values.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14684 -> node14685 [color="black"]
    node14685_name [shape=none, label=<<font color="black">Branch[14685]</font>>]
    node14685_name -> node14685 [arrowhead=none, color="black", style=dashed]
    node14685 [shape=diamond, label=<<font color="black">(== numberOfArgs 0)</font>> color="black" fillcolor="white", style=filled]
    node14685 -> node14686 [label=<<font color="black">true</font>> color="black"]
    node14685 -> node14688 [label=<<font color="black">false</font>> color="black"]
    node14686_name [shape=none, label=<<font color="black">Call[14686]</font>>]
    node14686_name -> node14686 [arrowhead=none, color="black", style=dashed]
    node14686 [shape=cds, label=<<font color="black">%1 = clo&lt;ArrayCreate&gt;(0, proto)</font>> color="black" fillcolor="white", style=filled]
    node14686 -> node14687 [color="black"]
    node14688_name [shape=none, label=<<font color="black">Branch[14688]</font>>]
    node14688_name -> node14688 [arrowhead=none, color="black", style=dashed]
    node14688 [shape=diamond, label=<<font color="black">(== numberOfArgs 1)</font>> color="black" fillcolor="white", style=filled]
    node14688 -> node14689 [label=<<font color="black">true</font>> color="black"]
    node14688 -> node14702 [label=<<font color="black">false</font>> color="black"]
    node14687_name [shape=none, label=<<font color="black">Block[14687]</font>>]
    node14687_name -> node14687 [arrowhead=none, color="black", style=dashed]
    node14687 [shape=box, label=<<font color="black">[0] return [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14687 -> cluster2339_exit [color="black"]
    node14689_name [shape=none, label=<<font color="black">Block[14689]</font>>]
    node14689_name -> node14689 [arrowhead=none, color="black", style=dashed]
    node14689 [shape=box, label=<<font color="black">[0] let len = values[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14689 -> node14690 [color="black"]
    node14702_name [shape=none, label=<<font color="black">Block[14702]</font>>]
    node14702_name -> node14702 [arrowhead=none, color="black", style=dashed]
    node14702 [shape=box, label=<<font color="black">[0] assert (! (&lt; numberOfArgs 2))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14702 -> node14703 [color="black"]
    node14690_name [shape=none, label=<<font color="black">Call[14690]</font>>]
    node14690_name -> node14690 [arrowhead=none, color="black", style=dashed]
    node14690 [shape=cds, label=<<font color="black">%2 = clo&lt;ArrayCreate&gt;(0, proto)</font>> color="black" fillcolor="white", style=filled]
    node14690 -> node14691 [color="black"]
    node14703_name [shape=none, label=<<font color="black">Call[14703]</font>>]
    node14703_name -> node14703 [arrowhead=none, color="black", style=dashed]
    node14703 [shape=cds, label=<<font color="black">%7 = clo&lt;ArrayCreate&gt;(numberOfArgs, proto)</font>> color="black" fillcolor="white", style=filled]
    node14703 -> node14704 [color="black"]
    node14691_name [shape=none, label=<<font color="black">Block[14691]</font>>]
    node14691_name -> node14691 [arrowhead=none, color="black", style=dashed]
    node14691 [shape=box, label=<<font color="black">[0] let array = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14691 -> node14692 [color="black"]
    node14704_name [shape=none, label=<<font color="black">Block[14704]</font>>]
    node14704_name -> node14704 [arrowhead=none, color="black", style=dashed]
    node14704 [shape=box, label=<<font color="black">[0] let array = [? %7]<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14704 -> node14705 [color="black"]
    node14692_name [shape=none, label=<<font color="black">Branch[14692]</font>>]
    node14692_name -> node14692 [arrowhead=none, color="black", style=dashed]
    node14692 [shape=diamond, label=<<font color="black">(! (= (typeof len) @Number))</font>> color="black" fillcolor="white", style=filled]
    node14692 -> node14693 [label=<<font color="black">true</font>> color="black"]
    node14692 -> node14695 [label=<<font color="black">false</font>> color="black"]
    node14705_name [shape=none, label=<<font color="black">Branch[14705]</font>>]
    node14705_name -> node14705 [arrowhead=none, color="black", style=dashed]
    node14705 [shape=diamond, label=<<font color="black">(&lt; k numberOfArgs)</font>> color="black" fillcolor="white", style=filled]
    node14705 -> node14706 [label=<<font color="black">true</font>> color="black"]
    node14705 -> node14710 [label=<<font color="black">false</font>> color="black"]
    node14693_name [shape=none, label=<<font color="black">Call[14693]</font>>]
    node14693_name -> node14693 [arrowhead=none, color="black", style=dashed]
    node14693 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateDataPropertyOrThrow&gt;(array, &quot;0&quot;, len)</font>> color="black" fillcolor="white", style=filled]
    node14693 -> node14694 [color="black"]
    node14695_name [shape=none, label=<<font color="black">Call[14695]</font>>]
    node14695_name -> node14695 [arrowhead=none, color="black", style=dashed]
    node14695 [shape=cds, label=<<font color="black">%4 = clo&lt;ToUint32&gt;(len)</font>> color="black" fillcolor="white", style=filled]
    node14695 -> node14696 [color="black"]
    node14706_name [shape=none, label=<<font color="black">Call[14706]</font>>]
    node14706_name -> node14706 [arrowhead=none, color="black", style=dashed]
    node14706 [shape=cds, label=<<font color="black">%8 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node14706 -> node14707 [color="black"]
    node14710_name [shape=none, label=<<font color="black">Block[14710]</font>>]
    node14710_name -> node14710 [arrowhead=none, color="black", style=dashed]
    node14710 [shape=box, label=<<font color="black">[0] assert (yet &quot;The mathematical value of _array_'s *\&quot;length\&quot;* property is _numberOfArgs_.&quot;)<BR ALIGN="LEFT"/>[1] return array<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14710 -> cluster2339_exit [color="black"]
    node14694_name [shape=none, label=<<font color="black">Block[14694]</font>>]
    node14694_name -> node14694 [arrowhead=none, color="black", style=dashed]
    node14694 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/>[1] let intLen = 1.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14694 -> node14700 [color="black"]
    node14696_name [shape=none, label=<<font color="black">Block[14696]</font>>]
    node14696_name -> node14696 [arrowhead=none, color="black", style=dashed]
    node14696 [shape=box, label=<<font color="black">[0] let intLen = [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14696 -> node14697 [color="black"]
    node14707_name [shape=none, label=<<font color="black">Block[14707]</font>>]
    node14707_name -> node14707 [arrowhead=none, color="black", style=dashed]
    node14707 [shape=box, label=<<font color="black">[0] let Pk = [! %8]<BR ALIGN="LEFT"/>[1] let itemK = values[k]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14707 -> node14708 [color="black"]
    node14700_name [shape=none, label=<<font color="black">Call[14700]</font>>]
    node14700_name -> node14700 [arrowhead=none, color="black", style=dashed]
    node14700 [shape=cds, label=<<font color="black">%6 = clo&lt;Set&gt;(array, &quot;length&quot;, intLen, true)</font>> color="black" fillcolor="white", style=filled]
    node14700 -> node14701 [color="black"]
    node14697_name [shape=none, label=<<font color="black">Call[14697]</font>>]
    node14697_name -> node14697 [arrowhead=none, color="black", style=dashed]
    node14697 [shape=cds, label=<<font color="black">%5 = clo&lt;SameValueZero&gt;(intLen, len)</font>> color="black" fillcolor="white", style=filled]
    node14697 -> node14698 [color="black"]
    node14708_name [shape=none, label=<<font color="black">Call[14708]</font>>]
    node14708_name -> node14708 [arrowhead=none, color="black", style=dashed]
    node14708 [shape=cds, label=<<font color="black">%9 = clo&lt;CreateDataPropertyOrThrow&gt;(array, Pk, itemK)</font>> color="black" fillcolor="white", style=filled]
    node14708 -> node14709 [color="black"]
    node14701_name [shape=none, label=<<font color="black">Block[14701]</font>>]
    node14701_name -> node14701 [arrowhead=none, color="black", style=dashed]
    node14701 [shape=box, label=<<font color="black">[0] [! %6]<BR ALIGN="LEFT"/>[1] return array<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14701 -> cluster2339_exit [color="black"]
    node14698_name [shape=none, label=<<font color="black">Branch[14698]</font>>]
    node14698_name -> node14698 [arrowhead=none, color="black", style=dashed]
    node14698 [shape=diamond, label=<<font color="black">(= %5 false)</font>> color="black" fillcolor="white", style=filled]
    node14698 -> node14699 [label=<<font color="black">true</font>> color="black"]
    node14698 -> node14700 [label=<<font color="black">false</font>> color="black"]
    node14709_name [shape=none, label=<<font color="black">Block[14709]</font>>]
    node14709_name -> node14709 [arrowhead=none, color="black", style=dashed]
    node14709 [shape=box, label=<<font color="black">[0] [! %9]<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14709 -> node14705 [color="black"]
    node14699_name [shape=none, label=<<font color="black">Block[14699]</font>>]
    node14699_name -> node14699 [arrowhead=none, color="black", style=dashed]
    node14699 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1010])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14699 -> cluster2339_exit [color="black"]
  }
}