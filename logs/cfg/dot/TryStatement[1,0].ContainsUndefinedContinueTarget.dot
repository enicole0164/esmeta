digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster662 {
    label = "def <SYNTAX>:TryStatement[1,0].ContainsUndefinedContinueTarget(this: Ast:TryStatement[1,0], iterationSet: Unknown, labelSet: Unknown): Boolean"
    style = rounded
    cluster662_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster662_entry_name -> cluster662_entry [arrowhead=none, color="black", style=dashed]
    cluster662_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster662_entry -> node2869 [color="black"]
    cluster662_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster662_exit_name -> cluster662_exit [arrowhead=none, color="black", style=dashed]
    cluster662_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node2869_name [shape=none, label=<<font color="black">Call[2869]</font>>]
    node2869_name -> node2869 [arrowhead=none, color="black", style=dashed]
    node2869 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;ContainsUndefinedContinueTarget(iterationSet, (new [])[#356])</font>> color="black" fillcolor="white", style=filled]
    node2869 -> node2870 [color="black"]
    node2870_name [shape=none, label=<<font color="black">Block[2870]</font>>]
    node2870_name -> node2870 [arrowhead=none, color="black", style=dashed]
    node2870 [shape=box, label=<<font color="black">[0] let hasUndefinedLabels = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2870 -> node2871 [color="black"]
    node2871_name [shape=none, label=<<font color="black">Branch[2871]</font>>]
    node2871_name -> node2871 [arrowhead=none, color="black", style=dashed]
    node2871 [shape=diamond, label=<<font color="black">(= hasUndefinedLabels true)</font>> color="black" fillcolor="white", style=filled]
    node2871 -> node2872 [label=<<font color="black">true</font>> color="black"]
    node2871 -> node2873 [label=<<font color="black">false</font>> color="black"]
    node2872_name [shape=none, label=<<font color="black">Block[2872]</font>>]
    node2872_name -> node2872 [arrowhead=none, color="black", style=dashed]
    node2872 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2872 -> cluster662_exit [color="black"]
    node2873_name [shape=none, label=<<font color="black">Call[2873]</font>>]
    node2873_name -> node2873 [arrowhead=none, color="black", style=dashed]
    node2873 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;ContainsUndefinedContinueTarget(iterationSet, (new [])[#357])</font>> color="black" fillcolor="white", style=filled]
    node2873 -> node2874 [color="black"]
    node2874_name [shape=none, label=<<font color="black">Block[2874]</font>>]
    node2874_name -> node2874 [arrowhead=none, color="black", style=dashed]
    node2874 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2874 -> cluster662_exit [color="black"]
  }
}