digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1988 {
    label = "def <BUILTIN>:INTRINSICS.parseInt(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster1988_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1988_entry_name -> cluster1988_entry [arrowhead=none, color="black", style=dashed]
    cluster1988_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1988_entry -> node10938 [color="black"]
    cluster1988_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1988_exit_name -> cluster1988_exit [arrowhead=none, color="black", style=dashed]
    cluster1988_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10938_name [shape=none, label=<<font color="black">Branch[10938]</font>>]
    node10938_name -> node10938 [arrowhead=none, color="black", style=dashed]
    node10938 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node10938 -> node10939 [label=<<font color="black">true</font>> color="black"]
    node10938 -> node10940 [label=<<font color="black">false</font>> color="black"]
    node10939_name [shape=none, label=<<font color="black">Block[10939]</font>>]
    node10939_name -> node10939 [arrowhead=none, color="black", style=dashed]
    node10939 [shape=box, label=<<font color="black">[0] let string = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10939 -> node10941 [color="black"]
    node10940_name [shape=none, label=<<font color="black">Block[10940]</font>>]
    node10940_name -> node10940 [arrowhead=none, color="black", style=dashed]
    node10940 [shape=box, label=<<font color="black">[0] let string = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10940 -> node10941 [color="black"]
    node10941_name [shape=none, label=<<font color="black">Branch[10941]</font>>]
    node10941_name -> node10941 [arrowhead=none, color="black", style=dashed]
    node10941 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node10941 -> node10942 [label=<<font color="black">true</font>> color="black"]
    node10941 -> node10943 [label=<<font color="black">false</font>> color="black"]
    node10942_name [shape=none, label=<<font color="black">Block[10942]</font>>]
    node10942_name -> node10942 [arrowhead=none, color="black", style=dashed]
    node10942 [shape=box, label=<<font color="black">[0] let radix = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10942 -> node10944 [color="black"]
    node10943_name [shape=none, label=<<font color="black">Block[10943]</font>>]
    node10943_name -> node10943 [arrowhead=none, color="black", style=dashed]
    node10943 [shape=box, label=<<font color="black">[0] let radix = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10943 -> node10944 [color="black"]
    node10944_name [shape=none, label=<<font color="black">Call[10944]</font>>]
    node10944_name -> node10944 [arrowhead=none, color="black", style=dashed]
    node10944 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(string)</font>> color="black" fillcolor="white", style=filled]
    node10944 -> node10945 [color="black"]
    node10945_name [shape=none, label=<<font color="black">Block[10945]</font>>]
    node10945_name -> node10945 [arrowhead=none, color="black", style=dashed]
    node10945 [shape=box, label=<<font color="black">[0] let inputString = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10945 -> node10946 [color="black"]
    node10946_name [shape=none, label=<<font color="black">Call[10946]</font>>]
    node10946_name -> node10946 [arrowhead=none, color="black", style=dashed]
    node10946 [shape=cds, label=<<font color="black">%1 = clo&lt;TrimString&gt;(inputString, ~start~)</font>> color="black" fillcolor="white", style=filled]
    node10946 -> node10947 [color="black"]
    node10947_name [shape=none, label=<<font color="black">Block[10947]</font>>]
    node10947_name -> node10947 [arrowhead=none, color="black", style=dashed]
    node10947 [shape=box, label=<<font color="black">[0] let S = [! %1]<BR ALIGN="LEFT"/>[1] let sign = 1<BR ALIGN="LEFT"/>[2] (yet &quot;If _S_ is not empty and the first code unit of _S_ is the code unit 0x002D (HYPHEN-MINUS), set _sign_ to -1.&quot;)<BR ALIGN="LEFT"/>[3] (yet &quot;If _S_ is not empty and the first code unit of _S_ is the code unit 0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove the first code unit from _S_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10947 -> node10948 [color="black"]
    node10948_name [shape=none, label=<<font color="black">Call[10948]</font>>]
    node10948_name -> node10948 [arrowhead=none, color="black", style=dashed]
    node10948 [shape=cds, label=<<font color="black">%2 = clo&lt;ToInt32&gt;(radix)</font>> color="black" fillcolor="white", style=filled]
    node10948 -> node10949 [color="black"]
    node10949_name [shape=none, label=<<font color="black">Block[10949]</font>>]
    node10949_name -> node10949 [arrowhead=none, color="black", style=dashed]
    node10949 [shape=box, label=<<font color="black">[0] let R = ([math] [? %2])<BR ALIGN="LEFT"/>[1] let stripPrefix = true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10949 -> node10950 [color="black"]
    node10950_name [shape=none, label=<<font color="black">Branch[10950]</font>>]
    node10950_name -> node10950 [arrowhead=none, color="black", style=dashed]
    node10950 [shape=diamond, label=<<font color="black">(! (== R 0))</font>> color="black" fillcolor="white", style=filled]
    node10950 -> node10951 [label=<<font color="black">true</font>> color="black"]
    node10950 -> node10955 [label=<<font color="black">false</font>> color="black"]
    node10951_name [shape=none, label=<<font color="black">Branch[10951]</font>>]
    node10951_name -> node10951 [arrowhead=none, color="black", style=dashed]
    node10951 [shape=diamond, label=<<font color="black">(|| (&lt; R 2) (&lt; 36 R))</font>> color="black" fillcolor="white", style=filled]
    node10951 -> node10952 [label=<<font color="black">true</font>> color="black"]
    node10951 -> node10953 [label=<<font color="black">false</font>> color="black"]
    node10955_name [shape=none, label=<<font color="black">Block[10955]</font>>]
    node10955_name -> node10955 [arrowhead=none, color="black", style=dashed]
    node10955 [shape=box, label=<<font color="black">[0] R = 10<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10955 -> node10956 [color="black"]
    node10952_name [shape=none, label=<<font color="black">Block[10952]</font>>]
    node10952_name -> node10952 [arrowhead=none, color="black", style=dashed]
    node10952 [shape=box, label=<<font color="black">[0] return NaN<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10952 -> cluster1988_exit [color="black"]
    node10953_name [shape=none, label=<<font color="black">Branch[10953]</font>>]
    node10953_name -> node10953 [arrowhead=none, color="black", style=dashed]
    node10953 [shape=diamond, label=<<font color="black">(! (== R 16))</font>> color="black" fillcolor="white", style=filled]
    node10953 -> node10954 [label=<<font color="black">true</font>> color="black"]
    node10953 -> node10956 [label=<<font color="black">false</font>> color="black"]
    node10956_name [shape=none, label=<<font color="black">Branch[10956]</font>>]
    node10956_name -> node10956 [arrowhead=none, color="black", style=dashed]
    node10956 [shape=diamond, label=<<font color="black">(= stripPrefix true)</font>> color="black" fillcolor="white", style=filled]
    node10956 -> node10957 [label=<<font color="black">true</font>> color="black"]
    node10956 -> node10958 [label=<<font color="black">false</font>> color="black"]
    node10954_name [shape=none, label=<<font color="black">Block[10954]</font>>]
    node10954_name -> node10954 [arrowhead=none, color="black", style=dashed]
    node10954 [shape=box, label=<<font color="black">[0] stripPrefix = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10954 -> node10956 [color="black"]
    node10957_name [shape=none, label=<<font color="black">Block[10957]</font>>]
    node10957_name -> node10957 [arrowhead=none, color="black", style=dashed]
    node10957 [shape=box, label=<<font color="black">[0] (yet &quot;If the length of _S_ is at least 2 and the first two code units of _S_ are either *\&quot;0x\&quot;* or *\&quot;0X\&quot;*, then\n  1. Remove the first two code units from _S_.\n  1. Set _R_ to 16.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10957 -> node10958 [color="black"]
    node10958_name [shape=none, label=<<font color="black">Block[10958]</font>>]
    node10958_name -> node10958 [arrowhead=none, color="black", style=dashed]
    node10958 [shape=box, label=<<font color="black">[0] (yet &quot;If _S_ contains a code unit that is not a radix-_R_ digit, let _end_ be the index within _S_ of the first such code unit; otherwise, let _end_ be the length of _S_.&quot;)<BR ALIGN="LEFT"/>[1] let Z = (substring S 0 end)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10958 -> node10959 [color="black"]
    node10959_name [shape=none, label=<<font color="black">Branch[10959]</font>>]
    node10959_name -> node10959 [arrowhead=none, color="black", style=dashed]
    node10959 [shape=diamond, label=<<font color="black">(= Z.length 0)</font>> color="black" fillcolor="white", style=filled]
    node10959 -> node10960 [label=<<font color="black">true</font>> color="black"]
    node10959 -> node10961 [label=<<font color="black">false</font>> color="black"]
    node10960_name [shape=none, label=<<font color="black">Block[10960]</font>>]
    node10960_name -> node10960 [arrowhead=none, color="black", style=dashed]
    node10960 [shape=box, label=<<font color="black">[0] return NaN<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10960 -> cluster1988_exit [color="black"]
    node10961_name [shape=none, label=<<font color="black">Block[10961]</font>>]
    node10961_name -> node10961 [arrowhead=none, color="black", style=dashed]
    node10961 [shape=box, label=<<font color="black">[0] (yet &quot;Let _mathInt_ be the integer value that is represented by _Z_ in radix-_R_ notation, using the letters &lt;b&gt;A&lt;/b&gt;-&lt;b&gt;Z&lt;/b&gt; and &lt;b&gt;a&lt;/b&gt;-&lt;b&gt;z&lt;/b&gt; for digits with values 10 through 35. (However, if _R_ is 10 and _Z_ contains more than 20 significant digits, every significant digit after the 20th may be replaced by a 0 digit, at the option of the implementation; and if _R_ is not 2, 4, 8, 10, 16, or 32, then _mathInt_ may be an implementation-approximated integer representing the integer value denoted by _Z_ in radix-_R_ notation.)&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10961 -> node10962 [color="black"]
    node10962_name [shape=none, label=<<font color="black">Branch[10962]</font>>]
    node10962_name -> node10962 [arrowhead=none, color="black", style=dashed]
    node10962 [shape=diamond, label=<<font color="black">(== mathInt 0)</font>> color="black" fillcolor="white", style=filled]
    node10962 -> node10963 [label=<<font color="black">true</font>> color="black"]
    node10962 -> node10966 [label=<<font color="black">false</font>> color="black"]
    node10963_name [shape=none, label=<<font color="black">Branch[10963]</font>>]
    node10963_name -> node10963 [arrowhead=none, color="black", style=dashed]
    node10963 [shape=diamond, label=<<font color="black">(== sign (- 1))</font>> color="black" fillcolor="white", style=filled]
    node10963 -> node10964 [label=<<font color="black">true</font>> color="black"]
    node10963 -> node10965 [label=<<font color="black">false</font>> color="black"]
    node10966_name [shape=none, label=<<font color="black">Block[10966]</font>>]
    node10966_name -> node10966 [arrowhead=none, color="black", style=dashed]
    node10966 [shape=box, label=<<font color="black">[0] return ([number] (* sign mathInt))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10966 -> cluster1988_exit [color="black"]
    node10964_name [shape=none, label=<<font color="black">Block[10964]</font>>]
    node10964_name -> node10964 [arrowhead=none, color="black", style=dashed]
    node10964 [shape=box, label=<<font color="black">[0] return -0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10964 -> cluster1988_exit [color="black"]
    node10965_name [shape=none, label=<<font color="black">Block[10965]</font>>]
    node10965_name -> node10965 [arrowhead=none, color="black", style=dashed]
    node10965 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10965 -> cluster1988_exit [color="black"]
  }
}