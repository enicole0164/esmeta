digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2448 {
    label = "def <BUILTIN>:INTRINSICS.Set(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2448_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2448_entry_name -> cluster2448_entry [arrowhead=none, color="black", style=dashed]
    cluster2448_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2448_entry -> node17035 [color="black"]
    cluster2448_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2448_exit_name -> cluster2448_exit [arrowhead=none, color="black", style=dashed]
    cluster2448_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17035_name [shape=none, label=<<font color="black">Branch[17035]</font>>]
    node17035_name -> node17035 [arrowhead=none, color="black", style=dashed]
    node17035 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17035 -> node17036 [label=<<font color="black">true</font>> color="black"]
    node17035 -> node17037 [label=<<font color="black">false</font>> color="black"]
    node17036_name [shape=none, label=<<font color="black">Block[17036]</font>>]
    node17036_name -> node17036 [arrowhead=none, color="black", style=dashed]
    node17036 [shape=box, label=<<font color="black">[0] let iterable = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17036 -> node17038 [color="black"]
    node17037_name [shape=none, label=<<font color="black">Block[17037]</font>>]
    node17037_name -> node17037 [arrowhead=none, color="black", style=dashed]
    node17037 [shape=box, label=<<font color="black">[0] let iterable = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17037 -> node17038 [color="black"]
    node17038_name [shape=none, label=<<font color="black">Branch[17038]</font>>]
    node17038_name -> node17038 [arrowhead=none, color="black", style=dashed]
    node17038 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node17038 -> node17039 [label=<<font color="black">true</font>> color="black"]
    node17038 -> node17040 [label=<<font color="black">false</font>> color="black"]
    node17039_name [shape=none, label=<<font color="black">Block[17039]</font>>]
    node17039_name -> node17039 [arrowhead=none, color="black", style=dashed]
    node17039 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1123])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17039 -> cluster2448_exit [color="black"]
    node17040_name [shape=none, label=<<font color="black">Call[17040]</font>>]
    node17040_name -> node17040 [arrowhead=none, color="black", style=dashed]
    node17040 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryCreateFromConstructor&gt;(NewTarget, &quot;%Set.prototype%&quot;, (new [&quot;SetData&quot;])[#1124])</font>> color="black" fillcolor="white", style=filled]
    node17040 -> node17041 [color="black"]
    node17041_name [shape=none, label=<<font color="black">Block[17041]</font>>]
    node17041_name -> node17041 [arrowhead=none, color="black", style=dashed]
    node17041 [shape=box, label=<<font color="black">[0] let set = [? %0]<BR ALIGN="LEFT"/>[1] set.SetData = (new [])[#1125]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17041 -> node17042 [color="black"]
    node17042_name [shape=none, label=<<font color="black">Branch[17042]</font>>]
    node17042_name -> node17042 [arrowhead=none, color="black", style=dashed]
    node17042 [shape=diamond, label=<<font color="black">(|| (= iterable undefined) (= iterable null))</font>> color="black" fillcolor="white", style=filled]
    node17042 -> node17043 [label=<<font color="black">true</font>> color="black"]
    node17042 -> node17044 [label=<<font color="black">false</font>> color="black"]
    node17043_name [shape=none, label=<<font color="black">Block[17043]</font>>]
    node17043_name -> node17043 [arrowhead=none, color="black", style=dashed]
    node17043 [shape=box, label=<<font color="black">[0] return set<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17043 -> cluster2448_exit [color="black"]
    node17044_name [shape=none, label=<<font color="black">Call[17044]</font>>]
    node17044_name -> node17044 [arrowhead=none, color="black", style=dashed]
    node17044 [shape=cds, label=<<font color="black">%1 = clo&lt;Get&gt;(set, &quot;add&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17044 -> node17045 [color="black"]
    node17045_name [shape=none, label=<<font color="black">Block[17045]</font>>]
    node17045_name -> node17045 [arrowhead=none, color="black", style=dashed]
    node17045 [shape=box, label=<<font color="black">[0] let adder = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17045 -> node17046 [color="black"]
    node17046_name [shape=none, label=<<font color="black">Call[17046]</font>>]
    node17046_name -> node17046 [arrowhead=none, color="black", style=dashed]
    node17046 [shape=cds, label=<<font color="black">%2 = clo&lt;IsCallable&gt;(adder)</font>> color="black" fillcolor="white", style=filled]
    node17046 -> node17047 [color="black"]
    node17047_name [shape=none, label=<<font color="black">Branch[17047]</font>>]
    node17047_name -> node17047 [arrowhead=none, color="black", style=dashed]
    node17047 [shape=diamond, label=<<font color="black">(= %2 false)</font>> color="black" fillcolor="white", style=filled]
    node17047 -> node17048 [label=<<font color="black">true</font>> color="black"]
    node17047 -> node17049 [label=<<font color="black">false</font>> color="black"]
    node17048_name [shape=none, label=<<font color="black">Block[17048]</font>>]
    node17048_name -> node17048 [arrowhead=none, color="black", style=dashed]
    node17048 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1126])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17048 -> cluster2448_exit [color="black"]
    node17049_name [shape=none, label=<<font color="black">Call[17049]</font>>]
    node17049_name -> node17049 [arrowhead=none, color="black", style=dashed]
    node17049 [shape=cds, label=<<font color="black">%3 = clo&lt;GetIterator&gt;(iterable)</font>> color="black" fillcolor="white", style=filled]
    node17049 -> node17050 [color="black"]
    node17050_name [shape=none, label=<<font color="black">Block[17050]</font>>]
    node17050_name -> node17050 [arrowhead=none, color="black", style=dashed]
    node17050 [shape=box, label=<<font color="black">[0] let iteratorRecord = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17050 -> node17051 [color="black"]
    node17051_name [shape=none, label=<<font color="black">Branch[17051]</font>>]
    node17051_name -> node17051 [arrowhead=none, color="black", style=dashed]
    node17051 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node17051 -> node17052 [label=<<font color="black">true</font>> color="black"]
    node17052_name [shape=none, label=<<font color="black">Call[17052]</font>>]
    node17052_name -> node17052 [arrowhead=none, color="black", style=dashed]
    node17052 [shape=cds, label=<<font color="black">%4 = clo&lt;IteratorStep&gt;(iteratorRecord)</font>> color="black" fillcolor="white", style=filled]
    node17052 -> node17053 [color="black"]
    node17053_name [shape=none, label=<<font color="black">Block[17053]</font>>]
    node17053_name -> node17053 [arrowhead=none, color="black", style=dashed]
    node17053 [shape=box, label=<<font color="black">[0] let next = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17053 -> node17054 [color="black"]
    node17054_name [shape=none, label=<<font color="black">Branch[17054]</font>>]
    node17054_name -> node17054 [arrowhead=none, color="black", style=dashed]
    node17054 [shape=diamond, label=<<font color="black">(= next false)</font>> color="black" fillcolor="white", style=filled]
    node17054 -> node17055 [label=<<font color="black">true</font>> color="black"]
    node17054 -> node17056 [label=<<font color="black">false</font>> color="black"]
    node17055_name [shape=none, label=<<font color="black">Block[17055]</font>>]
    node17055_name -> node17055 [arrowhead=none, color="black", style=dashed]
    node17055 [shape=box, label=<<font color="black">[0] return set<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17055 -> cluster2448_exit [color="black"]
    node17056_name [shape=none, label=<<font color="black">Call[17056]</font>>]
    node17056_name -> node17056 [arrowhead=none, color="black", style=dashed]
    node17056 [shape=cds, label=<<font color="black">%5 = clo&lt;IteratorValue&gt;(next)</font>> color="black" fillcolor="white", style=filled]
    node17056 -> node17057 [color="black"]
    node17057_name [shape=none, label=<<font color="black">Block[17057]</font>>]
    node17057_name -> node17057 [arrowhead=none, color="black", style=dashed]
    node17057 [shape=box, label=<<font color="black">[0] let nextValue = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17057 -> node17058 [color="black"]
    node17058_name [shape=none, label=<<font color="black">Call[17058]</font>>]
    node17058_name -> node17058 [arrowhead=none, color="black", style=dashed]
    node17058 [shape=cds, label=<<font color="black">%6 = clo&lt;Call&gt;(adder, set, (new [nextValue])[#1127])</font>> color="black" fillcolor="white", style=filled]
    node17058 -> node17059 [color="black"]
    node17059_name [shape=none, label=<<font color="black">Call[17059]</font>>]
    node17059_name -> node17059 [arrowhead=none, color="black", style=dashed]
    node17059 [shape=cds, label=<<font color="black">%7 = clo&lt;Completion&gt;(%6)</font>> color="black" fillcolor="white", style=filled]
    node17059 -> node17060 [color="black"]
    node17060_name [shape=none, label=<<font color="black">Block[17060]</font>>]
    node17060_name -> node17060 [arrowhead=none, color="black", style=dashed]
    node17060 [shape=box, label=<<font color="black">[0] let status = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17060 -> node17061 [color="black"]
    node17061_name [shape=none, label=<<font color="black">Branch[17061]</font>>]
    node17061_name -> node17061 [arrowhead=none, color="black", style=dashed]
    node17061 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? status) (! (= status.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node17061 -> node17062 [label=<<font color="black">true</font>> color="black"]
    node17061 -> node17064 [label=<<font color="black">false</font>> color="black"]
    node17062_name [shape=none, label=<<font color="black">Call[17062]</font>>]
    node17062_name -> node17062 [arrowhead=none, color="black", style=dashed]
    node17062 [shape=cds, label=<<font color="black">%8 = clo&lt;IteratorClose&gt;(iteratorRecord, status)</font>> color="black" fillcolor="white", style=filled]
    node17062 -> node17063 [color="black"]
    node17064_name [shape=none, label=<<font color="black">Branch[17064]</font>>]
    node17064_name -> node17064 [arrowhead=none, color="black", style=dashed]
    node17064 [shape=diamond, label=<<font color="black">(? status: &quot;CompletionRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17064 -> node17065 [label=<<font color="black">true</font>> color="black"]
    node17064 -> node17051 [label=<<font color="black">false</font>> color="black"]
    node17063_name [shape=none, label=<<font color="black">Block[17063]</font>>]
    node17063_name -> node17063 [arrowhead=none, color="black", style=dashed]
    node17063 [shape=box, label=<<font color="black">[0] return [? %8]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17063 -> cluster2448_exit [color="black"]
    node17065_name [shape=none, label=<<font color="black">Block[17065]</font>>]
    node17065_name -> node17065 [arrowhead=none, color="black", style=dashed]
    node17065 [shape=box, label=<<font color="black">[0] status = status.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17065 -> node17051 [color="black"]
  }
}