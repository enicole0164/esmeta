digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2102 {
    label = "def <BUILTIN>:INTRINSICS.Math.round(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2102_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2102_entry_name -> cluster2102_entry [arrowhead=none, color="black", style=dashed]
    cluster2102_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2102_entry -> node12351 [color="black"]
    cluster2102_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2102_exit_name -> cluster2102_exit [arrowhead=none, color="black", style=dashed]
    cluster2102_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12351_name [shape=none, label=<<font color="black">Branch[12351]</font>>]
    node12351_name -> node12351 [arrowhead=none, color="black", style=dashed]
    node12351 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12351 -> node12352 [label=<<font color="black">true</font>> color="black"]
    node12351 -> node12353 [label=<<font color="black">false</font>> color="black"]
    node12352_name [shape=none, label=<<font color="black">Block[12352]</font>>]
    node12352_name -> node12352 [arrowhead=none, color="black", style=dashed]
    node12352 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12352 -> node12354 [color="black"]
    node12353_name [shape=none, label=<<font color="black">Block[12353]</font>>]
    node12353_name -> node12353 [arrowhead=none, color="black", style=dashed]
    node12353 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12353 -> node12354 [color="black"]
    node12354_name [shape=none, label=<<font color="black">Call[12354]</font>>]
    node12354_name -> node12354 [arrowhead=none, color="black", style=dashed]
    node12354 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12354 -> node12355 [color="black"]
    node12355_name [shape=none, label=<<font color="black">Block[12355]</font>>]
    node12355_name -> node12355 [arrowhead=none, color="black", style=dashed]
    node12355 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12355 -> node12356 [color="black"]
    node12356_name [shape=none, label=<<font color="black">Branch[12356]</font>>]
    node12356_name -> node12356 [arrowhead=none, color="black", style=dashed]
    node12356 [shape=diamond, label=<<font color="black">(|| (|| (= n NaN) (= n +INF)) (= n -INF))</font>> color="black" fillcolor="white", style=filled]
    node12356 -> node12357 [label=<<font color="black">true</font>> color="black"]
    node12356 -> node12358 [label=<<font color="black">false</font>> color="black"]
    node12357_name [shape=none, label=<<font color="black">Block[12357]</font>>]
    node12357_name -> node12357 [arrowhead=none, color="black", style=dashed]
    node12357 [shape=box, label=<<font color="black">[0] (yet &quot;or an integral Number, return _n_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12357 -> node12358 [color="black"]
    node12358_name [shape=none, label=<<font color="black">Branch[12358]</font>>]
    node12358_name -> node12358 [arrowhead=none, color="black", style=dashed]
    node12358 [shape=diamond, label=<<font color="black">(&amp;&amp; (&lt; n 0.5f) (&lt; 0.0f n))</font>> color="black" fillcolor="white", style=filled]
    node12358 -> node12359 [label=<<font color="black">true</font>> color="black"]
    node12358 -> node12360 [label=<<font color="black">false</font>> color="black"]
    node12359_name [shape=none, label=<<font color="black">Block[12359]</font>>]
    node12359_name -> node12359 [arrowhead=none, color="black", style=dashed]
    node12359 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12359 -> cluster2102_exit [color="black"]
    node12360_name [shape=none, label=<<font color="black">Branch[12360]</font>>]
    node12360_name -> node12360 [arrowhead=none, color="black", style=dashed]
    node12360 [shape=diamond, label=<<font color="black">(&amp;&amp; (&lt; n -0.0f) (! (&lt; n -0.5f)))</font>> color="black" fillcolor="white", style=filled]
    node12360 -> node12361 [label=<<font color="black">true</font>> color="black"]
    node12360 -> node12362 [label=<<font color="black">false</font>> color="black"]
    node12361_name [shape=none, label=<<font color="black">Block[12361]</font>>]
    node12361_name -> node12361 [arrowhead=none, color="black", style=dashed]
    node12361 [shape=box, label=<<font color="black">[0] return -0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12361 -> cluster2102_exit [color="black"]
    node12362_name [shape=none, label=<<font color="black">Block[12362]</font>>]
    node12362_name -> node12362 [arrowhead=none, color="black", style=dashed]
    node12362 [shape=box, label=<<font color="black">[0] (yet &quot;Return the integral Number closest to _n_, preferring the Number closer to +&infin; in the case of a tie.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12362 -> cluster2102_exit [color="black"]
  }
}