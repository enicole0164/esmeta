digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2429 {
    label = "def InitializeTypedArrayFromList(O: Unknown["TypedArray"], values: List[ESValue]): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2429_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2429_entry_name -> cluster2429_entry [arrowhead=none, color="black", style=dashed]
    cluster2429_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2429_entry -> node16823 [color="black"]
    cluster2429_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2429_exit_name -> cluster2429_exit [arrowhead=none, color="black", style=dashed]
    cluster2429_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16823_name [shape=none, label=<<font color="black">Block[16823]</font>>]
    node16823_name -> node16823 [arrowhead=none, color="black", style=dashed]
    node16823 [shape=box, label=<<font color="black">[0] let len = values.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16823 -> node16824 [color="black"]
    node16824_name [shape=none, label=<<font color="black">Call[16824]</font>>]
    node16824_name -> node16824 [arrowhead=none, color="black", style=dashed]
    node16824 [shape=cds, label=<<font color="black">%0 = clo&lt;AllocateTypedArrayBuffer&gt;(O, len)</font>> color="black" fillcolor="white", style=filled]
    node16824 -> node16825 [color="black"]
    node16825_name [shape=none, label=<<font color="black">Block[16825]</font>>]
    node16825_name -> node16825 [arrowhead=none, color="black", style=dashed]
    node16825 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16825 -> node16826 [color="black"]
    node16826_name [shape=none, label=<<font color="black">Branch[16826]</font>>]
    node16826_name -> node16826 [arrowhead=none, color="black", style=dashed]
    node16826 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node16826 -> node16827 [label=<<font color="black">true</font>> color="black"]
    node16826 -> node16831 [label=<<font color="black">false</font>> color="black"]
    node16827_name [shape=none, label=<<font color="black">Call[16827]</font>>]
    node16827_name -> node16827 [arrowhead=none, color="black", style=dashed]
    node16827 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16827 -> node16828 [color="black"]
    node16831_name [shape=none, label=<<font color="black">Block[16831]</font>>]
    node16831_name -> node16831 [arrowhead=none, color="black", style=dashed]
    node16831 [shape=box, label=<<font color="black">[0] assert (yet &quot;_values_ is now an empty List.&quot;)<BR ALIGN="LEFT"/>[1] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16831 -> cluster2429_exit [color="black"]
    node16828_name [shape=none, label=<<font color="black">Block[16828]</font>>]
    node16828_name -> node16828 [arrowhead=none, color="black", style=dashed]
    node16828 [shape=box, label=<<font color="black">[0] let Pk = [! %1]<BR ALIGN="LEFT"/>[1] (yet &quot;Let _kValue_ be the first element of _values_ and remove that element from _values_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16828 -> node16829 [color="black"]
    node16829_name [shape=none, label=<<font color="black">Call[16829]</font>>]
    node16829_name -> node16829 [arrowhead=none, color="black", style=dashed]
    node16829 [shape=cds, label=<<font color="black">%2 = clo&lt;Set&gt;(O, Pk, kValue, true)</font>> color="black" fillcolor="white", style=filled]
    node16829 -> node16830 [color="black"]
    node16830_name [shape=none, label=<<font color="black">Block[16830]</font>>]
    node16830_name -> node16830 [arrowhead=none, color="black", style=dashed]
    node16830 [shape=box, label=<<font color="black">[0] [? %2]<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16830 -> node16826 [color="black"]
  }
}