digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1899 {
    label = "def <CONC>:SourceTextModuleRecord.ExecuteModule(module: SourceTextModuleRecord, capability?: Unknown): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster1899_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1899_entry_name -> cluster1899_entry [arrowhead=none, color="black", style=dashed]
    cluster1899_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1899_entry -> node10464 [color="black"]
    cluster1899_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1899_exit_name -> cluster1899_exit [arrowhead=none, color="black", style=dashed]
    cluster1899_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10464_name [shape=none, label=<<font color="black">Block[10464]</font>>]
    node10464_name -> node10464 [arrowhead=none, color="black", style=dashed]
    node10464 [shape=box, label=<<font color="black">[0] let moduleContext = (new ExecutionContext())[#796]<BR ALIGN="LEFT"/>[1] moduleContext.Function = null<BR ALIGN="LEFT"/>[2] moduleContext.Realm = module.Realm<BR ALIGN="LEFT"/>[3] moduleContext.ScriptOrModule = module<BR ALIGN="LEFT"/>[4] assert (yet &quot;_module_ has been linked and declarations in its module environment have been instantiated.&quot;)<BR ALIGN="LEFT"/>[5] moduleContext.VariableEnvironment = module.Environment<BR ALIGN="LEFT"/>[6] moduleContext.LexicalEnvironment = module.Environment<BR ALIGN="LEFT"/>[7] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10464 -> node10465 [color="black"]
    node10465_name [shape=none, label=<<font color="black">Branch[10465]</font>>]
    node10465_name -> node10465 [arrowhead=none, color="black", style=dashed]
    node10465 [shape=diamond, label=<<font color="black">(= module.HasTLA false)</font>> color="black" fillcolor="white", style=filled]
    node10465 -> node10466 [label=<<font color="black">true</font>> color="black"]
    node10465 -> node10471 [label=<<font color="black">false</font>> color="black"]
    node10466_name [shape=none, label=<<font color="black">Block[10466]</font>>]
    node10466_name -> node10466 [arrowhead=none, color="black", style=dashed]
    node10466 [shape=box, label=<<font color="black">[0] assert (= capability absent)<BR ALIGN="LEFT"/>[1] push moduleContext &gt; @EXECUTION_STACK<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10466 -> node10467 [color="black"]
    node10471_name [shape=none, label=<<font color="black">Block[10471]</font>>]
    node10471_name -> node10471 [arrowhead=none, color="black", style=dashed]
    node10471 [shape=box, label=<<font color="black">[0] assert (? capability: &quot;PromiseCapabilityRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10471 -> node10472 [color="black"]
    node10467_name [shape=none, label=<<font color="black">Call[10467]</font>>]
    node10467_name -> node10467 [arrowhead=none, color="black", style=dashed]
    node10467 [shape=cds, label=<<font color="black">%0 = module.ECMAScriptCode-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node10467 -> node10468 [color="black"]
    node10472_name [shape=none, label=<<font color="black">Call[10472]</font>>]
    node10472_name -> node10472 [arrowhead=none, color="black", style=dashed]
    node10472 [shape=cds, label=<<font color="black">%1 = clo&lt;AsyncBlockStart&gt;(capability, module.ECMAScriptCode, moduleContext)</font>> color="black" fillcolor="white", style=filled]
    node10472 -> node10473 [color="black"]
    node10468_name [shape=none, label=<<font color="black">Block[10468]</font>>]
    node10468_name -> node10468 [arrowhead=none, color="black", style=dashed]
    node10468 [shape=box, label=<<font color="black">[0] let result = %0<BR ALIGN="LEFT"/>[1] (pop &lt; @EXECUTION_STACK)<BR ALIGN="LEFT"/>[2] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10468 -> node10469 [color="black"]
    node10473_name [shape=none, label=<<font color="black">Block[10473]</font>>]
    node10473_name -> node10473 [arrowhead=none, color="black", style=dashed]
    node10473 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10473 -> cluster1899_exit [color="black"]
    node10469_name [shape=none, label=<<font color="black">Branch[10469]</font>>]
    node10469_name -> node10469 [arrowhead=none, color="black", style=dashed]
    node10469 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? result) (! (= result.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node10469 -> node10470 [label=<<font color="black">true</font>> color="black"]
    node10469 -> node10473 [label=<<font color="black">false</font>> color="black"]
    node10470_name [shape=none, label=<<font color="black">Block[10470]</font>>]
    node10470_name -> node10470 [arrowhead=none, color="black", style=dashed]
    node10470 [shape=box, label=<<font color="black">[0] return [? result]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10470 -> cluster1899_exit [color="black"]
  }
}