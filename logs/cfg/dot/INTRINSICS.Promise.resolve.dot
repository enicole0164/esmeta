digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2595 {
    label = "def <BUILTIN>:INTRINSICS.Promise.resolve(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2595_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2595_entry_name -> cluster2595_entry [arrowhead=none, color="black", style=dashed]
    cluster2595_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2595_entry -> node19179 [color="black"]
    cluster2595_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2595_exit_name -> cluster2595_exit [arrowhead=none, color="black", style=dashed]
    cluster2595_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19179_name [shape=none, label=<<font color="black">Branch[19179]</font>>]
    node19179_name -> node19179 [arrowhead=none, color="black", style=dashed]
    node19179 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19179 -> node19180 [label=<<font color="black">true</font>> color="black"]
    node19179 -> node19181 [label=<<font color="black">false</font>> color="black"]
    node19180_name [shape=none, label=<<font color="black">Block[19180]</font>>]
    node19180_name -> node19180 [arrowhead=none, color="black", style=dashed]
    node19180 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19180 -> node19182 [color="black"]
    node19181_name [shape=none, label=<<font color="black">Block[19181]</font>>]
    node19181_name -> node19181 [arrowhead=none, color="black", style=dashed]
    node19181 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19181 -> node19182 [color="black"]
    node19182_name [shape=none, label=<<font color="black">Block[19182]</font>>]
    node19182_name -> node19182 [arrowhead=none, color="black", style=dashed]
    node19182 [shape=box, label=<<font color="black">[0] let C = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19182 -> node19183 [color="black"]
    node19183_name [shape=none, label=<<font color="black">Branch[19183]</font>>]
    node19183_name -> node19183 [arrowhead=none, color="black", style=dashed]
    node19183 [shape=diamond, label=<<font color="black">(! (= (typeof C) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19183 -> node19184 [label=<<font color="black">true</font>> color="black"]
    node19183 -> node19185 [label=<<font color="black">false</font>> color="black"]
    node19184_name [shape=none, label=<<font color="black">Block[19184]</font>>]
    node19184_name -> node19184 [arrowhead=none, color="black", style=dashed]
    node19184 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1303])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19184 -> cluster2595_exit [color="black"]
    node19185_name [shape=none, label=<<font color="black">Call[19185]</font>>]
    node19185_name -> node19185 [arrowhead=none, color="black", style=dashed]
    node19185 [shape=cds, label=<<font color="black">%0 = clo&lt;PromiseResolve&gt;(C, x)</font>> color="black" fillcolor="white", style=filled]
    node19185 -> node19186 [color="black"]
    node19186_name [shape=none, label=<<font color="black">Block[19186]</font>>]
    node19186_name -> node19186 [arrowhead=none, color="black", style=dashed]
    node19186 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19186 -> cluster2595_exit [color="black"]
  }
}