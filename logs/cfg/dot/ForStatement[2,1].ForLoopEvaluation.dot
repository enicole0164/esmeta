digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1428 {
    label = "def <SYNTAX>:ForStatement[2,1].ForLoopEvaluation(this: Ast:ForStatement[2,1], labelSet: Unknown): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1428_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1428_entry_name -> cluster1428_entry [arrowhead=none, color="black", style=dashed]
    cluster1428_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1428_entry -> node7498 [color="black"]
    cluster1428_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1428_exit_name -> cluster1428_exit [arrowhead=none, color="black", style=dashed]
    cluster1428_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node7498_name [shape=none, label=<<font color="black">Block[7498]</font>>]
    node7498_name -> node7498 [arrowhead=none, color="black", style=dashed]
    node7498 [shape=box, label=<<font color="black">[0] let oldEnv = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7498 -> node7499 [color="black"]
    node7499_name [shape=none, label=<<font color="black">Call[7499]</font>>]
    node7499_name -> node7499 [arrowhead=none, color="black", style=dashed]
    node7499 [shape=cds, label=<<font color="black">%0 = clo&lt;NewDeclarativeEnvironment&gt;(oldEnv)</font>> color="black" fillcolor="white", style=filled]
    node7499 -> node7500 [color="black"]
    node7500_name [shape=none, label=<<font color="black">Block[7500]</font>>]
    node7500_name -> node7500 [arrowhead=none, color="black", style=dashed]
    node7500 [shape=box, label=<<font color="black">[0] let loopEnv = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7500 -> node7501 [color="black"]
    node7501_name [shape=none, label=<<font color="black">Call[7501]</font>>]
    node7501_name -> node7501 [arrowhead=none, color="black", style=dashed]
    node7501 [shape=cds, label=<<font color="black">%1 = this[0]-&gt;IsConstantDeclaration()</font>> color="black" fillcolor="white", style=filled]
    node7501 -> node7502 [color="black"]
    node7502_name [shape=none, label=<<font color="black">Block[7502]</font>>]
    node7502_name -> node7502 [arrowhead=none, color="black", style=dashed]
    node7502 [shape=box, label=<<font color="black">[0] let isConst = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7502 -> node7503 [color="black"]
    node7503_name [shape=none, label=<<font color="black">Call[7503]</font>>]
    node7503_name -> node7503 [arrowhead=none, color="black", style=dashed]
    node7503 [shape=cds, label=<<font color="black">%2 = this[0]-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node7503 -> node7504 [color="black"]
    node7504_name [shape=none, label=<<font color="black">Block[7504]</font>>]
    node7504_name -> node7504 [arrowhead=none, color="black", style=dashed]
    node7504 [shape=box, label=<<font color="black">[0] let boundNames = %2<BR ALIGN="LEFT"/>[1] %4 = boundNames<BR ALIGN="LEFT"/>[2] %3 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7504 -> node7505 [color="black"]
    node7505_name [shape=none, label=<<font color="black">Branch[7505]</font>>]
    node7505_name -> node7505 [arrowhead=none, color="black", style=dashed]
    node7505 [shape=diamond, label=<<font color="black">(&lt; %3 %4.length)</font>> color="black" fillcolor="white", style=filled]
    node7505 -> node7506 [label=<<font color="black">true</font>> color="black"]
    node7505 -> node7513 [label=<<font color="black">false</font>> color="black"]
    node7506_name [shape=none, label=<<font color="black">Block[7506]</font>>]
    node7506_name -> node7506 [arrowhead=none, color="black", style=dashed]
    node7506 [shape=box, label=<<font color="black">[0] let dn = %4[%3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7506 -> node7507 [color="black"]
    node7513_name [shape=none, label=<<font color="black">Block[7513]</font>>]
    node7513_name -> node7513 [arrowhead=none, color="black", style=dashed]
    node7513 [shape=box, label=<<font color="black">[0] @EXECUTION_STACK[0].LexicalEnvironment = loopEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7513 -> node7514 [color="black"]
    node7507_name [shape=none, label=<<font color="black">Branch[7507]</font>>]
    node7507_name -> node7507 [arrowhead=none, color="black", style=dashed]
    node7507 [shape=diamond, label=<<font color="black">(= isConst true)</font>> color="black" fillcolor="white", style=filled]
    node7507 -> node7508 [label=<<font color="black">true</font>> color="black"]
    node7507 -> node7510 [label=<<font color="black">false</font>> color="black"]
    node7514_name [shape=none, label=<<font color="black">Call[7514]</font>>]
    node7514_name -> node7514 [arrowhead=none, color="black", style=dashed]
    node7514 [shape=cds, label=<<font color="black">%7 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node7514 -> node7515 [color="black"]
    node7508_name [shape=none, label=<<font color="black">Call[7508]</font>>]
    node7508_name -> node7508 [arrowhead=none, color="black", style=dashed]
    node7508 [shape=cds, label=<<font color="black">%5 = loopEnv-&gt;CreateImmutableBinding(dn, true)</font>> color="black" fillcolor="white", style=filled]
    node7508 -> node7509 [color="black"]
    node7510_name [shape=none, label=<<font color="black">Call[7510]</font>>]
    node7510_name -> node7510 [arrowhead=none, color="black", style=dashed]
    node7510 [shape=cds, label=<<font color="black">%6 = loopEnv-&gt;CreateMutableBinding(dn, false)</font>> color="black" fillcolor="white", style=filled]
    node7510 -> node7511 [color="black"]
    node7515_name [shape=none, label=<<font color="black">Block[7515]</font>>]
    node7515_name -> node7515 [arrowhead=none, color="black", style=dashed]
    node7515 [shape=box, label=<<font color="black">[0] let forDcl = %7<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7515 -> node7516 [color="black"]
    node7509_name [shape=none, label=<<font color="black">Block[7509]</font>>]
    node7509_name -> node7509 [arrowhead=none, color="black", style=dashed]
    node7509 [shape=box, label=<<font color="black">[0] [! %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7509 -> node7512 [color="black"]
    node7511_name [shape=none, label=<<font color="black">Block[7511]</font>>]
    node7511_name -> node7511 [arrowhead=none, color="black", style=dashed]
    node7511 [shape=box, label=<<font color="black">[0] [! %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7511 -> node7512 [color="black"]
    node7516_name [shape=none, label=<<font color="black">Branch[7516]</font>>]
    node7516_name -> node7516 [arrowhead=none, color="black", style=dashed]
    node7516 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? forDcl) (! (= forDcl.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node7516 -> node7517 [label=<<font color="black">true</font>> color="black"]
    node7516 -> node7518 [label=<<font color="black">false</font>> color="black"]
    node7512_name [shape=none, label=<<font color="black">Block[7512]</font>>]
    node7512_name -> node7512 [arrowhead=none, color="black", style=dashed]
    node7512 [shape=box, label=<<font color="black">[0] %3 = (+ %3 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7512 -> node7505 [color="black"]
    node7517_name [shape=none, label=<<font color="black">Block[7517]</font>>]
    node7517_name -> node7517 [arrowhead=none, color="black", style=dashed]
    node7517 [shape=box, label=<<font color="black">[0] @EXECUTION_STACK[0].LexicalEnvironment = oldEnv<BR ALIGN="LEFT"/>[1] return [? forDcl]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7517 -> cluster1428_exit [color="black"]
    node7518_name [shape=none, label=<<font color="black">Branch[7518]</font>>]
    node7518_name -> node7518 [arrowhead=none, color="black", style=dashed]
    node7518 [shape=diamond, label=<<font color="black">(= isConst false)</font>> color="black" fillcolor="white", style=filled]
    node7518 -> node7519 [label=<<font color="black">true</font>> color="black"]
    node7518 -> node7520 [label=<<font color="black">false</font>> color="black"]
    node7519_name [shape=none, label=<<font color="black">Block[7519]</font>>]
    node7519_name -> node7519 [arrowhead=none, color="black", style=dashed]
    node7519 [shape=box, label=<<font color="black">[0] let perIterationLets = boundNames<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7519 -> node7521 [color="black"]
    node7520_name [shape=none, label=<<font color="black">Block[7520]</font>>]
    node7520_name -> node7520 [arrowhead=none, color="black", style=dashed]
    node7520 [shape=box, label=<<font color="black">[0] let perIterationLets = (new [])[#617]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7520 -> node7521 [color="black"]
    node7521_name [shape=none, label=<<font color="black">Call[7521]</font>>]
    node7521_name -> node7521 [arrowhead=none, color="black", style=dashed]
    node7521 [shape=cds, label=<<font color="black">%8 = clo&lt;ForBodyEvaluation&gt;(this[1], this[2], this[3], perIterationLets, labelSet)</font>> color="black" fillcolor="white", style=filled]
    node7521 -> node7522 [color="black"]
    node7522_name [shape=none, label=<<font color="black">Call[7522]</font>>]
    node7522_name -> node7522 [arrowhead=none, color="black", style=dashed]
    node7522 [shape=cds, label=<<font color="black">%9 = clo&lt;Completion&gt;(%8)</font>> color="black" fillcolor="white", style=filled]
    node7522 -> node7523 [color="black"]
    node7523_name [shape=none, label=<<font color="black">Block[7523]</font>>]
    node7523_name -> node7523 [arrowhead=none, color="black", style=dashed]
    node7523 [shape=box, label=<<font color="black">[0] let bodyResult = %9<BR ALIGN="LEFT"/>[1] @EXECUTION_STACK[0].LexicalEnvironment = oldEnv<BR ALIGN="LEFT"/>[2] return [? bodyResult]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7523 -> cluster1428_exit [color="black"]
  }
}