digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2533 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.add(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2533_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2533_entry_name -> cluster2533_entry [arrowhead=none, color="black", style=dashed]
    cluster2533_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2533_entry -> node18005 [color="black"]
    cluster2533_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2533_exit_name -> cluster2533_exit [arrowhead=none, color="black", style=dashed]
    cluster2533_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18005_name [shape=none, label=<<font color="black">Branch[18005]</font>>]
    node18005_name -> node18005 [arrowhead=none, color="black", style=dashed]
    node18005 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18005 -> node18006 [label=<<font color="black">true</font>> color="black"]
    node18005 -> node18007 [label=<<font color="black">false</font>> color="black"]
    node18006_name [shape=none, label=<<font color="black">Block[18006]</font>>]
    node18006_name -> node18006 [arrowhead=none, color="black", style=dashed]
    node18006 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18006 -> node18008 [color="black"]
    node18007_name [shape=none, label=<<font color="black">Block[18007]</font>>]
    node18007_name -> node18007 [arrowhead=none, color="black", style=dashed]
    node18007 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18007 -> node18008 [color="black"]
    node18008_name [shape=none, label=<<font color="black">Branch[18008]</font>>]
    node18008_name -> node18008 [arrowhead=none, color="black", style=dashed]
    node18008 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18008 -> node18009 [label=<<font color="black">true</font>> color="black"]
    node18008 -> node18010 [label=<<font color="black">false</font>> color="black"]
    node18009_name [shape=none, label=<<font color="black">Block[18009]</font>>]
    node18009_name -> node18009 [arrowhead=none, color="black", style=dashed]
    node18009 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18009 -> node18011 [color="black"]
    node18010_name [shape=none, label=<<font color="black">Block[18010]</font>>]
    node18010_name -> node18010 [arrowhead=none, color="black", style=dashed]
    node18010 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18010 -> node18011 [color="black"]
    node18011_name [shape=none, label=<<font color="black">Branch[18011]</font>>]
    node18011_name -> node18011 [arrowhead=none, color="black", style=dashed]
    node18011 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18011 -> node18012 [label=<<font color="black">true</font>> color="black"]
    node18011 -> node18013 [label=<<font color="black">false</font>> color="black"]
    node18012_name [shape=none, label=<<font color="black">Block[18012]</font>>]
    node18012_name -> node18012 [arrowhead=none, color="black", style=dashed]
    node18012 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18012 -> node18014 [color="black"]
    node18013_name [shape=none, label=<<font color="black">Block[18013]</font>>]
    node18013_name -> node18013 [arrowhead=none, color="black", style=dashed]
    node18013 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18013 -> node18014 [color="black"]
    node18014_name [shape=none, label=<<font color="black">Call[18014]</font>>]
    node18014_name -> node18014 [arrowhead=none, color="black", style=dashed]
    node18014 [shape=cds, label=<<font color="black">%0 = clo&lt;TypedArrayElementType&gt;(typedArray)</font>> color="black" fillcolor="white", style=filled]
    node18014 -> node18015 [color="black"]
    node18015_name [shape=none, label=<<font color="black">Block[18015]</font>>]
    node18015_name -> node18015 [arrowhead=none, color="black", style=dashed]
    node18015 [shape=box, label=<<font color="black">[0] let type = %0<BR ALIGN="LEFT"/>[1] (yet &quot;Let _isLittleEndian_ be the value of the [[LittleEndian]] field of the surrounding agent's Agent Record.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _add_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures _type_ and _isLittleEndian_ and performs the following steps atomically when called:\n  1. Let _x_ be RawBytesToNumeric(_type_, _xBytes_, _isLittleEndian_).\n  1. Let _y_ be RawBytesToNumeric(_type_, _yBytes_, _isLittleEndian_).\n  1. If Type(_x_) is Number, then\n    1. Let _sum_ be Number::add(_x_, _y_).\n  1. Else,\n    1. Assert: Type(_x_) is BigInt.\n    1. Let _sum_ be BigInt::add(_x_, _y_).\n  1. Let _sumBytes_ be NumericToRawBytes(_type_, _sum_, _isLittleEndian_).\n  1. Assert: _sumBytes_, _xBytes_, and _yBytes_ have the same number of elements..\n  1. Return _sumBytes_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18015 -> node18016 [color="black"]
    node18016_name [shape=none, label=<<font color="black">Call[18016]</font>>]
    node18016_name -> node18016 [arrowhead=none, color="black", style=dashed]
    node18016 [shape=cds, label=<<font color="black">%1 = clo&lt;AtomicReadModifyWrite&gt;(typedArray, index, value, add)</font>> color="black" fillcolor="white", style=filled]
    node18016 -> node18017 [color="black"]
    node18017_name [shape=none, label=<<font color="black">Block[18017]</font>>]
    node18017_name -> node18017 [arrowhead=none, color="black", style=dashed]
    node18017 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18017 -> cluster2533_exit [color="black"]
  }
}