digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2658 {
    label = "def <BUILTIN>:INTRINSICS.Reflect.setPrototypeOf(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2658_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2658_entry_name -> cluster2658_entry [arrowhead=none, color="black", style=dashed]
    cluster2658_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2658_entry -> node19795 [color="black"]
    cluster2658_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2658_exit_name -> cluster2658_exit [arrowhead=none, color="black", style=dashed]
    cluster2658_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19795_name [shape=none, label=<<font color="black">Branch[19795]</font>>]
    node19795_name -> node19795 [arrowhead=none, color="black", style=dashed]
    node19795 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19795 -> node19796 [label=<<font color="black">true</font>> color="black"]
    node19795 -> node19797 [label=<<font color="black">false</font>> color="black"]
    node19796_name [shape=none, label=<<font color="black">Block[19796]</font>>]
    node19796_name -> node19796 [arrowhead=none, color="black", style=dashed]
    node19796 [shape=box, label=<<font color="black">[0] let target = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19796 -> node19798 [color="black"]
    node19797_name [shape=none, label=<<font color="black">Block[19797]</font>>]
    node19797_name -> node19797 [arrowhead=none, color="black", style=dashed]
    node19797 [shape=box, label=<<font color="black">[0] let target = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19797 -> node19798 [color="black"]
    node19798_name [shape=none, label=<<font color="black">Branch[19798]</font>>]
    node19798_name -> node19798 [arrowhead=none, color="black", style=dashed]
    node19798 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19798 -> node19799 [label=<<font color="black">true</font>> color="black"]
    node19798 -> node19800 [label=<<font color="black">false</font>> color="black"]
    node19799_name [shape=none, label=<<font color="black">Block[19799]</font>>]
    node19799_name -> node19799 [arrowhead=none, color="black", style=dashed]
    node19799 [shape=box, label=<<font color="black">[0] let proto = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19799 -> node19801 [color="black"]
    node19800_name [shape=none, label=<<font color="black">Block[19800]</font>>]
    node19800_name -> node19800 [arrowhead=none, color="black", style=dashed]
    node19800 [shape=box, label=<<font color="black">[0] let proto = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19800 -> node19801 [color="black"]
    node19801_name [shape=none, label=<<font color="black">Branch[19801]</font>>]
    node19801_name -> node19801 [arrowhead=none, color="black", style=dashed]
    node19801 [shape=diamond, label=<<font color="black">(! (= (typeof target) @Object))</font>> color="black" fillcolor="white", style=filled]
    node19801 -> node19802 [label=<<font color="black">true</font>> color="black"]
    node19801 -> node19803 [label=<<font color="black">false</font>> color="black"]
    node19802_name [shape=none, label=<<font color="black">Block[19802]</font>>]
    node19802_name -> node19802 [arrowhead=none, color="black", style=dashed]
    node19802 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1356])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19802 -> cluster2658_exit [color="black"]
    node19803_name [shape=none, label=<<font color="black">Branch[19803]</font>>]
    node19803_name -> node19803 [arrowhead=none, color="black", style=dashed]
    node19803 [shape=diamond, label=<<font color="black">(&amp;&amp; (! (= (typeof proto) @Object)) (! (= proto null)))</font>> color="black" fillcolor="white", style=filled]
    node19803 -> node19804 [label=<<font color="black">true</font>> color="black"]
    node19803 -> node19805 [label=<<font color="black">false</font>> color="black"]
    node19804_name [shape=none, label=<<font color="black">Block[19804]</font>>]
    node19804_name -> node19804 [arrowhead=none, color="black", style=dashed]
    node19804 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1357])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19804 -> cluster2658_exit [color="black"]
    node19805_name [shape=none, label=<<font color="black">Call[19805]</font>>]
    node19805_name -> node19805 [arrowhead=none, color="black", style=dashed]
    node19805 [shape=cds, label=<<font color="black">%0 = target-&gt;SetPrototypeOf(proto)</font>> color="black" fillcolor="white", style=filled]
    node19805 -> node19806 [color="black"]
    node19806_name [shape=none, label=<<font color="black">Block[19806]</font>>]
    node19806_name -> node19806 [arrowhead=none, color="black", style=dashed]
    node19806 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19806 -> cluster2658_exit [color="black"]
  }
}