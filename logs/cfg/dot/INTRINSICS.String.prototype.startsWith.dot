digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2192 {
    label = "def <BUILTIN>:INTRINSICS.String.prototype.startsWith(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2192_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2192_entry_name -> cluster2192_entry [arrowhead=none, color="black", style=dashed]
    cluster2192_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2192_entry -> node13751 [color="black"]
    cluster2192_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2192_exit_name -> cluster2192_exit [arrowhead=none, color="black", style=dashed]
    cluster2192_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node13751_name [shape=none, label=<<font color="black">Branch[13751]</font>>]
    node13751_name -> node13751 [arrowhead=none, color="black", style=dashed]
    node13751 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13751 -> node13752 [label=<<font color="black">true</font>> color="black"]
    node13751 -> node13753 [label=<<font color="black">false</font>> color="black"]
    node13752_name [shape=none, label=<<font color="black">Block[13752]</font>>]
    node13752_name -> node13752 [arrowhead=none, color="black", style=dashed]
    node13752 [shape=box, label=<<font color="black">[0] let searchString = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13752 -> node13754 [color="black"]
    node13753_name [shape=none, label=<<font color="black">Block[13753]</font>>]
    node13753_name -> node13753 [arrowhead=none, color="black", style=dashed]
    node13753 [shape=box, label=<<font color="black">[0] let searchString = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13753 -> node13754 [color="black"]
    node13754_name [shape=none, label=<<font color="black">Branch[13754]</font>>]
    node13754_name -> node13754 [arrowhead=none, color="black", style=dashed]
    node13754 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node13754 -> node13755 [label=<<font color="black">true</font>> color="black"]
    node13754 -> node13756 [label=<<font color="black">false</font>> color="black"]
    node13755_name [shape=none, label=<<font color="black">Block[13755]</font>>]
    node13755_name -> node13755 [arrowhead=none, color="black", style=dashed]
    node13755 [shape=box, label=<<font color="black">[0] let position = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13755 -> node13757 [color="black"]
    node13756_name [shape=none, label=<<font color="black">Block[13756]</font>>]
    node13756_name -> node13756 [arrowhead=none, color="black", style=dashed]
    node13756 [shape=box, label=<<font color="black">[0] let position = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13756 -> node13757 [color="black"]
    node13757_name [shape=none, label=<<font color="black">Call[13757]</font>>]
    node13757_name -> node13757 [arrowhead=none, color="black", style=dashed]
    node13757 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireObjectCoercible&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node13757 -> node13758 [color="black"]
    node13758_name [shape=none, label=<<font color="black">Block[13758]</font>>]
    node13758_name -> node13758 [arrowhead=none, color="black", style=dashed]
    node13758 [shape=box, label=<<font color="black">[0] let O = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13758 -> node13759 [color="black"]
    node13759_name [shape=none, label=<<font color="black">Call[13759]</font>>]
    node13759_name -> node13759 [arrowhead=none, color="black", style=dashed]
    node13759 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node13759 -> node13760 [color="black"]
    node13760_name [shape=none, label=<<font color="black">Block[13760]</font>>]
    node13760_name -> node13760 [arrowhead=none, color="black", style=dashed]
    node13760 [shape=box, label=<<font color="black">[0] let S = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13760 -> node13761 [color="black"]
    node13761_name [shape=none, label=<<font color="black">Call[13761]</font>>]
    node13761_name -> node13761 [arrowhead=none, color="black", style=dashed]
    node13761 [shape=cds, label=<<font color="black">%2 = clo&lt;IsRegExp&gt;(searchString)</font>> color="black" fillcolor="white", style=filled]
    node13761 -> node13762 [color="black"]
    node13762_name [shape=none, label=<<font color="black">Block[13762]</font>>]
    node13762_name -> node13762 [arrowhead=none, color="black", style=dashed]
    node13762 [shape=box, label=<<font color="black">[0] let isRegExp = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13762 -> node13763 [color="black"]
    node13763_name [shape=none, label=<<font color="black">Branch[13763]</font>>]
    node13763_name -> node13763 [arrowhead=none, color="black", style=dashed]
    node13763 [shape=diamond, label=<<font color="black">(= isRegExp true)</font>> color="black" fillcolor="white", style=filled]
    node13763 -> node13764 [label=<<font color="black">true</font>> color="black"]
    node13763 -> node13765 [label=<<font color="black">false</font>> color="black"]
    node13764_name [shape=none, label=<<font color="black">Block[13764]</font>>]
    node13764_name -> node13764 [arrowhead=none, color="black", style=dashed]
    node13764 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#971])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13764 -> cluster2192_exit [color="black"]
    node13765_name [shape=none, label=<<font color="black">Call[13765]</font>>]
    node13765_name -> node13765 [arrowhead=none, color="black", style=dashed]
    node13765 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(searchString)</font>> color="black" fillcolor="white", style=filled]
    node13765 -> node13766 [color="black"]
    node13766_name [shape=none, label=<<font color="black">Block[13766]</font>>]
    node13766_name -> node13766 [arrowhead=none, color="black", style=dashed]
    node13766 [shape=box, label=<<font color="black">[0] let searchStr = [? %3]<BR ALIGN="LEFT"/>[1] let len = S.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13766 -> node13767 [color="black"]
    node13767_name [shape=none, label=<<font color="black">Branch[13767]</font>>]
    node13767_name -> node13767 [arrowhead=none, color="black", style=dashed]
    node13767 [shape=diamond, label=<<font color="black">(= position undefined)</font>> color="black" fillcolor="white", style=filled]
    node13767 -> node13768 [label=<<font color="black">true</font>> color="black"]
    node13767 -> node13769 [label=<<font color="black">false</font>> color="black"]
    node13768_name [shape=none, label=<<font color="black">Block[13768]</font>>]
    node13768_name -> node13768 [arrowhead=none, color="black", style=dashed]
    node13768 [shape=box, label=<<font color="black">[0] let pos = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13768 -> node13771 [color="black"]
    node13769_name [shape=none, label=<<font color="black">Call[13769]</font>>]
    node13769_name -> node13769 [arrowhead=none, color="black", style=dashed]
    node13769 [shape=cds, label=<<font color="black">%4 = clo&lt;ToIntegerOrInfinity&gt;(position)</font>> color="black" fillcolor="white", style=filled]
    node13769 -> node13770 [color="black"]
    node13771_name [shape=none, label=<<font color="black">Block[13771]</font>>]
    node13771_name -> node13771 [arrowhead=none, color="black", style=dashed]
    node13771 [shape=box, label=<<font color="black">[0] let start = (clamp pos 0 len)<BR ALIGN="LEFT"/>[1] let searchLength = searchStr.length<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13771 -> node13772 [color="black"]
    node13770_name [shape=none, label=<<font color="black">Block[13770]</font>>]
    node13770_name -> node13770 [arrowhead=none, color="black", style=dashed]
    node13770 [shape=box, label=<<font color="black">[0] let pos = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13770 -> node13771 [color="black"]
    node13772_name [shape=none, label=<<font color="black">Branch[13772]</font>>]
    node13772_name -> node13772 [arrowhead=none, color="black", style=dashed]
    node13772 [shape=diamond, label=<<font color="black">(== searchLength 0)</font>> color="black" fillcolor="white", style=filled]
    node13772 -> node13773 [label=<<font color="black">true</font>> color="black"]
    node13772 -> node13774 [label=<<font color="black">false</font>> color="black"]
    node13773_name [shape=none, label=<<font color="black">Block[13773]</font>>]
    node13773_name -> node13773 [arrowhead=none, color="black", style=dashed]
    node13773 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13773 -> cluster2192_exit [color="black"]
    node13774_name [shape=none, label=<<font color="black">Block[13774]</font>>]
    node13774_name -> node13774 [arrowhead=none, color="black", style=dashed]
    node13774 [shape=box, label=<<font color="black">[0] let end = (+ start searchLength)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13774 -> node13775 [color="black"]
    node13775_name [shape=none, label=<<font color="black">Branch[13775]</font>>]
    node13775_name -> node13775 [arrowhead=none, color="black", style=dashed]
    node13775 [shape=diamond, label=<<font color="black">(&lt; len end)</font>> color="black" fillcolor="white", style=filled]
    node13775 -> node13776 [label=<<font color="black">true</font>> color="black"]
    node13775 -> node13777 [label=<<font color="black">false</font>> color="black"]
    node13776_name [shape=none, label=<<font color="black">Block[13776]</font>>]
    node13776_name -> node13776 [arrowhead=none, color="black", style=dashed]
    node13776 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13776 -> cluster2192_exit [color="black"]
    node13777_name [shape=none, label=<<font color="black">Block[13777]</font>>]
    node13777_name -> node13777 [arrowhead=none, color="black", style=dashed]
    node13777 [shape=box, label=<<font color="black">[0] let substring = (substring S start end)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13777 -> node13778 [color="black"]
    node13778_name [shape=none, label=<<font color="black">Call[13778]</font>>]
    node13778_name -> node13778 [arrowhead=none, color="black", style=dashed]
    node13778 [shape=cds, label=<<font color="black">%5 = clo&lt;SameValueNonNumeric&gt;(substring, searchStr)</font>> color="black" fillcolor="white", style=filled]
    node13778 -> node13779 [color="black"]
    node13779_name [shape=none, label=<<font color="black">Block[13779]</font>>]
    node13779_name -> node13779 [arrowhead=none, color="black", style=dashed]
    node13779 [shape=box, label=<<font color="black">[0] return %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13779 -> cluster2192_exit [color="black"]
  }
}