digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2419 {
    label = "def <BUILTIN>:INTRINSICS.get TypedArray.prototype[@@toStringTag](this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2419_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2419_entry_name -> cluster2419_entry [arrowhead=none, color="black", style=dashed]
    cluster2419_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2419_entry -> node16688 [color="black"]
    cluster2419_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2419_exit_name -> cluster2419_exit [arrowhead=none, color="black", style=dashed]
    cluster2419_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16688_name [shape=none, label=<<font color="black">Block[16688]</font>>]
    node16688_name -> node16688 [arrowhead=none, color="black", style=dashed]
    node16688 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16688 -> node16689 [color="black"]
    node16689_name [shape=none, label=<<font color="black">Branch[16689]</font>>]
    node16689_name -> node16689 [arrowhead=none, color="black", style=dashed]
    node16689 [shape=diamond, label=<<font color="black">(! (= (typeof O) @Object))</font>> color="black" fillcolor="white", style=filled]
    node16689 -> node16690 [label=<<font color="black">true</font>> color="black"]
    node16689 -> node16691 [label=<<font color="black">false</font>> color="black"]
    node16690_name [shape=none, label=<<font color="black">Block[16690]</font>>]
    node16690_name -> node16690 [arrowhead=none, color="black", style=dashed]
    node16690 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16690 -> cluster2419_exit [color="black"]
    node16691_name [shape=none, label=<<font color="black">Branch[16691]</font>>]
    node16691_name -> node16691 [arrowhead=none, color="black", style=dashed]
    node16691 [shape=diamond, label=<<font color="black">(= O.TypedArrayName absent)</font>> color="black" fillcolor="white", style=filled]
    node16691 -> node16692 [label=<<font color="black">true</font>> color="black"]
    node16691 -> node16693 [label=<<font color="black">false</font>> color="black"]
    node16692_name [shape=none, label=<<font color="black">Block[16692]</font>>]
    node16692_name -> node16692 [arrowhead=none, color="black", style=dashed]
    node16692 [shape=box, label=<<font color="black">[0] return undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16692 -> cluster2419_exit [color="black"]
    node16693_name [shape=none, label=<<font color="black">Block[16693]</font>>]
    node16693_name -> node16693 [arrowhead=none, color="black", style=dashed]
    node16693 [shape=box, label=<<font color="black">[0] let name = O.TypedArrayName<BR ALIGN="LEFT"/>[1] assert (= (typeof name) @String)<BR ALIGN="LEFT"/>[2] return name<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16693 -> cluster2419_exit [color="black"]
  }
}