digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2532 {
    label = "def ByteListEqual(xBytes: Unknown["ListOfByteValues"], yBytes: Unknown["ListOfByteValues"]): Boolean"
    style = rounded
    cluster2532_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2532_entry_name -> cluster2532_entry [arrowhead=none, color="black", style=dashed]
    cluster2532_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2532_entry -> node17998 [color="black"]
    cluster2532_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2532_exit_name -> cluster2532_exit [arrowhead=none, color="black", style=dashed]
    cluster2532_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17998_name [shape=none, label=<<font color="black">Block[17998]</font>>]
    node17998_name -> node17998 [arrowhead=none, color="black", style=dashed]
    node17998 [shape=box, label=<<font color="black">[0] (yet &quot;If _xBytes_ and _yBytes_ do not have the same number of elements, return *false*.&quot;)<BR ALIGN="LEFT"/>[1] let i = 0<BR ALIGN="LEFT"/>[2] %1 = xBytes<BR ALIGN="LEFT"/>[3] %0 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17998 -> node17999 [color="black"]
    node17999_name [shape=none, label=<<font color="black">Branch[17999]</font>>]
    node17999_name -> node17999 [arrowhead=none, color="black", style=dashed]
    node17999 [shape=diamond, label=<<font color="black">(&lt; %0 %1.length)</font>> color="black" fillcolor="white", style=filled]
    node17999 -> node18000 [label=<<font color="black">true</font>> color="black"]
    node17999 -> node18004 [label=<<font color="black">false</font>> color="black"]
    node18000_name [shape=none, label=<<font color="black">Block[18000]</font>>]
    node18000_name -> node18000 [arrowhead=none, color="black", style=dashed]
    node18000 [shape=box, label=<<font color="black">[0] let xByte = %1[%0]<BR ALIGN="LEFT"/>[1] let yByte = yBytes[i]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18000 -> node18001 [color="black"]
    node18004_name [shape=none, label=<<font color="black">Block[18004]</font>>]
    node18004_name -> node18004 [arrowhead=none, color="black", style=dashed]
    node18004 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18004 -> cluster2532_exit [color="black"]
    node18001_name [shape=none, label=<<font color="black">Branch[18001]</font>>]
    node18001_name -> node18001 [arrowhead=none, color="black", style=dashed]
    node18001 [shape=diamond, label=<<font color="black">(! (== xByte yByte))</font>> color="black" fillcolor="white", style=filled]
    node18001 -> node18002 [label=<<font color="black">true</font>> color="black"]
    node18001 -> node18003 [label=<<font color="black">false</font>> color="black"]
    node18002_name [shape=none, label=<<font color="black">Block[18002]</font>>]
    node18002_name -> node18002 [arrowhead=none, color="black", style=dashed]
    node18002 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18002 -> cluster2532_exit [color="black"]
    node18003_name [shape=none, label=<<font color="black">Block[18003]</font>>]
    node18003_name -> node18003 [arrowhead=none, color="black", style=dashed]
    node18003 [shape=box, label=<<font color="black">[0] i = (+ i 1)<BR ALIGN="LEFT"/>[1] %0 = (+ %0 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18003 -> node17999 [color="black"]
  }
}