digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1161 {
    label = "def <INTERNAL>:ProxyExoticObject.Call(O: ProxyExoticObject, thisArgument: ESValue, argumentsList: List[ESValue]): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1161_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1161_entry_name -> cluster1161_entry [arrowhead=none, color="black", style=dashed]
    cluster1161_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1161_entry -> node5311 [color="black"]
    cluster1161_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1161_exit_name -> cluster1161_exit [arrowhead=none, color="black", style=dashed]
    cluster1161_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node5311_name [shape=none, label=<<font color="black">Block[5311]</font>>]
    node5311_name -> node5311 [arrowhead=none, color="black", style=dashed]
    node5311 [shape=box, label=<<font color="black">[0] let handler = O.ProxyHandler<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5311 -> node5312 [color="black"]
    node5312_name [shape=none, label=<<font color="black">Branch[5312]</font>>]
    node5312_name -> node5312 [arrowhead=none, color="black", style=dashed]
    node5312 [shape=diamond, label=<<font color="black">(= handler null)</font>> color="black" fillcolor="white", style=filled]
    node5312 -> node5313 [label=<<font color="black">true</font>> color="black"]
    node5312 -> node5314 [label=<<font color="black">false</font>> color="black"]
    node5313_name [shape=none, label=<<font color="black">Block[5313]</font>>]
    node5313_name -> node5313 [arrowhead=none, color="black", style=dashed]
    node5313 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#533])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5313 -> cluster1161_exit [color="black"]
    node5314_name [shape=none, label=<<font color="black">Block[5314]</font>>]
    node5314_name -> node5314 [arrowhead=none, color="black", style=dashed]
    node5314 [shape=box, label=<<font color="black">[0] assert (= (typeof handler) @Object)<BR ALIGN="LEFT"/>[1] let target = O.ProxyTarget<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5314 -> node5315 [color="black"]
    node5315_name [shape=none, label=<<font color="black">Call[5315]</font>>]
    node5315_name -> node5315 [arrowhead=none, color="black", style=dashed]
    node5315 [shape=cds, label=<<font color="black">%0 = clo&lt;GetMethod&gt;(handler, &quot;apply&quot;)</font>> color="black" fillcolor="white", style=filled]
    node5315 -> node5316 [color="black"]
    node5316_name [shape=none, label=<<font color="black">Block[5316]</font>>]
    node5316_name -> node5316 [arrowhead=none, color="black", style=dashed]
    node5316 [shape=box, label=<<font color="black">[0] let trap = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5316 -> node5317 [color="black"]
    node5317_name [shape=none, label=<<font color="black">Branch[5317]</font>>]
    node5317_name -> node5317 [arrowhead=none, color="black", style=dashed]
    node5317 [shape=diamond, label=<<font color="black">(= trap undefined)</font>> color="black" fillcolor="white", style=filled]
    node5317 -> node5318 [label=<<font color="black">true</font>> color="black"]
    node5317 -> node5320 [label=<<font color="black">false</font>> color="black"]
    node5318_name [shape=none, label=<<font color="black">Call[5318]</font>>]
    node5318_name -> node5318 [arrowhead=none, color="black", style=dashed]
    node5318 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(target, thisArgument, argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node5318 -> node5319 [color="black"]
    node5320_name [shape=none, label=<<font color="black">Call[5320]</font>>]
    node5320_name -> node5320 [arrowhead=none, color="black", style=dashed]
    node5320 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateArrayFromList&gt;(argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node5320 -> node5321 [color="black"]
    node5319_name [shape=none, label=<<font color="black">Block[5319]</font>>]
    node5319_name -> node5319 [arrowhead=none, color="black", style=dashed]
    node5319 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5319 -> cluster1161_exit [color="black"]
    node5321_name [shape=none, label=<<font color="black">Block[5321]</font>>]
    node5321_name -> node5321 [arrowhead=none, color="black", style=dashed]
    node5321 [shape=box, label=<<font color="black">[0] let argArray = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5321 -> node5322 [color="black"]
    node5322_name [shape=none, label=<<font color="black">Call[5322]</font>>]
    node5322_name -> node5322 [arrowhead=none, color="black", style=dashed]
    node5322 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(trap, handler, (new [target, thisArgument, argArray])[#534])</font>> color="black" fillcolor="white", style=filled]
    node5322 -> node5323 [color="black"]
    node5323_name [shape=none, label=<<font color="black">Block[5323]</font>>]
    node5323_name -> node5323 [arrowhead=none, color="black", style=dashed]
    node5323 [shape=box, label=<<font color="black">[0] return [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node5323 -> cluster1161_exit [color="black"]
  }
}