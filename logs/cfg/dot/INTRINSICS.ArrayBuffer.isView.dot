digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2484 {
    label = "def <BUILTIN>:INTRINSICS.ArrayBuffer.isView(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2484_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2484_entry_name -> cluster2484_entry [arrowhead=none, color="black", style=dashed]
    cluster2484_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2484_entry -> node17474 [color="black"]
    cluster2484_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2484_exit_name -> cluster2484_exit [arrowhead=none, color="black", style=dashed]
    cluster2484_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17474_name [shape=none, label=<<font color="black">Branch[17474]</font>>]
    node17474_name -> node17474 [arrowhead=none, color="black", style=dashed]
    node17474 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node17474 -> node17475 [label=<<font color="black">true</font>> color="black"]
    node17474 -> node17476 [label=<<font color="black">false</font>> color="black"]
    node17475_name [shape=none, label=<<font color="black">Block[17475]</font>>]
    node17475_name -> node17475 [arrowhead=none, color="black", style=dashed]
    node17475 [shape=box, label=<<font color="black">[0] let arg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17475 -> node17477 [color="black"]
    node17476_name [shape=none, label=<<font color="black">Block[17476]</font>>]
    node17476_name -> node17476 [arrowhead=none, color="black", style=dashed]
    node17476 [shape=box, label=<<font color="black">[0] let arg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17476 -> node17477 [color="black"]
    node17477_name [shape=none, label=<<font color="black">Branch[17477]</font>>]
    node17477_name -> node17477 [arrowhead=none, color="black", style=dashed]
    node17477 [shape=diamond, label=<<font color="black">(! (= (typeof arg) @Object))</font>> color="black" fillcolor="white", style=filled]
    node17477 -> node17478 [label=<<font color="black">true</font>> color="black"]
    node17477 -> node17479 [label=<<font color="black">false</font>> color="black"]
    node17478_name [shape=none, label=<<font color="black">Block[17478]</font>>]
    node17478_name -> node17478 [arrowhead=none, color="black", style=dashed]
    node17478 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17478 -> cluster2484_exit [color="black"]
    node17479_name [shape=none, label=<<font color="black">Branch[17479]</font>>]
    node17479_name -> node17479 [arrowhead=none, color="black", style=dashed]
    node17479 [shape=diamond, label=<<font color="black">(! (= arg.ViewedArrayBuffer absent))</font>> color="black" fillcolor="white", style=filled]
    node17479 -> node17480 [label=<<font color="black">true</font>> color="black"]
    node17479 -> node17481 [label=<<font color="black">false</font>> color="black"]
    node17480_name [shape=none, label=<<font color="black">Block[17480]</font>>]
    node17480_name -> node17480 [arrowhead=none, color="black", style=dashed]
    node17480 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17480 -> cluster2484_exit [color="black"]
    node17481_name [shape=none, label=<<font color="black">Block[17481]</font>>]
    node17481_name -> node17481 [arrowhead=none, color="black", style=dashed]
    node17481 [shape=box, label=<<font color="black">[0] return false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17481 -> cluster2484_exit [color="black"]
  }
}