digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2081 {
    label = "def <BUILTIN>:INTRINSICS.Math.atan(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2081_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2081_entry_name -> cluster2081_entry [arrowhead=none, color="black", style=dashed]
    cluster2081_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2081_entry -> node12053 [color="black"]
    cluster2081_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2081_exit_name -> cluster2081_exit [arrowhead=none, color="black", style=dashed]
    cluster2081_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12053_name [shape=none, label=<<font color="black">Branch[12053]</font>>]
    node12053_name -> node12053 [arrowhead=none, color="black", style=dashed]
    node12053 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12053 -> node12054 [label=<<font color="black">true</font>> color="black"]
    node12053 -> node12055 [label=<<font color="black">false</font>> color="black"]
    node12054_name [shape=none, label=<<font color="black">Block[12054]</font>>]
    node12054_name -> node12054 [arrowhead=none, color="black", style=dashed]
    node12054 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12054 -> node12056 [color="black"]
    node12055_name [shape=none, label=<<font color="black">Block[12055]</font>>]
    node12055_name -> node12055 [arrowhead=none, color="black", style=dashed]
    node12055 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12055 -> node12056 [color="black"]
    node12056_name [shape=none, label=<<font color="black">Call[12056]</font>>]
    node12056_name -> node12056 [arrowhead=none, color="black", style=dashed]
    node12056 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12056 -> node12057 [color="black"]
    node12057_name [shape=none, label=<<font color="black">Block[12057]</font>>]
    node12057_name -> node12057 [arrowhead=none, color="black", style=dashed]
    node12057 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12057 -> node12058 [color="black"]
    node12058_name [shape=none, label=<<font color="black">Branch[12058]</font>>]
    node12058_name -> node12058 [arrowhead=none, color="black", style=dashed]
    node12058 [shape=diamond, label=<<font color="black">(|| (= n NaN) (|| (= n 0.0f) (= n -0.0f)))</font>> color="black" fillcolor="white", style=filled]
    node12058 -> node12059 [label=<<font color="black">true</font>> color="black"]
    node12058 -> node12060 [label=<<font color="black">false</font>> color="black"]
    node12059_name [shape=none, label=<<font color="black">Block[12059]</font>>]
    node12059_name -> node12059 [arrowhead=none, color="black", style=dashed]
    node12059 [shape=box, label=<<font color="black">[0] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12059 -> cluster2081_exit [color="black"]
    node12060_name [shape=none, label=<<font color="black">Branch[12060]</font>>]
    node12060_name -> node12060 [arrowhead=none, color="black", style=dashed]
    node12060 [shape=diamond, label=<<font color="black">(= n +INF)</font>> color="black" fillcolor="white", style=filled]
    node12060 -> node12061 [label=<<font color="black">true</font>> color="black"]
    node12060 -> node12062 [label=<<font color="black">false</font>> color="black"]
    node12061_name [shape=none, label=<<font color="black">Block[12061]</font>>]
    node12061_name -> node12061 [arrowhead=none, color="black", style=dashed]
    node12061 [shape=box, label=<<font color="black">[0] return ([approx-number] (/ @MATH_PI 2))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12061 -> cluster2081_exit [color="black"]
    node12062_name [shape=none, label=<<font color="black">Branch[12062]</font>>]
    node12062_name -> node12062 [arrowhead=none, color="black", style=dashed]
    node12062 [shape=diamond, label=<<font color="black">(= n -INF)</font>> color="black" fillcolor="white", style=filled]
    node12062 -> node12063 [label=<<font color="black">true</font>> color="black"]
    node12062 -> node12064 [label=<<font color="black">false</font>> color="black"]
    node12063_name [shape=none, label=<<font color="black">Block[12063]</font>>]
    node12063_name -> node12063 [arrowhead=none, color="black", style=dashed]
    node12063 [shape=box, label=<<font color="black">[0] return ([approx-number] (/ (- @MATH_PI) 2))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12063 -> cluster2081_exit [color="black"]
    node12064_name [shape=none, label=<<font color="black">Block[12064]</font>>]
    node12064_name -> node12064 [arrowhead=none, color="black", style=dashed]
    node12064 [shape=box, label=<<font color="black">[0] return ([approx-number] ([math:atan] ([math] n)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12064 -> cluster2081_exit [color="black"]
  }
}