digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1600 {
    label = "def <SYNTAX>:GeneratorBody[0,0].EvaluateGeneratorBody(this: Ast:GeneratorBody[0,0], functionObject: Unknown, argumentsList: Unknown["List"]): Abrupt[return, throw]"
    style = rounded
    cluster1600_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1600_entry_name -> cluster1600_entry [arrowhead=none, color="black", style=dashed]
    cluster1600_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1600_entry -> node8574 [color="black"]
    cluster1600_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1600_exit_name -> cluster1600_exit [arrowhead=none, color="black", style=dashed]
    cluster1600_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8574_name [shape=none, label=<<font color="black">Call[8574]</font>>]
    node8574_name -> node8574 [arrowhead=none, color="black", style=dashed]
    node8574 [shape=cds, label=<<font color="black">%0 = clo&lt;FunctionDeclarationInstantiation&gt;(functionObject, argumentsList)</font>> color="black" fillcolor="white", style=filled]
    node8574 -> node8575 [color="black"]
    node8575_name [shape=none, label=<<font color="black">Block[8575]</font>>]
    node8575_name -> node8575 [arrowhead=none, color="black", style=dashed]
    node8575 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8575 -> node8576 [color="black"]
    node8576_name [shape=none, label=<<font color="black">Call[8576]</font>>]
    node8576_name -> node8576 [arrowhead=none, color="black", style=dashed]
    node8576 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryCreateFromConstructor&gt;(functionObject, &quot;%GeneratorFunction.prototype.prototype%&quot;, (new [&quot;GeneratorState&quot;, &quot;GeneratorContext&quot;, &quot;GeneratorBrand&quot;])[#658])</font>> color="black" fillcolor="white", style=filled]
    node8576 -> node8577 [color="black"]
    node8577_name [shape=none, label=<<font color="black">Block[8577]</font>>]
    node8577_name -> node8577 [arrowhead=none, color="black", style=dashed]
    node8577 [shape=box, label=<<font color="black">[0] let G = [? %1]<BR ALIGN="LEFT"/>[1] G.GeneratorBrand = ~empty~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8577 -> node8578 [color="black"]
    node8578_name [shape=none, label=<<font color="black">Call[8578]</font>>]
    node8578_name -> node8578 [arrowhead=none, color="black", style=dashed]
    node8578 [shape=cds, label=<<font color="black">%2 = clo&lt;GeneratorStart&gt;(G, this[0])</font>> color="black" fillcolor="white", style=filled]
    node8578 -> node8579 [color="black"]
    node8579_name [shape=none, label=<<font color="black">Block[8579]</font>>]
    node8579_name -> node8579 [arrowhead=none, color="black", style=dashed]
    node8579 [shape=box, label=<<font color="black">[0] return comp[~return~/~empty~](G)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8579 -> cluster1600_exit [color="black"]
  }
}