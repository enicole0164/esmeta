digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster135 {
    label = "def CreateDataPropertyOrThrow(O: Object, P: Symbol | String, V: ESValue): Normal[Boolean] | Abrupt"
    style = rounded
    cluster135_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster135_entry_name -> cluster135_entry [arrowhead=none, color="black", style=dashed]
    cluster135_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster135_entry -> node1111 [color="black"]
    cluster135_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster135_exit_name -> cluster135_exit [arrowhead=none, color="black", style=dashed]
    cluster135_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node1111_name [shape=none, label=<<font color="black">Call[1111]</font>>]
    node1111_name -> node1111 [arrowhead=none, color="black", style=dashed]
    node1111 [shape=cds, label=<<font color="black">%0 = clo&lt;CreateDataProperty&gt;(O, P, V)</font>> color="black" fillcolor="white", style=filled]
    node1111 -> node1112 [color="black"]
    node1112_name [shape=none, label=<<font color="black">Block[1112]</font>>]
    node1112_name -> node1112 [arrowhead=none, color="black", style=dashed]
    node1112 [shape=box, label=<<font color="black">[0] let success = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1112 -> node1113 [color="black"]
    node1113_name [shape=none, label=<<font color="black">Branch[1113]</font>>]
    node1113_name -> node1113 [arrowhead=none, color="black", style=dashed]
    node1113 [shape=diamond, label=<<font color="black">(= success false)</font>> color="black" fillcolor="white", style=filled]
    node1113 -> node1114 [label=<<font color="black">true</font>> color="black"]
    node1113 -> node1115 [label=<<font color="black">false</font>> color="black"]
    node1114_name [shape=none, label=<<font color="black">Block[1114]</font>>]
    node1114_name -> node1114 [arrowhead=none, color="black", style=dashed]
    node1114 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#43])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1114 -> cluster135_exit [color="black"]
    node1115_name [shape=none, label=<<font color="black">Block[1115]</font>>]
    node1115_name -> node1115 [arrowhead=none, color="black", style=dashed]
    node1115 [shape=box, label=<<font color="black">[0] return success<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node1115 -> cluster135_exit [color="black"]
  }
}