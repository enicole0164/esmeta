digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster595 {
    label = "def <SYNTAX>:TryStatement[0,0].ContainsUndefinedBreakTarget(this: Ast:TryStatement[0,0], labelSet: Unknown): Boolean"
    style = rounded
    cluster595_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster595_entry_name -> cluster595_entry [arrowhead=none, color="black", style=dashed]
    cluster595_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster595_entry -> node2668 [color="black"]
    cluster595_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster595_exit_name -> cluster595_exit [arrowhead=none, color="black", style=dashed]
    cluster595_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node2668_name [shape=none, label=<<font color="black">Call[2668]</font>>]
    node2668_name -> node2668 [arrowhead=none, color="black", style=dashed]
    node2668 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;ContainsUndefinedBreakTarget(labelSet)</font>> color="black" fillcolor="white", style=filled]
    node2668 -> node2669 [color="black"]
    node2669_name [shape=none, label=<<font color="black">Block[2669]</font>>]
    node2669_name -> node2669 [arrowhead=none, color="black", style=dashed]
    node2669 [shape=box, label=<<font color="black">[0] let hasUndefinedLabels = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2669 -> node2670 [color="black"]
    node2670_name [shape=none, label=<<font color="black">Branch[2670]</font>>]
    node2670_name -> node2670 [arrowhead=none, color="black", style=dashed]
    node2670 [shape=diamond, label=<<font color="black">(= hasUndefinedLabels true)</font>> color="black" fillcolor="white", style=filled]
    node2670 -> node2671 [label=<<font color="black">true</font>> color="black"]
    node2670 -> node2672 [label=<<font color="black">false</font>> color="black"]
    node2671_name [shape=none, label=<<font color="black">Block[2671]</font>>]
    node2671_name -> node2671 [arrowhead=none, color="black", style=dashed]
    node2671 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2671 -> cluster595_exit [color="black"]
    node2672_name [shape=none, label=<<font color="black">Call[2672]</font>>]
    node2672_name -> node2672 [arrowhead=none, color="black", style=dashed]
    node2672 [shape=cds, label=<<font color="black">%1 = this[1]-&gt;ContainsUndefinedBreakTarget(labelSet)</font>> color="black" fillcolor="white", style=filled]
    node2672 -> node2673 [color="black"]
    node2673_name [shape=none, label=<<font color="black">Block[2673]</font>>]
    node2673_name -> node2673 [arrowhead=none, color="black", style=dashed]
    node2673 [shape=box, label=<<font color="black">[0] return %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node2673 -> cluster595_exit [color="black"]
  }
}