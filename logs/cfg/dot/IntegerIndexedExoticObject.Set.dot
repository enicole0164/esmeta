digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1129 {
    label = "def <INTERNAL>:IntegerIndexedExoticObject.Set(O: IntegerIndexedExoticObject, P: Symbol | String, V: ESValue, Receiver: ESValue): Normal[Boolean] | Abrupt"
    style = rounded
    cluster1129_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1129_entry_name -> cluster1129_entry [arrowhead=none, color="black", style=dashed]
    cluster1129_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1129_entry -> node4860 [color="black"]
    cluster1129_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1129_exit_name -> cluster1129_exit [arrowhead=none, color="black", style=dashed]
    cluster1129_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node4860_name [shape=none, label=<<font color="black">Branch[4860]</font>>]
    node4860_name -> node4860 [arrowhead=none, color="black", style=dashed]
    node4860 [shape=diamond, label=<<font color="black">(= (typeof P) @String)</font>> color="black" fillcolor="white", style=filled]
    node4860 -> node4861 [label=<<font color="black">true</font>> color="black"]
    node4860 -> node4866 [label=<<font color="black">false</font>> color="black"]
    node4861_name [shape=none, label=<<font color="black">Call[4861]</font>>]
    node4861_name -> node4861 [arrowhead=none, color="black", style=dashed]
    node4861 [shape=cds, label=<<font color="black">%0 = clo&lt;CanonicalNumericIndexString&gt;(P)</font>> color="black" fillcolor="white", style=filled]
    node4861 -> node4862 [color="black"]
    node4866_name [shape=none, label=<<font color="black">Call[4866]</font>>]
    node4866_name -> node4866 [arrowhead=none, color="black", style=dashed]
    node4866 [shape=cds, label=<<font color="black">%2 = clo&lt;OrdinarySet&gt;(O, P, V, Receiver)</font>> color="black" fillcolor="white", style=filled]
    node4866 -> node4867 [color="black"]
    node4862_name [shape=none, label=<<font color="black">Block[4862]</font>>]
    node4862_name -> node4862 [arrowhead=none, color="black", style=dashed]
    node4862 [shape=box, label=<<font color="black">[0] let numericIndex = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4862 -> node4863 [color="black"]
    node4867_name [shape=none, label=<<font color="black">Block[4867]</font>>]
    node4867_name -> node4867 [arrowhead=none, color="black", style=dashed]
    node4867 [shape=box, label=<<font color="black">[0] return [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4867 -> cluster1129_exit [color="black"]
    node4863_name [shape=none, label=<<font color="black">Branch[4863]</font>>]
    node4863_name -> node4863 [arrowhead=none, color="black", style=dashed]
    node4863 [shape=diamond, label=<<font color="black">(! (= numericIndex undefined))</font>> color="black" fillcolor="white", style=filled]
    node4863 -> node4864 [label=<<font color="black">true</font>> color="black"]
    node4863 -> node4866 [label=<<font color="black">false</font>> color="black"]
    node4864_name [shape=none, label=<<font color="black">Call[4864]</font>>]
    node4864_name -> node4864 [arrowhead=none, color="black", style=dashed]
    node4864 [shape=cds, label=<<font color="black">%1 = clo&lt;IntegerIndexedElementSet&gt;(O, numericIndex, V)</font>> color="black" fillcolor="white", style=filled]
    node4864 -> node4865 [color="black"]
    node4865_name [shape=none, label=<<font color="black">Block[4865]</font>>]
    node4865_name -> node4865 [arrowhead=none, color="black", style=dashed]
    node4865 [shape=box, label=<<font color="black">[0] [? %1]<BR ALIGN="LEFT"/>[1] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node4865 -> cluster1129_exit [color="black"]
  }
}