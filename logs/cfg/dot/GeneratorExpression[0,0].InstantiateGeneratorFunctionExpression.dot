digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1603 {
    label = "def <SYNTAX>:GeneratorExpression[0,0].InstantiateGeneratorFunctionExpression(this: Ast:GeneratorExpression[0,0], name?: Unknown): FunctionObject"
    style = rounded
    cluster1603_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1603_entry_name -> cluster1603_entry [arrowhead=none, color="black", style=dashed]
    cluster1603_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1603_entry -> node8597 [color="black"]
    cluster1603_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1603_exit_name -> cluster1603_exit [arrowhead=none, color="black", style=dashed]
    cluster1603_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8597_name [shape=none, label=<<font color="black">Branch[8597]</font>>]
    node8597_name -> node8597 [arrowhead=none, color="black", style=dashed]
    node8597 [shape=diamond, label=<<font color="black">(= name absent)</font>> color="black" fillcolor="white", style=filled]
    node8597 -> node8598 [label=<<font color="black">true</font>> color="black"]
    node8597 -> node8599 [label=<<font color="black">false</font>> color="black"]
    node8598_name [shape=none, label=<<font color="black">Block[8598]</font>>]
    node8598_name -> node8598 [arrowhead=none, color="black", style=dashed]
    node8598 [shape=box, label=<<font color="black">[0] name = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8598 -> node8599 [color="black"]
    node8599_name [shape=none, label=<<font color="black">Block[8599]</font>>]
    node8599_name -> node8599 [arrowhead=none, color="black", style=dashed]
    node8599 [shape=box, label=<<font color="black">[0] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[1] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[2] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8599 -> node8600 [color="black"]
    node8600_name [shape=none, label=<<font color="black">Call[8600]</font>>]
    node8600_name -> node8600 [arrowhead=none, color="black", style=dashed]
    node8600 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%GeneratorFunction.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8600 -> node8601 [color="black"]
    node8601_name [shape=none, label=<<font color="black">Block[8601]</font>>]
    node8601_name -> node8601 [arrowhead=none, color="black", style=dashed]
    node8601 [shape=box, label=<<font color="black">[0] let closure = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8601 -> node8602 [color="black"]
    node8602_name [shape=none, label=<<font color="black">Call[8602]</font>>]
    node8602_name -> node8602 [arrowhead=none, color="black", style=dashed]
    node8602 [shape=cds, label=<<font color="black">%1 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node8602 -> node8603 [color="black"]
    node8603_name [shape=none, label=<<font color="black">Call[8603]</font>>]
    node8603_name -> node8603 [arrowhead=none, color="black", style=dashed]
    node8603 [shape=cds, label=<<font color="black">%2 = clo&lt;OrdinaryObjectCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%GeneratorFunction.prototype.prototype%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node8603 -> node8604 [color="black"]
    node8604_name [shape=none, label=<<font color="black">Block[8604]</font>>]
    node8604_name -> node8604 [arrowhead=none, color="black", style=dashed]
    node8604 [shape=box, label=<<font color="black">[0] let prototype = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8604 -> node8605 [color="black"]
    node8605_name [shape=none, label=<<font color="black">Call[8605]</font>>]
    node8605_name -> node8605 [arrowhead=none, color="black", style=dashed]
    node8605 [shape=cds, label=<<font color="black">%3 = clo&lt;DefinePropertyOrThrow&gt;(closure, &quot;prototype&quot;, (new PropertyDescriptor(&quot;Value&quot; -&gt; prototype, &quot;Writable&quot; -&gt; true, &quot;Enumerable&quot; -&gt; false, &quot;Configurable&quot; -&gt; false))[#661])</font>> color="black" fillcolor="white", style=filled]
    node8605 -> node8606 [color="black"]
    node8606_name [shape=none, label=<<font color="black">Block[8606]</font>>]
    node8606_name -> node8606 [arrowhead=none, color="black", style=dashed]
    node8606 [shape=box, label=<<font color="black">[0] [! %3]<BR ALIGN="LEFT"/>[1] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8606 -> cluster1603_exit [color="black"]
  }
}