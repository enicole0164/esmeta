digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2638 {
    label = "def AsyncGeneratorAwaitReturn(generator: Unknown["AsyncGenerator"]): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2638_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2638_entry_name -> cluster2638_entry [arrowhead=none, color="black", style=dashed]
    cluster2638_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2638_entry -> node19575 [color="black"]
    cluster2638_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2638_exit_name -> cluster2638_exit [arrowhead=none, color="black", style=dashed]
    cluster2638_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19575_name [shape=none, label=<<font color="black">Block[19575]</font>>]
    node19575_name -> node19575 [arrowhead=none, color="black", style=dashed]
    node19575 [shape=box, label=<<font color="black">[0] let queue = generator.AsyncGeneratorQueue<BR ALIGN="LEFT"/>[1] assert (! (= queue.length 0))<BR ALIGN="LEFT"/>[2] let next = queue[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19575 -> node19576 [color="black"]
    node19576_name [shape=none, label=<<font color="black">Call[19576]</font>>]
    node19576_name -> node19576 [arrowhead=none, color="black", style=dashed]
    node19576 [shape=cds, label=<<font color="black">%0 = clo&lt;Completion&gt;(next.Completion)</font>> color="black" fillcolor="white", style=filled]
    node19576 -> node19577 [color="black"]
    node19577_name [shape=none, label=<<font color="black">Block[19577]</font>>]
    node19577_name -> node19577 [arrowhead=none, color="black", style=dashed]
    node19577 [shape=box, label=<<font color="black">[0] let completion = %0<BR ALIGN="LEFT"/>[1] assert (= completion.Type ~return~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19577 -> node19578 [color="black"]
    node19578_name [shape=none, label=<<font color="black">Call[19578]</font>>]
    node19578_name -> node19578 [arrowhead=none, color="black", style=dashed]
    node19578 [shape=cds, label=<<font color="black">%1 = clo&lt;PromiseResolve&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;], completion.Value)</font>> color="black" fillcolor="white", style=filled]
    node19578 -> node19579 [color="black"]
    node19579_name [shape=none, label=<<font color="black">Block[19579]</font>>]
    node19579_name -> node19579 [arrowhead=none, color="black", style=dashed]
    node19579 [shape=box, label=<<font color="black">[0] let promise = [? %1]<BR ALIGN="LEFT"/>[1] let fulfilledClosure = clo&lt;AsyncGeneratorAwaitReturn:clo0, [generator]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19579 -> node19580 [color="black"]
    node19580_name [shape=none, label=<<font color="black">Call[19580]</font>>]
    node19580_name -> node19580 [arrowhead=none, color="black", style=dashed]
    node19580 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateBuiltinFunction&gt;(fulfilledClosure, 1, &quot;&quot;, (new [])[#1334])</font>> color="black" fillcolor="white", style=filled]
    node19580 -> node19581 [color="black"]
    node19581_name [shape=none, label=<<font color="black">Block[19581]</font>>]
    node19581_name -> node19581 [arrowhead=none, color="black", style=dashed]
    node19581 [shape=box, label=<<font color="black">[0] let onFulfilled = %2<BR ALIGN="LEFT"/>[1] let rejectedClosure = clo&lt;AsyncGeneratorAwaitReturn:clo1, [generator]&gt;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19581 -> node19582 [color="black"]
    node19582_name [shape=none, label=<<font color="black">Call[19582]</font>>]
    node19582_name -> node19582 [arrowhead=none, color="black", style=dashed]
    node19582 [shape=cds, label=<<font color="black">%3 = clo&lt;CreateBuiltinFunction&gt;(rejectedClosure, 1, &quot;&quot;, (new [])[#1335])</font>> color="black" fillcolor="white", style=filled]
    node19582 -> node19583 [color="black"]
    node19583_name [shape=none, label=<<font color="black">Block[19583]</font>>]
    node19583_name -> node19583 [arrowhead=none, color="black", style=dashed]
    node19583 [shape=box, label=<<font color="black">[0] let onRejected = %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19583 -> node19584 [color="black"]
    node19584_name [shape=none, label=<<font color="black">Call[19584]</font>>]
    node19584_name -> node19584 [arrowhead=none, color="black", style=dashed]
    node19584 [shape=cds, label=<<font color="black">%4 = clo&lt;PerformPromiseThen&gt;(promise, onFulfilled, onRejected)</font>> color="black" fillcolor="white", style=filled]
    node19584 -> node19585 [color="black"]
    node19585_name [shape=none, label=<<font color="black">Block[19585]</font>>]
    node19585_name -> node19585 [arrowhead=none, color="black", style=dashed]
    node19585 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19585 -> cluster2638_exit [color="black"]
  }
}