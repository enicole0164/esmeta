digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1903 {
    label = "def GetModuleNamespace(module: Unknown["InstanceOfAConcreteSubclassOfModuleRecord"]): Unknown["EitherANormalCompletionContainingEitherAModuleNamespaceObjectOr~empty~,OrAnAbruptCompletion"]"
    style = rounded
    cluster1903_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1903_entry_name -> cluster1903_entry [arrowhead=none, color="black", style=dashed]
    cluster1903_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1903_entry -> node10501 [color="black"]
    cluster1903_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1903_exit_name -> cluster1903_exit [arrowhead=none, color="black", style=dashed]
    cluster1903_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10501_name [shape=none, label=<<font color="black">Block[10501]</font>>]
    node10501_name -> node10501 [arrowhead=none, color="black", style=dashed]
    node10501 [shape=box, label=<<font color="black">[0] assert (|| (! (? module: &quot;CyclicModuleRecord&quot;)) (! (= module.Status ~unlinked~)))<BR ALIGN="LEFT"/>[1] let namespace = module.Namespace<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10501 -> node10502 [color="black"]
    node10502_name [shape=none, label=<<font color="black">Branch[10502]</font>>]
    node10502_name -> node10502 [arrowhead=none, color="black", style=dashed]
    node10502 [shape=diamond, label=<<font color="black">(= namespace ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node10502 -> node10503 [label=<<font color="black">true</font>> color="black"]
    node10502 -> node10514 [label=<<font color="black">false</font>> color="black"]
    node10503_name [shape=none, label=<<font color="black">Call[10503]</font>>]
    node10503_name -> node10503 [arrowhead=none, color="black", style=dashed]
    node10503 [shape=cds, label=<<font color="black">%0 = module-&gt;GetExportedNames()</font>> color="black" fillcolor="white", style=filled]
    node10503 -> node10504 [color="black"]
    node10514_name [shape=none, label=<<font color="black">Block[10514]</font>>]
    node10514_name -> node10514 [arrowhead=none, color="black", style=dashed]
    node10514 [shape=box, label=<<font color="black">[0] return namespace<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10514 -> cluster1903_exit [color="black"]
    node10504_name [shape=none, label=<<font color="black">Block[10504]</font>>]
    node10504_name -> node10504 [arrowhead=none, color="black", style=dashed]
    node10504 [shape=box, label=<<font color="black">[0] let exportedNames = [? %0]<BR ALIGN="LEFT"/>[1] let unambiguousNames = (new [])[#802]<BR ALIGN="LEFT"/>[2] %2 = exportedNames<BR ALIGN="LEFT"/>[3] %1 = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10504 -> node10505 [color="black"]
    node10505_name [shape=none, label=<<font color="black">Branch[10505]</font>>]
    node10505_name -> node10505 [arrowhead=none, color="black", style=dashed]
    node10505 [shape=diamond, label=<<font color="black">(&lt; %1 %2.length)</font>> color="black" fillcolor="white", style=filled]
    node10505 -> node10506 [label=<<font color="black">true</font>> color="black"]
    node10505 -> node10512 [label=<<font color="black">false</font>> color="black"]
    node10506_name [shape=none, label=<<font color="black">Block[10506]</font>>]
    node10506_name -> node10506 [arrowhead=none, color="black", style=dashed]
    node10506 [shape=box, label=<<font color="black">[0] let name = %2[%1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10506 -> node10507 [color="black"]
    node10512_name [shape=none, label=<<font color="black">Call[10512]</font>>]
    node10512_name -> node10512 [arrowhead=none, color="black", style=dashed]
    node10512 [shape=cds, label=<<font color="black">%4 = clo&lt;ModuleNamespaceCreate&gt;(module, unambiguousNames)</font>> color="black" fillcolor="white", style=filled]
    node10512 -> node10513 [color="black"]
    node10507_name [shape=none, label=<<font color="black">Call[10507]</font>>]
    node10507_name -> node10507 [arrowhead=none, color="black", style=dashed]
    node10507 [shape=cds, label=<<font color="black">%3 = module-&gt;ResolveExport(name)</font>> color="black" fillcolor="white", style=filled]
    node10507 -> node10508 [color="black"]
    node10513_name [shape=none, label=<<font color="black">Block[10513]</font>>]
    node10513_name -> node10513 [arrowhead=none, color="black", style=dashed]
    node10513 [shape=box, label=<<font color="black">[0] namespace = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10513 -> node10514 [color="black"]
    node10508_name [shape=none, label=<<font color="black">Block[10508]</font>>]
    node10508_name -> node10508 [arrowhead=none, color="black", style=dashed]
    node10508 [shape=box, label=<<font color="black">[0] let resolution = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10508 -> node10509 [color="black"]
    node10509_name [shape=none, label=<<font color="black">Branch[10509]</font>>]
    node10509_name -> node10509 [arrowhead=none, color="black", style=dashed]
    node10509 [shape=diamond, label=<<font color="black">(? resolution: &quot;ResolvedBindingRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node10509 -> node10510 [label=<<font color="black">true</font>> color="black"]
    node10509 -> node10511 [label=<<font color="black">false</font>> color="black"]
    node10510_name [shape=none, label=<<font color="black">Block[10510]</font>>]
    node10510_name -> node10510 [arrowhead=none, color="black", style=dashed]
    node10510 [shape=box, label=<<font color="black">[0] push unambiguousNames &lt; name<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10510 -> node10511 [color="black"]
    node10511_name [shape=none, label=<<font color="black">Block[10511]</font>>]
    node10511_name -> node10511 [arrowhead=none, color="black", style=dashed]
    node10511 [shape=box, label=<<font color="black">[0] %1 = (+ %1 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10511 -> node10505 [color="black"]
  }
}