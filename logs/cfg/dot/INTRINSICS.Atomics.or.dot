digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2539 {
    label = "def <BUILTIN>:INTRINSICS.Atomics.or(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2539_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2539_entry_name -> cluster2539_entry [arrowhead=none, color="black", style=dashed]
    cluster2539_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2539_entry -> node18125 [color="black"]
    cluster2539_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2539_exit_name -> cluster2539_exit [arrowhead=none, color="black", style=dashed]
    cluster2539_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18125_name [shape=none, label=<<font color="black">Branch[18125]</font>>]
    node18125_name -> node18125 [arrowhead=none, color="black", style=dashed]
    node18125 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18125 -> node18126 [label=<<font color="black">true</font>> color="black"]
    node18125 -> node18127 [label=<<font color="black">false</font>> color="black"]
    node18126_name [shape=none, label=<<font color="black">Block[18126]</font>>]
    node18126_name -> node18126 [arrowhead=none, color="black", style=dashed]
    node18126 [shape=box, label=<<font color="black">[0] let typedArray = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18126 -> node18128 [color="black"]
    node18127_name [shape=none, label=<<font color="black">Block[18127]</font>>]
    node18127_name -> node18127 [arrowhead=none, color="black", style=dashed]
    node18127 [shape=box, label=<<font color="black">[0] let typedArray = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18127 -> node18128 [color="black"]
    node18128_name [shape=none, label=<<font color="black">Branch[18128]</font>>]
    node18128_name -> node18128 [arrowhead=none, color="black", style=dashed]
    node18128 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18128 -> node18129 [label=<<font color="black">true</font>> color="black"]
    node18128 -> node18130 [label=<<font color="black">false</font>> color="black"]
    node18129_name [shape=none, label=<<font color="black">Block[18129]</font>>]
    node18129_name -> node18129 [arrowhead=none, color="black", style=dashed]
    node18129 [shape=box, label=<<font color="black">[0] let index = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18129 -> node18131 [color="black"]
    node18130_name [shape=none, label=<<font color="black">Block[18130]</font>>]
    node18130_name -> node18130 [arrowhead=none, color="black", style=dashed]
    node18130 [shape=box, label=<<font color="black">[0] let index = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18130 -> node18131 [color="black"]
    node18131_name [shape=none, label=<<font color="black">Branch[18131]</font>>]
    node18131_name -> node18131 [arrowhead=none, color="black", style=dashed]
    node18131 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18131 -> node18132 [label=<<font color="black">true</font>> color="black"]
    node18131 -> node18133 [label=<<font color="black">false</font>> color="black"]
    node18132_name [shape=none, label=<<font color="black">Block[18132]</font>>]
    node18132_name -> node18132 [arrowhead=none, color="black", style=dashed]
    node18132 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18132 -> node18134 [color="black"]
    node18133_name [shape=none, label=<<font color="black">Block[18133]</font>>]
    node18133_name -> node18133 [arrowhead=none, color="black", style=dashed]
    node18133 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18133 -> node18134 [color="black"]
    node18134_name [shape=none, label=<<font color="black">Block[18134]</font>>]
    node18134_name -> node18134 [arrowhead=none, color="black", style=dashed]
    node18134 [shape=box, label=<<font color="black">[0] (yet &quot;Let _or_ be a new read-modify-write modification function with parameters (_xBytes_, _yBytes_) that captures nothing and performs the following steps atomically when called:\n  1. Return ByteListBitwiseOp(`|`, _xBytes_, _yBytes_).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18134 -> node18135 [color="black"]
    node18135_name [shape=none, label=<<font color="black">Call[18135]</font>>]
    node18135_name -> node18135 [arrowhead=none, color="black", style=dashed]
    node18135 [shape=cds, label=<<font color="black">%0 = clo&lt;AtomicReadModifyWrite&gt;(typedArray, index, value, or)</font>> color="black" fillcolor="white", style=filled]
    node18135 -> node18136 [color="black"]
    node18136_name [shape=none, label=<<font color="black">Block[18136]</font>>]
    node18136_name -> node18136 [arrowhead=none, color="black", style=dashed]
    node18136 [shape=box, label=<<font color="black">[0] return [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18136 -> cluster2539_exit [color="black"]
  }
}