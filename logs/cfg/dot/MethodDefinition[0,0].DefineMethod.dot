digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1593 {
    label = "def <SYNTAX>:MethodDefinition[0,0].DefineMethod(this: Ast:MethodDefinition[0,0], object: Unknown, functionPrototype?: Unknown): Unknown["EitherANormalCompletionContainingARecordWithFields[[Key]](aPropertyKey)And[[Closure]](aFunctionObject)OrAnAbruptCompletion"]"
    style = rounded
    cluster1593_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1593_entry_name -> cluster1593_entry [arrowhead=none, color="black", style=dashed]
    cluster1593_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1593_entry -> node8505 [color="black"]
    cluster1593_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1593_exit_name -> cluster1593_exit [arrowhead=none, color="black", style=dashed]
    cluster1593_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8505_name [shape=none, label=<<font color="black">Call[8505]</font>>]
    node8505_name -> node8505 [arrowhead=none, color="black", style=dashed]
    node8505 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node8505 -> node8506 [color="black"]
    node8506_name [shape=none, label=<<font color="black">Block[8506]</font>>]
    node8506_name -> node8506 [arrowhead=none, color="black", style=dashed]
    node8506 [shape=box, label=<<font color="black">[0] let propKey = %0<BR ALIGN="LEFT"/>[1] [? propKey]<BR ALIGN="LEFT"/>[2] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[3] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8506 -> node8507 [color="black"]
    node8507_name [shape=none, label=<<font color="black">Branch[8507]</font>>]
    node8507_name -> node8507 [arrowhead=none, color="black", style=dashed]
    node8507 [shape=diamond, label=<<font color="black">(! (= functionPrototype absent))</font>> color="black" fillcolor="white", style=filled]
    node8507 -> node8508 [label=<<font color="black">true</font>> color="black"]
    node8507 -> node8509 [label=<<font color="black">false</font>> color="black"]
    node8508_name [shape=none, label=<<font color="black">Block[8508]</font>>]
    node8508_name -> node8508 [arrowhead=none, color="black", style=dashed]
    node8508 [shape=box, label=<<font color="black">[0] let prototype = functionPrototype<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8508 -> node8510 [color="black"]
    node8509_name [shape=none, label=<<font color="black">Block[8509]</font>>]
    node8509_name -> node8509 [arrowhead=none, color="black", style=dashed]
    node8509 [shape=box, label=<<font color="black">[0] let prototype = @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Function.prototype%&quot;]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8509 -> node8510 [color="black"]
    node8510_name [shape=none, label=<<font color="black">Block[8510]</font>>]
    node8510_name -> node8510 [arrowhead=none, color="black", style=dashed]
    node8510 [shape=box, label=<<font color="black">[0] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8510 -> node8511 [color="black"]
    node8511_name [shape=none, label=<<font color="black">Call[8511]</font>>]
    node8511_name -> node8511 [arrowhead=none, color="black", style=dashed]
    node8511 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryFunctionCreate&gt;(prototype, sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8511 -> node8512 [color="black"]
    node8512_name [shape=none, label=<<font color="black">Block[8512]</font>>]
    node8512_name -> node8512 [arrowhead=none, color="black", style=dashed]
    node8512 [shape=box, label=<<font color="black">[0] let closure = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8512 -> node8513 [color="black"]
    node8513_name [shape=none, label=<<font color="black">Call[8513]</font>>]
    node8513_name -> node8513 [arrowhead=none, color="black", style=dashed]
    node8513 [shape=cds, label=<<font color="black">%2 = clo&lt;MakeMethod&gt;(closure, object)</font>> color="black" fillcolor="white", style=filled]
    node8513 -> node8514 [color="black"]
    node8514_name [shape=none, label=<<font color="black">Block[8514]</font>>]
    node8514_name -> node8514 [arrowhead=none, color="black", style=dashed]
    node8514 [shape=box, label=<<font color="black">[0] return (new Record(&quot;Key&quot; -&gt; propKey, &quot;Closure&quot; -&gt; closure))[#651]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8514 -> cluster1593_exit [color="black"]
  }
}