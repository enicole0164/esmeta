digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2406 {
    label = "def <BUILTIN>:INTRINSICS.TypedArray.prototype.map(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2406_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2406_entry_name -> cluster2406_entry [arrowhead=none, color="black", style=dashed]
    cluster2406_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2406_entry -> node16338 [color="black"]
    cluster2406_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2406_exit_name -> cluster2406_exit [arrowhead=none, color="black", style=dashed]
    cluster2406_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16338_name [shape=none, label=<<font color="black">Branch[16338]</font>>]
    node16338_name -> node16338 [arrowhead=none, color="black", style=dashed]
    node16338 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16338 -> node16339 [label=<<font color="black">true</font>> color="black"]
    node16338 -> node16340 [label=<<font color="black">false</font>> color="black"]
    node16339_name [shape=none, label=<<font color="black">Block[16339]</font>>]
    node16339_name -> node16339 [arrowhead=none, color="black", style=dashed]
    node16339 [shape=box, label=<<font color="black">[0] let callbackfn = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16339 -> node16341 [color="black"]
    node16340_name [shape=none, label=<<font color="black">Block[16340]</font>>]
    node16340_name -> node16340 [arrowhead=none, color="black", style=dashed]
    node16340 [shape=box, label=<<font color="black">[0] let callbackfn = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16340 -> node16341 [color="black"]
    node16341_name [shape=none, label=<<font color="black">Branch[16341]</font>>]
    node16341_name -> node16341 [arrowhead=none, color="black", style=dashed]
    node16341 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node16341 -> node16342 [label=<<font color="black">true</font>> color="black"]
    node16341 -> node16343 [label=<<font color="black">false</font>> color="black"]
    node16342_name [shape=none, label=<<font color="black">Block[16342]</font>>]
    node16342_name -> node16342 [arrowhead=none, color="black", style=dashed]
    node16342 [shape=box, label=<<font color="black">[0] let thisArg = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16342 -> node16344 [color="black"]
    node16343_name [shape=none, label=<<font color="black">Block[16343]</font>>]
    node16343_name -> node16343 [arrowhead=none, color="black", style=dashed]
    node16343 [shape=box, label=<<font color="black">[0] let thisArg = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16343 -> node16344 [color="black"]
    node16344_name [shape=none, label=<<font color="black">Block[16344]</font>>]
    node16344_name -> node16344 [arrowhead=none, color="black", style=dashed]
    node16344 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16344 -> node16345 [color="black"]
    node16345_name [shape=none, label=<<font color="black">Call[16345]</font>>]
    node16345_name -> node16345 [arrowhead=none, color="black", style=dashed]
    node16345 [shape=cds, label=<<font color="black">%0 = clo&lt;ValidateTypedArray&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node16345 -> node16346 [color="black"]
    node16346_name [shape=none, label=<<font color="black">Block[16346]</font>>]
    node16346_name -> node16346 [arrowhead=none, color="black", style=dashed]
    node16346 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/>[1] let len = O.ArrayLength<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16346 -> node16347 [color="black"]
    node16347_name [shape=none, label=<<font color="black">Call[16347]</font>>]
    node16347_name -> node16347 [arrowhead=none, color="black", style=dashed]
    node16347 [shape=cds, label=<<font color="black">%1 = clo&lt;IsCallable&gt;(callbackfn)</font>> color="black" fillcolor="white", style=filled]
    node16347 -> node16348 [color="black"]
    node16348_name [shape=none, label=<<font color="black">Branch[16348]</font>>]
    node16348_name -> node16348 [arrowhead=none, color="black", style=dashed]
    node16348 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node16348 -> node16349 [label=<<font color="black">true</font>> color="black"]
    node16348 -> node16350 [label=<<font color="black">false</font>> color="black"]
    node16349_name [shape=none, label=<<font color="black">Block[16349]</font>>]
    node16349_name -> node16349 [arrowhead=none, color="black", style=dashed]
    node16349 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1075])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16349 -> cluster2406_exit [color="black"]
    node16350_name [shape=none, label=<<font color="black">Call[16350]</font>>]
    node16350_name -> node16350 [arrowhead=none, color="black", style=dashed]
    node16350 [shape=cds, label=<<font color="black">%2 = clo&lt;TypedArraySpeciesCreate&gt;(O, (new [([number] len)])[#1076])</font>> color="black" fillcolor="white", style=filled]
    node16350 -> node16351 [color="black"]
    node16351_name [shape=none, label=<<font color="black">Block[16351]</font>>]
    node16351_name -> node16351 [arrowhead=none, color="black", style=dashed]
    node16351 [shape=box, label=<<font color="black">[0] let A = [? %2]<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16351 -> node16352 [color="black"]
    node16352_name [shape=none, label=<<font color="black">Branch[16352]</font>>]
    node16352_name -> node16352 [arrowhead=none, color="black", style=dashed]
    node16352 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node16352 -> node16353 [label=<<font color="black">true</font>> color="black"]
    node16352 -> node16361 [label=<<font color="black">false</font>> color="black"]
    node16353_name [shape=none, label=<<font color="black">Call[16353]</font>>]
    node16353_name -> node16353 [arrowhead=none, color="black", style=dashed]
    node16353 [shape=cds, label=<<font color="black">%3 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16353 -> node16354 [color="black"]
    node16361_name [shape=none, label=<<font color="black">Block[16361]</font>>]
    node16361_name -> node16361 [arrowhead=none, color="black", style=dashed]
    node16361 [shape=box, label=<<font color="black">[0] return A<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16361 -> cluster2406_exit [color="black"]
    node16354_name [shape=none, label=<<font color="black">Block[16354]</font>>]
    node16354_name -> node16354 [arrowhead=none, color="black", style=dashed]
    node16354 [shape=box, label=<<font color="black">[0] let Pk = [! %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16354 -> node16355 [color="black"]
    node16355_name [shape=none, label=<<font color="black">Call[16355]</font>>]
    node16355_name -> node16355 [arrowhead=none, color="black", style=dashed]
    node16355 [shape=cds, label=<<font color="black">%4 = clo&lt;Get&gt;(O, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16355 -> node16356 [color="black"]
    node16356_name [shape=none, label=<<font color="black">Block[16356]</font>>]
    node16356_name -> node16356 [arrowhead=none, color="black", style=dashed]
    node16356 [shape=box, label=<<font color="black">[0] let kValue = [! %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16356 -> node16357 [color="black"]
    node16357_name [shape=none, label=<<font color="black">Call[16357]</font>>]
    node16357_name -> node16357 [arrowhead=none, color="black", style=dashed]
    node16357 [shape=cds, label=<<font color="black">%5 = clo&lt;Call&gt;(callbackfn, thisArg, (new [kValue, ([number] k), O])[#1077])</font>> color="black" fillcolor="white", style=filled]
    node16357 -> node16358 [color="black"]
    node16358_name [shape=none, label=<<font color="black">Block[16358]</font>>]
    node16358_name -> node16358 [arrowhead=none, color="black", style=dashed]
    node16358 [shape=box, label=<<font color="black">[0] let mappedValue = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16358 -> node16359 [color="black"]
    node16359_name [shape=none, label=<<font color="black">Call[16359]</font>>]
    node16359_name -> node16359 [arrowhead=none, color="black", style=dashed]
    node16359 [shape=cds, label=<<font color="black">%6 = clo&lt;Set&gt;(A, Pk, mappedValue, true)</font>> color="black" fillcolor="white", style=filled]
    node16359 -> node16360 [color="black"]
    node16360_name [shape=none, label=<<font color="black">Block[16360]</font>>]
    node16360_name -> node16360 [arrowhead=none, color="black", style=dashed]
    node16360 [shape=box, label=<<font color="black">[0] [? %6]<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16360 -> node16352 [color="black"]
  }
}