digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1568 {
    label = "def <SYNTAX>:FunctionExpression[0,0].InstantiateOrdinaryFunctionExpression(this: Ast:FunctionExpression[0,0], name?: Unknown): FunctionObject"
    style = rounded
    cluster1568_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1568_entry_name -> cluster1568_entry [arrowhead=none, color="black", style=dashed]
    cluster1568_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1568_entry -> node8425 [color="black"]
    cluster1568_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1568_exit_name -> cluster1568_exit [arrowhead=none, color="black", style=dashed]
    cluster1568_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node8425_name [shape=none, label=<<font color="black">Branch[8425]</font>>]
    node8425_name -> node8425 [arrowhead=none, color="black", style=dashed]
    node8425 [shape=diamond, label=<<font color="black">(= name absent)</font>> color="black" fillcolor="white", style=filled]
    node8425 -> node8426 [label=<<font color="black">true</font>> color="black"]
    node8425 -> node8427 [label=<<font color="black">false</font>> color="black"]
    node8426_name [shape=none, label=<<font color="black">Block[8426]</font>>]
    node8426_name -> node8426 [arrowhead=none, color="black", style=dashed]
    node8426 [shape=box, label=<<font color="black">[0] name = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8426 -> node8427 [color="black"]
    node8427_name [shape=none, label=<<font color="black">Block[8427]</font>>]
    node8427_name -> node8427 [arrowhead=none, color="black", style=dashed]
    node8427 [shape=box, label=<<font color="black">[0] let env = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[1] let privateEnv = @EXECUTION_STACK[0].PrivateEnvironment<BR ALIGN="LEFT"/>[2] let sourceText = (source-text this)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8427 -> node8428 [color="black"]
    node8428_name [shape=none, label=<<font color="black">Call[8428]</font>>]
    node8428_name -> node8428 [arrowhead=none, color="black", style=dashed]
    node8428 [shape=cds, label=<<font color="black">%0 = clo&lt;OrdinaryFunctionCreate&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Function.prototype%&quot;], sourceText, this[1], this[2], ~non-lexical-this~, env, privateEnv)</font>> color="black" fillcolor="white", style=filled]
    node8428 -> node8429 [color="black"]
    node8429_name [shape=none, label=<<font color="black">Block[8429]</font>>]
    node8429_name -> node8429 [arrowhead=none, color="black", style=dashed]
    node8429 [shape=box, label=<<font color="black">[0] let closure = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8429 -> node8430 [color="black"]
    node8430_name [shape=none, label=<<font color="black">Call[8430]</font>>]
    node8430_name -> node8430 [arrowhead=none, color="black", style=dashed]
    node8430 [shape=cds, label=<<font color="black">%1 = clo&lt;SetFunctionName&gt;(closure, name)</font>> color="black" fillcolor="white", style=filled]
    node8430 -> node8431 [color="black"]
    node8431_name [shape=none, label=<<font color="black">Call[8431]</font>>]
    node8431_name -> node8431 [arrowhead=none, color="black", style=dashed]
    node8431 [shape=cds, label=<<font color="black">%2 = clo&lt;MakeConstructor&gt;(closure)</font>> color="black" fillcolor="white", style=filled]
    node8431 -> node8432 [color="black"]
    node8432_name [shape=none, label=<<font color="black">Block[8432]</font>>]
    node8432_name -> node8432 [arrowhead=none, color="black", style=dashed]
    node8432 [shape=box, label=<<font color="black">[0] return closure<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node8432 -> cluster1568_exit [color="black"]
  }
}