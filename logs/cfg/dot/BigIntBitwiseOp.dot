digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster50 {
    label = "def BigIntBitwiseOp(op: Unknown["`&`,`^`,Or``"], x: BigInt, y: BigInt): BigInt"
    style = rounded
    cluster50_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster50_entry_name -> cluster50_entry [arrowhead=none, color="black", style=dashed]
    cluster50_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster50_entry -> node357 [color="black"]
    cluster50_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster50_exit_name -> cluster50_exit [arrowhead=none, color="black", style=dashed]
    cluster50_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node357_name [shape=none, label=<<font color="black">Block[357]</font>>]
    node357_name -> node357 [arrowhead=none, color="black", style=dashed]
    node357 [shape=box, label=<<font color="black">[0] x = ([math] x)<BR ALIGN="LEFT"/>[1] y = ([math] y)<BR ALIGN="LEFT"/>[2] let result = 0<BR ALIGN="LEFT"/>[3] let shift = 0<BR ALIGN="LEFT"/>[4] (yet &quot;Repeat, until (_x_ = 0 or _x_ = -1) and (_y_ = 0 or _y_ = -1),\n  1. Let _xDigit_ be _x_ modulo 2.\n  1. Let _yDigit_ be _y_ modulo 2.\n  1. If _op_ is `&amp;`, set _result_ to _result_ + 2&lt;sup&gt;_shift_&lt;/sup&gt; &times; BinaryAnd(_xDigit_, _yDigit_).\n  1. Else if _op_ is `|`, set _result_ to _result_ + 2&lt;sup&gt;_shift_&lt;/sup&gt; &times; BinaryOr(_xDigit_, _yDigit_).\n  1. Else,\n    1. Assert: _op_ is `^`.\n    1. Set _result_ to _result_ + 2&lt;sup&gt;_shift_&lt;/sup&gt; &times; BinaryXor(_xDigit_, _yDigit_).\n  1. Set _shift_ to _shift_ + 1.\n  1. Set _x_ to (_x_ - _xDigit_) / 2.\n  1. Set _y_ to (_y_ - _yDigit_) / 2.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node357 -> node358 [color="black"]
    node358_name [shape=none, label=<<font color="black">Branch[358]</font>>]
    node358_name -> node358 [arrowhead=none, color="black", style=dashed]
    node358 [shape=diamond, label=<<font color="black">(= op &quot;&amp;&quot;)</font>> color="black" fillcolor="white", style=filled]
    node358 -> node359 [label=<<font color="black">true</font>> color="black"]
    node358 -> node361 [label=<<font color="black">false</font>> color="black"]
    node359_name [shape=none, label=<<font color="black">Call[359]</font>>]
    node359_name -> node359 [arrowhead=none, color="black", style=dashed]
    node359 [shape=cds, label=<<font color="black">%0 = clo&lt;BinaryAnd&gt;((% x 2), (% y 2))</font>> color="black" fillcolor="white", style=filled]
    node359 -> node360 [color="black"]
    node361_name [shape=none, label=<<font color="black">Branch[361]</font>>]
    node361_name -> node361 [arrowhead=none, color="black", style=dashed]
    node361 [shape=diamond, label=<<font color="black">(= op &quot;|&quot;)</font>> color="black" fillcolor="white", style=filled]
    node361 -> node362 [label=<<font color="black">true</font>> color="black"]
    node361 -> node364 [label=<<font color="black">false</font>> color="black"]
    node360_name [shape=none, label=<<font color="black">Block[360]</font>>]
    node360_name -> node360 [arrowhead=none, color="black", style=dashed]
    node360 [shape=box, label=<<font color="black">[0] let tmp = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node360 -> node367 [color="black"]
    node362_name [shape=none, label=<<font color="black">Call[362]</font>>]
    node362_name -> node362 [arrowhead=none, color="black", style=dashed]
    node362 [shape=cds, label=<<font color="black">%1 = clo&lt;BinaryOr&gt;((% x 2), (% y 2))</font>> color="black" fillcolor="white", style=filled]
    node362 -> node363 [color="black"]
    node364_name [shape=none, label=<<font color="black">Block[364]</font>>]
    node364_name -> node364 [arrowhead=none, color="black", style=dashed]
    node364 [shape=box, label=<<font color="black">[0] assert (= op &quot;^&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node364 -> node365 [color="black"]
    node367_name [shape=none, label=<<font color="black">Branch[367]</font>>]
    node367_name -> node367 [arrowhead=none, color="black", style=dashed]
    node367 [shape=diamond, label=<<font color="black">(! (== tmp 0))</font>> color="black" fillcolor="white", style=filled]
    node367 -> node368 [label=<<font color="black">true</font>> color="black"]
    node367 -> node369 [label=<<font color="black">false</font>> color="black"]
    node363_name [shape=none, label=<<font color="black">Block[363]</font>>]
    node363_name -> node363 [arrowhead=none, color="black", style=dashed]
    node363 [shape=box, label=<<font color="black">[0] let tmp = %1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node363 -> node367 [color="black"]
    node365_name [shape=none, label=<<font color="black">Call[365]</font>>]
    node365_name -> node365 [arrowhead=none, color="black", style=dashed]
    node365 [shape=cds, label=<<font color="black">%2 = clo&lt;BinaryXor&gt;((% x 2), (% y 2))</font>> color="black" fillcolor="white", style=filled]
    node365 -> node366 [color="black"]
    node368_name [shape=none, label=<<font color="black">Block[368]</font>>]
    node368_name -> node368 [arrowhead=none, color="black", style=dashed]
    node368 [shape=box, label=<<font color="black">[0] result = (- result (** 2 shift))<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node368 -> node369 [color="black"]
    node369_name [shape=none, label=<<font color="black">Block[369]</font>>]
    node369_name -> node369 [arrowhead=none, color="black", style=dashed]
    node369 [shape=box, label=<<font color="black">[0] return ([bigInt] result)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node369 -> cluster50_exit [color="black"]
    node366_name [shape=none, label=<<font color="black">Block[366]</font>>]
    node366_name -> node366 [arrowhead=none, color="black", style=dashed]
    node366 [shape=box, label=<<font color="black">[0] let tmp = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node366 -> node367 [color="black"]
  }
}