digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1459 {
    label = "def ForIn/OfBodyEvaluation(lhs: Unknown, stmt: Unknown, iteratorRecord: Unknown, iterationKind: Unknown, lhsKind: Const[~assignment~, ~lexicalBinding~, ~varBinding~], labelSet: Unknown, iteratorKind?: Const[~async~, ~sync~]): Normal[ESValue] | Abrupt"
    style = rounded
    cluster1459_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1459_entry_name -> cluster1459_entry [arrowhead=none, color="black", style=dashed]
    cluster1459_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1459_entry -> node7717 [color="black"]
    cluster1459_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1459_exit_name -> cluster1459_exit [arrowhead=none, color="black", style=dashed]
    cluster1459_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node7717_name [shape=none, label=<<font color="black">Branch[7717]</font>>]
    node7717_name -> node7717 [arrowhead=none, color="black", style=dashed]
    node7717 [shape=diamond, label=<<font color="black">(= iteratorKind absent)</font>> color="black" fillcolor="white", style=filled]
    node7717 -> node7718 [label=<<font color="black">true</font>> color="black"]
    node7717 -> node7719 [label=<<font color="black">false</font>> color="black"]
    node7718_name [shape=none, label=<<font color="black">Block[7718]</font>>]
    node7718_name -> node7718 [arrowhead=none, color="black", style=dashed]
    node7718 [shape=box, label=<<font color="black">[0] iteratorKind = ~sync~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7718 -> node7719 [color="black"]
    node7719_name [shape=none, label=<<font color="black">Block[7719]</font>>]
    node7719_name -> node7719 [arrowhead=none, color="black", style=dashed]
    node7719 [shape=box, label=<<font color="black">[0] let oldEnv = @EXECUTION_STACK[0].LexicalEnvironment<BR ALIGN="LEFT"/>[1] let V = undefined<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7719 -> node7720 [color="black"]
    node7720_name [shape=none, label=<<font color="black">Call[7720]</font>>]
    node7720_name -> node7720 [arrowhead=none, color="black", style=dashed]
    node7720 [shape=cds, label=<<font color="black">%0 = lhs-&gt;IsDestructuring()</font>> color="black" fillcolor="white", style=filled]
    node7720 -> node7721 [color="black"]
    node7721_name [shape=none, label=<<font color="black">Block[7721]</font>>]
    node7721_name -> node7721 [arrowhead=none, color="black", style=dashed]
    node7721 [shape=box, label=<<font color="black">[0] let destructuring = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7721 -> node7722 [color="black"]
    node7722_name [shape=none, label=<<font color="black">Branch[7722]</font>>]
    node7722_name -> node7722 [arrowhead=none, color="black", style=dashed]
    node7722 [shape=diamond, label=<<font color="black">(&amp;&amp; (= destructuring true) (= lhsKind ~assignment~))</font>> color="black" fillcolor="white", style=filled]
    node7722 -> node7723 [label=<<font color="black">true</font>> color="black"]
    node7722 -> node7724 [label=<<font color="black">false</font>> color="black"]
    node7723_name [shape=none, label=<<font color="black">Block[7723]</font>>]
    node7723_name -> node7723 [arrowhead=none, color="black", style=dashed]
    node7723 [shape=box, label=<<font color="black">[0] assert (? lhs: &quot;LeftHandSideExpression&quot;)<BR ALIGN="LEFT"/>[1] let assignmentPattern = (parse lhs (nt |AssignmentPattern|[]))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7723 -> node7724 [color="black"]
    node7724_name [shape=none, label=<<font color="black">Branch[7724]</font>>]
    node7724_name -> node7724 [arrowhead=none, color="black", style=dashed]
    node7724 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node7724 -> node7725 [label=<<font color="black">true</font>> color="black"]
    node7725_name [shape=none, label=<<font color="black">Call[7725]</font>>]
    node7725_name -> node7725 [arrowhead=none, color="black", style=dashed]
    node7725 [shape=cds, label=<<font color="black">%1 = clo&lt;Call&gt;(iteratorRecord.NextMethod, iteratorRecord.Iterator)</font>> color="black" fillcolor="white", style=filled]
    node7725 -> node7726 [color="black"]
    node7726_name [shape=none, label=<<font color="black">Block[7726]</font>>]
    node7726_name -> node7726 [arrowhead=none, color="black", style=dashed]
    node7726 [shape=box, label=<<font color="black">[0] let nextResult = [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7726 -> node7727 [color="black"]
    node7727_name [shape=none, label=<<font color="black">Branch[7727]</font>>]
    node7727_name -> node7727 [arrowhead=none, color="black", style=dashed]
    node7727 [shape=diamond, label=<<font color="black">(= iteratorKind ~async~)</font>> color="black" fillcolor="white", style=filled]
    node7727 -> node7728 [label=<<font color="black">true</font>> color="black"]
    node7727 -> node7730 [label=<<font color="black">false</font>> color="black"]
    node7728_name [shape=none, label=<<font color="black">Call[7728]</font>>]
    node7728_name -> node7728 [arrowhead=none, color="black", style=dashed]
    node7728 [shape=cds, label=<<font color="black">%2 = clo&lt;Await&gt;(nextResult)</font>> color="black" fillcolor="white", style=filled]
    node7728 -> node7729 [color="black"]
    node7730_name [shape=none, label=<<font color="black">Branch[7730]</font>>]
    node7730_name -> node7730 [arrowhead=none, color="black", style=dashed]
    node7730 [shape=diamond, label=<<font color="black">(! (= (typeof nextResult) @Object))</font>> color="black" fillcolor="white", style=filled]
    node7730 -> node7731 [label=<<font color="black">true</font>> color="black"]
    node7730 -> node7732 [label=<<font color="black">false</font>> color="black"]
    node7729_name [shape=none, label=<<font color="black">Block[7729]</font>>]
    node7729_name -> node7729 [arrowhead=none, color="black", style=dashed]
    node7729 [shape=box, label=<<font color="black">[0] nextResult = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7729 -> node7730 [color="black"]
    node7731_name [shape=none, label=<<font color="black">Block[7731]</font>>]
    node7731_name -> node7731 [arrowhead=none, color="black", style=dashed]
    node7731 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#627])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7731 -> cluster1459_exit [color="black"]
    node7732_name [shape=none, label=<<font color="black">Call[7732]</font>>]
    node7732_name -> node7732 [arrowhead=none, color="black", style=dashed]
    node7732 [shape=cds, label=<<font color="black">%3 = clo&lt;IteratorComplete&gt;(nextResult)</font>> color="black" fillcolor="white", style=filled]
    node7732 -> node7733 [color="black"]
    node7733_name [shape=none, label=<<font color="black">Block[7733]</font>>]
    node7733_name -> node7733 [arrowhead=none, color="black", style=dashed]
    node7733 [shape=box, label=<<font color="black">[0] let done = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7733 -> node7734 [color="black"]
    node7734_name [shape=none, label=<<font color="black">Branch[7734]</font>>]
    node7734_name -> node7734 [arrowhead=none, color="black", style=dashed]
    node7734 [shape=diamond, label=<<font color="black">(= done true)</font>> color="black" fillcolor="white", style=filled]
    node7734 -> node7735 [label=<<font color="black">true</font>> color="black"]
    node7734 -> node7736 [label=<<font color="black">false</font>> color="black"]
    node7735_name [shape=none, label=<<font color="black">Block[7735]</font>>]
    node7735_name -> node7735 [arrowhead=none, color="black", style=dashed]
    node7735 [shape=box, label=<<font color="black">[0] return V<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7735 -> cluster1459_exit [color="black"]
    node7736_name [shape=none, label=<<font color="black">Call[7736]</font>>]
    node7736_name -> node7736 [arrowhead=none, color="black", style=dashed]
    node7736 [shape=cds, label=<<font color="black">%4 = clo&lt;IteratorValue&gt;(nextResult)</font>> color="black" fillcolor="white", style=filled]
    node7736 -> node7737 [color="black"]
    node7737_name [shape=none, label=<<font color="black">Block[7737]</font>>]
    node7737_name -> node7737 [arrowhead=none, color="black", style=dashed]
    node7737 [shape=box, label=<<font color="black">[0] let nextValue = [? %4]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7737 -> node7738 [color="black"]
    node7738_name [shape=none, label=<<font color="black">Branch[7738]</font>>]
    node7738_name -> node7738 [arrowhead=none, color="black", style=dashed]
    node7738 [shape=diamond, label=<<font color="black">(|| (= lhsKind ~assignment~) (= lhsKind ~varBinding~))</font>> color="black" fillcolor="white", style=filled]
    node7738 -> node7739 [label=<<font color="black">true</font>> color="black"]
    node7738 -> node7742 [label=<<font color="black">false</font>> color="black"]
    node7739_name [shape=none, label=<<font color="black">Branch[7739]</font>>]
    node7739_name -> node7739 [arrowhead=none, color="black", style=dashed]
    node7739 [shape=diamond, label=<<font color="black">(= destructuring false)</font>> color="black" fillcolor="white", style=filled]
    node7739 -> node7740 [label=<<font color="black">true</font>> color="black"]
    node7739 -> node7753 [label=<<font color="black">false</font>> color="black"]
    node7742_name [shape=none, label=<<font color="black">Block[7742]</font>>]
    node7742_name -> node7742 [arrowhead=none, color="black", style=dashed]
    node7742 [shape=box, label=<<font color="black">[0] assert (= lhsKind ~lexicalBinding~)<BR ALIGN="LEFT"/>[1] assert (? lhs: &quot;ForDeclaration&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7742 -> node7743 [color="black"]
    node7740_name [shape=none, label=<<font color="black">Call[7740]</font>>]
    node7740_name -> node7740 [arrowhead=none, color="black", style=dashed]
    node7740 [shape=cds, label=<<font color="black">%5 = lhs-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node7740 -> node7741 [color="black"]
    node7753_name [shape=none, label=<<font color="black">Branch[7753]</font>>]
    node7753_name -> node7753 [arrowhead=none, color="black", style=dashed]
    node7753 [shape=diamond, label=<<font color="black">(= destructuring false)</font>> color="black" fillcolor="white", style=filled]
    node7753 -> node7754 [label=<<font color="black">true</font>> color="black"]
    node7753 -> node7763 [label=<<font color="black">false</font>> color="black"]
    node7743_name [shape=none, label=<<font color="black">Call[7743]</font>>]
    node7743_name -> node7743 [arrowhead=none, color="black", style=dashed]
    node7743 [shape=cds, label=<<font color="black">%6 = clo&lt;NewDeclarativeEnvironment&gt;(oldEnv)</font>> color="black" fillcolor="white", style=filled]
    node7743 -> node7744 [color="black"]
    node7741_name [shape=none, label=<<font color="black">Block[7741]</font>>]
    node7741_name -> node7741 [arrowhead=none, color="black", style=dashed]
    node7741 [shape=box, label=<<font color="black">[0] let lhsRef = %5<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7741 -> node7753 [color="black"]
    node7754_name [shape=none, label=<<font color="black">Branch[7754]</font>>]
    node7754_name -> node7754 [arrowhead=none, color="black", style=dashed]
    node7754 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? lhsRef) (! (= lhsRef.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node7754 -> node7755 [label=<<font color="black">true</font>> color="black"]
    node7754 -> node7756 [label=<<font color="black">false</font>> color="black"]
    node7763_name [shape=none, label=<<font color="black">Branch[7763]</font>>]
    node7763_name -> node7763 [arrowhead=none, color="black", style=dashed]
    node7763 [shape=diamond, label=<<font color="black">(= lhsKind ~assignment~)</font>> color="black" fillcolor="white", style=filled]
    node7763 -> node7764 [label=<<font color="black">true</font>> color="black"]
    node7763 -> node7767 [label=<<font color="black">false</font>> color="black"]
    node7744_name [shape=none, label=<<font color="black">Block[7744]</font>>]
    node7744_name -> node7744 [arrowhead=none, color="black", style=dashed]
    node7744 [shape=box, label=<<font color="black">[0] let iterationEnv = %6<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7744 -> node7745 [color="black"]
    node7755_name [shape=none, label=<<font color="black">Block[7755]</font>>]
    node7755_name -> node7755 [arrowhead=none, color="black", style=dashed]
    node7755 [shape=box, label=<<font color="black">[0] let status = lhsRef<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7755 -> node7776 [color="black"]
    node7756_name [shape=none, label=<<font color="black">Branch[7756]</font>>]
    node7756_name -> node7756 [arrowhead=none, color="black", style=dashed]
    node7756 [shape=diamond, label=<<font color="black">(= lhsKind ~lexicalBinding~)</font>> color="black" fillcolor="white", style=filled]
    node7756 -> node7757 [label=<<font color="black">true</font>> color="black"]
    node7756 -> node7760 [label=<<font color="black">false</font>> color="black"]
    node7764_name [shape=none, label=<<font color="black">Call[7764]</font>>]
    node7764_name -> node7764 [arrowhead=none, color="black", style=dashed]
    node7764 [shape=cds, label=<<font color="black">%14 = assignmentPattern-&gt;DestructuringAssignmentEvaluation(nextValue)</font>> color="black" fillcolor="white", style=filled]
    node7764 -> node7765 [color="black"]
    node7767_name [shape=none, label=<<font color="black">Branch[7767]</font>>]
    node7767_name -> node7767 [arrowhead=none, color="black", style=dashed]
    node7767 [shape=diamond, label=<<font color="black">(= lhsKind ~varBinding~)</font>> color="black" fillcolor="white", style=filled]
    node7767 -> node7768 [label=<<font color="black">true</font>> color="black"]
    node7767 -> node7772 [label=<<font color="black">false</font>> color="black"]
    node7745_name [shape=none, label=<<font color="black">Call[7745]</font>>]
    node7745_name -> node7745 [arrowhead=none, color="black", style=dashed]
    node7745 [shape=cds, label=<<font color="black">%7 = lhs-&gt;ForDeclarationBindingInstantiation(iterationEnv)</font>> color="black" fillcolor="white", style=filled]
    node7745 -> node7746 [color="black"]
    node7776_name [shape=none, label=<<font color="black">Branch[7776]</font>>]
    node7776_name -> node7776 [arrowhead=none, color="black", style=dashed]
    node7776 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? status) (! (= status.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node7776 -> node7777 [label=<<font color="black">true</font>> color="black"]
    node7776 -> node7786 [label=<<font color="black">false</font>> color="black"]
    node7757_name [shape=none, label=<<font color="black">Call[7757]</font>>]
    node7757_name -> node7757 [arrowhead=none, color="black", style=dashed]
    node7757 [shape=cds, label=<<font color="black">%10 = clo&lt;InitializeReferencedBinding&gt;(lhsRef, nextValue)</font>> color="black" fillcolor="white", style=filled]
    node7757 -> node7758 [color="black"]
    node7760_name [shape=none, label=<<font color="black">Call[7760]</font>>]
    node7760_name -> node7760 [arrowhead=none, color="black", style=dashed]
    node7760 [shape=cds, label=<<font color="black">%12 = clo&lt;PutValue&gt;(lhsRef, nextValue)</font>> color="black" fillcolor="white", style=filled]
    node7760 -> node7761 [color="black"]
    node7765_name [shape=none, label=<<font color="black">Call[7765]</font>>]
    node7765_name -> node7765 [arrowhead=none, color="black", style=dashed]
    node7765 [shape=cds, label=<<font color="black">%15 = clo&lt;Completion&gt;(%14)</font>> color="black" fillcolor="white", style=filled]
    node7765 -> node7766 [color="black"]
    node7768_name [shape=none, label=<<font color="black">Block[7768]</font>>]
    node7768_name -> node7768 [arrowhead=none, color="black", style=dashed]
    node7768 [shape=box, label=<<font color="black">[0] assert (? lhs: &quot;ForBinding&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7768 -> node7769 [color="black"]
    node7772_name [shape=none, label=<<font color="black">Block[7772]</font>>]
    node7772_name -> node7772 [arrowhead=none, color="black", style=dashed]
    node7772 [shape=box, label=<<font color="black">[0] assert (= lhsKind ~lexicalBinding~)<BR ALIGN="LEFT"/>[1] assert (? lhs: &quot;ForDeclaration&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7772 -> node7773 [color="black"]
    node7746_name [shape=none, label=<<font color="black">Block[7746]</font>>]
    node7746_name -> node7746 [arrowhead=none, color="black", style=dashed]
    node7746 [shape=box, label=<<font color="black">[0] @EXECUTION_STACK[0].LexicalEnvironment = iterationEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7746 -> node7747 [color="black"]
    node7777_name [shape=none, label=<<font color="black">Block[7777]</font>>]
    node7777_name -> node7777 [arrowhead=none, color="black", style=dashed]
    node7777 [shape=box, label=<<font color="black">[0] @EXECUTION_STACK[0].LexicalEnvironment = oldEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7777 -> node7778 [color="black"]
    node7786_name [shape=none, label=<<font color="black">Call[7786]</font>>]
    node7786_name -> node7786 [arrowhead=none, color="black", style=dashed]
    node7786 [shape=cds, label=<<font color="black">%22 = stmt-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node7786 -> node7787 [color="black"]
    node7758_name [shape=none, label=<<font color="black">Call[7758]</font>>]
    node7758_name -> node7758 [arrowhead=none, color="black", style=dashed]
    node7758 [shape=cds, label=<<font color="black">%11 = clo&lt;Completion&gt;(%10)</font>> color="black" fillcolor="white", style=filled]
    node7758 -> node7759 [color="black"]
    node7761_name [shape=none, label=<<font color="black">Call[7761]</font>>]
    node7761_name -> node7761 [arrowhead=none, color="black", style=dashed]
    node7761 [shape=cds, label=<<font color="black">%13 = clo&lt;Completion&gt;(%12)</font>> color="black" fillcolor="white", style=filled]
    node7761 -> node7762 [color="black"]
    node7766_name [shape=none, label=<<font color="black">Block[7766]</font>>]
    node7766_name -> node7766 [arrowhead=none, color="black", style=dashed]
    node7766 [shape=box, label=<<font color="black">[0] let status = %15<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7766 -> node7776 [color="black"]
    node7769_name [shape=none, label=<<font color="black">Call[7769]</font>>]
    node7769_name -> node7769 [arrowhead=none, color="black", style=dashed]
    node7769 [shape=cds, label=<<font color="black">%16 = lhs-&gt;BindingInitialization(nextValue, undefined)</font>> color="black" fillcolor="white", style=filled]
    node7769 -> node7770 [color="black"]
    node7773_name [shape=none, label=<<font color="black">Call[7773]</font>>]
    node7773_name -> node7773 [arrowhead=none, color="black", style=dashed]
    node7773 [shape=cds, label=<<font color="black">%18 = lhs-&gt;ForDeclarationBindingInitialization(nextValue, iterationEnv)</font>> color="black" fillcolor="white", style=filled]
    node7773 -> node7774 [color="black"]
    node7747_name [shape=none, label=<<font color="black">Branch[7747]</font>>]
    node7747_name -> node7747 [arrowhead=none, color="black", style=dashed]
    node7747 [shape=diamond, label=<<font color="black">(= destructuring false)</font>> color="black" fillcolor="white", style=filled]
    node7747 -> node7748 [label=<<font color="black">true</font>> color="black"]
    node7747 -> node7753 [label=<<font color="black">false</font>> color="black"]
    node7778_name [shape=none, label=<<font color="black">Branch[7778]</font>>]
    node7778_name -> node7778 [arrowhead=none, color="black", style=dashed]
    node7778 [shape=diamond, label=<<font color="black">(= iteratorKind ~async~)</font>> color="black" fillcolor="white", style=filled]
    node7778 -> node7779 [label=<<font color="black">true</font>> color="black"]
    node7778 -> node7781 [label=<<font color="black">false</font>> color="black"]
    node7787_name [shape=none, label=<<font color="black">Block[7787]</font>>]
    node7787_name -> node7787 [arrowhead=none, color="black", style=dashed]
    node7787 [shape=box, label=<<font color="black">[0] let result = %22<BR ALIGN="LEFT"/>[1] @EXECUTION_STACK[0].LexicalEnvironment = oldEnv<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7787 -> node7788 [color="black"]
    node7759_name [shape=none, label=<<font color="black">Block[7759]</font>>]
    node7759_name -> node7759 [arrowhead=none, color="black", style=dashed]
    node7759 [shape=box, label=<<font color="black">[0] let status = %11<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7759 -> node7776 [color="black"]
    node7762_name [shape=none, label=<<font color="black">Block[7762]</font>>]
    node7762_name -> node7762 [arrowhead=none, color="black", style=dashed]
    node7762 [shape=box, label=<<font color="black">[0] let status = %13<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7762 -> node7776 [color="black"]
    node7770_name [shape=none, label=<<font color="black">Call[7770]</font>>]
    node7770_name -> node7770 [arrowhead=none, color="black", style=dashed]
    node7770 [shape=cds, label=<<font color="black">%17 = clo&lt;Completion&gt;(%16)</font>> color="black" fillcolor="white", style=filled]
    node7770 -> node7771 [color="black"]
    node7774_name [shape=none, label=<<font color="black">Call[7774]</font>>]
    node7774_name -> node7774 [arrowhead=none, color="black", style=dashed]
    node7774 [shape=cds, label=<<font color="black">%19 = clo&lt;Completion&gt;(%18)</font>> color="black" fillcolor="white", style=filled]
    node7774 -> node7775 [color="black"]
    node7748_name [shape=none, label=<<font color="black">Block[7748]</font>>]
    node7748_name -> node7748 [arrowhead=none, color="black", style=dashed]
    node7748 [shape=box, label=<<font color="black">[0] assert (yet &quot;_lhs_ binds a single name.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7748 -> node7749 [color="black"]
    node7779_name [shape=none, label=<<font color="black">Call[7779]</font>>]
    node7779_name -> node7779 [arrowhead=none, color="black", style=dashed]
    node7779 [shape=cds, label=<<font color="black">%20 = clo&lt;AsyncIteratorClose&gt;(iteratorRecord, status)</font>> color="black" fillcolor="white", style=filled]
    node7779 -> node7780 [color="black"]
    node7781_name [shape=none, label=<<font color="black">Branch[7781]</font>>]
    node7781_name -> node7781 [arrowhead=none, color="black", style=dashed]
    node7781 [shape=diamond, label=<<font color="black">(= iterationKind ~enumerate~)</font>> color="black" fillcolor="white", style=filled]
    node7781 -> node7782 [label=<<font color="black">true</font>> color="black"]
    node7781 -> node7783 [label=<<font color="black">false</font>> color="black"]
    node7788_name [shape=none, label=<<font color="black">Call[7788]</font>>]
    node7788_name -> node7788 [arrowhead=none, color="black", style=dashed]
    node7788 [shape=cds, label=<<font color="black">%23 = clo&lt;LoopContinues&gt;(result, labelSet)</font>> color="black" fillcolor="white", style=filled]
    node7788 -> node7789 [color="black"]
    node7771_name [shape=none, label=<<font color="black">Block[7771]</font>>]
    node7771_name -> node7771 [arrowhead=none, color="black", style=dashed]
    node7771 [shape=box, label=<<font color="black">[0] let status = %17<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7771 -> node7776 [color="black"]
    node7775_name [shape=none, label=<<font color="black">Block[7775]</font>>]
    node7775_name -> node7775 [arrowhead=none, color="black", style=dashed]
    node7775 [shape=box, label=<<font color="black">[0] let status = %19<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7775 -> node7776 [color="black"]
    node7749_name [shape=none, label=<<font color="black">Call[7749]</font>>]
    node7749_name -> node7749 [arrowhead=none, color="black", style=dashed]
    node7749 [shape=cds, label=<<font color="black">%8 = lhs-&gt;BoundNames()</font>> color="black" fillcolor="white", style=filled]
    node7749 -> node7750 [color="black"]
    node7780_name [shape=none, label=<<font color="black">Block[7780]</font>>]
    node7780_name -> node7780 [arrowhead=none, color="black", style=dashed]
    node7780 [shape=box, label=<<font color="black">[0] return [? %20]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7780 -> cluster1459_exit [color="black"]
    node7782_name [shape=none, label=<<font color="black">Block[7782]</font>>]
    node7782_name -> node7782 [arrowhead=none, color="black", style=dashed]
    node7782 [shape=box, label=<<font color="black">[0] return [? status]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7782 -> cluster1459_exit [color="black"]
    node7783_name [shape=none, label=<<font color="black">Block[7783]</font>>]
    node7783_name -> node7783 [arrowhead=none, color="black", style=dashed]
    node7783 [shape=box, label=<<font color="black">[0] assert (= iterationKind ~iterate~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7783 -> node7784 [color="black"]
    node7789_name [shape=none, label=<<font color="black">Branch[7789]</font>>]
    node7789_name -> node7789 [arrowhead=none, color="black", style=dashed]
    node7789 [shape=diamond, label=<<font color="black">(= %23 false)</font>> color="black" fillcolor="white", style=filled]
    node7789 -> node7790 [label=<<font color="black">true</font>> color="black"]
    node7789 -> node7802 [label=<<font color="black">false</font>> color="black"]
    node7750_name [shape=none, label=<<font color="black">Block[7750]</font>>]
    node7750_name -> node7750 [arrowhead=none, color="black", style=dashed]
    node7750 [shape=box, label=<<font color="black">[0] let lhsName = %8[0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7750 -> node7751 [color="black"]
    node7784_name [shape=none, label=<<font color="black">Call[7784]</font>>]
    node7784_name -> node7784 [arrowhead=none, color="black", style=dashed]
    node7784 [shape=cds, label=<<font color="black">%21 = clo&lt;IteratorClose&gt;(iteratorRecord, status)</font>> color="black" fillcolor="white", style=filled]
    node7784 -> node7785 [color="black"]
    node7790_name [shape=none, label=<<font color="black">Branch[7790]</font>>]
    node7790_name -> node7790 [arrowhead=none, color="black", style=dashed]
    node7790 [shape=diamond, label=<<font color="black">(= iterationKind ~enumerate~)</font>> color="black" fillcolor="white", style=filled]
    node7790 -> node7791 [label=<<font color="black">true</font>> color="black"]
    node7790 -> node7793 [label=<<font color="black">false</font>> color="black"]
    node7802_name [shape=none, label=<<font color="black">Branch[7802]</font>>]
    node7802_name -> node7802 [arrowhead=none, color="black", style=dashed]
    node7802 [shape=diamond, label=<<font color="black">(! (= result.Value ~empty~))</font>> color="black" fillcolor="white", style=filled]
    node7802 -> node7803 [label=<<font color="black">true</font>> color="black"]
    node7802 -> node7724 [label=<<font color="black">false</font>> color="black"]
    node7751_name [shape=none, label=<<font color="black">Call[7751]</font>>]
    node7751_name -> node7751 [arrowhead=none, color="black", style=dashed]
    node7751 [shape=cds, label=<<font color="black">%9 = clo&lt;ResolveBinding&gt;(lhsName)</font>> color="black" fillcolor="white", style=filled]
    node7751 -> node7752 [color="black"]
    node7785_name [shape=none, label=<<font color="black">Block[7785]</font>>]
    node7785_name -> node7785 [arrowhead=none, color="black", style=dashed]
    node7785 [shape=box, label=<<font color="black">[0] return [? %21]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7785 -> cluster1459_exit [color="black"]
    node7791_name [shape=none, label=<<font color="black">Call[7791]</font>>]
    node7791_name -> node7791 [arrowhead=none, color="black", style=dashed]
    node7791 [shape=cds, label=<<font color="black">%24 = clo&lt;UpdateEmpty&gt;(result, V)</font>> color="black" fillcolor="white", style=filled]
    node7791 -> node7792 [color="black"]
    node7793_name [shape=none, label=<<font color="black">Block[7793]</font>>]
    node7793_name -> node7793 [arrowhead=none, color="black", style=dashed]
    node7793 [shape=box, label=<<font color="black">[0] assert (= iterationKind ~iterate~)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7793 -> node7794 [color="black"]
    node7803_name [shape=none, label=<<font color="black">Block[7803]</font>>]
    node7803_name -> node7803 [arrowhead=none, color="black", style=dashed]
    node7803 [shape=box, label=<<font color="black">[0] V = result.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7803 -> node7724 [color="black"]
    node7752_name [shape=none, label=<<font color="black">Block[7752]</font>>]
    node7752_name -> node7752 [arrowhead=none, color="black", style=dashed]
    node7752 [shape=box, label=<<font color="black">[0] let lhsRef = [! %9]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7752 -> node7753 [color="black"]
    node7792_name [shape=none, label=<<font color="black">Block[7792]</font>>]
    node7792_name -> node7792 [arrowhead=none, color="black", style=dashed]
    node7792 [shape=box, label=<<font color="black">[0] return [? %24]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7792 -> cluster1459_exit [color="black"]
    node7794_name [shape=none, label=<<font color="black">Call[7794]</font>>]
    node7794_name -> node7794 [arrowhead=none, color="black", style=dashed]
    node7794 [shape=cds, label=<<font color="black">%25 = clo&lt;UpdateEmpty&gt;(result, V)</font>> color="black" fillcolor="white", style=filled]
    node7794 -> node7795 [color="black"]
    node7795_name [shape=none, label=<<font color="black">Call[7795]</font>>]
    node7795_name -> node7795 [arrowhead=none, color="black", style=dashed]
    node7795 [shape=cds, label=<<font color="black">%26 = clo&lt;Completion&gt;(%25)</font>> color="black" fillcolor="white", style=filled]
    node7795 -> node7796 [color="black"]
    node7796_name [shape=none, label=<<font color="black">Block[7796]</font>>]
    node7796_name -> node7796 [arrowhead=none, color="black", style=dashed]
    node7796 [shape=box, label=<<font color="black">[0] status = %26<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7796 -> node7797 [color="black"]
    node7797_name [shape=none, label=<<font color="black">Branch[7797]</font>>]
    node7797_name -> node7797 [arrowhead=none, color="black", style=dashed]
    node7797 [shape=diamond, label=<<font color="black">(= iteratorKind ~async~)</font>> color="black" fillcolor="white", style=filled]
    node7797 -> node7798 [label=<<font color="black">true</font>> color="black"]
    node7797 -> node7800 [label=<<font color="black">false</font>> color="black"]
    node7798_name [shape=none, label=<<font color="black">Call[7798]</font>>]
    node7798_name -> node7798 [arrowhead=none, color="black", style=dashed]
    node7798 [shape=cds, label=<<font color="black">%27 = clo&lt;AsyncIteratorClose&gt;(iteratorRecord, status)</font>> color="black" fillcolor="white", style=filled]
    node7798 -> node7799 [color="black"]
    node7800_name [shape=none, label=<<font color="black">Call[7800]</font>>]
    node7800_name -> node7800 [arrowhead=none, color="black", style=dashed]
    node7800 [shape=cds, label=<<font color="black">%28 = clo&lt;IteratorClose&gt;(iteratorRecord, status)</font>> color="black" fillcolor="white", style=filled]
    node7800 -> node7801 [color="black"]
    node7799_name [shape=none, label=<<font color="black">Block[7799]</font>>]
    node7799_name -> node7799 [arrowhead=none, color="black", style=dashed]
    node7799 [shape=box, label=<<font color="black">[0] return [? %27]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7799 -> cluster1459_exit [color="black"]
    node7801_name [shape=none, label=<<font color="black">Block[7801]</font>>]
    node7801_name -> node7801 [arrowhead=none, color="black", style=dashed]
    node7801 [shape=box, label=<<font color="black">[0] return [? %28]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node7801 -> cluster1459_exit [color="black"]
  }
}