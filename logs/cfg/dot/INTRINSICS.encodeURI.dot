digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1993 {
    label = "def <BUILTIN>:INTRINSICS.encodeURI(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster1993_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1993_entry_name -> cluster1993_entry [arrowhead=none, color="black", style=dashed]
    cluster1993_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1993_entry -> node11013 [color="black"]
    cluster1993_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1993_exit_name -> cluster1993_exit [arrowhead=none, color="black", style=dashed]
    cluster1993_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11013_name [shape=none, label=<<font color="black">Branch[11013]</font>>]
    node11013_name -> node11013 [arrowhead=none, color="black", style=dashed]
    node11013 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11013 -> node11014 [label=<<font color="black">true</font>> color="black"]
    node11013 -> node11015 [label=<<font color="black">false</font>> color="black"]
    node11014_name [shape=none, label=<<font color="black">Block[11014]</font>>]
    node11014_name -> node11014 [arrowhead=none, color="black", style=dashed]
    node11014 [shape=box, label=<<font color="black">[0] let uri = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11014 -> node11016 [color="black"]
    node11015_name [shape=none, label=<<font color="black">Block[11015]</font>>]
    node11015_name -> node11015 [arrowhead=none, color="black", style=dashed]
    node11015 [shape=box, label=<<font color="black">[0] let uri = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11015 -> node11016 [color="black"]
    node11016_name [shape=none, label=<<font color="black">Call[11016]</font>>]
    node11016_name -> node11016 [arrowhead=none, color="black", style=dashed]
    node11016 [shape=cds, label=<<font color="black">%0 = clo&lt;ToString&gt;(uri)</font>> color="black" fillcolor="white", style=filled]
    node11016 -> node11017 [color="black"]
    node11017_name [shape=none, label=<<font color="black">Block[11017]</font>>]
    node11017_name -> node11017 [arrowhead=none, color="black", style=dashed]
    node11017 [shape=box, label=<<font color="black">[0] let uriString = [? %0]<BR ALIGN="LEFT"/>[1] (yet &quot;Let _unescapedURISet_ be a String containing one instance of each code unit valid in |uriReserved| and |uriUnescaped| plus *\&quot;#\&quot;*.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11017 -> node11018 [color="black"]
    node11018_name [shape=none, label=<<font color="black">Call[11018]</font>>]
    node11018_name -> node11018 [arrowhead=none, color="black", style=dashed]
    node11018 [shape=cds, label=<<font color="black">%1 = clo&lt;Encode&gt;(uriString, unescapedURISet)</font>> color="black" fillcolor="white", style=filled]
    node11018 -> node11019 [color="black"]
    node11019_name [shape=none, label=<<font color="black">Block[11019]</font>>]
    node11019_name -> node11019 [arrowhead=none, color="black", style=dashed]
    node11019 [shape=box, label=<<font color="black">[0] return [? %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11019 -> cluster1993_exit [color="black"]
  }
}