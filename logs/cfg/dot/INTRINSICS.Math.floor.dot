digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2091 {
    label = "def <BUILTIN>:INTRINSICS.Math.floor(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2091_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2091_entry_name -> cluster2091_entry [arrowhead=none, color="black", style=dashed]
    cluster2091_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2091_entry -> node12196 [color="black"]
    cluster2091_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2091_exit_name -> cluster2091_exit [arrowhead=none, color="black", style=dashed]
    cluster2091_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node12196_name [shape=none, label=<<font color="black">Branch[12196]</font>>]
    node12196_name -> node12196 [arrowhead=none, color="black", style=dashed]
    node12196 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node12196 -> node12197 [label=<<font color="black">true</font>> color="black"]
    node12196 -> node12198 [label=<<font color="black">false</font>> color="black"]
    node12197_name [shape=none, label=<<font color="black">Block[12197]</font>>]
    node12197_name -> node12197 [arrowhead=none, color="black", style=dashed]
    node12197 [shape=box, label=<<font color="black">[0] let x = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12197 -> node12199 [color="black"]
    node12198_name [shape=none, label=<<font color="black">Block[12198]</font>>]
    node12198_name -> node12198 [arrowhead=none, color="black", style=dashed]
    node12198 [shape=box, label=<<font color="black">[0] let x = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12198 -> node12199 [color="black"]
    node12199_name [shape=none, label=<<font color="black">Call[12199]</font>>]
    node12199_name -> node12199 [arrowhead=none, color="black", style=dashed]
    node12199 [shape=cds, label=<<font color="black">%0 = clo&lt;ToNumber&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node12199 -> node12200 [color="black"]
    node12200_name [shape=none, label=<<font color="black">Block[12200]</font>>]
    node12200_name -> node12200 [arrowhead=none, color="black", style=dashed]
    node12200 [shape=box, label=<<font color="black">[0] let n = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12200 -> node12201 [color="black"]
    node12201_name [shape=none, label=<<font color="black">Branch[12201]</font>>]
    node12201_name -> node12201 [arrowhead=none, color="black", style=dashed]
    node12201 [shape=diamond, label=<<font color="black">(|| (= n NaN) (|| (= n 0.0f) (|| (= n -0.0f) (|| (= n +INF) (= n -INF)))))</font>> color="black" fillcolor="white", style=filled]
    node12201 -> node12202 [label=<<font color="black">true</font>> color="black"]
    node12201 -> node12203 [label=<<font color="black">false</font>> color="black"]
    node12202_name [shape=none, label=<<font color="black">Block[12202]</font>>]
    node12202_name -> node12202 [arrowhead=none, color="black", style=dashed]
    node12202 [shape=box, label=<<font color="black">[0] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12202 -> cluster2091_exit [color="black"]
    node12203_name [shape=none, label=<<font color="black">Branch[12203]</font>>]
    node12203_name -> node12203 [arrowhead=none, color="black", style=dashed]
    node12203 [shape=diamond, label=<<font color="black">(&amp;&amp; (&lt; n 1.0f) (&lt; 0.0f n))</font>> color="black" fillcolor="white", style=filled]
    node12203 -> node12204 [label=<<font color="black">true</font>> color="black"]
    node12203 -> node12205 [label=<<font color="black">false</font>> color="black"]
    node12204_name [shape=none, label=<<font color="black">Block[12204]</font>>]
    node12204_name -> node12204 [arrowhead=none, color="black", style=dashed]
    node12204 [shape=box, label=<<font color="black">[0] return 0.0f<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12204 -> cluster2091_exit [color="black"]
    node12205_name [shape=none, label=<<font color="black">Branch[12205]</font>>]
    node12205_name -> node12205 [arrowhead=none, color="black", style=dashed]
    node12205 [shape=diamond, label=<<font color="black">(&amp;&amp; (? n: &quot;Number&quot;) (= ([math] n) (floor ([math] n))))</font>> color="black" fillcolor="white", style=filled]
    node12205 -> node12206 [label=<<font color="black">true</font>> color="black"]
    node12205 -> node12207 [label=<<font color="black">false</font>> color="black"]
    node12206_name [shape=none, label=<<font color="black">Block[12206]</font>>]
    node12206_name -> node12206 [arrowhead=none, color="black", style=dashed]
    node12206 [shape=box, label=<<font color="black">[0] return n<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12206 -> cluster2091_exit [color="black"]
    node12207_name [shape=none, label=<<font color="black">Block[12207]</font>>]
    node12207_name -> node12207 [arrowhead=none, color="black", style=dashed]
    node12207 [shape=box, label=<<font color="black">[0] (yet &quot;Return the greatest (closest to +&infin;) integral Number value that is not greater than _n_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12207 -> cluster2091_exit [color="black"]
  }
}