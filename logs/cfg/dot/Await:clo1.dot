digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster3 {
    label = "def <BUILTIN-CLO>:Await:clo1(this: Unknown, argumentsList: Unknown, NewTarget: Unknown): Unknown"
    style = rounded
    cluster3_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster3_entry_name -> cluster3_entry [arrowhead=none, color="black", style=dashed]
    cluster3_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster3_entry -> node11 [color="black"]
    cluster3_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster3_exit_name -> cluster3_exit [arrowhead=none, color="black", style=dashed]
    cluster3_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11_name [shape=none, label=<<font color="black">Branch[11]</font>>]
    node11_name -> node11 [arrowhead=none, color="black", style=dashed]
    node11 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11 -> node12 [label=<<font color="black">true</font>> color="black"]
    node11 -> node13 [label=<<font color="black">false</font>> color="black"]
    node12_name [shape=none, label=<<font color="black">Block[12]</font>>]
    node12_name -> node12 [arrowhead=none, color="black", style=dashed]
    node12 [shape=box, label=<<font color="black">[0] let reason = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node12 -> node14 [color="black"]
    node13_name [shape=none, label=<<font color="black">Block[13]</font>>]
    node13_name -> node13 [arrowhead=none, color="black", style=dashed]
    node13 [shape=box, label=<<font color="black">[0] let reason = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node13 -> node14 [color="black"]
    node14_name [shape=none, label=<<font color="black">Block[14]</font>>]
    node14_name -> node14 [arrowhead=none, color="black", style=dashed]
    node14 [shape=box, label=<<font color="black">[0] let prevContext = @EXECUTION_STACK[0]<BR ALIGN="LEFT"/>[1] nop<BR ALIGN="LEFT"/>[2] push asyncContext &gt; @EXECUTION_STACK<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node14 -> node15 [color="black"]
    node15_name [shape=none, label=<<font color="black">Call[15]</font>>]
    node15_name -> node15 [arrowhead=none, color="black", style=dashed]
    node15 [shape=cds, label=<<font color="black">%1 = clo&lt;ThrowCompletion&gt;(reason)</font>> color="black" fillcolor="white", style=filled]
    node15 -> node16 [color="black"]
    node16_name [shape=none, label=<<font color="black">Branch[16]</font>>]
    node16_name -> node16 [arrowhead=none, color="black", style=dashed]
    node16 [shape=diamond, label=<<font color="black">(= asyncContext.ReturnCont absent)</font>> color="black" fillcolor="white", style=filled]
    node16 -> node17 [label=<<font color="black">true</font>> color="black"]
    node16 -> node18 [label=<<font color="black">false</font>> color="black"]
    node17_name [shape=none, label=<<font color="black">Block[17]</font>>]
    node17_name -> node17 [arrowhead=none, color="black", style=dashed]
    node17 [shape=box, label=<<font color="black">[0] asyncContext.ReturnCont = (new [])[#1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17 -> node18 [color="black"]
    node18_name [shape=none, label=<<font color="black">Block[18]</font>>]
    node18_name -> node18 [arrowhead=none, color="black", style=dashed]
    node18 [shape=box, label=<<font color="black">[0] push cont&lt;Await:clo1:cont0&gt; &gt; asyncContext.ReturnCont<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18 -> node19 [color="black"]
    node19_name [shape=none, label=<<font color="black">Call[19]</font>>]
    node19_name -> node19 [arrowhead=none, color="black", style=dashed]
    node19 [shape=cds, label=<<font color="black">%0 = asyncContext.ResumeCont(%1)</font>> color="black" fillcolor="white", style=filled]
    node19 -> cluster3_exit [color="black"]
  }
}