digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2492 {
    label = "def <BUILTIN>:INTRINSICS.get SharedArrayBuffer.prototype.byteLength(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2492_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2492_entry_name -> cluster2492_entry [arrowhead=none, color="black", style=dashed]
    cluster2492_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2492_entry -> node17570 [color="black"]
    cluster2492_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2492_exit_name -> cluster2492_exit [arrowhead=none, color="black", style=dashed]
    cluster2492_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node17570_name [shape=none, label=<<font color="black">Block[17570]</font>>]
    node17570_name -> node17570 [arrowhead=none, color="black", style=dashed]
    node17570 [shape=box, label=<<font color="black">[0] let O = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17570 -> node17571 [color="black"]
    node17571_name [shape=none, label=<<font color="black">Call[17571]</font>>]
    node17571_name -> node17571 [arrowhead=none, color="black", style=dashed]
    node17571 [shape=cds, label=<<font color="black">%0 = clo&lt;RequireInternalSlot&gt;(O, &quot;ArrayBufferData&quot;)</font>> color="black" fillcolor="white", style=filled]
    node17571 -> node17572 [color="black"]
    node17572_name [shape=none, label=<<font color="black">Block[17572]</font>>]
    node17572_name -> node17572 [arrowhead=none, color="black", style=dashed]
    node17572 [shape=box, label=<<font color="black">[0] [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17572 -> node17573 [color="black"]
    node17573_name [shape=none, label=<<font color="black">Call[17573]</font>>]
    node17573_name -> node17573 [arrowhead=none, color="black", style=dashed]
    node17573 [shape=cds, label=<<font color="black">%1 = clo&lt;IsSharedArrayBuffer&gt;(O)</font>> color="black" fillcolor="white", style=filled]
    node17573 -> node17574 [color="black"]
    node17574_name [shape=none, label=<<font color="black">Branch[17574]</font>>]
    node17574_name -> node17574 [arrowhead=none, color="black", style=dashed]
    node17574 [shape=diamond, label=<<font color="black">(= %1 false)</font>> color="black" fillcolor="white", style=filled]
    node17574 -> node17575 [label=<<font color="black">true</font>> color="black"]
    node17574 -> node17576 [label=<<font color="black">false</font>> color="black"]
    node17575_name [shape=none, label=<<font color="black">Block[17575]</font>>]
    node17575_name -> node17575 [arrowhead=none, color="black", style=dashed]
    node17575 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1162])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17575 -> cluster2492_exit [color="black"]
    node17576_name [shape=none, label=<<font color="black">Block[17576]</font>>]
    node17576_name -> node17576 [arrowhead=none, color="black", style=dashed]
    node17576 [shape=box, label=<<font color="black">[0] let length = O.ArrayBufferByteLength<BR ALIGN="LEFT"/>[1] return ([number] length)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node17576 -> cluster2492_exit [color="black"]
  }
}