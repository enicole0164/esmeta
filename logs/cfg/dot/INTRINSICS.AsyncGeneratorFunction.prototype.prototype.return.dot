digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2624 {
    label = "def <BUILTIN>:INTRINSICS.AsyncGeneratorFunction.prototype.prototype.return(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2624_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2624_entry_name -> cluster2624_entry [arrowhead=none, color="black", style=dashed]
    cluster2624_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2624_entry -> node19429 [color="black"]
    cluster2624_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2624_exit_name -> cluster2624_exit [arrowhead=none, color="black", style=dashed]
    cluster2624_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node19429_name [shape=none, label=<<font color="black">Branch[19429]</font>>]
    node19429_name -> node19429 [arrowhead=none, color="black", style=dashed]
    node19429 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node19429 -> node19430 [label=<<font color="black">true</font>> color="black"]
    node19429 -> node19431 [label=<<font color="black">false</font>> color="black"]
    node19430_name [shape=none, label=<<font color="black">Block[19430]</font>>]
    node19430_name -> node19430 [arrowhead=none, color="black", style=dashed]
    node19430 [shape=box, label=<<font color="black">[0] let value = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19430 -> node19432 [color="black"]
    node19431_name [shape=none, label=<<font color="black">Block[19431]</font>>]
    node19431_name -> node19431 [arrowhead=none, color="black", style=dashed]
    node19431 [shape=box, label=<<font color="black">[0] let value = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19431 -> node19432 [color="black"]
    node19432_name [shape=none, label=<<font color="black">Block[19432]</font>>]
    node19432_name -> node19432 [arrowhead=none, color="black", style=dashed]
    node19432 [shape=box, label=<<font color="black">[0] let generator = this<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19432 -> node19433 [color="black"]
    node19433_name [shape=none, label=<<font color="black">Call[19433]</font>>]
    node19433_name -> node19433 [arrowhead=none, color="black", style=dashed]
    node19433 [shape=cds, label=<<font color="black">%0 = clo&lt;NewPromiseCapability&gt;(@EXECUTION_STACK[0].Realm.Intrinsics[&quot;%Promise%&quot;])</font>> color="black" fillcolor="white", style=filled]
    node19433 -> node19434 [color="black"]
    node19434_name [shape=none, label=<<font color="black">Block[19434]</font>>]
    node19434_name -> node19434 [arrowhead=none, color="black", style=dashed]
    node19434 [shape=box, label=<<font color="black">[0] let promiseCapability = [! %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19434 -> node19435 [color="black"]
    node19435_name [shape=none, label=<<font color="black">Call[19435]</font>>]
    node19435_name -> node19435 [arrowhead=none, color="black", style=dashed]
    node19435 [shape=cds, label=<<font color="black">%1 = clo&lt;AsyncGeneratorValidate&gt;(generator, ~empty~)</font>> color="black" fillcolor="white", style=filled]
    node19435 -> node19436 [color="black"]
    node19436_name [shape=none, label=<<font color="black">Call[19436]</font>>]
    node19436_name -> node19436 [arrowhead=none, color="black", style=dashed]
    node19436 [shape=cds, label=<<font color="black">%2 = clo&lt;Completion&gt;(%1)</font>> color="black" fillcolor="white", style=filled]
    node19436 -> node19437 [color="black"]
    node19437_name [shape=none, label=<<font color="black">Block[19437]</font>>]
    node19437_name -> node19437 [arrowhead=none, color="black", style=dashed]
    node19437 [shape=box, label=<<font color="black">[0] let result = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19437 -> node19438 [color="black"]
    node19438_name [shape=none, label=<<font color="black">Branch[19438]</font>>]
    node19438_name -> node19438 [arrowhead=none, color="black", style=dashed]
    node19438 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? result) (! (= result.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node19438 -> node19439 [label=<<font color="black">true</font>> color="black"]
    node19438 -> node19441 [label=<<font color="black">false</font>> color="black"]
    node19439_name [shape=none, label=<<font color="black">Call[19439]</font>>]
    node19439_name -> node19439 [arrowhead=none, color="black", style=dashed]
    node19439 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(promiseCapability.Reject, undefined, (new [result.Value])[#1325])</font>> color="black" fillcolor="white", style=filled]
    node19439 -> node19440 [color="black"]
    node19441_name [shape=none, label=<<font color="black">Branch[19441]</font>>]
    node19441_name -> node19441 [arrowhead=none, color="black", style=dashed]
    node19441 [shape=diamond, label=<<font color="black">(? result: &quot;CompletionRecord&quot;)</font>> color="black" fillcolor="white", style=filled]
    node19441 -> node19442 [label=<<font color="black">true</font>> color="black"]
    node19441 -> node19443 [label=<<font color="black">false</font>> color="black"]
    node19440_name [shape=none, label=<<font color="black">Block[19440]</font>>]
    node19440_name -> node19440 [arrowhead=none, color="black", style=dashed]
    node19440 [shape=box, label=<<font color="black">[0] [? %3]<BR ALIGN="LEFT"/>[1] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19440 -> cluster2624_exit [color="black"]
    node19442_name [shape=none, label=<<font color="black">Block[19442]</font>>]
    node19442_name -> node19442 [arrowhead=none, color="black", style=dashed]
    node19442 [shape=box, label=<<font color="black">[0] result = result.Value<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19442 -> node19443 [color="black"]
    node19443_name [shape=none, label=<<font color="black">Block[19443]</font>>]
    node19443_name -> node19443 [arrowhead=none, color="black", style=dashed]
    node19443 [shape=box, label=<<font color="black">[0] let completion = comp[~return~/~empty~](value)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19443 -> node19444 [color="black"]
    node19444_name [shape=none, label=<<font color="black">Call[19444]</font>>]
    node19444_name -> node19444 [arrowhead=none, color="black", style=dashed]
    node19444 [shape=cds, label=<<font color="black">%4 = clo&lt;AsyncGeneratorEnqueue&gt;(generator, completion, promiseCapability)</font>> color="black" fillcolor="white", style=filled]
    node19444 -> node19445 [color="black"]
    node19445_name [shape=none, label=<<font color="black">Block[19445]</font>>]
    node19445_name -> node19445 [arrowhead=none, color="black", style=dashed]
    node19445 [shape=box, label=<<font color="black">[0] let state = generator.AsyncGeneratorState<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19445 -> node19446 [color="black"]
    node19446_name [shape=none, label=<<font color="black">Branch[19446]</font>>]
    node19446_name -> node19446 [arrowhead=none, color="black", style=dashed]
    node19446 [shape=diamond, label=<<font color="black">(|| (= state ~suspendedStart~) (= state ~completed~))</font>> color="black" fillcolor="white", style=filled]
    node19446 -> node19447 [label=<<font color="black">true</font>> color="black"]
    node19446 -> node19450 [label=<<font color="black">false</font>> color="black"]
    node19447_name [shape=none, label=<<font color="black">Block[19447]</font>>]
    node19447_name -> node19447 [arrowhead=none, color="black", style=dashed]
    node19447 [shape=box, label=<<font color="black">[0] generator.AsyncGeneratorState = ~awaiting-return~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19447 -> node19448 [color="black"]
    node19450_name [shape=none, label=<<font color="black">Branch[19450]</font>>]
    node19450_name -> node19450 [arrowhead=none, color="black", style=dashed]
    node19450 [shape=diamond, label=<<font color="black">(= state ~suspendedYield~)</font>> color="black" fillcolor="white", style=filled]
    node19450 -> node19451 [label=<<font color="black">true</font>> color="black"]
    node19450 -> node19452 [label=<<font color="black">false</font>> color="black"]
    node19448_name [shape=none, label=<<font color="black">Call[19448]</font>>]
    node19448_name -> node19448 [arrowhead=none, color="black", style=dashed]
    node19448 [shape=cds, label=<<font color="black">%5 = clo&lt;AsyncGeneratorAwaitReturn&gt;(generator)</font>> color="black" fillcolor="white", style=filled]
    node19448 -> node19449 [color="black"]
    node19451_name [shape=none, label=<<font color="black">Call[19451]</font>>]
    node19451_name -> node19451 [arrowhead=none, color="black", style=dashed]
    node19451 [shape=cds, label=<<font color="black">%6 = clo&lt;AsyncGeneratorResume&gt;(generator, completion)</font>> color="black" fillcolor="white", style=filled]
    node19451 -> node19453 [color="black"]
    node19452_name [shape=none, label=<<font color="black">Block[19452]</font>>]
    node19452_name -> node19452 [arrowhead=none, color="black", style=dashed]
    node19452 [shape=box, label=<<font color="black">[0] assert (|| (= state ~executing~) (= state ~awaiting-return~))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19452 -> node19453 [color="black"]
    node19449_name [shape=none, label=<<font color="black">Block[19449]</font>>]
    node19449_name -> node19449 [arrowhead=none, color="black", style=dashed]
    node19449 [shape=box, label=<<font color="black">[0] [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19449 -> node19453 [color="black"]
    node19453_name [shape=none, label=<<font color="black">Block[19453]</font>>]
    node19453_name -> node19453 [arrowhead=none, color="black", style=dashed]
    node19453 [shape=box, label=<<font color="black">[0] return promiseCapability.Promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node19453 -> cluster2624_exit [color="black"]
  }
}