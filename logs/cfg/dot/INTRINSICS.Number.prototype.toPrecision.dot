digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2066 {
    label = "def <BUILTIN>:INTRINSICS.Number.prototype.toPrecision(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2066_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2066_entry_name -> cluster2066_entry [arrowhead=none, color="black", style=dashed]
    cluster2066_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2066_entry -> node11886 [color="black"]
    cluster2066_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2066_exit_name -> cluster2066_exit [arrowhead=none, color="black", style=dashed]
    cluster2066_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11886_name [shape=none, label=<<font color="black">Branch[11886]</font>>]
    node11886_name -> node11886 [arrowhead=none, color="black", style=dashed]
    node11886 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11886 -> node11887 [label=<<font color="black">true</font>> color="black"]
    node11886 -> node11888 [label=<<font color="black">false</font>> color="black"]
    node11887_name [shape=none, label=<<font color="black">Block[11887]</font>>]
    node11887_name -> node11887 [arrowhead=none, color="black", style=dashed]
    node11887 [shape=box, label=<<font color="black">[0] let precision = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11887 -> node11889 [color="black"]
    node11888_name [shape=none, label=<<font color="black">Block[11888]</font>>]
    node11888_name -> node11888 [arrowhead=none, color="black", style=dashed]
    node11888 [shape=box, label=<<font color="black">[0] let precision = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11888 -> node11889 [color="black"]
    node11889_name [shape=none, label=<<font color="black">Call[11889]</font>>]
    node11889_name -> node11889 [arrowhead=none, color="black", style=dashed]
    node11889 [shape=cds, label=<<font color="black">%0 = clo&lt;thisNumberValue&gt;(this)</font>> color="black" fillcolor="white", style=filled]
    node11889 -> node11890 [color="black"]
    node11890_name [shape=none, label=<<font color="black">Block[11890]</font>>]
    node11890_name -> node11890 [arrowhead=none, color="black", style=dashed]
    node11890 [shape=box, label=<<font color="black">[0] let x = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11890 -> node11891 [color="black"]
    node11891_name [shape=none, label=<<font color="black">Branch[11891]</font>>]
    node11891_name -> node11891 [arrowhead=none, color="black", style=dashed]
    node11891 [shape=diamond, label=<<font color="black">(= precision undefined)</font>> color="black" fillcolor="white", style=filled]
    node11891 -> node11892 [label=<<font color="black">true</font>> color="black"]
    node11891 -> node11894 [label=<<font color="black">false</font>> color="black"]
    node11892_name [shape=none, label=<<font color="black">Call[11892]</font>>]
    node11892_name -> node11892 [arrowhead=none, color="black", style=dashed]
    node11892 [shape=cds, label=<<font color="black">%1 = clo&lt;ToString&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node11892 -> node11893 [color="black"]
    node11894_name [shape=none, label=<<font color="black">Call[11894]</font>>]
    node11894_name -> node11894 [arrowhead=none, color="black", style=dashed]
    node11894 [shape=cds, label=<<font color="black">%2 = clo&lt;ToIntegerOrInfinity&gt;(precision)</font>> color="black" fillcolor="white", style=filled]
    node11894 -> node11895 [color="black"]
    node11893_name [shape=none, label=<<font color="black">Block[11893]</font>>]
    node11893_name -> node11893 [arrowhead=none, color="black", style=dashed]
    node11893 [shape=box, label=<<font color="black">[0] return [! %1]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11893 -> cluster2066_exit [color="black"]
    node11895_name [shape=none, label=<<font color="black">Block[11895]</font>>]
    node11895_name -> node11895 [arrowhead=none, color="black", style=dashed]
    node11895 [shape=box, label=<<font color="black">[0] let p = [? %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11895 -> node11896 [color="black"]
    node11896_name [shape=none, label=<<font color="black">Branch[11896]</font>>]
    node11896_name -> node11896 [arrowhead=none, color="black", style=dashed]
    node11896 [shape=diamond, label=<<font color="black">(|| (= x NaN) (|| (= x +INF) (= x -INF)))</font>> color="black" fillcolor="white", style=filled]
    node11896 -> node11897 [label=<<font color="black">true</font>> color="black"]
    node11896 -> node11899 [label=<<font color="black">false</font>> color="black"]
    node11897_name [shape=none, label=<<font color="black">Call[11897]</font>>]
    node11897_name -> node11897 [arrowhead=none, color="black", style=dashed]
    node11897 [shape=cds, label=<<font color="black">%3 = clo&lt;Number::toString&gt;(x)</font>> color="black" fillcolor="white", style=filled]
    node11897 -> node11898 [color="black"]
    node11899_name [shape=none, label=<<font color="black">Branch[11899]</font>>]
    node11899_name -> node11899 [arrowhead=none, color="black", style=dashed]
    node11899 [shape=diamond, label=<<font color="black">(|| (&lt; p 1) (&lt; 100 p))</font>> color="black" fillcolor="white", style=filled]
    node11899 -> node11900 [label=<<font color="black">true</font>> color="black"]
    node11899 -> node11901 [label=<<font color="black">false</font>> color="black"]
    node11898_name [shape=none, label=<<font color="black">Block[11898]</font>>]
    node11898_name -> node11898 [arrowhead=none, color="black", style=dashed]
    node11898 [shape=box, label=<<font color="black">[0] return %3<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11898 -> cluster2066_exit [color="black"]
    node11900_name [shape=none, label=<<font color="black">Block[11900]</font>>]
    node11900_name -> node11900 [arrowhead=none, color="black", style=dashed]
    node11900 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%RangeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#929])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11900 -> cluster2066_exit [color="black"]
    node11901_name [shape=none, label=<<font color="black">Block[11901]</font>>]
    node11901_name -> node11901 [arrowhead=none, color="black", style=dashed]
    node11901 [shape=box, label=<<font color="black">[0] x = ([math] x)<BR ALIGN="LEFT"/>[1] let s = &quot;&quot;<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11901 -> node11902 [color="black"]
    node11902_name [shape=none, label=<<font color="black">Branch[11902]</font>>]
    node11902_name -> node11902 [arrowhead=none, color="black", style=dashed]
    node11902 [shape=diamond, label=<<font color="black">(&lt; x 0)</font>> color="black" fillcolor="white", style=filled]
    node11902 -> node11903 [label=<<font color="black">true</font>> color="black"]
    node11902 -> node11904 [label=<<font color="black">false</font>> color="black"]
    node11903_name [shape=none, label=<<font color="black">Block[11903]</font>>]
    node11903_name -> node11903 [arrowhead=none, color="black", style=dashed]
    node11903 [shape=box, label=<<font color="black">[0] (yet &quot;Set _s_ to the code unit 0x002D (HYPHEN-MINUS).&quot;)<BR ALIGN="LEFT"/>[1] x = (- x)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11903 -> node11904 [color="black"]
    node11904_name [shape=none, label=<<font color="black">Branch[11904]</font>>]
    node11904_name -> node11904 [arrowhead=none, color="black", style=dashed]
    node11904 [shape=diamond, label=<<font color="black">(== x 0)</font>> color="black" fillcolor="white", style=filled]
    node11904 -> node11905 [label=<<font color="black">true</font>> color="black"]
    node11904 -> node11906 [label=<<font color="black">false</font>> color="black"]
    node11905_name [shape=none, label=<<font color="black">Block[11905]</font>>]
    node11905_name -> node11905 [arrowhead=none, color="black", style=dashed]
    node11905 [shape=box, label=<<font color="black">[0] (yet &quot;Let _m_ be the String value consisting of _p_ occurrences of the code unit 0x0030 (DIGIT ZERO).&quot;)<BR ALIGN="LEFT"/>[1] let e = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11905 -> node11915 [color="black"]
    node11906_name [shape=none, label=<<font color="black">Block[11906]</font>>]
    node11906_name -> node11906 [arrowhead=none, color="black", style=dashed]
    node11906 [shape=box, label=<<font color="black">[0] (yet &quot;Let _e_ and _n_ be integers such that 10&lt;sup&gt;_p_ - 1&lt;/sup&gt; &le; _n_ &lt; 10&lt;sup&gt;_p_&lt;/sup&gt; and for which _n_ &times; 10&lt;sup&gt;_e_ - _p_ + 1&lt;/sup&gt; - _x_ is as close to zero as possible. If there are two such sets of _e_ and _n_, pick the _e_ and _n_ for which _n_ &times; 10&lt;sup&gt;_e_ - _p_ + 1&lt;/sup&gt; is larger.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _m_ be the String value consisting of the digits of the decimal representation of _n_ (in order, with no leading zeroes).&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11906 -> node11907 [color="black"]
    node11915_name [shape=none, label=<<font color="black">Branch[11915]</font>>]
    node11915_name -> node11915 [arrowhead=none, color="black", style=dashed]
    node11915 [shape=diamond, label=<<font color="black">(== e (- p 1))</font>> color="black" fillcolor="white", style=filled]
    node11915 -> node11916 [label=<<font color="black">true</font>> color="black"]
    node11915 -> node11917 [label=<<font color="black">false</font>> color="black"]
    node11907_name [shape=none, label=<<font color="black">Branch[11907]</font>>]
    node11907_name -> node11907 [arrowhead=none, color="black", style=dashed]
    node11907 [shape=diamond, label=<<font color="black">(|| (&lt; e (- 6)) (! (&lt; e p)))</font>> color="black" fillcolor="white", style=filled]
    node11907 -> node11908 [label=<<font color="black">true</font>> color="black"]
    node11907 -> node11915 [label=<<font color="black">false</font>> color="black"]
    node11916_name [shape=none, label=<<font color="black">Block[11916]</font>>]
    node11916_name -> node11916 [arrowhead=none, color="black", style=dashed]
    node11916 [shape=box, label=<<font color="black">[0] return (concat s m)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11916 -> cluster2066_exit [color="black"]
    node11917_name [shape=none, label=<<font color="black">Branch[11917]</font>>]
    node11917_name -> node11917 [arrowhead=none, color="black", style=dashed]
    node11917 [shape=diamond, label=<<font color="black">(! (&lt; e 0))</font>> color="black" fillcolor="white", style=filled]
    node11917 -> node11918 [label=<<font color="black">true</font>> color="black"]
    node11917 -> node11919 [label=<<font color="black">false</font>> color="black"]
    node11908_name [shape=none, label=<<font color="black">Block[11908]</font>>]
    node11908_name -> node11908 [arrowhead=none, color="black", style=dashed]
    node11908 [shape=box, label=<<font color="black">[0] assert (! (== e 0))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11908 -> node11909 [color="black"]
    node11918_name [shape=none, label=<<font color="black">Block[11918]</font>>]
    node11918_name -> node11918 [arrowhead=none, color="black", style=dashed]
    node11918 [shape=box, label=<<font color="black">[0] (yet &quot;Set _m_ to the string-concatenation of the first _e_ + 1 code units of _m_, the code unit 0x002E (FULL STOP), and the remaining _p_ - (_e_ + 1) code units of _m_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11918 -> node11920 [color="black"]
    node11919_name [shape=none, label=<<font color="black">Block[11919]</font>>]
    node11919_name -> node11919 [arrowhead=none, color="black", style=dashed]
    node11919 [shape=box, label=<<font color="black">[0] (yet &quot;Set _m_ to the string-concatenation of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL STOP), -(_e_ + 1) occurrences of the code unit 0x0030 (DIGIT ZERO), and the String _m_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11919 -> node11920 [color="black"]
    node11909_name [shape=none, label=<<font color="black">Branch[11909]</font>>]
    node11909_name -> node11909 [arrowhead=none, color="black", style=dashed]
    node11909 [shape=diamond, label=<<font color="black">(! (== p 1))</font>> color="black" fillcolor="white", style=filled]
    node11909 -> node11910 [label=<<font color="black">true</font>> color="black"]
    node11909 -> node11911 [label=<<font color="black">false</font>> color="black"]
    node11920_name [shape=none, label=<<font color="black">Block[11920]</font>>]
    node11920_name -> node11920 [arrowhead=none, color="black", style=dashed]
    node11920 [shape=box, label=<<font color="black">[0] return (concat s m)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11920 -> cluster2066_exit [color="black"]
    node11910_name [shape=none, label=<<font color="black">Block[11910]</font>>]
    node11910_name -> node11910 [arrowhead=none, color="black", style=dashed]
    node11910 [shape=box, label=<<font color="black">[0] (yet &quot;Let _a_ be the first code unit of _m_.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _b_ be the other _p_ - 1 code units of _m_.&quot;)<BR ALIGN="LEFT"/>[2] m = (concat a &quot;.&quot; b)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11910 -> node11911 [color="black"]
    node11911_name [shape=none, label=<<font color="black">Branch[11911]</font>>]
    node11911_name -> node11911 [arrowhead=none, color="black", style=dashed]
    node11911 [shape=diamond, label=<<font color="black">(&lt; 0 e)</font>> color="black" fillcolor="white", style=filled]
    node11911 -> node11912 [label=<<font color="black">true</font>> color="black"]
    node11911 -> node11913 [label=<<font color="black">false</font>> color="black"]
    node11912_name [shape=none, label=<<font color="black">Block[11912]</font>>]
    node11912_name -> node11912 [arrowhead=none, color="black", style=dashed]
    node11912 [shape=box, label=<<font color="black">[0] let c = 43cu<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11912 -> node11914 [color="black"]
    node11913_name [shape=none, label=<<font color="black">Block[11913]</font>>]
    node11913_name -> node11913 [arrowhead=none, color="black", style=dashed]
    node11913 [shape=box, label=<<font color="black">[0] assert (&lt; e 0)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _c_ be the code unit 0x002D (HYPHEN-MINUS).&quot;)<BR ALIGN="LEFT"/>[2] e = (- e)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11913 -> node11914 [color="black"]
    node11914_name [shape=none, label=<<font color="black">Block[11914]</font>>]
    node11914_name -> node11914 [arrowhead=none, color="black", style=dashed]
    node11914 [shape=box, label=<<font color="black">[0] (yet &quot;Let _d_ be the String value consisting of the digits of the decimal representation of _e_ (in order, with no leading zeroes).&quot;)<BR ALIGN="LEFT"/>[1] return (concat s m 101cu c d)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11914 -> cluster2066_exit [color="black"]
  }
}