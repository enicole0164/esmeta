digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1990 {
    label = "def Decode(string: String, reservedSet: String): Normal[String] | Abrupt"
    style = rounded
    cluster1990_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1990_entry_name -> cluster1990_entry [arrowhead=none, color="black", style=dashed]
    cluster1990_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1990_entry -> node10972 [color="black"]
    cluster1990_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1990_exit_name -> cluster1990_exit [arrowhead=none, color="black", style=dashed]
    cluster1990_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node10972_name [shape=none, label=<<font color="black">Block[10972]</font>>]
    node10972_name -> node10972 [arrowhead=none, color="black", style=dashed]
    node10972 [shape=box, label=<<font color="black">[0] let strLen = string.length<BR ALIGN="LEFT"/>[1] let R = &quot;&quot;<BR ALIGN="LEFT"/>[2] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10972 -> node10973 [color="black"]
    node10973_name [shape=none, label=<<font color="black">Branch[10973]</font>>]
    node10973_name -> node10973 [arrowhead=none, color="black", style=dashed]
    node10973 [shape=diamond, label=<<font color="black">true</font>> color="black" fillcolor="white", style=filled]
    node10973 -> node10974 [label=<<font color="black">true</font>> color="black"]
    node10974_name [shape=none, label=<<font color="black">Branch[10974]</font>>]
    node10974_name -> node10974 [arrowhead=none, color="black", style=dashed]
    node10974 [shape=diamond, label=<<font color="black">(== k strLen)</font>> color="black" fillcolor="white", style=filled]
    node10974 -> node10975 [label=<<font color="black">true</font>> color="black"]
    node10974 -> node10976 [label=<<font color="black">false</font>> color="black"]
    node10975_name [shape=none, label=<<font color="black">Block[10975]</font>>]
    node10975_name -> node10975 [arrowhead=none, color="black", style=dashed]
    node10975 [shape=box, label=<<font color="black">[0] return R<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10975 -> cluster1990_exit [color="black"]
    node10976_name [shape=none, label=<<font color="black">Block[10976]</font>>]
    node10976_name -> node10976 [arrowhead=none, color="black", style=dashed]
    node10976 [shape=box, label=<<font color="black">[0] let C = string[k]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10976 -> node10977 [color="black"]
    node10977_name [shape=none, label=<<font color="black">Branch[10977]</font>>]
    node10977_name -> node10977 [arrowhead=none, color="black", style=dashed]
    node10977 [shape=diamond, label=<<font color="black">(! (= C 37cu))</font>> color="black" fillcolor="white", style=filled]
    node10977 -> node10978 [label=<<font color="black">true</font>> color="black"]
    node10977 -> node10979 [label=<<font color="black">false</font>> color="black"]
    node10978_name [shape=none, label=<<font color="black">Block[10978]</font>>]
    node10978_name -> node10978 [arrowhead=none, color="black", style=dashed]
    node10978 [shape=box, label=<<font color="black">[0] (yet &quot;Let _S_ be the String value containing only the code unit _C_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10978 -> node10998 [color="black"]
    node10979_name [shape=none, label=<<font color="black">Block[10979]</font>>]
    node10979_name -> node10979 [arrowhead=none, color="black", style=dashed]
    node10979 [shape=box, label=<<font color="black">[0] let start = k<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10979 -> node10980 [color="black"]
    node10998_name [shape=none, label=<<font color="black">Block[10998]</font>>]
    node10998_name -> node10998 [arrowhead=none, color="black", style=dashed]
    node10998 [shape=box, label=<<font color="black">[0] R = (concat R S)<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10998 -> node10973 [color="black"]
    node10980_name [shape=none, label=<<font color="black">Branch[10980]</font>>]
    node10980_name -> node10980 [arrowhead=none, color="black", style=dashed]
    node10980 [shape=diamond, label=<<font color="black">(! (&lt; (+ k 2) strLen))</font>> color="black" fillcolor="white", style=filled]
    node10980 -> node10981 [label=<<font color="black">true</font>> color="black"]
    node10980 -> node10982 [label=<<font color="black">false</font>> color="black"]
    node10981_name [shape=none, label=<<font color="black">Block[10981]</font>>]
    node10981_name -> node10981 [arrowhead=none, color="black", style=dashed]
    node10981 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%URIError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#883])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10981 -> cluster1990_exit [color="black"]
    node10982_name [shape=none, label=<<font color="black">Block[10982]</font>>]
    node10982_name -> node10982 [arrowhead=none, color="black", style=dashed]
    node10982 [shape=box, label=<<font color="black">[0] (yet &quot;If the code units at index (_k_ + 1) and (_k_ + 2) within _string_ do not represent hexadecimal digits, throw a *URIError* exception.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _B_ be the 8-bit value represented by the two hexadecimal digits at index (_k_ + 1) and (_k_ + 2).&quot;)<BR ALIGN="LEFT"/>[2] k = (+ k 2)<BR ALIGN="LEFT"/>[3] (yet &quot;Let _n_ be the number of leading 1 bits in _B_.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10982 -> node10983 [color="black"]
    node10983_name [shape=none, label=<<font color="black">Branch[10983]</font>>]
    node10983_name -> node10983 [arrowhead=none, color="black", style=dashed]
    node10983 [shape=diamond, label=<<font color="black">(== n 0)</font>> color="black" fillcolor="white", style=filled]
    node10983 -> node10984 [label=<<font color="black">true</font>> color="black"]
    node10983 -> node10985 [label=<<font color="black">false</font>> color="black"]
    node10984_name [shape=none, label=<<font color="black">Block[10984]</font>>]
    node10984_name -> node10984 [arrowhead=none, color="black", style=dashed]
    node10984 [shape=box, label=<<font color="black">[0] (yet &quot;Let _C_ be the code unit whose value is _B_.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;If _C_ is not in _reservedSet_, then\n  1. Let _S_ be the String value containing only the code unit _C_.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Else,\n  1. Let _S_ be the substring of _string_ from _start_ to _k_ + 1.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10984 -> node10998 [color="black"]
    node10985_name [shape=none, label=<<font color="black">Branch[10985]</font>>]
    node10985_name -> node10985 [arrowhead=none, color="black", style=dashed]
    node10985 [shape=diamond, label=<<font color="black">(|| (== n 1) (&lt; 4 n))</font>> color="black" fillcolor="white", style=filled]
    node10985 -> node10986 [label=<<font color="black">true</font>> color="black"]
    node10985 -> node10987 [label=<<font color="black">false</font>> color="black"]
    node10986_name [shape=none, label=<<font color="black">Block[10986]</font>>]
    node10986_name -> node10986 [arrowhead=none, color="black", style=dashed]
    node10986 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%URIError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#884])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10986 -> cluster1990_exit [color="black"]
    node10987_name [shape=none, label=<<font color="black">Branch[10987]</font>>]
    node10987_name -> node10987 [arrowhead=none, color="black", style=dashed]
    node10987 [shape=diamond, label=<<font color="black">(! (&lt; (+ k (* 3 (- n 1))) strLen))</font>> color="black" fillcolor="white", style=filled]
    node10987 -> node10988 [label=<<font color="black">true</font>> color="black"]
    node10987 -> node10989 [label=<<font color="black">false</font>> color="black"]
    node10988_name [shape=none, label=<<font color="black">Block[10988]</font>>]
    node10988_name -> node10988 [arrowhead=none, color="black", style=dashed]
    node10988 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%URIError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#885])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10988 -> cluster1990_exit [color="black"]
    node10989_name [shape=none, label=<<font color="black">Block[10989]</font>>]
    node10989_name -> node10989 [arrowhead=none, color="black", style=dashed]
    node10989 [shape=box, label=<<font color="black">[0] let Octets = (new [B])[#886]<BR ALIGN="LEFT"/>[1] let j = 1<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10989 -> node10990 [color="black"]
    node10990_name [shape=none, label=<<font color="black">Branch[10990]</font>>]
    node10990_name -> node10990 [arrowhead=none, color="black", style=dashed]
    node10990 [shape=diamond, label=<<font color="black">(&lt; j n)</font>> color="black" fillcolor="white", style=filled]
    node10990 -> node10991 [label=<<font color="black">true</font>> color="black"]
    node10990 -> node10995 [label=<<font color="black">false</font>> color="black"]
    node10991_name [shape=none, label=<<font color="black">Block[10991]</font>>]
    node10991_name -> node10991 [arrowhead=none, color="black", style=dashed]
    node10991 [shape=box, label=<<font color="black">[0] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10991 -> node10992 [color="black"]
    node10995_name [shape=none, label=<<font color="black">Block[10995]</font>>]
    node10995_name -> node10995 [arrowhead=none, color="black", style=dashed]
    node10995 [shape=box, label=<<font color="black">[0] assert (= Octets.length n)<BR ALIGN="LEFT"/>[1] (yet &quot;If _Octets_ does not contain a valid UTF-8 encoding of a Unicode code point, throw a *URIError* exception.&quot;)<BR ALIGN="LEFT"/>[2] (yet &quot;Let _V_ be the code point obtained by applying the UTF-8 transformation to _Octets_, that is, from a List of octets into a 21-bit value.&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10995 -> node10996 [color="black"]
    node10992_name [shape=none, label=<<font color="black">Branch[10992]</font>>]
    node10992_name -> node10992 [arrowhead=none, color="black", style=dashed]
    node10992 [shape=diamond, label=<<font color="black">(! (= string[k] 37cu))</font>> color="black" fillcolor="white", style=filled]
    node10992 -> node10993 [label=<<font color="black">true</font>> color="black"]
    node10992 -> node10994 [label=<<font color="black">false</font>> color="black"]
    node10996_name [shape=none, label=<<font color="black">Call[10996]</font>>]
    node10996_name -> node10996 [arrowhead=none, color="black", style=dashed]
    node10996 [shape=cds, label=<<font color="black">%0 = clo&lt;UTF16EncodeCodePoint&gt;(V)</font>> color="black" fillcolor="white", style=filled]
    node10996 -> node10997 [color="black"]
    node10993_name [shape=none, label=<<font color="black">Block[10993]</font>>]
    node10993_name -> node10993 [arrowhead=none, color="black", style=dashed]
    node10993 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%URIError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#887])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10993 -> cluster1990_exit [color="black"]
    node10994_name [shape=none, label=<<font color="black">Block[10994]</font>>]
    node10994_name -> node10994 [arrowhead=none, color="black", style=dashed]
    node10994 [shape=box, label=<<font color="black">[0] (yet &quot;If the code units at index (_k_ + 1) and (_k_ + 2) within _string_ do not represent hexadecimal digits, throw a *URIError* exception.&quot;)<BR ALIGN="LEFT"/>[1] (yet &quot;Let _B_ be the 8-bit value represented by the two hexadecimal digits at index (_k_ + 1) and (_k_ + 2).&quot;)<BR ALIGN="LEFT"/>[2] k = (+ k 2)<BR ALIGN="LEFT"/>[3] push Octets &lt; B<BR ALIGN="LEFT"/>[4] j = (+ j 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10994 -> node10990 [color="black"]
    node10997_name [shape=none, label=<<font color="black">Block[10997]</font>>]
    node10997_name -> node10997 [arrowhead=none, color="black", style=dashed]
    node10997 [shape=box, label=<<font color="black">[0] let S = %0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node10997 -> node10998 [color="black"]
  }
}