digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2071 {
    label = "def <BUILTIN>:INTRINSICS.BigInt.asIntN(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2071_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2071_entry_name -> cluster2071_entry [arrowhead=none, color="black", style=dashed]
    cluster2071_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2071_entry -> node11954 [color="black"]
    cluster2071_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2071_exit_name -> cluster2071_exit [arrowhead=none, color="black", style=dashed]
    cluster2071_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node11954_name [shape=none, label=<<font color="black">Branch[11954]</font>>]
    node11954_name -> node11954 [arrowhead=none, color="black", style=dashed]
    node11954 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11954 -> node11955 [label=<<font color="black">true</font>> color="black"]
    node11954 -> node11956 [label=<<font color="black">false</font>> color="black"]
    node11955_name [shape=none, label=<<font color="black">Block[11955]</font>>]
    node11955_name -> node11955 [arrowhead=none, color="black", style=dashed]
    node11955 [shape=box, label=<<font color="black">[0] let bits = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11955 -> node11957 [color="black"]
    node11956_name [shape=none, label=<<font color="black">Block[11956]</font>>]
    node11956_name -> node11956 [arrowhead=none, color="black", style=dashed]
    node11956 [shape=box, label=<<font color="black">[0] let bits = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11956 -> node11957 [color="black"]
    node11957_name [shape=none, label=<<font color="black">Branch[11957]</font>>]
    node11957_name -> node11957 [arrowhead=none, color="black", style=dashed]
    node11957 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node11957 -> node11958 [label=<<font color="black">true</font>> color="black"]
    node11957 -> node11959 [label=<<font color="black">false</font>> color="black"]
    node11958_name [shape=none, label=<<font color="black">Block[11958]</font>>]
    node11958_name -> node11958 [arrowhead=none, color="black", style=dashed]
    node11958 [shape=box, label=<<font color="black">[0] let bigint = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11958 -> node11960 [color="black"]
    node11959_name [shape=none, label=<<font color="black">Block[11959]</font>>]
    node11959_name -> node11959 [arrowhead=none, color="black", style=dashed]
    node11959 [shape=box, label=<<font color="black">[0] let bigint = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11959 -> node11960 [color="black"]
    node11960_name [shape=none, label=<<font color="black">Call[11960]</font>>]
    node11960_name -> node11960 [arrowhead=none, color="black", style=dashed]
    node11960 [shape=cds, label=<<font color="black">%0 = clo&lt;ToIndex&gt;(bits)</font>> color="black" fillcolor="white", style=filled]
    node11960 -> node11961 [color="black"]
    node11961_name [shape=none, label=<<font color="black">Block[11961]</font>>]
    node11961_name -> node11961 [arrowhead=none, color="black", style=dashed]
    node11961 [shape=box, label=<<font color="black">[0] bits = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11961 -> node11962 [color="black"]
    node11962_name [shape=none, label=<<font color="black">Call[11962]</font>>]
    node11962_name -> node11962 [arrowhead=none, color="black", style=dashed]
    node11962 [shape=cds, label=<<font color="black">%1 = clo&lt;ToBigInt&gt;(bigint)</font>> color="black" fillcolor="white", style=filled]
    node11962 -> node11963 [color="black"]
    node11963_name [shape=none, label=<<font color="black">Block[11963]</font>>]
    node11963_name -> node11963 [arrowhead=none, color="black", style=dashed]
    node11963 [shape=box, label=<<font color="black">[0] bigint = [? %1]<BR ALIGN="LEFT"/>[1] let mod = (% ([math] bigint) (** 2 bits))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11963 -> node11964 [color="black"]
    node11964_name [shape=none, label=<<font color="black">Branch[11964]</font>>]
    node11964_name -> node11964 [arrowhead=none, color="black", style=dashed]
    node11964 [shape=diamond, label=<<font color="black">(! (&lt; mod (** 2 (- bits 1))))</font>> color="black" fillcolor="white", style=filled]
    node11964 -> node11965 [label=<<font color="black">true</font>> color="black"]
    node11964 -> node11966 [label=<<font color="black">false</font>> color="black"]
    node11965_name [shape=none, label=<<font color="black">Block[11965]</font>>]
    node11965_name -> node11965 [arrowhead=none, color="black", style=dashed]
    node11965 [shape=box, label=<<font color="black">[0] return ([bigInt] (- mod (** 2 bits)))<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11965 -> cluster2071_exit [color="black"]
    node11966_name [shape=none, label=<<font color="black">Block[11966]</font>>]
    node11966_name -> node11966 [arrowhead=none, color="black", style=dashed]
    node11966 [shape=box, label=<<font color="black">[0] return ([bigInt] mod)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node11966 -> cluster2071_exit [color="black"]
  }
}