digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster1305 {
    label = "def <SYNTAX>:UnaryExpression[1,0].Evaluation(this: Ast:UnaryExpression[1,0]): Unknown"
    style = rounded
    cluster1305_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster1305_entry_name -> cluster1305_entry [arrowhead=none, color="black", style=dashed]
    cluster1305_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster1305_entry -> node6203 [color="black"]
    cluster1305_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster1305_exit_name -> cluster1305_exit [arrowhead=none, color="black", style=dashed]
    cluster1305_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node6203_name [shape=none, label=<<font color="black">Call[6203]</font>>]
    node6203_name -> node6203 [arrowhead=none, color="black", style=dashed]
    node6203 [shape=cds, label=<<font color="black">%0 = this[0]-&gt;Evaluation()</font>> color="black" fillcolor="white", style=filled]
    node6203 -> node6204 [color="black"]
    node6204_name [shape=none, label=<<font color="black">Block[6204]</font>>]
    node6204_name -> node6204 [arrowhead=none, color="black", style=dashed]
    node6204 [shape=box, label=<<font color="black">[0] let ref = %0<BR ALIGN="LEFT"/>[1] [? ref]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6204 -> node6205 [color="black"]
    node6205_name [shape=none, label=<<font color="black">Branch[6205]</font>>]
    node6205_name -> node6205 [arrowhead=none, color="black", style=dashed]
    node6205 [shape=diamond, label=<<font color="black">(! (? ref: &quot;ReferenceRecord&quot;))</font>> color="black" fillcolor="white", style=filled]
    node6205 -> node6206 [label=<<font color="black">true</font>> color="black"]
    node6205 -> node6207 [label=<<font color="black">false</font>> color="black"]
    node6206_name [shape=none, label=<<font color="black">Block[6206]</font>>]
    node6206_name -> node6206 [arrowhead=none, color="black", style=dashed]
    node6206 [shape=box, label=<<font color="black">[0] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6206 -> cluster1305_exit [color="black"]
    node6207_name [shape=none, label=<<font color="black">Call[6207]</font>>]
    node6207_name -> node6207 [arrowhead=none, color="black", style=dashed]
    node6207 [shape=cds, label=<<font color="black">%1 = clo&lt;IsUnresolvableReference&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node6207 -> node6208 [color="black"]
    node6208_name [shape=none, label=<<font color="black">Branch[6208]</font>>]
    node6208_name -> node6208 [arrowhead=none, color="black", style=dashed]
    node6208 [shape=diamond, label=<<font color="black">(= %1 true)</font>> color="black" fillcolor="white", style=filled]
    node6208 -> node6209 [label=<<font color="black">true</font>> color="black"]
    node6208 -> node6210 [label=<<font color="black">false</font>> color="black"]
    node6209_name [shape=none, label=<<font color="black">Block[6209]</font>>]
    node6209_name -> node6209 [arrowhead=none, color="black", style=dashed]
    node6209 [shape=box, label=<<font color="black">[0] assert (= ref.Strict false)<BR ALIGN="LEFT"/>[1] return true<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6209 -> cluster1305_exit [color="black"]
    node6210_name [shape=none, label=<<font color="black">Call[6210]</font>>]
    node6210_name -> node6210 [arrowhead=none, color="black", style=dashed]
    node6210 [shape=cds, label=<<font color="black">%2 = clo&lt;IsPropertyReference&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node6210 -> node6211 [color="black"]
    node6211_name [shape=none, label=<<font color="black">Branch[6211]</font>>]
    node6211_name -> node6211 [arrowhead=none, color="black", style=dashed]
    node6211 [shape=diamond, label=<<font color="black">(= %2 true)</font>> color="black" fillcolor="white", style=filled]
    node6211 -> node6212 [label=<<font color="black">true</font>> color="black"]
    node6211 -> node6224 [label=<<font color="black">false</font>> color="black"]
    node6212_name [shape=none, label=<<font color="black">Call[6212]</font>>]
    node6212_name -> node6212 [arrowhead=none, color="black", style=dashed]
    node6212 [shape=cds, label=<<font color="black">%3 = clo&lt;IsPrivateReference&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node6212 -> node6213 [color="black"]
    node6224_name [shape=none, label=<<font color="black">Block[6224]</font>>]
    node6224_name -> node6224 [arrowhead=none, color="black", style=dashed]
    node6224 [shape=box, label=<<font color="black">[0] let base = ref.Base<BR ALIGN="LEFT"/>[1] assert (? base: &quot;EnvironmentRecord&quot;)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6224 -> node6225 [color="black"]
    node6213_name [shape=none, label=<<font color="black">Block[6213]</font>>]
    node6213_name -> node6213 [arrowhead=none, color="black", style=dashed]
    node6213 [shape=box, label=<<font color="black">[0] assert (= %3 false)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6213 -> node6214 [color="black"]
    node6225_name [shape=none, label=<<font color="black">Call[6225]</font>>]
    node6225_name -> node6225 [arrowhead=none, color="black", style=dashed]
    node6225 [shape=cds, label=<<font color="black">%7 = base-&gt;DeleteBinding(ref.ReferencedName)</font>> color="black" fillcolor="white", style=filled]
    node6225 -> node6226 [color="black"]
    node6214_name [shape=none, label=<<font color="black">Call[6214]</font>>]
    node6214_name -> node6214 [arrowhead=none, color="black", style=dashed]
    node6214 [shape=cds, label=<<font color="black">%4 = clo&lt;IsSuperReference&gt;(ref)</font>> color="black" fillcolor="white", style=filled]
    node6214 -> node6215 [color="black"]
    node6226_name [shape=none, label=<<font color="black">Block[6226]</font>>]
    node6226_name -> node6226 [arrowhead=none, color="black", style=dashed]
    node6226 [shape=box, label=<<font color="black">[0] return [? %7]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6226 -> cluster1305_exit [color="black"]
    node6215_name [shape=none, label=<<font color="black">Branch[6215]</font>>]
    node6215_name -> node6215 [arrowhead=none, color="black", style=dashed]
    node6215 [shape=diamond, label=<<font color="black">(= %4 true)</font>> color="black" fillcolor="white", style=filled]
    node6215 -> node6216 [label=<<font color="black">true</font>> color="black"]
    node6215 -> node6217 [label=<<font color="black">false</font>> color="black"]
    node6216_name [shape=none, label=<<font color="black">Block[6216]</font>>]
    node6216_name -> node6216 [arrowhead=none, color="black", style=dashed]
    node6216 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%ReferenceError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#586])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6216 -> cluster1305_exit [color="black"]
    node6217_name [shape=none, label=<<font color="black">Call[6217]</font>>]
    node6217_name -> node6217 [arrowhead=none, color="black", style=dashed]
    node6217 [shape=cds, label=<<font color="black">%5 = clo&lt;ToObject&gt;(ref.Base)</font>> color="black" fillcolor="white", style=filled]
    node6217 -> node6218 [color="black"]
    node6218_name [shape=none, label=<<font color="black">Block[6218]</font>>]
    node6218_name -> node6218 [arrowhead=none, color="black", style=dashed]
    node6218 [shape=box, label=<<font color="black">[0] let baseObj = [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6218 -> node6219 [color="black"]
    node6219_name [shape=none, label=<<font color="black">Call[6219]</font>>]
    node6219_name -> node6219 [arrowhead=none, color="black", style=dashed]
    node6219 [shape=cds, label=<<font color="black">%6 = baseObj-&gt;Delete(ref.ReferencedName)</font>> color="black" fillcolor="white", style=filled]
    node6219 -> node6220 [color="black"]
    node6220_name [shape=none, label=<<font color="black">Block[6220]</font>>]
    node6220_name -> node6220 [arrowhead=none, color="black", style=dashed]
    node6220 [shape=box, label=<<font color="black">[0] let deleteStatus = [? %6]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6220 -> node6221 [color="black"]
    node6221_name [shape=none, label=<<font color="black">Branch[6221]</font>>]
    node6221_name -> node6221 [arrowhead=none, color="black", style=dashed]
    node6221 [shape=diamond, label=<<font color="black">(&amp;&amp; (= deleteStatus false) (= ref.Strict true))</font>> color="black" fillcolor="white", style=filled]
    node6221 -> node6222 [label=<<font color="black">true</font>> color="black"]
    node6221 -> node6223 [label=<<font color="black">false</font>> color="black"]
    node6222_name [shape=none, label=<<font color="black">Block[6222]</font>>]
    node6222_name -> node6222 [arrowhead=none, color="black", style=dashed]
    node6222 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#587])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6222 -> cluster1305_exit [color="black"]
    node6223_name [shape=none, label=<<font color="black">Block[6223]</font>>]
    node6223_name -> node6223 [arrowhead=none, color="black", style=dashed]
    node6223 [shape=box, label=<<font color="black">[0] return deleteStatus<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node6223 -> cluster1305_exit [color="black"]
  }
}