digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2430 {
    label = "def InitializeTypedArrayFromArrayLike(O: Unknown["TypedArray"], arrayLike: Unknown["Object,ButNotATypedArrayOrAnArrayBuffer"]): Normal[Const[~unused~]] | Abrupt"
    style = rounded
    cluster2430_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2430_entry_name -> cluster2430_entry [arrowhead=none, color="black", style=dashed]
    cluster2430_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2430_entry -> node16832 [color="black"]
    cluster2430_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2430_exit_name -> cluster2430_exit [arrowhead=none, color="black", style=dashed]
    cluster2430_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node16832_name [shape=none, label=<<font color="black">Call[16832]</font>>]
    node16832_name -> node16832 [arrowhead=none, color="black", style=dashed]
    node16832 [shape=cds, label=<<font color="black">%0 = clo&lt;LengthOfArrayLike&gt;(arrayLike)</font>> color="black" fillcolor="white", style=filled]
    node16832 -> node16833 [color="black"]
    node16833_name [shape=none, label=<<font color="black">Block[16833]</font>>]
    node16833_name -> node16833 [arrowhead=none, color="black", style=dashed]
    node16833 [shape=box, label=<<font color="black">[0] let len = [? %0]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16833 -> node16834 [color="black"]
    node16834_name [shape=none, label=<<font color="black">Call[16834]</font>>]
    node16834_name -> node16834 [arrowhead=none, color="black", style=dashed]
    node16834 [shape=cds, label=<<font color="black">%1 = clo&lt;AllocateTypedArrayBuffer&gt;(O, len)</font>> color="black" fillcolor="white", style=filled]
    node16834 -> node16835 [color="black"]
    node16835_name [shape=none, label=<<font color="black">Block[16835]</font>>]
    node16835_name -> node16835 [arrowhead=none, color="black", style=dashed]
    node16835 [shape=box, label=<<font color="black">[0] [? %1]<BR ALIGN="LEFT"/>[1] let k = 0<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16835 -> node16836 [color="black"]
    node16836_name [shape=none, label=<<font color="black">Branch[16836]</font>>]
    node16836_name -> node16836 [arrowhead=none, color="black", style=dashed]
    node16836 [shape=diamond, label=<<font color="black">(&lt; k len)</font>> color="black" fillcolor="white", style=filled]
    node16836 -> node16837 [label=<<font color="black">true</font>> color="black"]
    node16836 -> node16843 [label=<<font color="black">false</font>> color="black"]
    node16837_name [shape=none, label=<<font color="black">Call[16837]</font>>]
    node16837_name -> node16837 [arrowhead=none, color="black", style=dashed]
    node16837 [shape=cds, label=<<font color="black">%2 = clo&lt;ToString&gt;(([number] k))</font>> color="black" fillcolor="white", style=filled]
    node16837 -> node16838 [color="black"]
    node16843_name [shape=none, label=<<font color="black">Block[16843]</font>>]
    node16843_name -> node16843 [arrowhead=none, color="black", style=dashed]
    node16843 [shape=box, label=<<font color="black">[0] return ~unused~<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16843 -> cluster2430_exit [color="black"]
    node16838_name [shape=none, label=<<font color="black">Block[16838]</font>>]
    node16838_name -> node16838 [arrowhead=none, color="black", style=dashed]
    node16838 [shape=box, label=<<font color="black">[0] let Pk = [! %2]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16838 -> node16839 [color="black"]
    node16839_name [shape=none, label=<<font color="black">Call[16839]</font>>]
    node16839_name -> node16839 [arrowhead=none, color="black", style=dashed]
    node16839 [shape=cds, label=<<font color="black">%3 = clo&lt;Get&gt;(arrayLike, Pk)</font>> color="black" fillcolor="white", style=filled]
    node16839 -> node16840 [color="black"]
    node16840_name [shape=none, label=<<font color="black">Block[16840]</font>>]
    node16840_name -> node16840 [arrowhead=none, color="black", style=dashed]
    node16840 [shape=box, label=<<font color="black">[0] let kValue = [? %3]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16840 -> node16841 [color="black"]
    node16841_name [shape=none, label=<<font color="black">Call[16841]</font>>]
    node16841_name -> node16841 [arrowhead=none, color="black", style=dashed]
    node16841 [shape=cds, label=<<font color="black">%4 = clo&lt;Set&gt;(O, Pk, kValue, true)</font>> color="black" fillcolor="white", style=filled]
    node16841 -> node16842 [color="black"]
    node16842_name [shape=none, label=<<font color="black">Block[16842]</font>>]
    node16842_name -> node16842 [arrowhead=none, color="black", style=dashed]
    node16842 [shape=box, label=<<font color="black">[0] [? %4]<BR ALIGN="LEFT"/>[1] k = (+ k 1)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node16842 -> node16836 [color="black"]
  }
}