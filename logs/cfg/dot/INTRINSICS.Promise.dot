digraph {
  graph [fontname = "Consolas"]
  node [fontname = "Consolas"]
  edge [fontname = "Consolas"]
  subgraph cluster2580 {
    label = "def <BUILTIN>:INTRINSICS.Promise(this: ESValue, argumentsList: List[ESValue], NewTarget: Object | Undefined): Unknown"
    style = rounded
    cluster2580_entry_name [shape=none, label=<<font color="black">Entry</font>>]
    cluster2580_entry_name -> cluster2580_entry [arrowhead=none, color="black", style=dashed]
    cluster2580_entry [shape=circle label=" " color="black" fillcolor="white" style=filled]
    cluster2580_entry -> node18829 [color="black"]
    cluster2580_exit_name [shape=none, label=<<font color="black">Exit</font>>]
    cluster2580_exit_name -> cluster2580_exit [arrowhead=none, color="black", style=dashed]
    cluster2580_exit [shape=circle label=" " color="black" fillcolor="white" style=filled]
    node18829_name [shape=none, label=<<font color="black">Branch[18829]</font>>]
    node18829_name -> node18829 [arrowhead=none, color="black", style=dashed]
    node18829 [shape=diamond, label=<<font color="black">(&lt; 0 argumentsList.length)</font>> color="black" fillcolor="white", style=filled]
    node18829 -> node18830 [label=<<font color="black">true</font>> color="black"]
    node18829 -> node18831 [label=<<font color="black">false</font>> color="black"]
    node18830_name [shape=none, label=<<font color="black">Block[18830]</font>>]
    node18830_name -> node18830 [arrowhead=none, color="black", style=dashed]
    node18830 [shape=box, label=<<font color="black">[0] let executor = (pop &lt; argumentsList)<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18830 -> node18832 [color="black"]
    node18831_name [shape=none, label=<<font color="black">Block[18831]</font>>]
    node18831_name -> node18831 [arrowhead=none, color="black", style=dashed]
    node18831 [shape=box, label=<<font color="black">[0] let executor = absent<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18831 -> node18832 [color="black"]
    node18832_name [shape=none, label=<<font color="black">Branch[18832]</font>>]
    node18832_name -> node18832 [arrowhead=none, color="black", style=dashed]
    node18832 [shape=diamond, label=<<font color="black">(= NewTarget undefined)</font>> color="black" fillcolor="white", style=filled]
    node18832 -> node18833 [label=<<font color="black">true</font>> color="black"]
    node18832 -> node18834 [label=<<font color="black">false</font>> color="black"]
    node18833_name [shape=none, label=<<font color="black">Block[18833]</font>>]
    node18833_name -> node18833 [arrowhead=none, color="black", style=dashed]
    node18833 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1253])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18833 -> cluster2580_exit [color="black"]
    node18834_name [shape=none, label=<<font color="black">Call[18834]</font>>]
    node18834_name -> node18834 [arrowhead=none, color="black", style=dashed]
    node18834 [shape=cds, label=<<font color="black">%0 = clo&lt;IsCallable&gt;(executor)</font>> color="black" fillcolor="white", style=filled]
    node18834 -> node18835 [color="black"]
    node18835_name [shape=none, label=<<font color="black">Branch[18835]</font>>]
    node18835_name -> node18835 [arrowhead=none, color="black", style=dashed]
    node18835 [shape=diamond, label=<<font color="black">(= %0 false)</font>> color="black" fillcolor="white", style=filled]
    node18835 -> node18836 [label=<<font color="black">true</font>> color="black"]
    node18835 -> node18837 [label=<<font color="black">false</font>> color="black"]
    node18836_name [shape=none, label=<<font color="black">Block[18836]</font>>]
    node18836_name -> node18836 [arrowhead=none, color="black", style=dashed]
    node18836 [shape=box, label=<<font color="black">[0] return comp[~throw~/~empty~]((new OrdinaryObject(&quot;Prototype&quot; -&gt; @EXECUTION_STACK[0].Realm.Intrinsics[&quot;%TypeError.prototype%&quot;], &quot;ErrorData&quot; -&gt; undefined))[#1254])<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18836 -> cluster2580_exit [color="black"]
    node18837_name [shape=none, label=<<font color="black">Call[18837]</font>>]
    node18837_name -> node18837 [arrowhead=none, color="black", style=dashed]
    node18837 [shape=cds, label=<<font color="black">%1 = clo&lt;OrdinaryCreateFromConstructor&gt;(NewTarget, &quot;%Promise.prototype%&quot;, (new [&quot;PromiseState&quot;, &quot;PromiseResult&quot;, &quot;PromiseFulfillReactions&quot;, &quot;PromiseRejectReactions&quot;, &quot;PromiseIsHandled&quot;])[#1255])</font>> color="black" fillcolor="white", style=filled]
    node18837 -> node18838 [color="black"]
    node18838_name [shape=none, label=<<font color="black">Block[18838]</font>>]
    node18838_name -> node18838 [arrowhead=none, color="black", style=dashed]
    node18838 [shape=box, label=<<font color="black">[0] let promise = [? %1]<BR ALIGN="LEFT"/>[1] promise.PromiseState = ~pending~<BR ALIGN="LEFT"/>[2] promise.PromiseFulfillReactions = (new [])[#1256]<BR ALIGN="LEFT"/>[3] promise.PromiseRejectReactions = (new [])[#1257]<BR ALIGN="LEFT"/>[4] promise.PromiseIsHandled = false<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18838 -> node18839 [color="black"]
    node18839_name [shape=none, label=<<font color="black">Call[18839]</font>>]
    node18839_name -> node18839 [arrowhead=none, color="black", style=dashed]
    node18839 [shape=cds, label=<<font color="black">%2 = clo&lt;CreateResolvingFunctions&gt;(promise)</font>> color="black" fillcolor="white", style=filled]
    node18839 -> node18840 [color="black"]
    node18840_name [shape=none, label=<<font color="black">Block[18840]</font>>]
    node18840_name -> node18840 [arrowhead=none, color="black", style=dashed]
    node18840 [shape=box, label=<<font color="black">[0] let resolvingFunctions = %2<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18840 -> node18841 [color="black"]
    node18841_name [shape=none, label=<<font color="black">Call[18841]</font>>]
    node18841_name -> node18841 [arrowhead=none, color="black", style=dashed]
    node18841 [shape=cds, label=<<font color="black">%3 = clo&lt;Call&gt;(executor, undefined, (new [resolvingFunctions.Resolve, resolvingFunctions.Reject])[#1258])</font>> color="black" fillcolor="white", style=filled]
    node18841 -> node18842 [color="black"]
    node18842_name [shape=none, label=<<font color="black">Call[18842]</font>>]
    node18842_name -> node18842 [arrowhead=none, color="black", style=dashed]
    node18842 [shape=cds, label=<<font color="black">%4 = clo&lt;Completion&gt;(%3)</font>> color="black" fillcolor="white", style=filled]
    node18842 -> node18843 [color="black"]
    node18843_name [shape=none, label=<<font color="black">Block[18843]</font>>]
    node18843_name -> node18843 [arrowhead=none, color="black", style=dashed]
    node18843 [shape=box, label=<<font color="black">[0] let completion = %4<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18843 -> node18844 [color="black"]
    node18844_name [shape=none, label=<<font color="black">Branch[18844]</font>>]
    node18844_name -> node18844 [arrowhead=none, color="black", style=dashed]
    node18844 [shape=diamond, label=<<font color="black">(&amp;&amp; (comp? completion) (! (= completion.Type ~normal~)))</font>> color="black" fillcolor="white", style=filled]
    node18844 -> node18845 [label=<<font color="black">true</font>> color="black"]
    node18844 -> node18847 [label=<<font color="black">false</font>> color="black"]
    node18845_name [shape=none, label=<<font color="black">Call[18845]</font>>]
    node18845_name -> node18845 [arrowhead=none, color="black", style=dashed]
    node18845 [shape=cds, label=<<font color="black">%5 = clo&lt;Call&gt;(resolvingFunctions.Reject, undefined, (new [completion.Value])[#1259])</font>> color="black" fillcolor="white", style=filled]
    node18845 -> node18846 [color="black"]
    node18847_name [shape=none, label=<<font color="black">Block[18847]</font>>]
    node18847_name -> node18847 [arrowhead=none, color="black", style=dashed]
    node18847 [shape=box, label=<<font color="black">[0] return promise<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18847 -> cluster2580_exit [color="black"]
    node18846_name [shape=none, label=<<font color="black">Block[18846]</font>>]
    node18846_name -> node18846 [arrowhead=none, color="black", style=dashed]
    node18846 [shape=box, label=<<font color="black">[0] [? %5]<BR ALIGN="LEFT"/></font>> color="black" fillcolor="white", style=filled]
    node18846 -> node18847 [color="black"]
  }
}