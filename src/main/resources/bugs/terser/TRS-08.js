( x => [ ... x ] ) ( ) ;
- { ... { get 0 ( ) { throw 0 ; } , } } ; 
- { ... { get 0 ( ) { x ( ) ; } } } ; 
0 / { ... { get 0 ( ) { throw 0 ; } } , } ; 
[ , ... 0 ] ; 
[ , ... [ 0 ] [ 0 ] ] ;
[ , ... `` [ 0 % 0 ] ] ;
[ , ... `` [ 0 ] ] ;
[ , ... function * ( ) { 0 ( ) ; } ( ) ] ;
[ , ... function * ( ) { 0 ( ) ; } ( ) ] ; 
[ , ... function * ( ) { x ( ) ; } ( ) ] ;
[ , ... function * ( ) { yield * 0 ; } ( ) ] ;
[ , ... function * ( ) { yield * x ; } ( ) ] ;
[ , ... function * ( ) { yield * { [ Symbol . iterator ] : async x => 0 } ; } ( ) ] ;
[ , ... function * ( ) { yield 0 . x ??= yield ; } ( ) ] ;
[ , ... function * ( ) { yield x ; } ( ) ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { 0 ? 0 : yield * await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { do ; while ( yield * await ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { do ; while ( yield await ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield * await ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield * x ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield await ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield x ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield x . x ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { if ( [ 0 ] [ yield * { [ Symbol . iterator ] : ( ) => { throw 0 ; } } ] -- ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { if ( await -- ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { if ( yield * await -- ) ; else ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { if ( yield 0 . x &= yield * await ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { return yield * new await ( ... 0 ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield * 0 . x ||= yield * { [ Symbol . iterator ] : x => { throw 0 ; } } ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield * await || 0 ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield * function * ( ) { } ( ) [ await ] ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield * yield 0 ?. [ yield * await ] ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield * yield 0 ?. [ yield await ] ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield 0 instanceof await ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield await ? 0 : yield ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield typeof 0 && await ) { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield * [ , ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield * `` ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield 0 & 0 % 0 !== 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield 0 & x !== 0 . x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield 0 & x !== 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield 0 . x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield [ 0 ] . x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield `${ 0 }` [ 0 ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield `` [ 0 ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield `` [ { } ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { throw yield x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { try { throw 0 ; } catch { throw 0 ; } finally { } } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { x ??= yield * await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { x ??= yield * new await . x ( ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield ! await , 0 , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield ( yield * await ) [ 0 ] &&= 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * - await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 ( ... yield * await , ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 ( ... yield await , ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 ( ... yield { 0 : async * function ( x ) { } } , ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 ** await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 + await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 + { [ await `` ] : 0 } ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 . x ??= await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 << await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 <= await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 > await , 0 , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 >>> await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 in await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * [ await , , ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * [ await , ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * `${ yield * await }` ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await !== 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await && 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await ** 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await - 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await < 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await = 0 , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await == 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await === 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await ?. x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await [ yield ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await ^ 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await in [ ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await instanceof { } ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * await | 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * new await , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * { [ Symbol . iterator ] : ( ) => { throw 0 ; } } ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * { [ Symbol . iterator ] : x => await } ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * { x , await , } = 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield - await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 !== await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 ( 0 , yield * await , ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 ** { [ yield * await ] : `` } , 0 , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 . x %= await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 . x %= yield await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 . x = yield * await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 . x = yield await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 . x ??= await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield 0 [ 0 ] ??= yield await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield [ 0 , yield * await ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield [ 0 , yield await ] , 0 , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield [ await , , ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield [ yield * await , ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield [ yield await , ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield [ ~ 0 ] [ 0 ] &&= yield * await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield [ ~ 0 ] [ 0 ] &&= yield await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield await &&= 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield await . x &&= 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield await . x . x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield await === 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield await >> 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield await ?. x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield await || 0 , 0 , 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield function ( ) { } ( ) [ yield * await ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield function ( ) { } ( ) [ yield * { [ Symbol . iterator ] : ( ) => { throw 0 ; } } ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield function ( ) { } ( ) [ yield await ] ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield function * ( ) { } ( ) [ await ] ; ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield import ( yield * ! await ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield import ( yield * await ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield new await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield true ( yield await , ) ; ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield x === await == 0 ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield x ||= yield * await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield x ||= yield await ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield { 0 : yield * await } [ 0 ] &&= 0 ; } } ] ; 
[ ... ! 0 ] ;
[ ... '' . x ] ;
[ ... 0 . x ] ;
[ ... 0 ] ; 
[ ... 0n ] ;
[ ... 1n . x ] ;
[ ... `` . x ] ;
[ ... `` [ 0 % 0 ] ] ;
[ ... `` [ 0 ] ] ;
[ ... function * ( ) { throw 0 ; } ( ) ] ; 
[ ... function * ( ) { yield * 0 ( ) ; } ( ) ] ; 
[ ... function * ( ) { yield * 0 ; } ( ) ] ;
[ ... function * ( ) { yield * function * ( ) { x ( 0 ) ; } ( ) ; } ( ) ] ; 
[ ... function * ( ) { yield * x ; } ( ) ] ; 
[ ... function * ( ) { yield x ; } ( ) ] ; 
[ ... null ] ;
[ ... true . x ] ;
[ ... { [ Symbol . iterator ] : ( ) => { throw 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw 0 [ 0 ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw 1n [ 0 ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw [ 0 , ] [ 0 ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `${ 0 }` [ '' ] ; x ( 0 ) ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `${ 0 }` [ '' ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `${ 0 }` [ 0 ] ; x ( 0 ) ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `${ 0 }` [ 0 ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `${ 0 }` [ function ( ) { } [ 0 , 0 ] ] ; x ( 0 ) ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `${ 0 }` [ ~ 0 % 0 ] ; x ( 0 ) ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `${ 0 }` [ ~ 0 ] ; x ( 0 ) ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw `` [ 0 ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw this [ 0 ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : ( ) => { throw true [ 0 ] ; } } , ] ; 
[ ... { [ Symbol . iterator ] : 0 } ] ; 
[ ... { [ Symbol . iterator ] : [ ] } ] ;
[ ... { [ Symbol . iterator ] : class { } } ] ; 
[ ... { [ Symbol . iterator ] : function ( ) { } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { 0 , yield x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { 0 , yield { x } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { 0 ? 0 : yield await ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { for ( ; ; ) throw 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( 0 ) throw 0 ; else x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * 0 / x ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * 0 [ 0 ] ||= x ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * 0 [ 0 ] ||= { x } ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * await ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * x ) ; else ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * x ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * x / 0 ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { if ( yield * { x } ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { return x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { return yield * 0 >> x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { return yield * await != 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { return yield * x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { return yield * { x , } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { return yield await ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { throw 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { throw 0 ?. x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { throw `` ?. x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { throw this ?. x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { throw true ?. x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { throw yield ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { x ( ) ; yield - 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { x ( 0 ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * 0 & x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * 0 ? 0 : x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * 0 ? 0 : { x , } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * 0n ? 0 : x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * true ? { x } : x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * x & 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * x ( ) ; yield 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * x ? 0 : 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * yield * 0 >= await ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield * yield await ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield + x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 != ! x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 != x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 & x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 ** x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 ** ~ x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 - x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 - { x } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 . x = x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 . x | x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 ; x ( ) ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 < x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 << ! x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 <= x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 == x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 == x ?? 0 ? 0 : 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 > x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 >= x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 >= { x } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 >>> await ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 [ yield * x . x -- ] ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 [ yield * x ] ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 [ yield x ] ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 ^ x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 | x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield await + ! 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield await ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield await << 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield void await ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x != ! 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x % 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x ** 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x - 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x < 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x <= 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x == 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x > 1 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x >= 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x >>> [ ] ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield x [ { } ] ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield yield `${ x }` ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield yield `${ yield await }` ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield yield x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield yield { x , } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield { x , } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield { x } . x = 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield { x } ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield { x } == 0 ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield ~ x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ) { yield ~ ~ x ; } } ] ; 
[ ... { [ Symbol . iterator ] : function * ( ... [ ] ) { let [ ] = 0 ; } } ] ;
[ ... { [ Symbol . iterator ] : x => 0 } ] ; 
[ ... { [ Symbol . iterator ] : x => [ ] } ] ;
[ ... { [ Symbol . iterator ] : x => new 0 } ] ; 
[ ... { [ Symbol . iterator ] : x => { } } ] ; 
[ ... { [ Symbol . iterator ] : { } } ] ; 
[ ... { } . x ] ;
[ 0 , , ... 0 ] ; 
[ 0 , ... 0 ] ; 
[ 0 , ... { [ Symbol . iterator ] : ( ) => { throw 0 ; } } ] ; 
let x ; [ ... x ] ;
switch ( { ... { get 0 ( ) { throw 0 ; } , } , } ) { default : } 
var x ; [ ... x ] ;
