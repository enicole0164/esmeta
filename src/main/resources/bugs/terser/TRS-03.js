// instanceof NON-CONSTRUCTOR;
//

! 0 % 0 instanceof 0 ;
! 0 + 0 instanceof 0 ;
! 0 + `` instanceof 0 ;
! 0 - 0 instanceof 0 ;
! 0 < 0 instanceof 0 ;
! 0 << 0 instanceof 0 ;
! 0 <= 0 instanceof 0 ; ;
! 0 <= 1n instanceof 0 ;
! 0 >= 0 instanceof 0 ;
! 0 in this instanceof 0 ;
! 0 instanceof 0 ;
! 1 + `` instanceof 0 ;
! 1 << 0 instanceof 0 ;
! 1 >= 0 instanceof 0 ;
! delete - 0 + 0 instanceof 0 ;
! { * [ 0 instanceof 0 ?? 0 ] ( ) { } } ;
! { ... 0 instanceof 0 } ;
! { 1 : 0 instanceof 0 } ;
! { [ 0 instanceof 0 ] : 0 } ;
'' ** 0 instanceof 0 ;
'' + 0 instanceof 0 ;
'' + false instanceof 0 ;
'' + null instanceof 0 ;
'' + true instanceof 0 ;
'' + void 0 instanceof 0 ;
'' - 0 instanceof 0 ;
'' . x instanceof 0 ;
'' . x instanceof 0 ?? 0 ;
'' < '' instanceof 0 ;
'' < 0 instanceof 0 ;
'' < 1n instanceof 0 ;
'' < this instanceof 0 ;
'' << 0 instanceof 0 ;
'' <= '' instanceof 0 ; ;
'' <= 1 instanceof 0 ; ;
'' <= 1n instanceof 0 ; ;
'' > 1n instanceof 0 ;
'' >= 0 instanceof 0 ;
'' >= `` instanceof 0 ;
'' >= { } instanceof 0 ;
'' [ 0 ] instanceof 0 <= 0 ;
+ 0 <= 1n instanceof 0 ;
+ 0 instanceof 0 ;
- ! 0 instanceof 0 ;
- '' instanceof 0 ;
- 0 . x instanceof 0 ;
- 0 < 0 instanceof 0 ;
- 0 <= 0 instanceof 0 & 0 ;
- 0 <= 0 instanceof 0 ; ;
- 0 > 0 instanceof 0 ;
- 0 instanceof '' ;
- 0 instanceof 0 ;
- 0 instanceof [ , ] ;
- 0 instanceof [ 0 , , ] ;
- 0 instanceof [ 0 , ] ;
- 0 instanceof [ ] ;
- 0 instanceof `${ '' }` ;
- 0 instanceof `${ 0 }` ;
- 0 instanceof `${ 0n }` ;
- 0 instanceof `${ this }` ;
- 0 instanceof `` ;
- 0 instanceof this ;
- 0 instanceof true ;
- 0 instanceof { } ;
- 0n instanceof 0 ;
- null instanceof 0 ;
- { ... 0 instanceof 0 . x } ;
- { ... 0 instanceof 0 } ;
- { ... 0 instanceof [ ] } ;
- { ... 0 instanceof { [ Symbol . hasInstance ] : 0 } } ;
- { ... 0 instanceof { [ Symbol . hasInstance ] : x => await } } ;
- { 1 : '' . x instanceof 0 } ;
- { 1 : 0 . x instanceof 0 } ;
- { 1 : 0 instanceof 0 } ;
- { 1 : 0 instanceof { } } ;
- { 1 : 1n . x instanceof 0 } ;
- { 1 : true . x instanceof 0 } ;
- { [ 0 instanceof 0 ] : 0 } ;
- { } instanceof 0 ;
0 != 0 [ 0 ] instanceof { return : 0 } ;
0 != 0 instanceof 0 . x ;
0 != 0 instanceof 0 ;
0 != 0 instanceof { } ;
0 !== 0 instanceof 0 . x >= 0 != 0 ;
0 !== 0 instanceof 0 ;
0 !== 0 instanceof 0n . x >= 0 != 0 ;
0 !== 0 instanceof function ( ) { } . x >= 0 != 0 ;
0 !== 0 instanceof true . x >= 0 != 0 ;
0 !== 0 instanceof { } ;
0 !== 0 instanceof { } >= 0 != 0 ;
0 !== void 0 >>> 0 instanceof 0 in 0 ;
0 % ! 0 instanceof 0 ;
0 % ! 1 instanceof 0 ;
0 % '' instanceof 0 ;
0 % 0 . x instanceof 0 ;
0 % 0 < 1n instanceof 0 ;
0 % 0 <= 1n instanceof 0 ;
0 % 0 [ 0 ] instanceof 0 ;
0 % 0 instanceof + void 0 ;
0 % 0 instanceof 0 ;
0 % 0 instanceof 0 [ 0 ] ;
0 % 1 instanceof 0 ;
0 % null instanceof 0 ;
0 % { } instanceof 0 ;
0 & ! typeof 0 >>> 0 instanceof { } ;
0 & - 0 - 0 instanceof 0 ;
0 & 0 . x instanceof 0 ;
0 & 0 [ 0 !== 0 instanceof 0 . x ] ;
0 & 0 [ 0 !== 0 instanceof 0n . x ] ;
0 & 0 instanceof 0 . x ;
0 & 0 instanceof 0 ;
0 & 0 instanceof 0 ?. x ;
0 & 0 instanceof 0 ?. x ?. x ;
0 & 0 instanceof 0 [ 0 ] ?. x ;
0 & 0 instanceof 0n ?. x ?. x ;
0 & 0 instanceof `` ?. x ?. x ;
0 & 0 instanceof function ( ) { } ( ) ;
0 & 0 instanceof function ( ) { } ( ) ?. x ;
0 & 0 instanceof function * ( ) { } ( ) ;
0 & 0 instanceof function * ( ) { } ( ) ?. x ;
0 & 0 instanceof null ?. x ?. x ;
0 & 0 instanceof true ?. x ?. x ;
0 & 0 instanceof { ... 0 } ;
0 & 0 instanceof { } ;
0 & 0 instanceof { } ?. x ?. x ;
0 & 1n - 1n instanceof 0 ;
0 & new class { } ( ) instanceof 0 ;
0 & new class { } instanceof 0 ;
0 & new function ( ) { } ( ) instanceof 0 ;
0 & new function x ( ) { return 0 instanceof `` ?. [ 0 % 0 ] ; } ( ) ;
0 & new function x ( ) { return 0 instanceof `` ?. [ 0 ] ; } ( ) ;
0 & this instanceof async function ( x , ) { } ;
0 * - 0 instanceof 0 ;
0 * 0 instanceof 0 ;
0 * { } instanceof 0 ;
0 ** ! 0 instanceof 0 ;
0 ** ! typeof 0 instanceof 0 ;
0 ** '' instanceof 0 ;
0 ** 0 . x instanceof 0 ;
0 ** 0 instanceof 0 ;
0 ** 1 instanceof 0 ;
0 ** [ ] instanceof 0 ;
0 ** { } instanceof 0 ;
0 ** ~ 0 <= 0 instanceof 0 ; ;
0 ** ~ 0 instanceof 0 ;
0 + ! 0 instanceof 0 ;
0 + '' instanceof 0 ;
0 + 0 . x instanceof 0 ;
0 + 0 instanceof 0 ;
0 + `` instanceof 0 ;
0 + null instanceof 0 ;
0 + { } instanceof 0 ;
0 , 0 instanceof 0 ;
0 - '' instanceof 0 ;
0 - 0 . x instanceof 0 ;
0 - 0 instanceof 0 ;
0 - [ ] instanceof 0 ;
0 - null instanceof 0 ;
0 - this instanceof 0 ;
0 - { 1 : null } . x instanceof 0 ;
0 . x ** 0 instanceof 0 ;
0 . x + 0 instanceof 0 ;
0 . x + `` instanceof 0 ;
0 . x - 0 instanceof 0 ;
0 . x < 0 instanceof 0 ;
0 . x << 0 instanceof 0 ;
0 . x <= 0 instanceof 0 ; ;
0 . x > 0 instanceof 0 ;
0 . x >= 0 instanceof 0 ;
0 . x instanceof 0 ?? 0 ;
0 . x instanceof 0 instanceof 0 ;
0 . x instanceof `` ?? 0 ;
0 / { ... 0 . x instanceof 0 , } ;
0 / { ... 0n > '' instanceof 0 in 0 , x , } ;
0 / { ... 0n > 0 % 0 instanceof 0 in 0 , x , } ;
0 / { ... 1n > '' instanceof 0 in 0 , x , } ;
0 / { ... `${ 0 }` . x instanceof 0 , } ;
0 / { ... `` instanceof [ ] , } ;
0 / { ... false instanceof [ ] , } ;
0 / { ... this instanceof async function ( ) { } , } ;
0 / { ... { } . x instanceof 0 , } ;
0 / { ... { } instanceof 0 . x , } ;
0 < ! 0 instanceof 0 ;
0 < '' instanceof 0 ;
0 < - 0 instanceof 0 ;
0 < 0 . x instanceof 0 ;
0 < 0 < 0 instanceof 0 ;
0 < 0 <= 0 instanceof 0 ; ;
0 < 0 > 0 instanceof 0 ;
0 < 0 >= 0 instanceof 0 ;
0 < 0 instanceof ( 0 ) ;
0 < 0 instanceof 0 . x ;
0 < 0 instanceof 0 ;
0 < 0 instanceof `${ ! 0 }` ;
0 < 0 instanceof `${ ! 1 }` ;
0 < 0 instanceof `${ 0 . x }` ;
0 < 0 instanceof `${ 1n . x }` ;
0 < 0 instanceof `${ `${ 0 }` . x }` ;
0 < 0 instanceof `${ null }` ;
0 < 0 instanceof `${ { [ Symbol . toPrimitive ] : null } }` ;
0 < 0 instanceof `${ { } . x }` ;
0 < 0n . x instanceof 0 ;
0 < 0n instanceof 0 ;
0 < 1 instanceof 0 ;
0 < 1n instanceof 0 ;
0 < `${ 0 }` . x instanceof 0 ;
0 < `` instanceof 0 ;
0 < null instanceof 0 ;
0 < this . x instanceof 0 ;
0 < this instanceof 0 ;
0 < { } instanceof 0 ;
0 << '' instanceof 0 ;
0 << 0 instanceof 0 ;
0 << 1 instanceof 0 ;
0 << true instanceof 0 ;
0 << { } instanceof 0 ;
0 << ~ 0 instanceof 0 ;
0 <= ! 0 instanceof 0 ; ;
0 <= - 0 instanceof 0 ; ;
0 <= 0 % 0 instanceof 0 ; ;
0 <= 0 instanceof 0 ;
0 <= `` instanceof 0 ;
0 <= void 0 instanceof 0 ; ;
0 <= { 0 : true } [ 0 ] instanceof 0 ; ;
0 <= { } [ 0 ] instanceof 0 ; ;
0 == 0 ** 0 / 0 - 0 instanceof 0 && 0 ;
0 == 0 . x instanceof 0 && 0 ;
0 == 0 instanceof 0 . x ;
0 == 0 instanceof 0 ;
0 == 0 instanceof { [ Symbol . hasInstance ] : 0 } ;
0 == 0 instanceof { } ;
0 === 0 instanceof 0 ;
0 > ! 0 instanceof 0 ;
0 > - 0 instanceof 0 ;
0 > 0 < 0 instanceof 0 ;
0 > 0 in this instanceof 0 ;
0 > 0 instanceof 0 ;
0 > 0 instanceof { [ Symbol . hasInstance ] : 0 } ;
0 > 1n instanceof 0 ;
0 > `` instanceof 0 ;
0 > { } instanceof 0 ;
0 >= ! 0 instanceof 0 ;
0 >= ! 1 instanceof 0 ;
0 >= - 0 instanceof 0 ;
0 >= 0 . x instanceof 0 ;
0 >= 0 instanceof 0 ;
0 >= 0n . x instanceof 0 ;
0 >= 0n instanceof 0 ;
0 >= 1 instanceof 0 ;
0 >= 1n instanceof 0 ;
0 >= [ ] . x instanceof 0 ;
0 >= `` . x instanceof 0 ;
0 >= `` instanceof 0 ;
0 >= null instanceof 0 ;
0 >= true . x instanceof 0 ;
0 >= { } instanceof 0 ;
0 ?. [ 0 . x instanceof { } ] ;
0 ?. [ 0 instanceof 0 . x ] ;
0 ?. [ 0 instanceof 0 ] ;
0 ?. [ 0 instanceof [ ] ] ;
0 ?. [ 0 instanceof { } ] ;
0 ?. x < 0 instanceof 0 ;
0 ?. x in this instanceof 0 ;
0 ?. x instanceof 0 ;
0 [ '' ?. x ] instanceof 0 <= 0 ;
0 [ 0 ] % 0 instanceof 0 ;
0 [ 0 instanceof 0 ] ;
0 [ 0 instanceof { } ] ;
0 [ 0n ?. x ] instanceof 0 <= 0 ;
0 [ true ?. x ] instanceof 0 <= 0 ;
0 ^ ! 0 in { } instanceof 0 ;
0 ^ '' in { } instanceof 0 . x ;
0 ^ '' in { } instanceof 0 ;
0 ^ '' in { } instanceof 1n . x ;
0 ^ '' in { } instanceof { [ Symbol . hasInstance ] : `` } ;
0 ^ '' in { } instanceof { [ Symbol . hasInstance ] : class { } } ;
0 ^ '' instanceof { [ Symbol . hasInstance ] : x => 0 ( ) ( ) } ;
0 ^ 0 ** ~ 0 < 0 instanceof 0 ;
0 ^ 0 + 0 ** ~ 0 - delete 0 > 0 instanceof 0 ;
0 ^ 0 . x in { } instanceof 0 ;
0 ^ 0 < - 0 instanceof 0 ;
0 ^ 0 > 0 ** 0 / 0 instanceof 0 ;
0 ^ 0 > 0 > 0 instanceof 0 ;
0 ^ 0 > 0 in { } instanceof 0 ;
0 ^ 0 > 1n . x instanceof 0 ;
0 ^ 0 in [ 0 ] instanceof 0 ;
0 ^ 0 in { } instanceof 0 ;
0 ^ 0 instanceof 0 ;
0 ^ 0 instanceof [ ] ;
0 ^ 0n > 0 . x instanceof 0 ;
0 ^ 0n > `` . x instanceof 0 ;
0 ^ 0n > true . x instanceof 0 ;
0 ^ 1n < 0n instanceof 0 ;
0 ^ 1n < `` instanceof 0 ;
0 ^ 1n < { } instanceof 0 ;
0 ^ 1n > - 0 instanceof 0 ;
0 ^ 1n >= 0n instanceof 0 ;
0 ^ 1n >= `` instanceof 0 ;
0 ^ 1n >= this instanceof 0 ;
0 ^ 1n in { } instanceof 0 ;
0 ^ `` . x < 0 instanceof 0 ;
0 ^ `` . x < 1n instanceof 0 ;
0 ^ `` > { } instanceof 0 ;
0 ^ `` >= `` instanceof 0 ;
0 ^ null in { } instanceof 0 ;
0 ^ this > `` instanceof 0 ;
0 ^ this > typeof 0 instanceof 0 ;
0 ^ this > { } instanceof 0 ;
0 ^ this >= [ 0 ] instanceof 0 ;
0 ^ this >= this instanceof 0 ;
0 ^ true . x < 1n instanceof 0 ;
0 ^ { [ Symbol . toPrimitive ] : function ( ) { } } in { } instanceof 0 ;
0 ^ { [ Symbol . toPrimitive ] : x => 0 } in { } instanceof 0 ;
0 ^ { } > { } instanceof 0 ;
0 ^ { } in { } instanceof 0 ;
0 in [ 0 ] instanceof 0 ;
0 in { } instanceof 0 ;
0 instanceof ! ! 0 >> 0 ;
0 instanceof ! + ~ 0 + 0 ; ;
0 instanceof ! 0 - 0 ;
0 instanceof ! 0 ;
0 instanceof ! 0 << 0 ;
0 instanceof ! 0 << { [ Symbol . toPrimitive ] : x => 0 } ; ;
0 instanceof ! 0 << { [ Symbol . toPrimitive ] : x => { } } ; ;
0 instanceof ! 0 >> 0 ;
0 instanceof '' . x ;
0 instanceof '' . x ?? 0 ;
0 instanceof '' ;
0 instanceof '' >> 0 ;
0 instanceof '' >>> 0 ;
0 instanceof '' [ 0 % 0 ] ;
0 instanceof '' [ 0 ] ;
0 instanceof '' [ 1n ] ;
0 instanceof '' [ `` ] ;
0 instanceof 'str' >>> 0 ;
0 instanceof ( 0 ) ;
0 instanceof + 0 ;
0 instanceof + delete 0 ;
0 instanceof - 0 - 0 ;
0 instanceof 0 & 0 ;
0 instanceof 0 && 0 ;
0 instanceof 0 ** ! 0 ;
0 instanceof 0 ** ~ 0 + 0 ; ;
0 instanceof 0 + ! - ! 0 ; ;
0 instanceof 0 + '' . x ; ;
0 instanceof 0 + 0 % 0 ;
0 instanceof 0 + true . x ; ;
0 instanceof 0 + { } . x ; ;
0 instanceof 0 , 0 ;
0 instanceof 0 - ! 0 ;
0 instanceof 0 - '' ;
0 instanceof 0 - 0 ;
0 instanceof 0 - 0 >>> 0 - 0 ** 0 ;
0 instanceof 0 - this ;
0 instanceof 0 . x & 0 ;
0 instanceof 0 . x + [ ] ; ;
0 instanceof 0 . x - 0 ;
0 instanceof 0 . x ;
0 instanceof 0 . x <= 0 ;
0 instanceof 0 . x >> 0 ;
0 instanceof 0 . x ? 0 : 0 ;
0 instanceof 0 . x ?? 0 ;
0 instanceof 0 . x instanceof 0 ;
0 instanceof 0 / 0 ;
0 instanceof 0 / 1 ;
0 instanceof 0 / 1 ; ;
0 instanceof 0 / { [ Symbol . toPrimitive ] : x => 0 } ;
0 instanceof 0 / { [ Symbol . toPrimitive ] : x => { } } ;
0 instanceof 0 / { } ;
0 instanceof 0 / ~ 0 ;
0 instanceof 0 ;
0 instanceof 0 < 0 ;
0 instanceof 0 < 1 ;
0 instanceof 0 << ! 0 ;
0 instanceof 0 << ! 1 ;
0 instanceof 0 << 0 . x ;
0 instanceof 0 << 0 ;
0 instanceof 0 << 0 [ 0 ] ; ;
0 instanceof 0 << `` ;
0 instanceof 0 << null ; ;
0 instanceof 0 << void 0 ; ;
0 instanceof 0 << { } ;
0 instanceof 0 << ~ 0 ;
0 instanceof 0 <= 0 ;
0 instanceof 0 == 0 ;
0 instanceof 0 > 0 ;
0 instanceof 0 >= 0 ;
0 instanceof 0 >> ! 0 ;
0 instanceof 0 >> ! 1 ;
0 instanceof 0 >> ! typeof 0 <= [ ] ;
0 instanceof 0 >> '' . x <= [ ] ;
0 instanceof 0 >> '' ;
0 instanceof 0 >> 0 - 0 ** 0 ;
0 instanceof 0 >> 0 . x ;
0 instanceof 0 >> 0 . x <= x ;
0 instanceof 0 >> 0 ;
0 instanceof 0 >> 0n . x <= [ ] ;
0 instanceof 0 >> 1 ;
0 instanceof 0 >> [ ] ;
0 instanceof 0 >> null ;
0 instanceof 0 >> true . x <= [ ] ;
0 instanceof 0 >> { 1 : '' } . x ;
0 instanceof 0 >> { } ;
0 instanceof 0 >> ~ 0 <= [ ] ;
0 instanceof 0 >>> ! 0 ;
0 instanceof 0 >>> 0 ;
0 instanceof 0 >>> [ ] ;
0 instanceof 0 >>> void 0 ;
0 instanceof 0 >>> { } ;
0 instanceof 0 >>> ~ 0 ;
0 instanceof 0 ? 0 : 0 ;
0 instanceof 0 ?. x >>> 0 ;
0 instanceof 0 ?. x ?. x ;
0 instanceof 0 ?? 0 ;
0 instanceof 0 [ ! ~ 0 ] ;
0 instanceof 0 [ '' ] ;
0 instanceof 0 [ 0 ] ;
0 instanceof 0 [ 0 ] instanceof 0 != 0 ;
0 instanceof 0 [ null ] ;
0 instanceof 0 [ true ] ;
0 instanceof 0 [ void 0 ] ;
0 instanceof 0 [ { } ] ;
0 instanceof 0 in 0 > 0 > 0 ;
0 instanceof 0 instanceof 0 ;
0 instanceof 0 instanceof 0 < 1n ;
0 instanceof 0n . x & 0 ;
0 instanceof 0n ?. x + 0 ; ;
0 instanceof 0n [ '' ] ;
0 instanceof 1 ** ! 0 ;
0 instanceof 1 ** ! 1 ;
0 instanceof 1 / 0 ;
0 instanceof 1 / 0 ; ;
0 instanceof 1 >> 0 ;
0 instanceof 1 >>> 0 ;
0 instanceof 1n . x ;
0 instanceof 1n . x <= 0 ;
0 instanceof [ , ] ;
0 instanceof [ , ] [ 0 ] -- ;
0 instanceof [ 0 , , ] ;
0 instanceof [ 0 , ] ;
0 instanceof [ 0 , ] [ 0 ] -- ;
0 instanceof [ 0 ] ;
0 instanceof [ ] & 0 ;
0 instanceof [ ] && 0 ;
0 instanceof [ ] . x ++ ;
0 instanceof [ ] . x ;
0 instanceof [ ] ;
0 instanceof [ ] ? 0 : 0 ;
0 instanceof [ ] [ 0 ] -- ;
0 instanceof [ ] instanceof 0 ;
0 instanceof `${ ! 0 }` ;
0 instanceof `${ '' }` ;
0 instanceof `${ 0 . x }` ;
0 instanceof `${ 0 > 0 }` ;
0 instanceof `${ 0 }` ;
0 instanceof `${ 0 }` ?. x + 0 ; ;
0 instanceof `${ 0 }` [ 0 ] ;
0 instanceof `${ 0n . x }` ;
0 instanceof `${ [ ] }` ;
0 instanceof `${ null }` ;
0 instanceof `${ { [ Symbol . toPrimitive ] : x => 0 } }` ;
0 instanceof `${ { [ Symbol . toPrimitive ] : x => 1n } }` ;
0 instanceof `${ { [ Symbol . toPrimitive ] : x => { } } }` ;
0 instanceof `` . x <= 0 ;
0 instanceof `` [ 0 ] ?? 0 ;
0 instanceof class x { } . x ?? 0 ;
0 instanceof class { } instanceof 0 ;
0 instanceof delete '' . x ;
0 instanceof delete 0 . x ;
0 instanceof delete 0 ;
0 instanceof delete 0n . x ;
0 instanceof delete [ ] . x ;
0 instanceof delete true . x ;
0 instanceof false & 0 ;
0 instanceof false + [ ] ; ;
0 instanceof function ( ) { } ( ) ?. x ;
0 instanceof function * ( ) { } ( ) ?. x ;
0 instanceof new class { } ;
0 instanceof new function ( ) { ; return ; } ;
0 instanceof new function ( ) { } ;
0 instanceof null + [ ] ;
0 instanceof null - 0 ;
0 instanceof null ;
0 instanceof null << 0 ;
0 instanceof null >> 0 ;
0 instanceof null >>> 0 ;
0 instanceof this ** ! 0 ;
0 instanceof this ;
0 instanceof this <= 0 ;
0 instanceof this ?. x + 0 ; ;
0 instanceof this [ 0 ] -- ;
0 instanceof true + '' ; ;
0 instanceof true . x ;
0 instanceof true . x <= 0 ;
0 instanceof true . x ?? 0 ;
0 instanceof true ;
0 instanceof true >> 0 ;
0 instanceof true [ 0 ] ;
0 instanceof typeof 0 ;
0 instanceof typeof void 0 ;
0 instanceof void 0 ;
0 instanceof x ; let x ;
0 instanceof x << 0 ; var x ;
0 instanceof { ... 0 } ;
0 instanceof { [ Symbol . hasInstance ] : '' } <= 0 ;
0 instanceof { [ Symbol . hasInstance ] : 0 } ;
0 instanceof { [ Symbol . hasInstance ] : [ ] } ;
0 instanceof { [ Symbol . hasInstance ] : class { } } ;
0 instanceof { [ Symbol . hasInstance ] : true } ?? 0 ;
0 instanceof { [ Symbol . hasInstance ] : x => await } ;
0 instanceof { [ Symbol . hasInstance ] : x => new 0 } ;
0 instanceof { [ Symbol . toPrimitive ] : function ( x ) { } } >> 0 . x ;
0 instanceof { then : 0 } >>> 0 ;
0 instanceof { } != 0 ;
0 instanceof { } - 0 ;
0 instanceof { } . x ++ ;
0 instanceof { } ;
0 instanceof { } >> 0 ;
0 instanceof { } ?? 0 ;
0 instanceof { } instanceof 0 ;
0 instanceof ~ ! 0 ;
0 instanceof ~ '' ;
0 instanceof ~ + 1 ;
0 instanceof ~ 0 . x ;
0 instanceof ~ 0 ;
0 instanceof ~ 0 << 0 ;
0 instanceof ~ 0 >> 0 ;
0 instanceof ~ null ;
0 instanceof ~ ~ 0 ;
0 | 0 instanceof 0 ;
0 || 0 instanceof ! ~ 0 ;
0 || 0 instanceof '' . x , 0 ;
0 || 0 instanceof - ! ~ 0 , 0 ;
0 || 0 instanceof 0 . x ;
0 || 0 instanceof 0 ;
0 || 0 instanceof 0n . x , 0 ;
0 || 0 instanceof [ ] ;
0 || this instanceof async function ( ) { } ;
0n . x <= 0 instanceof 0 ; ;
0n . x >= this instanceof 0 ;
0n . x instanceof { } ?? 0 ;
0n < 1n instanceof 0 ;
0n < 1n instanceof 0 ?? 0 ;
0n <= 0 instanceof 0 ;
0n <= 1n instanceof 0 & 0 ;
0n <= `` instanceof 0 ;
0n <= { } instanceof 0 & 0 ;
0n >= 0 . x instanceof 0 ;
0n >= 0 instanceof 0 ;
0n in this instanceof 0 ;
0n || 0 instanceof 0 ? 0 : 0 ;
1 ** 1 instanceof 0 ;
1 ** null instanceof 0 ;
1 < 0 instanceof 0 ;
1 << 0 instanceof 0 ;
1 <= 0 instanceof 0 ;
1 >= 0 instanceof 0 ;
1n . x instanceof 0 ?? 0 ;
1n . x instanceof 0 instanceof 0 ;
1n < 0 instanceof 0 ;
1n < 1n instanceof 0 ;
1n < `` instanceof 0 ;
1n < this instanceof 0 ;
1n <= - { } instanceof 0 ; ;
1n <= 0 instanceof 0 & 0 ;
1n <= 0 instanceof 0 ;
1n <= 0n instanceof 0 ;
1n <= 1n instanceof 0 ;
1n <= `` instanceof 0 ;
1n <= null instanceof 0 ;
1n <= { } instanceof 0 ;
1n >= 0 instanceof 0 ;
1n ? 0 & 0 instanceof 0 . x >= 0 : 0 <= 0 ;
1n ? 0 & 0 instanceof [ ] >= 0 : 0 <= 0 ;
[ ! ! 0 instanceof 0 ] ;
[ ! 0 / + 0 < 0 instanceof 0 , 0 ] ;
[ ! 0 / 0 >= 1n instanceof 0 , 0 ] ;
[ ! typeof 0 instanceof 0 ] ;
[ ! ~ 0 instanceof 0 ] ;
[ '' < ! typeof 0 instanceof 0 , 0 ] ;
[ '' >= 0n instanceof 0 , 0 ] ;
[ + ! 0 instanceof 0 ] ;
[ , ! 0 > 0 instanceof 0 ] ;
[ , ! 0 > 0n instanceof 0 ] ;
[ , ! 0 > 1n instanceof 0 ] ;
[ , - 0 > 0 instanceof 0 ] ;
[ , ... 0 . x instanceof + 0 ] ;
[ , ... 0 instanceof 0 . x > 0 ] ;
[ , ... 0 instanceof 0 . x ] ;
[ , ... 0 instanceof [ ] > 0 ] ;
[ , ... 0 instanceof [ ] ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield 0 instanceof 0 ?. x ) { } } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield 0 instanceof [ ] ) { } } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { switch ( yield x instanceof [ ] ) { } } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 instanceof 0 . x ; } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 instanceof 0 ; } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 instanceof `${ 0 }` . x ; } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 instanceof x ; } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 instanceof { } ; } } ] ;
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * x instanceof 0 | 0 ^ 0 != 0 , 0 , 0 ; } } ] ;
[ , 0 . x > 0 instanceof 0 ] ;
[ , 0 === 0 ?. x instanceof 0 ] ;
[ , 0 === 0 instanceof { } ] ;
[ , 0 === 0n ?. x instanceof 0 ] ;
[ , 0 === `` ?. x instanceof '' ] ;
[ , 0 === true ?. x instanceof 0 ] ;
[ , 0 > ! ! 0 instanceof 0 ] ;
[ , 0 > ! 0 instanceof 0 ] ;
[ , 0 > '' instanceof 0 ] ;
[ , 0 > - 0 instanceof 0 ] ;
[ , 0 > 0 [ 0 ] instanceof 0 ] ;
[ , 0 > [ ] instanceof 0 ] ;
[ , 0 > null instanceof 0 ] ;
[ , 0 > void 0 instanceof 0 ] ;
[ , 0 > { } instanceof 0 ] ;
[ , 0 > ~ 0 instanceof 0 ] ;
[ , 0 >= x instanceof 0 ] ; var x ;
[ , 0 [ 0 ] instanceof this ] ;
[ , 0 instanceof 0 . x ] ;
[ , 0 instanceof 0 === 0 ] ;
[ , 0 instanceof 0 ] ;
[ , 0 instanceof 0n . x ] ;
[ , 0 instanceof [ ] ] ;
[ , 0 instanceof `` . x ] ;
[ , 0 instanceof async function x ( ) { } ?. x ** 0 ** 0 ] ;
[ , 0 instanceof { [ Symbol . hasInstance ] : - 0 } ] ;
[ , 0 instanceof { [ Symbol . hasInstance ] : function * ( [ ] ) { } } ] ;
[ , 1n > null instanceof 0 ] ;
[ , 1n > this instanceof 0 ] ;
[ , `` > { } instanceof 0 ] ;
[ , null > 0 instanceof 0 ] ;
[ , this > { } instanceof 0 ] ;
[ , { } > 0 instanceof 0 ] ;
[ , { } > `` instanceof 0 ] ;
[ , { } > this instanceof 0 ] ;
[ , { } > { } instanceof 0 ] ;
[ - 0 . x instanceof 0 ] ;
[ - 0 >= 0 instanceof 0 , 0 ] ;
[ - true instanceof 0 ] ;
[ ... 0 instanceof 0 - 0 + 0 ** ~ 0 ] ;
[ ... 0 instanceof 0 . x ?. x ] ;
[ ... 0 instanceof 0 . x ] ;
[ ... 0 instanceof 0 ] ;
[ ... 0 instanceof function ( ) { } ( ) ] ;
[ ... 0 instanceof function * ( ) { } ( ) ] ;
[ ... 0 instanceof true . x ] ;
[ ... 0 instanceof typeof '' . x ] ;
[ ... 0 instanceof typeof 1n . x ] ;
[ ... 0 instanceof typeof [ ] . x ] ;
[ ... 0 instanceof typeof true . x ] ;
[ ... 0 instanceof { } ] ;
[ ... [ 0 < 0 ** ~ 0 instanceof 0 ] ] ;
[ ... { [ Symbol . iterator ] : function * ( ) { yield 0 instanceof 0 ; } } ] ;
[ ... { raw : '' } instanceof async function ( ) { } ] ;
[ 0 * class x { } [ 0 ? 0 : 0 ] instanceof 0 ] ;
[ 0 * this instanceof 0 ] ;
[ 0 ** ~ + + 0 / - 0 instanceof 0 ] ;
[ 0 ** ~ 0 * - 0 < 0 instanceof 0 , 0 ] ;
[ 0 ** ~ 0 * 0 ** 0 < 0 instanceof 0 , 0 ] ;
[ 0 ** ~ 0 * 0 ** 0 < 1n instanceof 0 , 0 ] ;
[ 0 ** ~ 0 * 0 instanceof 0 ] ;
[ 0 ** ~ 0 * ~ 0 < 0 instanceof 0 , 0 ] ;
[ 0 ** ~ 0 / ~ 0 < 0 instanceof 0 , 0 ] ;
[ 0 ** ~ 0 / ~ 0 < 1n instanceof 0 , 0 ] ;
[ 0 , , 0 . x instanceof 0 ] ;
[ 0 , , 0 [ 0 ] instanceof 0 ] ;
[ 0 , , 0 instanceof 0 . x ] ;
[ 0 , , 0 instanceof 0 ] ;
[ 0 , , 0 instanceof this ] ;
[ 0 , , 0 instanceof { } ] ;
[ 0 , , 1n . x instanceof 0 ] ;
[ 0 , , `` . x instanceof 0 ] ;
[ 0 , , this instanceof async function ( ) { } ] ;
[ 0 , 0 !== 0 . x instanceof 0 , ] ;
[ 0 , 0 !== 0 instanceof '' . x , ] ;
[ 0 , 0 !== 0 instanceof 0 . x , ] ;
[ 0 , 0 !== 0 instanceof 1n . x , ] ;
[ 0 , 0 !== 0 instanceof [ ] , ] ;
[ 0 , 0 !== 0 instanceof [ ] . x , ] ;
[ 0 , 0 !== 0 instanceof true . x , ] ;
[ 0 , 0 !== 0 instanceof { [ Symbol . hasInstance ] : class { } } , ] ;
[ 0 , 0 !== 0 instanceof { [ Symbol . hasInstance ] : false } , ] ;
[ 0 , 0 !== 0 instanceof { [ Symbol . hasInstance ] : x => await } , ] ;
[ 0 , 0 !== 0 instanceof { [ Symbol . hasInstance ] : { } } , ] ;
[ 0 , 0 !== 0n . x instanceof [ ] , ] ;
[ 0 , 0 !== `` . x instanceof this , ] ;
[ 0 , 0 !== this . x instanceof this , ] ;
[ 0 , 0 . x instanceof { } , , ] ;
[ 0 , 0 === 0 instanceof 0 ] ;
[ 0 , 0 in + { [ Symbol . toPrimitive ] : x => 0 instanceof 0 instanceof 0 } , , ] ;
[ 0 , 0 instanceof 0 . x , , ] ;
[ 0 , 0 instanceof 0 / ~ 0 , , ] ;
[ 0 , 0 instanceof 0 ] ;
[ 0 , 0 instanceof 1n . x , , ] ;
[ 0 , 0 instanceof [ ] , , ] ;
[ 0 , 0 instanceof `${ 0 }` . x , , ] ;
[ 0 , 0 instanceof `${ 0 }` [ 0 ] , , ] ;
[ 0 , 0 instanceof `` [ '' ] , , ] ;
[ 0 , 0 instanceof `` [ 0 % 0 ] , , ] ;
[ 0 , 0 instanceof `` [ 0 ] , , ] ;
[ 0 , 0 instanceof true . x , , ] ;
[ 0 , 0 instanceof { } , , ] ;
[ 0 , 0 instanceof { } . x , , ] ;
[ 0 , 0n . x instanceof { } , , ] ;
[ 0 , [ ] . x instanceof { } , , ] ;
[ 0 , true . x instanceof { } , , ] ;
[ 0 < { [ Symbol . toPrimitive ] : function ( x ) { } } instanceof this , 0 ] ;
[ 0 <= 0 + { [ Symbol . toPrimitive ] : ( ) => { throw 0 instanceof { } ; } } ] ;
[ 0 <= 0 . x instanceof this , 0 ] ;
[ 0 <= 0 instanceof 0 . x , 0 ] ;
[ 0 <= 0 instanceof 0n . x , 0 ] ;
[ 0 <= 0 instanceof [ ] . x , 0 ] ;
[ 0 <= 0 instanceof `${ 0 }` . x , 0 ] ;
[ 0 == '' . x instanceof 0 <= 0 , 0 ] ;
[ 0 == 0 ?. x instanceof [ ] <= 0 ] ;
[ 0 == 0 instanceof '' . x <= 0 , 0 ] ;
[ 0 == 0 instanceof 0 . x <= 0 ] ;
[ 0 == 0 instanceof 0 . x ] ;
[ 0 == 0 instanceof 1n [ 0 ] <= 0 ] ;
[ 0 == 0 instanceof [ 0 , ] [ 0 ] <= 0 ] ;
[ 0 == 0 instanceof [ ] <= 0 ] ;
[ 0 == 0 instanceof [ ] [ 0 ] <= 0 ] ;
[ 0 == 0 instanceof [ ] ] ;
[ 0 == 0 instanceof `${ 0 }` . x ] ;
[ 0 == 0 instanceof `${ 0 }` [ 0 ] <= 0 ] ;
[ 0 == 0 instanceof `` [ 0 ] <= 0 ] ;
[ 0 == 0 instanceof function ( ) { } . x ] ;
[ 0 == 0 instanceof true . x <= 0 , 0 ] ;
[ 0 == 0 instanceof true . x ] ;
[ 0 == this . x instanceof 0 <= 0 , 0 ] ;
[ 0 ?. x instanceof 0 ^ 0 ] ;
[ 0 ] <= { } instanceof 0 & 0 ;
[ 0 ] >= { } instanceof 0 ;
[ 0 ] in this instanceof 0 ;
[ 0 ] instanceof 0 ;
[ 0 instanceof ! ! 0 ] ;
[ 0 instanceof - 0n ] ;
[ 0 instanceof - 1n ] ;
[ 0 instanceof 0 . x < 0 , 0 ] ;
[ 0 instanceof 0 . x ] ;
[ 0 instanceof 0 . x ^ 0 ] ;
[ 0 instanceof 0 ] ;
[ 0 instanceof 0n . x ^ 0 ] ;
[ 0 instanceof 1n + `` , ] ;
[ 0 instanceof 1n ?. x ?. x ] ;
[ 0 instanceof [ ] . x ^ 0 ] ;
[ 0 instanceof [ ] ?. x ?. x ] ;
[ 0 instanceof [ ] ] ;
[ 0 instanceof `` ?. [ 0 ] ?. x ] ;
[ 0 instanceof `` ?. x ?. x ] ;
[ 0 instanceof `` ?. x ] ;
[ 0 instanceof null ?. x ?. x ] ;
[ 0 instanceof true . x ^ 0 ] ;
[ 0 instanceof true ?. x ?. x ] ;
[ 0 instanceof typeof '' ] ;
[ 0 instanceof typeof 0 . x ] ;
[ 0 instanceof typeof 1n ] ;
[ 0 instanceof typeof class { } ] ;
[ 0 instanceof typeof null ] ;
[ 0 instanceof typeof true ] ;
[ 0 instanceof typeof x ] ;
[ 0 instanceof typeof { } ] ;
[ 0 instanceof { } < 0 , 0 ] ;
[ 0 instanceof { } ] ;
[ 0 instanceof { } ^ 0 ] ;
[ 0 instanceof ~ ! ! 0 ] ;
[ 0 instanceof ~ 1n . x ] ;
[ 0 instanceof ~ [ ] ] ;
[ 0 instanceof ~ `` . x ] ;
[ 0 instanceof ~ ~ 1n ] ;
[ 1 && 0 instanceof 0 ?. x , , 0 ] ;
[ 1 / ~ 0 instanceof 0 ] ;
[ [ 0 , ] >= 0 ** ~ 0 instanceof 0 ] ;
[ [ ] ?. x instanceof 0 ^ 0 ] ;
[ ] ** 0 instanceof 0 ;
[ ] ** 1 instanceof 0 ;
[ ] + 0 instanceof 0 ;
[ ] + 0n instanceof 0 ;
[ ] - 0 instanceof 0 ;
[ ] . x <= 0 instanceof 0 ; ;
[ ] . x >= this instanceof 0 ;
[ ] . x instanceof 0 instanceof 0 ;
[ ] < 0 instanceof 0 ;
[ ] << 0 instanceof 0 ;
[ ] instanceof async function ( ) { } ;
[ ] instanceof async function x ( ) { } ;
[ `${ 0 }` < typeof 0 instanceof 0 , 0 ] ;
[ `` * - 0 instanceof 0 ] ;
[ `` / - 0 instanceof { [ Symbol . hasInstance ] : ( ) => { throw 0 ; } } ] ;
[ `` ?. x instanceof 0 ^ 0 ] ;
[ delete 0 . x instanceof 0 ] ;
[ delete 0 / 0 >= 0 instanceof 0 , 0 ] ;
[ delete 0n . x instanceof 0 ] ;
[ delete [ ] . x instanceof 0 ] ;
[ delete `` . x instanceof 0 ] ;
[ delete true . x instanceof 0 ] ;
[ false / - 0 instanceof 0 ] ;
[ null / 0 instanceof 0 ] ;
[ this >= 0n instanceof 0 , 0 ] ;
[ this ] >= { } instanceof 0 ;
[ this instanceof async function ( ) { } ^ 0 ] ;
[ true / - 0 instanceof 0 ] ;
[ true / - 0 instanceof { [ Symbol . hasInstance ] : ( ) => { return `${ 0 }${ 0 }${ { add : async * function ( x ) { } } }` ; } } ] ;
[ true / - 0 instanceof { [ Symbol . hasInstance ] : 0 ^ 0 } ] ;
[ true ?. x instanceof 0 ^ 0 ] ;
[ typeof '' < typeof 0 instanceof 0 , 0 ] ;
[ typeof 0 < typeof 0 instanceof 0 , 0 ] ;
[ typeof 0n . x instanceof 0 ] ;
[ typeof `` . x instanceof 0 ] ;
[ typeof true . x instanceof 0 ] ;
[ typeof { } . x instanceof 0 ] ;
[ { [ Symbol . toPrimitive ] : x => 0 } < 0 instanceof this , 0 ] ;
[ ~ 0 * - 0 instanceof 0 ] ;
[ ~ 0 / 0 instanceof 0 ] ;
[ ~ 0n >= 0n instanceof 0 , 0 ] ;
[ ~ delete 0 / - 0 instanceof 0 ] ;
`${ 0 . x instanceof 0 }` ;
`${ 0 instanceof ! '' }` ;
`${ 0 instanceof ! 0 . x }` ;
`${ 0 instanceof ! 1n . x }` ;
`${ 0 instanceof ! `` . x }` ;
`${ 0 instanceof ! null }` ;
`${ 0 instanceof ! this }` ;
`${ 0 instanceof ! true . x }` ;
`${ 0 instanceof ! { } . x }` ;
`${ 0 instanceof 0 . x }` ;
`${ 0 instanceof 0 }` ;
`${ 0 instanceof 0n . x }` ;
`${ 0 instanceof [ ] . x }` ;
`${ 0 instanceof void '' . x }` | 0 ;
`${ 0 instanceof void 0 . x }` ;
`${ 0 instanceof void 1n . x }` | 0 ;
`${ 0 instanceof void this . x }` | 0 ;
`${ 0 instanceof void true . x }` | 0 ;
`${ 0 instanceof { } }` ;
`${ 0 }${ 0 != 0 instanceof 0 ** 0 / 0 * ! 0 }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof 0 ** 0 / 0 * ~ 0 }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof 0 ** ~ 0 * ~ 0 / 0 }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof 1n . x }` ;
`${ 0 }${ 0 != 0 instanceof `` . x }` ;
`${ 0 }${ 0 != 0 instanceof this . x }` ;
`${ 0 }${ 0 != 0 instanceof { [ Symbol . hasInstance ] : `` } }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof { [ Symbol . hasInstance ] : class { } } }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof { [ Symbol . hasInstance ] : x => 0 ( ) ?. x } }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof { [ Symbol . hasInstance ] : { } } }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof ~ 0 / 0 % 0 }${ 0 }` ;
`${ 0 }${ 0 != 0 instanceof ~ 0 / 0 / 0 }${ 0 }` ;
`${ 0 }${ 0 . x instanceof 0 . x }` ;
`${ 0 }${ 0 instanceof 0 . x }` ;
`${ 0 }${ 0 instanceof 0 >>> null }` ;
`${ 0 }${ 0 instanceof 0 ?. x }` ;
`${ 0 }${ 0 instanceof 0 }` ;
`${ 0 }${ 0 instanceof 0n . x >>> 0 in 0 }${ true }${ 0 }` ;
`${ 0 }${ 0 instanceof 1 >>> 0 . x }` ;
`${ 0 }${ 0 instanceof 1 >>> [ , ] [ 0 ] -- }` ;
`${ 0 }${ 0 instanceof 1 >>> [ , ] [ 1 ] -- }` ;
`${ 0 }${ 0 instanceof 1 >>> [ 0 ] [ 0 ] -- }` ;
`${ 0 }${ 0 instanceof 1 >>> [ null ] [ 0 ] -- }` ;
`${ 0 }${ 0 instanceof 1 >>> [ true ] [ 0 ] -- }` ;
`${ 0 }${ 0 instanceof 1 >>> [ { } ] [ 0 ] -- }` ;
`${ 0 }${ 0 instanceof [ ] . x }` ;
`${ 0 }${ 0 instanceof [ ] }` ;
`${ 0 }${ 0 instanceof `` . x >>> 0 in 0 }${ true }${ 0 }` ;
`${ 0 }${ 0 instanceof `` . x }` ;
`${ 0 }${ 0 instanceof this . x >>> 0 in 0 }${ true }${ 0 }` ;
`${ 0 }${ 0 instanceof true . x }` ;
`${ 0 }${ 0 instanceof { [ Symbol . hasInstance ] : ( ) => { throw 0 ; } } }` ;
`${ 0 }${ 0 instanceof { [ Symbol . hasInstance ] : false } }` ;
`${ 0 }${ 0 instanceof { } }` ;
`${ 0 }${ 0 }${ 0 instanceof 0 . x }${ 0 }` ;
`${ 0 }${ 0 }${ 0 instanceof 0 [ 0 ] }` ;
`${ 0 }${ 0 }${ 0 instanceof 0 }` ;
`${ 0 }${ 0 }${ 0 instanceof 1n . x }${ 0 }` ;
`${ 0 }${ 0 }${ 0 instanceof `` . x }${ 0 }` ;
`${ 0 }${ 0 }${ 0 instanceof this }` ;
`${ 0 }${ 0 }${ 0 instanceof true . x }${ 0 }` ;
`${ 0 }${ 0 }${ 0 instanceof { [ Symbol . hasInstance ] : '' } }` ;
`${ 0 }${ 0 }${ 0 instanceof { } }` ;
`${ 0 }${ [ , ] . x ++ instanceof 0 }` ;
`${ 0 }` . x instanceof { } ?? 0 ;
`${ 0 }` [ 0 ] [ 0 % 0 ] instanceof 0 <= 0 ;
`${ 0 }` [ 0 ] [ 0 ] instanceof 0 <= 0 ;
`${ 0 }` [ 0 ] instanceof 0 ;
`${ 0 }` [ 0 ] instanceof { } ;
`${ true ?. x instanceof 0 }` ;
`${ ~ 1n instanceof 0 }` ;
`${ ~ null instanceof 0 }` ;
`${ ~ { } instanceof 0 }` ;
`` % 0 instanceof 0 ;
`` . x <= 0 instanceof 0 ; ;
`` . x instanceof 0 instanceof 0 ;
`` <= ! 1 instanceof 0 ;
`` <= '' instanceof 0 ;
`` <= - 0 instanceof 0 ;
`` <= 0 % 0 instanceof 0 ;
`` <= 0 . x instanceof 0 ;
`` <= 0 instanceof 0 ;
`` <= 1 instanceof 0 ;
`` <= 1n instanceof 0 ;
`` <= [ ] instanceof 0 ;
`` <= ~ 0 instanceof 0 ;
`` >= 0 instanceof 0 ;
`` [ 0 / 0 ] instanceof 0 ;
`` [ 0 ] instanceof 0 ;
`` in this instanceof 0 ;
`` instanceof 0 ;
`` || 0 instanceof 0 ? 0 : 0 ;
delete 0 instanceof 0 ;
for ( '' . x ?. x instanceof 0 & 0 ; ; ) ;
for ( '' . x instanceof 0 ; 0 ; ) ;
for ( '' . x instanceof 0 ; ; ) ;
for ( '' . x instanceof { [ Symbol . hasInstance ] : ( 0 ) } ; 0 ; ) ;
for ( '' ?. x instanceof 0 & 0 ; ; ) ;
for ( + ! ! 0 instanceof [ ] ; ; ) ;
for ( + ! ~ - 0 instanceof '' ; ; ) ;
for ( - ! ~ 0 instanceof 0 ; ; ) ;
for ( 0 !== 0 instanceof 0 >= 0 ; ; 0 ) break ;
for ( 0 ** ~ 0 % 0 instanceof 0 ; ; ) ;
for ( 0 . x instanceof 0 ; 0 ; ) ;
for ( 0 . x instanceof 0 ; ; ) ;
for ( 0 . x instanceof ~ ! - delete 0 ; 0 ; ) ;
for ( 0 < 0 === 0 instanceof 0 ; 0 ; 0 ) ;
for ( 0 === 0 instanceof 0 ; ; 0 ) break ;
for ( 0 [ 0 ] in '' . x instanceof { } , 0 ) ;
for ( 0 [ 0 ] in 0 . x instanceof { } , 0 ) ;
for ( 0 [ 0 ] in 0 instanceof 0 [ 0 ] , 0 ) ;
for ( 0 [ 0 ] in 0 instanceof `` . x , 0 ) ;
for ( 0 [ 0 ] in 0 instanceof true . x , 0 ) ;
for ( 0 [ 0 ] in 0 instanceof { [ Symbol . hasInstance ] : 0 ?? 0 } , 0 ) ;
for ( 0 [ 0 ] in 0 instanceof { [ Symbol . hasInstance ] : x => await } , 0 ) ;
for ( 0 [ 0 ] in 0 instanceof { } , 0 ) ;
for ( 0 [ 0 ] in 0 instanceof { } . x , 0 ) ;
for ( 0 [ 0 ] in 0n . x instanceof { } , 0 ) ;
for ( 0 [ 0 ] in function x ( ) { } . x instanceof { } , 0 ) ;
for ( 0 instanceof ! - ! 0 - 0 ; ; ) ;
for ( 0 instanceof ! ~ 1n ; ; ) ;
for ( 0 instanceof + 0 . x ; ; ) ;
for ( 0 instanceof + [ ] ; ; ) ;
for ( 0 instanceof + null ; ; ) ;
for ( 0 instanceof + x ; ; ) var x ;
for ( 0 instanceof 0 != 0 ?? 0 ; ; ) { }
for ( 0 instanceof 0 ** + ~ 0 - 0 ; ; ) ;
for ( 0 instanceof 0 . x ; 0 ; ) ;
for ( 0 instanceof 0 . x ; ; ) ;
for ( 0 instanceof 0 ; 0 ; ) ;
for ( 0 instanceof 0 ; ; ) ;
for ( 0 instanceof 0 ; ; ) for ( let x ; 0 ; ) ;
for ( 0 instanceof 0 ; ; 0 ) break ;
for ( 0 instanceof 0 ?. x ; ; 0 ) { }
for ( 0 instanceof 1n . x ; ; ) ;
for ( 0 instanceof 1n ?. x ; ; 0 ) throw 0 ;
for ( 0 instanceof [ ] ; 0 ; ) ;
for ( 0 instanceof [ ] ; ; ) ;
for ( 0 instanceof [ ] ; ; 0 ) throw 0 ;
for ( 0 instanceof `` [ 0 % 0 ] ; ; ) ;
for ( 0 instanceof `` [ 0 ] ; ; ) ;
for ( 0 instanceof `` [ [ ] ] ; ; ) ;
for ( 0 instanceof async function ( ) { } ( ) ?. x ; ; ) ;
for ( 0 instanceof async function * x ( ) { } . x ; 0 ; ) ;
for ( 0 instanceof false ** 0 ** ~ 0 ; ; ) ;
for ( 0 instanceof new class { } ( ) ; ; ) ;
for ( 0 instanceof new function ( ) { } ( ) ; ; ) ;
for ( 0 instanceof this ?. x ; ; 0 ) throw 0 ;
for ( 0 instanceof true ** 0 ** ~ 0 ; ; ) ;
for ( 0 instanceof { [ 0 < 0 + 0 ** ~ 0 ] : x => { throw 0 ; } } ; ; ) ;
for ( 0 instanceof { [ Symbol . hasInstance ] : ( ) => { throw 0 ; } } & 0 ; ; ) ;
for ( 0 instanceof { [ Symbol . hasInstance ] : 0 } & 0 ; ; ) ;
for ( 0 instanceof { [ Symbol . hasInstance ] : 0 } ; ; ) ;
for ( 0 instanceof { [ Symbol . hasInstance ] : x => { throw 0 ; } } ; ; ) ;
for ( 0 instanceof { } ; ; ) ;
for ( 0n . x ?. x instanceof 0 & 0 ; ; ) ;
for ( 0n . x instanceof 0 ; ; ) ;
for ( 0n . x instanceof ~ ! - delete 0 ; 0 ; ) ;
for ( [ 0 ] . x ?. x instanceof 0 & 0 ; ; ) ;
for ( [ ] . x instanceof 0 ; 0 ; ) ;
for ( [ ] ?. x instanceof [ ] & 0 ; ; ) ;
for ( true . x instanceof 0 ; ; ) ;
for ( x in 0 instanceof 0 ? 0 : 0 ) ;
for ( x instanceof 0 ; ; ) var x ;
for ( { } . x instanceof 0 ; ; ) ;
for ( { } of [ 0 ] ) 0 instanceof ~ 0 >>> 0 == 0 ;
for ( ~ 0 / 0 instanceof 0 ; ; ) ;
for ( ~ 0 / 1 instanceof 0 ; ; ) ;
function x ( ) { } 0 || x instanceof 0 , 0 ;
if ( 0 , 0 instanceof 0 . x ) ; else ;
if ( 0 , 0 instanceof [ ] ) ; else ;
if ( 0 , 0 instanceof { [ Symbol . hasInstance ] : '' } ) ; else ;
if ( 0 . x instanceof 0 ) ;
if ( 0 . x instanceof 0 ) ; else ;
if ( 0 ? 0 : 0 . x instanceof 0 ) ;
if ( 0 ? 0 : 0 instanceof 0 . x ) ;
if ( 0 ? 0 : 0 instanceof [ ] ) ;
if ( 0 ?. x instanceof { } ) ;
if ( 0 instanceof '' . x ) ; else ;
if ( 0 instanceof 0 ) ;
if ( 0 instanceof 0 ) ; else ;
if ( 0 instanceof 0 . x && 0 ) ;
if ( 0 instanceof 0 . x ) ;
if ( 0 instanceof 0 . x ) ; else ;
if ( 0 instanceof 0n . x ) ; else ;
if ( 0 instanceof 1 >>> 0 ** 0 ) ;
if ( 0 instanceof 1n . x ) ; else ;
if ( 0 instanceof [ ] && 0 ) ;
if ( 0 instanceof [ ] ) ; else ;
if ( 0 instanceof `` . x ) ; else ;
if ( 0 instanceof true . x ) ; else ;
if ( 0 instanceof { [ Symbol . hasInstance ] : 0 } ) ;
if ( 0 instanceof { [ Symbol . hasInstance ] : [ ] } ) ;
if ( 0 instanceof { [ Symbol . hasInstance ] : class x { } } ) ;
if ( 0 instanceof { [ Symbol . hasInstance ] : true } ) ;
if ( 0 instanceof { [ Symbol . hasInstance ] : x => new 0 ( ) } ) ;
if ( 0 instanceof { [ Symbol . hasInstance ] : x => new 0 } ) ;
if ( 0 instanceof { } ) ;
if ( 0 instanceof { } ) ; else ;
if ( 0 instanceof { } . x ) ; else ;
let x ; 0 instanceof x << 0 ;
let x ; 0 || x instanceof 0 , 0 ;
let x ; [ , 0 >= x instanceof 0 ] ;
let x ; x instanceof 0 ;
let x ; x instanceof x ;
new class { } instanceof async function ( ) { } instanceof 0 ;
new function ( ) { return 0 % 0 ** ~ 0 instanceof 0 ; } ;
new function ( ) { return 0 . x instanceof 0 ; } ;
new function ( ) { return 0 > { [ Symbol . toPrimitive ] : x => 0 instanceof 0 } ; } ;
new function ( ) { return 0 instanceof '' . x ; } ;
new function ( ) { return 0 instanceof 0 . x ; } ;
new function ( ) { return 0 instanceof 0 ; } ;
new function ( ) { return 0 instanceof 0n . x ; } ;
new function ( ) { return 0 instanceof { [ Symbol . hasInstance ] : true } ; } ;
new function ( ) { return 0 instanceof { } ; } ;
new function ( ) { return 1 ? 0 instanceof 0 : 0 ( ) ; } ;
new function ( ) { return 1n . x instanceof 0 ; } ;
new function ( ) { return ; } instanceof 0 instanceof 0 ;
new function ( ) { return [ ] . x instanceof 0 ; } ;
new function ( ) { } instanceof 0 ;
new function ( ) { } instanceof { [ Symbol . hasInstance ] : 0 } instanceof 0 ;
null ** 0 instanceof 0 ;
null + 0 instanceof 0 ;
null + `` instanceof 0 ;
null - 0 instanceof 0 ;
null < 0 instanceof 0 ;
null < 1n instanceof 0 ;
null << 0 instanceof 0 ;
null <= ! 0 instanceof 0 ;
null <= `` instanceof 0 ;
null > 0 instanceof 0 ;
null >= 0 instanceof 0 ;
null in this instanceof 0 ;
switch ( 0 ) { case - 0 * 0 ** ~ 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case 0 ** 0 * 0 ** ~ 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case 0 ** 0 / - 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case 0 . x instanceof 0 : default : case 0 : }
switch ( 0 ) { case 0 . x instanceof 0 : }
switch ( 0 ) { case 0 . x instanceof this : default : }
switch ( 0 ) { case 0 / 0 ** ~ 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case 0 instanceof '' . x : default : }
switch ( 0 ) { case 0 instanceof 0 . x : ; }
switch ( 0 ) { case 0 instanceof 0 . x : default : case 0 : }
switch ( 0 ) { case 0 instanceof 0 . x : default : }
switch ( 0 ) { case 0 instanceof 0 . x : }
switch ( 0 ) { case 0 instanceof 0 : ; }
switch ( 0 ) { case 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case 0 instanceof 0 : default : }
switch ( 0 ) { case 0 instanceof 0 : }
switch ( 0 ) { case 0 instanceof 0n . x : default : }
switch ( 0 ) { case 0 instanceof 1 ** 0 ** ~ 0 : default : case 0 : }
switch ( 0 ) { case 0 instanceof [ ] : }
switch ( 0 ) { case 0 instanceof { [ Symbol . hasInstance ] : 0 } : default : case 0 : }
switch ( 0 ) { case 0 instanceof { [ Symbol . hasInstance ] : false } : }
switch ( 0 ) { case 0 instanceof { } : ; }
switch ( 0 ) { case 0 instanceof { } : default : case 0 : }
switch ( 0 ) { case 0 instanceof { } : default : }
switch ( 0 ) { case 1n . x instanceof 0 : default : case 0 : }
switch ( 0 ) { case [ 0 ] . x instanceof 0 : default : case 0 : }
switch ( 0 ) { case function ( ) { } instanceof async function ( ) { } : }
switch ( 0 ) { case true . x instanceof this : default : case 0 : }
switch ( 0 ) { case { 0 : null } . x instanceof 0 : }
switch ( 0 ) { case ~ 0 * - 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case ~ 0 * 0 ** ~ 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case ~ 0 / - 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { case ~ 0 / 0 ** ~ 0 instanceof 0 : default : case 0 : }
switch ( 0 ) { default : case 0 . x instanceof { } : }
switch ( 0 ) { default : case 0 instanceof 0 . x : }
switch ( 0 ) { default : case 0 instanceof 0 : }
switch ( 0 ) { default : case 0 instanceof 0 ?. x : }
switch ( 0 ) { default : case 0 instanceof 1n ?. x : }
switch ( 0 ) { default : case 0 instanceof [ ] : }
switch ( 0 ) { default : case 0 instanceof { } : }
switch ( 0 [ 0 ] instanceof 0 ) { }
switch ( 0 instanceof '' . x ) { }
switch ( 0 instanceof 0 ) { }
switch ( 0 instanceof 0 . x ) { }
switch ( 0 instanceof true . x ) { }
switch ( 0 instanceof { [ Symbol . hasInstance ] : '' } ) { }
switch ( 0 instanceof { } ) { }
switch ( 0 instanceof { } . x ) { }
switch ( `` [ 0 ] instanceof 0 ) { }
switch ( this [ 0 ] instanceof 0 ) { }
this % 0 instanceof 0 ;
this ** 1 instanceof 0 ;
this - 0 instanceof 0 ;
this . x instanceof { } ?? 0 ;
this < 0 instanceof 0 ;
this < 1n instanceof 0 ;
this <= ! 0 instanceof 0 ;
this <= 0 instanceof 0 ;
this <= 1n instanceof 0 ;
this <= 1n instanceof 0 ; ;
this <= [ 0 ] instanceof 0 ; ;
this <= `` instanceof 0 & 0 ;
this <= `` instanceof 0 ;
this <= this instanceof 0 & 0 ;
this <= this instanceof 0 ; ;
this <= { } instanceof 0 & 0 ;
this == this == 0 instanceof 0 % 0 ** 0 ** 0 ;
this > 0 instanceof 0 ;
this > 1n instanceof 0 ;
this >= 0 instanceof 0 ;
this >= [ 0 ] instanceof 0 ;
this >= this instanceof 0 ;
true ** 0 instanceof 0 ;
true . x <= 0 instanceof 0 ; ;
true . x >= this instanceof 0 ;
true . x instanceof 0 ?? 0 ;
true . x instanceof 0 instanceof 0 ;
true > 0 instanceof 0 ;
typeof ! 0 instanceof 0 ;
typeof '' instanceof 0 ;
typeof 0 . x instanceof 0 ;
typeof 0 [ 0 instanceof '' . x ] ;
typeof 0 [ 0 instanceof 0 . x ] ;
typeof 0 [ 0 instanceof 1n . x ] ;
typeof 0 instanceof 0 ;
typeof [ ] instanceof 0 ;
typeof class { } instanceof 0 ;
typeof null instanceof 0 ;
typeof x instanceof 0 ;
var x ; `${ 0 instanceof void this . x }` | 0 ;
var x ; for ( this . x instanceof 0 ; ; ) ;
var x ; x instanceof 0 ;
var x = async x => { ; for ( 0 [ 0 ] instanceof 0 ; ; 0 ) { } } ; x ( ) ;
var x = async x => { ; for ( 0 instanceof 0 ; ; 0 ) { } } ; x ( ) ;
void 0 instanceof 0 ;
x : if ( 0 instanceof 0 >> 0 % 0n . x ) ; else ;
x : switch ( 0 instanceof 0 ) { }
x : switch ( 0 instanceof 0 - 0 ** ~ 0 ) { default : }
x : switch ( 0 instanceof 0 . x ) { default : }
x : switch ( 0 instanceof 1n . x ) { default : }
x : switch ( 0 instanceof `` . x ) { default : }
x : switch ( 0 instanceof { } ) { default : }
x instanceof x ; let x ;
{ if ( 0 | 0 ?. x instanceof { } ) ; }
{ if ( 0 | 0 instanceof 0 . x ) ; }
{ if ( 0 | 0 instanceof function * ( ) { } . x ) ; }
{ if ( 0 | 0 instanceof true . x ) ; }
{ if ( 0 | 0 instanceof { [ Symbol . hasInstance ] : false } ) ; }
{ if ( 0 | 0 instanceof { } ) ; }
{ x = 0 != 0 instanceof 0 === 0 | 0 ? 0 : 0 ; } ;
{ } ( 0 instanceof 0 ) ;
{ } ( 0 instanceof { done : '' } ) ;
{ } + `` instanceof 0 ;
~ ! 0 instanceof 0 ;
~ - ! 0 instanceof 0 ;
~ - '' instanceof 0 ;
~ - null instanceof 0 ;
~ 0 << 0 instanceof 0 ;
~ 0 instanceof 0 ;
~ typeof 0 instanceof 0 ;
~ void 0 instanceof 0 ;
