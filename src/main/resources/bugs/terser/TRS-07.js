! x ; let x ;
( ( ) => x ) ( ) ; let x ; 
+ x ; let x ; 
++ x ** 0 ; let x ; 
- x - 0 ; let x ; 
-- x ; let x ; 
0 != x ; let x ; 
0 & x ; let x ; 
0 ( ... x ) ; let x ; 
0 ( x , 0 ) ; let x ; 
0 ** x ; let x ; 
0 + x ; let x ; 
0 - x ; let x ; 
0 / x ; let x ; 
0 < x ; let x ; 
0 <= x ; let x ; 
0 == x ; let x ; 
0 >>> x ; let x ; 
0 ?. [ x ] ; let x ; 
0 ?. x [ x ] ; let x ; 
0 | x ; let x ; 
[ , x ] ; let x ; 
[ 0 , x ] ; let x ; 
[ x ] ; let x ; 
`${ 0 }${ 0 }${ x }` ; let x ;
`${ 0 }${ x }` ; let x ;
class x { static { throw x ; let x ; } }
let x = void x ;
new function ( ) { return x ; } ; let x ;
new x ( ) ; let x ;
new x ; let x ;
switch ( 0 ) { case 1 : default : case x : let x ; }
switch ( 0 ) { case x : default : let x ; }
switch ( 0 ) { case x : let x ; }
switch ( 0 ) { case x : } let x ;
switch ( x ) { } let x ;
var [ x ] = { [ Symbol . iterator ] : function * ( ) { yield * x ; let x ; } } ;
x && 0 ; let x ;
x ( ) ; let x ;
x ++ ; let x ;
x , 0 ; let x ;
x -- ; let x ;
x ; let x ;
x << 0 ; let x ;
x = 0 ; let x ; 
x >> 0 ; let x ;
x ?. [ x ] ; let x ;
x ^ 0 ; let x ;
x in 0 ; let x ;
x || 0 ; let x ;
x ||= 0 ; let x ;
~ { 1 : x } ; let x ;
