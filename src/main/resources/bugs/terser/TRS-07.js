! 0 - x && 0 ; let x ; 
! 0 / 0 * 1 && x ; let x ; 
! class extends x { ; } ; let x ;
! class { static 0 = x ; } ; let x ; 
! x ( ) ; let x ; 
! x ; let x ;
! x ?? 0 ; let x ; 
! { 1 : x + 0 } ; let x ; 
! { 1 : x [ 0 ] } ; let x ; 
" */
( ( ) => x ) ( ) ; let x ; 
( ( ) => { x ; } ) ( ) ; let x ; 
( x == 0 ) ( ) ; let x ; 
+ function ( ) { } ( ) [ '' >= x ] & 0 ; let x ; 
+ x ; let x ; 
++ x ** 0 ; let x ; 
++ x ; let x ;
- x - 0 ; let x ; 
- x / 0 ; let x ; 
- x ; let x ;
- { ... x | 0 } ; let x ; 
- { ... x } ; let x ;
- { 0 : import ( x = ! 0 ) } ; let x ; 
- { 0 : import ( x = class x { } . x ) } ; let x ; 
- { 0 : import ( x = true . x ) } ; let x ; 
- { 0 : x } ; let x ;
- { 1 : x } ; let x ; 
- { [ x ] : 0 } ; let x ;
-- x ; let x ; 
-- { get 0 ( ) { super [ x ] %= 0 ; ; } , } [ 0 ] ; let x ;
0 != x ; let x ; 
0 % function * ( ) { } ** x ; let x ; 
0 % x != 0 ; let x ; 
0 % x ; let x ;
0 & 0 < - x ; let x ; 
0 & `${ x }` ; let x ; 
0 & x ; let x ; 
0 & x [ [ ] ] ; let x ; 
0 & { 0 : + x } ; let x ; 
0 ( ... x ) ; let x ; 
0 ( ... x ?? 0 ) ; let x ; 
0 ( 0 , ... x ) ; let x ;
0 ( 0 , x ) ; let x ;
0 ( `${ 0 }` [ 0 ] &&= x ) ; let x ;
0 ( x ) ; let x ;
0 ( x , ... 0 ) ; let x ; 
0 ( x , 0 ) ; let x ; 
0 * x > 0 ; let x ; 
0 ** x ; let x ; 
0 + x ; let x ; 
0 - x ; let x ; 
0 - x === 0 ; let x ; 
0 . x *= [ ~ x -- ] ; let x ; 
0 . x = async function * x ( ) { var x ; } / x ; let x ; 
0 . x ??= x != 0 ; let x ; 
0 . x ??= x ; let x ;
0 . x |= x ; let x ;
0 . x ||= this . x %= x ; let x ; 
0 / 0 >= ! x ; let x ; 
0 / 0 >= x in 0 ; let x ; 
0 / x ; let x ; 
0 / x << 0 ; let x ; 
0 < ( x => 0 ) ( ) [ x ] ; let x ;
0 < x ; class x { } 
0 < x ; let x ; 
0 << x ; let x ;
0 << x << 0 ; let x ; 
0 <= x ( ) ; let x ; 
0 <= x ; let x ; 
0 <= x >> 0 ; let x ; 
0 <= x in 0 ; let x ; 
0 == 0 < x ; let x ; 
0 == x ; let x ; 
0 === x ; let x ; 
0 > x ; let x ;
0 >= x ; let x ;
0 >> x ; let x ; 
0 >>> x ; let x ; 
0 >>> x ?? 0 ; let x ; 
0 ? 0 : ++ x ; let x ; 
0 ? 0 : 0 [ 0 ] %= x ; let x ; 
0 ? 0 : x ; let x ;
0 ?. ( ... 0 << x ) ; let x ; 
0 ?. ( ... x / 0 ) ; let x ; 
0 ?. ( 0 , ... [ 0 ] , x ) ; let x ; 
0 ?. ( 0 , x ) ; let x ; 
0 ?. [ 0 , x < new 0 ] ( ) ; let x ; 
0 ?. [ 0 >= x ] . x ; let x ; 
0 ?. [ 0 ^ x ] . x ; let x ; 
0 ?. [ x ] ; class x { }
0 ?. [ x ] ; let x ; 
0 ?. x ( ... x < 0 , ) ; let x ; 
0 ?. x ( 0 , ... '' , ... x , ) ; let x ; 
0 ?. x ( 0 , ... 0 >> this + 0 >>> x , ) ; let x ; 
0 ?. x ( 0 , 0 ** x , ) ; let x ; 
0 ?. x ( x ** 0 , ) ; let x ; 
0 ?. x ?. x in x ; let x ; 
0 ?. x [ + x ] ; let x ; 
0 ?. x [ - 0 >= x ] ; let x ; 
0 ?. x [ 0 + x ( ) + 0 ] ; let x ; 
0 ?. x [ 0 < x ] ; let x ; 
0 ?. x [ 0 == x ] ; let x ; 
0 ?. x [ x & 0 ] ; let x ; 
0 ?. x [ x ] ( ) ; let x ; 
0 ?. x [ x ] ; let x ; 
0 [ 0 ] %= this != x ; let x ; 
0 [ 0 ] %= x ?? 0 ; let x ; 
0 [ 0 ] ??= new x ( ) ; let x ; 
0 [ 0 ] ??= x || new 0 ; let x ; 
0 [ x = 0 ] ; let x ; 
0 [ x ] ; let x ; 
0 [ x ] >= 0 ; let x ; 
0 [ { x = 0 , x } = 0 ] ; let x ; 
0 ^ + x ; let x ; 
0 ^ 0n >> x -- > 0 ; let x ; 
0 ^ x `` >>> 0 ; let x ; 
0 ^ x || 0 ; let x ; 
0 in x ; let x ;
0 instanceof x << 0 ; let x ; 
0 | x ; let x ; 
0 | x == 0 ; let x ; 
0 || 0 < 0 < x && 0 ; let x ; 
0 || 0 > x ; class x { } 
0 || [ ] != x === 0 ; let x ; 
0 || x ; let x ;
0 || x instanceof 0 , 0 ; let x ; 
0n != new x `` ( ) ; let x ; 
1 ? 0 >= import ( 0 . x ??= x ) : 0 ; let x ; 
1 ? x ** ~ 0 : 0 | 0 ; let x ; 
; + x - 0 ; let x ; 
; + x [ 0 ] ; let x ; 
; x - 0 ; let x ; 
; x ; let x ; 
; x [ 0 ] - 0 ; let x ; 
; x [ 0 ] ; let x ; 
; { '' , x ; let x ; } ;
; { x , x ; let x ; } ;
[ , + x ] ; let x ; 
[ , ... import ( x &&= 0 ) ] ; let x ; 
[ , ... x = 0 ] ; let x ; 
[ , ... x ] ; let x ; 
[ , 0 . x %= 0 in x ] ; let x ; 
[ , ] = { [ Symbol . iterator ] : function * ( ) { yield x ; ; } } ; let x ;
[ , x , 0 ] ; let x ; 
[ , x . x ] ; let x ; 
[ , x ?? 0 ] ; let x ; 
[ , x ] ; let x ; 
[ ... 0 < x ] ; let x ; 
[ ... 0 >= x ] ; let x ; 
[ ... 0 ? 0 : x = 0 , ... 0 ] ; let x ; 
[ ... x ] ; let x ;
[ 0 , ( typeof x ) ] ; let x ; 
[ 0 , ( x - 0n ) >= { } ] ; let x ; 
[ 0 , , 0 !== x ] ; let x ; 
[ 0 , , 0 ^ [ , x <= 1 , ] ] ; let x ; 
[ 0 , , x != 0 ] ; let x ; 
[ 0 , , x . x &&= 0 ] ; let x ; 
[ 0 , , x = x => 0 ] ; let x ; 
[ 0 , , x ] ; let x ;
[ 0 , , { x } = x ] ; let x ; 
[ 0 , 0 . x = x ] ; let x ; 
[ 0 , 0 ^ ! x ] ; class x { } 
[ 0 , 1 / x ] ; let x ; 
[ 0 , `` >= x ] ; let x ; 
[ 0 , typeof x << 0 + typeof 0 , , ] ; let x ; 
[ 0 , x ] ; let x ; 
[ 0 <= 0 + { [ Symbol . toPrimitive ] : x ||= 0 } + 1 , , 0 ] ; let x ; 
[ 0 || { [ 0 >= x ] : 0 , } ] ; let x ; 
[ [ ] ? x : 0 ] ; let x ; 
[ ] . x ||= x [ 0 ] / 0 ; let x ; 
[ ] = x ; let x ;
[ `${ 0 }` [ 0 ] &&= ! x ] ; let x ; 
[ typeof x ] ; let x ; 
[ x !== 0 !== 0 , 0 ] ; let x ; 
[ x , 1 / x ] ; let x ; 
[ x = x => 0 ] ; let x ; 
[ x ] ; let x ; 
[ { x , x } = 0 ] ; let x ; 
[ { x , } = 0 ] ; let x ; 
[ { x = 0 , } = 0 ] ; let x ; 
[ { x = 0 } = 0 ] ; let x ; 
[ { x } = 0 ] ; let x ; 
[Exit Tag Mismatch]
`${ 0 & 0 == x }` ; let x ; 
`${ 0 === ( 0 | 0 | x ) }` ; let x ; 
`${ 0 >>> x }` ; let x ; 
`${ 0 }${ 0 + x }` ; let x ; 
`${ 0 }${ 0 . x ??= x in 0 in 0 }${ 0 , 0 }` ; let x ; 
`${ 0 }${ 0 }${ x < 1n }${ 0 }` ; let x ; 
`${ 0 }${ 0 }${ x > - 1n }` ; let x ; 
`${ 0 }${ 0 }${ x [ 0 ] }${ 0 }` ; let x ; 
`${ 0 }${ 0 }${ x }` ; let x ;
`${ 0 }${ 1 <= x }` ; let x ; 
`${ 0 }${ x = x => 0 }` ; let x ; 
`${ 0 }${ x }` ; let x ;
`${ 0 }` [ 0 ] <= x . x ?? 0 ; let x ; 
`${ 1 & x == 0 }` ; let x ; 
`${ x < '' }` ; let x ; 
`${ x = 0 }` ; let x ; 
`${ x }${ x = x => 0 }` ; let x ; 
`${ x }` ; let x ;
`` ?. [ x ] ( ) . x ( ) ; let x ; 
class x { static { throw x ; let x ; } }
delete 0 . x + x ; let x ; 
delete [ 0 ] - x ; let x ; 
do if ( x ) ; else ; while ( 0 ) ; let x ; 
for ( 0 / x ; 0 ; ) ; let x ; 
for ( 0 / x ; ; ) break ; let x ; 
for ( 0 <= x ; 0 ; 0 ) ; let x ; 
for ( 0 | x ; ; ) break ; let x ; 
for ( 1n - x ; ; 0 ) break ; let x ; 
for ( ; ; ) if ( x = x ) ; let x ; 
for ( ; x ? 0 : 0 ; ) ; let x ; 
for ( `${ x }` ; ; 0 ) break ; let x ; 
for ( new x ( ) ; ; ) break ; let x ; 
for ( var x of function * ( ) { return x ; let x ; } ( ) ) ;
for ( var x of function * ( ) { yield * x ; let x ; } ( ) ) ;
for ( var x of function * ( ) { yield x ; let x ; } ( ) ) ;
for ( x & ~ 0 ; 0 ; ) ; let x ; 
for ( x ; 0 ; ) ; let x ;
for ( x ; 0 ; 0 ) ; let x ;
for ( x ; ; ) ; let x ;
for ( x ; ; 0 ) ; let x ;
for ( x << 0 ; ; ) break ; let x ; 
for ( x <= 0 ; ; ) break ; let x ; 
for ( x == `` ; ; ) ; let x ; 
for ( { } of [ 0 ] ) x ; let x ; 
if ( [ ] = x ?. x ) if ( 0 ) ; else ; let x ; 
if ( x != 0 ) ; let x ; 
if ( x & 0 ) ; let x ; 
if ( x ) ; else ; let x ;
if ( x ) ; let x ;
if ( x ?? 0 ) ; else ; let x ; 
let [ , ... [ ] ] = [ x &&= x => 0 , , ] , x ; 
let [ , ... [ ] ] = [ x , , ... 0 , ] , x ; 
let [ , ... [ ] ] = [ x , ... 0 , ] , x ; 
let [ , [ ] = x % 0 ] = '' ; let x ; 
let [ , [ ] = x ] = '' ; let x ; 
let [ [ ] = ! ! { x } ] = '' , x ; 
let [ [ ] = ( x ) ] = '' , x ; 
let [ [ ] = + x ] = '' , x ; 
let [ [ ] = - x . x ] = '' , x ; 
let [ [ ] = - x ] = '' , x ; 
let [ [ ] = - { x } ] = '' , x ; 
let [ [ ] = 0 & x ] = '' , x ; 
let [ [ ] = 0 . x %= x ] = '' , x ; 
let [ [ ] = 0 == 0 != 0 >>> x > 0 ] = '' , x ; 
let [ [ ] = 0 == 0 > x ] = '' , x ; 
let [ [ ] = 0 === x ] = '' , x ; 
let [ [ ] = 0 >> x ] = '' , x ; 
let [ [ ] = 0 instanceof { x } ] = '' , x ; 
let [ [ ] = [ 0 ] [ 0 ] -= ~ x ] = '' , x ; 
let [ [ ] = new x ( ) ] = '' , x ; 
let [ [ ] = new x ] = '' , x ; 
let [ [ ] = new { x } ( ) ] = '' , x ; 
let [ [ ] = this [ 0 ] /= + x ] = '' , x ; 
let [ [ ] = typeof x ] = '' , x ; 
let [ [ ] = typeof { x } ] = '' , x ; 
let [ [ ] = x + 0 ] = '' , x ; 
let [ [ ] = x = 0 , , ] = '' ; let x ; 
let [ [ ] = x == 0 ] = '' , x ; 
let [ [ ] = x [ 0 ] ||= 0 ] = '' , x ; 
let [ [ ] = x ] = '' , x ; 
let [ [ ] = x ^ 0 ] = '' , x ; 
let [ [ ] = x instanceof 0 ] = '' , x ; 
let [ [ ] ] = [ x %= 0 ] , x ; 
let [ ] = ! x || 0 , x ; 
let [ ] = '' >= x , x ; 
let [ ] = '' [ x ] | 0 , x ; 
let [ ] = ( 0 , x ) , x ; 
let [ ] = ( x , 0 ) , x ; 
let [ ] = ( { x } , 0 ) , x ; 
let [ ] = + ! x < { [ Symbol . toPrimitive ] : null } , x ; 
let [ ] = + x | 0 , x ; 
let [ ] = - 0 | x , x ; 
let [ ] = - async function * ( ) { } ( ) [ 0 == `${ 0 }` ] < x , x ; 
let [ ] = - function ( ) { } ( ) [ x ] , x ; 
let [ ] = - x , x ; 
let [ ] = - x ; let x ; 
let [ ] = 0 !== 0 == x , x ; 
let [ ] = 0 !== x == { has : '' } , x ; 
let [ ] = 0 & x >= 0 , x ; 
let [ ] = 0 * - 0 / x | 0 , x ; 
let [ ] = 0 ** ! x | 0 , x ; 
let [ ] = 0 ** x , x ; 
let [ ] = 0 ** x . x | 0 , x ; 
let [ ] = 0 ** x | 0 , x ; 
let [ ] = 0 + 0 == x < 0 , x ; 
let [ ] = 0 - x + 0 , x ; 
let [ ] = 0 . x %= [ { } , 0 . x ^= x ] [ 0 ] -- , x ; 
let [ ] = 0 . x %= x , x ; 
let [ ] = 0 . x /= 0 [ x ] &&= 0 , x ; 
let [ ] = 0 . x /= `${ x }` [ 0 ] &&= 0 , x ; 
let [ ] = 0 . x /= x &&= 0 , x ; 
let [ ] = 0 / x , x ; 
let [ ] = 0 < ! x , x ; 
let [ ] = 0 < 0 ?. x >>> x , x ; 
let [ ] = 0 < 0 [ x ] . x , x ; 
let [ ] = 0 < delete delete + [ 0 ] [ x ] ++ , x ; 
let [ ] = 0 < delete delete + x [ 0 ] ++ , x ; 
let [ ] = 0 < typeof x , x ; 
let [ ] = 0 < x , x ; 
let [ ] = 0 < x >>> 0 , x ; 
let [ ] = 0 < x ?. x >>> '' , x ; 
let [ ] = 0 << x , x ; 
let [ ] = 0 === x ; let x ; 
let [ ] = 0 >= x << 0 ** 0 + ! delete 0 , x ; 
let [ ] = 0 >> 0 + x , x ; 
let [ ] = 0 >> 0 . x || 0 ^ 0 === 0 ? x : 0 , x ; 
let [ ] = 0 ?. x >> 0 || 0 ^ 0 === 0 ? x : 0 , x ; 
let [ ] = 0 [ 0 || 0 instanceof class { } < x ] , x ; 
let [ ] = 0 [ 0 || x instanceof 0 < x ] , x ; 
let [ ] = 0 [ null || x instanceof class { } < x ] , x ; 
let [ ] = 0 [ x ] >> 0 , x ; 
let [ ] = 0 [ x || 0 instanceof 0 < 0 ] , x ; 
let [ ] = 0 [ { [ x = 0 ] : x } ] , x ; 
let [ ] = 0 [ { [ x = 0n . x ] : x } ] , x ; 
let [ ] = 0 [ { [ x = [ ] . x ] : x } ] , x ; 
let [ ] = 0 [ { [ x = `` . x ] : x } ] , x ; 
let [ ] = 0 [ { [ x = void 0 ?. x ] : x } ] , x ; 
let [ ] = 0 [ { [ x = void { 1 : '' } ?. x ] : x } ] , x ; 
let [ ] = 0 [ { [ x = x ] : x } ] , x ; 
let [ ] = 0 ^ 0 << 0 - 0 instanceof x , x ; 
let [ ] = 0 ^ 0 == x * ~ 0 , x ; 
let [ ] = 0 ^ 0 == x , x ; 
let [ ] = 0 ^ 0 instanceof x instanceof 0 , x ; 
let [ ] = 0 ^ 0 || 0 ^ 0 === 0 ? x : 0 , x ; 
let [ ] = 0 in x , x ; 
let [ ] = 0 | '' != `${ x }` , x ; 
let [ ] = 0 | '' != x , x ; 
let [ ] = 0 | 0 >= x , x ; 
let [ ] = 0 | 0 in { x } , x ; 
let [ ] = 0 | 1n >= 0 % x , x ; 
let [ ] = 0 | typeof ! x , x ; 
let [ ] = 0 | typeof x , x ; 
let [ ] = 0 | typeof ~ x != { [ Symbol . toPrimitive ] : x => 0 } , x ; 
let [ ] = 0 | x != x , x ; 
let [ ] = 0 | x , x ; 
let [ ] = 0 | x >= 0 , x ; 
let [ ] = 0 | x in 0 , x ; 
let [ ] = 0 | x instanceof 0 ?? 0 , x ; 
let [ ] = 0 | ~ x , x ; 
let [ ] = 0 || x , x ; 
let [ ] = 0n > `` >= x >= 0 , x ; 
let [ ] = 0n > x >= 0 >= 0 , x ; 
let [ ] = 1 / ~ x | 0 , x ; 
let [ ] = [ { } , x ^= 0 ] [ 0 ] -- , x ; 
let [ ] = `` < x , x ; 
let [ ] = `` <= x , x ; 
let [ ] = function ( ) { } ( ) [ x ] , x ; 
let [ ] = function ( ) { } ?. x >> 0 || 0 ^ 0 === 0 ? x : 0 , x ; 
let [ ] = function * ( ) { } ( ) ?. x >> 0 || 0 ^ 0 === 0 ? x : 0 , x ; 
let [ ] = function * ( ) { } ( ) [ x ] < x , x ; 
let [ ] = function * ( ) { } ( ) [ { [ Symbol . toPrimitive ] : function ( x ) { } } ] < x , x ; 
let [ ] = function * ( ) { } [ 0 ] instanceof x , x ; 
let [ ] = function x ( ) { } ( ) ?. x >> 0 || 0 ^ 0 === 0 ? x : 0 , x ; 
let [ ] = new new x , x ; 
let [ ] = new x ( ) , x ; 
let [ ] = new x , x ; 
let [ ] = new x | 0 , x ; 
let [ ] = new { x } ( ) , x ; 
let [ ] = void x << x , x ; 
let [ ] = void x | 0 , x ; 
let [ ] = x !== 0 == x , x ; 
let [ ] = x & x >= 0 , x ; 
let [ ] = x &&= 0 , x ; 
let [ ] = x ** 0 , x ; 
let [ ] = x ** 0 | 0 , x ; 
let [ ] = x ** x , x ; 
let [ ] = x ** ~ 0 | 0 , x ; 
let [ ] = x + 0 , x ; 
let [ ] = x - 0 , x ; 
let [ ] = x . x , x ; 
let [ ] = x . x . x `` , x ; 
let [ ] = x . x >> 0 , x ; 
let [ ] = x < ! x , x ; 
let [ ] = x <= 0 , x ; 
let [ ] = x > 0 , x ; 
let [ ] = x > 0 >= 0 >= 0 , x ; 
let [ ] = x >= 0 , x ; 
let [ ] = x ?. x , x ; 
let [ ] = x ?? 0 , x ; 
let [ ] = x [ 0 ] &&= 0 , x ; 
let [ ] = x [ 0 ] >> 0 , x ; 
let [ ] = x ^ 0 & 0 , x ; 
let [ ] = x instanceof 0 , x ; 
let [ ] = x | 0 , x ; 
let [ ] = x | 0 ?? 0 , x ; 
let [ ] = x || 0 , x ; 
let [ ] = x || 0 | 0 ? 0 : 0 , x ; 
let [ ] = { [ 0 . x += x ] : x } , x ; 
let [ ] = { [ 0 [ `` [ 0 === 0 - x % 0 ] ??= 0 && 0 ] %= 0 ] : `` } , x ; 
let [ ] = { [ 0 [ `` [ 0 === x - 0 % 0 ] ??= x => { } ] %= 0 ] : 0 } , x ; 
let [ ] = { [ 0 [ `` [ x === 0 - 0 % 0 ] ??= x => { } ] %= 0 ] : 0 } , x ; 
let [ ] = { [ 0 [ x ] = 0 ] : `` } , x ; 
let [ ] = { [ 1 ] : x } , x ; 
let [ ] = { [ [ 0 , ] [ 0 ^ x === 0 ] *= 0 ] : `` } , x ; 
let [ ] = { [ [ x , , ] ] : `` } , x ; 
let [ ] = { [ x ] : x } , x ; 
let [ ] = { [ { } [ 0 ] -= x % 0 ] : `` } , x ; 
let [ ] = { x } , x ; 
let [ ] = { x } ?. x , x ; 
let [ ] = ~ - 1n [ 0 ] < x , x ; 
let [ ] = ~ - [ 0 ] [ 0 ] < x , x ; 
let [ ] = ~ - `${ 0 }` [ 0 ] < x , x ; 
let [ ] = ~ - `` [ ! 0 ] < x , x ; 
let [ ] = ~ - `` [ + 0 ] < x , x ; 
let [ ] = ~ - `` [ 0 % 0 ] < x , x ; 
let [ ] = ~ - async function * ( ) { } ( ) [ '' != - x ] ( ) < x , x ; 
let [ ] = ~ - async function * ( ) { } ( ) [ x != - 0 ] ( ) < x , x ; 
let [ ] = ~ - async function * ( ) { } ( ) [ ~ 0 != x ] ( ) < x , x ; 
let [ ] = ~ - async function * ( ) { } ( ) [ ~ x ] ( ) < x , x ; 
let [ ] = ~ - async function * ( ) { } ( ) [ ~ { x } ] ( ) < x , x ; 
let [ ] = ~ - function ( ) { } ( ) [ 0 <= 0 >> 0 == x [ 0 ] ] ( ) < x , x ; 
let [ ] = ~ - function ( ) { } ( ) [ 0 <= 0 >> x == x ] ( ) < x , x ; 
let [ ] = ~ - function ( ) { } ( ) [ 0 > 0 == x ] ( ) < x , x ; 
let [ ] = ~ - function ( ) { } ( ) [ x ] ( ) < x , x ; 
let [ ] = ~ - function * ( ) { } ( ) [ 0 <= x >> 0 == x ] ( ) < x , x ; 
let [ ] = ~ - function * ( ) { } ( ) [ x <= 0 >> 0 == x ] ( ) < x , x ; 
let [ ] = ~ - true [ 0 ] < x , x ; 
let [ ] = ~ - x < x , x ; 
let [ ] = ~ - { [ Symbol . toPrimitive ] : function ( ) { } } < x , x ; 
let [ ] = ~ - { [ Symbol . toPrimitive ] : x => 0 } < x , x ; 
let [ ] = ~ - { [ Symbol . toPrimitive ] : x => { x } } < x , x ; 
let [ ] = ~ - { } [ 0 ] < x , x ; 
let [ ] = ~ 0 / x + 0 , x ; 
let [ ] = ~ function * ( ) { } ( ) [ x ] , x ; 
let [ ] = ~ x << { [ Symbol . toPrimitive ] : x => 0 } , x ; 
let [ ] = ~ ~ x , x ; 
let await = x , x ; 
let await = { x } , x ; 
let x ; [ [ 0 , 0 ] [ 1 ] = 0 ] = `` ;
let x ; [ [ 0 ] [ 0 ] = 0 ] = `` ;
let x ; switch ( 0 ) { default : let x ; case x : } 
let x ; x in x ;
let x ; ~ class extends x { } ;
let x = ! void x ; 
let x = ! { x } ; 
let x = '' + void x ; 
let x = [ typeof void x , ] [ null ] ; 
let x = `${ 0 }` [ 0 ] &&= 0 & 0 << void x ; 
let x = `${ 0 }` [ 0 ] &&= void x ; 
let x = `${ 0 }` [ 0 ] &&= ~ void x ; 
let x = delete ! x ; 
let x = delete void x ; 
let x = delete void { x } ; 
let x = function ( ) { } ( ) [ ! typeof x ] ; 
let x = function ( ) { } ( ) [ ! { x } ] ; 
let x = void x !== 0 ; 
let x = void x ;
let x = void { x } !== 0 ; 
let x = void { x } ; 
let x = x ? 0 : 0 ; 
new '' ( 0 , ... 0 >> x ) ; let x ; 
new '' ( x , ... 0 >> x ) ; let x ; 
new 0 ( ... x >>> 0 ) ; let x ; 
new 0 ( 0 , ! x ) ; let x ; 
new 0 ( 0 , x [ 0 ] ) ; let x ; 
new class x { ; ; } ( [ 0 ] [ 0 ] = x ) ; let x ; 
new class { 0 = 0 + x ; } ; let x ; 
new class { 0 = 0 - super [ x ] ?. x + x ; } ; let x ; 
new class { 0 = super [ 0 | x ] ; } ; let x ; 
new class { 0 = super [ x ] ??= 0 ; } ; let x ; 
new class { 0 = super [ x ] | 0 ; } ; let x ; 
new class { 0 = x | 0 ; } ; let x ; 
new class { static 0 = x ; } ; let x ; 
new function ( ) { return x ; ; } ; class x { } 
new function ( ) { return x ; } ; class x { } 
new function ( ) { return x ; } ; let x ;
new function ( ) { } >>> x ; let x ; 
new x ( ) ; let x ;
new x ; let x ;
new { ... + x } ; let x ; 
new { ... x < 0 } ; let x ; 
new { 1 : 0 < x } ; let x ; 
switch ( 0 ) { case 1 : default : ; case x : } let x ;
switch ( 0 ) { case 1 : default : case x : let x ; }
switch ( 0 ) { case 1 : default : let x ; case x : }
switch ( 0 ) { case x : default : ; case x : } let x ;
switch ( 0 ) { case x : default : case 0 : } let x ; 
switch ( 0 ) { case x : default : let x ; case x : }
switch ( 0 ) { case x : default : let x ; }
switch ( 0 ) { case x : default : } let x ; 
switch ( 0 ) { case x : let x ; }
switch ( 0 ) { case x : } let x ;
switch ( 0 ) { default : case x : let x ; }
switch ( 0 ) { default : switch ( 1 ** ! void -- x ) { } } let x ; 
switch ( 1 ) { case x : default : case 0 : } let x ; 
switch ( 1 ) { case x >> 0 : default : case 0 : } let x ; 
switch ( x ) { } let x ;
switch ( x = x => 0 ) { case 0 : default : x ( ) ; } let x ; 
throw typeof x || 0 ; let x ; 
typeof x ; let x ;
typeof x >> 0 ; let x ; 
var [ x ] = { [ Symbol . iterator ] : function * ( ) { yield * x ; let x ; } } ;
void x ; let x ;
void x ?? 0 ; let x ; 
x != 0 ; let x ;
x !== 0 ; let x ;
x !== x ; let x ;
x & 0 ; let x ; 
x && 0 ; let x ;
x &&= 0 ; let x ;
x &= 0 ; let x ;
x ( ) ; let x ;
x ** 0 ; let x ;
x + x ; let x ;
x ++ ; let x ;
x , 0 ; let x ;
x - x ; let x ;
x -- ; let x ;
x -- >> 0 ; let x ; 
x . x -- ; let x ; 
x . x < x <= 0 ; let x ; 
x / 0 ; let x ;
x : 0 , 0 in x ; let x ; 
x : if ( x ) ; else ; let x ; 
x : switch ( `${ x }` ) { } let x ; 
x : switch ( delete 0 . x < x ) { } let x ; 
x : switch ( x & 0 ) { } let x ; 
x ; let x ;
x < 0 ; let x ;
x << 0 ; let x ;
x << x ; let x ;
x = - 0 ; let x ; 
x = 0 ; let x ; 
x = x ; let x ;
x = { x = 0 } = 0 ; let x ;
x = { x = x } = 0 ; let x ;
x = { x } = 0 ; let x ;
x == x ; let x ;
x > 0 ; let x ;
x >= 0 >> 0 ?? 0 ; let x ; 
x >= x ; let x ;
x >> 0 ; let x ;
x >> 0 >> 0 ** 0 & 0 ; let x ; 
x >>> 0 ; let x ;
x ? 0 : 0 ; let x ;
x ? 0 : x ; let x ;
x ?. [ x ] ; let x ;
x ?. x ; let x ;
x ?? 0 ; let x ;
x ??= 0 ; let x ;
x ^ 0 ; let x ;
x `` * 0 ; let x ; 
x `` ; let x ;
x in 0 ; let x ;
x in x ; let x ;
x | 0 ; let x ;
x | ~ 0 && 0 ; let x ; 
x || 0 ; let x ;
x ||= 0 ; let x ;
{ 0 , x ; } let x ;
{ 0 | 0 , x ; } let x ; 
{ `` , x ; } { } let x ; 
{ if ( ! + x + 0 ) ; } let x ; 
{ if ( `${ 0 }` [ 0 ] &&= 0 == x instanceof 0 ) ; } let x ; 
{ if ( x ) if ( 0 ) ; else ; throw 0 ; } class x { } 
{ if ( x ) if ( 0 ) ; else ; } class x { } 
{ if ( x => 0 ) for ( x ; 1 ; 0 , 0 ( ) . x ||= 0 ) ; } let x ; 
{ let x = 0 === 0 <= x ; } 
{ let x = x ; }
{ let x = { x } ; }
{ new x ( ) ; let x ; }
{ switch ( x >>> 0 ) { } } let x ; 
{ x ( ) ; let x ; }
{ x ( ) ; x : ; } let x ; 
{ x , x ; } let x ;
{ x , x ; } { } let x ; 
{ x : ; new x ( ) ; } let x ; 
{ x ; let x ; }
{ x = 0 ; } let x ; 
{ x = x = 0 ; } let x ; 
{ x = x = { x } ; } let x ; 
{ x = x = ~ x ; } ; let x ; 
{ x = x => 0 , x ; } let x ; 
{ x = { x , x , } = 0 ; } let x ; 
{ x = { x , } = 0 ; } let x ; 
{ x = { x } = 0 ; } let x ; 
{ x ?. x ; } let x ; 
{ x } ; let x ;
{ { x } ; let x ; }
{ } [ x ] `` ; let x ; 
~ ! x ; let x ; 
~ x ; let x ;
~ x in 0 ; let x ; 
~ { 1 : x } ; let x ;
