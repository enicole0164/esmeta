( await => 0 ) ( ) ; 
Array . from ( [ , ] , x => await ) ; 
Array . from ( x => 0 , x => await ) ; 
Array . prototype . every . call ( [ 0 ] , x => await ) ; 
Array . prototype . find . call ( [ 0 ] , x => await ) ; 
Array . prototype . findIndex . call ( [ 0 ] , x => await ) ; 
Array . prototype . flatMap . call ( [ 0 ] , x => await ) ; 
Array . prototype . forEach . call ( [ 0 ] , x => await ) ; 
Array . prototype . map . call ( [ 0 ] , x => await ) ; 
Array . prototype . reduce . call ( [ 0 , 0 ] , x => await ) ; 
Array . prototype . reduceRight . call ( `${ { } }` , x => await ) ; 
Array . prototype . some . call ( [ 0 ] , x => await ) ; 
Promise . any ( [ { then : x => await } ] ) ; 
await : ; 
await ; 
for ( let x ; await ; ) ; 
for ( var await of [ 0 ] ) ;
for ( var x ; await ; ) ; 
let await , x ;
let await ;
new function ( ... { x , ... await } ) { } ; 
var x = await ; 
x : await : ; 
