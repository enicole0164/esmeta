[ , , , ] = { [ Symbol . iterator ] : async function * ( ) { yield ; } } ; 
[ , , ] = { [ Symbol . iterator ] : async function * ( ) { for ( ; ; yield ) ; } } ;
[ , , ] = { [ Symbol . iterator ] : async function * ( ) { return 0 ; } } ;
[ , , ] = { [ Symbol . iterator ] : async function * ( ) { yield * [ 0 ] ; } } ;
[ , , ] = { [ Symbol . iterator ] : async function * ( ) { yield 0 ; } } ; 
[ , , ] = { [ Symbol . iterator ] : async function * ( ) { yield ; } } ; 
[ , , ] = { [ Symbol . iterator ] : async function * ( ) { } } ; 
[ , ] = { [ Symbol . iterator ] : async function * ( ) { 0 ( ) ; } } ; 
[ , ] = { [ Symbol . iterator ] : async function * ( ) { ; for await ( let [ ] of x ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { ; for await ( let x of x ++ ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { ; for await ( var { } of x ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return ( async x => 0 ) ( ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return ( async x => new 0 ) ( ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return 0 ; } } ; 
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return [ 0 , ] [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return [ ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return `${ 0 }` [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return `` [ 0 % 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return `` [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return { then : ( ) => { throw 0 ; } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return { then : x => 0 } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { return { } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { x ( ) ; } } ; 
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield '' [ 0 % 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield '' [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * ! 0 ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * '' . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * '' ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * '' [ 0 % 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * '' [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * 0 . x . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * 0 . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * 0 ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * 0n ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * 1n . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * [ 0 ] [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * [ [ ] ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * [ ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * [ { then : ( ) => { throw 0 ; } } ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * `` ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * async function * ( ) { } ( ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * null . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * null ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * true . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . asyncIterator ] : 0 } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . asyncIterator ] : function * ( ) { x ( ) ; } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . asyncIterator ] : function * ( ) { yield ; } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . asyncIterator ] : function * ( ) { } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . asyncIterator ] : { } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : 0 } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : [ ] } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : async function * ( ) { yield 0 ; } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : async function * ( ) { yield ; } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : async function * ( ) { } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : async x => 0 } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : class { } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : function ( ) { } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : x => 0 } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : x => [ ] } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : x => new 0 } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { [ Symbol . iterator ] : x => { } } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { } . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * { } ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield 0 . x . x ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield 0 ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield 0 ?. ( ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield 0 ?. x ( ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield ; } } ; 
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield [ ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield `${ 0 }` [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield `` [ 0 % 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield `` [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield async function ( ) { } ?. ( ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield async function ( [ ] ) { } ?. ( ) ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { yield null [ 0 ] ; } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { { var x = 0 ; } } } ;
[ , ] = { [ Symbol . iterator ] : async function * ( ) { } } ; 
[ , ] = { [ Symbol . iterator ] : function * ( ) { yield * { [ Symbol . iterator ] : async function * ( ) { } } ; } } ;
[ ] = { [ Symbol . iterator ] : async function * ( ) { const x = 0 ; } } ;
[ ] = { [ Symbol . iterator ] : async function * ( ) { } } ; 
async function * x ( ) { yield 0 ; } [ , ] = { [ Symbol . iterator ] : async function * ( ) { yield * x ( ) ; } } ;
for ( let { } of { [ Symbol . iterator ] : async function * ( ) { } } ) ;
for ( var { } of { [ Symbol . iterator ] : async function * ( ) { } } ) ;
let x ; var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of [ 0 ] ) ; } } ;
let x ; var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of x ) ; } } ;
let x ; var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( { x = 0 } of [ 0 ] ) ; } } ;
var [ , , ] = { [ Symbol . iterator ] : async function * x ( ) { yield ; yield * x ( ) ; } } ; 
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( var [ ... x ] of [ '' ] ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( var [ x = 0 ] of [ '' ] ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( var [ x = x ] of [ '' ] ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( var [ x = yield ] of [ '' ] ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( var [ x ] of [ '' ] ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of [ , ] ) for ( var x of x ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of [ 0 , ] ) for ( var x of [ 0 ] ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of [ 0 ] ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of x ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of x ) ; } } ; let x ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of { [ Symbol . asyncIterator ] : function * ( ) { yield ; } } ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of { [ Symbol . asyncIterator ] : function * ( ) { yield ; } } ) var [ x ] = 0 ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( x of { [ Symbol . iterator ] : async function * ( ) { } } ) ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { for await ( { x = x } of [ 0 ] ) ; let x ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { yield { then : class { } } ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * ( ) { yield { then : x => 0 } ; } } ;
var [ , ] = { [ Symbol . iterator ] : async function * x ( ) { yield * { [ 0 ] : await 0 } ; } } ; 
var [ , ] = { [ Symbol . iterator ] : async function * x ( ) { yield * { [ Symbol . iterator ] : async function * ( ) { } } ; } } ; 
var [ , ] = { [ Symbol . iterator ] : function * ( ) { yield * { [ Symbol . iterator ] : async function * ( ) { } } ; } } ; 
var [ , ] = { [ Symbol . iterator ] : function * ( ) { yield * { [ Symbol . iterator ] : async x => 0 } ; } } ; 
