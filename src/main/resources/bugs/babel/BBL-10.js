class x { set [ #x in '' ?. [ 0 % 0 ] ?? 0 ] ( x ) { } get #x ( ) { } } 
class x { set [ #x in '' ?. [ 0 ] ?? 0 ] ( x ) { } get #x ( ) { } } 
class x { set [ #x in `${ 0 }` ?. [ 0 ] ?? 0 ] ( x ) { } get #x ( ) { } } 
class x { static #x = #x in 0 % 0 >> super . x ; } 
class x { static #x = #x in 0 ** void super . x ; } 
class x { static #x = #x in 0 - super . x ; }
class x { static #x = #x in 0 . x ; }
class x { static #x = #x in 0 ; }
class x { static #x = #x in 0 ?. [ super . x ] ; }
class x { static #x = #x in 0n . x ; } 
class x { static #x = #x in 1n . x ; }
class x { static #x = #x in `${ 0 }` ?. [ 0 ] ; }
class x { static #x = #x in `${ 0 }` [ 0 ] ; }
class x { static #x = #x in `` . x ; }
class x { static #x = #x in `` ?. [ 0 % 0 ] ; }
class x { static #x = #x in `` ?. [ 0 ] ; }
class x { static #x = #x in `` [ 0 % 0 ] ; }
class x { static #x = #x in `` [ 0 ] ; }
class x { static #x = #x in super . x ** 0 ; }
class x { static #x = #x in super . x ; }
class x { static #x = #x in super [ 0 ] ** 0 ; }
class x { static #x = #x in true . x ; }
class x { static #x = #x in void super . x ; }
class x { static #x = #x in { get 0 ( ) { return ; } , } ?. [ 0 ] ; }
class x { static #x = #x in { get 0 ( ) { } , } ?. [ 0 ] ; }
class x { static #x = #x in { set 0 ( x ) { } , } ?. [ 0 ] ; }
class x { static #x = #x in { x } ?. x ?. x ; }
let x ; new class { static #x = #x in x ; } ;
let x ; new class { static #x = `` >= super [ 0 ^ 0 === #x in x ] ; } ;
let x ; new class { static #x = x ??= #x in 0 . x ; } ;
let x ; new class { static #x = x ??= #x in 0 ; } ;
let x ; new class { static #x = x ??= #x in super . x ; } ;
let x ; new class { static #x = x ??= #x in x ; } ;
new class { static #x = #x in ! 0 % 0 ; } ;
new class { static #x = #x in ! 0 + 0 ; } ;
new class { static #x = #x in ! 0 - 0 ; } ;
new class { static #x = #x in ! 0 / '' >= 0 ; } ;
new class { static #x = #x in ! 0 / 1 >= 0 ; } ;
new class { static #x = #x in ! 0 ; } ;
new class { static #x = #x in ! 0 << 0 ; } ;
new class { static #x = #x in ! 0 >> 0 ; } ;
new class { static #x = #x in ! 0 >>> 0 ; } ;
new class { static #x = #x in ! 0n ; } ;
new class { static #x = #x in ! 1 ; } ;
new class { static #x = #x in ! 1 >> 0 ; } ;
new class { static #x = #x in ! 1n ; } ;
new class { static #x = #x in ! [ ] / 1 >= 0 ; } ;
new class { static #x = #x in ! true ; } ;
new class { static #x = #x in ! typeof 0 ; } ;
new class { static #x = #x in ! void 0 ; } ;
new class { static #x = #x in ! { } ; } ;
new class { static #x = #x in ! ~ 0 >>> 0 ; } ;
new class { static #x = #x in '' % 0 ; } ;
new class { static #x = #x in '' % 1 ; } ;
new class { static #x = #x in '' ** ~ 0 ; } ;
new class { static #x = #x in '' + 1n ; } ;
new class { static #x = #x in '' - 0 ; } ;
new class { static #x = #x in '' . x ; } ;
new class { static #x = #x in '' ; } ;
new class { static #x = #x in '' << 0 ; } ;
new class { static #x = #x in '' << 1 ; } ;
new class { static #x = #x in '' >>> 0 ; } ;
new class { static #x = #x in '' ?. x % 0 ; } ;
new class { static #x = #x in '' ?. x ?. x ; } ;
new class { static #x = #x in + ! 0 ; } ;
new class { static #x = #x in + ! ~ ~ ! 0 ; } ;
new class { static #x = #x in + 0 . x ; } ;
new class { static #x = #x in + 0 ; } ;
new class { static #x = #x in + [ ] ; } ;
new class { static #x = #x in + `` ; } ;
new class { static #x = #x in + null ; } ;
new class { static #x = #x in + super . x ; } ;
new class { static #x = #x in + { [ Symbol . toPrimitive ] : function ( ) { } } ; } ;
new class { static #x = #x in + { [ Symbol . toPrimitive ] : x => 0 } ; } ;
new class { static #x = #x in - ! ! 0 ; } ;
new class { static #x = #x in - ! 0 ; } ;
new class { static #x = #x in - 0 !== 0 == [ ] ; } ;
new class { static #x = #x in - 0 - 0 ; } ;
new class { static #x = #x in - 0 . x ; } ;
new class { static #x = #x in - 0 / 1 >= 0 ; } ;
new class { static #x = #x in - 0 ; } ;
new class { static #x = #x in - 0n ; } ;
new class { static #x = #x in - 1n ; } ;
new class { static #x = #x in - [ ] ; } ;
new class { static #x = #x in - `` ; } ;
new class { static #x = #x in - null ; } ;
new class { static #x = #x in - super . x ; } ;
new class { static #x = #x in - { } ; } ;
new class { static #x = #x in 0 % ! 0 ; } ;
new class { static #x = #x in 0 % ! 1 ; } ;
new class { static #x = #x in 0 % 0 + 0 ; } ;
new class { static #x = #x in 0 % 0 ; } ;
new class { static #x = #x in 0 % [ ] ; } ;
new class { static #x = #x in 0 % `` ; } ;
new class { static #x = #x in 0 % null ; } ;
new class { static #x = #x in 0 * - + 0 >= 0 ; } ;
new class { static #x = #x in 0 * 0 . x ; } ;
new class { static #x = #x in 0 * 0 ; } ;
new class { static #x = #x in 0 * super . x ; } ;
new class { static #x = #x in 0 ** ! 0 ; } ;
new class { static #x = #x in 0 ** 0 ** super . x >= 0 ; } ;
new class { static #x = #x in 0 ** 0 ; } ;
new class { static #x = #x in 0 ** typeof 0 ; } ;
new class { static #x = #x in 0 ** { 0 : 0 } ; } ;
new class { static #x = #x in 0 ** { [ Symbol . toPrimitive ] : null } ; } ;
new class { static #x = #x in 0 ** ~ 0 ; } ;
new class { static #x = #x in 0 + ! 0 ; } ;
new class { static #x = #x in 0 + 0 . x ; } ;
new class { static #x = #x in 0 + 0 ; } ;
new class { static #x = #x in 0 + `` ; } ;
new class { static #x = #x in 0 + null ; } ;
new class { static #x = #x in 0 + super . x ; } ;
new class { static #x = #x in 0 + { } ; } ;
new class { static #x = #x in 0 - '' ; } ;
new class { static #x = #x in 0 - 0 ** ~ 0 ; } ;
new class { static #x = #x in 0 - 0 . x ; } ;
new class { static #x = #x in 0 - 0 ; } ;
new class { static #x = #x in 0 - [ ] ; } ;
new class { static #x = #x in 0 - null ; } ;
new class { static #x = #x in 0 - super . x ; } ;
new class { static #x = #x in 0 - true ; } ;
new class { static #x = #x in 0 - { [ Symbol . toPrimitive ] : null } ; } ;
new class { static #x = #x in 0 - { } ; } ;
new class { static #x = #x in 0 . x ** ~ 0 ; } ;
new class { static #x = #x in 0 . x + 0 ; } ;
new class { static #x = #x in 0 . x - 0 ; } ;
new class { static #x = #x in 0 . x ; } ;
new class { static #x = #x in 0 . x << 0 ; } ;
new class { static #x = #x in 0 . x >= 0 ; } ;
new class { static #x = #x in 0 . x >> 0 ; } ;
new class { static #x = #x in 0 . x >>> 0 ; } ;
new class { static #x = #x in 0 . x ?. x ; } ;
new class { static #x = #x in 0 / 0 * 0 ; } ;
new class { static #x = #x in 0 / 0 / 0 ; } ;
new class { static #x = #x in 0 / 0 ; } ;
new class { static #x = #x in 0 ; } ;
new class { static #x = #x in 0 << ! 0 ; } ;
new class { static #x = #x in 0 << '' ; } ;
new class { static #x = #x in 0 << 0 . x ; } ;
new class { static #x = #x in 0 << 0 ; } ;
new class { static #x = #x in 0 << null ; } ;
new class { static #x = #x in 0 << super . x ; } ;
new class { static #x = #x in 0 << super [ 1n ] ; } ;
new class { static #x = #x in 0 << { } ; } ;
new class { static #x = #x in 0 << ~ 0 ; } ;
new class { static #x = #x in 0 > 0 ; } ;
new class { static #x = #x in 0 >= 0 ; } ;
new class { static #x = #x in 0 >> ! 0 ; } ;
new class { static #x = #x in 0 >> ! ~ 0 ; } ;
new class { static #x = #x in 0 >> 0 . x ; } ;
new class { static #x = #x in 0 >> 0 ; } ;
new class { static #x = #x in 0 >> 1 ; } ;
new class { static #x = #x in 0 >> [ ] . x ; } ;
new class { static #x = #x in 0 >> null ; } ;
new class { static #x = #x in 0 >> super . x ; } ;
new class { static #x = #x in 0 >> { } ; } ;
new class { static #x = #x in 0 >> ~ 0 ; } ;
new class { static #x = #x in 0 >>> '' ; } ;
new class { static #x = #x in 0 >>> 0 . x ; } ;
new class { static #x = #x in 0 >>> 0 ; } ;
new class { static #x = #x in 0 >>> null ; } ;
new class { static #x = #x in 0 >>> super . x ; } ;
new class { static #x = #x in 0 >>> { } ; } ;
new class { static #x = #x in 0 >>> ~ 0 ; } ;
new class { static #x = #x in 0 ?. x % 0 ; } ;
new class { static #x = #x in 0 ?. x ; } ;
new class { static #x = #x in 0 ?. x ?. x ; } ;
new class { static #x = #x in 0 [ 0 ] ; } ;
new class { static #x = #x in 0 [ 0n ] ; } ;
new class { static #x = #x in 0 [ [ ] ] ; } ;
new class { static #x = #x in 0 [ `` ] ; } ;
new class { static #x = #x in 0 [ false ] ; } ;
new class { static #x = #x in 0 [ null ] ; } ;
new class { static #x = #x in 0 [ true ] ; } ;
new class { static #x = #x in 0n + '' ; } ;
new class { static #x = #x in 0n + 1n ; } ;
new class { static #x = #x in 0n ?. x % 0 ; } ;
new class { static #x = #x in 0n [ 0 ] ?. x >= 0 ; } ;
new class { static #x = #x in 1 ** + super . x ; } ;
new class { static #x = #x in 1 ** 0 ** ~ 0 ; } ;
new class { static #x = #x in 1 ** 0 . x ; } ;
new class { static #x = #x in 1 ** super . x ; } ;
new class { static #x = #x in 1 ** ~ 0 ; } ;
new class { static #x = #x in 1 << { } ; } ;
new class { static #x = #x in 1 >> 0 ; } ;
new class { static #x = #x in 1 >> `` ; } ;
new class { static #x = #x in 1 >>> 0 ; } ;
new class { static #x = #x in 1n . x ; } ;
new class { static #x = #x in 1n >> 0n ; } ;
new class { static #x = #x in [ #x in 0 * 0 ** ~ void 0 , , ] >= 0 ; } ;
new class { static #x = #x in [ #x in 0 , ] ; } ;
new class { static #x = #x in [ #x in 0 . x , , ] >= 0 ; } ;
new class { static #x = #x in [ #x in 0 <= 0 , ] ; } ;
new class { static #x = #x in [ #x in 1 * 0 ** ~ void 0 , , ] >= 0 ; } ;
new class { static #x = #x in [ #x in super . x , , ] >= 0 ; } ;
new class { static #x = #x in [ 0 ] [ 0 ] -- ; } ;
new class { static #x = #x in [ 0 ] [ 0 ] ; } ;
new class { static #x = #x in [ ] % 0 ; } ;
new class { static #x = #x in [ ] . x ++ ; } ;
new class { static #x = #x in [ ] . x -- ; } ;
new class { static #x = #x in [ ] >> 0 ; } ;
new class { static #x = #x in [ ] ?. x ?. x ; } ;
new class { static #x = #x in `${ ! 0 }` ; } ;
new class { static #x = #x in `${ #x in 0 . x }` >= 0 ; } ;
new class { static #x = #x in `${ #x in [ ] }` >= 0 ; } ;
new class { static #x = #x in `${ #x in super . x }` >= 0 ; } ;
new class { static #x = #x in `${ #x in super [ 0 ] -- ** 0 }` >= 0 ; } ;
new class { static #x = #x in `${ '' }` ; } ;
new class { static #x = #x in `${ 0 , super . x %= 0 }` ; } ;
new class { static #x = #x in `${ 0 . x }` ; } ;
new class { static #x = #x in `${ 0 > 0 }` ; } ;
new class { static #x = #x in `${ 0 }` ; } ;
new class { static #x = #x in `${ 0n }` ; } ;
new class { static #x = #x in `${ [ ] }` ; } ;
new class { static #x = #x in `${ null }` ; } ;
new class { static #x = #x in `${ super . x }` ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : function ( ) { } } }` >= 0 ; } ;
new class { static #x = #x in `${ { [ Symbol . toPrimitive ] : x => 0 } }` >= 0 ; } ;
new class { static #x = #x in `` + ! 0 ; } ;
new class { static #x = #x in `` + 0 . x ; } ;
new class { static #x = #x in `` + 0 ; } ;
new class { static #x = #x in `` + null ; } ;
new class { static #x = #x in `` ; } ;
new class { static #x = #x in `` >> 0 ; } ;
new class { static #x = #x in `` [ 0 ] ; } ;
new class { static #x = #x in async function * ( ) { } ( ) ?. x ; } ; 
new class { static #x = #x in async function * ( ) { } ( ) [ '' ] ; } ; 
new class { static #x = #x in async function * ( ) { } ( ) [ 0 != 0 ] ; } ; 
new class { static #x = #x in async function * ( ) { } ( ) [ 0 . x ] ; } ; 
new class { static #x = #x in async function * ( ) { } ( ) [ 1n ] ; } ; 
new class { static #x = #x in async function * ( ) { } ( ) [ [ ] ] ; } ; 
new class { static #x = #x in async function * ( ) { } ( ) [ null ] ; } ; 
new class { static #x = #x in async function * ( ) { } ( ) [ true ] ; } ; 
new class { static #x = #x in delete '' . x ; } ;
new class { static #x = #x in delete 0 . x ; } ;
new class { static #x = #x in delete 0 ; } ;
new class { static #x = #x in delete 0n . x ; } ;
new class { static #x = #x in delete true . x ; } ;
new class { static #x = #x in delete { } . x ; } ;
new class { static #x = #x in false ; } ;
new class { static #x = #x in false << 0 ; } ;
new class { static #x = #x in function ( ) { } ( ) ; } ;
new class { static #x = #x in function ( ) { } ( ) ?. x ; } ;
new class { static #x = #x in function * ( ) { } ( ) [ 0 ] ; } ; 
new class { static #x = #x in new . target ; } ;
new class { static #x = #x in null % 0 ; } ;
new class { static #x = #x in null ** ~ 0 ; } ;
new class { static #x = #x in null + 0 ; } ;
new class { static #x = #x in null - 0 ; } ;
new class { static #x = #x in null ; } ;
new class { static #x = #x in null < 0 ; } ;
new class { static #x = #x in null << 0 ; } ;
new class { static #x = #x in null >> 0 ; } ;
new class { static #x = #x in null >>> 0 ; } ;
new class { static #x = #x in null ?. x ; } ;
new class { static #x = #x in null ?. x ?. x ; } ;
new class { static #x = #x in super . x ** ~ + 0 ; } ;
new class { static #x = #x in super . x + 0 ; } ;
new class { static #x = #x in super . x ++ ; } ;
new class { static #x = #x in super . x - 0 ; } ;
new class { static #x = #x in super . x -- ; } ;
new class { static #x = #x in super . x ; } ;
new class { static #x = #x in super . x << 0 ; } ;
new class { static #x = #x in super . x >= 0 ; } ;
new class { static #x = #x in super . x >> 0 ; } ;
new class { static #x = #x in super . x >>> 0 ; } ;
new class { static #x = #x in super . x ?. x ; } ;
new class { static #x = #x in super [ ! 0 ] ; } ;
new class { static #x = #x in super [ '' ?. [ 0 ] ] ; } ;
new class { static #x = #x in super [ '' ?. [ super [ 0 [ 0 ] ] ] ] ; } ;
new class { static #x = #x in super [ '' ] ; } ;
new class { static #x = #x in super [ 0 . x ] ; } ;
new class { static #x = #x in super [ 0 < 0 ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ '' [ 0 ] ] ] ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ '' [ `` ] ] ] ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ 0 ^ #x in 0 . x ] ] ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ [ 0 ] [ 0 ] ] ] ] ; } ;
new class { static #x = #x in super [ 0 ?. [ super [ null ] ] ] ; } ;
new class { static #x = #x in super [ 0 ] % [ ] ; } ;
new class { static #x = #x in super [ 0 ] ; } ;
new class { static #x = #x in super [ 0n ] ; } ;
new class { static #x = #x in super [ 1n ?. [ super [ 0 ] ] ] ; } ;
new class { static #x = #x in super [ null ] ; } ;
new class { static #x = #x in super [ super . x ] ; } ;
new class { static #x = #x in super [ true ?. [ super [ 0 ] ] ] ; } ;
new class { static #x = #x in super [ { } ] ; } ;
new class { static #x = #x in this >>> true ; } ;
new class { static #x = #x in true ** ~ 0 ; } ;
new class { static #x = #x in true . x ; } ;
new class { static #x = #x in true ; } ;
new class { static #x = #x in true ?. x ?. x ; } ;
new class { static #x = #x in typeof ! 0 ; } ;
new class { static #x = #x in typeof '' ; } ;
new class { static #x = #x in typeof 0 . x ; } ;
new class { static #x = #x in typeof 0 ; } ;
new class { static #x = #x in typeof 0n . x ; } ;
new class { static #x = #x in typeof 1n ; } ;
new class { static #x = #x in typeof [ ] . x ; } ;
new class { static #x = #x in typeof [ ] ; } ;
new class { static #x = #x in typeof `` . x ; } ;
new class { static #x = #x in typeof null ; } ;
new class { static #x = #x in typeof super . x ; } ;
new class { static #x = #x in typeof this ; } ;
new class { static #x = #x in typeof true . x ; } ;
new class { static #x = #x in typeof x ; } ;
new class { static #x = #x in void 0 % 0 ; } ;
new class { static #x = #x in void 0 . x ; } ;
new class { static #x = #x in void 0 ; } ;
new class { static #x = #x in void super . x ; } ;
new class { static #x = #x in void super [ ! 0 ] ; } ;
new class { static #x = #x in void super [ ! ~ 0 ] ; } ;
new class { static #x = #x in void super [ 0 . x ] ; } ;
new class { static #x = #x in void super [ 0 ] ; } ;
new class { static #x = #x in void super [ 0n ] ; } ;
new class { static #x = #x in void super [ `` ] ; } ;
new class { static #x = #x in void super [ null ] ; } ;
new class { static #x = #x in void super [ super . x ] ; } ;
new class { static #x = #x in void super [ { } ] ; } ;
new class { static #x = #x in { [ #x in 0 ] : 0 ? 0 : 0 } % ! 1 ; } ;
new class { static #x = #x in { [ #x in this ] : ( ) => { throw 0 ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 . x ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 >> super [ 0 ] ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 >>> new . target >>> 0 ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in 0 >>> super [ 0 ] >>> 0 ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in new . target ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in super . x ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in super . x >> 0 ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { throw #x in super [ 0 ] ; } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : ( ) => { } } % ! 1 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : function x ( ) { } } ** 0 ** 0 >= 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : null } ** 0 ** ~ 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : super [ 0 ] ?. x } ** 0 ** 0 >= 0 ; } ;
new class { static #x = #x in { [ Symbol . toPrimitive ] : x => 0 } % ! 1 ; } ;
new class { static #x = #x in { } % 0 ; } ;
new class { static #x = #x in { } ** ~ 0 ; } ;
new class { static #x = #x in { } + 0 ; } ;
new class { static #x = #x in { } - 0 ; } ;
new class { static #x = #x in { } . x ++ ; } ;
new class { static #x = #x in { } . x -- ; } ;
new class { static #x = #x in { } << 0 ; } ;
new class { static #x = #x in { } >>> 0 ; } ;
new class { static #x = #x in { } >>> 1 ; } ;
new class { static #x = #x in { } ?. x % 0 ; } ;
new class { static #x = #x in ~ ! ! 0 ; } ;
new class { static #x = #x in ~ ! 0 ; } ;
new class { static #x = #x in ~ '' ; } ;
new class { static #x = #x in ~ + super . x ; } ;
new class { static #x = #x in ~ 0 . x ; } ;
new class { static #x = #x in ~ 0 / 0 % 1 >= 0 ; } ;
new class { static #x = #x in ~ 0 / 0 * 0 ; } ;
new class { static #x = #x in ~ 0 / 0 * 1 ; } ;
new class { static #x = #x in ~ 0 / 0 * ~ 0 >= 0 ; } ;
new class { static #x = #x in ~ 0 / 0 / - 0 >= 0 ; } ;
new class { static #x = #x in ~ 0 / 0 / 0 ; } ;
new class { static #x = #x in ~ 0 / 0 ; } ;
new class { static #x = #x in ~ 0 / super [ 0 ] * 1 >= 0 ; } ;
new class { static #x = #x in ~ 0 ; } ;
new class { static #x = #x in ~ 0 << 0 ; } ;
new class { static #x = #x in ~ 0 >> 0 ; } ;
new class { static #x = #x in ~ 0 >>> 0 ; } ;
new class { static #x = #x in ~ 1 ; } ;
new class { static #x = #x in ~ 1n . x ; } ;
new class { static #x = #x in ~ 1n ; } ;
new class { static #x = #x in ~ `` . x ; } ;
new class { static #x = #x in ~ null ; } ;
new class { static #x = #x in ~ super . x / 0 * 1 >= 0 ; } ;
new class { static #x = #x in ~ super . x ; } ;
new class { static #x = #x in ~ { } . x ; } ;
new class { static #x = #x in ~ { } ; } ;
new class { static #x = #x in ~ ~ 0 ; } ;
new class { static #x = 0 != #x in ! 0 . x ; } ;
new class { static #x = 0 != #x in ! super . x ; } ;
new class { static #x = 0 != #x in ( 0 ) ; } ;
new class { static #x = 0 != #x in 0 . x ; } ;
new class { static #x = 0 != #x in 0 ; } ;
new class { static #x = 0 != #x in [ #x in 0 . x <= 0 , ] ; } ;
new class { static #x = 0 != #x in [ #x in 0n . x <= 0 , ] ; } ;
new class { static #x = 0 != #x in [ #x in `${ 0 }` . x <= 0 , ] ; } ;
new class { static #x = 0 != #x in [ #x in super . x <= 0 , ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in '' ?. x , ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in 0 ?. x , ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in 0n ?. x , ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in true ?. x , ] ; } ;
new class { static #x = 0 != #x in [ 0 !== #x in { } ?. x , ] ; } ;
new class { static #x = 0 != #x in [ 0 & #x in 0 . x , ] ; } ;
new class { static #x = 0 != #x in [ 0 & #x in super . x , ] ; } ;
new class { static #x = 0 != #x in super . x ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in ! 0 / 0 ** ~ 0 & 0 , ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in 0 % delete 0 / ~ 0 & 0 , ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in super . x & 0 , ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in 0 . x } & 0 , ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in super . x } & 0 , ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in { exec : #x in true ?. x } & 0 , ] ; } ;
new class { static #x = 0 !== 0 == 0 != #x in [ 0 !== #x in ~ ! 0 / 0 ** ~ 0 & 0 , ] ; } ;
new class { static #x = 0 == #x in 0 != 0 ; } ;
new class { static #x = 0 == 0 != #x in [ 0 !== #x in ~ - 0 * 0 ** ~ 0 , ] ; } ;
new class { static #x = 0 [ #x in 0 ] ; } ;
new class { static #x = 0 ^ 0 === #x in 0 ; } ;
new class { static #x = 0 ^ 0 | #x in 0 . x ?? 0 ; } ;
new class { static #x = 0 ^ 0 | #x in 0n . x ?? 0 ; } ;
new class { static #x = 0 ^ 0 | #x in [ ] . x ?? 0 ; } ;
new class { static #x = 0 ^ 0 | #x in super . x ?? 0 ; } ;
new class { static #x = 0 | #x in 0 ?? 0 ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in 0 . x ] ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in super . x ] ; } ;
new class { static #x = `` >= super [ 0 ^ 0 === #x in x ] ; } ; var x ;
new class { static #x = super [ #x in 0 ** 0 % { [ Symbol . toPrimitive ] : x => 0 } ] ; } ;
new class { static #x = super [ #x in 0 . x ] ; } ;
new class { static #x = super [ #x in 0 ] ; } ;
new class { static #x = super [ #x in 0 ^ 0 ] >= 0 ; } ;
new class { static #x = super [ #x in 0n % 1n ] ; } ;
new class { static #x = super [ #x in 1n % 1n ] ; } ;
new class { static #x = super [ #x in 1n * 0n ] ; } ;
new class { static #x = super [ #x in 1n / 1n ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in 0 . x } ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in 0 } ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in super . x } ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => #x in { } } ] ; } ;
new class { static #x = super [ #x in super . x % { [ Symbol . toPrimitive ] : x => { } } ] ; } ;
new class { static #x = super [ #x in super . x % { [ super . x &&= 0 ] : '' } ] ; } ;
new class { static #x = super [ #x in super . x ] ; } ;
new class { static #x = super [ -- async function x ( ) { } ( ) [ #x in 0 >>> ! delete 0 ] ] !== 0 ; } ; 
new class { static #x = { [ #x in 0 . x ?? 0 ] : `` } ; } ;
new class { static #x = { [ #x in 0 ?? 0 ] : false } ; } ;
new class { static #x = { [ #x in super . x ?? 0 ] : false } ; } ;
