[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * [ yield * 0 , , ] ; } } ] ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * ! 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * '' , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * - 0 ( ) , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 0 . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * 1n , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * [ 0 ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * [ import ( 0 . x %= 0 ) ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * [ x ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * new 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * null , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . asyncIterator ] : 0 } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : ( ) => { throw 0 ; } } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : ( ) => { try { } catch { } } } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield * { [ Symbol . iterator ] : async x => 0 } , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield 0 . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield 0 . x . x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield new 0 , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield x , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ 0 , , yield x [ 0 ] , ] ; } } , ] ) ; 
for ( [ , ] of [ { [ Symbol . iterator ] : async function * x ( ) { yield * yield * [ x , , yield * '' , ] ; } } , ] ) ; 
