! async function * ( [ , , ] ) { } ( ) ; 
! async function * ( [ ] ) { } ( ) ; 
! async function * ( [ ] , ... x ) { } ( ) ; 
! async function * ( [ ] = 0 ) { } ( ) ; 
! async function * ( [ ] = x ) { } ( ) ; 
! async function * ( [ ] = { x } ) { } ( ) ; 
! async function * ( [ x ] ) { } ( ) ; 
! async function * ( x , [ ] ) { } ( ) ; 
! async function * ( x = x ) { } ( ) ; 
! async function * ( x = { x } ) { } ( ) ; 
! async function * ( { ... x } = x ) { } ( ) ; 
! async function * x ( [ ] = x ) { } ( ) ; 
! async function * x ( x , [ ] = 0 ) { } ( ) ; 
! async function * x ( x = class extends 0 { } ) { } ( ) ; 
! function * ( [ ] ) { } ( ) ; 
! function * ( [ ] , ... x ) { } ( ) ; 
! function * ( [ ] = 0 ) { } ( ) ; 
! function * ( [ ] = 0 , ... x ) { } ( ) ; 
! function * ( [ ] = x ) { } ( ) ; 
! function * ( [ ] = { x } ) { } ( ) ; 
! function * ( x , [ ] ) { } ( ) ; 
! function * ( x , [ ] = 0 ) { } ( ) ; 
! function * ( x = await ) { } ( ) ; 
! function * ( x = class extends 0 { } ) { } ( ) ; 
! function * ( x = x ) { } ( ) ; 
! function * ( x = { x } ) { } ( ) ; 
! function * ( { } ) { } ( ) ; 
! { 1 : async function * x ( [ ] = 0 ) { } ( ) } ; 
+ async function * ( [ ] ) { } ( ) ; 
+ function * ( ... { 0 : [ ] , ... x } ) { } ( ) ; 
+ function * ( [ ] ) { } ( ) ; 
+ typeof function * ( [ x ] ) { } ( ) ?. x ; 
- async function * ( [ ] ) { } ( ) ; 
- async function * ( [ ] , ... x ) { } ( ) ; 
- async function * ( [ ] = 0 ) { } ( ) ; 
- async function * ( [ ] = x ) { } ( ) ; 
- async function * ( [ ] = { x } ) { } ( ) ; 
- async function * ( x , [ ] ) { } ( ) ; 
- async function * ( x = x ) { } ( ) ; 
- async function * ( x = { x } ) { } ( ) ; 
- function * ( [ ] ) { } ( ) ; 
- function * ( [ ] , ... x ) { } ( ) ; 
- function * ( [ ] = 0 ) { } ( ) ; 
- function * ( [ ] = x ) { } ( ) ; 
- function * ( x , [ ] ) { } ( ) ; 
0 & 0 [ async function * x ( [ ] ) { } ( ) ] ; 
0 & 0 [ async function * x ( [ ] , x ) { } ( ) ] ; 
0 & { ... function * ( [ ] = 0 ) { } ( ) , } ; 
0 , function * ( [ ] ) { } ( ) ; 
0 - function * ( [ ] , ... x ) { } ( ) ; 
0 / { ... function * ( [ ] ) { } ( ) , } ; 
0 < async function * ( [ ] ) { } ( 0 ) ; 
0 < function * ( [ ] ) { } ( 0 ) ; 
0 < function * ( [ ] ) { } ( { [ Symbol . iterator ] : ( ) => { throw 0 ; } } ) ; 
0 >= 0 ** async function * ( [ ] , ) { } ( ) ; 
0 >= { [ Symbol . toPrimitive ] : x => function * ( ... [ [ ] = 0 , ... x ] ) { } ( ) ?. x } ; 
0 >>> 0 + async function * ( [ ] ) { } ( 0 , ) % 0 ; 
0 >>> async function * ( [ x , , ] ) { } ( ) . x ; 
0 >>> async function * ( x , [ ] ) { } ( ) ; 
0 [ 0 * function * ( [ x ] = 0 ) { } ( ) ** ~ 0 ] ; 
0 ^ function * ( [ ] , ) { } ( 0 ) ; 
0 ^ function * ( [ ] , x ) { } ( ) ; 
Function . call . call ( function * ( [ ] = 0 , ... x ) { } ) ; 
[ + ( x => function * ( [ ] = 0 ) { } ) ( ) ( ) , , ] ; 
[ , 0 !== 0 << function * ( await = x ) { } ( ) ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * 0 >> -- function * ( [ , x ] ) { } ( ) . x ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield function * ( [ ] ) { } ( ) === 0 ; } } ] ; 
[ , 0 instanceof { [ Symbol . hasInstance ] : function * ( [ ] ) { } } ] ; 
[ 0 , function * ( [ ] ) { } ( ) ] ; 
[ 0 , function * ( { ... x } ) { } ( ) ] ; 
`${ 0 }${ 0 === function * ( [ ] ) { } ( 0 , ) }${ 0 }` ; 
async function * x ( ... [ [ ] , x ] ) { } x ( 0 ) ; 
async function * x ( ... [ [ ] = 0 , x , , ] ) { } x ( 0 ) ; 
async function * x ( ... [ [ ] ] ) { } x ( 0 ) ; 
async function * x ( [ , ... x ] ) { } x ( ) ; 
async function * x ( [ , ] ) { } x ( ) ; 
async function * x ( [ , x ] ) { } x ( ) ; 
async function * x ( [ ... x ] ) { } x ( ) ; 
async function * x ( [ ] ) { } x ( 0 ) ; 
async function * x ( [ ] , x ) { } x ( ) ; 
async function * x ( [ ] = '' . x ) { } x ( ) ; 
async function * x ( [ ] = 0 ) { } this ?. x ( ) [ 0 ] ; 
async function * x ( [ ] = 0 ) { } x ( 0 ) ; 
async function * x ( [ ] = 0 ** ~ 0 - 0 ) { } x ( ) ; 
async function * x ( [ ] = 0 , ... x ) { } x ( ) ; 
async function * x ( [ ] = 0 . x ) { } x ( ) ; 
async function * x ( [ ] = 0 == 0 !== 0 >= 0 ) { } x ( ) ; 
async function * x ( [ ] = null . x ) { } x ( ) ; 
async function * x ( [ ] = this . x ) { } x ( ) ; 
async function * x ( [ ] = true . x ) { } x ( ) ; 
async function * x ( [ ] = x ) { } x ( ) ; 
async function * x ( [ ] = x . x ) { } x ( ) ; 
async function * x ( [ ] = { x , } . x ) { } x ( ) ; 
async function * x ( [ x , , ... [ ] ] ) { } x ( ) ; 
async function * x ( [ x , , ] ) { } x ( ) ; 
async function * x ( [ x , ... [ ] ] ) { } x ( ) ; 
async function * x ( [ x , [ ] ] ) { } x ( ) ; 
async function * x ( [ x , ] ) { } x ( ) ; 
async function * x ( [ x = 0 , , ... [ ] ] ) { } x ( ) ; 
async function * x ( [ x = 0 , ... [ ] ] ) { } x ( ) ; 
async function * x ( [ x = 0 , [ ] ] ) { } x ( ) ; 
async function * x ( [ x ] ) { } x ( ) ; 
async function * x ( x , ... [ , [ ] = 0 , , ] ) { } x ( ) ; 
async function * x ( x = 0 , [ ] ) { } x ( ) ; 
async function * x ( x = 0 . x . x ) { } x ( ) ; 
async function * x ( x = 0 === 0 - 0 % x ) { } x ( ) ; 
async function * x ( x = 0 === 0 - x % 0 ) { } x ( ) ; 
async function * x ( x = 0 === x - 0 % 0 ) { } x ( ) ; 
async function * x ( x = [ ~ 0 ] [ 0 ] &&= x ||= 0 ) { } x ( ) ; 
async function * x ( x = [ ~ x ] [ 0 ] &&= 0 ) { } x ( ) ; 
async function * x ( x = `${ 0 }` [ 0 ] &&= 0 ) { } x ( ) ; 
async function * x ( x = `${ 0 }` [ 0 ] &&= 0 . x ) { } x ( ) ; 
async function * x ( x = `${ 0 }` [ 0 ] &&= function * x ( ) { } ) { } x ( ) ; 
async function * x ( x = `${ 0 }` [ 0 ] &&= function x ( ) { } [ 0 ] ) { } x ( ) ; 
async function * x ( x = `${ 0 }` [ 0 ] &&= x ) { } x ( ) ; 
async function * x ( x = `${ 0 }` [ 0 ] &&= x => 0 ) { } x ( ) ; 
async function * x ( x = null [ 0 ] &&= 0 ) { } x ( ) ; 
async function * x ( x = this [ 0 ] &&= 0 ) { } x ( ) ; 
async function * x ( { ... x } ) { } x ( ) ; 
async function * x ( { 0 : x } ) { } x ( ) ; 
async function * x ( { [ 0 ] : [ ] = 0 } ) { } x ( ) ; 
async function * x ( { x , 0 : [ ] } ) { } x ( ) ; 
async function * x ( { x = 0 , 0 : [ ] } ) { } x ( ) ; 
async function * x ( { } ) { } x ( ) ; 
class x { [ function * ( [ ] ) { } ( ) ] ; } 
class x { [ function * ( x , [ ] ) { } ( ) ] = 0 ; } 
delete new function ( ) { return [ async function * ( x , [ ] = 0 ) { } ] ?. [ 0 ] ?. ( ) ; } & 0 ; 
do if ( function * ( [ ] = 0 != 0 > 0 ) { } ( ) ) ; while ( 0n ) ; 
for ( async function * ( [ ] ) { } ( ) ; 0 ; ) ; 
for ( function * ( [ , ... x ] ) { } ( ) ?. x ; 0 ; 0 ) ; 
for ( var x ; async function * ( [ ] = 0 ) { } ( 0 , { x } && x ) ; ) ; 
for ( var x ; function * ( [ ] ) { } ( ) ; 0 ) ; 
for ( var x ; function * ( [ ] , ) { } ( ) ; 0 ) ; 
function * x ( ... [ [ ] ] ) { } x ( ) ; 
function * x ( ... { x , 0 : [ ] } ) { } x ( ) ; 
function * x ( ... { x = 0 , 0 : [ ] } ) { } x ( ) ; 
function * x ( [ , ... x ] ) { } x ( ) ; 
function * x ( [ , ] ) { } x ( ) ; 
function * x ( [ , x , , ... [ ] ] ) { } x ( ) ; 
function * x ( [ , x = 0 , [ ] = 0 ] ) { } x ( ) ; 
function * x ( [ , x ] ) { } x ( ) ; 
function * x ( [ ... x ] ) { } x ( ) ; 
function * x ( [ ] ) { } [ { x } ?. x ?. ( ) ] ; 
function * x ( [ ] ) { } x ( 0 ) ; 
function * x ( [ ] , x ) { } x ( ) ; 
function * x ( [ ] , x ) { } x ( 0 ) ; 
function * x ( [ ] = ! 1 % 0 ) { } x ( ) ; 
function * x ( [ ] = 0 ) { } x ( 0 ) ; 
function * x ( [ ] = 0 , ... x ) { } x ( 0 ) ; 
function * x ( [ ] = 0 , x ) { } x ( ) ; 
function * x ( [ ] = 0 , x ) { } x ( 0 ) ; 
function * x ( [ ] = 0 . x ) { } x ( ) ; 
function * x ( [ ] = 0 << ! typeof typeof 0 ) { } x ( ) ; 
function * x ( [ ] = 0 === typeof 0 % 0 ) { } x ( ) ; 
function * x ( [ ] = 0 [ 0 ] = 0 ?. x [ 0 ] ) { } x ( ) ; 
function * x ( [ ] = 0 [ 0 ] = 0 ?. x [ this ] ) { } x ( ) ; 
function * x ( [ ] = 0 [ 0 ] = { x , } ?. x [ 0 ] ) { } x ( ) ; 
function * x ( [ ] = 0 instanceof 0 ( ) . x ** 0 ) { } x ( ) ; 
function * x ( [ ] = 0n || 0 != 0 < 0 === 0 in 0 ) { } x ( ) ; 
function * x ( [ ] = 1n . x ) { } x ( ) ; 
function * x ( [ ] = [ , ] [ 0 ] = 0 ) { } x ( ) ; 
function * x ( [ ] = `` . x ) { } x ( ) ; 
function * x ( [ ] = `` [ 0 % + void ! 0 ] = 0 ) { } x ( ) ; 
function * x ( [ ] = `` [ 0 ] = x ) { } x ( ) ; 
function * x ( [ ] = this . x ) { } x ( ) ; 
function * x ( [ ] = x ) { } x ( ) ; 
function * x ( [ ] = { } . x ) { } x ( ) ; 
function * x ( [ x , , ... [ ] ] ) { } x ( ) ; 
function * x ( [ x , , ... await ] ) { } x ( ) ; 
function * x ( [ x , , ] ) { } x ( ) ; 
function * x ( [ x , ... [ ] ] ) { } x ( ) ; 
function * x ( [ x , [ ] ] ) { } x ( ) ; 
function * x ( [ x , ] ) { } x ( ) ; 
function * x ( [ x = 0 , , ... [ ] ] ) { } x ( ) ; 
function * x ( [ x = 0 , ... [ ] ] ) { } x ( ) ; 
function * x ( [ x ] ) { } x ( ) ; 
function * x ( x , ... [ , [ ] , ] ) { } x ( ) ; 
function * x ( x , [ ] , ... [ ] ) { } x ( ) ; 
function * x ( x , [ ] , [ ] ) { } x ( ) ; 
function * x ( x = -- 0 [ 0 ] ) { } x ( ) ; 
function * x ( x = -- 0 [ x ] ) { } x ( ) ; 
function * x ( x = -- null [ 0 ] ) { } x ( ) ; 
function * x ( x = -- this [ 0 ] ) { } x ( ) ; 
function * x ( x = -- true [ 0 ] ) { } x ( ) ; 
function * x ( x = 0 [ 0 ] . x ) { } x ( ) ; 
function * x ( x = await ) { } x ( ) ; 
function * x ( x = class extends 0 { } ) { } x ( ) ; 
function * x ( x = x ) { } x ( ) ; 
function * x ( { ... x } ) { } x ( ) ; 
function * x ( { 0 : [ , , ... x ] } ) { } x ( ) ; 
function * x ( { 0 : [ x , , ] } ) { } x ( ) ; 
function * x ( { 0 : [ x , ... { } ] } ) { } x ( ) ; 
function * x ( { 0 : [ x , ] } ) { } x ( ) ; 
function * x ( { 0 : [ x = 0 , ... { } ] } ) { } x ( ) ; 
function * x ( { 0 : [ x ] } ) { } x ( ) ; 
function * x ( { 0 : x } ) { } x ( ) ; 
function * x ( { 0 : { ... x } } ) { } x ( ) ; 
function * x ( { [ 0 ] : x } ) { } x ( ) ; 
function * x ( { await , x , } ) { } x ( ) ; 
function * x ( { await = 0 , x , } ) { } x ( ) ; 
function * x ( { } ) { } x ( ) ; 
if ( 0 > ++ async function * ( [ ] = 0 , x , ) { } ( ) . x ) ; 
let [ x = async function * ( [ ] ) { } ( ) ] = '' ; 
let x = async function * ( [ ] ) { } ( ) >>> 0 ; 
let x = async function * x ( [ , [ ] , ... x ] ) { } ( ) ; 
let x = function * ( [ ] = 0 ) { } ( ) ; 
let x = x => 0 in async function * ( x , [ ] , ) { } ( ) ; x ( ) ; 
new class { 0 = super [ '' ] instanceof { [ Symbol . hasInstance ] : function * ( [ ] ) { } } ; } ; 
new class { 0 = super [ function * ( [ ] ) { } ( ) ] ; } ; 
new function ( ) { x ( 0 ) ; } ; function * x ( ... [ , [ ] , , [ ] ] ) { } 
new function ( ) { x ( 0 ) ; } ; function * x ( ... [ , [ ] ] ) { } 
switch ( 0 ) { case function * ( [ ] ) { } ( ) : default : } 
switch ( 1 ) { case 0 : default : function * x ( x = 0 . x . x ) { } case ! - ~ 1n , 0 : x ( ) ; } 
var [ x = async function * x ( [ ] ) { } ( ) || 0 , ... x ] = '' ; 
var x = [ function * ( [ ] ) { } ( ) >> 0 ] ; 
var x = [ function * ( [ ] ) { } ( ) ] ; 
var x = function * ( [ ] ) { } ( ) ; 
while ( async function * ( ... [ [ ] , , ... x ] ) { } ?. ( 0 ) ?. x ) ; 
while ( function * ( [ ] ) { } ( ) ) ; 
x : if ( async function * ( [ ] , ) { } ( ) ) ; else ; 
x : switch ( function * ( x , [ ] ) { } ( ) ) { } 
{ switch ( function * ( [ ] , x ) { } ( ) ) { } } 
~ async function * ( [ ] ) { } ( ) ;
~ function * ( [ ] ) { } ( ) ;
