[ ] = { [ Symbol . iterator ] : async function x ( ) { } } ; 
[ ] = { [ Symbol . iterator ] : x => [ ] } ; 
for ( [ ] of [ { [ Symbol . iterator ] : async x => 0 } , ] ) ; 
for ( [ ] of [ { [ Symbol . iterator ] : async x => { } } , ] ) ; 
for ( let [ ] of [ { [ Symbol . iterator ] : async function ( x ) { } } ] ) ; 
for ( var [ ] of [ { [ Symbol . iterator ] : async function ( x ) { } } ] ) ; 
let [ [ ] = 0 , , ] = [ { [ Symbol . iterator ] : async function ( x ) { } } ] ; 
let [ ] = { [ Symbol . iterator ] : async x => ! delete 0 >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 + 0 % await 0 ?. x ( ) ( ) } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 + 0 % { [ Symbol . toPrimitive ] : function ( x ) { } } % 0 + 0 % await 0 . x . x >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 + { [ Symbol . toPrimitive ] : async x => 0 } % 0 % 0 + 0 % await 0 >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 + { [ Symbol . toPrimitive ] : this } % 0 % 0 + 0 % await 0 >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 + { [ Symbol . toPrimitive ] : true } % 0 % 0 + 0 % await 0 >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 + { [ Symbol . toPrimitive ] : x => 0 } % 0 % 0 + 0 % await 0 >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 + { [ Symbol . toPrimitive ] : x => { } } % 0 % 0 + 0 % await 0 >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> 0 ** await `` . x >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await 0 . x . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await 0 . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await 0 [ 0 ] [ 0 ] `` } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await [ ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await class x { } . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await new 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >> await x } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> [ 0 ] [ 0 ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> [ ] [ 0 ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> `${ 0 }` [ 0 ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> `` [ 0 ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> `` [ [ ] ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> `` [ void 0 % ~ 0 ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await ! ! 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await 0 . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await 0 ?. x . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await [ ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await `` . x } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await `` [ 0 ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await async function ( ) { } ( ) } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await class { } . x } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await new 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await x } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { 0 : 0 } [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { 0 : { [ Symbol . toPrimitive ] : false } } [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { [ Symbol . toPrimitive ] : function ( x ) { } } } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { get 0 ( ) { return ; } } [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { get 0 ( ) { x ( ) ; } } [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { get 0 ( ) { } } [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { set 0 ( [ ] ) { } } [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> await { set 0 ( x ) { } } [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> null [ 0 ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 >>> x [ 0 ] } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0n >>> await [ 0n ] [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => 0n >>> await [ { [ Symbol . toPrimitive ] : async function ( x ) { } } ] [ 0 ] -- } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! 0 ( ) ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! 0 ] [ 0 ] &&= 0 ( ) } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! 0 ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! 0 ] [ 0 ] &&= class x { } } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! 0 ] [ 0 ] &&= function * ( ) { } [ 0 , 0 ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! 0 ] [ 0 ] &&= x ( ) } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! 0 ] [ 0 ] &&= x } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ! x ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 0 ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 0n ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 1 ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 1n ] [ 0 ] &&= 0 . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 1n ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 1n ] [ 0 ] &&= new 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 1n ] [ 0 ] &&= this } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ 1n ] [ 0 ] &&= x => 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ `` ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ null ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => [ this ] [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => `${ 0 }` [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => `` [ 0 % 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => `` [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => `` [ `` ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - 0 . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - 0n . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - [ ] . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - `${ 0 }` [ 0 % 0 ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - `${ 0 }` [ 0 ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - `${ 0 }` [ x ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - `` . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - `` [ 0 ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - null [ 0 ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - true [ 0 ] } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - x . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => await + await - { x } . x } ; 
let [ ] = { [ Symbol . iterator ] : async x => await [ 0 ( ) , ] . x ++ } ; 
let [ ] = { [ Symbol . iterator ] : async x => await [ x ( ) , ] . x ++ } ; 
let [ ] = { [ Symbol . iterator ] : async x => null [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => true [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => typeof await null >>> 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => typeof await void 0 . x >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => typeof await void x ++ >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => typeof await void { x } . x ++ >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => x + 0 % 0 % 0 + 0 % await 0 >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => x >> 0 ** await 0 . x >>> 0 } , x ; 
let [ ] = { [ Symbol . iterator ] : async x => x [ 0 ] &&= 0 } ; 
let [ ] = { [ Symbol . iterator ] : async x => { } } ; 
let [ ] = { [ Symbol . iterator ] : x => [ ] } ; 
try { throw { [ Symbol . iterator ] : async x => 0 } ; } catch ( [ ] ) { } 
var [ [ ] ] = [ { [ Symbol . iterator ] : async x => 0 } , ] ; 
var [ ] = { [ Symbol . iterator ] : x => [ ] } ; 
var [ ] = { [ Symbol . iterator ] : x => this } ; 
var { 0 : [ ] = { [ Symbol . iterator ] : async function ( x ) { } } } = 0 ; 
var { 0 : [ ] = { [ Symbol . iterator ] : async x => 0 } } = 0 ; 
