[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield * x ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield x ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { for ( let x of yield x . x ) ; } } ] ; 
for ( let [ [ ] = 1 === x !== 0 < 0 + 0 % 0 , x , , ] of [ `` ] ) ; 
for ( let [ x = x [ 0 ] ] of [ `` ] ) ; 
for ( let [ x ] of x ) ; 
for ( let await in await ) ; 
for ( let await of await ) ; var x ; 
for ( let x in ! 0 != 0 < x ) ; 
for ( let x in ! 0 != x < 0 ) ; 
for ( let x in ! 0 / ~ x ) ; 
for ( let x in ! 0 ? { x , } : 0 ) ; 
for ( let x in ! typeof x ) ; 
for ( let x in ! x & 0 ) ; 
for ( let x in ! x && 0 ) ; 
for ( let x in ! x ) ; 
for ( let x in ! x . x ) ; 
for ( let x in ! x / ~ 0 ) ; 
for ( let x in ! x << 0 ) ; 
for ( let x in ! x >= 0 ) ; 
for ( let x in ! x >> 0 ) ; 
for ( let x in ! x ? 0 : 0 ) ; 
for ( let x in ! x in [ ] ) ; 
for ( let x in '' [ x ] %= 0 ) ; 
for ( let x in '' || x [ 0 ] . x ) ; 
for ( let x in + new x ) ; 
for ( let x in + x ) ; 
for ( let x in + { x } ) ; 
for ( let x in - + x == 0 > 0 ) ; 
for ( let x in - 0 != 0 > x ) ; 
for ( let x in - typeof x ) ; 
for ( let x in - x ) ; 
for ( let x in - x < 0n ) ; 
for ( let x in - x >= 0 ) ; 
for ( let x in -- x ) ;
for ( let x in 0 != - x ) ; 
for ( let x in 0 != [ ] [ 0 ] ?. x >= x ) ; 
for ( let x in 0 != x ) ; 
for ( let x in 0 != x == 0 ) ; 
for ( let x in 0 != x > 0 ) ; 
for ( let x in 0 != x ^ 0 ) ; 
for ( let x in 0 != { x } ) ; 
for ( let x in 0 !== 0 ? 0 : { x } ) ; 
for ( let x in 0 !== x ) ; 
for ( let x in 0 !== { x } ) ; 
for ( let x in 0 !== { x } ? 0 : 0 ) ; 
for ( let x in 0 % x ) ; 
for ( let x in 0 % x / 0 ) ; 
for ( let x in 0 % { x } ) ; 
for ( let x in 0 & 0 > x ) ; 
for ( let x in 0 & x > 0 ) ; 
for ( let x in 0 ** x ) ; 
for ( let x in 0 + x ) ; 
for ( let x in 0 + x [ 0 ] ) ; 
for ( let x in 0 , { x , } ) ; 
for ( let x in 0 - x ) ; 
for ( let x in 0 . x %= x ) ; 
for ( let x in 0 . x %= x < 0 ) ; 
for ( let x in 0 . x ** x ) ; 
for ( let x in 0 . x >> x ) ; 
for ( let x in 0 . x ??= x ) ; 
for ( let x in 0 . x ??= { x } ) ; 
for ( let x in 0 . x [ x ] `` ) ; 
for ( let x in 0 . x ||= x ) ; 
for ( let x in 0 . x ||= x = 0 ) ; 
for ( let x in 0 . x ||= x = x ) ; 
for ( let x in 0 / 0 ** x ) ; 
for ( let x in 0 / x ) ; 
for ( let x in 0 < 0 == x ) ; 
for ( let x in 0 < x ) ; 
for ( let x in 0 < x == `` ) ; 
for ( let x in 0 < x > 0 ) ; 
for ( let x in 0 << void x ) ; 
for ( let x in 0 << x ) ; 
for ( let x in 0 << x . x ) ; 
for ( let x in 0 << { x } ) ; 
for ( let x in 0 <= - x ) ; 
for ( let x in 0 <= 0 >> 0 - 0 > x [ 0 ] ) ; 
for ( let x in 0 <= 0 >> 0 - x > this [ 0 ] ) ; 
for ( let x in 0 <= 0 >> x - x > this [ 0 ] ) ; 
for ( let x in 0 <= x ) ; 
for ( let x in 0 <= x >> 0 - 0 > this [ 0 ] ) ; 
for ( let x in 0 == 0 !== x !== 0 | 0 ) ; 
for ( let x in 0 == 0 > x ) ; 
for ( let x in 0 == new x ( ) ) ; 
for ( let x in 0 == x ) ; 
for ( let x in 0 == { x } ) ; 
for ( let x in 0 === 0 > 0 >= 0 in x ) ; 
for ( let x in 0 > x ) ; 
for ( let x in 0 > x < 0 ) ; 
for ( let x in 0 > x <= 0 ) ; 
for ( let x in 0 > { x } ) ; 
for ( let x in 0 >= ! x ) ; 
for ( let x in 0 >= x % 0 ) ; 
for ( let x in 0 >= x ) ; 
for ( let x in 0 >= x > { [ Symbol . toPrimitive ] : function ( x ) { } } ) ; 
for ( let x in 0 >> x ) ; 
for ( let x in 0 >>> ! x ) ; 
for ( let x in 0 >>> x ) ; 
for ( let x in 0 >>> x ) for ( 0 ; ; 0 ) ; 
for ( let x in 0 ?. x != 0 + x ) ; 
for ( let x in 0 ?. x == x <= 0 ) ; 
for ( let x in 0 [ 0 ] /= this == x ) ; 
for ( let x in 0 [ x ] !== 0 ) ; 
for ( let x in 0 [ x ] ) ; 
for ( let x in 0 [ x ] <= 0 ) ; 
for ( let x in 0 [ x ] [ 0 ] <= 0 ) ; 
for ( let x in 0 [ x ] instanceof 0 ) ; 
for ( let x in 0 ^ new x ) ; 
for ( let x in 0 ^ x ) ; 
for ( let x in 0 ^ x | { [ Symbol . toPrimitive ] : [ ] } ) ; 
for ( let x in 0 ^ { x } ) ; 
for ( let x in 0 in new x ) ; 
for ( let x in 0 in x ) ; 
for ( let x in 0 instanceof x ) ; 
for ( let x in 0 instanceof { x } ) ; 
for ( let x in 0 | x ) ; 
for ( let x in 0 | { x } ) ; 
for ( let x in 0 || x ) ; 
for ( let x in 0 || x ?. x ) ; 
for ( let x in 0n < x ) ; 
for ( let x in 1 << + ! ! x ) ; 
for ( let x in 1n << `` [ x ] ) ; 
for ( let x in [ , ] = x ) ; 
for ( let x in [ - x ] [ 0 ] /= 0 == 0 ) ; 
for ( let x in [ 0 !== 0 instanceof class { } === x ] ) ; 
for ( let x in [ 0 , ... 0 . x %= x ] ) ; 
for ( let x in [ 0 , ... [ ! x ] [ 0 ] /= 0 ] ) ; 
for ( let x in [ 0 ] [ 0 ] /= x == 0 ) ; 
for ( let x in [ 1 ] [ 0 ] ^= 0 + x ) ; 
for ( let x in [ 1 ] [ 0 ] ^= x + 0 ) ; 
for ( let x in [ ] && { x } ) ; 
for ( let x in [ ] == 0 > x ) ; 
for ( let x in [ ] == x > 0 ) ; 
for ( let x in [ ] [ x , 0 ] -- ) ; 
for ( let x in [ new x , ] ) ; 
for ( let x in [ x !== 0 instanceof /a/ === 0 ] ) ; 
for ( let x in [ x &&= 0 ] ) ; 
for ( let x in [ x ** 0 ] ) ;
for ( let x in [ x , , ] ) ; 
for ( let x in [ x , ... 0 . x %= x ] ) ; 
for ( let x in [ x , ] ) ; 
for ( let x in [ x = 0 ] ) break ; 
for ( let x in [ x ] ) ;
for ( let x in `` . x < x ) ; 
for ( let x in delete new x ( 0 ) ) ; 
for ( let x in delete x . x ) ; 
for ( let x in function ( ) { } ( ) [ x ] in 0 ) ; 
for ( let x in function * ( ) { } ( ) [ x ] -- ) ; 
for ( let x in new 0 [ x ] ( ) ) ; 
for ( let x in new x ( ) ) ; 
for ( let x in new x ( ) - x ) ; 
for ( let x in new x ) ; 
for ( let x in new x . x ) ; 
for ( let x in new x ? 0 : 0 ) ; 
for ( let x in new x in 0 ) ; 
for ( let x in new { x } ( ) ) ; 
for ( let x in new { x } ) ; 
for ( let x in null ?? x ) ; 
for ( let x in true . x < x ) ; 
for ( let x in typeof 0 == 0 <= x ) ; 
for ( let x in typeof x ( ) ) ; 
for ( let x in typeof x - 0 ) ; 
for ( let x in void x ) ; 
for ( let x in void { x } ) ; 
for ( let x in x != 0 ) ; 
for ( let x in x != 0 ^ 0 ) ; 
for ( let x in x !== 0 ) ; 
for ( let x in x % 0 ) ; 
for ( let x in x %= 0 ) ; 
for ( let x in x %= 0 ^ 0 ) ;
for ( let x in x & 0 ) ; 
for ( let x in x && 0 ) ; 
for ( let x in x &&= 0 ) ;
for ( let x in x ( ) ( ) ) ; 
for ( let x in x ( ) ) ; 
for ( let x in x ( ) ** 0 ) ; 
for ( let x in x ( ) ?. x ) ; 
for ( let x in x ( ) [ 0 ] -- ) ; 
for ( let x in x ) ; 
for ( let x in x * 0 ) ; 
for ( let x in x ** x ) ; 
for ( let x in x ** ~ 0 ) ; 
for ( let x in x + 0 ) ; 
for ( let x in x ++ ) ; 
for ( let x in x - 0 ) ; 
for ( let x in x . x %= 0 ) ; 
for ( let x in x . x &&= 0 ) ; 
for ( let x in x . x ) ;
for ( let x in x . x + 0 ) ; 
for ( let x in x . x ++ ) ; 
for ( let x in x . x -- ) ; 
for ( let x in x . x /= 0 ) ; 
for ( let x in x . x = 0 ) ; 
for ( let x in x . x >>> 0 ) ; 
for ( let x in x . x ??= 0 ) ; 
for ( let x in x . x ??= await ) ; 
for ( let x in x . x ||= 0 ) ; 
for ( let x in x < 0 ) ; 
for ( let x in x < 0 == - 0 ) ; 
for ( let x in x < 1 ) ; 
for ( let x in x << 0 ) ; 
for ( let x in x <= 0 ) ; 
for ( let x in x = 0 ) ; 
for ( let x in x = 0 . x ) ; 
for ( let x in x = class x { } ) ; 
for ( let x in x = x ) ; 
for ( let x in x = x => 0 ) ; 
for ( let x in x == '' ) ; 
for ( let x in x == 0 != 0 ) ; 
for ( let x in x == 0 ) ; 
for ( let x in x === 0 ?. x ) ; 
for ( let x in x > 0 ) ; 
for ( let x in x > 0 <= 0 ) ; 
for ( let x in x >= 0 ) ; 
for ( let x in x >= 0 == 0 ) ; 
for ( let x in x >> 0 ) ; 
for ( let x in x >>> 0 ) ; 
for ( let x in x ?. x != 0 + 0 ) ; 
for ( let x in x ?. x ) ; 
for ( let x in x ?. x . x ** 0 ) ; 
for ( let x in x ?. x << 0 ) ; 
for ( let x in x ?. x == 0 ) ; 
for ( let x in x ?. x ?. x ) ; 
for ( let x in x ?? 0 ) ; 
for ( let x in x [ 0 ] ) ; 
for ( let x in x [ 0 ] -- ) ; 
for ( let x in x [ 0 ] <= 0n ) ; 
for ( let x in x [ 0 ] instanceof 0 ) ; 
for ( let x in x [ this ] ) ; 
for ( let x in x ^ '' ) ; 
for ( let x in x ^ 0 ) ; 
for ( let x in x ^ 0 | x ) ; 
for ( let x in x in [ ] ) ; 
for ( let x in x in this ) ; 
for ( let x in x instanceof this ) ; 
for ( let x in x | 0 ) ; 
for ( let x in x | null ) ; 
for ( let x in x || 0 ) ; 
for ( let x in x ||= 0 ) ;
for ( let x in { 1 : x } . x ?. x ) ; 
for ( let x in { x , x , } = 0 ) ; 
for ( let x in { x , } ) ; 
for ( let x in { x , } . x ) ; 
for ( let x in { x , } = 0 ) ; 
for ( let x in { x } != 0 ) ; 
for ( let x in { x } ( ) ) ; 
for ( let x in { x } ) ; 
for ( let x in { x } , 0 ) ; 
for ( let x in { x } - 0 ) ; 
for ( let x in { x } . x ) ; 
for ( let x in { x } / 0 ) ; 
for ( let x in { x } < 0 ) ; 
for ( let x in { x } = 0 ) ; 
for ( let x in { x } === 0 ) ; 
for ( let x in { x } ?. x ) ; 
for ( let x in { x } ?? 0 ) ; 
for ( let x in { x } [ 0 ] ) ; 
for ( let x in { x } ^ 0 ) ; 
for ( let x in { x } `` ) ; 
for ( let x in { x } | 0 ) ; 
for ( let x in { } && x ) ; 
for ( let x in ~ 0 & x ) ; 
for ( let x in ~ x ) ; 
for ( let x in ~ x | [ ] ) ; 
for ( let x of ! 0 ? x : 0 ) ; 
for ( let x of ! `${ x }` ) ; 
for ( let x of ! x != { } ) ; 
for ( let x of ! x ) ; 
for ( let x of ! x < 0 ) ; 
for ( let x of ! x || 0 ) ; 
for ( let x of ! { x } ) ; 
for ( let x of '' . x in x ) ; 
for ( let x of '' . x ||= x ) ; 
for ( let x of '' [ x ] ||= 0 ) ; 
for ( let x of + 0 || x ) ; 
for ( let x of + x ) ; 
for ( let x of + x . x ) ; 
for ( let x of - x != `` ) ; 
for ( let x of - x ) ; 
for ( let x of - { x } ) ; 
for ( let x of 0 != 0 != ! x ) ; 
for ( let x of 0 != 0 == x == 0 ) ; 
for ( let x of 0 != 0 instanceof x == 0 ) ; 
for ( let x of 0 != typeof x ) ; 
for ( let x of 0 != x != ! 0 ) ; 
for ( let x of 0 != x & 0 ) ; 
for ( let x of 0 != x ) ; 
for ( let x of 0 != x ?. x - 0 >> 0 >>> 1 == 0 ) ; 
for ( let x of 0 != { [ x ] : 0 } ) ; 
for ( let x of 0 != { x } ) ; 
for ( let x of 0 !== 0 % x ) ; 
for ( let x of 0 !== x ) ; 
for ( let x of 0 & ! x ) ; 
for ( let x of 0 & 0 & 0 & this <= x && 0 | 0 ) ; 
for ( let x of 0 & 0 & 0 & x <= `` && 0 | 0 ) ; 
for ( let x of 0 & new x ( ) ) ; 
for ( let x of 0 & x ) ; 
for ( let x of 0 * - class extends x { } ) ; 
for ( let x of 0 * - x ) ; 
for ( let x of 0 * x ) ; 
for ( let x of 0 * x . x ) ; 
for ( let x of 0 ** ! x ) ; 
for ( let x of 0 ** x ) ; 
for ( let x of 0 + x ) ; 
for ( let x of 0 + { x } ) ; 
for ( let x of 0 - x ) ; 
for ( let x of 0 - x . x ) ; 
for ( let x of 0 . x != x ) ; 
for ( let x of 0 . x += x ) ; 
for ( let x of 0 . x /= x ) ; 
for ( let x of 0 . x = x ) ; 
for ( let x of 0 . x >>> x ) ; 
for ( let x of 0 . x ??= x ) ; 
for ( let x of 0 . x in x ) ; 
for ( let x of 0 / x ) ; 
for ( let x of 0 < x ) ; 
for ( let x of 0 << x ) ; 
for ( let x of 0 << { x } ) ; 
for ( let x of 0 <= x ) ; 
for ( let x of 0 == ! x ) ; 
for ( let x of 0 == x ) ; 
for ( let x of 0 == { x } ) ; 
for ( let x of 0 === 0 < x ) ; 
for ( let x of 0 === x ) ; 
for ( let x of 0 === x < 0 ) ; 
for ( let x of 0 === { x } ) ; 
for ( let x of 0 > x ( ) ) ; 
for ( let x of 0 > x ) ; 
for ( let x of 0 > { x } ) ; 
for ( let x of 0 >= x ) ; 
for ( let x of 0 >> x ) ; 
for ( let x of 0 >>> ! x ) ; 
for ( let x of 0 >>> x ) ; 
for ( let x of 0 ?. x ( x , ) ) ; 
for ( let x of 0 ?. x [ x ] ) ; 
for ( let x of 0 [ 0 % x ] ) ;
for ( let x of 0 [ 0 , 0 ] ||= x ) ; 
for ( let x of 0 [ 0 , x ] ) ; 
for ( let x of 0 [ x % x ] ) ;
for ( let x of 0 [ x = 0 | 0 ] ||= 0 ) ; 
for ( let x of 0 [ x ] ) ;
for ( let x of 0 [ x ] -- ) ; 
for ( let x of 0 [ x ] ||= 0 ) ; 
for ( let x of 0 ^ 0 == x ) ; 
for ( let x of 0 ^ this != this === 0 < x ) ; 
for ( let x of 0 ^ typeof x ) ; 
for ( let x of 0 ^ x ) ; 
for ( let x of 0 ^ x == x ) ; 
for ( let x of 0 ^ x `` ) ; 
for ( let x of 0 in x ) ; 
for ( let x of 0 instanceof x ) ; 
for ( let x of 0 | 0 !== x < 0 != ! 0 ) ; 
for ( let x of 0 | x ) ; 
for ( let x of 0 | { x } ) ; 
for ( let x of 0 || x ) ; 
for ( let x of 0 || { x } ) ; 
for ( let x of 0n . x != x ) ; 
for ( let x of 0n . x in x ) ; 
for ( let x of 0n <= x ) ; 
for ( let x of 0n > ! x ) ; 
for ( let x of 0n ? 0 : x ) ; 
for ( let x of 1 !== { x } ) ; 
for ( let x of 1 >= x ) ; 
for ( let x of 1 >> x >>> 0 ) ; 
for ( let x of [ 0 != 0 !== x < x in this == 0 ] ) ; 
for ( let x of [ 0 < 0 >>> x ] ) break ; 
for ( let x of [ 0 <= 0 < `` . x >>> x ] ) ; 
for ( let x of [ 0 [ 0 != x ] . x ] ) ; 
for ( let x of [ 0 ] [ 0 ** x ] ++ ) ; 
for ( let x of [ 0 ] [ 0 ] **= 0 === x ) ; 
for ( let x of [ 0 ] [ 0 ] **= 0 === x << 0 ) ; 
for ( let x of [ 0 ] [ 0 ] **= x == 0 ) ; 
for ( let x of [ 0 ] [ 0 ] *= 0 | x ) ; 
for ( let x of [ 0 | 0 == 0 >= x , ] ) ; 
for ( let x of [ 0 | x == 0 >= 0 , ] ) ; 
for ( let x of [ ] . x in x ) ; 
for ( let x of [ ] = { source : x * 0 } ) ; 
for ( let x of [ ] = { source : x } ) ; 
for ( let x of [ ] [ 0 , x ] = 0 ) ; 
for ( let x of [ ] [ x ?? 0 ] ||= 0 ) ; 
for ( let x of [ ] ^ x ) ; 
for ( let x of [ x != 0 !== 0 < 0 in 0 == 0 ] ) ; 
for ( let x of [ x , 0 ] [ 0 , 1 ] ||= 0 ) ; 
for ( let x of [ x . x ] ) ; 
for ( let x of [ x <= 0 < 0 >>> 0 ] ) ; 
for ( let x of [ x >>>= 0 || 0 ] ) ; 
for ( let x of [ x [ 0 ] ] ) ; 
for ( let x of [ x ] ) ; 
for ( let x of [ { [ Symbol . toPrimitive ] : function ( ) { x ( ) ; } } <= 0 ] ) ; 
for ( let x of `${ 0 }` [ 0 ] &&= x ) ; 
for ( let x of `${ 0 }` [ [ ] [ 0 ] = x ] [ null ] ||= 0 ) ; 
for ( let x of `${ 0 }` [ x ] &&= 0 ) ; 
for ( let x of `${ x }` != 1n ) ; 
for ( let x of `` . x != x ) ; 
for ( let x of `` [ x ] ++ ) ; 
for ( let x of await = new x ( 0 ) ) ; 
for ( let x of function ( ) { } ( ) [ void x ] ??= 0 ) ; 
for ( let x of function ( ) { } ( ) [ x ] ) ; 
for ( let x of function ( ) { } ( ) [ x ] ??= 0 ) ; 
for ( let x of function * ( ) { } ( ) ?. [ ! x ] ) ; 
for ( let x of function * ( ) { } ( ) ?. [ `${ x }` ] ) ; 
for ( let x of function * ( ) { } ( ) ?. [ typeof x ] ) ; 
for ( let x of function * ( ) { } ( ) ?. [ x ] ) ; 
for ( let x of function * ( ) { } ( ) [ function * ( ) { } ( ) . x = x ] ??= 0 ) ; 
for ( let x of function * ( ) { } > ! x ) ; 
for ( let x of function x ( ) { } >= x ) ; 
for ( let x of new function ( ) { new x ( ) ; } ) ; 
for ( let x of new new x ) ; 
for ( let x of new x && 0 ) ; 
for ( let x of new x ( ) && 0 ) ; 
for ( let x of new x ( ) ) ; 
for ( let x of new x ) ; 
for ( let x of new x - 0 ) ; 
for ( let x of new x . x ( ) ) ; 
for ( let x of new x ^ 0 ) ; 
for ( let x of new { x } ( ) ) ; 
for ( let x of this ? x : 0 ) ; 
for ( let x of true . x in x ) ; 
for ( let x of typeof + new x ) ; 
for ( let x of typeof 0 && { x , } ) ; 
for ( let x of typeof new x ( ) ) ; 
for ( let x of typeof typeof x && `` ) ; 
for ( let x of typeof x % 0 ) ; 
for ( let x of typeof x && { [ Symbol . iterator ] : async x => 0 } ) ; 
for ( let x of typeof x ) ; 
for ( let x of typeof x ) for ( let x ; 0 ; 0 ) ; 
for ( let x of typeof x . x ) ; 
for ( let x of typeof x < 1n ) ; 
for ( let x of typeof { x } ) ; 
for ( let x of void + x ^ 0 ) ; 
for ( let x of void 0 ?. x || x ) ; 
for ( let x of void 1n ?. x || x ) ; 
for ( let x of void [ ] ?. x || x ) ; 
for ( let x of void `` ?. x || x ) ; 
for ( let x of void typeof x ) ; 
for ( let x of void x % 0 ) ; 
for ( let x of void x ) ; 
for ( let x of void x ?. x || x ) ; 
for ( let x of x != 0 ) ; 
for ( let x of x != 0 == 0 ) ; 
for ( let x of x != `` ) ; 
for ( let x of x % 0 ) ; 
for ( let x of x % 0 < 1n ) ; 
for ( let x of x %= 0 && 0 ) if ( { [ Symbol . toPrimitive ] : x => 0 } * - 0 ) ; else ; 
for ( let x of x & 0 & 0 & this <= { [ Symbol . toPrimitive ] : x => { } } && 0 | 0 ) ; 
for ( let x of x & 0 ) ; 
for ( let x of x && 0 ) ; 
for ( let x of x &&= 0 ) ; 
for ( let x of x ( ) ( ) ) ; 
for ( let x of x ( ) ) ; 
for ( let x of x ( ) . x ) ; 
for ( let x of x ( ) `` ) ; 
for ( let x of x ) 0 ; 
for ( let x of x ) ; 
for ( let x of x ) break ; 
for ( let x of x ) continue ; 
for ( let x of x ) debugger ; 
for ( let x of x ) for ( ; ; 0 ) 0 ; 
for ( let x of x ) for ( ; ; 0 ) ; 
for ( let x of x ) for ( ; ; 0 ) debugger ; 
for ( let x of x ) for ( ; ; 0 ) do ; while ( 0 ) ; 
for ( let x of x ) for ( ; ; 0 ) if ( 0 ) ; 
for ( let x of x ) for ( ; ; 0 ) switch ( 0 ) { } 
for ( let x of x ) for ( ; ; 0 ) while ( 0 ) ; 
for ( let x of x ) for ( ; ; 0 ) { } 
for ( let x of x ) switch ( 0 ) { } 
for ( let x of x ) throw 0 ; 
for ( let x of x ) try { } catch { } finally { } 
for ( let x of x ) try { } finally { } 
for ( let x of x ) while ( 0 ) ; 
for ( let x of x ) x : ; 
for ( let x of x ) { let x ; } 
for ( let x of x ) { } 
for ( let x of x ** 0 ) ; 
for ( let x of x ** 1 ) ; 
for ( let x of x *= 0 ) ; 
for ( let x of x + 0 ) ; 
for ( let x of x - 0 ) ; 
for ( let x of x -- ) ; 
for ( let x of x . x %= 0 ) ; 
for ( let x of x . x ( ) ) ; 
for ( let x of x . x ) ; 
for ( let x of x . x *= 0 ) ; 
for ( let x of x . x -- ) ; 
for ( let x of x . x . x `` ) ; 
for ( let x of x . x << 0 ) ; 
for ( let x of x . x = 0 ) ; 
for ( let x of x . x >> 0 ) ; 
for ( let x of x . x >>> 1 ) ; 
for ( let x of x . x ?. x ) ; 
for ( let x of x . x ??= 0 ) ; 
for ( let x of x . x in x ) ; 
for ( let x of x . x ||= 0 ) ; 
for ( let x of x < 0 ) ; 
for ( let x of x << 0 ) ; 
for ( let x of x <= 0 ) ; 
for ( let x of x = 0 ) ; 
for ( let x of x = 0 . x ) ; 
for ( let x of x = class x { } ) ; 
for ( let x of x = x . x ) ; 
for ( let x of x = x => 0 ) ; 
for ( let x of x = { x } ) ; 
for ( let x of x = ~ ! typeof 0 ) ; 
for ( let x of x == 0 ) ; 
for ( let x of x === 0 ) ; 
for ( let x of x > 0 ) ; 
for ( let x of x >= 0 ) ; 
for ( let x of x >= x ) ; 
for ( let x of x >> 0 ) ; 
for ( let x of x >> 0 >>> x ) ; 
for ( let x of x >>> 0 ) ; 
for ( let x of x ? 0 : 0 ) ; 
for ( let x of x ?. x ) ; 
for ( let x of x ?. x + delete ! 0 ) ; 
for ( let x of x ?. x . x & 0 ) ; 
for ( let x of x ?. x ?. x ) ; 
for ( let x of x ?? 0 ) ; 
for ( let x of x ??= 0 ) ;
for ( let x of x [ 0 , 0 ] ) ; 
for ( let x of x [ 0 ] %= 0 ) ; 
for ( let x of x [ 0 ] &&= 0 ) ; 
for ( let x of x [ 0 ] ) ;
for ( let x of x [ 0 ] >= this ) ; 
for ( let x of x [ 0 ] >> 0 ) ; 
for ( let x of x [ 0 ] ||= 0 ) ; 
for ( let x of x ^ 0 ) ; 
for ( let x of x `${ 0 , 0 , 0 }` ** 0 ) ; 
for ( let x of x `` . x ?. x ) ; 
for ( let x of x in 0 ) ; 
for ( let x of x in x ) ; 
for ( let x of x instanceof 0 ) ; 
for ( let x of x | 0 ) ; 
for ( let x of x || 0 ) ; 
for ( let x of x ||= 0 ) ; 
for ( let x of { [ 0 ] : x } ) ;
for ( let x of { [ 0 | x ] : x } ) ;
for ( let x of { [ Symbol . iterator ] : ( ) => { throw x ; } } ) ; 
for ( let x of { [ Symbol . iterator ] : function * ( ) { throw x ; } } ) ;
for ( let x of { [ Symbol . iterator ] : function * ( ) { yield * 0 ?. x ( x , ) ; } } ) ;
for ( let x of { [ Symbol . toPrimitive ] : function ( x ) { } } > x . x ) ; 
for ( let x of { [ x | 0 ] : x } ) ;
for ( let x of { x , } ) ; 
for ( let x of { x } ) ; 
for ( let x of { x } + 0 ) ; 
for ( let x of { x } . x ) ; 
for ( let x of { x } <= 0 ) ; 
for ( let x of { x } === 0 ) ; 
for ( let x of { x } > 1 ) ; 
for ( let x of { x } >= 0 ) ; 
for ( let x of { x } >>> 0 ) ; 
for ( let x of { x } ? 0 : 0 ) ; 
for ( let x of { x } ?. x ) ; 
for ( let x of { x } [ 0 ] ) ; 
for ( let x of { x } in 0 ) ; 
for ( let x of { x } | 0 ) ; 
for ( let x of { } == ! x ) ; 
for ( let x of ~ x ) ; 
for ( let x of ~ x << 0 ) ; 
for ( let x of ~ { x } ) ; 
for ( let x of ~ ~ x ) ; 
for ( let { await , x } in [ await ] ) ; 
for ( let { await , x } in await ) ; 
for ( var x ; class x extends `${ 0 }` [ x ] { } ; 0 ) 0 ; 
for ( x in [ 0 ] ) ; let x ;
for ( x of [ 0 ] ) ; let x ; 
for ( { x = 0 } of [ 0 , ] ) ; let x ; 
let [ x , , ... [ ] ] = function * ( ) { for ( let x of yield * x != 0 ) ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { for ( let x of yield * x ) ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { for ( let x of yield * { x , x } != 0 ) ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { for ( let x of yield * { x } ) ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { for ( let x of yield x ) ; } ( ) ; 
let [ x , , ... [ ] ] = function * ( ) { for ( let x of yield { x } ) ; } ( ) ; 
