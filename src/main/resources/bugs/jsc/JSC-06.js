`${ 0 }${ + '' }${ { [ Symbol . toPrimitive ] : async function * x ( x , [ ] , ) { } } }` ;
async function x ( ) { } for ( x ; x instanceof 0 [ { [ Symbol . toPrimitive ] : async function * x ( x = 0 ) { } } ] -- ; ) ;
let [ ] = new function x ( { x } ) { } | 0 , x ;
let x = function * x ( ... x ) { } ( 0 ) . x = 0 ;
let x = function * x ( { x } ) { } ( 0 ) . x = 0 ;
new async function * x ( [ ] , ... x ) { } ;
new function x ( [ ] = '' . x ( ) , x ) { } ;
new function x ( [ ] = 0 ( 0 , ... 0 ) , x ) { } ;
new function x ( [ ] = 0 , x ) { } ;
new function x ( [ ] = [ ] . x ( ) , x ) { } ;
new function x ( [ ] = async function * ( ) { } ( ) . x . x , x ) { } ;
new function x ( [ ] = function ( ) { } ( ) . x . x , x ) { } ;
new function x ( [ ] = new . target ( ) , x ) { } ;
new function x ( [ ] = new new . target ( 0 ) . x ( ) , x ) { } ;
new function x ( [ ] = new new . target ( 0 . x . x `` ) . x ( ) , x ) { } ;
new function x ( [ ] = new new . target ( [ 0 ] ) . x ( ) , x ) { } ;
new function x ( [ ] = new new . target ( new . target ) . x ( ) , x ) { } ;
new function x ( [ ] = null . x ( ) , x ) { } ;
new function x ( [ ] = this [ 0 ] , x ) { } ;
new function x ( [ ] = true . x ( ) , x ) { } ;
new function x ( [ ] = x ( ) , x ) { } ;
new function x ( [ ] = { [ Symbol . toPrimitive ] : '' } / 0 ** 0 , x ) { } ;
new function x ( x , ... [ ] ) { } ( 0 ) ;
new function x ( x , ... [ ] ) { } ( 0 , 0 ) ;
new function x ( x , ... [ ] ) { } ( 0 , `` && 0 ) ;
new function x ( x , ... [ ] ) { } ( 0 , class x extends 0 { } ) ;
new function x ( x , ... await ) { } ( 0 ) ;
new function x ( x , ... await ) { } ( 0 , 0 ) ;
new function x ( x , [ ] ) { } ;
new function x ( x = 0 ) { var await ; } ; 
new function x ( x = 0 ) { var x , x ; } ; 
new function x ( x = 0 ) { var x ; } ; 
new function x ( x = 0 , ... [ ] ) { } ( 0 ) ;
new function x ( x = x => new . target ) { x ( 0 ) ; } ; 
switch ( 0 ) { case new function x ( [ ] , ... x ) { } : default : }
var x = async function * x ( [ ] , x = 0 ) { } ;
var x = async function * x ( [ ] = 0 , x ) { } ;
var x = async x => [ ] . x ??= async function x ( ... x ) { } ; x ( ) ;
