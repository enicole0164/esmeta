! class extends 0 { } ( ) ; 
! class { ; } ( ) ; 
! class { } ( ) ( ) ; 
! class { } ( ) . x ; 
! class { } ( ) ; 
! class { } ( ) [ 0 ] ; 
! { 1 : class { } ( ) } ; 
'' [ 0 ] ??= class { } ( ) ; 
( async x => { await class { } ( ) ; } ) ( ) ; 
( x => class { } ( ) ) ( ) ;
( x => class { } ( ) ) ( ) ?. x ;
+ class { ; } ( ) ; 
+ class { } ( ) ; 
+ class { } ( ) ?. x ; 
+ class { } ( ) `` ; 
+ typeof class { } ( ) ;
+ ~ class { } ( 0 ) < 0 ; 
- class extends 0 { } ( ) ; 
- class { ; } ( ) ; 
- class { } ( ) && 0 ; 
- class { } ( ) ( ) ; 
- class { } ( ) . x ; 
- class { } ( ) ; 
- { ... class { } ( ) !== 0 } ; 
- { ... class { } ( ) } ; 
- { 1 : class { } ( ) } ; 
0 % class { } ( ) ; 
0 & 0 [ class { } ( ) ] ;
0 & 0 instanceof class { } ( ) ; 
0 & new 0 ( class { } ( ) , ) ; 
0 & new function x ( ) { return 0 & class { } ( ) ; } ( ) ; 
0 , 0 ? 0 : class { } ( ) ; 
0 , class { } ( ) ; 
0 - class { } ( ) ; 
0 - class { } ( ) `` ; 
0 . x %= class { } ( ) ; 
0 / class { } ( ) ; 
0 / class { } ( ... 0 ) ; 
0 < class { } ( ) ; 
0 << class { } ( ) ; 
0 <= class { } ( ) ; 
0 == class { } ( ) ; 
0 >= class { } ( ) ; 
0 >> class { } ( ) ; 
0 >>> class { } ( ) ; 
0 ?. ( ... class { } ( ) ) ; 
0 ?. ( 0 , ... class { } ( ) ) ; 
0 ?. ( 0 , class { } ( ) ) ; 
0 ?. [ ( class { } ( ) ) ] ; 
0 ?. [ 0 , class { } ( ) ] ( ) ; 
0 ?. [ class { } ( ) ] ; 
0 ?. x ( 0 , class { } ( ) , ) ; 
0 ?. x ( class { } ( ) , ) ; 
0 ?. x [ 0 . x ||= class { } ( ) ] ; 
0 ?. x [ class { } ( ) ] ; 
0 [ 0 ] ??= class { } ( ) && 0 ; 
0 [ 0 ] ??= class { } ( ) ; 
0 [ class { } ( ) ] ; 
0 ^ class { } ( ) ; 
0 ^ class { } ( ) > 0 ; 
0 ^ ~ class { } ( ) ; 
0 in class { } ( ) ?? 0 ; 
0 | 0 & class { } ( ) ; 
0 | class { } ( ) ; 
0 || 0 > class { } ( ) ; 
0n >> class { } ( ) ; 
1 != class { } ( ) ; 
1 != class { } ( ... 0 , ) ; 
1 < class { } ( ) + 0 ; 
; + class { } ( ) ?. x ; 
[ , ... 0 + class { } ( ) ] ; 
[ , ... class { } ( ) ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield * class { } ( ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield class { } ( ) ; } } ] ; 
[ , 0 , , ... { [ Symbol . iterator ] : function * ( x ) { yield class { } ( yield yield * 0 , ) ; ; } } ] ; 
[ , 0 == class { } ( ) ] ; 
[ , 0 >= class { } ( ) ] ; 
[ , class { } ( ) ] ; 
[ ... 0 instanceof class { } ( ) ] ; 
[ ... class { } ( ) ] ; 
[ 0 ** class { } ( ) ] ; 
[ 0 , , 0 . x %= class { } ( ) ] ; 
[ 0 , , class { } ( ) ] ; 
[ 0 , class { } ( ) ] ; 
[ 0 || 0 == `` ?. [ class { ; } ( 0 ) ] ?. x ] ; 
[ ] . x ||= class { } ( ) ; 
[ ] | class { } ( ) ; 
[ class { } ( ) , , ] ; 
[ class { } ( ) ?? 0 , 0 ] ; 
[ class { } ( ) ] ; 
[ class { } ( ) ^ 0 ] ; 
`${ 0 === class { } ( ) }` ; 
`${ 0 }${ 0 }${ class { } ( ) }` ; 
`${ 0 }${ class { } ( ) }` ; 
`${ class { } ( ) }` ; 
class x extends class { } ( ) { ; } 
class x extends class { } ( ) { } 
class x { [ class { } ( ) ] ; }
class x { [ class { } ( ) ] = 0 ; } 
class x { static #x = class extends 0 . #x { } ( ) . #x ; }
delete class { } ( ) ; 
do ; while ( class { } ( ) ) ; 
for ( 0 ; class { } ( ) ; 0 ) ; 
for ( ; ; ) var [ ] = class { } ( ) ; 
for ( ; ; class { } ( ) ) ; 
for ( ; class { } ( ) !== 0 ; ) ; 
for ( ; class { } ( ) ; ) ; 
for ( ; class { } ( ) ; 0 ) ; 
for ( class { } ( ) ; 0 ; ) ; 
for ( class { } ( ) ; 0 ; 0 ) ; 
for ( class { } ( ) ; ; ) ; 
for ( class { } ( ) ; ; 0 ) ; 
for ( let x ; class { } ( ) ; ) ; 
for ( let x ; class { } ( ) ; 0 ) ; 
for ( let x in class { } ( ) ) ; 
for ( let x of class { } ( ) ) ; 
for ( var x ; ; class { } ( ) ) ; 
for ( var x ; class { } ( ) ; ) ; 
for ( var x ; class { } ( ) ; 0 ) ; 
for ( var x ; class { } ( 0 , 1n <= 0n >= 0 ) ; ) ; 
for ( var x ; class { } ( 0 , 1n <= `` >= { [ Symbol . toPrimitive ] : async x => 0 } ) ; ) ; 
for ( var x ; class { } ( 0 , 1n <= `` >= { [ Symbol . toPrimitive ] : function ( ) { } } ) ; ) ; 
for ( var x ; class { } ( 0 , 1n <= `` >= { [ Symbol . toPrimitive ] : this } ) ; ) ; 
for ( var x ; class { } ( 0 , 1n <= `` >= { [ Symbol . toPrimitive ] : x => 0 } ) ; ) ; 
for ( var x ; class { } ( 0 , `` <= `` >= 0 ) ; ) ; 
for ( var x ; class { } ( 0 , x + this ) ; ) ; 
for ( var x in class { } ( ) ) ; 
for ( var x of class { } ( ) ) ; 
for ( x in class { } ( ) ) ; 
for ( x of class { } ( ) ) ; 
if ( 0 || class { } ( ) ) ; 
if ( class { } ( ) ) ; 
if ( class { } ( ) ) ; else ; 
if ( class { } ( ... 0 , ) ) ; 
if ( void class { } ( ) ) ; 
let [ , [ ] = class { } ( ) ] = '' ; 
let [ , ] = class { } ( ) ; 
let [ ] = class { } ( ) != 0 ; 
let [ ] = class { } ( ) && 0 ; 
let [ ] = class { } ( ) ; 
let [ ] = class { } ( ) < x ; 
let [ ] = class { } ( ... 0 , ) && 0 ; 
let [ x , , ... [ ] ] = function * ( ) { yield * class { } ( ) ; } ( ) ; 
let [ x = class { } ( ) ] = '' ; 
let x ; ( x => class { } ( ) ) ( ) ; 
let x = 0 < import ( class { } ( ) ) ?. x ; 
let x = `${ 0 }` [ 0 ] &&= class { } ( ) ; 
let x = async x => class { } ( ) ; x ( ) ; 
let x = async x => { for await ( let x of class { } ( ) ) ; } ; x ( ) ; 
let x = async x => { for await ( var x of class { } ( ) ) ; } ; x ( ) ; 
let x = async x => { for await ( x of class { } ( ) ) ; } ; x ( ) ; 
let x = async x => { raw : return class { } ( ) ; } ; x ( ) ; 
let x = class { } ( ) ; 
let x = class { } ( ) >>> 0 ; 
let x = x => 0 in class { } ( ) ; x ( ) ; 
let x = x => class { } ( ) ( ) ; x ( ) ; 
let x = x => class { } ( ) ; x ( ) ; 
let x = x => class { } ( ) `` ; x ( ) ; 
let { x = class { } ( ) } = 0 ; 
new '' ( ... class { } ( ) ) ; 
new class { 0 = super [ class { } ( ) ] ; } ; 
new class { 0 = super [ class { } ( ... 0 , ) ] ; } ; 
new function ( ) { return 0 , class { } ( ) ; } ;
new function ( ) { return 0 ? 0 : class { } ( ) ; } ; 
new function ( ) { return 0 ?. x ?? class { } ( ) ; } ; 
new function ( ) { return 0 || class { } ( ) ; } ; 
new function ( ) { return class { } ( ) ; } ; 
new function ( ) { return null ?? class { } ( ) ; } ; 
new function ( ) { x ( ) ; return class { } ( ) ; } ; var x ; 
new { ... class { } ( ) } ; 
switch ( 0 ) { case class { } ( ) : ; } 
switch ( 0 ) { case class { } ( ) : default : case 0 : } 
switch ( 0 ) { case class { } ( ) : default : } 
switch ( 0 ) { case class { } ( ) : } 
switch ( 0 ) { default : case class { } ( ) : } 
throw class { } ( ) ; 
throw class { } ( ) ? 0 : 0 ; 
true / ! class { } ( ) ; 
typeof class { } ( ) ; 
var [ [ ] = class { } ( ) ] = `` ; 
var [ x = class { } ( ) ] = `` ; 
var [ x ] = { [ Symbol . iterator ] : async function * ( ) { yield class { } ( ) ; } } ; 
var x = async x => class { } ( ) ; x ( ) ; 
var x = async x => { ; for ( class { } ( ) ; ; 0 ) ; } ; x ( ) ;
var x = async x => { ; for await ( let x of class { } ( ) ) ; } ; x ( ) ; 
var x = async x => { ; for await ( var x of class { } ( ) ) ; } ; x ( ) ; 
var x = async x => { ; for await ( x of class { } ( ) ) ; } ; x ( ) ; 
var x = class { } ( ) ; 
var x = x => 0 . x || class { } ( ) ; x ( ) ; 
var x = x => 0 == 0 && class { } ( ) ; x ( ) ; 
var x = x => 0 == 0 && class { } ( ) `` ; x ( ) ; 
var x = x => class { } ( ) ( ) ; x ( ) ; 
var x = x => class { } ( ) ; x ( ) ; 
var { 0 : [ ] = class { } ( ) } = 0 ; 
var { x = class { } ( ) } = 0 ; 
var { x } = class { } ( ) ; 
var { x } = class { } ( ) ?? 0 ; 
void class { } ( 0 ) ?? 0 ; 
while ( 0 || class { } ( ) ) ; 
while ( class { } ( ) ) ; 
while ( class { } ( 0 ) ** 0 ) ; 
x : switch ( class { } ( ) ) { } 
x : throw class { } ( ) ;
x = class { } ( ) ; 
{ [ ] = class { } ( ) ; } 
{ switch ( class { } ( ) ) { } } 
~ `${ class { } ( ) }` ;
~ class { ; } ( ) ;
~ class { } ( ) ;
~ class { } ( ) [ 0 ] ; 
