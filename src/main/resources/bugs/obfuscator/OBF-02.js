! ! + void await < 0 ; 
! await ; 
! await >= 1 ; 
! class { [ 0 . x ??= await ] ; } ; 
! function ( ) { } ( ) [ 0 [ 0 ] ||= await = 0 ] `` ; 
! function ( ) { } ( ) [ 0 || await ] ; 
! typeof await ; 
! { ... ! await } ; 
! { ... await . x } ; 
! { ... await } ; 
! { 1 : 0 >>> await } ; 
! { 1 : 0 || await } ; 
! { 1 : await === 0 } ; 
! { 1 : await >>> { [ Symbol . toPrimitive ] : async function ( x ) { } } } ; 
! { 1 : await ? 0 : 0 } ; 
! { 1 : await } ; 
! { [ 0 ? 0 : await ] : 0 } ; 
! { [ await >>> 0 ] : 0 } ; 
! { [ await ] : 0 } ; 
! { async [ await ] ( ) { } } ; 
! { x : await ++ , } ; 
'' == await ? 0 : 0 ; class await { } 
'' [ ( 0 << await ) ] ; 
'' [ 0 ] ??= await ( ) ; 
( 0 >= await ) ( ) ?. x ; 
( 1n ? await : 0 ) ; 
( await &&= 0 ) ( ) ; 
( await ) & 0 ; 
( await ) ; 
( await ) ; async function * await ( ) { } 
( await => 0 ) ( ) ; 
( await => 0 ^ 0 ) ( ) ; 
( await => [ , ] = 0 ) ( ) ; 
( await => await ) ( ) ;
( await => x ) ( ) ; 
( await => { x } ) ( ) ; 
( await => { } ) ( ) ; 
+ await ; 
+ await == 0 ; 
+ await ?. x & 0 ; 
+ function ( ) { } ( ) [ 0 - await ] ; 
+ function ( ) { } ( ) [ 1 !== await ] & 0 ; 
+ function ( ) { } ( ) [ await & 0 ] ; 
+ function ( ) { } ( ) [ await >> new 0 ] ; 
+ ~ await < 0 ; 
+ ~ await ?. x ; 
++ await . x == [ ] ?? 0 ; 
++ function ( ) { } ( ) [ ! await ] ; 
++ function ( ) { } ( ) [ 0 - await ] ; 
++ function ( ) { } ( ) [ await ] ; 
++ function * ( ) { } ( ) [ 0 & await ] ; 
++ function * ( ) { } ( ) [ 0 . x ||= await ] ; 
++ function * ( ) { } ( ) [ await ??= 0 ] ; 
++ function * ( ) { } ( ) [ await || 0 ] ; 
- - await ; 
- 0 !== await ; class await { } 
- 0 instanceof await ; 
- [ ! await , ] ; 
- await != 0 ; 
- await !== await ; class await { } 
- await . x `` << 0 ; 
- await ; 
- typeof + await ; 
- { ... + await } ; 
- { ... 0 [ await ] } ; 
- { ... await !== 0 } ; 
- { ... await . x ||= 0 } ; 
- { ... await } ; 
- { ... void await } ; 
- { 1 : - await } ; 
- { 1 : await &&= 0 } ; 
- { 1 : await ? 0 : new 0 } ; 
- { 1 : await ?. x } ; 
- { 1 : await } ; 
- { [ 0 == await `` ] : 0 } ; 
- { [ 0 | await ] : 0 } ; 
- { [ await >>> 0 ] : 0 } ; 
- { [ await ] : 0 } ; 
0 != -- await ; 
0 != 0 == await === 0 ; 
0 != 0 >= await ; 
0 != 0 instanceof await ; 
0 != await -- ; 
0 != await . x -- ; 
0 != await ; 
0 != await == 0 === 0 ; 
0 !== ! await ; 
0 !== 0 - await ; 
0 !== await << 1 ; 
0 !== await in 0 ; 
0 !== await in { } ; 
0 !== await instanceof { } >= 0 != 0 ; 
0 !== await || 0 ; 
0 !== x - await ; 
0 !== { x , } - await ; 
0 % + - await -- ; 
0 % await ( ) ; 
0 % await instanceof 0 ; 
0 & - await ?. x ; 
0 & 0 [ { [ Symbol . toPrimitive ] : await => 0 } ] ; 
0 & [ typeof 0 > await `` , ] ; 
0 & `${ await &&= 0 }` ; 
0 & `${ await ++ != 0 }` ; 
0 & await ++ ; 
0 & await . x ++ ; 
0 & await . x ; 
0 & await ; 
0 & await ?? 0 ; 
0 & function * ( ) { } ( ) [ await ] ; 
0 & new 0 ( 0 , ... await &&= 0 ) ; 
0 & new 0 ( 0 , ... new 0 ( 0 , 0 [ await ] , ... 0 ) , ) ; 
0 & { ... await ++ , } ; 
0 & { 0 : 0 . x %= await } ; 
0 & { [ Symbol . toPrimitive ] : await => { x ( ) ; } } ** ! 0 ; 
0 & { [ Symbol . toPrimitive ] : await => { } } ** ! 0 ; 
0 && 0 || 0 === 0 && await ; 
0 ( ... 0 || await ) ; 
0 ( ... await ) ; 
0 ( ... await ? 0 : 0 ) ; class await { } 
0 ( ... await ??= 0 ) ; 
0 ( ... null ?? await ) ; 
0 ( 0 , ... 0 ? 0 : await ) ; 
0 ( 0 , ... 0 [ 0 ] ||= await ) ; 
0 ( 0 , ... await ) ; 
0 ( 0 , ... await ) ; class await { } 
0 ( 0 , ... await = 0 ) ; 
0 ( 0 , ... await = async function x ( ) { } ) ; 
0 ( 0 , ... { } . x ??= await ) ; 
0 ( 0 , 0 & await ) ; 
0 ( 0 , await & 0 ) ; 
0 ( await ) ; 
0 ( await == `` ) ; 
0 ** + await ; 
0 ** `${ await }` ; 
0 ** await != 0 ; 
0 ** await ? 0 : 0 ; 
0 + await ; 
0 , '' . x = await ; 
0 , 0 ** await ; 
0 , 0 . x ?? await ; 
0 , 0 . x ??= await ; 
0 , 0 <= await ; 
0 , 0 >>> await ; 
0 , 0 | await , 0 ; 
0 , await ; 
0 - `${ await }` ; 
0 - await , 0 ; 
0 - await ; 
0 - function ( ) { } ( ) [ await in 0 ] ; 
0 . x %= ! ! await ; 
0 . x %= - await ; 
0 . x %= 0 instanceof await ; 
0 . x %= [ await , ] ; 
0 . x %= await ** 0 ; 
0 . x %= await ?. ( ) , 0 ; 
0 . x %= await instanceof 0 ; 
0 . x *= 0 ** await ; 
0 . x *= 0 . x %= { [ Symbol . toPrimitive ] : await => 0 } ; 
0 . x *= 0 . x %= { [ Symbol . toPrimitive ] : await => this } ; 
0 . x *= 0 . x %= { [ Symbol . toPrimitive ] : await => x } ; 
0 . x *= 0 . x ||= await ; 
0 . x *= 0 [ 0 ] **= await -- ; 
0 . x *= await !== 0 ; 
0 . x *= await >> 0 ; 
0 . x *= await ? 0 : 0 ; 
0 . x += 0 in await ; 
0 . x += 1n <= await ; 
0 . x += await !== 0 > 0 ; 
0 . x = ! 0 && await ; 
0 . x = await !== 0 ; 
0 . x === await ?? 0 ; 
0 . x ??= ! await ; 
0 . x ??= 1n ? await : 0 ; 
0 . x ??= [ ] [ 0 ] ??= await ?. x ( ) ; 
0 . x ??= await = 0 ; 
0 . x ??= await ?. x ?. x ; 
0 . x ??= typeof await ; 
0 . x ??= void await ; 
0 . x ||= 0 - await ; 
0 . x ||= 0 === await ; 
0 . x ||= 1 && await ; 
0 . x ||= await !== 0 ; 
0 . x ||= await && 0 ; 
0 . x ||= await < 0 ; 
0 . x ||= await <= this ; 
0 . x ||= await >> { x , } ; 
0 . x ||= await ?. x ; 
0 . x ||= await ?. x ?. x ; 
0 . x ||= await instanceof 0 ; 
0 . x ||= ~ await ; 
0 / `${ { [ Symbol . toPrimitive ] : 0 != 0 >> void 0 !== await } }` ; 
0 / await ; 
0 / await ; class await { } 
0 / await ?. x ; 
0 / await ?. x ; class await { } 
0 / function * ( ) { } ( ) [ await ] -- ; 
0 / { ... [ 0 ] < this <= { [ Symbol . toPrimitive ] : await => 0 } , } ; 
0 < ! await ; 
0 < 0 < + await >>> 0 << 0 <= 0 && 0 ; 
0 < [ await , ] ; 
0 < `${ [ 0 , ] }` - { [ Symbol . toPrimitive ] : await `` } ; class await { } 
0 < await ; 
0 < await ?. x ; 
0 << + ! await ?? 0 ; 
0 << 0 [ await ] ; 
0 << await != 0 ; 
0 << await ; 
0 << await ? 0 : 0 ; 
0 << await ?. x ; 
0 <= - await ; 
0 <= 0 / await ; ; 
0 <= await % 0 ; 
0 <= await ** 0 ; 
0 <= await , 0 ; 
0 <= await . x `` << 0 ; 
0 <= await ; 
0 <= function ( ) { } ( ) [ await ] ; 
0 <= { [ Symbol . toPrimitive ] : await => 0 } != 0 ; 
0 <= ~ await ; 
0 == [ await , , ] ; 
0 == await ; 
0 === 0 !== await === 0 ; 
0 === await , 0 ; 
0 === await . x ? 0 : 0 ; 
0 === await ; 
0 === await === 0 ; 
0 === await >= 0 ; 
0 === await >>> 0 ; 
0 === await ? 0 : 0 ; 
0 > 0 - await ?. x ; 
0 > [ await , , ] ; 
0 > await && 0 ; 
0 > await , 0 ; 
0 > await ; 
0 > await ? 0 : 0 ; 
0 >= ! - await ; 
0 >= [ await , ] ; 
0 >= await ++ in 0 ; 
0 >= await -- + 0 ; 
0 >= await == 0 ; 
0 >> await , 0 ; 
0 >> await ; 
0 >> await ? 0 : 0 ; 
0 >> await in 0 ; 
0 >> function ( ) { } ( ) [ await ? 0 : 0 ] ; 
0 >> function * ( ) { } ( ) [ 0 ? 0 : await ] ; 
0 >>> 0 * 0 [ 0 ? 0 : await ] . x ; 
0 >>> 0 [ await ] ; 
0 >>> await , 0 ; 
0 >>> await ; 
0 >>> await <= 0 ; 
0 >>> void await ; 
0 ? 0 : ! await ; 
0 ? 0 : 0 . x ||= await ; 
0 ? 0 : 0 ? 0 : await ; 
0 ? 0 : 1 && await ; 
0 ? 0 : await >> 0 ; 
0 ?. ( ... 0 - await ) ; 
0 ?. ( ... 0 >> await ) ; 
0 ?. ( ... 0 ?. x == void await ) ; 
0 ?. ( ... 0 | await ) ; 
0 ?. ( ... await <= 0 ) ; 
0 ?. ( ... await | 0 ) ; 
0 ?. ( ... void await ) ; 
0 ?. ( 0 * await ) ; 
0 ?. ( 0 ** 0 >> await ) ; 
0 ?. ( 0 , ... ! 0 > await ) ; 
0 ?. ( 0 , ... 0 + await ) ; 
0 ?. ( 0 , ... 0 . x ||= await ) . x ; 
0 ?. ( 0 , ... 0 >= await ) ; 
0 ?. ( 0 , ... 0 [ await ] ) ; 
0 ?. ( 0 , ... await ??= 0 ) ; 
0 ?. ( 0 , ... function ( ) { } ( ) [ `` [ 0 ] ??= await ] ??= 0 , ) ; 
0 ?. ( 0 , 0 & await ) ; 
0 ?. ( 0 , 0 . x ?? await ) ; 
0 ?. ( 0 , 0 ^ await ) ; 
0 ?. ( 0 , 0 | await ) ; 
0 ?. ( 0 , await ) ; 
0 ?. ( 0 , await ) ; class await { } 
0 ?. ( 0 , await ) ; function * await ( ) { } 
0 ?. ( 0 , await . x ) ; 
0 ?. ( 0 , await || 0 ) ; 
0 ?. ( 0 , void await ) ; 
0 ?. ( 0 . x = await ) ; 
0 ?. ( await !== 0 % 0 + 0 ) . x ; 
0 ?. ( await ) ; 
0 ?. ( await / 0 ) ; 
0 ?. ( await = 0 ) ; 
0 ?. ( await = async x => { } , x ) ; 
0 ?. ( await >>> 0 ) ; 
0 ?. ( await in 0 ) . x ; 
0 ?. ( function ( ) { } ( ) [ await ] ) . x ; 
0 ?. ( true . x = 0 , await ) ; 
0 ?. ( { [ Symbol . toPrimitive ] : await => { } } != 0 ) . x ; 
0 ?. [ - 0 < await ] ; 
0 ?. [ 0 + await ] ; 
0 ?. [ 0 , ! await ] ( ) ; 
0 ?. [ 0 , [ ] & await ] ( ) ; 
0 ?. [ 0 . x %= await ] ; 
0 ?. [ 0 <= await ] ; 
0 ?. [ 0 > await ] ; 
0 ?. [ await !== 0 ] . x ; 
0 ?. [ await & 0 . x ] ; 
0 ?. [ await ** 0 ] ; 
0 ?. [ await ++ ] . x ; 
0 ?. [ await , 0 ] ( ) ; 
0 ?. [ await . x ] ; 
0 ?. [ await >= 0 ] ; 
0 ?. [ await ? 0 : 0 ] . x ; 
0 ?. [ await ? 0 : 0 ] ; 
0 ?. [ await ?. x ] ; 
0 ?. [ await ?? 0 ] ; 
0 ?. [ await ] ; 
0 ?. [ await ] [ 0 ] ; 
0 ?. [ await ||= 0 ] ; 
0 ?. [ true ** ~ await `` ] . x ; 
0 ?. [ void await . x ] . x ; 
0 ?. [ void await ] [ 0 ] ; 
0 ?. x ( 0 , ... - await , ) ; 
0 ?. x ( 0 , ... -- await , ) ; 
0 ?. x ( 0 , ... 0 instanceof await , ) ; 
0 ?. x ( 0 , ... [ 0 ] [ 0 ] = await , ) ; 
0 ?. x ( 0 , ... await !== - 0 , ) ; 
0 ?. x ( 0 , ... typeof -- await , ) ; 
0 ?. x ( 0 , ... void await , ) ; 
0 ?. x ( 0 , 0 !== await , ) ; 
0 ?. x ( 0 , 0 % 0 === await , ) ; 
0 ?. x ( 0 , 0 + await , ) ; 
0 ?. x ( 0 , await > 0 , ) ; 
0 ?. x ( 0 , await >>> 0 , ) ; 
0 ?. x ( 0 , await in 0 , ) ; 
0 ?. x ( delete ++ await . x , ) ; 
0 ?. x [ -- await [ 0 ] || 0 ] ; class await { } 
0 ?. x [ 0 . x = await ] ; 
0 ?. x [ 0 . x ?? await ] ; 
0 ?. x [ 0 . x ||= await ] ; 
0 ?. x [ 0 ^ await ] ; 
0 ?. x [ 0 in await ] ; 
0 ?. x [ 0 instanceof await ] ; 
0 ?. x [ 0 || await ] ; 
0 ?. x [ [ await ] ] ; 
0 ?. x [ `` [ await ] ] ; 
0 ?. x [ await & 0 ] ; 
0 ?. x [ await << 0 ] ; 
0 ?. x [ await ? 0 : 0 ] ; 
0 ?. x [ await ?. x , 0 ] ; 
0 ?. x [ await ??= 0 ] ; 
0 ?. x [ await ] ; 
0 ?. x [ await ] [ 0 ] ; 
0 ?. x [ await `` ] ( ) ; 
0 ?. x [ await instanceof 0 ] ; 
0 ?. x [ await || x ] ; 
0 ?. x [ await ||= 0 ] ; 
0 ?. x [ { [ Symbol . toPrimitive ] : await => { } } < 0 ] ; 
0 ?. x [ { } , await ] ; 
0 ?. x [ ~ 0 && await ] ; 
0 [ 0 . x %= await ] ; 
0 [ 0 . x = 0 + typeof await ] ; 
0 [ 0 >>> await ] ; 
0 [ 0 ] %= 0 & new 0 ( 0 , ... new 0 ( 0 , ... `` , await , ... 0 ) , ) ; 
0 [ 0 ] %= await . x ( ) ?? 0 ; 
0 [ 0 ] %= this ? await : 0 ; 
0 [ 0 ] ??= 0 . x ||= await ; 
0 [ 0 ] ??= 0 < void await ; 
0 [ 0 ] ??= await `` instanceof x ; 
0 [ 0 ] ??= true && await ; class await { } 
0 [ 0 instanceof await -- < 0 ] %= 0 ; 
0 [ 0 || await ] ; 
0 [ 1 [ 0 ] ||= 0 > { [ Symbol . toPrimitive ] : await => class extends 0 { } } ] ; 
0 [ await & 0 ] ; 
0 [ await && 0 ] ; 
0 [ await ? 0 : 0 ] ; 
0 [ await ? 0 : 0 ] ??= 0 ; 
0 [ await ?. x ] ; 
0 [ await ] ** ! 0 >> 1n ; 
0 [ await ] ; 
0 [ await ^ 0 ] ; 
0 [ await ||= 0 ] ; 
0 [ function * ( ) { } ( ) . x ?? await ] -- >> 1n ; 
0 [ void await != ! 0 ] %= 0 ; 
0 [ { x = 0 [ 0 ] = await } = 0 ] ; 
0 [ { x = 0 [ 0 ] ||= await } = 0 ] ; 
0 [ { x = 0 ^ await } = 0 ] ; 
0 [ { x = [ await , , ] } = 0 ] ; 
0 [ { x = await & 1 } = 0 ] ; 
0 [ { x = await && 0 } = 0 ] ; 
0 [ { x = await . x &&= 0 } = 0 ] ; 
0 [ { x = await ?? 0 } = 0 ] ; 
0 [ { x = await ^ 0 } = 0 ] ; 
0 [ { x = null ?? await } = 0 ] ; 
0 [ { x } = { [ Symbol . toPrimitive ] : await => 0n } in new class { } ] ; 
0 [ { x } = { [ Symbol . toPrimitive ] : await => { } } in new class { } ] ; 
0 ^ + await ; 
0 ^ - await & 0 ; 
0 ^ 0 <= await ; 
0 ^ await && 0 ; 
0 ^ await ++ > 0 ; 
0 ^ class { } + await ; 
0 ^ void await ; 
0 ^ { [ Symbol . toPrimitive ] : await => 0 } << 1n >>> 0 ; 
0 ^ { } << { [ Symbol . toPrimitive ] : await => new 0 ( ) } ; 
0 ^ ~ -- await ; 
0 in await . x ; 
0 in await in 0 ; 
0 instanceof await != 0 ; 
0 instanceof await in 0 ; 
0 | `${ await }` ; 
0 | await % 1 ; 
0 | await & 0 ; 
0 | await ? 0 : 0 ; 
0 | await instanceof 0 >> { } ; 
0 | function ( ) { } ( ) [ - await ] ; 
0 | function ( ) { } ( ) [ await ] ; 
0 || ! await | 0 ; 
0 || 0 > await ( ) ; 
0 || 0 >>> await ; 
0 || 0 | async function ( [ ] ) { } ( ) [ await ] ; 
0 || 0 | await ; 
0 || await ; 
0 || await << 0 ; 
0 || await ?. x !== { } ; 
0 || typeof await && x ; 
0 || typeof await && { x } ; 
0 || { [ Symbol . toPrimitive ] : await => 0 } <= 0 ; 
0 || { [ Symbol . toPrimitive ] : await => x => 0 } <= 0 ; 
0 || { [ Symbol . toPrimitive ] : await => x } <= 0 ; 
1 * await -- ; 
1 ** + await ; 
1 ? await . x : 0 ; 
1n . x ?? await ?? 0 ; 
1n << ~ ~ await ; 
1n ?. x [ await ] . x ; 
; ( 0 & await ) ; 
; 0 | 0 >>> await ; 
Array . prototype . filter . call ( await => 0 , 0 ) ; 
Array . prototype . findIndex ( await => 0 , 0 ) ; 
Array . prototype . reduce . call ( { length : { [ Symbol . toPrimitive ] : await => x } } ) ;
Map ( [ await , , ] ) ; 
Map ( await ** 0 ) ; 
Map ( await ?? 0 ) ; 
Object . getOwnPropertyNames . call ( 0 , 0 === 0 ^ 0 || 0 ? await : 0 ) ; 
[ ! await ++ ] ; 
[ ! await `` == { } , , ] ; 
[ , ! 0 / { [ Symbol . toPrimitive ] : await => 0 } ] ; 
[ , ! 0 > await instanceof 0 ] ; 
[ , ++ await ] ; 
[ , ... await &&= 0 ] ; 
[ , ... await `` > 0 ] ; 
[ , ... { x = 0 | await , } = 0 ] ; 
[ , ... { x = await | 0 , } = 0 ] ; 
[ , ... ~ 0 > await ] ; class await { } 
[ , 0 !== await ] ; 
[ , 0 !== await ] ; function await ( ) { } 
[ , 0 == 0 !== await , 0 ] ; 
[ , 0 ? 0 : await ] ; 
[ , 0 || new `${ 0 }${ await }` . x ] ; 
[ , 1 ? await . x : 0 ] ; 
[ , [ await , , ] ] ; 
[ , ] = { [ Symbol . iterator ] : await => x } ;
[ , `${ 0 }` [ 0 ] &&= 0 . x ? 0 : await ] ; 
[ , `${ 0 }` [ 0 ] &&= 0 . x || await ] ; 
[ , `${ 0 }` [ 0 ] &&= null || await ] ; 
[ , `${ 0 }` [ 0 ] &&= typeof await ] ; 
[ , await %= 0 ] ; 
[ , await ++ ** ~ 0 * 1 ] ; 
[ , await > 0 instanceof 0 ] ; 
[ , await ? 0 : 0 ] ; 
[ , await ] ; 
[ , class x { } ** await ] ; 
[ , null ?? await ] ; 
[ , void 0 ? 0 : await ] ; 
[ , { [ Symbol . toPrimitive ] : await => 0 } >= 1 >= 0 ] ; 
[ , ~ 0 | await ] ; 
[ ... 0 ** await ] ; 
[ ... 0 - await ] ; 
[ ... 0 . x ?? await ] ; 
[ ... 0 . x ||= await ] ; 
[ ... [ 0 || await === 0 > 0 ** ~ 0 ] , ] ; 
[ ... `` . x ?? await ] ; 
[ ... await . x &&= 0 ] ; 
[ ... await . x = 0 ] ; 
[ ... await ? 0 : new 0 ] ; 
[ ... await ] ; 
[ ... void await != 0 >= 0 ] ; 
[ 0 , ( 0 ** await ) >= x ] ; 
[ 0 , ( 0 - await ) >= { } ] ; 
[ 0 , ( 0 >>> await ) ] ; 
[ 0 , ( await === 0 ) ] ; 
[ 0 , ( await ?. ( ) ) ] ; 
[ 0 , + 1 && await ] ; 
[ 0 , , 0 & await ++ ] ; 
[ 0 , , 0 + await ] ; 
[ 0 , , 0 . x %= await ( ) ] ; 
[ 0 , , 0 === await ] ; 
[ 0 , , 0 >= await -- ] ; 
[ 0 , , 0 >>> await ] ; 
[ 0 , , 0 in await ] ; 
[ 0 , , 1 && await ] ; 
[ 0 , , [ await , , ] ] ; 
[ 0 , , await -- ] ; 
[ 0 , , await <= 0 ] ; 
[ 0 , , await ?? 0 ] ; 
[ 0 , , await ??= 0 ] ; 
[ 0 , , await ] ; 
[ 0 , , await ] ; async function await ( ) { } 
[ 0 , , await ^ 0 ] ; 
[ 0 , , await instanceof 0 ] ; 
[ 0 , , await |= 0 ] ; 
[ 0 , , await || 0 ] ; 
[ 0 , , function * ( ) { } ( ) ( 0 , await ) ] ; 
[ 0 , , function * ( ) { } ( ) ( 0 , await ) ] ; function * await ( ) { } 
[ 0 , , this >> await ] ; 
[ 0 , , x !== await ] ; 
[ 0 , , x && await ] ; 
[ 0 , , { } = await ] ; 
[ 0 , , ~ await ] ; 
[ 0 , ... [ 0 ] & + await `` ?. [ 0 ] ?. x === 0 & 0 , ... 0 ] ; 
[ 0 , 0 !== 0 instanceof { [ Symbol . hasInstance ] : await => { } } , ] ; 
[ 0 , 0 ? 0 : await ] ; 
[ 0 , 0 [ 0 ] %= await ] ; 
[ 0 , 0 instanceof await , , ] ; 
[ 0 , 0 || await ] ; 
[ 0 , `${ await }` ] ; 
[ 0 , await !== 0 . x , ] ; 
[ 0 , await !== 0 == 0 ] ; 
[ 0 , await &&= 0 , , ] ; 
[ 0 , await ++ && 0 ] ; 
[ 0 , await ] ; 
[ 0 , await in + 0 , , ] ; 
[ 0 , ~ await ? 0 : 0 ] ; 
[ 0 . x %= `` [ 0 ] ??= await , ] ; 
[ 0 . x ?? await , 0 ] ; 
[ 0 . x ??= await , 0 ] ; 
[ 0 >>> ( await | 0 != 1 + 0 << 0 ) ] ; 
[ 0 ] [ await >>> 0 ** 1n ] *= 0 ; 
[ 0 ^ await in { x } ] ; 
[ 0 || { [ 0 in await ] : 0 , } > 0 == 0 >= 0 ] ; 
[ 1 !== await !== 0 ] ; 
[ 1 && await , , 0 ] ; 
[ 1 , ] [ 0 ] &&= await << 0 ; 
[ 1 , ] [ 0 ] &&= await >> 0 ; 
[ 1 ] [ 0 ] &&= 0 ^ await ; 
[ 1 ] [ 0 ] &&= await <= 0 ; 
[ [ ] === ! await ] ; 
[ [ ] [ await ||= 0 ] = 0 ] ; 
[ ] = { [ Symbol . iterator ] : await => x } ;
[ ] [ 0 ] ||= 0 [ ! 0 ] >>> await ; 
[ ] [ 0 ] ||= await in new 0 ; 
[ ] [ await &&= 0 ? 0 : 0 ] -- !== 0 ; 
[ `${ await }` ] ; 
[ await ++ ** 0 ] ; 
[ await , , ] !== 0 ; 
[ await , ... 0 , , 0 ] ; 
[ await , ] && 0 ; 
[ await , ] / 0 ; 
[ await -- , , ] ; 
[ await ? 0 : 0 ] ; 
[ await ?. x , , 0 , ] ; 
[ await ?. x || x ] ; 
[ await ] - 0 ; 
[ await ] ; 
[ await instanceof 0 < 0 , 0 ] ; 
[ await instanceof 0 ^ 0 ] ; 
[ await ||= 0 , ... '' ] ; 
[ delete await -- ] ; 
[ function ( ) { } ( ) [ await ] ?. x ] ; 
[ new 0 ( await -- ) , ] ; var x ; 
[ this . x ||= await ?? 0 , 0 ] ; 
[ this . x ||= await ] ; 
[ void function ( ) { } ( ) [ await ] ] ; 
[ { [ await `` ] : x => 0 } ] [ 0 ] %= 0 ; 
[ { [ await `` ] : x => 0 } ] [ 0 ] %= 0 ; class await { } 
[ { x = await } = 0 ] ; 
`${ '' || await }` ; 
`${ ++ await }` ; 
`${ 0 != 0 == await ?. x }` ; 
`${ 0 === ( [ ] [ { [ Symbol . toPrimitive ] : x => { } } ] = await ) }` ; 
`${ 0 instanceof ! await }` ; 
`${ 0 }${ + ! await }` ; 
`${ 0 }${ + 0 }${ await || 0 }` ; 
`${ 0 }${ - await }` ; 
`${ 0 }${ 0 != await instanceof 0 }${ 0 }` ; function await ( ) { } 
`${ 0 }${ 0 !== await }` ; 
`${ 0 }${ 0 % await !== 0 }` ; 
`${ 0 }${ 0 * await ++ }` ; 
`${ 0 }${ 0 + '' }${ [ ++ await ** 0 , , ] }` ; 
`${ 0 }${ 0 , await }` ; 
`${ 0 }${ 0 . x ??= await }` ; 
`${ 0 }${ 0 === 0 ( await , ) }` ; 
`${ 0 }${ 0 ^ await }` ; 
`${ 0 }${ 0 in await }` ; 
`${ 0 }${ 0 }${ '' . x ||= await }` ; 
`${ 0 }${ 0 }${ + await }` ; 
`${ 0 }${ 0 }${ - ~ await }` ; 
`${ 0 }${ 0 }${ 0 % 0 % await }` ; 
`${ 0 }${ 0 }${ 0 . x ( await , ) !== 0 == null }` ; 
`${ 0 }${ 0 }${ 0 <= await }` ; 
`${ 0 }${ 0 }${ 0 == await }` ; 
`${ 0 }${ 0 }${ 0 >= { [ Symbol . toPrimitive ] : await => { x } } }` ; 
`${ 0 }${ 0 }${ 0 >>> await }${ 0 }` ; 
`${ 0 }${ 0 }${ 0 ^ await }` ; 
`${ 0 }${ 0 }${ 0 in await }${ 0 }` ; 
`${ 0 }${ 0 }${ 0 in await }` ; 
`${ 0 }${ 0 }${ 0 instanceof await }` ; 
`${ 0 }${ 0 }${ async function ( ) { } ( ) [ await ] }` ; 
`${ 0 }${ 0 }${ await %= 0 }` ; 
`${ 0 }${ 0 }${ await ( ) }` ; 
`${ 0 }${ 0 }${ await == ! 1 }` ; 
`${ 0 }${ 0 }${ await === new 0 }${ 0 }` ; 
`${ 0 }${ 0 }${ await ?? 0 }` ; 
`${ 0 }${ 0 }${ await ^ 0 }` ; 
`${ 0 }${ 0 }${ await in 0 }${ 0 }` ; 
`${ 0 }${ 0 }${ await in 0 }` ; 
`${ 0 }${ 0 }${ await }` ; 
`${ 0 }${ 0 }${ typeof await }` ; 
`${ 0 }${ 1 < await }` ; 
`${ 0 }${ [ 1 ] [ 0 ] &&= await }` ; 
`${ 0 }${ [ await ] }` ; 
`${ 0 }${ `${ await }` }` ; 
`${ 0 }${ await !== x ( ) }` ; 
`${ 0 }${ await && 0 }` ; 
`${ 0 }${ await ** 0 }` ; 
`${ 0 }${ await ++ }` ; 
`${ 0 }${ await . x }` ; 
`${ 0 }${ await < 0 }` ; 
`${ 0 }${ await ??= 0 }` ; 
`${ 0 }${ await ||= 0 }${ 0 ? 0 : 0 }` ; 
`${ 0 }${ await }` ; 
`${ 0 }${ { } = await }` ; 
`${ `${ await }` ? 0 : 0 }` ; 
`${ async function * x ( ) { } & await }` ; 
`${ await & 0 }` ; 
`${ await &&= 0 }${ 1 }` ; 
`${ await << 0 }` ; 
`${ await ?. x }` ; 
`${ await ?? 0 }` ; 
`${ await }` != 0 ; 
`${ await }` && 0 ; 
`${ await }` ; 
`${ await }` ; class await { } 
`${ await }` >> 0 ; 
`${ await }` || - 0 ; 
`${ { } <= `${ await }` }` ; 
`${ ~ await }` ; 
`` ( 0 , await ) ; 
`` . x ||= await , 0 ; 
`` == await >>> 0 ; 
async function * await ( ) { } switch ( await ) { case x = 0 : default : } 
async function * await ( ) { } var { 0 : [ ] = await . x } = 0 ; 
async function * await ( ) { } while ( await == { } ) ; 
async function * await ( ... x ) { } new Map ( 0 , await ? 0 : 0 . x >>= ~ 0 ) ; 
async function await ( ) { } 0 > 0 in await ; 
async function await ( ) { } `${ 0 }${ 0 }${ 0 in await }${ 0 }` ; 
async function await ( ) { } for ( var x of ~ ! await ) ; 
async function await ( ) { } throw await &&= 0 ; 
await != 0 ; 
await !== 0 ; 
await !== 0 ^ 0 ; 
await !== 0 ^ 0 ; class await { } 
await %= 0 ; 
await & 0 ; 
await & 0 ; class await { } 
await && 0 ; 
await &&= 0 ; 
await &&= 0 ; class await { } 
await &&= 0 ; function await ( ) { } 
await &= 0 ; 
await ( ) ; 
await ( ) == 0 ; 
await ( ) >= 0 ; 
await ** 0 , 0 ; class await { } 
await ** 1 ; 
await ** 1 ; class await { } 
await ++ ; 
await ++ >> 0 ; 
await , 0 ; 
await -- ** 0 ?? 0 ; 
await -- + 0 ; 
await -- ; 
await . x !== 0 ; 
await . x &&= 0 ; 
await . x -- < 0 ; 
await . x -- ? 0 : 0 ; 
await . x ; 
await . x ; class await { } 
await . x < 1 ; 
await . x in [ ] ; 
await : ; 
await : break await ; 
await : x : ; 
await : x : break await ; 
await : x : break x ; 
await : x : throw 0 ; 
await ; 
await ; var await ; 
await << 0 ^ 0 ; 
await << 0 in [ ] ; 
await << x ; 
await <= 0n . x < [ ] ; 
await = 0 . x ??= x ; 
await = 0 ; 
await == 0 ; 
await == 0 < x & 0 ; 
await === 0 === 0 ; 
await === 0 ^ 0 ; 
await > 0 , 0 ; 
await > 0 . x ? 0 : 0 ; 
await > 0 ; 
await > 0 < 0 ; 
await >= 0 ; 
await >= 1 ; 
await >> 0 ; 
await >> 0 ; class await { } 
await >>> 0 != 0 ; 
await >>> 0 && 0 ; 
await >>> 0 - 0 ; class await { } 
await >>> 0 ; 
await >>> 0 <= 0 ; 
await ? 0 : 0 ; 
await ? 0 : 0 ; function await ( ) { } 
await ?. x + 0 - 0 ; 
await ?. x . x << 0n ; 
await ?. x ; 
await ?. x ; async function await ( ) { } 
await ?. x > 0 ; 
await ?. x >> 0 ; 
await ?. x >>> 0 <= 0 ; 
await ?. x in 0 ?? 0 ; 
await ?? 0 , `` . x = 0 ; 
await ?? 0 ; 
await ??= 0 ; 
await ^ 0 ; 
await ^ 0 ^ 0 ; 
await `` != 0 && 0 ; 
await `` + ! 0 in `` ; 
await `` ; 
await `` [ 0 ] >= 0 ; 
await `` in [ ] ; ; 
await in 0 ; 
await in 0 < 0 <= 0 >= 0 ; 
await in 0 >= '' ; 
await instanceof 0 ; 
await instanceof 0 ? 0 : 0 ; 
await | 0 ; 
await | 0 ^ 0 & 0 instanceof 0 >= 0 ? 0 : 0 ; 
await ||= 0 ; 
class await { static 0 ( ) { } } while ( await = 0 ) ; 
class await { } ! { ... await } ; 
class await { } ( await ) ; 
class await { } - 0 !== await ; 
class await { } - { ... await } ; 
class await { } 0 ( ... await ) ; 
class await { } 0 ( 0 , ... await ) ; 
class await { } 0 . x = 0 === await != 0 ; 
class await { } 0 / await ?. x ; 
class await { } [ 0 , , await ] ; 
class await { } [ await ] ; 
class await { } `${ 0 }${ 0 != await instanceof 0 }${ 0 }` ; 
class await { } await !== 0 ^ 0 ; 
class await { } await ? 0 : 0 ; 
class await { } await || '' > 0 ; 
class await { } await ||= 0 ; 
class await { } for ( await [ 0 ] in await , 0 ) ; 
class await { } for ( await [ 0 ] in await , [ 0 ] ) ; 
class await { } for ( let [ [ ] = await , x , , ] of [ `` ] ) ; 
class await { } for ( let [ ] = await ; ; ) ; 
class await { } for ( let x ; 0 [ 0 ] [ 0 ] instanceof await ; 0 ) ; 
class await { } for ( let x ; 0 instanceof await ; 0 ) ; 
class await { } for ( let x ; await = 0 ; 0 ) ; 
class await { } for ( let x ; await instanceof await ; 0 ) ; 
class await { } for ( var x ; 0 . x ??= await ; 0 ) { } 
class await { } let [ ] = [ 0 , 0 , ] . x = 0 . x ||= await ; 
class await { } let [ ] = [ 0 , 0 , ] . x = [ '' , , ] [ 0 ] ||= await ; 
class await { } let [ ] = [ 0 , 0 , ] . x = [ 0 ** 0 , , ] [ 0 ] ||= await ; 
class await { } let [ ] = [ 0 , 0 , ] . x = [ 0 , , ] [ 0 ** 0 ] ||= await ; 
class await { } let [ ] = [ 0 , 0 , ] . x = [ ] [ 0 ] ||= await ; 
class await { } let [ ] = [ 0 , 0 , ] . x = [ true , , ] [ 0 ] ||= await ; 
class await { } let [ x = await ] = '' ; 
class await { } new Map ( 0 , await ? 0 . x : 0 ?? 0 ) ; 
class await { } new Map ( 0 , await ? 1n . x : 0 . x >>= ~ 0 ) ; 
class await { } new Map ( 0 , await ? { } . x : 0 . x >>= ~ 0 ) ; 
class await { } var x = 0 [ 0 . x %= await = 0 ] %= 0 ; 
class await { } var x = await ; 
class await { } var x = await || 0 ; 
class await { } x : switch ( await ) { } 
class await { } { ; var x = await ; } 
class x extends 0 [ await ] { ; } 
class x extends 0 [ await ] { } 
class x extends `${ await }` { ; } 
class x extends `${ await }` { } 
class x extends class x extends { 0 : await , } { } { ; } 
class x extends function ( ) { } ( ) [ await ] { ; } 
class x extends function * ( ) { } ( ) [ await ] { ; } 
class x extends null [ await ] { ; } 
class x extends { ... await , } { } 
class x { ; } if ( `${ await += 0 }` ) ; else ; 
class x { [ - await ] ; } 
class x { [ 0 . x &= await ] ; } 
class x { [ 0 . x = await ] ; } 
class x { [ 0 . x ||= await ] ; } 
class x { [ 0 instanceof await ] ; } 
class x { [ `${ 0 }` [ 0 ] &&= await ] ; } 
class x { [ `` == await ] = 0 ; } 
class x { [ await && 0 in 0 - 0 - 0 ] ; } 
class x { [ await &&= 0 ] ; } 
class x { [ await ( ) ] ; } 
class x { [ await ( ) ] = 0 ; } 
class x { [ await ++ ] ; } 
class x { [ await = 0 ] ; } 
class x { [ await ?. x ] ; } 
class x { [ await ] ; } 
class x { [ await ] = 0 ; } 
class x { [ await instanceof { } ] ; } 
class x { [ function ( ) { } ( ) [ await ] ||= 0 ] ; } 
class x { [ null >>> await ] ; } 
class x { [ typeof await ] ; } 
class x { [ void await ] ; } 
class x { [ { x } instanceof await ] ; } 
class x { [ ~ await ] ; } 
class x { set [ #x in await ?? 0 ] ( x ) { } get #x ( ) { } }
class x { set [ await . #x ] ( x ) { } get #x ( ) { } }
class x { static [ typeof await ] = 0 ; } 
class x { static set [ await ] ( x ) { } } 
class x { } ( await ?. x ?. x ) ; 
class x { } 0 ?. x [ x &&= await ] ; 
class x { } [ { x , } ?. x ?. x [ await ++ ] ] ; 
class x { } [ { x } ?. x ?. [ await ] ] ; 
class x { } x &&= + await ; 
class x { } x &&= - await ; 
class x { } x &&= 0 != await ; 
class x { } x &&= 0 & await ; 
class x { } x &&= 0 + await ; 
class x { } x &&= 0 / await ; 
class x { } x &&= 0 < await ; 
class x { } x &&= 0 <= await ; 
class x { } x &&= 0 > await ; 
class x { } x &&= 0 >= await ; 
class x { } x &&= 0 >> await ; 
class x { } x &&= 0 >>> await ; 
class x { } x &&= 0 in await ; 
class x { } x &&= 0 | await ; 
class x { } x &&= 0 || await ; 
class x { } x &&= 1 << await ; 
class x { } x &&= [ ] - await ; 
class x { } x &&= `${ await }` ; 
class x { } x &&= await != 0 ; 
class x { } x &&= await & 0 ; 
class x { } x &&= await ** ~ 0 ; 
class x { } x &&= await < 0 ; 
class x { } x &&= await << 0 ; 
class x { } x &&= await == 0 ; 
class x { } x &&= await >= 0 ( ) ; 
class x { } x &&= await >> 0 . x ; 
class x { } x &&= await >>> 1 ; 
class x { } x &&= await ? 0 : ~ 0 ; 
class x { } x &&= await ?. x ?. x ; 
class x { } x &&= await `` ; 
class x { } x &&= await in { } ; 
class x { } x &&= await | new 0 ; 
class x { } x &&= await || 0 ; 
class x { } x &&= { raw : '' } && await ; 
class x { } x &&= { } == await ; 
delete [ await , , ] ; 
delete await ?. x ; 
do ; while ( ! ~ { [ Symbol . toPrimitive ] : await => 0 } ) ; 
do ; while ( 0 + await ) ; 
do ; while ( 0 , 0 in await > 0 ) ; 
do ; while ( 0 , await ) ; 
do ; while ( 0 << await ) ; 
do ; while ( 0 ? 0 : await ) ; 
do ; while ( 0 instanceof await ) ; 
do ; while ( await ) ; 
do ; while ( await ) ; class await { } 
do ; while ( await -- ** 0 instanceof { } ) ; 
do ; while ( await . x ) ; 
do ; while ( await ?? 0 ) ; 
do ; while ( await `` ) ; 
do ; while ( void await ) ; 
do await : for ( let x ; 0 ; 0 , 0 , 0 , 0 ) ; while ( ~ ~ 0 ) ; 
do for ( let x ; ; 0 . x %= `${ 0 ? 0 : await }` . x ) ; while ( 0 ) ; 
do for ( let x ; ; 0 . x = await ) ; while ( 0 ) ; 
do for ( let x ; ; 0 . x ??= await ) ; while ( 0 ) ; 
do for ( let x ; ; 0 . x ??= await `` ) ; while ( 0 ) ; 
do for ( let x ; ; 0 [ 0 ] ??= await -- ) ; while ( 0 ) ; 
do for ( let x ; ; 0 [ 0 ] ||= 0 ) if ( await ) ; while ( 0 ) ; 
do for ( let x ; ; 0 in await ) ; while ( 0 ) ; 
do for ( let x ; ; 0 instanceof await ) ; while ( 0 ) ; 
do for ( let x ; ; await !== 0 in 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await == 0 in 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await === 0 in 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await ? 0 : 0 ( ) [ 0 ] ||= 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await ^ 0 instanceof 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await in 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await instanceof 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await | 0 in 0 ) ; while ( 0 ) ; 
do for ( let x ; ; await ||= 0 ) ; while ( 0 ) ; 
do for ( var x ; ; 0 ( ) . x = 0 ) if ( await ) ; else ; while ( x => 0 ) ; 
do for ( var x ; ; 0 , ++ await . x ) ; while ( x => 0 ) ; 
do for ( var x ; ; 0 , 0 . x = ++ await ) ; while ( x => 0 ) ; 
do for ( var x ; ; 0 . x /= await ) ; while ( 0 ) ; 
do for ( var x ; ; 0 . x = await ) ; while ( 0 ) ; 
do for ( var x ; ; [ ] = await ) ; while ( 0 ) ; 
do for ( var x ; ; await ) ; while ( 0 ) ; 
do for ( var x ; ; await , 0 . x = 0 ) ; while ( 0 | 0 ) ; 
do for ( var x ; ; await = 0 ) ; while ( 0 ) ; 
do for ( var x ; ; await = 0 ) for ( let x in 0 ) ; while ( 0 ) ; 
do for ( var x ; ; await = class x { } ) ; while ( 0 ) ; 
do for ( var x ; ; await = x => 0 ) ; while ( 0 ) ; 
do for ( var x ; ; { } . x /= await ) ; while ( 0 ) ; 
do if ( 0 === await ) ; while ( 0 ) ; 
do if ( 0 in await ) ; else ; while ( 0 ) ; 
do if ( await ?. x ) ; while ( 0 ) ; 
do if ( await in this ) ; else ; while ( 0 ) ; 
do try { ; await ; } catch { } while ( 0 ) ; 
for ( ! 0 ? await : 0 ; ; ) break ; 
for ( + await ; 0 ; ) ; 
for ( + await ; ; ) break ; 
for ( + x ; await ; 0 ) ; 
for ( 0 !== await ; 0 ; 0 ) ; 
for ( 0 !== await ; ; ) throw 0 ; 
for ( 0 !== await | 0 ; ; 0 ) throw 0 ; 
for ( 0 ( ) . x of await ?. x . x [ 0 ] . x ) ; 
for ( 0 . x = await ; ; ) ; 
for ( 0 . x in -- await ) ; 
for ( 0 ; ++ await ; 0 ) ; 
for ( 0 ; - await ; ) ; 
for ( 0 ; 0 , await ; 0 ) ; 
for ( 0 ; 0 - await ; 0 ) ; 
for ( 0 ; 0 . x ??= await ; ) ; 
for ( 0 ; 0 >> await ; 0 ) ; 
for ( 0 ; 1n ? await : 0 ; ) ; 
for ( 0 ; ; ) throw await ; 
for ( 0 ; await && 0 ; ) ; 
for ( 0 ; await , 0 ; 0 ) ; 
for ( 0 ; await ; ) ; 
for ( 0 ; await in [ ] ; 0 ) ; 
for ( 0 ; await ||= 0 ; 0 ) ; 
for ( 0 ; function ( ) { } ( ) [ await ] ; ) ; 
for ( 0 ; typeof await !== 0 << 0 === 0 ; 0 ) ; 
for ( 0 ; void await ; 0 ) ; 
for ( 0 ; x !== await ; 0 ) ; 
for ( 0 ; x !== await ; 0 ) ; let x ; 
for ( 0 ; x ?. x [ await ] ; 0 ) ; 
for ( 0 ; { } ? await : 0 ; 0 ) ; 
for ( 0 == await ; 0 ; ) ; 
for ( 0 === await ; 0 ; 0 ) ; 
for ( 0 [ 0 ] in 0 , await << 0 ) ; 
for ( 0 [ 0 ] in 0 < 1 ? await : 0 ) ; 
for ( 0 [ 0 ] in 0 >= ( await >>> 0 ) ) ; 
for ( 0 [ await ] ; ; ) ; 
for ( 0 ^ await ; ; ) break ; 
for ( 0 instanceof await ; 0 ; ) ; 
for ( 0 instanceof await ; ; ) ; class await { } 
for ( 0 | 0 ; 1 ; ) throw await ; 
for ( 1 ^ 0 && await ; ; ) throw 0 ; 
for ( ; ! 0 . x ; 0 ) if ( await , x => 0 ) throw 0 ; 
for ( ; ! 0 ; 0 ) if ( await `` ) ; else break ; 
for ( ; ! await ; 0 ) break ; 
for ( ; + await ; 0 ) ; 
for ( ; ++ await . x ; 0 ) ; 
for ( ; - + await != [ ] ; 0 ) ; 
for ( ; - { [ Symbol . toPrimitive ] : await => 0 } ; 0 ) ; 
for ( ; - { [ Symbol . toPrimitive ] : await => { } } ; 0 ) ; 
for ( ; 0 != await ; 0 ) ; 
for ( ; 0 ( ) ; 0 ) await : for ( let x ; ; ) ; 
for ( ; 0 . x = await ; ) ; 
for ( ; 0 . x ?? await ; 0 ) 0 ; 
for ( ; 0 << await ; ) ; 
for ( ; 0 >= await ; 0 ) ; 
for ( ; 0 >>> await ; 0 ) ; 
for ( ; 0 [ await &&= 0 ] ??= new 0 ; ) ; 
for ( ; 0 [ await ] ; 0 ) ; 
for ( ; 0 ^ await ; 0 ) ; 
for ( ; 0 in await ; ) ; 
for ( ; 0 instanceof await ; ) ; 
for ( ; 0 instanceof await ; 0 ) ; 
for ( ; 0 || await -- ; ) ; 
for ( ; ; ) throw await ; 
for ( ; ; ) var [ ] = await , x ; [ 0 , 0 === 0 ] ; 
for ( ; ; 0 ) throw await ; 
for ( ; ; 0 ? 0 : await ??= 0 ) ; 
for ( ; ; await ) ; 
for ( ; ; await ) var x ; 
for ( ; [ ] = await ; 0 ) ; 
for ( ; [ await , ] ; 0 ) { } 
for ( ; `${ await }` ; ) var [ x ] = 0 ; 
for ( ; `${ await }` ; 0 ) ; 
for ( ; await != 0 ; 0 ) ; 
for ( ; await !== 0 in 0 ; 0 ) ; 
for ( ; await && 0 ; ) ; 
for ( ; await && 0 ; 0 ) ; 
for ( ; await ( ) ; 0 ) ; 
for ( ; await ++ ; 0 ) ; 
for ( ; await . x ; 0 ) ; 
for ( ; await . x ||= 0 ; 0 ) ; 
for ( ; await ; ) ; 
for ( ; await ; ) ; class await { } 
for ( ; await ; ) var await = 0 ; 
for ( ; await ; 0 ) ; 
for ( ; await ; 0 ) ; class await { }
for ( ; await ; 0 ) for ( let x ; 0 ; 0 ) ; 
for ( ; await = 0 . x ; 0 ) ; 
for ( ; await = 0 . x ; 0 ) ; async function await ( ) { } 
for ( ; await ? 0 : 0 ; 0 ) ; 
for ( ; await ^ 0 ; 0 ) ; 
for ( ; await instanceof 0 ; ) await : for ( let { x } in 0 ) ; 
for ( ; await instanceof 0 ; 0 ) ; 
for ( ; function ( ) { } ( ) [ await ] ??= 0 ; ) ; 
for ( ; null == await ; ) ; 
for ( ; true . x ?? await ; 0 ) { } 
for ( ; void await ; ) ; 
for ( ; { } = await ; 0 ) ; 
for ( ; ~ await ; 0 ) break ; 
for ( ; ~ ~ await ++ ; ) ; 
for ( [ ] [ 0 ] in 0 , `${ 0 }` && await ) ; 
for ( [ ] in 0 , 0 !== await ) ; 
for ( [ ] in [ 0 ] ) if ( await ) ; else ; 
for ( [ ] of [ `` ] ) try { ; await ; } catch { } finally { } 
for ( [ true ] [ 0 ] &&= await ; ; ) break ; 
for ( `${ await }` ; ; ) break ; 
for ( async function * ( ) { } ( ) [ await ] ; ; 0 ) break ; 
for ( await != '' ; ; ) break ; 
for ( await & 0 ; ; 0 ) break ; 
for ( await && 0 . x ; ; 0 ) throw 0 ; 
for ( await ++ ; 1 ; 0 ) ; 
for ( await , 0 ; 0 ; ) ; 
for ( await -- >= 0 ; 0 ; 0 ) ; 
for ( await . x ; ; 0 ) throw 0 ; 
for ( await ; 0 ; ) ; 
for ( await ; 0 ; ) ; class await { } 
for ( await ; 0 ; 0 ) ; 
for ( await ; ; ) ; 
for ( await ; ; ) for ( var x ; ; ) ; 
for ( await ; ; ) var x , x ; 
for ( await ; ; 0 ) ; 
for ( await ; ; 0 ) break ; 
for ( await ; ; 0 ) var x ; 
for ( await ; ; 0 ) while ( 0 ) ; 
for ( await < 0 ; ; ) ; 
for ( await = 0 ; ; ) break ; 
for ( await == 0 ; 0 ; 0 ) ; 
for ( await == x ; ; ) ; 
for ( await === new { } ; ; ) ; 
for ( await >= 0 ; ; 0 ) break ; 
for ( await >> 0 ; ; 0 ) break ; 
for ( await >>> true ; 0 ; ) ; 
for ( await ?. x ; ; 0 ) break ; 
for ( await ??= 0 ; ; 0 ) ; 
for ( await [ 0 ] in 0 <= '' . x << 0 - 0 , { get : '' } ) ; 
for ( await [ 0 ] in 0 <= 0 << 0 - null . x ( ) , { get : '' } ) ; 
for ( await [ 0 ] in 0 <= 0 << 0 - true . x ( ) , /a/ ) ; 
for ( await [ 0 ] in 0 <= 1n . x << 0 - 0 , { get : '' } ) ; 
for ( await [ 0 ] in 0 <= this . x << 0 - 0 , { get : '' } ) ; 
for ( await ^ 0 ; 0 ; ) ; 
for ( await ^ 0 ; ; 0 ) break ; 
for ( await ^= 0 ; 0 ; ) ; 
for ( await `` !== 0 ; ; ) break ; 
for ( await `` ; 0 ; ) ; 
for ( await in 0 * - 0 ) ; 
for ( await in x , x ) ; 
for ( await instanceof 0 ?. x ; ; 0 ) throw 0 ; 
for ( await instanceof new await ( ) ; ; ) ; function await ( ) { } 
for ( await ||= 0 ; 1 ; ) ; 
for ( function ( ) { } ( ) [ 0 instanceof { [ Symbol . hasInstance ] : await => new 0 } ] of [ 0 ] ) ; 
for ( function ( ) { } ( ) [ 0 instanceof { [ Symbol . hasInstance ] : await => { } } ] of [ 0 ] ) ; 
for ( function * ( ) { } ( ) . x ??= await ; 0 ; 0 ) ; 
for ( function * ( ) { } ( ) [ 0 . x = await ] of [ 0 ] ) ; 
for ( let [ [ ] = await , x , , ] of [ `` ] ) ; async function await ( ) { } 
for ( let [ ] = await ++ ; ; 0 ) { } x : ; 
for ( let [ ] in await ) ; 
for ( let [ ] of await ) ; 
for ( let [ x = 0 [ await ] ] of [ `` ] ) ; 
for ( let [ x ] of [ `` , ] ) await ; 
for ( let await ; await ; 0 ) ; 
for ( let await in await ) ; 
for ( let await of await ) ; var x ; 
for ( let x ; ! ! await ; ) ; 
for ( let x ; ! 0 < await ; ) ; 
for ( let x ; ! 0 <= await ; ) ; 
for ( let x ; ! 0 == await ; ) ; 
for ( let x ; ! await ; ) ; 
for ( let x ; '' >> await ; ) ; 
for ( let x ; '' ? 0 : await ; ) ; 
for ( let x ; '' [ await ] ; ) ; 
for ( let x ; + await ; ) ; 
for ( let x ; + await ; 0 ) ; 
for ( let x ; ++ await . x ; ) ; 
for ( let x ; - await ; ) ; 
for ( let x ; - await ; 0 ) ; 
for ( let x ; - await ; 0 ) ; class await { } 
for ( let x ; -- await . x in 0 ; 0 ) ; 
for ( let x ; -- await in 0 ; 0 ) ; 
for ( let x ; -- function * ( ) { } ( ) [ await ] ; 0 ) ; 
for ( let x ; -- x in await ; 0 ) ; 
for ( let x ; 0 != await ; ) ; 
for ( let x ; 0 != await ; ) ; class await { } 
for ( let x ; 0 != await ; 0 ) ; 
for ( let x ; 0 !== await ; ) ; 
for ( let x ; 0 !== await ; 0 ) ; 
for ( let x ; 0 & await ; ) ; 
for ( let x ; 0 & await ; 0 ) ; 
for ( let x ; 0 + await ; ) ; 
for ( let x ; 0 + await ; 0 ) ; 
for ( let x ; 0 , 0 [ await ] ; ) ; 
for ( let x ; 0 , await ; ) ; 
for ( let x ; 0 - await ; ) ; 
for ( let x ; 0 - await ; 0 ) ; 
for ( let x ; 0 . x %= await ; ) ; 
for ( let x ; 0 . x = await ; 0 ) ; 
for ( let x ; 0 . x ??= await ; ) ; 
for ( let x ; 0 . x |= await ; 0 ) ; 
for ( let x ; 0 / await ; ) ; 
for ( let x ; 0 < await ; 0 ) ; 
for ( let x ; 0 << await ; ) ; 
for ( let x ; 0 << await ; 0 ) ; 
for ( let x ; 0 <= 0 <= await ; ) ; 
for ( let x ; 0 <= await % 0 ; ) ; 
for ( let x ; 0 <= await ; 0 ) ; 
for ( let x ; 0 == await ; 0 ) ; 
for ( let x ; 0 === await ; 0 ) ; 
for ( let x ; 0 > 0 === await ; ) ; 
for ( let x ; 0 > await ; ) ; 
for ( let x ; 0 > await ; 0 ) ; 
for ( let x ; 0 >= await ; ) ; 
for ( let x ; 0 >= await ; 0 ) ; 
for ( let x ; 0 >> await ; 0 ) ; 
for ( let x ; 0 >>> await ; ) ; 
for ( let x ; 0 >>> await ; 0 ) ; 
for ( let x ; 0 ? 0 : await ; ) ; 
for ( let x ; 0 ? 0 : await ; 0 ) ; 
for ( let x ; 0 ?. x !== await ; ) ; 
for ( let x ; 0 [ 0 ] ??= await ; 0 ) ; 
for ( let x ; 0 [ await ] ; ) ; 
for ( let x ; 0 [ await ] ; 0 ) ; 
for ( let x ; 0 ^ await ; ) ; 
for ( let x ; 0 instanceof await ; ) ; 
for ( let x ; 0 instanceof await ; 0 ) ; 
for ( let x ; 0 instanceof await > 0 ; 0 ) ; 
for ( let x ; 0 | await ; ) ; 
for ( let x ; 0 | await ; 0 ) ; 
for ( let x ; 0 || await ; ) ; 
for ( let x ; 0 || await ; 0 ) ; 
for ( let x ; 0n ? 0 : await ; ) ; 
for ( let x ; 1 && await ; ) ; 
for ( let x ; 1 ; ) throw await ; 
for ( let x ; 1 < await ; ) ; 
for ( let x ; 1 <= await ; 0 ) ; 
for ( let x ; 1 ? 0 : await ; ) ; 
for ( let x ; 1n ; 0 ) throw await ; 
for ( let x ; 1n <= 0 === await ; 0 ) ; 
for ( let x ; ; ) if ( await ) ; else break ; 
for ( let x ; ; ) if ( await . x ) ; 
for ( let x ; ; ) throw await ; 
for ( let x ; ; ) throw typeof 0 && await ; 
for ( let x ; ; ) var [ ] = await -- ; 
for ( let x ; ; ) var [ ] = function ( ) { } ( ) [ - await ] ; 
for ( let x ; ; 0 ) for ( let x of await ) ; 
for ( let x ; ; 0 ) throw await ; 
for ( let x ; ; 0 ) var [ ] = await ( ) ; 
for ( let x ; ; 0 . x %= await ) ; 
for ( let x ; ; 0 . x ??= await ) ; 
for ( let x ; ; 0 . x ||= await ) ; 
for ( let x ; ; [ ] = 0 ) await ; 
for ( let x ; ; [ ] = await ) ; 
for ( let x ; ; await %= 0 ) ; 
for ( let x ; ; await , 0 ( ) . x ||= 0 ) ; 
for ( let x ; ; await . x %= 0 ) ; 
for ( let x ; ; await . x ||= 0 ) ; 
for ( let x ; ; await = 0 ) ; 
for ( let x ; ; await = 0 ) ; let await ; 
for ( let x ; ; await = 0 ) for ( ; 0 ; ) ; 
for ( let x ; ; await = await ) ; let await ; 
for ( let x ; ; await = class x { } ) ; 
for ( let x ; ; await = new 0 ) ; 
for ( let x ; ; await = x => 0 ) ; 
for ( let x ; ; await ??= 0 ) ; 
for ( let x ; ; function ( ) { } . x ??= await ) ; 
for ( let x ; ; x => 0 ) if ( await ) ; else ; 
for ( let x ; ; x => 0 ) switch ( await ) { } 
for ( let x ; [ ... -- await , , ] ; ) ; 
for ( let x ; [ ... -- await . x , , ] ; ) ; 
for ( let x ; [ ... await ++ , ] ; 0 ) ; 
for ( let x ; [ 1 ] [ 0 ] &&= await ; 0 ) ; 
for ( let x ; [ ] . x ||= await ; ) ; 
for ( let x ; [ ] >> await ; 0 ) ; 
for ( let x ; `${ await }` ; ) throw 0 ; 
for ( let x ; `${ await }` ; 0 ) 0 ; 
for ( let x ; `${ await }` ; 0 ) throw 0 ; 
for ( let x ; `` ?. x , await ; ) ; 
for ( let x ; await != '' ; ) ; 
for ( let x ; await != 0 ; 0 ) ; 
for ( let x ; await !== 0 ; ) ; 
for ( let x ; await !== 0 ; 0 ) ; 
for ( let x ; await & 0 ; ) ; 
for ( let x ; await & 0 ; 0 ) ; 
for ( let x ; await && 0 ; ) ; 
for ( let x ; await && 0 ; 0 ) ; 
for ( let x ; await ( ) ; ) ; 
for ( let x ; await ( ) ; 0 ) ; 
for ( let x ; await * 1 ; 0 ) ; 
for ( let x ; await ** ! 0 ; ) ; 
for ( let x ; await ** ! 0 ; 0 ) ; 
for ( let x ; await *= 0 ; 0 ) ; 
for ( let x ; await *= 0 ; 0 ) ; class await { } 
for ( let x ; await ++ ; ) ; 
for ( let x ; await ++ ; 0 ) ; 
for ( let x ; await -- ; ) ; 
for ( let x ; await -- ; 0 ) ; 
for ( let x ; await . x ++ ; 0 ) ; 
for ( let x ; await . x ; 0 ) ; 
for ( let x ; await . x ??= 0 ; 0 ) ; 
for ( let x ; await / 0 ; ) ; 
for ( let x ; await ; ) ; 
for ( let x ; await ; ) ; class await { } 
for ( let x ; await ; ) var await ; 
for ( let x ; await ; 0 ) ; 
for ( let x ; await ; 0 ) ; class await { } 
for ( let x ; await ; 0 ) var await ; 
for ( let x ; await < 0 ; ) ; 
for ( let x ; await < 0 ; 0 ) ; 
for ( let x ; await < 0 ; 0 ) for ( ; ; x => 0 , 0 ) ; 
for ( let x ; await << 0 ; ) ; 
for ( let x ; await << 0 ; 0 ) ; 
for ( let x ; await <= 0 ; 0 ) ; 
for ( let x ; await = 0 . x . x ; 0 ) ; 
for ( let x ; await = 0 ; ) ; 
for ( let x ; await = 0 ; 0 ) ; 
for ( let x ; await = 0 ; 0 ) ; class await { } 
for ( let x ; await = await ; ) ; 
for ( let x ; await = class x { } ; ) ; 
for ( let x ; await = function x ( ) { } ; 0 ) ; 
for ( let x ; await = x ; ) ; 
for ( let x ; await = x => 0 ; ) ; 
for ( let x ; await = x => 0 ; ) ; class await { } 
for ( let x ; await = x => 0 ; 0 ) ; 
for ( let x ; await == 0 ; ) ; 
for ( let x ; await == 0 ; 0 ) ; 
for ( let x ; await == 0 <= 0 ; ) ; 
for ( let x ; await == { } ; 0 ) ; 
for ( let x ; await === 0 . x ; 0 ) ; 
for ( let x ; await === 0 ; ) break ; 
for ( let x ; await > 0 ; ) ; 
for ( let x ; await > 1 ; ) ; 
for ( let x ; await > 1 ; 0 ) ; 
for ( let x ; await >= ! 0 ; ) ; 
for ( let x ; await >= ! 0 ; 0 ) ; 
for ( let x ; await >= 0 ; 0 ) for ( let x of 0 ) ; 
for ( let x ; await >= x ; ) ; 
for ( let x ; await >> 0 ; ) ; 
for ( let x ; await >> 0 ; 0 ) ; 
for ( let x ; await >>> 0 ; ) ; 
for ( let x ; await >>> 0 ; 0 ) ; 
for ( let x ; await ? 0 : 0 ; ) ; 
for ( let x ; await ?. x ( ) ; ) ; 
for ( let x ; await ?. x ; ) ; 
for ( let x ; await ?. x ; 0 ) ; 
for ( let x ; await ?? 0 ; ) ; 
for ( let x ; await ?? 0 ; 0 ) ; 
for ( let x ; await ??= 0 ; 0 ) ; 
for ( let x ; await ^ 0 ; ) ; 
for ( let x ; await ^ 0 ; 0 ) ; 
for ( let x ; await in 0 ; ) ; 
for ( let x ; await in 0 ; 0 ) ; 
for ( let x ; await in this ; ) ; 
for ( let x ; await instanceof 0 ; 0 ) ; 
for ( let x ; await instanceof [ ] > 0 ; 0 ) ; 
for ( let x ; await instanceof { } ; ) ; 
for ( let x ; await | 0 ; ) ; 
for ( let x ; await | { x } ?. x ; 0 ) ; 
for ( let x ; await || 0 ; ) ; 
for ( let x ; await || 0 ; 0 ) ; 
for ( let x ; await ||= 0 ; ) ; 
for ( let x ; await ||= 0 ; 0 ) ; 
for ( let x ; function ( ) { } ( ) [ await ] ; ) ; 
for ( let x ; function ( ) { } ( ) [ await ] ; 0 ) ; 
for ( let x ; null ? 0 : await ; ) ; 
for ( let x ; typeof 0 ? await : 0 ; 0 ) ; 
for ( let x ; typeof await ; ) break ; 
for ( let x ; typeof await ; 0 ) throw 0 ; 
for ( let x ; void await -- ; 0 ) ; 
for ( let x ; void await ; ) ; 
for ( let x ; void await ; 0 ) ; 
for ( let x ; void void 0 || await ; 0 ) ; 
for ( let x ; x * await ; 0 ) ; 
for ( let x ; x = await ; ) ; 
for ( let x ; x == 0 == await ; 0 ) ; 
for ( let x ; x ?? await ; ) ; 
for ( let x ; x ??= await ; 0 ) ; 
for ( let x ; x ^ await ; 0 ) ; 
for ( let x ; x instanceof await ; 0 ) ; 
for ( let x ; x || new ( 0 !== await ) ; 0 ) ; 
for ( let x ; x || new ( await !== 0 ) ; 0 ) ; 
for ( let x ; x ||= await ; ) ; 
for ( let x ; x ||= await ; 0 ) ; 
for ( let x ; { x = 0 } = await ; 0 ) ; 
for ( let x ; { x = await } = 0 ; 0 ) ; 
for ( let x ; { } && await ; ) ; 
for ( let x ; { } ? await : 0 ; ) ; 
for ( let x ; ~ 0 ; ) if ( await ) ; else break ; 
for ( let x ; ~ await ; ) if ( 0 ( ) [ 0 ] ??= 0 ) 0 ; 
for ( let x ; ~ ~ await ; ) ; 
for ( let x in ! await ) ; 
for ( let x in + await ) ; 
for ( let x in - await ) ; 
for ( let x in 0 !== await ) ; 
for ( let x in 0 & await ) ; 
for ( let x in 0 * await ) ; 
for ( let x in 0 ** await ) ; 
for ( let x in 0 + await ) ; 
for ( let x in 0 , await ) ; 
for ( let x in 0 - await ) ; 
for ( let x in 0 . x /= await ) ; 
for ( let x in 0 . x ??= await ) ; 
for ( let x in 0 . x ||= await ) ; 
for ( let x in 0 / await ) ; 
for ( let x in 0 < await ) ; 
for ( let x in 0 << await ) ; 
for ( let x in 0 << await ) for ( 0 ; ; ) ; 
for ( let x in 0 <= await ) ; 
for ( let x in 0 == await ) ; 
for ( let x in 0 === await ) ; 
for ( let x in 0 > await ) ; 
for ( let x in 0 >= await ) ; 
for ( let x in 0 >= { [ Symbol . toPrimitive ] : await => { } } > 0 ) ; 
for ( let x in 0 >>> await ) ; 
for ( let x in 0 [ await ] ) ; 
for ( let x in 0 ^ await ) ; 
for ( let x in 0 in await ) ; 
for ( let x in 0 in ~ await << 0 ) ; 
for ( let x in 0 instanceof await ) ; 
for ( let x in 0 | await ) ; 
for ( let x in 0 || await ) ; 
for ( let x in 1 > await ) ; 
for ( let x in [ 0 ] ) await ; 
for ( let x in [ 0 ] ) if ( await ) ; 
for ( let x in [ 0 ] ) if ( await ) ; else throw 0 ; 
for ( let x in [ 0 ] ) switch ( await ) { } 
for ( let x in [ 0 ] ) throw await ; 
for ( let x in [ 0 ] ) try { if ( await ) ; } catch { } 
for ( let x in await != - 0 ) ; 
for ( let x in await != 0 ) ; 
for ( let x in await % 1 ) ; 
for ( let x in await %= 0 ) ; 
for ( let x in await & 0 ) ; 
for ( let x in await && 0 ) ; 
for ( let x in await &&= 0 ) ; 
for ( let x in await ( ) ) ; 
for ( let x in await ) ; 
for ( let x in await ) ; async function await ( ) { } 
for ( let x in await ) for ( 0 ; ; ) ; 
for ( let x in await ** 0 ) ; 
for ( let x in await , 0 ) ; 
for ( let x in await . x ) ; 
for ( let x in await . x ??= 0 ) ; 
for ( let x in await < 0 ) ; 
for ( let x in await << 0 ) ; 
for ( let x in await <= 0 ) ; 
for ( let x in await = 0 ) ; 
for ( let x in await == 0 ) ; 
for ( let x in await === 0 ) ; 
for ( let x in await === 0 > 0 >= 0 in x ) ; 
for ( let x in await > 0 ) ; 
for ( let x in await >= 0 ) ; 
for ( let x in await >> 0 ) ; 
for ( let x in await >>> { } ) ; 
for ( let x in await ?. x ) ; 
for ( let x in await ?? 0 ) ; 
for ( let x in await ??= 0 ) ; 
for ( let x in await ^ 0 < 0 ) ; 
for ( let x in await `` ) ; 
for ( let x in await in 0 ) ; 
for ( let x in await instanceof 0 ) ; 
for ( let x in await instanceof 0 . x ) ; 
for ( let x in await | 0 ) ; 
for ( let x in await || x ) ; 
for ( let x in function ( ) { } ( ) [ await ] ) ; 
for ( let x in function ( ) { } ( ) [ await ] in 0 ) ; 
for ( let x in null ?? await ) ; 
for ( let x in void await ) ; 
for ( let x in x . x ??= await ) ; 
for ( let x in x = await ) ; 
for ( let x in ~ await ) ; 
for ( let x of ! await ) ; 
for ( let x of '' . x ||= await ) ; 
for ( let x of '' ? 0 : await ) ; 
for ( let x of '' || await ) ; 
for ( let x of + await ) ; 
for ( let x of - await ) ; 
for ( let x of 0 != await ) ; 
for ( let x of 0 !== await ) ; 
for ( let x of 0 & await ) ; 
for ( let x of 0 * await ) ; 
for ( let x of 0 ** await ) ; 
for ( let x of 0 + await ) ; 
for ( let x of 0 + await ) ; class await { } 
for ( let x of 0 - await ) ; 
for ( let x of 0 . x %= await ) ; 
for ( let x of 0 . x *= await ) ; 
for ( let x of 0 . x = await ) ; 
for ( let x of 0 . x ??= await ) ; 
for ( let x of 0 . x ||= await ) ; 
for ( let x of 0 / await ) ; 
for ( let x of 0 <= await ) ; 
for ( let x of 0 == await ) ; 
for ( let x of 0 === await ) ; 
for ( let x of 0 > await ) ; 
for ( let x of 0 >= await ) ; 
for ( let x of 0 >>> await ) ; 
for ( let x of 0 ?. x [ await ] ) ; 
for ( let x of 0 [ await = 0 | 0 ] ||= 0 ) ; 
for ( let x of 0 [ await ] ) ; 
for ( let x of 0 ^ await ) ; 
for ( let x of 0 ^ await `` ) ; 
for ( let x of 0 in await ) ; 
for ( let x of 0 instanceof await ) ; 
for ( let x of 0 | await ) ; 
for ( let x of 1 < await ) ; 
for ( let x of 1 | await ) ; 
for ( let x of [ , ] ) await ;
for ( let x of [ 0 ] ) await ; 
for ( let x of [ 0 ] ) if ( 0 ) ; else await ; 
for ( let x of [ 0 ] ) if ( await ) ; 
for ( let x of [ 0 ] ) if ( await ) ; else 0 ; 
for ( let x of [ 0 ] ) switch ( await ) { } 
for ( let x of [ 0 ] ) try { throw 0 ; } catch { await ( 0 ) ; } 
for ( let x of [ 0 ] ) try { throw await ; } catch { x ( 0 ) ; } 
for ( let x of `${ 0 }` [ 0 ] &&= await ) ; 
for ( let x of await != 0 ) ; 
for ( let x of await !== 0 ) ; 
for ( let x of await & 0 ) ; 
for ( let x of await && 0 ) ; 
for ( let x of await ( ) ) ; 
for ( let x of await ) ; 
for ( let x of await ** 0 ) ; 
for ( let x of await += 0 ) ; 
for ( let x of await . x ) ; 
for ( let x of await < 0 ) ; 
for ( let x of await << 0 ) ; 
for ( let x of await <= 0 ) ; 
for ( let x of await = 0 ) ; 
for ( let x of await = 0 . x . x `` ) ; 
for ( let x of await = new x ( 0 ) ) ; 
for ( let x of await == '' ) ; 
for ( let x of await === 0 ) ; 
for ( let x of await > 0 ) ; 
for ( let x of await >= 0 ) ; 
for ( let x of await >> 0 ) ; 
for ( let x of await >>> 0 ) ; 
for ( let x of await ? 0 : 0 ) ; 
for ( let x of await ?. x ) ; 
for ( let x of await ^ 0 ) ; 
for ( let x of await in x ) ; 
for ( let x of await instanceof await ) ; 
for ( let x of await | 0 ) ; 
for ( let x of await || 0 ) ; 
for ( let x of function * ( ) { } ( ) ?. [ await ] ) ; 
for ( let x of function * ( ) { } ( ) ?. [ typeof await ] ) ; 
for ( let x of null ?? await ) ; 
for ( let x of this != this == await == 0 ) ; 
for ( let x of this ? await : 0 ) ; 
for ( let x of void + await ^ 0 ) ; 
for ( let x of void await ) ; 
for ( let x of x = await ) ; 
for ( let x of { x } instanceof await ) ; 
for ( let x of { } = await ) ; 
for ( let x of ~ 0 << await ) ; 
for ( let x of ~ 0 >> await ) ; 
for ( let x of ~ await ) ; 
for ( let { await , x } in [ await ] ) ; 
for ( let { await , x } in await ) ; 
for ( typeof await ; ; 0 ) throw 0 ; 
for ( var [ [ ] = ++ await , x , , ] of [ `` ] ) ; 
for ( var [ ] = await ++ ; ; ) ; 
for ( var [ ] = await ?. x ?. x ; ; ) ; 
for ( var [ x , , ... x ] of await &&= 0 ) ; 
for ( var await = 0 ; ; 0 ?? 0 ) throw await ; 
for ( var await = await ; ; 0 ?? 0 ) break ; 
for ( var await in await ) ; 
for ( var await of [ await ] ) ; 
for ( var await of await ) ;
for ( var x , [ ] = x [ await ] , x ; ; ) ; 
for ( var x , x ; ; await ) ; 
for ( var x ; ! 0 <= await ; ) ; 
for ( var x ; ! ~ await ; ) ; 
for ( var x ; + await ; ) ; 
for ( var x ; + await ; 0 ) ; 
for ( var x ; ++ await + 0 ; 0 ) ; 
for ( var x ; ++ await . x ; ) ; 
for ( var x ; ++ await . x ; 0 ) ; 
for ( var x ; ++ await / 0 ; ) ; 
for ( var x ; ++ await ; ) ; 
for ( var x ; ++ await ; 0 ) ; 
for ( var x ; - ++ await . x ; 0 ) ; 
for ( var x ; - await ; ) ; 
for ( var x ; - await ; 0 ) ; 
for ( var x ; - { ... [ ] = await } ; ) ; 
for ( var x ; - { ... await = 0 } ; ) ; 
for ( var x ; -- await ; ) ; 
for ( var x ; 0 != await ; ) ; 
for ( var x ; 0 != await ; 0 ) ; 
for ( var x ; 0 !== await ; ) ; 
for ( var x ; 0 !== await ; 0 ) ; 
for ( var x ; 0 % await ; ) ; 
for ( var x ; 0 & await ; ) ; 
for ( var x ; 0 & await ; 0 ) ; 
for ( var x ; 0 ( 0 , 1n && await ) ; ) ; 
for ( var x ; 0 ( 0 , await && 0 ) ; ) ; 
for ( var x ; 0 ( 0 < await , 0 ) ; ) ; 
for ( var x ; 0 ( x => 0 , [ 1 ] [ 0 ] &&= await ) ; ) ; 
for ( var x ; 0 ** await ; ) ; 
for ( var x ; 0 + await ; ) ; 
for ( var x ; 0 + await ; 0 ) ; 
for ( var x ; 0 - await ; ) ; 
for ( var x ; 0 - await ; 0 ) ; 
for ( var x ; 0 . x !== await ; ) ; 
for ( var x ; 0 . x %= await ; 0 ) ; 
for ( var x ; 0 . x & await ; ) ; 
for ( var x ; 0 . x = await ; 0 ) ; 
for ( var x ; 0 . x ??= await ; ) ; 
for ( var x ; 0 . x ||= await ; 0 ) ; 
for ( var x ; 0 / await ; 0 ) ; 
for ( var x ; 0 < await ; ) ; 
for ( var x ; 0 < await ; 0 ) ; 
for ( var x ; 0 < await `` ; 0 ) ; 
for ( var x ; 0 << await ; ) ; 
for ( var x ; 0 << await ; 0 ) ; 
for ( var x ; 0 <= await ; 0 ) ; 
for ( var x ; 0 == 0 == await ; 0 ) ; 
for ( var x ; 0 == 0 === 0 instanceof await ; ) ; 
for ( var x ; 0 == await ; ) ; 
for ( var x ; 0 === 0 ** { [ Symbol . toPrimitive ] : await => { } } ; 0 ) ; 
for ( var x ; 0 === await ; 0 ) ; 
for ( var x ; 0 === await instanceof 0 ; ) ; 
for ( var x ; 0 > await ; ) ; 
for ( var x ; 0 > await ; 0 ) ; 
for ( var x ; 0 >= 0 == await ; ) ; 
for ( var x ; 0 >= await ; ) ; 
for ( var x ; 0 >= await ; ) break ; 
for ( var x ; 0 >> 0 >>> await ; ) ; 
for ( var x ; 0 >> await ; ) ; 
for ( var x ; 0 >> await ; 0 ) ; 
for ( var x ; 0 >>> await ; 0 ) ; 
for ( var x ; 0 ? 0 : await ++ ; 0 ) ; 
for ( var x ; 0 ? 0 : await . x ++ ; 0 ) ; 
for ( var x ; 0 ? 0 : await ; ) ; 
for ( var x ; 0 [ await ] ; ) ; 
for ( var x ; 0 [ await ] ; 0 ) ; 
for ( var x ; 0 ^ await ; ) ; 
for ( var x ; 0 ^ await ; 0 ) ; 
for ( var x ; 0 in await ; ) ; 
for ( var x ; 0 in await ; 0 ) ; 
for ( var x ; 0 instanceof await ; ) ; 
for ( var x ; 0 instanceof await ; 0 ) ; 
for ( var x ; 0 | await ; ) ; 
for ( var x ; 0 | await ; ) ; class await { } 
for ( var x ; 0 | await ; 0 ) ; 
for ( var x ; 0 || await ; ) ; 
for ( var x ; 0 || await ; 0 ) ; 
for ( var x ; 1 - await ; ) ; 
for ( var x ; 1 < await ; ) ; 
for ( var x ; 1 < await ; 0 ) ; 
for ( var x ; 1n . x ||= await ; ) ; 
for ( var x ; 1n << await ; 0 ) ; 
for ( var x ; ; ) if ( ++ await ) ; 
for ( var x ; ; ) if ( await ) ; else ; 
for ( var x ; ; ) if ( await ) ; else break ; 
for ( var x ; ; ) if ( await ) ; else break ; class await { } 
for ( var x ; ; ) if ( await ) if ( 0 ) ; else ; 
for ( var x ; ; ) if ( await . x -- ) ; else ; 
for ( var x ; ; ) switch ( await , 0 ( ) . x &&= 0 ) { } 
for ( var x ; ; ) throw await ; 
for ( var x ; ; 0 ) throw await ; 
for ( var x ; ; 0 . x %= await ) ; 
for ( var x ; ; 0 . x = await ) ; 
for ( var x ; ; 0 . x ??= await ) ; 
for ( var x ; ; 0 . x ||= await ) ; 
for ( var x ; ; 0 [ 0 ] ||= 0 ) if ( await ) 0 ; 
for ( var x ; ; 0 instanceof await ) ; 
for ( var x ; ; [ ] = await ) ; 
for ( var x ; ; await != 0 in 0 ) ; 
for ( var x ; ; await !== 0 instanceof 0 ) ; 
for ( var x ; ; await ( ) ) ; 
for ( var x ; ; await ) 0 ; 
for ( var x ; ; await ) ; 
for ( var x ; ; await ) ; class await { } 
for ( var x ; ; await ) for ( let x in 0 ) ; 
for ( var x ; ; await ) for ( var x in 0 ) ; 
for ( var x ; ; await ) if ( 0 ) ; 
for ( var x ; ; await ) switch ( 0 ) { } 
for ( var x ; ; await ) try { if ( 0 , 0 ) 0 ; } catch { } finally { } 
for ( var x ; ; await ) try { } catch { } finally { } 
for ( var x ; ; await ) try { } finally { } 
for ( var x ; ; await ) while ( 0 ) ; 
for ( var x ; ; await ) x : ; 
for ( var x ; ; await ) x : for ( var x ; 0 ; ) ; 
for ( var x ; ; await ) { ; ; } 
for ( var x ; ; await ) { ; } 
for ( var x ; ; await ) { } 
for ( var x ; ; await ** + 0 ( ) ) ; 
for ( var x ; ; await + new 0 ** 0 ) ; 
for ( var x ; ; await , x => 0 ) ; 
for ( var x ; ; await -- ) ; 
for ( var x ; ; await . x ++ ) ; 
for ( var x ; ; await . x -- ) ; 
for ( var x ; ; await . x ||= 0 ) ; 
for ( var x ; ; await << new 0 ** 0 ) ; 
for ( var x ; ; await = 0 ) ; 
for ( var x ; ; await = class { } ) ; 
for ( var x ; ; await === 0 in 0 ) ; 
for ( var x ; ; await ?. ( ) ) ; 
for ( var x ; ; await ^ 0 in 0 ) ; 
for ( var x ; ; await in 0 ) ; 
for ( var x ; ; await | 0 instanceof 0 ) ; 
for ( var x ; ; await || 0 & 0 instanceof 0 & 0 ) ; 
for ( var x ; ; x => 0 ) if ( await ) ; else ; 
for ( var x ; ; { } . x ||= await ) ; 
for ( var x ; [ ] && await ; ) ; 
for ( var x ; [ ] && await ; 0 ) ; 
for ( var x ; `${ 0 }` [ 0 ] &&= await ; ) ; 
for ( var x ; `${ await }` ; ) break ; 
for ( var x ; `${ await }` ; 0 ) break ; 
for ( var x ; `` . x += await ; ) ; 
for ( var x ; await != 0 ; ) ; 
for ( var x ; await != 0 ; 0 ) ; 
for ( var x ; await != 0 ; 0 ) ; class await { } 
for ( var x ; await !== 0 ; ) ; 
for ( var x ; await !== 0 ; 0 ) ; 
for ( var x ; await % 0 ; 0 ) ; 
for ( var x ; await % x ; ) ; 
for ( var x ; await %= 0 ; 0 ) ; 
for ( var x ; await & 0 ; ) ; 
for ( var x ; await & 0 ; 0 ) ; 
for ( var x ; await && 0 ; ) ; 
for ( var x ; await &&= 0 ; ) ; 
for ( var x ; await ( ) ; ) ; 
for ( var x ; await ( ) ; 0 ) ; 
for ( var x ; await ** ! 0 ; ) ; 
for ( var x ; await ** ! 0 ; 0 ) ; 
for ( var x ; await **= 0 ; 0 ) ; 
for ( var x ; await ++ && 0 ; ) ; 
for ( var x ; await ++ ; ) ; 
for ( var x ; await , 0 ; ) ; 
for ( var x ; await , 1n ?. x ; ) ; 
for ( var x ; await . x ++ ; ) ; 
for ( var x ; await . x ++ ; 0 ) ; 
for ( var x ; await . x -- ; 0 ) ; 
for ( var x ; await . x ; ) ; 
for ( var x ; await . x ; 0 ) ; 
for ( var x ; await . x = 0 ; 0 ) ; 
for ( var x ; await . x ??= 0 ; 0 ) ; 
for ( var x ; await . x ||= 0 ; 0 ) ; 
for ( var x ; await / 0 ; 0 ) ; 
for ( var x ; await ; ) ; 
for ( var x ; await ; 0 ) ; 
for ( var x ; await ; 0 ) ; class await { }
for ( var x ; await < 0 ; ) ; 
for ( var x ; await < 0 ; 0 ) ; 
for ( var x ; await << 0 ; ) ; 
for ( var x ; await << 0 ; 0 ) ; 
for ( var x ; await <= 0 % 0 ; ) ; 
for ( var x ; await <= ~ 0 ; 0 ) ; 
for ( var x ; await = 0 ; ) ; 
for ( var x ; await = 0 ; 0 ) ; 
for ( var x ; await = async x => 0 ; 0 ) ; 
for ( var x ; await = x => { } ; ) ; 
for ( var x ; await == 0 ; 0 ) ; 
for ( var x ; await == 0 <= 0 ; 0 ) ; 
for ( var x ; await === 0 >= 0 ; ) ; 
for ( var x ; await === 0 instanceof 0 ; ) ; 
for ( var x ; await === ~ 0 ; 0 ) ; 
for ( var x ; await > 0 ; 0 ) ; 
for ( var x ; await > 1 ; ) ; 
for ( var x ; await >= ! 0 ; 0 ) ; 
for ( var x ; await >= x ; ) ; 
for ( var x ; await >= x ; 0 ) ; 
for ( var x ; await >> 0 ; ) ; 
for ( var x ; await >> x ; ) ; 
for ( var x ; await >> x ; 0 ) ; 
for ( var x ; await >>> 0 ; ) ; 
for ( var x ; await >>> 0 ; 0 ) ; 
for ( var x ; await ? 0 : 0 ; ) ; 
for ( var x ; await ? 0 : x ; ) ; 
for ( var x ; await ? 0 : x ; 0 ) ; 
for ( var x ; await ?. x ; ) ; 
for ( var x ; await ?. x ; 0 ) ; 
for ( var x ; await ?. x ?. x ; 0 ) ; 
for ( var x ; await ?? 0 ; ) ; 
for ( var x ; await ?? 0 ; 0 ) ; 
for ( var x ; await ??= 0 ; ) ; 
for ( var x ; await ??= 0 ; 0 ) ; 
for ( var x ; await ^ 0 ; ) ; 
for ( var x ; await ^= 0 ; ) ; 
for ( var x ; await in 0 ; ) ; 
for ( var x ; await in 0 ; 0 ) ; 
for ( var x ; await in { 1 : async * function ( x ) { } } ; ) ; 
for ( var x ; await instanceof 0 ; ) ; 
for ( var x ; await instanceof 0 ?. x ; 0 ) ; 
for ( var x ; await | 0 ; ) ; 
for ( var x ; await | 0 ; 0 ) ; 
for ( var x ; await | x ; 0 ) ; 
for ( var x ; await || 0 ; ) ; 
for ( var x ; await || 0 ; 0 ) ; 
for ( var x ; await ||= 0 ; ) ; 
for ( var x ; await ||= 0 ; 0 ) ; 
for ( var x ; class x { } ; ) throw await ; 
for ( var x ; function ( ) { } ( ) [ await ] %= 0 ; ) ; 
for ( var x ; function ( ) { } ( ) [ await ] ; 0 ) ; 
for ( var x ; function * ( ) { } ( ) [ 0 !== 0 != await ] %= 0 ; ) ; 
for ( var x ; this . x = await ; ) ; 
for ( var x ; this . x ??= 0 ; typeof await ) var x = 0 ; function x ( ) { } 
for ( var x ; this . x ^= 1 ; ) if ( await ) ; 
for ( var x ; typeof 0 ? await : 0 ; 0 ) ; 
for ( var x ; typeof await ; 0 ) break ; 
for ( var x ; void await ; ) ; 
for ( var x ; void await ; 0 ) ; 
for ( var x ; x != 0 === await ; 0 ) ; 
for ( var x ; x = await ; ) ; 
for ( var x ; x >> import ( function ( ) { } ( ) [ await , 0 ] . x %= 0 ) >>> 0 ; ) ; 
for ( var x ; x ?? await ; ) ; 
for ( var x ; x ^= await ; ) ; 
for ( var x ; x ||= await ; 0 ) ; 
for ( var x ; { [ Symbol . toPrimitive ] : await => this } >> 0n ; 0 ) ; 
for ( var x ; { } ? await : x ; 0 ) ; 
for ( var x ; ~ await ; 0 ) ; 
for ( var x = 0 . x . x ; ; await ) ; 
for ( var x = 0 . x ; ; await ) ; 
for ( var x = 0 ; ; ) if ( -- await ) ; 
for ( var x = 0 ; ; ) if ( -- await ) ; else ; 
for ( var x = 0 ; ; ) if ( -- await . x ) ; 
for ( var x = 0 ; ; ) if ( await ++ ) ; else ; 
for ( var x = 0 ; ; ) if ( await . x ++ ) ; else ; 
for ( var x = 0 ; ; ) if ( x => 0 ) if ( 0 ) ; else for ( var x of await ++ ) ; 
for ( var x = 0 ; ; ) if ( ~ await ) break ; 
for ( var x = 0 ; ; await ) ; 
for ( var x = await %= 0 ; ; ) if ( -- 0 . x ) ; 
for ( var x = await ++ ; ; ) if ( ++ x . x ) ; 
for ( var x = await -- ; ; ) break ; 
for ( var x = await . x ++ ; ; ) ; 
for ( var x = await ; 0 ; ) ; 
for ( var x = await ; 0 ; 0 ) ; 
for ( var x = await ; ; ) break ; 
for ( var x = await ; ; 0 ) break ; 
for ( var x = await ; ; await ) ; 
for ( var x = class x { } ; ; await ) ; 
for ( var x = this ; ; ) if ( await ??= 0 ) ; 
for ( var x = x ; ; await ) ; 
for ( var x = x => 0 ; ; await ) ; 
for ( var x in ! await ) ; 
for ( var x in '' ? 0 : await ) ; 
for ( var x in + await ) ; 
for ( var x in ++ await != 0 ) ; 
for ( var x in ++ await ) ; 
for ( var x in ++ await . x == 0 ) ; 
for ( var x in - await ) ; 
for ( var x in - await ) for ( let x ; 0 ; 0 ) ; 
for ( var x in 0 != await ) ; 
for ( var x in 0 !== await ) ; 
for ( var x in 0 & await ) ; 
for ( var x in 0 * await ) ; 
for ( var x in 0 ** await ) ; 
for ( var x in 0 + 0 ** 0 ^ 0 & { [ 0 ? 0 : 0 ] : await ?? 0 } ) ; 
for ( var x in 0 + await ) ; 
for ( var x in 0 , await ) ; 
for ( var x in 0 - await ) ; 
for ( var x in 0 . x ??= await ) ; 
for ( var x in 0 . x ||= await &&= 0 ) ; 
for ( var x in 0 . x ||= await ) ; 
for ( var x in 0 / 0 ** void await ?. x ) ; 
for ( var x in 0 < await ) ; 
for ( var x in 0 << await ) ; 
for ( var x in 0 <= await ) ; 
for ( var x in 0 == await ) ; 
for ( var x in 0 > await ) ; 
for ( var x in 0 >= await ) ; 
for ( var x in 0 >> await ) ; 
for ( var x in 0 >>> await ) ; 
for ( var x in 0 [ await ] ) ; 
for ( var x in 0 ^ await ) ; 
for ( var x in 0 instanceof await ) ; 
for ( var x in 0 | await ) ; 
for ( var x in 0 || await ) ; 
for ( var x in 1 && await ) ; 
for ( var x in 1 / await ) ; 
for ( var x in 1n >> await ) ; 
for ( var x in [ , ] = [ await ] ) ; 
for ( var x in [ 0 ] ) await ; 
for ( var x in [ 1 ] [ 0 ] &&= await ) ; 
for ( var x in [ await , ] ) ; 
for ( var x in `` in await ) ; 
for ( var x in await != 0 ) ; 
for ( var x in await !== new 0 ) ; 
for ( var x in await % 0 ) ; 
for ( var x in await %= 0 ) ; 
for ( var x in await & 0 ) ; 
for ( var x in await & 1 ) ; 
for ( var x in await && 0 ) ; 
for ( var x in await &&= 0 ) ; 
for ( var x in await ( ) ) ; 
for ( var x in await ) ; 
for ( var x in await ** 0 ) ; 
for ( var x in await ++ || 0 ) ; 
for ( var x in await , 0 ) ; 
for ( var x in await -- && 0 ) ; 
for ( var x in await -- ) ; 
for ( var x in await . x ) ; 
for ( var x in await . x -- ) ; 
for ( var x in await . x ??= 0 ) ; 
for ( var x in await < 0 ) ; 
for ( var x in await << 0 ) ; 
for ( var x in await <= 0 ) ; 
for ( var x in await = 0 ) ; 
for ( var x in await == 0 ) ; 
for ( var x in await > 0 ) ; 
for ( var x in await >= 0 ) ; 
for ( var x in await >= null ) ; 
for ( var x in await >> 0 ) ; 
for ( var x in await >>>= 0 ) ; 
for ( var x in await ? 0 : 0 ) ; 
for ( var x in await ?. x ) ; 
for ( var x in await ?? 0 ) ; 
for ( var x in await ??= 0 ) ; 
for ( var x in await ^ 0 ) ; 
for ( var x in await in 0 ) ; 
for ( var x in await instanceof 0 ) ; 
for ( var x in await | 0 ) ; 
for ( var x in await || 0 ) ; 
for ( var x in await ||= 0 ) ; 
for ( var x in function ( ) { } ( ) [ await ] ) ; 
for ( var x in x %= await ) ; 
for ( var x in x ++ || await ) ; 
for ( var x in x = await ) ; 
for ( var x in x == await ++ ) ; 
for ( var x in x ?? await ) ; 
for ( var x in x ?? await ) ; var await = 0 ; 
for ( var x in { x } ) await ;
for ( var x in { x } ) await ; class await { } 
for ( var x in { x } ) if ( await &&= 0 ) try { 0 ; } catch { } else ; 
for ( var x in { x } ) if ( await ( ) ) ; 
for ( var x in { x } ) if ( await ) ; 
for ( var x in { x } ) if ( await ) try { 0 ; } catch { } else ; 
for ( var x in { x } ) throw await ; 
for ( var x in { } = await ) ; 
for ( var x in ~ - await === 0 ) ; 
for ( var x in ~ await ) ; 
for ( var x of ! await ) ; 
for ( var x of + await ) ; 
for ( var x of ++ await ) ; 
for ( var x of - await ) ; 
for ( var x of 0 != 0 ? 0 : await ) ; 
for ( var x of 0 != await ) ; 
for ( var x of 0 != x ? await : 0 ) ; 
for ( var x of 0 !== await ) ; 
for ( var x of 0 % await ) ; 
for ( var x of 0 & await ) ; 
for ( var x of 0 * await ) ; 
for ( var x of 0 ** await ) ; 
for ( var x of 0 + await ) ; 
for ( var x of 0 - await ) ; 
for ( var x of 0 . x += await ) ; 
for ( var x of 0 . x = await ) ; 
for ( var x of 0 . x ??= await ) ; 
for ( var x of 0 . x ||= await ) ; 
for ( var x of 0 < await ) ; 
for ( var x of 0 << ! await -- ) ; 
for ( var x of 0 << await ) ; 
for ( var x of 0 << await -- ) ; 
for ( var x of 0 <= -- await ) ; 
for ( var x of 0 <= await ) ; 
for ( var x of 0 == await ) ; 
for ( var x of 0 > await ) ; 
for ( var x of 0 >= await ) ; 
for ( var x of 0 >> await ) ; 
for ( var x of 0 >>> await ) ; 
for ( var x of 0 ? 0 : await ) ; 
for ( var x of 0 [ await ] ) ; 
for ( var x of 0 ^ await ) ; 
for ( var x of 0 in await ) ; 
for ( var x of 0 in await ++ ) ; 
for ( var x of 0 instanceof await ) ; 
for ( var x of 0 | await ) ; 
for ( var x of 0n > await ) ; 
for ( var x of 1 != await ) ; 
for ( var x of [ 0 ] ) await ; 
for ( var x of [ 0 ] ) if ( await ) ; 
for ( var x of [ 0 ] ) if ( await ) ; else ; 
for ( var x of [ 0 ] ) switch ( await ) { } 
for ( var x of [ 0 ] ) throw await ; 
for ( var x of [ 1 ] [ 0 ] &&= await ) ; 
for ( var x of async function * ( ) { } ( ) [ await ] ) ; 
for ( var x of await != '' ) ; 
for ( var x of await != x ) ; 
for ( var x of await !== 0 ) ; 
for ( var x of await !== 1 ) ; 
for ( var x of await & `` ) ; 
for ( var x of await && 0 ) ; 
for ( var x of await &= 0 ) ; 
for ( var x of await ( ) ) ; 
for ( var x of await ) ; 
for ( var x of await * 0 ) ; 
for ( var x of await ** 0 ) ; 
for ( var x of await . x ) ; 
for ( var x of await < 0 ) ; 
for ( var x of await << 0 ) ; 
for ( var x of await <= 0 ) ; 
for ( var x of await == 0 ) ; 
for ( var x of await == 0 === 0 <= 0 ) ; 
for ( var x of await === 0 ) ; 
for ( var x of await > 0 ) ; 
for ( var x of await >= 0 ) ; 
for ( var x of await >> 0 ) ; 
for ( var x of await >> ~ new 0 ( ) ) ; 
for ( var x of await >>> 0 ) ; 
for ( var x of await ?. x ) ; 
for ( var x of await ?? 0 ) ; 
for ( var x of await ??= 0 ) ; 
for ( var x of await ^ 0 ) ; 
for ( var x of await in x ++ ) ; 
for ( var x of await instanceof 0 ) ; 
for ( var x of await | 0 ) ; 
for ( var x of await || 0 ) ; 
for ( var x of await ||= 0 ) ; 
for ( var x of function * x ( ) { } ( ) [ await ] ) ; 
for ( var x of this . x = await ) ; 
for ( var x of void await ) ; 
for ( var x of x != 0 > 0 && await ) ; 
for ( var x of x &= await ) ; 
for ( var x of x ?? await ) ; 
for ( var x of x || await ) ; 
for ( var x of ~ ! await ) ; 
for ( var x of ~ 0 === await ) ; 
for ( var x of ~ await ) ; 
for ( var { } = 0 ; ; await ) ; 
for ( var { } of { [ Symbol . iterator ] : await &&= 0 } ) ; 
for ( x = await ; 0 ; ) ; 
for ( x in '' in await in 0 ) ; 
for ( x in 0 . x %= await ++ ) ; 
for ( x in [ ++ 0 [ await ] ] ) ; 
for ( x in await !== 0 ** 0 ) ; 
for ( x in await ) ; 
for ( x in await >> x ) ; 
for ( x in await ?. x ) ; 
for ( x in await ??= 0 ) ; 
for ( x in await `` ) ; 
for ( x in function * ( ) { } ( ) [ await ] ) ; 
for ( x in true && await ) ; 
for ( x in ~ 0 <= await ) ; let x , await ; 
for ( x of ! ~ await ) ; 
for ( x of - void delete void await ) ; 
for ( x of 0 ? 0 : await ) ; 
for ( x of 0 in await ) ; 
for ( x of 0 | await in 0 ) ; 
for ( x of 1n && await ) ; 
for ( x of await & null ) ; 
for ( x of await ) ; 
for ( x of await ) ; class await { } 
for ( x of await ) for ( var x ; 0 ; ) ; 
for ( x of await += 0 ) ; 
for ( x of await -- ) ; 
for ( x of await ??= 0 ) ; 
for ( x of function ( ) { ; ; } ( ) [ await ] ) ; 
for ( x of { [ Symbol . iterator ] : ++ await } ) ; 
for ( { [ Symbol . toPrimitive ] : await => 0 ( ) } ^ 0 ; ; ) throw 0 ; 
for ( { [ Symbol . toPrimitive ] : await => 0 } ^ 0 ; ; ) throw 0 ; 
for ( { [ Symbol . toPrimitive ] : await => { } } ^ 0 ; ; ) throw 0 ; 
for ( { join : '' } && await . x ; ; 0 ) throw 0 ; 
for ( { } . x of [ 0 , ] ) if ( await ) ; 
for ( { } = await ; 0 ; ) ; 
for ( { } in [ 0 ] ) await ; 
for ( { } in [ 0 ] ) if ( 0 ) ; else await ; 
for ( { } in [ 0 ] ) if ( await ) ; 
for ( { } of [ 0 ] ) switch ( await ) { } 
for ( { } of await . x ++ ) break ; 
for ( { } of await ||= 0 ) ; 
for ( ~ await ; 0 ; ) ; 
function * await ( ) { } 0 ( ... await ? 0 : 0 ) ; 
function * await ( ) { } [ 0 , , await . x = 0 ] ; 
function * await ( ) { } await ??= 0 ; 
function * await ( ) { } await ||= 0 ; 
function * await ( ) { } for ( ; await ; 0 ) for ( var x of 0 ) ; 
function * await ( ) { } for ( let x of 0 ?. x ?. x ? await : 0 ) ; 
function * await ( ) { } for ( let x of this ? await : 0 ) ; 
function * await ( ) { } let x = 0 <= ! 0 && await ; 
function * await ( ... [ ] ) { } 0 / await ?. x ; 
function await ( ) { } ! { ... await } ; 
function await ( ) { } 0 ( 0 , ... await ) ; 
function await ( ) { } [ 0 !== 0 !== await , 0 ] ; 
function await ( ) { } await ; 
function await ( ) { } await || '' ; 
function await ( ) { } for ( await [ 0 ] in 0 , [ 0 , , ] ) ; 
function await ( ) { } for ( await [ 0 ] in 0 , await ) ; 
function await ( ) { } for ( let x of 0 in await ) ; 
function await ( ) { } let [ ] = [ 0 , 0 , ] . x = [ 0 , , ] [ 0 ] ||= await ; 
function await ( ) { } x : switch ( await ) { } 
if ( ! ! await ) ; 
if ( + await ) 0 ; 
if ( + await ) ; else ; 
if ( 0 != '' << 0 ? 0 : await ) ; 
if ( 0 !== await ) ; else ; 
if ( 0 ) ; else if ( 0 in await ) ; 
if ( 0 ) ; else if ( await ) ; else 0 ; 
if ( 0 ) ; else if ( await ) if ( 0 ) ; else ; 
if ( 0 ) ; else if ( await . x ) ; else ; 
if ( 0 ) ; else throw await ; 
if ( 0 ) ; else while ( await ) ; 
if ( 0 ) ; else x : await : ; 
if ( 0 ) await : for ( ; ; ) debugger ; 
if ( 0 ) await : x : ; 
if ( 0 * await ) ; else ; 
if ( 0 * await ) ; else ; class await { } 
if ( 0 * await ) if ( 0 ) 0 ; else ; class await { } 
if ( 0 + { [ Symbol . toPrimitive ] : await => 0 } ) ; 
if ( 0 , await ) ; 
if ( 0 . x |= await , 0 ) ; 
if ( 0 . x ||= await ) ; else ; 
if ( 0 [ await ] ) 0 ; 
if ( 0 instanceof await ) ; else ; 
if ( 0 instanceof await >>> 0 ** 0 ) ; 
if ( 1 ) if ( await ) ; 
if ( 1n ** 1n ) if ( await ) ; else ; 
if ( 1n ? await : 0 ) ; else ; 
if ( `${ 0 }` [ this ] [ await ] ) ; 
if ( `` || await ) ; 
if ( await ) 0 ; ; 
if ( await ) ; 
if ( await ) ; class await { } 
if ( await ) ; else ; 
if ( await ) ; else ; async function await ( ) { } 
if ( await ) ; else ; class await { } 
if ( await ) ; function * await ( ) { } 
if ( await = 0 ) ; 
if ( await = x ) ; else ; 
if ( await === 0 , 0 ) ; else ; 
if ( await >>> 0 ) 0 ; 
if ( await ? 0 : 0 ) ; 
if ( await ?. x ) ; else ; 
if ( await ?. x >>> 0 ) ; 
if ( await instanceof 0 && 0 ) ; 
if ( await ||= 0 ) ; 
if ( void await ) ; 
if ( void await ) ; else ; 
if ( void await ) x : ; 
if ( ~ await ?? 0 ) ; 
import ( await = 0 ) ; 
let [ , [ ] = 0 . x ??= await ] = '' ; 
let [ , ] = await , x ; 
let [ , ] = await = class x { } ; 
let [ , ] = await = x ; 
let [ , x = await . x ] = '' ; 
let [ , x = await ] = '' ; 
let [ ... [ [ ] = await , ... x ] ] = `` ; 
let [ ... [ x , ... await ] ] = [ , await , ] ; 
let [ [ ] = ! 0 >>> await ] = '' ; 
let [ [ ] = - await ] = '' , x ; 
let [ [ ] = await !== 0 . x ] = '' ; 
let [ [ ] = await , , ... x ] = function * ( ) { } ( ) ; 
let [ [ ] = await , x ] = '' ; 
let [ [ ] = await instanceof 0 ] = '' , x ; 
let [ [ ] = typeof await ] = '' , x ; 
let [ ] = '' || await ; 
let [ ] = + `` . x | await , x ; 
let [ ] = + await | 0 , x ; 
let [ ] = + { } . x | await , x ; 
let [ ] = - 0 [ await ] ; 
let [ ] = - function ( ) { } ( ) [ await ||= 0 ] ; 
let [ ] = 0 - await ; 
let [ ] = 0 < delete delete + await ++ , x ; 
let [ ] = 0 << await , x ; 
let [ ] = 0 [ await ] , x ; 
let [ ] = 0 | 0 instanceof await ?? 0 ; 
let [ ] = [ ] = 0 [ 0 ] ||= await ; 
let [ ] = `${ 0 }${ [ ] [ x ] ||= await }` || 0 ^ 0 === 0 ? 0 : 0 , x ; 
let [ ] = `${ 0 }${ `` [ 0 ] ||= await }` || 0 ^ 0 === 0 ? 0 : 0 , x ; 
let [ ] = `${ 0 }${ await }` ? 0 : 0 ; 
let [ ] = await & 0 ; 
let [ ] = await &&= x => 0 ; 
let [ ] = await , x ; 
let [ ] = await ; 
let [ ] = await === 0 ; 
let [ ] = await >> 0 ; 
let [ ] = await ?. x ; 
let [ ] = await instanceof x , x ; 
let [ ] = { [ 0 [ `` [ 0 ] ??= 0 || await ] %= 0 ] : `` } , x ; 
let [ ] = { [ [ 0 ] [ 0 ^ function ( ) { } ( ) [ await ] === 0 ] %= 0 ] : `` } , x ; 
let [ ] = ~ - async function * ( ) { } ( ) [ ~ await ] ( ) < x , x ; 
let [ ] = ~ await ; 
let [ await ] = await ; 
let [ x , , , ... await ] = [ await , , 0 , ] ; 
let [ x , , ... await ] = [ 0 , , await , ] ; 
let [ x , [ ] = await ] = [ 0 ] ; 
let [ x = + await ] = '' ; 
let [ x = - await ] = '' ; 
let [ x = 0 !== await ] = '' ; 
let [ x = 0 & await ] = '' ; 
let [ x = 0 * await ] = '' ; 
let [ x = 0 . x %= await ] = '' ; 
let [ x = 0 . x = await ] = '' ; 
let [ x = 0 . x ??= await ] = '' ; 
let [ x = 0 . x ||= await ] = '' ; 
let [ x = 0 < await ] = '' ; 
let [ x = 0 >> await ] = '' ; 
let [ x = 0 >>> await ] = '' ; 
let [ x = 0 ^ await ] = '' ; 
let [ x = 0 | await ] = '' ; 
let [ x = 1n && await ] = '' ; 
let [ x = `${ await }` ] = '' ; 
let [ x = await ( ) ] = '' ; 
let [ x = await ** 0 ] = '' ; 
let [ x = await , , ] = '' ; 
let [ x = await , , ] = `` ; 
let [ x = await <= 0 ] = '' ; 
let [ x = await == 0 ] = '' ; 
let [ x = await > 0 ] = '' ; 
let [ x = await >= 0 ] = '' ; 
let [ x = await ? 0 : 0 ] = '' ; 
let [ x = await ?. x ] = '' ; 
let [ x = await ?? 0 ] = '' ; 
let [ x = await ] = '' ; 
let [ x = await `` , , ] = `` ; 
let [ x = await instanceof 0 ] = '' ; 
let [ x = ~ await ] = '' ; 
let [ { } = await ] = '' ; 
let await ; await ; 
let await ; var [ ] = await ; 
let await = 0 ; do ; while ( await ) ; 
let await = 0 ; for ( let x ; 1 <= await ; 0 ) ; 
let await = await . x ++ ; 
let await = await ; 
let x , [ ] = 0 [ 0 , await ] -- , await ; { } 
let x , [ ] = 0 [ await , x ] -- , await ; 
let x , await = ! await == x ; 
let x , await = 0 == 0 == await != 0 ; 
let x , await = 0 === await ; 
let x , await = `` [ - await ] ; 
let x , await = await ( ) ; 
let x , await = await . x ; 
let x , await = await ; 
let x , await = await == new x == x != 0 ; 
let x , await = new '' [ 0 + await % 0 ] ; 
let x , await = new 0 [ await ] ; 
let x , await = true == await ; 
let x , await = typeof 0 + ! ! await ; 
let x , await = typeof 0 + await . x ; 
let x , await = ~ await ; 
let x , await = ~ { [ 0 | 0 === 0 ^ 0 | 0 ] : await } ; 
let x , await = ~ { [ await | 0 . x . x === 0 ^ 0 | 0 ] : true } ; 
let x ; ( x ??= await ) ; 
let x ; [ 0 , , ... void await ] ; 
let x ; [ await = 0 ] = `` ;
let x ; [ await = 0 ] = `` ; class await { }
let x ; [ await ] = `` ;
let x ; [ await ] = `` ; class await { }
let x ; [ x = await ] = '' ; class await { }
let x ; [ x = await ] = `` ;
let x ; [ x ] = await ??= 0 ; 
let x ; [ { 0 : await = 0 } = 0 ] = '' ;
let x ; [ { 0 : await } = 0 ] = `` ;
let x ; [ { 0 : await } = 0 ] = `` ; class await { }
let x ; [ { 0 : x = await } = 0 ] = '' ;
let x ; for ( + void ~ await ; 0 ; ) ; ; 
let x ; for ( 0 ; x !== await ; 0 ) ; 
let x ; for ( 0 ? 0 : await ; 0 ; ) ; 
let x ; for ( await . x ; 0 ; ) ; 
let x ; for ( await <= 0 ; 0 ; ) ; 
let x ; for ( await ??= 0 | 0 ; 0 ; ) ; 
let x ; for ( x ; 0 instanceof await ; ) ; 
let x ; for ( x => 0 ; await ?? 0 ; ) ; 
let x ; for ( x => 0 ; null ?? await ; ) ; 
let x ; for ( x => 0 ; this . x ^= 1 ; ) if ( await ) ; 
let x ; for ( x => 0 ; this . x ^= 1 ; ) if ( await ) ; else ; 
let x ; if ( await ) ; else ; 
let x ; switch ( 0 ) { case { } = await : default : } 
let x ; throw await &&= 0 ; 
let x ; x ( await ??= 0 ) ; 
let x ; x ( x ??= await ) ; 
let x = ! await ; 
let x = 'str' [ 0 ] &&= await += /a/ ; 
let x = 'str' [ 0 ] &&= await ||= 0 ; 
let x = ( ... [ ] ) => 0 ; x ( 0 !== 0 ? 0 : await ) ; x ( ) ; 
let x = + await ; 
let x = ++ await ; 
let x = - await ; 
let x = -- await ; 
let x = -- function ( ) { } ( ) [ await ] ; 
let x = 0 != await ; 
let x = 0 !== ++ await ; 
let x = 0 !== 0 % { [ Symbol . toPrimitive ] : await => { } } <= 0 ; 
let x = 0 !== 0 / x - await <= 0 ; 
let x = 0 !== 1 <= await ; 
let x = 0 % await ; 
let x = 0 & await ; 
let x = 0 ** await ; 
let x = 0 + await ; 
let x = 0 - await ; 
let x = 0 . x %= await &&= 0 ; 
let x = 0 . x %= await ; 
let x = 0 . x += [ ] = await ; 
let x = 0 . x /= await ; 
let x = 0 . x = await ; 
let x = 0 . x ?? await ; 
let x = 0 . x ??= await ; 
let x = 0 . x ||= await ; 
let x = 0 < await ; 
let x = 0 < import ( 0 in await ) ?. x ; 
let x = 0 < import ( 0 instanceof await ) ?. x ; 
let x = 0 < import ( await !== 0 in 0 && 0 ^ 0 ) ( ) ?. x ; 
let x = 0 < import ( await !== 0 in 0 ) ?. x ; 
let x = 0 < import ( await ( ) ) ?. x ; 
let x = 0 < import ( await ) ( ) ?. x ; 
let x = 0 < import ( await ) ?. x ; 
let x = 0 < import ( await === 0 in 0 + 0 ) ?. x ; 
let x = 0 < import ( await ?. ( ) ) ( ) ?. x ; 
let x = 0 < import ( await in 0 ) ?. x ; 
let x = 0 < import ( await instanceof 0 ) ?. x ; 
let x = 0 < import ( await || 0 ^ 0 in 0 ) ?. x ; 
let x = 0 << await ; 
let x = 0 <= ! 0 && await ; class await { } 
let x = 0 <= await ; 
let x = 0 == 0 && await ; 
let x = 0 === -- await ; 
let x = 0 === await ; 
let x = 0 === await in 0 ; 
let x = 0 > await ; 
let x = 0 >= await ; 
let x = 0 >> await ; 
let x = 0 >>> 0 ** await ; 
let x = 0 >>> await ; 
let x = 0 ^ await ; 
let x = 0 ^ await ?. x ; 
let x = 0 in await ; 
let x = 0 instanceof await ; 
let x = 0 | await ; 
let x = 1 && await ; 
let x = `${ 0 }` [ 0 ] &&= ! 0 >>> await ; 
let x = `${ 0 }` [ 0 ] &&= -- await ; 
let x = `${ 0 }` [ 0 ] &&= 0 & 0 << void await ; 
let x = `${ 0 }` [ 0 ] &&= 0 === await ; 
let x = `${ 0 }` [ 0 ] &&= 0 [ 0 ] . x >>> await ; 
let x = `${ 0 }` [ 0 ] &&= 0 in await ; 
let x = `${ 0 }` [ 0 ] &&= `${ await }` ; 
let x = `${ 0 }` [ 0 ] &&= await !== - 0 ; 
let x = `${ 0 }` [ 0 ] &&= await && 0 ; 
let x = `${ 0 }` [ 0 ] &&= await &&= 0 ; 
let x = `${ 0 }` [ 0 ] &&= await <= 0 ; 
let x = `${ 0 }` [ 0 ] &&= await = 0 ; 
let x = `${ 0 }` [ 0 ] &&= await ??= 0 ; 
let x = `${ 0 }` [ 0 ] &&= await instanceof x ; 
let x = `${ 0 }` [ 0 ] &&= null . x >>> await ; 
let x = `${ 0 }` [ 0 ] &&= void await ; 
let x = `${ 0 }` [ 0 ] &&= x = await ; 
let x = `${ await }` ; 
let x = `` [ await ] ; 
let x = async function * x ( ) { } ^ await ; 
let x = await != '' ; 
let x = await !== 0 ; 
let x = await !== x > 0 ; 
let x = await % 0 ; 
let x = await & 0 ; 
let x = await & x ; 
let x = await && 0 ; 
let x = await &&= 0 ; 
let x = await &&= 0 ; x ( ) ; 
let x = await ( ) ; 
let x = await ** x ; 
let x = await , [ ] = 0 ; 
let x = await -- ; 
let x = await . x ; 
let x = await ; 
let x = await ; function await ( ) { }
let x = await < 0 ; 
let x = await << 0 ; 
let x = await <= 0 ; 
let x = await = 0 ; 
let x = await = 0 ; x ( ) ; 
let x = await == 0 ; 
let x = await == 0 << x ; 
let x = await === 0 in 0 ; 
let x = await > 0 ; 
let x = await >= 0 ; 
let x = await >= x ; 
let x = await >> 0 ; 
let x = await >>> 0 ; 
let x = await ? 0 : 0 ; 
let x = await ?. x ; 
let x = await ?? 0 ; 
let x = await ??= 0 ; 
let x = await ^ 0 ; 
let x = await in x ; 
let x = await instanceof 0 ; 
let x = await instanceof x ; 
let x = await | 0 ; 
let x = await || 0 ; 
let x = await ||= 0 ; 
let x = await ||= 0 ; 0 ; 
let x = class x { } ^ await ; 
let x = delete ! await ; 
let x = delete void await ; 
let x = function ( ) { } ( ) [ await ] ; 
let x = function * ( ) { } ( ) [ await ] ; 
let x = typeof await -- ; 
let x = typeof await ; 
let x = typeof await ; class await { } 
let x = void await !== 0 ; 
let x = void await ; 
let x = x = await ; 
let x = { } << await `` ; 
let x = ~ await ; 
let { 0 : x = await } = 0 ; 
let { await = await , ... x } = 0 ; 
let { x = 0 . x ||= await } = 0 ; 
let { x = 0 instanceof await } = 0 ; 
let { x = `` << 0 * - 0 in [ ] === await } = 0 ; 
let { x = await ( ) } = 0 ; 
let { x = await ?. x } = 0 ; 
let { x = await `` } = 0 ; 
let { x = await in x } = 0 ; 
let { x = await instanceof [ ] } = 0 ; 
let { x } = 0 % await ; 
let { x } = typeof await ; 
let { x } = void await ; 
let { } = await , await , x ; 
new '' ( 0 , ... 0 - await ) ; 
new '' ( 0 , ... 0 | await ) ; 
new 0 ( 0 !== await ) ; 
new 0 ( 0 , ... function * ( ) { } ( ) [ await &&= 0 ] ++ ) ; 
new 0 ( 0 , 0 . x = await ) ; 
new 0 ( 0 , 0 || await ) ; 
new 0 ( 0 , null . x || await ) ; 
new 0 ( 0 , null || await ) ; 
new 0 ( 0 , true . x || await ) ; 
new 0 ( await || 0 ) ; 
new 0 ( this ? await : 0 . x ) ; 
new Map ( 0 , await = 0 ) ; 
new Promise ( await => { '' ( ) ?. x ; return 0 ? 0 : void 0 ; } ) ; 
new Promise ( await => { 0 ( ) ?. x ; return 0 ? 0 : 0 <= 0 ; } ) ; 
new Promise ( await => { 0 ( ) ?. x ; return 0 ? delete 0 : 0 ; } ) ; 
new Set ( this < await `` ) ; 
new `` ( ... void await ) ; 
new `` ( 0 , ... ! await ) ; 
new `` ( await && 0 ) ; 
new class extends null { static [ await = 0 ] ; } ; 
new new class { } ( await `` , ) & 0 ; 
new { * [ await -- ] ( ) { } , } ; 
new { * [ await -- ] ( ) { } , } ; class await { } 
new { ... - await } ; 
new { ... await &&= 0 } ; 
new { ... await > 0 , } ; 
new { ... { [ Symbol . toPrimitive ] : await => - 0 } != 0 > 0 <= 0 <= 0 } ; 
new { ... { [ Symbol . toPrimitive ] : await => 0 !== '' != 0 } != 0 > 0 <= 0 <= 0 } ; 
new { ... { [ Symbol . toPrimitive ] : await => 0 % 0 % 0 } != 0 > 0 <= 0 <= 0 } ; 
new { ... { [ Symbol . toPrimitive ] : await => 0 } != 0 < 0 } ; 
new { ... { [ Symbol . toPrimitive ] : await => 0 } != 0 > 0 <= 0 % 0 <= 0 } ; 
new { ... ~ 0 ? await : 0 } ; 
new { 0 : 0 [ 0 ] ||= void await , } ; 
new { 1 : [ ] = await } ; 
new { 1 : await && 0 } ; 
new { 1 : await || 0 } ; 
new { 1 : function * ( ) { } ( ) [ 0 !== await ] } ; 
new { 1 : function * ( ) { } ( ) [ await ] } ; 
new { [ 0n in await ] : 0 } ; 
new { [ async function ( ) { } ( ) [ await >>= { } ] ] : 0 } ; 
new { [ await in this ] : 0 } ; 
new { [ ~ await ] : 0 } ; 
null ?? await ; 
switch ( '' ?. x ) { case void await : ; } 
switch ( 0 ) { case '' : default : case this [ await ] : } 
switch ( 0 ) { case '' : default : case { x } [ await ] : } 
switch ( 0 ) { case - await : default : } 
switch ( 0 ) { case 0 != await : default : } 
switch ( 0 ) { case 0 !== await : ; } 
switch ( 0 ) { case 0 !== await : default : } 
switch ( 0 ) { case 0 & 0 == 0 instanceof await : break ; } 
switch ( 0 ) { case 0 & await : let x ; } 
switch ( 0 ) { case 0 ( ... await , ) : default : } 
switch ( 0 ) { case 0 ** await : default : } 
switch ( 0 ) { case 0 . x = await in 0 : } 
switch ( 0 ) { case 0 . x === await : } 
switch ( 0 ) { case 0 . x [ 0 , 0 ] & await : } 
switch ( 0 ) { case 0 : if ( 0 ) ; else await ; } 
switch ( 0 ) { case 0 : throw await ; } 
switch ( 0 ) { case 0 << await : } 
switch ( 0 ) { case 0 <= 0 | await : default : } 
switch ( 0 ) { case 0 == await : let x ; } 
switch ( 0 ) { case 0 === await : default : case 0 : } 
switch ( 0 ) { case 0 === await : } 
switch ( 0 ) { case 0 ^ await : default : case 0 : } 
switch ( 0 ) { case 0 ^ await : } 
switch ( 0 ) { case 0 in await : default : case 0 : } 
switch ( 0 ) { case 0 instanceof await : default : case 0 : } 
switch ( 0 ) { case 0 instanceof await : } 
switch ( 0 ) { case 1 ? await : 0 : } 
switch ( 0 ) { case [ await ] : default : } 
switch ( 0 ) { case `` ? 0 : await : default : } 
switch ( 0 ) { case `` in await : ; } 
switch ( 0 ) { case `` || await : 0 ( ) ; default : case 0 : } 
switch ( 0 ) { case await %= 0 : break ; } 
switch ( 0 ) { case await && 0 : default : } 
switch ( 0 ) { case await &&= 0 : default : } 
switch ( 0 ) { case await ( ) : } 
switch ( 0 ) { case await , 0 : } 
switch ( 0 ) { case await : ; } 
switch ( 0 ) { case await : default : case 0 : } 
switch ( 0 ) { case await : default : } 
switch ( 0 ) { case await : } 
switch ( 0 ) { case await = 0 : default : case 0 : } 
switch ( 0 ) { case await = function x ( ) { } : default : } 
switch ( 0 ) { case await = new 0 : default : } 
switch ( 0 ) { case await === 0 : } 
switch ( 0 ) { case await > 0 : let x ; } 
switch ( 0 ) { case await ?. x : default : case 0 : } 
switch ( 0 ) { case await ?? 0 : default : case 0 : } 
switch ( 0 ) { case await ??= 0 : default : case 0 : break ; } 
switch ( 0 ) { case await ??= 0 : } 
switch ( 0 ) { case await instanceof function ( ) { } : } 
switch ( 0 ) { case await | 0 : default : case 0 : } 
switch ( 0 ) { case await ||= 0 : default : } 
switch ( 0 ) { case function ( ) { } ( ) [ await ] : default : } 
switch ( 0 ) { case new 0 === await : } 
switch ( 0 ) { case null ?? await : default : case 0 : async function * await ( ) { } } 
switch ( 0 ) { case null ?? await : default : case 0 : } 
switch ( 0 ) { case true && await : default : case 0 : } 
switch ( 0 ) { case { [ Symbol . toPrimitive ] : await => 0 } << 1 : } 
switch ( 0 ) { case { } = await : ; } 
switch ( 0 ) { default : case ! await : break ; } 
switch ( 0 ) { default : case 0 != 0 !== await : } 
switch ( 0 ) { default : case 0 ^ await : } 
switch ( 0 ) { default : case await : } 
switch ( 0 ) { default : case await >> 0 : } 
switch ( 0 ) { default : case await ?? 0 : ; } 
switch ( 0 ) { default : case await `` : break ; } 
switch ( 0 ) { default : case await `` >= { } : } 
switch ( 0 ) { default : case await instanceof 0 : } 
switch ( 0 ) { default : case await ||= 0 : } 
switch ( 0 ) { default : case x >>> await : } 
switch ( 0 ) { default : case { x : 0 } && await : } 
switch ( 0 ) { default : class await { } case await : } 
switch ( 0 ) { default : if ( await ) ; } 
switch ( 0 ) { default : throw await ; case 1 : } 
switch ( 0 ) { default : x ( 0 ) ; case await . x : } 
switch ( 0 | { [ Symbol . toPrimitive ] : await => { } } ) { } 
switch ( 1 ) { case 0 : default : case await &&= 0 : } 
switch ( 1 ) { case await : default : case 0 : } 
switch ( `${ 0 }` [ 0 ] . x ? 0 : await ) { } 
switch ( await !== 0 in 0 ) { } 
switch ( await &&= 0 ) { case 0 : default : } 
switch ( await &&= 0 ) { } 
switch ( await ) { } 
switch ( await << 0 ) { } 
switch ( await ? 0 : 0 ) { } 
switch ( await ?? 0 ) { } 
switch ( await ??= 0 ) { case 0 && 0 : default : } 
switch ( await ??= 0 ) { } 
switch ( null ?? await ) { } 
throw + await ? 0 : 0 ; 
throw 0 - await ; 
throw 0 < + - await ; 
throw 0 ^ ! await ; 
throw 0 || await ; 
throw 1 && await ; 
throw [ await , ] ; 
throw await ** 0 ; 
throw await -- ? 0 : 0 ; 
throw await ; 
throw await == 0 >= 0 ; 
throw await ? 0 : 0 ; 
throw function ( ) { ; ; ; } ( ) [ await ] !== 0 ; 
true / '' [ await ??= 0 ] ; 
try { do 0 ; while ( await ) ; } catch ( [ ] ) { } finally { } 
try { for ( var await in [ await , ] ) ; } catch { } 
try { for ( var await in await ) ; } catch { } 
try { for ( var x in await ) ; } catch { } 
try { throw 0 ; } catch ( x ) { if ( await ) ; else ; } 
typeof 0 [ await ] -- ; 
typeof `${ await }` ; 
typeof await !== 0 ; 
typeof await ++ ; 
typeof await ; 
var [ , ] = await &&= 0 ; 
var [ , x = 0 ? 0 : await ] = `` ; 
var [ , x = await != 0 ] = `` ; 
var [ , x = await ++ ] = `` ; 
var [ , x = await ??= 0 ] = `` ; 
var [ , x = await ] = `` ; 
var [ , x = await ] = `` ; let await ;
var [ , x ] = + await ; 
var [ , x ] = 0 !== await ; 
var [ , x ] = 0 ** await ; 
var [ , x ] = 0 . x ||= 0 . x ||= await ; 
var [ , x ] = 0 . x ||= x <= + await ; 
var [ , x ] = 0 <= await ; 
var [ , x ] = await !== 0 ; 
var [ , x ] = await % x ; 
var [ , x ] = await ** ! 0 ; 
var [ , x ] = await <= 0 ; 
var [ , x ] = await == 0 ; 
var [ , x ] = await ||= 0 ; 
var [ , x ] = x % await ; 
var [ , x ] = x == await ; 
var [ , x ] = x [ await ] ; 
var [ [ ] = 0 * await ] = `` ; 
var [ [ ] = 0 . x %= await ] = `` ; 
var [ [ ] = 0 <= await ] = `` ; 
var [ [ ] = 0 >>> await ] = `` ; 
var [ [ ] = 0 || await ] = `` ; 
var [ [ ] = 1 !== await ] = `` ; 
var [ [ ] = await & 0 ] = `` ; 
var [ [ ] = await ? 0 : 0 ] = `` ; 
var [ [ ] = await ?. x ] = `` ; 
var [ [ ] = await ] = `` ; 
var [ [ ] = true ? await : 0 ] = `` ; 
var [ [ ] = ~ await ] = `` ; 
var [ ] = 0 & await ; 
var [ ] = 0 >> await ; 
var [ ] = 0 >>> await ; 
var [ ] = 0 ? 0 : await ; 
var [ ] = `${ await }` ; 
var [ ] = await , x , x ; 
var [ ] = await . x %= 0 ; 
var [ ] = await ; 
var [ ] = await ? 0 : 0 ; 
var [ ] = await ?? 0 ; 
var [ await = 0 ] = await ; 
var [ await = await , , ] = `` ; 
var [ await = await ] = `` ; 
var [ x , ... [ x , x = 1n . x = await ] ] = await ; let await = 0 ; 
var [ x , x = await . x ] = '' ; 
var [ x , x = await ] = '' ; 
var [ x , x = await ] = `` ; 
var [ x = ! await ] = `` ; 
var [ x = + await ] = `` ; 
var [ x = - 0 & await ] = `` ; 
var [ x = - await ] = `` ; 
var [ x = 0 != await ] = `` ; 
var [ x = 0 !== await ] = `` ; 
var [ x = 0 * await ] = `` ; 
var [ x = 0 ** await ] = `` ; 
var [ x = 0 + await ] = `` ; 
var [ x = 0 . x %= await ] = `` ; 
var [ x = 0 . x ||= await ] = `` ; 
var [ x = 0 << await ] = `` ; 
var [ x = 0 <= await ] = `` ; 
var [ x = 0 === await ] = `` ; 
var [ x = 0 > await ] = `` ; 
var [ x = 0 >= await ] = `` ; 
var [ x = 0 >> await ] = `` ; 
var [ x = 0 >>> await ] = `` ; 
var [ x = 0 ^ await ] = `` ; 
var [ x = 0 in await , ... x ] = '' ; 
var [ x = 0 in await ] = `` ; 
var [ x = 0 | await ] = `` ; 
var [ x = 1n ? await : 0 ] = `` ; 
var [ x = [ await ] ] = `` ; 
var [ x = `${ await }` ] = `` ; 
var [ x = await != 1n ] = `` ; 
var [ x = await & 0 . x -- ] = `` ; 
var [ x = await && 0 ] = `` ; 
var [ x = await && 0 ] = `` ; function await ( ) { } 
var [ x = await ( ) ] = `` ; 
var [ x = await ** 0 ] = `` ; 
var [ x = await , , ... x ] = `` ; 
var [ x = await , ... x ] = '' ; 
var [ x = await , ... x ] = `` ; 
var [ x = await -- ] = `` ; 
var [ x = await . x %= 0 ] = `` ; 
var [ x = await < 0 ] = `` ; 
var [ x = await << 0 , ... x ] = '' ; 
var [ x = await << 0 ] = `` ; 
var [ x = await <= 0 ] = `` ; 
var [ x = await = 0 , , ... x ] = `` ; 
var [ x = await = 0 ] = `` ; 
var [ x = await == 0 ] = `` ; 
var [ x = await === 0 , ... x ] = '' ; 
var [ x = await === 0 ] = `` ; 
var [ x = await > 0 ] = `` ; 
var [ x = await >= x ] = `` ; 
var [ x = await >> 0 ] = `` ; 
var [ x = await >>> x ] = `` ; 
var [ x = await ? 0 : 0 ] = `` ; 
var [ x = await ] = '' ;
var [ x = await ] = `` ; 
var [ x = await ] = `` ; let await ;
var [ x = await ^ 0 ] = `` ; 
var [ x = await ^ 0 ] = `` ; class await { } 
var [ x = await `` [ 0 ] ] = `` ; 
var [ x = await in 0 , ... x ] = '' ; 
var [ x = await in { } ] = `` ; 
var [ x = await | 0 ] = `` ; 
var [ x = await || 0 ] = `` ; 
var [ x = await || ~ 0 , ... x ] = '' ; 
var [ x = await ||= 0 ] = `` ; 
var [ x = null - await ] = `` ; 
var [ x = this . x ?? await ] = `` ; 
var [ x = typeof 0 && await ] = `` ; 
var [ x = typeof await , ... x ] = '' ; 
var [ x = typeof await ] = `` ; 
var [ x = void await ] = `` ; 
var [ x = x < await ] = `` ; 
var [ x = x = await ] = `` ; 
var [ x = x == await ] = `` ; 
var [ x = x => 0 ] = await in `` ; 
var [ x = x => 0 ] = x in await ; 
var [ x = x ??= await ] = `` ; 
var [ x = x || await ] = `` ; 
var [ x = { [ Symbol . toPrimitive ] : await => 0 } == 0 % 0 ] = `` ; 
var [ x = { [ Symbol . toPrimitive ] : await => 0 } == 0 ** 0 ] = `` ; 
var [ x = ~ await ] = `` ; 
var [ x ] = 0 > await ; 
var [ x ] = 0 ^ await ; 
var [ x ] = await > 0 ; 
var [ x ] = await ??= 0 ; 
var [ x ] = await ^ 0 ; 
var [ x ] = await || 0 ; 
var [ x ] = x ??= await ; 
var [ x ] = x || await ; 
var [ x ] = { [ 0 ] : await = x } ; 
var [ x ] = { [ Symbol . iterator ] : await ??= 0 } ; 
var [ x ] = { [ await && 0 ] : x = `` } ; 
var [ x ] = ~ 0 && await . x ; 
var x , [ ... x ] = await = 0 ; 
var x , [ ... x ] = x = await ; 
var x , [ ... x ] = x = await `` ; 
var x , [ x = await , , ... x ] = `` ; 
var x , x = 0 != -- await . x < x ; 
var x , x = 0 != -- await < x ; 
var x , x = 0 != await ; 
var x , x = await ; 
var x ; ( x , await ) ; 
var x ; [ ] ( x , await . prototype ) ; 
var x ; [ `` / { [ await ++ ] : 0 } ] ; 
var x ; for ( 0 ; x !== await ; 0 ) ; 
var x = ! ! await ; 
var x = ! 0 - await ; 
var x = ! await ; 
var x = '' || await ; 
var x = ( 0 || await ) ; 
var x = ( 1 && await ) ; 
var x = ( await || 0 ) ; 
var x = ( x => 0 ) ( ) [ await ] &&= 0 ;
var x = ( { [ Symbol . toPrimitive ] : await => 0 } & 0 ) ; 
var x = + await ; 
var x = + await === 0 ; 
var x = - 0 != `` ^ await ; 
var x = - await ++ ; 
var x = - await ; 
var x = 0 != await ; 
var x = 0 !== await != 0 ; 
var x = 0 !== await ; 
var x = 0 % await ; 
var x = 0 % await ; class await { } 
var x = 0 & await -- ; 
var x = 0 & await ; 
var x = 0 * await ; 
var x = 0 ** await ; 
var x = 0 + await ; 
var x = 0 . x %= await ; 
var x = 0 . x ??= [ ] = await ; 
var x = 0 . x ??= await ; 
var x = 0 . x ||= ! await ; 
var x = 0 . x ||= + await ; 
var x = 0 . x ||= 0 << await ; 
var x = 0 . x ||= await ; 
var x = 0 . x ||= await << 0 ; 
var x = 0 < await ; 
var x = 0 << await ; 
var x = 0 <= await ; 
var x = 0 == 0 == `` ? 0 : await ; 
var x = 0 == 0 > 0 === await ; 
var x = 0 == await ; 
var x = 0 === 0 && await ; 
var x = 0 === await ; 
var x = 0 > await ; 
var x = 0 >= await ; 
var x = 0 >> await ; 
var x = 0 >>> await ; 
var x = 0 ?. x || await ; 
var x = 0 [ 0 . x %= await = 0 ] %= 0 ; 
var x = 0 [ 0 . x %= await = 0 ] %= 0 ; class await { } 
var x = 0 [ 0 . x %= await = 0 ] %= 0 ; function await ( ) { } 
var x = 0 [ await ] ; 
var x = 0 ^ await ; 
var x = 0 in await ; 
var x = 0 instanceof await ; 
var x = 0 | await ; 
var x = 1 && await ; 
var x = 1 ? await : 0 ; 
var x = [ ] [ 0 ] ??= await &&= 0 ; 
var x = `${ await }` ; 
var x = async function * ( ) { } ( ) [ await ] ; 
var x = await != 0 ; 
var x = await != 0 < 0 ; 
var x = await !== 0 ; 
var x = await % 0 ; 
var x = await & 0 ; 
var x = await & x ; 
var x = await && 0 ; 
var x = await &&= 0 ; 
var x = await ( ) ; 
var x = await ( ) === 0 ; 
var x = await ** 0 ; 
var x = await -- ; 
var x = await . x ++ ; 
var x = await . x ; 
var x = await ; 
var x = await ; class await { }
var x = await < 0 ; 
var x = await << 0 ; 
var x = await << x ; 
var x = await <= 0 ; 
var x = await <= 0 in 0 ; 
var x = await = 0 ; 
var x = await == 0 ; 
var x = await === 0 ; 
var x = await => { await ; } ; x ( ) ; 
var x = await => { x } ; x ( ) ; 
var x = await > 0 ; 
var x = await >= 0 ; 
var x = await >> 0 ; 
var x = await >>> 0 ; 
var x = await ? 0 : 0 ; 
var x = await ?. x ; 
var x = await ?. x ?. x ; 
var x = await ?? 0 ; 
var x = await ?? x ; 
var x = await ??= 0 ; 
var x = await ^ 0 ; 
var x = await in 0 ; 
var x = await instanceof 0 [ 0 ] ; 
var x = await | 0 ; 
var x = await | 1 ; 
var x = await || 0 ; 
var x = await ||= 0 ; 
var x = null ?? await ; 
var x = true ? await : 0 ; 
var x = typeof await ++ ; 
var x = typeof await ; 
var x = void await ; 
var x = void ~ void await ; 
var x = x %= await ; 
var x = x + await ; 
var x = x = await ; 
var x = x = await = 0 ; 
var x = x == await ; 
var x = x ?? await ; 
var x = x ||= await ; 
var x = { ... 0 || { [ await -- ] : false } } ; 
var x = { ... await || 0 } ; 
var x = { 0 : 0 . x = await -- } ; 
var x = { 0 : 0 [ 0 ] **= ++ await . x } ; 
var x = { 0 : await != { 1 : 0 } } ; 
var x = { 0 : await -- } ; 
var x = { 0 : await in x } ; 
var x = { 0 : void await in this } ; 
var x = { [ await || 0 ] ( ) { } } ; 
var x = { x = 0 !== await , } = 0 ; 
var x = { x = 0 & await , } = 0 ; 
var x = { x = 0 & { then : await } , } = 0 ; 
var x = { x = 0 . x %= await , } = 0 ; 
var x = { x = 0 . x ??= await , } = 0 ; 
var x = { x = 0 === await , } = 0 ; 
var x = { x = 0 || await , } = 0 ; 
var x = { x = `${ await }` , } = 0 ; 
var x = { x = await !== 0 , } = 0 ; 
var x = { x = await & { } , } = 0 ; 
var x = { x = await && 0 , } = 0 ; 
var x = { x = await , } = 0 ; 
var x = { x = await , } = 0 ; async function * await ( ) { } 
var x = { x = await . x ??= 0 , } = 0 ; 
var x = { x = await < 0 , } = 0 ; 
var x = { x = await ? 0 : 0 , } = 0 ; 
var x = { x = await || 0 , } = 0 ; 
var x = { x = x ?? await , } = 0 ; 
var x = { } ; 0n . setPrototypeOf ( x , await . prototype ) ; x . size ; 
var x = { } = await ; 
var x = ~ await ; 
var { ... x } = 0 + await ; 
var { ... x } = 0 - await ; 
var { ... x } = 0 - typeof await ; 
var { ... x } = await & x ; 
var { ... x } = await === 0 ?. x === 0 < 0 ; 
var { ... x } = { [ Symbol . toPrimitive ] : '' } - typeof await ; 
var { ... x } = { [ Symbol . toPrimitive ] : function * ( x ) { } } - typeof await ; 
var { 0 : [ ] = ! await } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 0 } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 0n } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 1 } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => 1n } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => `${ 0 }` } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => null } , } = 0 ; 
var { 0 : [ ] = 0 != 0 instanceof { [ Symbol . hasInstance ] : await => { done : async * function ( x ) { } } } , } = 0 ; 
var { 0 : [ ] = 0 . x = await } = 0 ; 
var { 0 : [ ] = 0 [ function * ( ) { } ( ) [ await ] [ 0 ] &&= 0 ] } = 0 ; 
var { 0 : [ ] = 0 || await } = 0 ; 
var { 0 : [ ] = 1n && await , } = 0 ; 
var { 0 : [ ] = await !== 0 } = 0 ; 
var { 0 : [ ] = await . x , } = 0 ; 
var { 0 : [ ] = await . x } = 0 ; 
var { 0 : [ ] = await ? 0 : 0 } = 0 ; 
var { 0 : [ ] = await } = 0 ; 
var { 0 : [ ] = await } = 0 ; async function * await ( ... x ) { } 
var { 0 : [ ] = typeof 0 && await } = 0 ; 
var { 0 : x = await %= 0 } = 0 ; 
var { 0 : x = await -- } = 0 ; 
var { 0 : x = await } = 0 ; 
var { 0 : x = x %= await } = 0 ; 
var { 0 : x } = await ??= 0 ; 
var { 0 : { } } = `${ { [ Symbol . toPrimitive ] : await => 0 in 0 } }` ; 
var { [ + await ] : x } = 0 ; 
var { [ 0 << await ] : x } = 0 ; 
var { [ await << 0 ] : x } = 0 ; 
var { [ await ] : x , } = 0 ; 
var { [ await ] : x } = 0 ; 
var { await = 0 } = await ; 
var { x , ... x } = { x , get [ await ] ( ) { } } ; 
var { x = ! await } = 0 ; 
var { x = '' >>> await } = 0 ; 
var { x = + await } = 0 ; 
var { x = - await } = 0 ; 
var { x = 0 != await } = 0 ; 
var { x = 0 & await } = 0 ; 
var { x = 0 * await } = 0 ; 
var { x = 0 ** await } = 0 ; 
var { x = 0 + await } = 0 ; 
var { x = 0 - await } = 0 ; 
var { x = 0 . x = await } = 0 ; 
var { x = 0 < await } = 0 ; 
var { x = 0 << await } = 0 ; 
var { x = 0 <= await } = 0 ; 
var { x = 0 == await } = 0 ; 
var { x = 0 > await } = 0 ; 
var { x = 0 >= await } = 0 ; 
var { x = 0 >> await } = 0 ; 
var { x = 0 [ await ] } = 0 ; 
var { x = 0 ^ await } = 0 ; 
var { x = 0 in await } = 0 ; 
var { x = 0 | await } = 0 ; 
var { x = 0 || await } = 0 ; 
var { x = [ 1 ] [ 0 ] &&= await } = 0 ; 
var { x = [ ] . x ??= await } = 0 ; 
var { x = [ ] [ 0 ] ??= await } = 0 ; 
var { x = [ await , , ] } = 0 ; 
var { x = `${ await }` } = 0 ; 
var { x = async function ( ) { } ( ) [ await ] } = 0 ; 
var { x = async function ( ) { } ( ) [ x [ await ] ] } = 0 ; 
var { x = async function * x ( ) { } ? await : 0 } = 0 ; 
var { x = await != 0 } = 0 ; 
var { x = await !== ~ 0 } = 0 ; 
var { x = await % 0 } = 0 ; 
var { x = await %= 0 } = 0 ; 
var { x = await & 0 } = 0 ; 
var { x = await && 0 } = 0 ; 
var { x = await ( ) } = 0 ; 
var { x = await ** 0 } = 0 ; 
var { x = await . x } = 0 ; 
var { x = await / 0 } = 0 ; 
var { x = await < 0 } = 0 ; 
var { x = await << 0 } = 0 ; 
var { x = await <= 0 } = 0 ; 
var { x = await = 0 } = 0 ; 
var { x = await = x => 0 } = 0 ; 
var { x = await == x } = 0 ; 
var { x = await == { } } = 0 ; 
var { x = await === 0 } = 0 ; 
var { x = await > 0 } = 0 ; 
var { x = await >= 0 } = 0 ; 
var { x = await >> 0 } = 0 ; 
var { x = await >>> 0 } = 0 ; 
var { x = await ? 0 : 0 . x } = 0 ; 
var { x = await ? 0 : 0 } = 0 ; 
var { x = await ?. x } = 0 ; 
var { x = await ?? 0 } = 0 ; 
var { x = await ??= 0 } = 0 ; 
var { x = await ^ 0 } = 0 ; 
var { x = await in new 0 } = 0 ; 
var { x = await instanceof 0 } = 0 ; 
var { x = await | 0 } = 0 ; 
var { x = await || x } = 0 ; 
var { x = await ||= 0 } = 0 ; 
var { x = await } = 0 ; 
var { x = typeof await } = 0 ; 
var { x = void await } = 0 ; 
var { x = x <= await } = 0 ; 
var { x = x = await } = 0 ; 
var { x = x ?? await } = 0 ; 
var { x = x ||= await } = 0 ; 
var { x = ~ await } = 0 ; 
var { x } = '' . x ||= await ; 
var { x } = + ! 0 && await ; 
var { x } = + await ; 
var { x } = - await ; 
var { x } = 0 != await ; 
var { x } = 0 !== await ; 
var { x } = 0 % await ; 
var { x } = 0 - await ; 
var { x } = 0 . x ||= await ( ) ; 
var { x } = 0 in await ; 
var { x } = 0 instanceof await ; 
var { x } = await && 0 ; 
var { x } = await ( ) ; 
var { x } = await ** 0 ; 
var { x } = await += 0 ; 
var { x } = await . x %= 0 ; 
var { x } = await . x ; 
var { x } = await < 0 ; 
var { x } = await << 0 ; 
var { x } = await <= 0 ; 
var { x } = await = 0 ; class await { } 
var { x } = await = 0 ; function await ( ) { } 
var { x } = await > 0 ; 
var { x } = await >> 0 ; 
var { x } = await >>> 0 ; 
var { x } = await ?. x ; 
var { x } = await `` ;
var { x } = await instanceof x ; 
var { x } = function ( ) { } ( ) [ await ] ; 
var { x } = typeof await ; 
var { x } = x += await ; 
var { x } = x += { [ Symbol . toPrimitive ] : await => 0 } ; 
var { x } = x = await ; 
var { x } = x = await ; class await { } 
var { x } = { x = 1 != await } = 0 ; 
var { x } = { x = await != '' } = 0 ; 
var { x } = { x = await , x } = 0 ; 
var { x } = { x = await === 0 , x } = 0 ; 
var { x } = ~ await ; 
void - await ; 
void - void await & 0 ; 
void 0 [ await ] ; 
void await ; 
void await << 0 >> 1 ; 
void await >> 0 ^ 0 ; 
void await ?? 0 ; 
void await || 0 || 0 ; 
void function ( ) { } ( ) [ await ] ; 
void void await ; 
void ~ await ; 
while ( 0 & 0 ) await : for ( var x ; ; ) ; 
while ( 0 ( await ) ) ; 
while ( 0 ** void await ) ; 
while ( 0 , await ) ; 0 [ 0 ] >>>= 0 ; 
while ( 0 , x => 0 ) throw await ; 
while ( 0 . x ??= await ) ; 
while ( 0 > 0 in await -- ) ; 
while ( 0 >= await ) ; 
while ( 0 ? 0 : await ) ; 
while ( 0 ?. [ 0 . x ??= await ] ) ; 
while ( 0 ?. [ 0 [ 0 ] = await ] ) ; 
while ( 0 [ 0 ] ||= 0 . x ??= await ) ; 
while ( 1 ) throw await ; 
while ( [ ] && await ) ; 
while ( `${ await }` ) for ( var [ x , ] of 0 ) ; 
while ( await !== 0 < 0 ) break ; 
while ( await ( ... 0 ) ** 0 ) ; class await { } 
while ( await ( ... 0 ) ** 0 ) ; function * await ( ) { } 
while ( await ) ; 
while ( await ) ; class await { } 
while ( await ++ ) break ; 
while ( await = 0 ) ; 
while ( await ? 0 : 0 ) ; 
while ( await ??= 0 ) ; 
while ( await ||= 0 ) ; 
while ( function * ( ) { } ( ) [ await ] ) ; 
while ( function * ( ) { } ( ) [ await ] ++ ) ; 
while ( typeof await ) break ; 
while ( ~ 0 > function ( ) { } ( ) [ await ] in 0 ) ; 
while ( ~ 0 > function ( ) { } ( ) [ await ] in 0 ) for ( 0 ( ) [ 0 ] in 0 ) ; 
x : 0 , 0 + await ; 
x : 0 , await <= 0 ; 
x : ; try { while ( await ) ; } finally { } 
x : await : ;
x : await : break await ; 
x : await : break x ; 
x : await : for ( ; async function ( ) { } ( ) [ x ] ||= 0 ; 0 ) ; 
x : await : for ( ; function * ( ) { } ( ) [ + ! typeof + 0 ] ||= 0 ; 0 ) ; 
x : await : throw 0 ; 
x : do ; while ( await -- ) ; 
x : do ; while ( await === 0 ** 0 ) ; 
x : do await ; while ( async function ( ) { } ( ) [ 0 ] -- ) ; 
x : for ( let [ ] = await || 0 ; 0 , 0 ; 0 ) ; 
x : if ( '' . x ||= await ) ; 
x : if ( '' . x ||= await ) ; function await ( ) { } 
x : if ( await && 0 ) ; else ; 
x : if ( this == 0 > 0 === await ) ; else ; 
x : switch ( await ) { } class await { } 
x : switch ( void await ) { } 
x : while ( await ) ; class await { } 
x : { for ( 0 ; await ; 0 ) ; } 
x = 0 [ 0 ] = await ; 
x = 0 || await ; 
{ 0 <= await ; } 
{ 0 [ 0 ] ??= await ; } 
{ [ , ] = { [ Symbol . iterator ] : await => 0 } ; } 
{ [ , ] = { [ Symbol . iterator ] : await => class { } } ; } 
{ [ , ] = { [ Symbol . iterator ] : await => new 0 } ; } 
{ [ , ] = { [ Symbol . iterator ] : await => { } } ; } 
{ [ ] = 0 in await ; } 
{ [ ] = await ( ) ; } 
{ [ await `` ] [ 0 ] ++ ; } 
{ await &&= 0 ; } 
{ await ++ ?? 0 ; } 
{ await , x } ; 
{ await /= 0 ; } 
{ await ; } let await = 0 ; ;
{ await ; } var await ;
{ await = 0 } ; 
{ await === 0 ; } 
{ await [ 0 ] ++ ; } 
{ await } ;
{ function await ( ) { } x : var { x = await } = 0 ; } 
{ if ( ! await ) ; } 
{ if ( ! void x ) for ( var x of await ) ; } 
{ if ( 0 + await ) ; } 
{ if ( 0 == await ) ; } 
{ if ( 0 == await ) x : for ( var x in 0 ) ; } 
{ if ( 0 | await `` instanceof 0 . x ) ; } 
{ if ( [ 0 ] !== 0 ) if ( await ) ; } 
{ if ( `${ 0 }` [ 0 ] &&= `` . x ??= await ) ; } 
{ if ( `${ 0 }` [ 0 ] &&= await !== 0 ) ; } 
{ if ( `${ 0 }` [ 0 ] &&= await !== 0 ) var await ; } 
{ if ( `${ 0 }` [ 0 ] &&= await && 0 ) ; } 
{ if ( await != 0 ) ; } 
{ if ( await !== 0 ) ; } 
{ if ( await ) ; else ; } 
{ if ( await ) ; } 
{ if ( await . x ) ; } 
{ if ( await . x ) var await ; } 
{ if ( await === 1n ) ; } 
{ if ( await >= 0 ) ; } 
{ if ( null + this ) for ( 0 ; 1n ; 0 , 0 ( ) [ 0 ] ||= 0 ) await ; } 
{ if ( x => 0 ) for ( 0 ; 1 ; 0 ) throw await ; } 
{ if ( x => 0 ) for ( 0 ; 1n ; 0 , 0 ( ) [ 0 ] ||= 0 ) if ( await ) ; else ; } 
{ if ( { 0 : await } != 0n ) ; } 
{ let x = 0 . x = 0 == 0 > 0 ** await === 0 <= 0 ; } 
{ let x = await ; } 
{ let { x } = await ; } 
{ source : await ; } ; 
{ switch ( await ) { } ; } 
{ switch ( await . x ) { } } 
{ switch ( function ( ) { } ( ) [ await ] ) { } } 
{ throw await ; } 
{ typeof await ; } 
{ var x = await ; } 
{ var x = await ; } class await { } 
{ var { ... x } = await ; } 
{ var { x = await , } = 0 ; } 
{ while ( await ) ; } 
{ while ( await ) var await = 0 ; } 
{ x = - await ; } 
{ x = 0 > await ; } 
{ x = 0 >>> await ; } ; 
{ x = 0 instanceof await ; } ; 
{ x = [ await ] ; } ; 
{ x = `${ await }` ; } ; 
{ x = await ** 0 ; } 
{ x = await < 0 ; } 
{ x = await << 0 ; } ; 
{ x = await >> 0 ; } ; 
{ x = await ?. x ; } 
{ x = await ?? 0 ; async function * await ( ) { } } ; 
{ x = await ^ 0 ; } 
{ x = await instanceof await ; } ; 
{ x = await | 0 ; } 
{ x = function * ( ) { } ( ) [ await -- ] ++ ?? 0 ; let x ; } ; 
{ x = null [ 0 ] &&= await ; } ; 
{ x = void await ; } ; 
{ x = { x , } = await ; } ; 
{ x = ~ [ ... await , , ] ; } ; 
{ x = ~ await ; } ; 
{ { await ; } }
{ } - function ( ) { } ( ) [ await ] ; 
{ } - { [ Symbol . toPrimitive ] : await => new 0 } + 0 ; 
~ 0 [ void await ] ; 
~ `${ 0 !== await }` ; 
~ await ; 
~ await `` , 0 ; 
